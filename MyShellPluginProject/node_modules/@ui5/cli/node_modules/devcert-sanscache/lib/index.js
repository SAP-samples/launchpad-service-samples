"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commandExists = require("command-exists");
const install_authority_1 = require("./install-authority");
const openssl_1 = require("./openssl");
const fs = require("fs");
async function generateDevCert(commonName) {
    if (!commandExists.sync('openssl'))
        throw new Error('Unable to find openssl - make sure it is installed and available in your PATH');
    if (!commonName.match(/^[a-zA-Z0-9.]{1,64}$/))
        throw new Error(`Invalid Common Name ${commonName}.`);
    try {
        const opensslConfPath = openssl_1.generateOpensslConf(commonName);
        const { rootKeyPath, rootCertPath } = await openssl_1.generateRootCertificate(commonName, opensslConfPath);
        await install_authority_1.default(commonName, rootCertPath);
        const { keyPath, certPath, caPath } = openssl_1.generateSignedCertificate(commonName, opensslConfPath, rootKeyPath, rootCertPath);
        const key = fs.readFileSync(keyPath).toString();
        const cert = fs.readFileSync(certPath).toString();
        const ca = fs.readFileSync(caPath).toString();
        return { key, cert, ca };
    }
    finally {
        // clear all tmp files (including root cert!)
        openssl_1.tmpClear();
    }
}
exports.default = generateDevCert;
//# sourceMappingURL=index.js.map