
'use strict';

var _ = require('lodash');
var assert = require('assert');
var querystring = require('querystring');
var VError = require('verror').VError;
var traceUtils = require('../utils/trace-util');
var passportUtils = require('./utils');
var requestTraceEnabled = require('../utils/trace-util').requestTraceEnabled;
var loggerUtils = require('../utils/logger');
var logger = loggerUtils.getLogger('/request/uaa');

module.exports.OAuth2 = OAuth2;

function OAuth2(options) {
  ['clientid', 'clientsecret', 'tokenURL'].forEach(function (element) {
    assert(options[element], 'OAuth2 requires "' + element + '" option');
  });
  this._options = _.clone(options);
}

OAuth2.prototype.getCodeAuthorizationUrl = function (req, authorizationURL, callbackURL) {
  var authURLQuery = {
    'response_type': 'code',
    'client_id': this._options.clientid,
    'redirect_uri': callbackURL
  };
  if (req.internalUrl && req.internalUrl.route && req.internalUrl.route.identityProvider) {
    authURLQuery['login_hint'] = JSON.stringify({
      origin: req.internalUrl.route.identityProvider
    });
  }
  return authorizationURL + '?' + querystring.stringify(authURLQuery);
};

OAuth2.prototype.getOAuthAccessToken = function (params, loggingContext, callback) {
  var tracer = loggingContext.getTracer(__filename);
  if (tracer.isEnabled('debug')) {
    tracer.debug('requesting UAA at %s: parameters %s', this._options.tokenURL, traceUtils.stringifyQueryParameters(params));
  }
  var requestStart = Date.now();
  /* eslint-disable camelcase */
  params.client_id = this._options.clientid;
  /* eslint-disable camelcase */
  params.client_secret = this._options.clientsecret;
  var requestOptions = {
    headers: this._options.customHeaders,
    url: this._options.tokenURL,
    form: params
  };


  passportUtils.callUaa(requestOptions, null, function (err, uaaResponse) {
    if (err) {
      if (requestTraceEnabled) {
        logger.info('Request to UAA at %s failed in %d ms, error: %s', requestOptions.url, Date.now() - requestStart, err.message);
      }
      var error = new VError('request to UAA at %s failed, error: %s, ', requestOptions.url, err.message);
      error.status = err.status;
      return callback(error);
    }
    callback(null, uaaResponse);
  });
};
