'use strict';
var tokenUtils      = require('../utils/token-utils');
var uaaUtils        = require('../utils/uaa-utils');
var xsenv           = require('@sap/xsenv');
const CONNECTIVITY  = 'connectivity';
const XSUAA         = 'xsuaa';

module.exports = function renewToken(req, res, next) {
  if (req.internalUrl && req.internalUrl.route && req.internalUrl.route.service) {
    var serviceName = req.internalUrl.route.service;
    if (req && req.app && req.app.services && req.app.services[serviceName]){
      var service = req.app.services[serviceName];
      if (service.token && service.token.tokenRefreshTimestamp - Date.now() <= 0){
        var serviceFromEnvCredentials = getServiceByName(serviceName);
        return tokenUtils.loadClientCredentialsToken(req.app, serviceFromEnvCredentials, service, function(err){
          return next(err);
        });
      }
    }
  }
  if (req.internalUrl && req.internalUrl.route && req.internalUrl.route.destination &&
    req.app.services && req.app.services[CONNECTIVITY] && req.app.services[CONNECTIVITY].token) {

    var connectivityCredentials = getServiceByName(CONNECTIVITY);
    var ownUAACredentials       = getServiceByName(XSUAA);

    if (!connectivityCredentials || !ownUAACredentials){
      return next();
    }
    uaaUtils.getUaaConfig(req, function (err, uaaOptions) {
      if (err || !uaaOptions) {
        return next(err ? err : 'Invalid UAA options');
      }
      req.tenant = uaaOptions.tenant;
      if (uaaOptions.tenantmode === 'shared' && uaaOptions.tenant !== ownUAACredentials.identityzone) {
        if ((req.app.services[CONNECTIVITY][uaaOptions.tenant] &&
          req.app.services[CONNECTIVITY][uaaOptions.tenant].token &&
          req.app.services[CONNECTIVITY][uaaOptions.tenant].token.tokenRefreshTimestamp - Date.now() <= 0) ||
          !req.app.services[CONNECTIVITY][uaaOptions.tenant]) {
          getClientCredentialTokenByTenant(uaaOptions.tenant, connectivityCredentials, function (err, token) {
            if (err) {
              return next(err);
            }
            req.app.services[CONNECTIVITY][uaaOptions.tenant] = {
              token: token
            };
            return next();
          });
        }
      }
    });
  }
  next();
};
function getClientCredentialTokenByTenant(tenant,credentials, cb){
  return tokenUtils.getClientCredentialsTokenByTenant(tenant, credentials, cb);
}
function getServiceByName(requestedServiceName){
  var services = xsenv.readServices();
  if (services){
    for (var serviceName in services){
      var service = services[serviceName];
      if (service.label === requestedServiceName){
        return service.credentials.uaa ? service.credentials.uaa : service.credentials;
      }
    }
  }
  return null;
}