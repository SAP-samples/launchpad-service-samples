'use strict';

var basicAuthHeaderParser = require('basic-auth');
var cookie = require('cookie');
var cookieUtils = require('../utils/cookie-utils');
var oauthConfig = require('./../passport/oauth-configuration');
var passport = require('passport');
var headerUtil = require('../utils/header-util');
var pathUtil = require('../utils/path-util');
var sessionExt = require('../utils/session-ext');
var serviceTokenHandler = require('./service-token-handler');
var xsenv = require('@sap/xsenv');
var jwtDecode = require('jwt-decode');
var expiresAt = require('../passport/utils').getExpiresAt;

module.exports = {
  isLoginRequired: function (req) {
    var isPublicPath = pathUtil.isPublicPath(req);
    var isUserLoggedIn = module.exports.isUserLoggedIn(req);
    return !isPublicPath && !isUserLoggedIn;
  },

  isUserLoggedIn: function (req) {
    var user = req.session && req.session.user;
    if (!user || !user.token.accessToken || !user.token.expiryDate) {
      return false;
    }
    return user.token.expiryDate > Date.now();
  },

  isExchangeTokenRequired: function(req){
    var user = req.session && req.session.user;
    var serviceName = req.destinationCredentials && req.destinationCredentials.serviceName;
    if (!user || !user.token || !serviceName){
      return false;
    }
    return !user.businessServices || !user.businessServices[serviceName] || user.businessServices[serviceName].expireDate < Date.now();
  },

  exchangeToken: function(req, cb){
    var ownUAACredentials = xsenv.serviceCredentials({label: 'xsuaa'});
    serviceTokenHandler.exchangeToken(req.session.user.token.accessToken, ownUAACredentials, req.destinationCredentials, function(err, accessToken) {
      if (err){
        return cb(err);
      }
      var tokenDecoded = jwtDecode(accessToken);
      sessionExt.update(req.session, function(session) {
        if (!session.user.businessServices){
          session.user.businessServices = {};
        }
        session.user.businessServices[req.destinationCredentials.serviceName] = {
          accessToken: accessToken,
          expireDate:  expiresAt(tokenDecoded.exp - tokenDecoded.iat).getTime(),
          scopes: tokenDecoded.granted_scopes
        };
      });
      return cb(null);
    });
  },
  getAuthenticator: function (req, res, cb) {
    if (pathUtil.isBasicAuthProtectedPath(req)) {
      return getBasicAuthAuthenticator(req, cb);
    }

    getXSUAAOauthAuthenticator(req, function(err, authenticator) {
      if (err) { return cb(err); }

      if (process.env.PRESERVE_FRAGMENT === 'false') {
        var redirectCookieName = cookieUtils.getRedirectLocationCookieName();
        var cookies = (req.headers.cookie && cookie.parse(req.headers.cookie)) || {};
        var redirectCookie = cookies[redirectCookieName];
        if (!redirectCookie) {
          var locationAfterLogin = cookie.serialize(redirectCookieName, req.url, {path: '/', httpOnly: true});
          cookieUtils.setCookie(res, locationAfterLogin);
        }
      }
      res.setHeader('Cache-Control', headerUtil.NOCACHE_HEADER_VALUE);
      cb(null, authenticator);
    });
  }
};

function getXSUAAOauthAuthenticator(req, cb) {
  oauthConfig.getXSUAAOauthStrategy(req, function(err, oauthStrategy) {
    if (err) { return cb(err);}
    cb(null, createAuthenticator(oauthStrategy));
  });
}

function getBasicAuthAuthenticator(req, cb) {
  var basicAuthHeader = basicAuthHeaderParser(req);
  if (!basicAuthHeader) {
    return cb(401);
  }

  var credentials = {
    username: basicAuthHeader.name,
    password: basicAuthHeader.pass
  };

  oauthConfig.getBasicOauthStrategy(req, credentials, function(err, oauthStrategy) {
    if (err) { return cb(err);}
    cb(null, createAuthenticator(oauthStrategy));
  });
}

function createAuthenticator(oauthStrategy) {
  passport.use(oauthStrategy);
  return passport.authenticate(oauthStrategy.name);
}