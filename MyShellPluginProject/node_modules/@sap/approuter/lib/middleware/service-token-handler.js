/* eslint-disable camelcase */
'use strict';
var xsenv = require('@sap/xsenv');
var xssec = require('@sap/xssec');
var businessServiceUtils = require('../utils/business-service-utils');

module.exports = {
  replaceUserToken: function (req, session, serviceTag, cb) {
    session = session || req.session;
    if (session.user.businessServices && serviceTag && session.user.businessServices[serviceTag] && session.user.businessServices[serviceTag].expireDate > Date.now()) {
      cb(null, session.user.businessServices[serviceTag].accessToken);
      return;
    }
    var ownUAACredentials = xsenv.serviceCredentials({label: 'xsuaa'});
    var externalServiceCredentials = serviceTag ? businessServiceUtils.getCredentials(serviceTag, false, req) : req.internalUrl.route.credentials;
    var routerConfig = req ? req.routerConfig : null;
    if (routerConfig && routerConfig.getToken) {
      routerConfig.getToken(req, function (err, accessToken) {
        if (err) {
          return cb(err);
        }
        getBusinessToken(accessToken, ownUAACredentials, externalServiceCredentials, cb);
      });
    } else {
      var jwt = session.user.token.accessToken;
      getBusinessToken(jwt, ownUAACredentials, externalServiceCredentials, cb);
    }
  },
  exchangeToken: getBusinessToken
};

function getBusinessToken(jwt, ownUAACredentials, externalServiceCredentials, cb) {
  try {
    xssec.createSecurityContext(jwt, ownUAACredentials, function (error, secContext) {
      if (error) {
        cb(error, null);
      } else {
        secContext.requestToken(Object.assign({}, externalServiceCredentials.uaa, {
          url: externalServiceCredentials.uaa.url.replace(
            externalServiceCredentials.uaa.identityzone,
            secContext.subdomain
          )
        }), xssec.constants.TYPE_USER_TOKEN, null, function (error, jwt) {
          if (error) {
            cb(error, null);
          } else {
            cb(null, jwt);
          }
        });
      }
    });
  } catch (err) {
    cb(err);
  }
}