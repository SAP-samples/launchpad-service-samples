'use strict';

var URI = require('urijs');
var encodeUrl = require('encodeurl');
var http = require('http');
var urlUtils = require('../utils/url-utils');
var loggerUtils = require('../utils/logger');
var backendRequestOptions = require('../backend-request/options');
var uaaUtils = require('../utils/uaa-utils');
var dynamicRoutingUtils = require('../utils/dynamic-routing-utils');
var businessServiceUtils = require('../utils/business-service-utils');
var serviceTokenHandler = require('./service-token-handler');
var agents = require('../backend-request/agents');
var destinationTokenHandler = require('./destination-token-handler');

var logger = loggerUtils.getLogger('/Middleware');
var tracer = loggerUtils.getTracer(__filename);

module.exports = {
  sessionTimeoutLogout: function(session, app) {
    if (session.user) {
      logout(app, null, session);
    }
  },

  centralLogout: function(req, res) {
    logout(req.app, req, Object.assign ({id: req.session.id}, req.session));

    req.session.destroy();
    res.removeHeader('set-cookie');
    module.exports.triggerUAARedirect(req, res, function(err) {
      if (err) { throw err; }
    });
  },

  callBackendLogoutPaths: function(req, routerConfig, session) {
    var appConfigDestinations = routerConfig.appConfig.destinations || {};
    var dynamicDestinations = (session && session.user && session.user.logout) ? session.user.logout.destinations : {};
    var destinations = Object.assign(appConfigDestinations, dynamicDestinations);
    var accessToken = session && session.user && session.user.token && session.user.token.accessToken;

    for (var destinationName in destinations) {
      var destinationOptions = destinations[destinationName];
      if (destinationOptions.logoutPath) {
        var destination = routerConfig.destinations[destinationName];
        if (destination) {
          module.exports.handleRequest (req, accessToken, destination, destinationOptions, session);
        }
        else {
          destinationTokenHandler.retrieveDestination ({destinationName: destinationName, session: session},
                        function (err, result) {
                          if (err || !result){
                            logger.error(err, 'Error retrieving destination ', destinationName);
                            return;
                          }
                          destination = result.destination;
                          module.exports.handleRequest (req, result.authToken, destination, destinationOptions, session);
                        });
        }
      }
    }
  },

  callServiceLogoutPaths: function(req,session) {

    if (!session.user || !session.user.logout || !session.user.logout.services) {
      return;
    }
    var logoutServices = session.user.logout.services;
    for (var serviceTag in logoutServices) {
      var serviceLogoutOptions = logoutServices[serviceTag];
      var serviceCredentials = businessServiceUtils.getCredentials(serviceTag, false, {session: session});
      var serviceDestination = businessServiceUtils.getEndPoint(serviceCredentials, serviceLogoutOptions.endpoint);
      if (serviceLogoutOptions.logoutPath) {
        var serviceLogoutUri = urlUtils.join(serviceDestination.url, serviceLogoutOptions.logoutPath);
        var parsedUrl = urlUtils.parse(serviceLogoutUri);
        var method = serviceLogoutOptions.logoutMethod || 'POST';
        serviceTokenHandler.replaceUserToken(null, session, serviceTag, function(err, token){
          if (err){
            logger.error(err, 'Error receiving service token for service ', serviceTag);
            return;
          }
          var request = module.exports.getServiceLogoutRequest({method: method, parsedUrl: parsedUrl, token: token,
                        approuterHost: serviceLogoutOptions.approuterHost, req: req, destination: serviceDestination, session: session});
          sendRequest(request, serviceLogoutOptions, serviceLogoutUri);
        });
      }
    }
  },

  handleRequest: function(req, token, destination, destinationOptions, session) {
    var logoutUri = urlUtils.join(destination.url, destinationOptions.logoutPath);
    var request = backendRequestOptions.getLogoutRequest(req, token, destination, destinationOptions, session);
    sendRequest(request, destination, logoutUri);
  },

  triggerUAARedirect: function(req, res, cb) {
    resolveLogoutRedirectUrl(req, function (err, redirectUrl) {
      if (!err) {
        res.writeHead(302, {Location: encodeUrl(redirectUrl)});
        res.end();
      }
      cb(err);
    });
  },

  getServiceLogoutRequest: function (options){
    var headers = {};
    headers.authorization = 'Bearer ' + options.token;
    if (options.approuterHost) {
      headers['x-approuter-host'] = options.approuterHost;
    }
    backendRequestOptions.getBackendCookies(options.req, options.session, headers,options.destination);
    var opts = {
      method: options.method,
      protocol: options.parsedUrl.protocol,
      hostname: options.parsedUrl.hostname,
      port: options.parsedUrl.port,
      path: options.parsedUrl.path,
      agent: agents.get(options.parsedUrl.protocol),
      headers: headers
    };

    return http.request.bind(undefined, opts);
  }
};

function logout(app, req, session) {
  module.exports.callBackendLogoutPaths(req, app.get('mainRouterConfig'), session);
  module.exports.callServiceLogoutPaths(req,session);
  app.approuter.emit('logout', session);
}

function sendRequest(request, destination, logoutUri) {

  var clientReq = request();
  if (destination.timeout) {
    clientReq.setTimeout(destination.timeout);
  }
  clientReq.on('timeout', function () {
    clientReq.abort();
    logger.error('Request to %s failed with a timeout', logoutUri);
  });
  clientReq.on('error', function (err) {
    logger.error(err, 'Error in request to %s', logoutUri);
  });
  clientReq.on('response', function (resp) {
    if (destination.timeout) {
      resp.setTimeout(destination.timeout);
    }
    resp.on('timeout', function () {
      clientReq.abort();
      logger.error('Request to %s failed with a timeout', logoutUri);
    });
    resp.on('error', function (err) {
      logger.error(err, 'Error in response from %s', logoutUri);
    });
    var body = '';
    resp.on('data', function (chunk) {
      body += chunk;
    });
    resp.on('end', function () {
      if (resp.statusCode !== 200) {
        logger.error('Status %d received for request to %s, body: %s', resp.statusCode, logoutUri, body);
      }
      tracer.info('Status %d received for request to %s, body: %s', resp.statusCode, logoutUri, body);
    });
  });
  clientReq.end();
}

function resolveLogoutRedirectUrl(req, cb) {
    // Currently redirect from UAA to application is possible only with port-based routing
  var logout = req.routerConfig.appConfig.logout;
  var logoutPage = logout && logout.logoutPage;
  uaaUtils.getUaaConfig(req, function (err, uaaConfig) {
    if (err) { return cb(err); }

    var redirectUrl = urlUtils.join(uaaConfig.url, '/logout.do');
    if (!logoutPage) {
      return cb(null, redirectUrl);
    }


    // concat query parameters for logout page, if exists
    var queryParams = URI.parse(req.url).query;
    if (queryParams) {
      logoutPage = logoutPage + '?' + queryParams;
    }

    var uri = URI.parse(logoutPage);
    if (uri.protocol && uri.hostname) {
      return cb(null, redirectUrl + '?redirect=' + logoutPage + '&client_id=' + uaaConfig.clientid);
    }
    var fullUrl = dynamicRoutingUtils.getFullUrl(req,logoutPage);
    if (/^\/(.*$)?$/.test(fullUrl)){
      logoutPage = fullUrl;
    }
    var appRouterUrl = urlUtils.buildAppRouterUrl(req);
    cb(null, redirectUrl + '?redirect=' + urlUtils.join(appRouterUrl, logoutPage) + '&client_id=' + uaaConfig.clientid);
  });
}
