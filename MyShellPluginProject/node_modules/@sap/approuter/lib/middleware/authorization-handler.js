'use strict';

var xsenv = require('@sap/xsenv');
var urlUtils = require('../utils/url-utils');
var uaaUtils = require('../utils/uaa-utils');

module.exports = function checkAuthorization(req) {
  if (!req.internalUrl || req.internalUrl.route.authenticationType === 'none') {
    return {isAuthorized: true};
  }

  var scopesMessage = 'You do not have the required scopes to access this resource.';
  var tenantMessage = 'You cannot use session from another tenant.';
  var loggingData = getAuditLogAdditionalData (req);
  var auditLogMessage;

  var uaaConfig = req.routerConfig && req.routerConfig.uaaConfig;
  var tenantMode = uaaConfig && uaaConfig.options && uaaConfig.options.tenantmode;

  if (tenantMode === 'shared') {
    var tenantHostPattern = uaaConfig && uaaConfig.tenantHostPattern;
    var urlTenant = uaaUtils.retrieveTenantFromURL (urlUtils.getAppRouterHost(req), tenantHostPattern);
    if (urlTenant && req.session && req.session.user && req.session.user.tenant &&
      urlTenant !== req.session.user.tenant) {
      auditLogMessage = 'User not authorized, IP: ' +
        loggingData.IP + ',  JWT token tenant: ' + req.session.user.tenant + ', URL tenant: ' + urlTenant;
      writeToAuditLog (req, loggingData, auditLogMessage);
      return {isAuthorized: false, message: tenantMessage};
    }
  }

  var routeScopes = req.internalUrl.route.scope;
  if (!routeScopes) {
    return {isAuthorized: true};
  }
  if (!Array.isArray(routeScopes)) {
    routeScopes = routeScopes[req.method] || routeScopes.default || [];
  }
  var bsScopes = req.session && req.session.user && req.destinationCredentials && req.destinationCredentials.serviceName
    && req.session.user.businessServices && req.session.user.businessServices[req.destinationCredentials.serviceName].scopes;
  var oauthScopes = req.session && req.session.user && req.session.user.scopes;
  oauthScopes = bsScopes ? bsScopes : oauthScopes;
  if (!oauthScopes) {
    return {isAuthorized: false, message: scopesMessage};
  }

  var isAuthorized = routeScopes.some(function(element) {
    return oauthScopes.indexOf(element) > -1;
  });
  var result = {isAuthorized: isAuthorized};

  if (!isAuthorized) {
    auditLogMessage = 'User not authorized, source of route: ' + req.internalUrl.route.source + ', IP: ' +
      loggingData.IP + ',  required scopes: ' + routeScopes + ', user scopes: ' + oauthScopes;
    writeToAuditLog (req, loggingData, auditLogMessage);
    result.message = scopesMessage;
  }

  return result;
};

function writeToAuditLog (req, loggingData, message) {
  req.app.auditLogger.securityMessage(message)
    .by(loggingData.user)
    .tenant(loggingData.tenantid)
    .log(function (err) {
      if (err) {
        throw err;
      }
    });
}

function getAuditLogAdditionalData (req) {
  var tenantid = req.session.user && req.session.user.tenantid;
  var userToLog = req.session.user && req.session.user.name;
  var auditlogCredentials;

  try {
    auditlogCredentials = xsenv.serviceCredentials({tag: 'auditlog'});
  } catch (error){
    auditlogCredentials = null;
  }

  var IP = req.headers['x-forwarded-for'] || req.connection.remoteAddress;
  if (!auditlogCredentials) {
    userToLog = '******';
    IP = '******';
  }

  return {user: userToLog, IP: IP, tenantid: tenantid};
}
