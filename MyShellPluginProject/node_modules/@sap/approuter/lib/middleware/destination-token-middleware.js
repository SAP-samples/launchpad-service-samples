'use strict';

var url = require('url');

var retrieveDestination = require('./destination-token-handler').retrieveDestination;
var isDestinationServiceFlow = require('./destination-token-handler').isDestinationServiceFlow;
var sessionExt = require('../utils/session-ext');

module.exports = function (req, res, next) {
  if (!isDestinationServiceFlow (req.internalUrl)){
    return next();
  }
  var options = {
    destinationName: req.internalUrl.route.destination,
    session: req.session, app: req.app,
    dynamicDestination:req.internalUrl.destination.dynamicDestination
  };
  if (req.routerConfig && req.routerConfig.getToken) {
    req.routerConfig.getToken(req, function (err, jwt) {
      if (err) {
        return next(err);
      } else {
        options.jwt = jwt;
        getDestination (req, res, options, next);
      }
    });
  } else {
    getDestination (req, res, options, next);
  }
};

function getDestination (req, res, options, next){
  retrieveDestination(options, function (err, result) {
    if (err) {
      return next(err);
    }
    updateInternalUrl(req, result.destination); // normalized destination lookup result
    if (!req.session || !req.session.user){
      if (result.authToken){
        req.internalUrl.route['authToken'] = result.authToken;
      }
      return next();
    }
    sessionExt.update(req.session, function(// eslint-disable-next-line
      session) {
      if (!req.session.user.destinations){
        req.session.user.destinations = {};
      }
      if (!req.session.user.destinationUserExchangeToken){
        req.session.user.destinationUserExchangeToken = {};
      }
      if (!req.session.user.destinations[result.destination.name]){
        req.session.user.destinations[result.destination.name] = {};
      }
      if (result.authToken && !req.session.user.destinations[result.destination.name].authToken){
        req.session.user.destinations[result.destination.name].authToken = {};
      }
      if (result.authToken) {
        req.session.user.destinations[result.destination.name].authToken = result.authToken;
      }
      if (result.userExchangeToken) {
        req.session.user.destinationUserExchangeToken = result.userExchangeToken;
      }
    });
    return next();
  });
}

function updateInternalUrl (req, destination) {
  var destinationUrl = req.internalUrl.destination.url;
  var newHref = destination.url;
  // Avoid double slash between destination url and path
  if (newHref[newHref.length - 1] === '/') {
    destinationUrl += '/';
  }
  req.internalUrl.href = req.internalUrl.href.replace(destinationUrl, newHref);
  var newParsedUrl = new url.URL(req.internalUrl.href);
  req.internalUrl.protocol = newParsedUrl.protocol;
  req.internalUrl.host = newParsedUrl.host;
  req.internalUrl.hostname = newParsedUrl.hostname;
  req.internalUrl.pathname = newParsedUrl.pathname;
  req.internalUrl.path = newParsedUrl.pathname + newParsedUrl.search;
  req.internalUrl.port = newParsedUrl.port;
  req.internalUrl.destination = destination;
}





