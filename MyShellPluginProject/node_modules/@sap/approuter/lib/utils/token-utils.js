'use strict';

var xsenv = require('@sap/xsenv');
var validators = require('../configuration/validators');
var passportUtils = require('../passport/utils');
var loggerUtils = require('./logger');
var tracer = loggerUtils.getTracer(__filename);
var urijs = require('urijs');

exports.getTokens = getBSTokens;
exports.loadClientCredentialsToken = loadClientCredentialsToken;
exports.getClientCredentialsTokenByTenant = getClientCredentialsTokenByTenant;

function getBSTokens(app) {
  const DESTINATION = 'destination';
  const CONNECTIVITY  = 'connectivity';
  const CLIENT_CREDENTIALS = 'client_credentials';

  var services = xsenv.readServices();
  if (services){
    for (var serviceName in services){
      var service = services[serviceName];
      if (service.label === DESTINATION || service.label === CONNECTIVITY || (service.credentials && service.credentials['grant_type'] === CLIENT_CREDENTIALS)){
        validators.validateClientCredentials(service.credentials);
        loadClientCredentialsToken(app, service.credentials, service.credentials['sap.cloud.service'] || service.label);
      }
    }
  }
}

function getClientCredentialsTokenByTenant(tenant,credentials, cb){
  var targetTenantUrl = credentials.url.replace(credentials.identityzone,tenant);
  var requestOptions = {
    url: (targetTenantUrl) + '/oauth/token/?grant_type=client_credentials',
    headers: {
      'content-type': 'application/x-www-form-urlencoded;charset=utf-8',
      'accept': 'application/json;charset=utf-8'
    },
    auth: {
      user: credentials.clientid || credentials.uaa.clientid,
      pass: credentials.clientsecret || credentials.uaa.clientsecret
    }
  };
  passportUtils.callUaa(requestOptions, null, function (err, uaaResponse) {
    if (err) {
      tracer.error('Error getting ' + credentials.label + ' client credentials from UAA. Number of attempts done: %d, error: %s', passportUtils.MAX_ATTEMPTS_NUMBER, err.message);
      return cb ?  cb(err) : null;
    }
    if (!uaaResponse.access_token || !uaaResponse.expires_in) {
      tracer.error('Bad response from UAA when getting client credentials token for ' + credentials.label + ' - not all fields are present');
      return cb ? cb(new Error('Bad response from UAA when getting client credentials token for ' + credentials.label + ' - not all fields are present')) : null;
    }
    var result = {
      accessToken: uaaResponse.access_token,
      tokenType: uaaResponse.token_type,
      tokenRefreshTimestamp:passportUtils.getExpiresAt(uaaResponse.expires_in).getTime()
    };
    return cb(null,result);
  });
}

function loadClientCredentialsToken(app, credentials, serviceName, cb) {
  var url = credentials.url || credentials.uaa.url;
  var parsedUrl = urijs.parse(url);
  url = parsedUrl.path !== '/' ? url : url + '/oauth/token/';
  var requestOptions = {
    url: url + '?grant_type=client_credentials',
    headers: {
      'content-type': 'application/x-www-form-urlencoded;charset=utf-8',
      'accept': 'application/json;charset=utf-8'
    },
    auth: {
      user: credentials.clientid || credentials.uaa.clientid,
      pass: credentials.clientsecret || credentials.uaa.clientsecret
    }
  };

  passportUtils.callUaa(requestOptions, null, function (err, uaaResponse) {
    if (err) {
      tracer.error('Error getting ' + credentials.label + ' client credentials from UAA. Number of attempts done: %d, error: %s', passportUtils.MAX_ATTEMPTS_NUMBER, err.message);
      return cb ?  cb(err) : null;
    }
    if (!uaaResponse.access_token || !uaaResponse.expires_in) {
      tracer.error('Bad response from UAA when getting client credentials token for ' + credentials.label + ' - not all fields are present');
      return cb ? cb(new Error('Bad response from UAA when getting client credentials token for ' + credentials.label + ' - not all fields are present')) : null;
    }
    var options = {
      accessToken: uaaResponse.access_token,
      tokenType: uaaResponse.token_type,
      tokenRefreshTimestamp:passportUtils.getExpiresAt(uaaResponse.expires_in).getTime()
    };

    if (!app.services) {app.services = {};}

    app.services[serviceName] = { token: options };
    const FIVE_MINUTES = 5 * 60 * 1000;
    var tokenRefreshTimestamp = passportUtils.getExpiresAt(uaaResponse.expires_in).getTime() - FIVE_MINUTES;
    var msBeforeRetrieval = tokenRefreshTimestamp - Date.now();
    setTimeout(function () { loadClientCredentialsToken(app, credentials, serviceName);}, msBeforeRetrieval);
    return cb ? cb() : null;
  });
}
