var expect = require('chai').expect;
var sinon = require('sinon');
var path = require('path');

var ValidationConfig = require("../src/lib/validationConfig.js");

describe('validation configuration', function() {

    var sandbox;
    beforeEach(function () {
        sandbox = sinon.sandbox.create();
    });

    it('null configuration', function() {
        var config = new ValidationConfig();
        expect(config).to.exist;
        expect(config.getValidators()).to.be.array;
        var fn = function() { config.getExtensions("abc"); };
        expect(fn).to.throw(Error);
    });

    it('empty configuration', function() {
        var config = new ValidationConfig({});
        expect(config).to.exist;
        expect(config.getValidators()).to.be.array;
        var fn = function() { config.getExtensions("abc"); };
        expect(fn).to.throw(Error);
    });

    it('configuration with validator and no extension list', function() {
        var config = new ValidationConfig({"validators": {"dummyValidator1" : {}}});
        expect(config).to.exist;
        expect(config.getValidators()).to.be.array;
        expect(config.getValidators()).to.have.length(1);
        expect(config.getExtensions("dummyValidator1")).to.have.length(0);
    });

    it('configuration with validator and its extension list and default filter level', function() {
        var config = new ValidationConfig({"validators": {"dummyValidator1" : {"extensions": ['.js', '.xsjs']}}});
        expect(config).to.exist;
        expect(config.getValidators()).to.be.array;
        expect(config.getValidators()).to.have.length(1);
        expect(config.getExtensions("dummyValidator1")).to.have.length(2);
        expect(config.getLevels("dummyValidator1")).to.be.array;
        expect(config.getLevels("dummyValidator1")).to.have.length(3);//default levels
        expect(config.getLevels("dummyValidator1").sort()).to.deep.equal(["error", "info", "warning"]);//default levels
    });

    it('configuration with validator and its extension list and error only filter level', function() {
        var config = new ValidationConfig({"validators": {"dummyValidator1" : {"extensions": ['.js', '.xsjs'], "filters":{"levels":["error"]}}}});
        expect(config).to.exist;
        expect(config.getValidators()).to.be.array;
        expect(config.getValidators()).to.have.length(1);
        expect(config.getExtensions("dummyValidator1")).to.have.length(2);
        expect(config.getLevels("dummyValidator1")).to.be.array;
        expect(config.getLevels("dummyValidator1")).to.have.length(1);
        expect(config.getLevels("dummyValidator1")).to.deep.equal(["error"]);
    });

    it('configuration with validator and its extension list and empty filter level', function() {
        var config = new ValidationConfig({"validators": {"dummyValidator1" : {"extensions": ['.js', '.xsjs'], "filters": {"levels": []}}}});
        expect(config).to.exist;
        expect(config.getValidators()).to.be.array;
        expect(config.getValidators()).to.have.length(1);
        expect(config.getExtensions("dummyValidator1")).to.have.length(2);
        expect(config.getLevels("dummyValidator1")).to.be.array;
        expect(config.getLevels("dummyValidator1")).to.have.length(0);
        expect(config.getLevels("dummyValidator1")).to.deep.equal([]);
    });

    afterEach(function () {
        sandbox.restore();
    });

});