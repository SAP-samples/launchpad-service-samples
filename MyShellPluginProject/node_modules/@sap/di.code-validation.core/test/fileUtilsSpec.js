var expect = require('chai').expect;
var sinon = require('sinon');
var fs = require('fs');
var path = require('path');


var fileUtils = require('../src/lib/fileUtils');

describe('fileUtils test', function() {

    var sandbox;
    beforeEach(function () {
        sandbox = sinon.sandbox.create();
    });

    it('filters files from empty folder', function(done) {
        sandbox.stub(fs, 'existsSync').returns(true);
        sandbox.stub(fs, 'readdir', function (folderPath, callback) {
            callback(null, []);
        });
        sandbox.stub(fs, 'stat', function (folderPath, callback) {
            callback(null, {'isDirectory': function() {return false;}});
        });
        fileUtils.listFilteredFiles('root', ['.js'], function(paths) {
            expect(paths).to.exist;
            expect(paths).to.be.array;
            expect(paths).to.have.length(0);
            done();
        });
    });

    it('filters files with extension .js from folder containing .js and .json files', function(done) {
        sandbox.stub(fs, 'existsSync').returns(true);
        sandbox.stub(fs, 'readdir', function (folderPath, callback) {
            callback(null, ['a.js', 'b.json', 'c.js']);
        });
        sandbox.stub(fs, 'stat', function (folderPath, callback) {
            callback(null, {'isDirectory': function() {return false;}});
        });
        fileUtils.listFilteredFiles('root', ['.js'], function(paths) {
            expect(paths).to.exist;
            expect(paths).to.be.array;
            expect(paths).to.have.length(2);
            expect(paths).to.include(path.join('root', 'a.js'));
            expect(paths).to.include(path.join('root', 'c.js'));
            expect(paths).to.not.include(path.join('root', 'b.json'));
            done();
        });
    });

    it('filters files from folder and its sub folders', function(done) {
        sandbox.stub(fs, 'existsSync').returns(true);
        sandbox.stub(fs, 'readdir', function (folderPath, callback) {
            if (folderPath === 'root')
                callback(null, ['a.js', 'b.json', 'sub']);
            else if (folderPath === path.join('root', 'sub')) {
                callback(null, ['s.js']);
            }
        });
        sandbox.stub(fs, 'stat', function (folderPath, callback) {
            callback(null, {'isDirectory': function() {
                return folderPath === 'root' || folderPath === path.join('root', 'sub');
            }});
        });
        fileUtils.listFilteredFiles('root', ['.js'], function(paths) {
            expect(paths).to.exist;
            expect(paths).to.be.array;
            expect(paths).to.have.length(2);
            expect(paths).to.include(path.join('root', 'a.js'));
            expect(paths).to.include(path.join('root', 'sub', 's.js'));
            done();
        });
    });

    it('sync filters files from folder and its sub folders', function() {
        sandbox.stub(fs, 'existsSync').returns(true);
        sandbox.stub(fs, 'readdirSync', function (folderPath) {
            if (folderPath === 'root')
                return ['a.js', 'b.json', 'sub'];
            else if (folderPath === path.join('root', 'sub')) {
                return ['s.js'];
            }
        });
        sandbox.stub(fs, 'statSync', function (folderPath) {
            return {'isDirectory': function() {
                    return folderPath === 'root' || folderPath === path.join('root', 'sub');
                }};
        });
        var paths = fileUtils.listFilteredFilesSync('root', ['.js']);
        expect(paths).to.exist;
        expect(paths).to.be.array;
        expect(paths).to.have.length(2);
        expect(paths).to.include(path.join('root', 'a.js'));
        expect(paths).to.include(path.join('root', 'sub', 's.js'));
    });

    it('sync filters files from folder and its sub folders using options object', function() {
        sandbox.stub(fs, 'existsSync').returns(true);
        sandbox.stub(fs, 'readdirSync', function (folderPath) {
            if (folderPath === 'root')
                return ['a.js', 'b.json', 'sub'];
            else if (folderPath === path.join('root', 'sub')) {
                return ['s.js'];
            }
        });
        sandbox.stub(fs, 'statSync', function (folderPath) {
            return {'isDirectory': function() {
                    return folderPath === 'root' || folderPath === path.join('root', 'sub');
                }};
        });
        var paths = fileUtils.listFilteredFilesSync('root', {extensions: ['.js']});
        expect(paths).to.exist;
        expect(paths).to.be.array;
        expect(paths).to.have.length(2);
        expect(paths).to.include(path.join('root', 'a.js'));
        expect(paths).to.include(path.join('root', 'sub', 's.js'));
    });

    it('sync all files from folder containing .js and .json files', function() {
        sandbox.stub(fs, 'existsSync').returns(true);
        sandbox.stub(fs, 'readdirSync', function (folderPath) {
            return ['a.js', 'b.json', 'c.js'];
        });
        sandbox.stub(fs, 'statSync', function (folderPath) {
            return {'isDirectory': function() {return false;}};
        });
        var paths = fileUtils.listFilteredFilesSync('root');
        expect(paths).to.exist;
        expect(paths).to.be.array;
        expect(paths).to.have.length(3);
        expect(paths).to.include(path.join('root', 'a.js'));
        expect(paths).to.include(path.join('root', 'c.js'));
        expect(paths).to.include(path.join('root', 'b.json'));
    });

    afterEach(function () {
        sandbox.restore();
    });

});