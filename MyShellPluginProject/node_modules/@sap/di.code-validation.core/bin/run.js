#!/usr/bin/env node
var fs = require("fs");
var path = require("path");

var validation = require("../src/lib/validation.js");
var ValidationConfig = require("../src/lib/validationConfig");
var options = require("../src/options");

// =====================================
// read input options from command line
// =====================================

var _logFile;
var commandOptions;
var config;
var projectRootPath;
var projectDir;

function initFromCommand() {
    var currentOptions;
    try {
        currentOptions = options.parse(process.argv);

    } catch (error) {
        console.error(error.message);
        return 1;
    }

    commandOptions = currentOptions._;

    if (commandOptions.length === 0 || commandOptions.length > 2) {
        console.error("Exactly one project directory required for validation");
    }
    projectDir = commandOptions[0];
    projectRootPath = commandOptions[1];

    var validationProvidersConfig;
    if (currentOptions.config)
        validationProvidersConfig = require(currentOptions.config);
    else
        validationProvidersConfig = {};

    config = new ValidationConfig(validationProvidersConfig);
    _logFile = currentOptions.log || (__dirname + path.sep + "validation.log");
}

function initMock() {
    projectDir = path.join( __dirname,"..", "test", "mock", "dummyProj");
    projectRootPath = "test";
    var validationProvidersConfig = require("../src/config/default.js");
    config = new ValidationConfig(validationProvidersConfig);
    _logFile = __dirname + path.sep + "validation.log";
}

//initMock();
initFromCommand();

// =====================================
// execute validation
// =====================================
// *** Sample commnad line execution
// after running npm link
// node bin\run.js --c
// C:\Users\i028014\pocNewValidators\com.sap.di.contentValidation\validationframework\tests\mock\config1.js
// clientWorkspaceRootPath: \dummyProj
// C:\Users\i028014\pocNewValidators\com.sap.di.contentValidation\validationframework\tests\mock\dummyProj
validation.executeForProject(projectDir, projectRootPath, config, function (issues) {
    var stringified = JSON.stringify(issues);
    process.stdout.write(stringified);
    fs.writeFileSync(_logFile, stringified);
    process.exit(0);
});
