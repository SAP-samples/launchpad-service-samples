var path = require('path'),
    fs   = require('fs');


/**
 * return list of all files in directory according to extensions
 * listFilteredFiles('./rootDir', '.html') ==> ['./rootDir/src/a.html','./rootDir/src/build/index.html']
 * @param  {String} rootPath
 * @param  {Object} options      {extensions: ['.html', ...], ignoredPaths: ['projPath/dist', 'projPath/node_modules' ...]}
 * @param  {function} done 		 callback function
 * @return {Array}               Result files with path string in an array
 */
function listFilteredFiles(rootPath,options, done){

  var paths = []
  var extensions = options.extensions;
  var ignoredPaths = [];
  if (Array.isArray(options)) {
    extensions = options;
  } else {
    extensions = options.extensions;
    ignoredPaths = options.ignoredPaths;
  }
  if (!fs.existsSync(rootPath)){
    console.log("directory not found ",rootPath);
    return;
  }

  fs.readdir(rootPath, function (err, files) {
    if (err) {
      throw err;
    }

    var pending = files.length;
    if (!pending) { return done(paths); }
    files.forEach(function(file) {
      var nestedPath = path.join(rootPath,file);
      if (ignoredPaths.indexOf(nestedPath) >= 0) {
        if (!--pending) {
          done(paths);
        }
        return;
      }
      fs.stat(nestedPath, function(err, stat) {
        if (stat && stat.isDirectory()) {
          listFilteredFiles(nestedPath, extensions, function(res) {
            paths = paths.concat(res);
            if (!--pending){
              done(paths);
              return;
            }
          }, done);
        } else {
          extensions.forEach(function(filter) {
            if (path.extname(nestedPath) === filter) {
              paths.push(nestedPath);
            }
          });
          if (!--pending) {
            done(paths);
            return;
          }
        }
      });
    });
  });
}

/**
 * return list of all files in directory according to extensions
 * listFilteredFilesSync('./rootDir', '.html') ==> ['./rootDir/src/a.html','./rootDir/src/build/index.html']
 * @param  {String} rootPath
 * @param  {Object} options      {extensions: ['.html', ...], ignoredPaths: ['projPath/dist', 'projPath/node_modules' ...]}
 * @return {Array}               Result files with path string in an array
 */
function listFilteredFilesSync(rootPath,options) {

    var paths = [];
    var extensions;
    var ignoredPaths = [];
    if (Array.isArray(options)) {
        extensions = options;
    } else {
        extensions = options ? options.extensions : undefined;
        ignoredPaths = options ? options.ignoredPaths || [] : [];
    }
    if (!fs.existsSync(rootPath)) {
        console.log("directory not found ", rootPath);
        return paths;
    }

    var files = fs.readdirSync(rootPath);

    files.forEach(function (file) {
        var nestedPath = path.join(rootPath, file);
        if (ignoredPaths.indexOf(nestedPath) >= 0) {
            return;
        }
        var stat = fs.statSync(nestedPath);
        if (stat && stat.isDirectory()) {
            var res = listFilteredFilesSync(nestedPath, options);
            paths = paths.concat(res);
        } else {
            if (!extensions) {
                paths.push(nestedPath);
            } else {
                extensions.forEach(function (filter) {
                    if (path.extname(nestedPath) === filter) {
                        paths.push(nestedPath);
                    }
                });
            }
        }
    });
    return paths;
}


module.exports = {
  listFilteredFiles:listFilteredFiles,
    listFilteredFilesSync:listFilteredFilesSync
};