"use strict";

const _ = require("lodash");
const helper = require("../utils/helper");
const messages = require("../messages/manager");

let getParamsWithWrongType = (oJsDocComment, aModuleArguments) => {
  const aParamTags = helper.getJsDocParamTags(oJsDocComment);
  const oArgsInfo = _.reduce(aModuleArguments, (oResult, oModuleArgument) => {
    oResult[_.get(oModuleArgument, "argName")] = {
      type: helper.createJsDocParamType(_.get(oModuleArgument, "modulePath")),
      node: _.get(oModuleArgument, "moduleNode")
    };
    return oResult;
  }, {});

  let aParamsWithWrongType = [];
  _.forEach(aParamTags, oParamTag => {
    const sParamName = _.get(oParamTag, "name");
    const oNode = _.get(oArgsInfo, "[" + sParamName + "].node");
    if (oNode) {
      const sActualTypeName = _.get(oParamTag, "type");
      const sRightType = _.get(oArgsInfo, "[" + sParamName + "].type");
    
      if (!isTypeValid(sRightType, sActualTypeName)) {
        aParamsWithWrongType.push({
          node: oNode,
          paramType: sRightType,
          paramName: sParamName,
          description: _.get(oParamTag, "description"),
          line: _.get(oParamTag, "line")
        });
      }
    }
  });

  return aParamsWithWrongType;
};

let isTypeValid = (sRightTypeName, sTypeName) => {
  const sRegEx = `\\s*typeof\\s+${sRightTypeName}\\s*`;
  return new RegExp(sRegEx).test(sTypeName);
};

let reportJsDocParamTypeIsWrong = (
  context,
  oJsDocComment,
  aRelevantModuleArguments
) => {
  const aParamsWithWrongType = getParamsWithWrongType(
    oJsDocComment,
    aRelevantModuleArguments
  );
  _.forEach(aParamsWithWrongType, oParamWithWrongType => {
    context.report({
      node: _.get(oParamWithWrongType, "node"),
      message: messages.msg("check-jsdoc-param-type"),
      fix: fixer => {
        let aReplacement = oJsDocComment.value.split("\n");
        aReplacement[_.get(oParamWithWrongType, "line") - 1] = helper.createJsDocParam({
          modulePath: _.get(oParamWithWrongType, "paramType"),
          argName: _.get(oParamWithWrongType, "paramName"),
          paramDescription: _.get(oParamWithWrongType, "description")
        });
        const replacement = aReplacement.join("\n");
        
        return fixer.replaceTextRange(
          [oJsDocComment.start + 2, oJsDocComment.end - 2],
          replacement
        );
      }
    });
  });
};

module.exports.meta = {
  type: "suggestion",

  docs: {
    description: "validates jsdoc param tag type",
    category: "Code assist",
    recommended: true
  },
  fixable: "code",
  schema: []
};

module.exports = helper.executeOnSapUiDefine(
  (context, oJsDocComment, aRelevantModuleArguments) => {
    if (!_.isEmpty(oJsDocComment) && !_.isEmpty(aRelevantModuleArguments)) {
      reportJsDocParamTypeIsWrong(
        context,
        oJsDocComment,
        aRelevantModuleArguments
      );
    }
  }
);