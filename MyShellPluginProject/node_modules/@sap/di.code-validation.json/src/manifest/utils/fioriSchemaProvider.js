var getSchema = require('../../schemaUtils.js');
var _ = require('lodash');
var path = require('path');

function merge(obj, src) {
    Object.keys(src).forEach(function (key) {
        obj[key] = src[key];
    });
    return obj;
}

module.exports = {

    baseSchemaUrl: path.resolve(__dirname, "schema"),

    getSchema: function (oManifestJson, envType, bModule) {
        var appDescriptorSchema = this._mergeSubSchemasToMainSchema(oManifestJson);
        this._flattenOneOfSubSchemas(appDescriptorSchema, oManifestJson);
        this._adaptPropertiesToLspAndEnv(appDescriptorSchema, envType, bModule);
        return appDescriptorSchema;
    },

    _adaptPropertiesToLspAndEnv: function (appDescriptorSchema, envType, bModule) {
        var aProperties = appDescriptorSchema.properties || {};
        for (var sSubSchemaName in aProperties) {
            if (aProperties.hasOwnProperty(sSubSchemaName)) {
                var oSubSchema = aProperties[sSubSchemaName];
                this._changeRefDefintion(oSubSchema, sSubSchemaName);
                this._adjustToEnviornment(oSubSchema, sSubSchemaName, envType);
                this._mergeSubSchemDefinitionToMainSchema(appDescriptorSchema, oSubSchema, sSubSchemaName);
                this._addFioriManifestSchemaExt(appDescriptorSchema, bModule);
            }
        }
    },

    _addFioriManifestSchemaExt: function (appDescriptorSchema, bModule) {
        //the error messages are not in i18n because lsp generate all the error in English and we want to keep the same behavior
        if (bModule) {
            //extension for 'sap.app' subSchema
            if (appDescriptorSchema.definitions && appDescriptorSchema.definitions["sap.app"]) {
                //Adding a pattern property for "sap.app/properties/id". It has a reference to "definitions/id_def" there for the pattern is been added to this section.
                if (appDescriptorSchema.definitions["sap.app"].id_def) {
                    appDescriptorSchema.definitions["sap.app"].id_def.pattern = "^([a-zA-Z_$][a-zA-Z0-9_$]{0,39}.)*([a-zA-Z_$][a-zA-Z0-9_$]{0,39})$";
                    appDescriptorSchema.definitions["sap.app"].id_def.patternErrorMessage = "The ID must start with a letter and may contain letters, digits, dashes, periods, and underscores. The periods can only be used in between other characters (for example, ab.a34a.d).";

                }
                // Adding pattern property for sap.app/applicationVersion/version. It has a reference to "definitions/version" there for the pattern is been added to this section.
                if (appDescriptorSchema.definitions["sap.app"].version) {
                    appDescriptorSchema.definitions["sap.app"].version.pattern = "^\\d+\\.\\d+\\.\\d+$";//example - 1.2.3
                    appDescriptorSchema.definitions["sap.app"].version.patternErrorMessage = "The version must use the 'digit.digit.digit' pattern.";

                }
            }
            //extension for 'sap.ui5' subSchema
            // Adding pattern property for sap.ui5/dependencies/minUI5Version. It has a reference to "definitions/version" there for the pattern is been added to this section.
            if (appDescriptorSchema.definitions && appDescriptorSchema.definitions["sap.ui5"]) {
                if (appDescriptorSchema.definitions["sap.ui5"].version) {
                    appDescriptorSchema.definitions["sap.ui5"].version.pattern = "^\\d+\\.\\d+(\\.\\d+)?$"; //example - 1.2 or 1.2.3
                    appDescriptorSchema.definitions["sap.ui5"].version.patternErrorMessage = "The version must match the 'digit.digit' or 'digit.digit.digit' pattern.";
                }
            }
        }
    },

    _mergeSubSchemDefinitionToMainSchema: function (oSchema, oSubSchema, sSubSchemaName) {
        if (!oSchema.definitions) {
            oSchema.definitions = {};//placeholder for definitions
        }
        if (oSubSchema.definitions) {
            oSchema.definitions[sSubSchemaName] = oSubSchema.definitions;
            delete oSubSchema.definitions;
        }
    },

    _buildSchemaUrl: function (version, relativePath) {
        return (!version || version === "*") ? path.join(this.baseSchemaUrl, relativePath) : path.join(this.baseSchemaUrl, version, relativePath);
    },

    _getSchemaVersion: function (oManifestJson) {
        var version = "*";
        if (oManifestJson && oManifestJson._version) {
            var versionNumbering = oManifestJson._version.split(".");
            if (versionNumbering.length > 1 && versionNumbering[0] === "1" && Number(versionNumbering[1]) > 3) {
                version = oManifestJson._version;

            }
        }
        return version;
    },

    _mergeSubSchemasToMainSchema: function (oManifestJson) {
        var version = this._getSchemaVersion(oManifestJson);
        var sUrl = this._buildSchemaUrl(version, "schema.json");
        var oSchema = getSchema._getRemoteJsonResource(sUrl);
        this._mergeReferencedSubSchemas(oSchema, oManifestJson, version);
        return oSchema;
    },

    _getPropertyVersionFromUserInput: function (oManifestJson, sPropertyName) {
        if (oManifestJson && oManifestJson[sPropertyName]) {
            return oManifestJson[sPropertyName]._version || oManifestJson._version;
        }
    },

    _getSubSchemaEnumVersion: function (oSubSchema) {
        if (oSubSchema && oSubSchema.properties && oSubSchema.properties._version && oSubSchema.properties._version.enum && Array.isArray(oSubSchema.properties._version.enum)) {
            return oSubSchema.properties._version.enum[0];
        }
    },

    _getMostSuitableSchema: function (aSchemas, requiredSubSchemaVersion) {
        var optionsLength = aSchemas.length;
        for (var i = 0; i < optionsLength; i++) {
            var refSubSchema = aSchemas[i];
            if (this._getSubSchemaEnumVersion(refSubSchema) === requiredSubSchemaVersion) {
                return refSubSchema;
            }
        }
        // if we reached here, we need to return the default, which is the newest sub schema. Currently we assume it's the last one
        if (optionsLength > 0) {
            return aSchemas[optionsLength - 1];
        }
    },

    _flattenOneOfSubSchemas: function (oSchema, oManifestJson) {
        var oSchemaProperties = oSchema.properties || {};
        var that = this;
        //for versions 1.3.0 and under, the main schema.json contains references to sub schemas under oneOf element.
        //The reference schemas are merged to the main schema, but only one is selected according to the sub schema _version from manifest.json
        _.each(oSchemaProperties, function (oPropertyValue, subSchemaName) {
            if (oPropertyValue !== null && typeof oPropertyValue === 'object') {
                var requiredSubSchemaVersion = that._getPropertyVersionFromUserInput(oManifestJson, subSchemaName);
                var oneOfSubSchema = oPropertyValue["oneOf"];
                if (oneOfSubSchema && Array.isArray(oneOfSubSchema)) {
                    var oSchemaForVersion = that._getMostSuitableSchema(oneOfSubSchema, requiredSubSchemaVersion);
                    if (oSchemaForVersion) {
                        delete oPropertyValue["oneOf"];
                        merge(oPropertyValue, oSchemaForVersion);
                    }
                }
            }

        });
    },

    _mergeReferencedSubSchemas: function (oSchema, oManifestJson, version) {
        var that = this;
        _.each(oSchema, function (val, key) {
            var val = oSchema[key];
            if (val !== null && typeof val === 'object') {
                that._mergeReferencedSubSchemas(val, oManifestJson, version);
            } else if (key === "$ref") {
                var url = that._buildSchemaUrl(version, val);
                var refSchema = getSchema._getRemoteJsonResource(url);
                delete oSchema["$ref"];
                merge(oSchema, refSchema);
            }
        });
    },

    _changeRefDefintion: function (oSubSchema, subSchemaKey) {
        var that = this;
        _.each(oSubSchema, function (val, key) {
            if (_.isObject(val)) {
                that._changeRefDefintion(val, subSchemaKey);
            } else if (key === "$ref") {
                var sRefPath = oSubSchema["$ref"];
                if (sRefPath.startsWith("#/definitions")) {
                    oSubSchema["$ref"] = sRefPath.replace("#/definitions", "#/definitions/" + subSchemaKey);
                }
            }
        });
    },

    _adjustToEnviornment: function (oSchema, key, envType) {
        /* for internal users, we want to force "ach" and "resources" as mandatory fields */
        if (key === "sap.app") {
            if ("internal" === envType && oSchema) {
                oSchema.required = oSchema.required || [];
                var aExtraRequiredParams = ["ach", "resources"];
                _.each(aExtraRequiredParams, function (val) {
                    oSchema.required.push(val);
                });
            }
        }
    }

}
