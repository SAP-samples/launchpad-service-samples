const fs = require('fs').promises;
const path = require('path');
const https = require('https');
const url = require('url');
const uWS = require('./uWebSockets.js');
const port = process.env.MOCK_PORT || 5001;
const lookupDirs = process.env.MOCK_LOOKUP_DIRS ? JSON.parse(process.env.MOCK_LOOKUP_DIRS) : ['', 'dist', 'webapp'];
const DEFAULT_VCAP_SERVICES = `{"html5-apps-repo": [{"binding_name": null, "credentials": {"grant_type": "client_credentials", "sap.cloud.service": "html5-apps-repo-rt", "uaa": {"clientid": "mock_client_id", "clientsecret": "mock_client_secret", "identityzone": "mock_idz", "identityzoneid": "mock_idz_id", "sburl": "http://localhost", "tenantid": "mock_tenant_id", "tenantmode": "dedicated", "uaadomain": "localhost:${port}", "url": "http://localhost:${port}", "verificationkey": "-----BEGIN PUBLIC KEY-----***-----END PUBLIC KEY-----", "xsappname": "mock_xsappname"}, "uri": "http://localhost:${port}", "vendor": "SAP"}, "instance_name": "mock-html5-apps-repo", "label": "html5-apps-repo", "name": "mock-html5-apps-repo", "plan": "app-runtime", "provider": null, "syslog_drain_url": null, "tags": ["html5appsrepo", "html5-apps-repo-rt", "html5-apps-rt", "html5-apps-repo-dt", "html5-apps-dt"], "volume_mounts": [] } ] }`;
const VCAP_SERVICES = process.env.VCAP_SERVICES ? JSON.parse(process.env.VCAP_SERVICES) : JSON.parse(DEFAULT_VCAP_SERVICES);
const SAP_UI5_URL = process.env.SAP_UI_BOOTSTRAP_URL || 'https://sapui5.hana.ondemand.com';
const RE_UI5_BOOTSTRAP = /<script(.+)id=["']sap-ui-bootstrap["']([^>]+)>/gim;
const FILE_EXTENSION_RE = /\/.+\.([^.\/]+)$/;
const DESTINATIONS = process.env.destinations ? JSON.parse(process.env.destinations) : [];

async function listFiles(basePath) {
    const dirContents = await fs.readdir(basePath, { withFileTypes: true });
    let filePaths = [];
    for(let i=0; i<dirContents.length; i++) {
        const name = path.join(basePath, dirContents[i].name);
        if(dirContents[i].isFile()) {
            filePaths.push(name)
        } else if (dirContents[i].isDirectory()) {
            filePaths = filePaths.concat(await listFiles(name))
        }
    }
    return filePaths;
}

function proxy(targetUri, req, res) {
    const uri = url.parse(targetUri);
    const outHeaders = {};
    ['Authorization'].forEach(key => {
        let value;
        if(!!(value = req.getHeader(key.toLowerCase()))) {
            outHeaders[key] = value;
        }
    });
    const outReq = https.request({
        hostname: uri.hostname,
        port: uri.port,
        path: req.getUrl(),
        method: req.getMethod(),
        headers: outHeaders
    }, outRes => {
        res.writeStatus(outRes.statusCode + ' ' + outRes.statusMessage);
        ['Content-Type', 'Expires', 'Last-Modified'].forEach(key => {
            let value;
            if(!!(value = outRes.headers[key.toLowerCase()])) {
                res.writeHeader(key, value);
            }
        });
        outRes.on('data', chunk => {
            res.write(chunk.buffer.slice(chunk.byteOffset, chunk.byteOffset + chunk.byteLength))
        });
        outRes.on('end', () => {
            res.end()
        })
    });
    outReq.on('error', (err) => {
        console.error(err);
        res.writeStatus('500 Internal Server Error');
        res.end()
    });
    outReq.end();
}

function translate(dic, str) {
    if(!str) { return ''; }
    if(!dic) { return str; }
    return String(str).replace(/{{([^}]+)}}/g, (val, key) => dic[key] || val);
}

function overrideManifest(buf, {relative, APIKey}) {
    const manifest = JSON.parse(buf.toString('utf8'));
    // Remove leading slash from data source URIs
    if(relative) {
        const dataSources = manifest['sap.app'] && manifest['sap.app'].dataSources;
        if (dataSources) {
            Object.values(dataSources).forEach(ds => {
                if (ds.uri && ds.uri.startsWith('/')) {
                    ds.uri = ds.uri.slice(1);
                }
            })
        }
    }
    // Add APIKey header for SAP API Business Hub
    if(APIKey) {
        const dataSources = manifest['sap.app'] && manifest['sap.app'].dataSources;
        const models = manifest['sap.ui5'] && manifest['sap.ui5'].models;
        if(models) {
            Object.values(models).forEach(model => {
                if (dataSources[model.dataSource] && dataSources[model.dataSource].type === 'OData') {
                    const version = dataSources[model.dataSource].settings &&
                        dataSources[model.dataSource].settings.odataVersion;
                    if (!model.settings) {
                        model.settings = {};
                    }
                    if (version === '2.0') {
                        if (!model.settings.headers) {
                            model.settings.headers = {};
                        }
                        model.settings.headers.APIKey = APIKey;
                    } else if (version === '4.0') {
                        if (!model.settings.httpHeaders) {
                            model.settings.httpHeaders = {};
                        }
                        model.settings.httpHeaders.APIKey = APIKey;
                    }
                }
            });
        }
    }
    return JSON.stringify(manifest);
}

async function getTile(meta) {
    try {
        const manifest = JSON.parse(await fs.readFile(path.join(meta.__dir, 'manifest.json'), 'utf8'));
        const i18n = (await fs.readFile(path.join(meta.__dir, manifest['sap.app'].i18n || 'i18n/i18n.properties'), 'utf8').catch(()=>{
            console.warn(`No i18n.properties file found for ${meta.applicationName}-${meta.applicationVersion}. Translations will not be applied!`);
            return '';
        }))
            .split('\n')
            .reduce((acc,cur) => {
                let match = cur.match(/([^=]+)=(.*)/);
                if(match && match.length === 3) {
                    acc[match[1]] = match[2];
                }
                return acc;
            },{});

        return {
            id: meta.applicationName + '_' + meta.applicationVersion,
            size: "1x1",
            tileType: "sap.ushell.ui.tile.StaticTile",
            title: translate(i18n, manifest['sap.app'].title) || (meta.applicationName + '-' + meta.applicationVersion),
            properties: {
                chipId: "catalogTile_" + meta.applicationName,
                title: translate(i18n, manifest['sap.app'].title) || (meta.applicationName + '-' + meta.applicationVersion),
                subtitle: translate(i18n, manifest['sap.app'].subTitle || manifest['sap.app'].description),
                icon: (manifest['sap.ui'] && manifest['sap.ui'].icons && manifest['sap.ui'].icons.icon)  || "sap-icon://product",
                info: meta.applicationName + '-' + meta.applicationVersion,
                targetURL: "/" + meta.applicationName + '-' + meta.applicationVersion
            }
        }
    } catch(err) {
        return {
            id: meta.applicationName + '_' + meta.applicationVersion,
            size: "1x1",
            tileType: "sap.ushell.ui.tile.StaticTile",
            title: meta.applicationName + '-' + meta.applicationVersion,
            properties: {
                chipId: "catalogTile_" + 0,
                title: meta.applicationName + "-" + meta.applicationVersion,
                subtitle: err.message,
                icon: "sap-icon://warning",
                info: "Error",
                targetURL: "/" + meta.applicationName + '-' + meta.applicationVersion
            }
        };
    }
}

function isSpace(ch, extra = '') {
    return ch === ' ' || ch === '\t' || ch === '\r' || ch === '\n' || extra.indexOf(ch) >= 0;
}

function parseTag(tag) {
    const result = {
        tagName: '',
        attributes: {}
    };
    let i = 1;
    let state = 'TAG_NAME';
    let currentAttributeName = '';
    let currentAttributeValue = '';
    let doubleQuoteCounter = 0;
    let singleQuoteCounter = 0;
    let quoteType = '';
    while(i < tag.length-1) {
        switch (state) {
            case 'TAG_NAME':
                result.tagName += tag[i];
                if(isSpace(tag[i+1])) {
                    state = 'SPACE_BEFORE_ATTRIBUTE_NAME';
                }
                i++;
                break;
            case 'SPACE_BEFORE_ATTRIBUTE_NAME':
                if(!isSpace(tag[i+1])) {
                    currentAttributeName = '';
                    state = 'ATTRIBUTE_NAME';
                }
                i++;
                break;
            case 'ATTRIBUTE_NAME':
                currentAttributeName += tag[i];
                if(isSpace(tag[i+1], '=')) {
                    result.attributes[currentAttributeName] = '';
                    state = 'SPACE_BEFORE_ATTRIBUTE_VALUE';
                }
                i++;
                break;
            case 'SPACE_BEFORE_ATTRIBUTE_VALUE':
                if(tag[i+1] === '"') {
                    quoteType = '"';
                    doubleQuoteCounter = 1;
                    state = 'ATTRIBUTE_VALUE_START';
                } else if(tag[i+1] === "'") {
                    quoteType = "'"
                    singleQuoteCounter = 1;
                    state = 'ATTRIBUTE_VALUE_START';
                } else if(!isSpace(tag[i+1], '=')) {
                    state = 'ATTRIBUTE_NAME';
                }
                i++;
                break;
            case 'ATTRIBUTE_VALUE_START':
                if(tag[i+1] === '"' || tag[i+1] === "'") {
                    state = 'SPACE_BEFORE_ATTRIBUTE_NAME';
                } else {
                    currentAttributeValue = '';
                    state = 'ATTRIBUTE_VALUE';
                }
                i++;
                break;
            case 'ATTRIBUTE_VALUE':
                if(tag[i-1] !== '\\') {
                    if(tag[i] === '"') {
                        doubleQuoteCounter++;
                    }
                    if(tag[i] === "'") {
                        singleQuoteCounter++;
                    }
                    if((tag[i] === '"' || tag[i] === "'") && doubleQuoteCounter % 2 === 0 && singleQuoteCounter % 2 === 0) {
                        result.attributes[currentAttributeName] = {value: currentAttributeValue, quote: quoteType};
                        state = 'SPACE_BEFORE_ATTRIBUTE_NAME';
                    } else {
                        currentAttributeValue += tag[i];
                    }
                } else {
                    currentAttributeValue += tag[i];
                }
                i++;
                break;
            default:
                i++;
        }
    }
    return result;
}

function overrideUI5Configuration(ui5, buf) {
    let ui5Url = '';
    let result = buf.toString('utf-8').replace(RE_UI5_BOOTSTRAP, match => {
        const _ui5 = Object.assign({}, ui5);
        const tag = parseTag(match);
        if(_ui5.version) {
            const url = tag.attributes.src.value;
            const resourcesIdx = url.indexOf('/resources');
            ui5Url = url.slice(0, resourcesIdx);
            tag.attributes.src.value = SAP_UI5_URL + '/' + _ui5.version + url.slice(resourcesIdx);
            delete _ui5.version;
        }
        Object.keys(_ui5).forEach(key => {
            if(!tag.attributes['data-sap-ui-'+key]) {
                tag.attributes['data-sap-ui-'+key] = {quote: '"', value: ''};
            }
            tag.attributes['data-sap-ui-'+key].value = _ui5[key];
        });
        return `<${tag.tagName} ${Object.keys(tag.attributes).map(key => key + '=' + tag.attributes[key].quote + tag.attributes[key].value + tag.attributes[key].quote).join(' ')}>`
    });
    if(ui5.version) {
        result = result.replace(
            new RegExp(`((href|src)\s*=\s*['"])${ui5Url}/(test-resources|resources)`, 'gim'),
            '$1' +SAP_UI5_URL + '/' + ui5.version + '/$3'
        );
    }
    return result;
}

function injectHTML(inject, buf) {
    let result = buf.toString('utf-8');
    if(!Array.isArray(inject)) {
        inject = [inject];
    }
    inject.forEach(obj => {
        if(!obj || typeof obj !== "object") { return; }
        if(obj.script) {
            if(obj.script.startsWith('http://') || obj.script.startsWith('https://')) {
                obj.content = `<script src="${obj.script}"></script>`;
            } else {
                obj.content = `<script>${obj.script}</script>`;
            }
        }
        if(obj.content) {
            switch (obj.place) {
                case 'head-start':
                    result = result.replace(/(<head[^>]*>)/, `$1${obj.content}`);
                    break;
                case 'head-end':
                    result = result.replace(/(<\/head[^>]*>)/, `${obj.content}$1`);
                    break;
                case 'body-start':
                    result = result.replace(/(<body[^>]*>)/, `$1${obj.content}`);
                    break;
                case 'body-end':
                    result = result.replace(/(<\/body[^>]*>)/, `${obj.content}$1`);
                    break;
                default:
                    console.error(
                        `Invalid configuration. Object should have a valid 'place' property,` +
                        ` with one of the following values: head-start, head-end, body-start, body-end.` +
                        ` Got: ${JSON.stringify(obj)}`
                    );
            }
        }
    });
    return result;
}

function getContentType(filePath, mimeTypes) {
    const match = filePath.match(FILE_EXTENSION_RE);
    if (match) {
        return mimeTypes[match[1]] || {
            'aac': 'audio/aac',
            'abw': 'application/x-abiword',
            'arc': 'application/x-freearc',
            'avi': 'video/x-msvideo',
            'azw': 'application/vnd.amazon.ebook',
            'bin': 'application/octet-stream',
            'bmp': 'image/bmp',
            'bz': 'application/x-bzip',
            'bz2': 'application/x-bzip2',
            'csh': 'application/x-csh',
            'css': 'text/css',
            'csv': 'text/csv',
            'doc': 'application/msword',
            'docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
            'eot': 'application/vnd.ms-fontobject',
            'epub': 'application/epub+zip',
            'gz': 'application/gzip',
            'gif': 'image/gif',
            'htm': 'text/html',
            'html': 'text/html',
            'ico': 'image/vnd.microsoft.icon',
            'ics': 'text/calendar',
            'jar': 'application/java-archive',
            'jpeg': 'image/jpeg',
            'jpg': 'image/jpeg',
            'js': 'text/javascript',
            'json': 'application/json',
            'jsonld': 'application/ld+json',
            'mid': 'audio/midi',
            'midi': 'audio/x-midi',
            'mjs': 'text/javascript',
            'mp3': 'audio/mpeg',
            'mpeg': 'video/mpeg',
            'mpkg': 'application/vnd.apple.installer+xml',
            'odp': 'application/vnd.oasis.opendocument.presentation',
            'ods': 'application/vnd.oasis.opendocument.spreadsheet',
            'odt': 'application/vnd.oasis.opendocument.text',
            'oga': 'audio/ogg',
            'ogv': 'video/ogg',
            'ogx': 'application/ogg',
            'opus': 'audio/opus',
            'otf': 'font/otf',
            'png': 'image/png',
            'pdf': 'application/pdf',
            'php': 'application/x-httpd-php',
            'ppt': 'application/vnd.ms-powerpoint',
            'pptx': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
            'rar': 'application/vnd.rar',
            'rtf': 'application/rtf',
            'sh': 'application/x-sh',
            'svg': 'image/svg+xml',
            'swf': 'application/x-shockwave-flash',
            'tar': 'application/x-tar',
            'tif': 'image/tiff',
            'tiff': 'image/tiff',
            'ts': 'video/mp2t',
            'ttf': 'font/ttf',
            'txt': 'text/plain',
            'vsd': 'application/vnd.visio',
            'wav': 'audio/wav',
            'weba': 'audio/webm',
            'webm': 'video/webm',
            'webp': 'image/webp',
            'woff': 'font/woff',
            'woff2': 'font/woff2',
            'xhtml': 'application/xhtml+xml',
            'xls': 'application/vnd.ms-excel',
            'xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            'xml': 'application/xml',
            'xul': 'application/vnd.mozilla.xul+xml',
            'zip': 'application/zip',
            '3gp': 'video/3gpp',
            '3g2': 'video/3gpp2',
            '7z': 'application/x-7z-compressed',
        }[match[1]] || 'text/plain';
    }
    return 'text/plain';
}

module.exports.bootstrap = async function bootstrap({dir, baseUrl, relative, ui5, APIKey, inject, mimeTypes}) {

    let isConfigurationError = false;
    let originalRepoUri;

    // Override VCAP_SERVICES
    if(Array.isArray(VCAP_SERVICES['html5-apps-repo']) && VCAP_SERVICES['html5-apps-repo'].length && VCAP_SERVICES['html5-apps-repo'][0].credentials) {
        originalRepoUri = VCAP_SERVICES['html5-apps-repo'][0].credentials.uri;
        VCAP_SERVICES['html5-apps-repo'][0].credentials.uri = `http://localhost:${port}`
    }

    // Read directory contents
    const dirContents = await fs.readdir(dir, { withFileTypes: true });

    // Find HTML5 applications
    const metadata = (await Promise.all(dirContents.map(async (dirent) => {
        if(dirent.isDirectory()) {
            try {
                await fs.access(path.join(dir, dirent.name, 'xs-app.json'));
                for(let i=0; i<lookupDirs.length; i++) {
                    const lookupDir = lookupDirs[i];
                    try {
                        const manifestPath = path.join(dir, dirent.name, lookupDir, 'manifest.json');
                        const manifest = JSON.parse(await fs.readFile(manifestPath, 'utf8'));
                        const appName = manifest['sap.app'].id.replace(/[.\-]/g, '');
                        const appVersion = manifest['sap.app'].applicationVersion.version;
                        if (!appName.match(/^[a-zA-Z0-9_ ]+$/)) {
                            console.error(`Error: ${manifestPath} contains invalid sap.app/id = "${manifest['sap.app'].id}". Only [a-zA-Z0-9.-_ ] are allowed (e.g. "my.app_name1").\n`);
                            isConfigurationError = true;
                            return null;
                        }
                        if (!appVersion.match(/^(\d+\.){2}(\d+)$/)) {
                            console.error(`Error: ${manifestPath} contains invalid sap.app/applicationVersion/version = "${appVersion}". Only three not negative numbers separated by dots are allowed (e.g. "1.0.0").\n`);
                            isConfigurationError = true;
                            return null;
                        }
                        console.log(`\t${manifest['sap.app'].id}@${appVersion}\t->\t${baseUrl}${appName}-${appVersion}/`);
                        return {
                            applicationName: appName,
                            applicationVersion: appVersion,
                            __conf: path.join(dir, dirent.name),
                            __dir: path.join(dir, dirent.name, lookupDir)
                        }
                    } catch(err) {/* Do Nothing */}
                }
            } catch(err) {/* Do Nothing */}
            return null;
        }
    }))).filter(m => !!m);

    // Don't start server if there are configuration errors, exit with error code
    if (isConfigurationError) {
        process.exit(1);
    }

    // File paths
    const filePaths = (await Promise.all(metadata.map(meta => listFiles(meta.__dir)))).reduce((acc, files) => {
        return acc.concat(files.map(file => file.substr(dir.length)))
    }, []);

    // Server
    const app = uWS.App({})

    // ===== UTILS =====

    // Get VCAP_SERVICES
    .get('/vcap', res => {
        res.writeHeader('Content-Type', 'application/json');
        res.end(process.env.VCAP_SERVICES);
    })

    // ===== XSUAA MOCK =====

    // XSUAA get client credentials token
    .post('/oauth/*', res => {
        res.writeHeader('Content-Type', 'application/json');
        res.end(JSON.stringify({
            "access_token": "MOCK.ACCESS.TOKEN",
            "token_type": "bearer",
            "expires_in": 43199,
            "scope": "uaa.resource",
            "jti": "915f7795bf2f4ea5a77b138dc8a50709"
        }));
    })

    // ===== DESTINATION MOCK =====

    .get('/destination-configuration/v1/subaccountDestinations', res => {
        res.writeHeader('Content-Type', 'application/json');
        res.end(JSON.stringify(DESTINATIONS));
    })

    .get('/destination-configuration/v1/subaccountDestinations/*', res => {
        res.writeStatus('404 Not Found');
        res.end('');
    })

    .get('/destination-configuration/v1/instanceDestinations', res => {
        res.writeHeader('Content-Type', 'application/json');
        res.end('[]');
    })

    .get('/destination-configuration/v1/instanceDestinations/*', res => {
        res.writeStatus('404 Not Found');
        res.end('');
    })

    .get('/destination-configuration/v1/destinations/*', res => {
        res.writeStatus('404 Not Found');
        res.end('');
    })

    // ===== PORTAL MOCK =====

    .get('/portal/xs-app.json', res => {
        res.writeHeader('Content-Type', 'application/json');
        res.end(JSON.stringify({
            "authenticationMethod": "none",
            "routes": [{
                "source": "^(.*)",
                "target": "$1",
                "service": "html5-apps-repo-rt"
            }]
        }));
    })

    .get('/portal/site', res => {
        res.writeStatus('302 Found');
        res.writeHeader('Location', 'test-resources/sap/ushell/shells/sandbox/fioriSandbox.html');
        res.end();
    })

    .get('/portal/test-resources/sap/ushell/shells/sandbox/fioriSandboxConfig.json', async res => {
        res.onAborted(() => {
            console.error('response aborted')
        });
        res.writeHeader('Content-Type', 'application/json');
        res.end(JSON.stringify({
            services: {
                LaunchPage: {
                    adapter: {
                        config: {
                            catalogs: [],
                            groups: [{
                                id: "mock_group",
                                isGroupLocked: false,
                                isPreset: true,
                                isVisible: true,
                                title: "Workspace Applications",
                                tiles: await Promise.all(metadata.map(getTile))
                            }]
                        }
                    }
                }
            }
        }));
    })

    .get('/portal/*', (res, req) => {
        res.onAborted(() => {
            console.error('response aborted')
        });
        proxy(SAP_UI5_URL, {
            getUrl: () => req.getUrl().slice('/portal'.length),
            getMethod: () => 'GET',
            getHeader: key => req.getHeader(key)
        }, res);
    })

    // ===== HTML5 APPS REPO MOCK =====

    // Application files path
    .get('/applications/files/path/:appKey', (res, req) => {
        const appKey = req.getParameter(0);
        res.writeHeader('Content-Type', 'application/json');
        res.end(JSON.stringify(filePaths.filter(file => file.startsWith('/'+appKey))));
    })

    // Application metadata
    .get('/applications/metadata', res => {
        res.writeHeader('Content-Type', 'application/json');
        res.end(JSON.stringify(metadata));
    })

    // Get file content
    .get('/:appKey/*', (res, req) => {
        res.onAborted(() => {
            console.error('response aborted')
        });
        const appKey = req.getParameter(0);
        const [appName, appVersion] = appKey.split('-');
        const appMeta = metadata.find(
            app => app.applicationName === appName && (!appVersion || app.applicationVersion === appVersion)
        );
        if(appMeta) {
            const urlPath = req.getUrl().substr(appKey.length+1);
            const filePath = path.join(urlPath === '/xs-app.json' ? appMeta.__conf : appMeta.__dir, urlPath);
            fs.stat(filePath).then(stats => {
                if(stats.isFile()) {
                    fs.readFile(filePath)
                        .then(fileContents => {
                            res.writeHeader('Content-Type', getContentType(filePath, mimeTypes));
                            if((Object.keys(ui5).length || Object.keys(inject).length) && urlPath.endsWith('.html')) {
                                res.end(injectHTML(inject, overrideUI5Configuration(ui5, fileContents)));
                            } else if((relative || APIKey) && urlPath.endsWith('/manifest.json')) {
                                res.end(overrideManifest(fileContents, {relative, APIKey}));
                            } else {
                                res.end(fileContents.buffer.slice(
                                    fileContents.byteOffset,
                                    fileContents.byteOffset + fileContents.byteLength
                                ));
                            }
                        })
                        .catch(err =>
                            res.end(err.message)
                        )
                } else {
                    // request is to directory
                    res.writeStatus('403 Forbidden');
                    res.end('');
                }
            }).catch(() => {
                // file does not exist
                res.writeStatus('404 Not Found');
                res.end('');
            })
        } else {
            // app does not exist
            if(originalRepoUri && originalRepoUri !== VCAP_SERVICES['html5-apps-repo'][0].credentials.uri) {
                proxy(originalRepoUri, req, res);
            } else {
                res.writeStatus('503 Service Unavailable');
                res.end('');
            }
        }
    })

    // Listen
    .listen(port, token => {
        if (token) {
            console.log('\nHTML5 Apps Repo Mock is running on port:', port);
        } else {
            console.error('\nFailed to listen to port ' + port);
        }
    });
};
