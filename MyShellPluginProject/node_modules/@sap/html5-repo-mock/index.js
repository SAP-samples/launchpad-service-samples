const arPort = process.env.PORT || 5000;
const port = process.env.MOCK_PORT || 5001;
const path = require('path');
const mockServer = require('./server.js');

function overrideDependencies() {
    let VCAP_SERVICES;
    if (!process.env.VCAP_SERVICES) {
        VCAP_SERVICES = {}
    } else {
        VCAP_SERVICES = JSON.parse(process.env.VCAP_SERVICES)
    }
    if (!VCAP_SERVICES['html5-apps-repo']) {
        VCAP_SERVICES['html5-apps-repo'] = [{
            "binding_name": null,
            "credentials": {
                "grant_type": "client_credentials",
                "sap.cloud.service": "html5-apps-repo-rt",
                "uaa": {
                    "clientid": "mock_client_id",
                    "clientsecret": "mock_client_secret",
                    "identityzone": "mock_idz",
                    "identityzoneid": "mock_idz_id",
                    "sburl": "http://localhost",
                    "tenantid": "mock_tenant_id",
                    "tenantmode": "dedicated",
                    "uaadomain": `localhost:${port}`,
                    "url": `http://localhost:${port}`,
                    "verificationkey": "-----BEGIN PUBLIC KEY-----***-----END PUBLIC KEY-----",
                    "xsappname": "mock_xsappname"
                },
                "uri": `http://localhost:${port}`,
                "vendor": "SAP"
            },
            "instance_name": "mock-html5-apps-repo",
            "label": "html5-apps-repo",
            "name": "mock-html5-apps-repo",
            "plan": "app-runtime",
            "provider": null,
            "syslog_drain_url": null,
            "tags": ["html5appsrepo", "html5-apps-repo-rt", "html5-apps-rt", "html5-apps-repo-dt", "html5-apps-dt"],
            "volume_mounts": []
        }]
    }
    let flpFlagIndex = -1;
    if((flpFlagIndex = process.argv.indexOf('--flp')) >= 0) {
        process.argv.splice(flpFlagIndex, 1);
        VCAP_SERVICES['portal'] = [{
            "binding_name": null,
            "credentials": {
                "endpoints": {
                    "portal-service": `http://localhost:${port}`
                },
                "html5-apps-repo": {
                    "app_host_id": "12345678-1234-1234-1234-123456789abc"
                },
                "saasregistryenabled": true,
                "sap.cloud.service": "com.sap.ui.portal",
                "sap.cloud.service.alias": "cp",
                "uaa": {
                    "clientid": "mock_client_id",
                    "clientsecret": "mock_client_secret",
                    "identityzone": "mock_idz",
                    "identityzoneid": "mock_idz_id",
                    "sburl": "http://localhost",
                    "tenantid": "mock_tenant_id",
                    "tenantmode": "dedicated",
                    "uaadomain": `localhost:${port}`,
                    "url": `http://localhost:${port}`,
                    "verificationkey": "-----BEGIN PUBLIC KEY-----***-----END PUBLIC KEY-----",
                    "xsappname": "mock_xsappname"
                }
            },
            "instance_name": "mock-portal",
            "label": "portal",
            "name": "mock-portal",
            "plan": "standard",
            "provider": null,
            "syslog_drain_url": null,
            "tags": [
                "cp",
                "portal",
                "portal-service"
            ],
            "volume_mounts": []
        }];
    }
    let destinationFlagIndex = -1;
    if((destinationFlagIndex = process.argv.indexOf('--destination')) >= 0) {
        process.argv.splice(destinationFlagIndex, 1);
        VCAP_SERVICES['destination'] = [{
            "binding_name": null,
            "credentials":{
                "clientid": "mock_client_id",
                "clientsecret": "mock_client_secret",
                "identityzone": "mock_idz",
                "instanceid": "12345678-1234-1234-1234-123456789abc",
                "tenantid": "12345678-1234-1234-1234-123456789abc",
                "tenantmode": "dedicated",
                "uaadomain": `localhost:${port}`,
                "uri": `http://localhost:${port}`,
                "url": `http://localhost:${port}`,
                "verificationkey": "-----BEGIN PUBLIC KEY-----***-----END PUBLIC KEY-----",
                "xsappname": "mock_xsappname"
            },
            "instance_name": "destination",
            "label": "destination",
            "name": "destination",
            "plan": "lite",
            "provider": null,
            "syslog_drain_url": null,
            "tags": [
                "destination",
                "conn",
                "connsvc"
            ],
            "volume_mounts": []
        }];
    }
    let loginFlagIndex = -1;
    if((loginFlagIndex = process.argv.indexOf('--login')) >= 0) {
        const sapCloudService = process.argv[loginFlagIndex + 1];
        if(!sapCloudService || sapCloudService.startsWith('--')) {
            console.error('Error: wrong number of arguments. Expected sap.cloud.service to be passed after --login');
            process.exit(1);
        }
        process.argv.splice(loginFlagIndex, 2);
        for(const [binding] of Object.values(VCAP_SERVICES)) {
            if(binding && binding.credentials && binding.credentials.uaa &&
                binding.credentials['sap.cloud.service'] === sapCloudService
            ) {
                VCAP_SERVICES['xsuaa'] = [{
                    "binding_name": null,
                    "credentials": binding.credentials.uaa,
                    "instance_name": "uaa",
                    "label": "xsuaa",
                    "name": "uaa",
                    "plan": "application",
                    "provider": null,
                    "syslog_drain_url": null,
                    "tags": ["xsuaa"],
                    "volume_mounts": []
                }];
                break;
            }
        }
    }
    process.env.VCAP_SERVICES = JSON.stringify(VCAP_SERVICES);
}

// Override xs-app.json welcomeFile in standalone mode
let standaloneFlagIndex, welcomeFile;
if((standaloneFlagIndex = process.argv.indexOf('--standalone')) >= 0) {
    welcomeFile = process.argv[standaloneFlagIndex + 1];
    process.argv.splice(standaloneFlagIndex, 2);
}

// Override manifest.json data source URI
let relativeFlagIndex, relative = false;
if((relativeFlagIndex = process.argv.indexOf('--relative')) >= 0) {
    relative = true;
    process.argv.splice(relativeFlagIndex, 1);
}

// Override UI5 configuration in HTML files
let ui5Index, ui5 = {};
if((ui5Index = process.argv.indexOf('--ui5')) >= 0) {
    ui5 = process.argv[ui5Index + 1];
    try {
        ui5 = JSON.parse(ui5);
    } catch(err) {
        console.error(`Parsing error. --ui5 argument should be a valid JSON. E.g. --ui5 "{\\"version\\":\\"1.0.0\\"}"`)
        process.exit(1);
    }
    process.argv.splice(ui5Index, 2);
}

// Add APIKey header to OData requests
let APIKeyIndex, APIKey = '';
if((APIKeyIndex = process.argv.indexOf('--APIKey')) >= 0) {
    APIKey = process.argv[APIKeyIndex + 1];
    process.argv.splice(APIKeyIndex, 2);
} else if (process.env.API_KEY) {
    APIKey = process.env.API_KEY;
}

// Inject content to HTML files
let injectIndex, inject = {};
if((injectIndex = process.argv.indexOf('--inject')) >= 0) {
    inject = process.argv[injectIndex + 1];
    try {
        inject = JSON.parse(inject);
    } catch(err) {
        console.error(
            `Parsing error. --inject argument should be a valid JSON. E.g. ` +
            `--inject "{\\"place\\":\\"head-start\\", \\"script\\": \\"http://test.com/script.js\\"}"`
        );
        process.exit(1);
    }
    process.argv.splice(injectIndex, 2);
}

// MIME Types
let mimeTypesIndex, mimeTypes = {};
if ((mimeTypesIndex = process.argv.indexOf('--mime-types')) > 0) {
    mimeTypes = process.argv[mimeTypesIndex + 1];
    try {
        mimeTypes = JSON.parse(mimeTypes);
    } catch (err) {
        console.error(
            `Parsing error. --mime-types argument should be a valid JSON. E.g. ` +
            `--mime-types "{\\"my-ext\\":\\"application/x-my-ext\\"}"`
        );
        process.exit(1);
    }
    process.argv.splice(mimeTypesIndex, 2);
}

// Start Mock
mockServer.bootstrap(
    {
        // HTML5 apps root
        dir: process.env.MOCK_DIR || path.resolve(process.cwd(), '..'),
        // Base URL
        baseUrl: process.env.AR_BASE || process.env.WS_BASE_URL || `http://localhost:${arPort}/`,
        // Remove leading slash from data source URIs in manifest.json?
        relative,
        // Override UI5 configuration in HTML files
        ui5,
        // SAP API Business Hub
        APIKey,
        // Inject content to HTML files
        inject,
        // MIME Types (Content-Type)
        mimeTypes
    }
).then(() => {
    // Start Approuter
    overrideDependencies();
    const approuter = require('@sap/approuter');
    const ar = approuter();
    if(welcomeFile) {
        // Override welcome file in case command line option provided
        ar.first.use((req, res, next) => {
            req.app.get('mainRouterConfig').appConfig.welcomeFile = welcomeFile;
            next();
        });
    }
    ar.start();
}).catch(err => {
    console.error(err);
});
