var CLIEngineBuilder = function CLIEngineBuilder() {
    //see http://eslint.org/docs/developer-guide/nodejs-api.html
    this.objForCLI = {};
    return this;
};

var DEFAULT_SEVERITY = "warning";


// Currently custom rules are supported only for fiori rules which are maintained locally in this repository
var isValidDir = function (dir) {
    try {
        var stats = fs.statSync(dir);
        if (stats.isDirectory()) {
            return true;
        }
    } catch (e) {
        //no eslintignore file exists - nothing to do
    }
    return false;
}

CLIEngineBuilder.prototype.withCustomRules = function (aPath) {
    //see http://eslint.org/docs/user-guide/command-line-interface.html
    if (aPath && aPath.length > 0) {
        // this.objForCLI.rulePaths = [] WAS NOT CREATED HERE INTENTIONALY; eslint has rulesPaths empty array by default (in eslint implementation used). The
        // eslint default may change, and its new implementation may regard an empty array (if no custom rules or fiori rules) as a bug.
        this.objForCLI.rulePaths = aPath;
    }
    return this;
};

var writeInvalidEnv = [];
CLIEngineBuilder.prototype.withEnv = function (oEnv) {
    // http://eslint.org/docs/user-guide/command-line-interface.html && http://eslint.org/docs/developer-guide/nodejs-api.html
    var aEnvs = [];
    for (var environment in oEnv) {
        if (oEnv.hasOwnProperty(environment)) {
            if (oEnv[environment] === true || oEnv[environment] === "true") {
                aEnvs.push(environment);
            } else if (oEnv[environment] !== false && oEnv[environment] !== "false") {//in case of false don't add to env
                //in case not boolean - the value is not valid and ignored
                writeInvalidEnv.push(environment + ":" + oEnv[environment]);
            }
        }
    }
    if (aEnvs.length) {
        this.objForCLI.envs = aEnvs;
    }
    return this;
};


CLIEngineBuilder.prototype.withIgnoreEslintrc = function () {
    this.objForCLI.useEslintrc = false;
    return this;
};

CLIEngineBuilder.prototype.withIgnoreFile = function (ignoreFilePath) {
    this.objForCLI.ignorePath = ignoreFilePath;
    return this;
};


CLIEngineBuilder.prototype.withGlobals = function (oGlobals) {
    // http://eslint.org/docs/user-guide/command-line-interface.html
    var aGlobals = [];
    for (var global in oGlobals) {
        if (oGlobals.hasOwnProperty(global)) {
            if (oGlobals[global] === false) {
                aGlobals.push(global);
            } else if (oGlobals[global] === true) {
                aGlobals.push(global + ":true");
            }
        }
    }
    if (aGlobals.length) {
        this.objForCLI.globals = aGlobals;
    }
    return this;
};

CLIEngineBuilder.prototype.withRules = function (oRules) {
    // http://eslint.org/docs/developer-guide/nodejs-api.html
    this.objForCLI.rules = oRules;
    return this;
}

var aSortArray = function (aIssues) {
    var aHelpArr = [];
    var aSortArr = [];
    for (var i = 0; i < aIssues.length; i++) {
        if (aIssues[i] && aIssues[i].severity && aIssues[i].severity.toLowerCase() === "error") {
            aSortArr.push(aIssues[i]);

        }
        else {
            aHelpArr.push(aIssues[i]);
        }
    }
    var aMergedArray = aSortArr.concat(aHelpArr);
    var iMin = Math.min(100, aMergedArray.length);
    var aFinalArray = [];
    for (var j = 0; j < iMin; j++) // showing maximum 100 problems
    {
        aFinalArray[j] = aMergedArray[j];
    }
    return aFinalArray;
}


var writeNoConfigLog = false;
var writeNoRuleIsLog = false;
var produceIssues = function (filePath, orulesExt, eslintIssues) {
    var oResult = {
        "root": {},
        "issues": []
    };
    var oRulesExt = orulesExt;

    for (var i = 0; i < eslintIssues.length; i++) {

        var oIssue = eslintIssues[i];
        if (!oIssue.ruleId) {
            writeNoRuleIsLog = true;
        }
        if (oIssue.fatal) {
            oIssue.ruleId = "syntax-parse";
        }
        if (oRulesExt !== null && oRulesExt !== undefined) {
            var ruleExt = oRulesExt[oIssue.ruleId];
            if (!ruleExt && !oIssue.fatal) {
                writeNoConfigLog = true;
            } else {
                oIssue.severity = oIssue.fatal ? "error" : ruleExt.severity;
                oIssue.category = oIssue.fatal ? "Syntax Error" : ruleExt.category;
                oIssue.helpUrl = oIssue.fatal ? "http://www.ecma-international.org/ecma-262/5.1/" : ruleExt.helpUrl;
            }
        }

        if (oIssue.severity) {
            oIssue.severity = oIssue.severity.toString().toLowerCase();
        }

        // error handling if configuration contains a wrong severity
        if (oIssue.severity !== "error" && oIssue.severity !== "warning" && oIssue.severity !== "info") {
            oIssue.severity = DEFAULT_SEVERITY;
        }
        if (oResult.root.severity === undefined && oIssue.fatal) {
            oResult.root.severity = oIssue.severity;
        }

        oResult.issues.push({
            category: oIssue.category,
            checker: "ESLint",
            column: oIssue.column,
            helpUrl: oIssue.helpUrl,
            line: oIssue.line,
            message: oIssue.message,
            path: filePath,
            ruleId: oIssue.ruleId,
            severity: oIssue.severity
            //source: oIssue.source
        });
    }
    oResult.issues = aSortArray(oResult.issues);
    return oResult;
};

var resultHandler = function (validationMetadata, eslintExtConfig, report) {
    var returnResults = {issues: []};
    var results = report.results || [];
    for (var i in results) {
        var result = results[i];
        var convertedMessages;
        if (result.messages) {
            convertedMessages = produceIssues(result.filePath, eslintExtConfig.rulesExt, result.messages);
            convertedMessages = convertedMessages || {issues: []};
            returnResults.issues = returnResults.issues.concat(convertedMessages.issues);
        }
    }
    return returnResults;
}

var CLIEngine = require("eslint").CLIEngine;
var fs = require("fs");
var path = require("path");
var coreLibs = require('@sap/di.code-validation.core');
var fileUtils = coreLibs.fileUtils;

function getIgnoreFilePath(validationMetadata) {
    var ignoreFilePath = path.resolve(validationMetadata.getRootPath(), ".eslintignore");
    if (fs.existsSync(ignoreFilePath)) {
        return ignoreFilePath;
    }
}

function getConfigFileContent(validationMetadata, configFilePath) {
    try {
        var configFilePath = path.resolve(validationMetadata.getRootPath(), configFilePath);
        var stats = fs.statSync(configFilePath);
        if (stats.isFile()) {
            try {
                var sConfig = fs.readFileSync(configFilePath, 'utf8');
                var oConfig = JSON.parse(sConfig);
                return oConfig;
            }
            catch (e) {
                // failed to read user's .eslintrc
                process.stderr.write("Error reading user's eslintrc file under " + configFilePath);
                process.stderr.write(e.stack);
            }
            ;
        }
    } catch (e) {
        var a = e;
        //no eslintrc file exists - nothing to do
    }
}

function applyFilterLevelForRules(eslintConfig, eslintExtConfig, levels) {
    var levelEnabled = {
        "info": (levels.indexOf("info") >= 0),
        "warning": (levels.indexOf("warning") >= 0),
        "error": (levels.indexOf("error") >= 0)
    };

    if (eslintConfig.rules && Object.keys(eslintConfig.rules)) {
        Object.keys(eslintConfig.rules).forEach(function (ruleId) {
            if (eslintExtConfig && eslintExtConfig.rulesExt[ruleId]) {
                var severity = eslintExtConfig.rulesExt[ruleId].severity;
                if (!levelEnabled[severity]) {
                    eslintConfig.rules[ruleId] = 0;
                }
            } else if (!levelEnabled[DEFAULT_SEVERITY]) {
                eslintConfig.rules[ruleId] = 0;
            }
        })

    }
}

function convertConfigStructure(rulesExt) {
    var severityMap = {
        "i": "info",
        "info": "info",
        "w": "warning",
        "warning": "warning",
        "e": "error",
        "error": "error"
    };
    Object.keys(rulesExt).forEach(function (ruleId) {
        var ruleExt = rulesExt[ruleId];
        ruleExt.severity = severityMap[ruleExt.severity];
        if (ruleExt.help) {
            ruleExt.helpUrl = ruleExt.help;
        }
    });
}

function validateFiles(validationMetadata, fileResources) {
    var cliContainer = new CLIEngineBuilder();

    if (!validationMetadata) {
        validationMetadata = new coreLibs.validationMetadata(process.cwd());
    }
    if (!fileResources) {
        fileResources = [];
        var files = fileUtils.listFilteredFilesSync(validationMetadata.getRootPath(), {
            extensions: [".js"],
            ignoredPaths: [path.join(validationMetadata.getRootPath(), 'node_modules'), 'dist']
        }) || [];
        files.forEach(function (filePath) {
            var fileResource = new coreLibs.fileResource(validationMetadata.getRootPath(), filePath);
            fileResources.push(fileResource);
        });
    }

    var _bFioriJSValidator = _isFioriJSValidator(validationMetadata);

    var eslintConfig = getConfigFileContent(validationMetadata, "./.eslintrc");
    if (!eslintConfig) {
        var _eslintrcPath;
        if (_bFioriJSValidator) {
            _eslintrcPath = "./defaultConfig/fioriCustomRules/.eslintrc.json";
        }
        else {
            _eslintrcPath = "./defaultConfig/basicDefaultConfig/.eslintrc.json";
        }
        eslintConfig = require(_eslintrcPath);
    }

    var eslintExtConfig = getConfigFileContent(validationMetadata, "./.eslintrc.ext");
    if (!eslintExtConfig) {
        if (_bFioriJSValidator) {
            eslintExtConfig = {"rulesExt": eslintConfig.additionalRuleMetadata || {}}
            convertConfigStructure(eslintExtConfig.rulesExt);
        }
        else {
            eslintExtConfig = require("./defaultConfig/basicDefaultConfig/.eslintrc.ext.json");
            Object.keys(eslintExtConfig.rulesExt).forEach(function (ruleId) {
                var oRule = eslintExtConfig.rulesExt[ruleId];
                oRule.helpUrl = oRule.helpUrl || "http://eslint.org/docs/rules/" + ruleId;
            })
        }
    }
    applyFilterLevelForRules(eslintConfig, eslintExtConfig, validationMetadata.getLevels());

    cliContainer
        .withEnv(eslintConfig.env)
        .withGlobals(eslintConfig.globals)
        .withRules(eslintConfig.rules)
        .withIgnoreEslintrc()
    ;
    var ignoreFile = getIgnoreFilePath(validationMetadata);
    if (ignoreFile) {
        cliContainer.withIgnoreFile(ignoreFile);
    }

    if (_bFioriJSValidator) {
        var aCustomRulesPath = [];
        var _fioriCustomRulesPath = path.resolve(__dirname, "defaultConfig", "fioriCustomRules", ".eslintrules");
        aCustomRulesPath.push(_fioriCustomRulesPath);
        cliContainer.withCustomRules(aCustomRulesPath);
    }

    var cli = new CLIEngine(cliContainer.objForCLI);
    var paths = [];
    fileResources.forEach(function (fileResource) {
        var relativeToProject = path.relative(validationMetadata.getRootPath(), fileResource.getPath());
        if (!cli.isPathIgnored(relativeToProject)) {
            paths.push(fileResource.getPath());
        }
    });
    var report = cli.executeOnFiles(paths);
    return resultHandler(validationMetadata, eslintExtConfig, report);
}
/*
 * Check if this project should run the fioriJSValidator or not
 * */
function _isFioriJSValidator(validationMetadata) {
    var _bIsFioriJSValidator = true;

    var _projectJsonPath = path.join(validationMetadata.getRootPath(), ".che", "project.json");

    // read file
    try {
        var _projectJsonContent = fs.readFileSync(_projectJsonPath, 'utf8');
    } catch (err) {
        return _bIsFioriJSValidator;
    }
    if (_projectJsonContent) {
        var _obj = JSON.parse(_projectJsonContent);
        var _commonSettings = _obj.attributes["sap.watt.common.setting"];
        if (_commonSettings && _commonSettings.length > 0) {
            var _sProjectSettings = _commonSettings[0];
            if (_sProjectSettings) {
                var _oProjectSettings = JSON.parse(_sProjectSettings);
                if (_oProjectSettings && _oProjectSettings.basevalidator && _oProjectSettings.basevalidator.services) {
                    var _sJSValidator = _oProjectSettings.basevalidator.services.js;
                    console.log("basevalidator attribute for js in the project.json file is: " + _sJSValidator);

                    if (_sJSValidator !== "fioriJsValidator") {
                        _bIsFioriJSValidator = false;
                    }
                }
            }
        }
    }
    return _bIsFioriJSValidator;
}

module.exports = {
    validateFiles: validateFiles
}
