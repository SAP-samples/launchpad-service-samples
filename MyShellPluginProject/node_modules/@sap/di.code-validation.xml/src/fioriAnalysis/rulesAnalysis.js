/**
 * Created by I028014 on 14/11/2017.
 */
var evaluateXPathToNodes = require('fontoxpath').evaluateXPathToNodes;
var domFacade = require('fontoxpath').domFacade;
var namespaceResolver = require('./fioriNamespacesResolver');

var rules = {};
function addRule(id) {
    rules[id] = require('./rules/' + id);
}

var severity = require('./rules/severity');
/* following rules are not performed on client implementation
   And therefore currently not used here:

, addRule('DG_MULTIPLE_OBJECT_IDENTIFIER');
, addRule('DG_MULTIPLE_OBJECT_NUMBER');
, addRule('DG_XML_FIRST_OBJECT_IDENTIFIER');
, addRule('DG_XML_USAGE_OBJECT_IDENTIFIER');
, addRule('XML_MISSING_STABLE_ID');
, addRule('XML_DEPRECATION');
*/

/* TODO: the following rule contains ternary opertator which is not supported by the open source used: xmldom@v0.1.27 & slimdom-sax-parser@v1.1.0
    addRule('DG_XML_LIST_BASE_SHOW_NO_DATA');
 */
addRule('XML_ICON_ACCESSIBILITY');
addRule('XML_ICON_BUTTON_ACCESSIBILITY');
addRule('XML_IMAGE_ACCESSIBILITY');
addRule('XML_TITLE_ACCESSIBILITY');
addRule('XML_PAGE_ACCESSIBILITY');
addRule('XML_TABLE_ACCESSIBILITY');
addRule('DG_XML_FOOTER_BUTTON_TEXT_ICON');
addRule('DG_XML_NO_DUPLICATE_ICONS');
addRule('DG_XML_NO_SINGLE_TAB');
addRule('XML_DIALOG_IN_VIEW');
addRule('XML_UPLOAD_IN_VIEW');
addRule('XML_COMMONS_USAGE');
addRule('XML_FORM_USAGE');
addRule('XML_LAYOUT_USAGE');
addRule('XML_METADATA_MEDIA_SRC_WITHOUT_FORMATTER');
addRule('XML_BOOKMARK_PERFORMANCE');


var UI5_VIEW_FILE_SUFFIX = ".view.xml";
var UI5_FRAGMENT_FILE_SUFFIX = ".fragment.xml";

function _shouldRunAnalysis(fileResource) {
    return (fileResource.getPath().endsWith(UI5_VIEW_FILE_SUFFIX) || fileResource.getPath().endsWith(UI5_FRAGMENT_FILE_SUFFIX));
}

module.exports = {
    analyseParsedDocument: function (document, fileResource) {
        if (!_shouldRunAnalysis(fileResource)) {
            return;
        }

        var report = {issues: []};
        var rule;
        for (var key in rules) {
            var rule = rules[key];
            var nodes;
            try {
                nodes = evaluateXPathToNodes(rule.path, document, domFacade, null, {namespaceResolver: namespaceResolver});
                var results = rule.validate({}, rule.path, nodes);
                for (var j = 0; j < results.length; j++) {
                    var result = results[j];
                    var ruleSeverity = severity.get(rule.id) || 'warning';
                    // report the violations
                    var error = {
                        id: rule.id,
                        category: rule.category,
                        checker: "Fiori XML Analysis", // TODO: use value from i18n file
                        helpUrl: rule.helpUrl,
                        line: result.lineNumber,
                        column: result.columnNumber,
                        message: (result.message || rule.errorMsg || ""),
                        path: fileResource.getPath(),
                        severity: ruleSeverity,
                        source: ''//TODO: node.outerHTML
                    };
                    report.issues.push(error);

                }
            } catch (e) {
                console.log('error when running rule ' + rule.id);
            }
        }
        return report;
    }
};