/*global define*/
if (typeof define !== 'function') {
	var define = require('amdefine')(module)
};

define([], function() {
	"use strict";
	function buildPath(){
		// find tables
		return "//ns:Table[("+
				// without a wrapping SmartTable
				"count(ancestor::stable:SmartTable)=0 or "+
				// with a wrapping SmartTable
				"ancestor::stable:SmartTable["+
					"("+
						// that has no customToolbar and an empty header
						"count(stable:customToolbar)=0 and "+
						"(not(@header) or normalize-space(@header)='')"+
					") or ("+
						// that has a customToolbar but no Title element
						"count(stable:customToolbar)=1 and "+
						"count(stable:customToolbar//ns:Title)=0"+
					") or ("+
						// that has a customToolbar and a Title element but an empty text attribute
						"count(stable:customToolbar)=1 and "+
						"count(stable:customToolbar//ns:Title)=1 and "+
						"stable:customToolbar//ns:Title[(not(@text) or normalize-space(@text)='')]"+
					")"+
				"]"+
			") and ("+
				"("+
					// find tables without headerToolbar and with empty headerText attribute
					"count(ns:headerToolbar)=0 and "+
					"(not(@headerText) or normalize-space(@headerText)='')"+
				") or ("+
					// find tables with headerToolbar and without Title element
					"count(ns:headerToolbar)=1 and "+
					"count(ns:headerToolbar//ns:Title)=0"+
				") or ("+
					// find tables with headerToolbar and Title element but an empty text attribute
					"count(ns:headerToolbar)=1 and "+
					"count(ns:headerToolbar//ns:Title)=1 and "+
					"ns:headerToolbar//ns:Title[(not(@text) or normalize-space(@text)='')]"+
				")"+
			")"+
		"]";
	}

	return {
		id: "XML_TABLE_ACCESSIBILITY",
		category: "Accessibility Error",
		path: buildPath(),
		errorMsg: "A table must define a custom header with a title element within.",
		helpUrl: "https://help.hana.ondemand.com/webide/frameset.htm?cb7e44b5f70449328c5282280e8079d1.html",			
		validate: function(report, path, nodes){
			var result = [];
//			console.log("validating (" + this.id + ")");
			for(var i = 0; i < nodes.length; i++){
				var node = nodes[i];
				if(node){
					result.push(node);
				}
			}
			return result;
		}
	};
});