var fioriRulesAnlysis = require('./fioriAnalysis/rulesAnalysis');
var FioriUi5Anlysis = require('./fioriAnalysis/ui5Analysis');
var path = require('path');
var fs = require('fs');
var _isFioriAnalysisRequired = false;
var _isIdAttributeRequired = false;
var URL_FILE = "file://";

function _shouldFioriAnalysisRun(validationMetadata) {
    var _bIsFioriXMLValidator = true;

    var _projectJsonPath = path.join(validationMetadata.getRootPath(), ".che", "project.json");

    if (!fs.existsSync(_projectJsonPath)) {
        return _bIsFioriXMLValidator;
    }
    // read file
    var _projectJsonContent = fs.readFileSync(_projectJsonPath, 'utf8');
    if (_projectJsonContent) {
        var _obj = JSON.parse(_projectJsonContent);
        var _sProjectSettings = _obj.attributes["sap.watt.common.setting"] && _obj.attributes["sap.watt.common.setting"][0];
        if (_sProjectSettings) {
            var _oProjectSettings = JSON.parse(_sProjectSettings);
            if (_oProjectSettings && _oProjectSettings.basevalidator && _oProjectSettings.basevalidator.services) {
                var _sJSValidator = _oProjectSettings.basevalidator.services.xml;
                console.log("basevalidator attribute for xml in the project.json file is: " + _sJSValidator);

                if (_sJSValidator !== "fioriXmlAnalysis") {
                    //console.log("The executed validator was basicXmlAnalysis");
                    _bIsFioriXMLValidator = false;
                }
            }
        }
    }
    return _bIsFioriXMLValidator;
}

function _shouldIdAttributeBeRequired(validationMetadata, fileResource) {
    var _manifestJsonPath;
    if (fileResource) {
        var sFileResourcePath = fileResource.getPath().toString().replace("\\c%3A","c:");
        var sProjectPath = sFileResourcePath.slice(0, sFileResourcePath.search("webapp") + "webapp".length);
        _manifestJsonPath = path.join(sProjectPath, "manifest.json");
    }
    if (validationMetadata && (_manifestJsonPath===undefined || !fs.existsSync(_manifestJsonPath))) {
        _manifestJsonPath = getManifestJsonFiles(validationMetadata.getRootPath());
    }
    if (!_manifestJsonPath || !fs.existsSync(_manifestJsonPath)) {
        return false;
    }
    // read file
    var _manifestJsonContent = fs.readFileSync(_manifestJsonPath, 'utf8');
    if (_manifestJsonContent) {
        try {
            var _manifest = JSON.parse(_manifestJsonContent);
            return !!(_manifest["sap.ui5"] && _manifest["sap.ui5"].flexEnabled);
        }
        catch (e) {
            //not a valid json structure
        }
    }
    return false;
}

function getManifestJsonFiles(dir) {
    var files = fs.readdirSync(dir);
    var manifestJsonPath;
    for (var i in files){
        var dirPath = path.join(dir, files[i]);
        if (fs.statSync(dirPath).isDirectory()){
            manifestJsonPath = getManifestJsonFiles(dirPath);
            if(manifestJsonPath) {
                return manifestJsonPath;
            }
        } else {
            if(files[i]==="manifest.json"){
                return dirPath;
            }
        }
    }
}

var fioriUi5Anlysis;
module.exports = {
    init: function (validationMetadata) {
        try {
            fioriUi5Anlysis = new FioriUi5Anlysis(validationMetadata);
            _isFioriAnalysisRequired = _shouldFioriAnalysisRun(validationMetadata);
        } catch(e) {
            console.log(e.message);
            _isFioriAnalysisRequired = false;
        }
        _isIdAttributeRequired = _shouldIdAttributeBeRequired(validationMetadata);
        return _isFioriAnalysisRequired;
    },
    setAsFiori: function (fileResource, validationMetadata) {
        try {
            fioriUi5Anlysis = new FioriUi5Anlysis(validationMetadata);
        } catch(e) {
            console.log(e.message);
        }
        _isFioriAnalysisRequired = true;
        _isIdAttributeRequired = _shouldIdAttributeBeRequired(validationMetadata, fileResource);
    },
    runAnalysisOnParsedDocument: function (document, fileResource) {
        var report = {issues: []};
        if (_isFioriAnalysisRequired) {
            //var slimdom = slimdomParser.sync(fileResource.getText());
            var rulesIssues = fioriRulesAnlysis.analyseParsedDocument(document, fileResource);
            var ui5Issues = fioriUi5Anlysis.analyse(fileResource, _isIdAttributeRequired);
            if (rulesIssues && rulesIssues.issues) {
                report.issues = report.issues.concat(rulesIssues.issues);
            }
            if (ui5Issues && ui5Issues.issues) {
                report.issues = report.issues.concat(ui5Issues.issues);
            }
        }
        return report;
    },
    generateStableIds: function (validationMetadata, fileResources) {
        var sPrefixId = "_IDEGen_";
        var mChanges = {};
        fioriUi5Anlysis = new FioriUi5Anlysis(validationMetadata);
        fileResources.forEach(function (fileResource) {
            var aTextEdits = [];
            var aUi5Issues = fioriUi5Anlysis.analyse(fileResource, true);
            if (aUi5Issues && aUi5Issues.issues) {
                var aStableIdIssues = aUi5Issues.issues.filter(function (issue) {
                    return issue.id === "XML_MISSING_STABLE_ID";
                });
                aStableIdIssues.forEach(function (issue) {
                    var sGeneratedId, nCountIds = 0;
                    do {
                        sGeneratedId = sPrefixId + issue.tagName + nCountIds;
                        nCountIds++;
                    } while (aUi5Issues.aId.includes(sGeneratedId));
                    aUi5Issues.aId.push(sGeneratedId);
                    // the generate API is zero based and with uris as it is currently targeted to LSP only
                    issue.line--;
                    var textEdit = {
                        range: {
                            start: {
                                line: issue.line, character: issue.column
                            },
                            end: {
                                line: issue.line, character: issue.column
                            }
                        },
                        newText: ' id="' + sGeneratedId + '"'
                    };
                    aTextEdits.push(textEdit);
                    var documentUri = URL_FILE + path.normalize(fileResource.getPath());
                    if (aTextEdits.length > 0) {
                        mChanges[documentUri] = aTextEdits;
                    }
                });
            }
        });
        return mChanges;
    }
};
