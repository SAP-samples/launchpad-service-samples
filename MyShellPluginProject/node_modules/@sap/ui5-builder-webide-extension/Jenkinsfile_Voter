@Library('piper-lib') _
@Library('features-pipeline-lib') __
@Library('piper-lib-os') ___ 
import com.sap.icd.jenkins.Utils

piperUtils = new Utils()

stage("Run tests") {
	node(){
		checkout scm;
		echo "Running voter on commitId ${piperUtils.getGitCommitId()}"
	}
  
  parallel(
    'Whitesource_scan': {
      node {
        timestamps {
            ansiColor('xterm') {
                checkout scm;
                    executeWhitesourceScan script: this, scanType: 'npm', whitesourceUserTokenCredentialsId: 'whitesourceKey'
                }
            }
        }
    },
    'ui5_builder_webide_extension_voter': {
        devxPodTemplate() {
            timestamps {
                ansiColor('xterm') {
                    checkout scm;
                    echo "retrieving git structure from repository"
                    def gitUrl = piperUtils.getGitRemoteUrl()
                    def githubRepoName = piperUtils.getRepositoryFromGitUrl(gitUrl)
                    try {
                        sh """
                            ./setup-env.sh;
                            npm test
                        """
                    } catch (e) {
                        error  "ui5_builder_webide_extension_voter step failed with error: " + e.toString()
                    } finally {
                    	junit testDataPublishers: [[$class: 'AttachmentPublisher'], [$class: 'StabilityTestDataPublisher']], testResults: 'test-results.xml';
						archive "test-results.xml, coverage/index.html";
						publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: "coverage", reportFiles: 'index.html', reportName: 'Code Coverage', reportTitles: '']);                    }
                }
            }
        }
    }
  )
}
