const path = require('path');
const fs = require('fs');
const _ = require('lodash');
const EvoResource = require("@ui5/fs").Resource;
const yamlParser = require('js-yaml');
const MTA_YAML_FILE_NAME = "mta.yaml";
const UI5_YAML_FILE_NAME = "ui5.yaml";

module.exports = async function({workspace, dependencies, options}) {
	var destDir = options.configuration.destDir;
	try {
		await updateManifestFile(workspace, destDir);
	} catch(e) {
		console.log('failed to update manifest.json file ' + e.message);
	}
};

function createJsonFile(sContent, sPath){
	return new EvoResource({
		path: sPath,
		string: sContent});
}

function getManifestFile(workspace){
	return workspace.byGlob("/**/manifest.json");
}

function updateManifestFile(workspace, destDir){
	return getManifestFile(workspace).then(function(aManifestFiles){
		var sManifestFile = aManifestFiles[0];
		if (sManifestFile){
			return sManifestFile.getString().then(function(manifestFileContent) {
				const oManifestJsonContent = JSON.parse(manifestFileContent);

				if (oManifestJsonContent["sap.platform.hcp"]) {
					updateManifestDeploymentBlockUri(oManifestJsonContent["sap.platform.hcp"], destDir);
				}
				
				if (oManifestJsonContent["sap.platform.abap"]) {
					updateManifestDeploymentBlockUri(oManifestJsonContent["sap.platform.abap"], destDir);
				}
				
				// get deploy_mode flag from the Gruntfile.js of the module - will be exist only in case of html repo scenario
				if (isHtmlRepoMode()) {
					updateManifestDatasourceUri(oManifestJsonContent["sap.app"]);
				}
				
				var updatedManifestFile = createJsonFile(JSON.stringify(oManifestJsonContent, null, 4), sManifestFile.getPath());
				return workspace.write(updatedManifestFile);
			});
		} else {
		throw new Error("devxUpdateManifest - no manifest.json file found in project");
		}		
	});
}

function updateManifestDeploymentBlockUri(oManfiestDeploymentBlock, sSourceFolderPathInProject) {
    if (oManfiestDeploymentBlock.uri !== null) {
        var sManifestUri = oManfiestDeploymentBlock.uri; //current uri in manifest
        if ((sSourceFolderPathInProject) && sSourceFolderPathInProject !== "") { //when source folder empty (root) - no update needed (paths within target and source are the same)
            var indexOfSourceFolder = sManifestUri.lastIndexOf(sSourceFolderPathInProject); //verify the specified src folder exist in current uri
            if (indexOfSourceFolder !== -1) {
                oManfiestDeploymentBlock.uri = sManifestUri.substring(0, indexOfSourceFolder); //uri prefix before the source folder path (keep the '/' before the src path)
            }
        }
    }
    else{
        throw new Error("devxUpdateManifest - no uri defined in manifest.json file");
    }
}

function  updateManifestDatasourceUri(oManfiestApplicationBlock) {
    if (oManfiestApplicationBlock && oManfiestApplicationBlock.dataSources) {
        for(sDataSourceName in oManfiestApplicationBlock.dataSources){
            var oDataSource = oManfiestApplicationBlock.dataSources[sDataSourceName];
            if(oDataSource.uri){
                if(oDataSource.uri[0] === "/"){
                    oDataSource.uri = oDataSource.uri.substring(1);
                }
            } else{
                console.log("devxUpdateManifest - datasource.uri attribute in the manifest.json file was not found or incorrect. Therefore, update this attribute to be reletive uri is irrelevant.");
            }
        }
    } else {
        console.log("devxUpdateManifest - datasource.uri attribute in the manifest.json file was not found or incorrect. Therefore, update this attribute to be reletive uri is irrelevant.");
    }
}

function isHtmlRepoMode(){
	const pathToMtaYaml = findMtaIfExists(process.cwd());
	if (fs.existsSync(pathToMtaYaml)) {
		const mtaYamlFile = fs.readFileSync(pathToMtaYaml);
		const oMtaYamlFileContent = yamlParser.safeLoad(mtaYamlFile);

		return _.get(oMtaYamlFileContent, ["parameters","deploy_mode"]) === "html5-repo";
		}
	return false;
}

// We are looking for the closest mta.yaml file between the ui module and the root of the project -
// within the limit of 4 levels
function findMtaIfExists(sPath) {
	let curPath = sPath;
	let maxTries = 4;
	let mtaYamlPath = path.join(curPath, MTA_YAML_FILE_NAME);
	while (maxTries > 0) {
		if (fs.existsSync(mtaYamlPath)) {
			return mtaYamlPath;
		} else {
			curPath = path.join(curPath, "..");
			mtaYamlPath = path.join(curPath, MTA_YAML_FILE_NAME);
			maxTries--;
		}
	}
	return mtaYamlPath;
}
