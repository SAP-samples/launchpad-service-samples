var fs = require('fs');
var path = require('path');
const EvoResource = require("@ui5/fs").Resource;
var coreLibs = require('@sap/di.code-validation.core');
var fileUtils = coreLibs.fileUtils;
var jsValidator = requireIfExists('@sap/di.code-validation.js');
var xmlValidator = requireIfExists('@sap/di.code-validation.xml');
var jsonValidator = requireIfExists('@sap/di.code-validation.json');
var LINTING_FILE = "di.code-validation.core_issues.json";
var lintJsonPath = "";

module.exports = async function({workspace, dependencies, options}) {
    var appFolder = options.configuration.appFolder;
	setNewPath(options, LINTING_FILE);
    var destDir = path.join(process.cwd(), options.configuration.destDir);
    if (!appFolder || !destDir) {
        console.log('missing appFolder or dist folder information. skipping lint task');
        return;
    }

    var validationMetadata = new coreLibs.validationMetadata(path.join(appFolder,'..'));
	createDestFolderIfNeeded(destDir);
	var allResults = await lint(workspace, appFolder, destDir);
		writeLintResults(workspace, allResults);
}

function createJsonFile(sContent, sPath){
	return new EvoResource({
		path: sPath,
		string: sContent});
}

function setNewPath(options, fileName) {
	if (options && options.projectName) {
		if (options.configuration && options.configuration.nameSpace) {
			lintJsonPath = `/resources/${options.configuration.nameSpace}/${options.projectName}/` + fileName;
		} else {
			lintJsonPath = `/resources/${options.projectName}/` + fileName;
		}
	}
}

function createDestFolderIfNeeded(destDir) {
	if (!fs.existsSync(destDir)) {
		fs.mkdirSync(destDir);
	}
}

function writeLintResults(workspace, allResults) {
	try {
		var fullRestuls = {version: "1.0.0", "results": allResults};
		var lintFile = createJsonFile(JSON.stringify(fullRestuls), lintJsonPath);
		workspace.write(lintFile);
		return true;
	} catch(e) {
		console.log('failed linting ' + e.message);
		return false;
	}
}

async function lint(workspace, appFolder, destDir) {
	var validationResults = {};
	lint_js(appFolder, validationResults);
	lint_xml(appFolder, validationResults);
	await lint_json(workspace, destDir, appFolder, validationResults);
	return validationResults;
}

function module_exists(moduleName) {
    try {
        return require.resolve(moduleName);
    } catch(e) {
        return false;
    }
}

function requireIfExists(validatorPackageName) {
    if (module_exists(validatorPackageName)) {
        return require(validatorPackageName);
    }
}

function handleResults(appFolder, results){
    var result = results || {};
    var issues = result.issues || [];
    var allIssues = {};
    var projectPath = path.join(appFolder,'..');
    issues.forEach(function (issue) {
        var filePath = issue.path;

        var resultPath = path.relative(projectPath, filePath);
        issue.path = resultPath;
        allIssues[resultPath] = allIssues[resultPath] || [];
        allIssues[resultPath] = allIssues[resultPath].concat(issue);
    });
    return {"issues": allIssues};

}

function lint_xml(appFolder, allResults) {
    if (xmlValidator) {
        try {
            var results = xmlValidator.validateFiles();
            var fixed = handleResults(appFolder, results);
            allResults['@sap/di.code-validation.xml'] = fixed;
            return true;
        } catch(e) {
            console.log('failed xml validation ' + e.message);
            return false;
        }
    } else {
        console.log('@sap/di.code-validation.xml not installed');
        return true;
    }
}

function lint_js(appFolder, allResults) {
    if (jsValidator) {
        try {
            var validationMetadata = new coreLibs.validationMetadata(path.join(appFolder,'..'));
            var results = jsValidator.validateFiles(validationMetadata);
            var fixed = handleResults(appFolder, results);
            allResults['@sap/di.code-validation.js'] = fixed;
            return true;
        } catch(e) {
            console.log('failed js validation ' + e.message);
            return false;
        }
    } else {
        console.log('@sap/di.code-validation.js not installed');
        return true;
    }
}

async function lint_json(workspace, destDir, appFolder, allResults) {
	return new Promise(function(resolve, reject) {
		if (jsonValidator) {
			var validationMetadata = new coreLibs.validationMetadata(path.join(appFolder,'..'));
			fileUtils.listFilteredFiles(validationMetadata.getRootPath(), 
				{ extensions: [".json"], ignoredPaths: [path.join(appFolder, '..', 'node_modules'), destDir]}, 
				function(fileResources) {
					var jsonFileResources = [];
					fileResources.forEach(function (filePath) {
						var jsonFileResource = new coreLibs.fileResource(validationMetadata.getRootPath(), filePath);
						jsonFileResources.push(jsonFileResource);
					});
					return jsonValidator.validateFiles(validationMetadata, jsonFileResources).then(function (results) {
						var fixed = handleResults(appFolder, results);
						allResults['@sap/di.code-validation.json'] = fixed;
						resolve();
					}).fail(function(e) {
						console.log('failed json validation ' + e.message);
						reject();
				});
			});
		} else {
			console.log('@sap/di.code-validation.json not installed');
			reject();
		}
	});
}
