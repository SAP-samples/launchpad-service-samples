var path = require('path');
var fs = require('fs');
var EvoResource = require("@ui5/fs").Resource;
var oResources = {};
var RESOURCES_FILE = "resources.json";
var relativePath = "";
var resourceJsonPath = "";

module.exports = async function({workspace, dependencies, options}) {
	setNewPath(options, RESOURCES_FILE);
	oResources.resources = await createResources(workspace);
	var resourceFileToWrite = createJsonFile(JSON.stringify(oResources, null, 4), resourceJsonPath);
	return workspace.write(resourceFileToWrite);
};

function createJsonFile(sContent, sPath){
	return new EvoResource({
		path: sPath,
		string: sContent});
}

function setNewPath(options, fileName) {
	if (options && options.projectName) {
		if (options.configuration && options.configuration.nameSpace) {
			relativePath = `/resources/${options.configuration.nameSpace}/${options.projectName}/`;
		} else {
			relativePath = `/resources/${options.projectName}/`;
		}
		resourceJsonPath = relativePath + fileName;
	}
}

// Adds files to resources array in order to create / update the resource.json file
function createResources (workspace) {
    var resources = [];
    return workspace.byGlob("/**/*.*").then(files => {
		return Promise.all(files.map(file => {
			var resource = {};
			var filePath = file.getPath();
			var fileName = path.parse(filePath).base;
			var sSuffix = path.extname(filePath);
			resource.name = path.relative(relativePath, filePath);

			if (fileName === "Component-preload.js" || fileName === RESOURCES_FILE) {
				resource.merged = true;
			}

			if (sSuffix === ".properties" && fileName.indexOf("i18n") > -1) {
				resource.raw = path.join("i18n", "i18n.properties");
			}

			else if (sSuffix === ".properties" && fileName.indexOf("messageBundle") > -1) {
				resource.raw = "messageBundle.properties";
			}

			if (resource.raw) {
				var start = fileName.indexOf("_");
				var end = fileName.indexOf(".properties");
				if (start > -1 && end > -1) {
					resource.locale = fileName.substring(start, end);
				}
			}

			if (filePath.indexOf("-dbg") > 0) {
				resource.isDebug = true
			}

			if(filePath.indexOf("test") < 0 && filePath.indexOf("Test") < 0){
				resources.push(resource);
			}
		})).then(function() {
			return resources;
		});
	});
}
