var path = require('path');
var fs = require('fs');
const EvoResource = require("@ui5/fs").Resource;
var NEOAPP_FILE_NAME = "neo-app.json";
var neoAppJsonPath = "";

module.exports = async function({workspace, dependencies, options}) {
	var appFolder = options.configuration.appFolder;
	setNewPath(options, NEOAPP_FILE_NAME);
    var oNeoAppJsonContent = getNeoAppFileContent(NEOAPP_FILE_NAME);
	if (oNeoAppJsonContent) {
		await updateNeoAppFile(workspace, appFolder, oNeoAppJsonContent);
	}
}

function getNeoAppFileContent(sPath) {
    let oNeoAppJsonContent = null;
        try {
            let neoAppFile = fs.readFileSync(sPath);
            if(neoAppFile) {
                oNeoAppJsonContent = JSON.parse(neoAppFile);
            }
        }
        catch (error) {
            if (error.message.includes("Unexpected token e in JSON")) {
                throw new Error("devxUpdateNeoApp - Could not read neo-app.json, bad format?");
			} else if (error.message.includes("no such file or directory")){
                throw new Error("devxUpdateNeoApp - No neo-app.json file found");
            }
        }
        return oNeoAppJsonContent;
}

function createJsonFile(sContent, sPath){
	return new EvoResource({
		path: sPath,
		string: sContent});
}

function setNewPath(options, fileName) {
	if (options && options.projectName) {
		if (options.configuration && options.configuration.nameSpace) {
			neoAppJsonPath = `/resources/${options.configuration.nameSpace}/${options.projectName}/` + fileName;
		} else {
			neoAppJsonPath = `/resources/${options.projectName}/` + fileName;
		}
	}
}

function updateNeoAppFile(workspace, appFolder, oNeoAppJsonContent){
	var sSourceFolderRelativePath = "/" + appFolder;
	var routes = oNeoAppJsonContent.routes;
	for (var index in routes) {
		//remove source folder from path
		if (routes[index].path.indexOf(sSourceFolderRelativePath) === 0) {
			routes[index].path = routes[index].path.substring(sSourceFolderRelativePath.length);
		}
	}

	//Remove source folder in welcome file
	var welcomeFile = oNeoAppJsonContent.welcomeFile;
	if (welcomeFile) {
		if (welcomeFile.indexOf(sSourceFolderRelativePath) === 0) {
			oNeoAppJsonContent.welcomeFile = welcomeFile.substring(sSourceFolderRelativePath.length);
		}
	}

	var newNeoappFile = createJsonFile(JSON.stringify(oNeoAppJsonContent, null, 2), neoAppJsonPath);
	try {
		return workspace.write(newNeoappFile);
	}
	catch(error){
		throw new Error("devxUpdateNeoApp - failed to write updated neo-app.json file");
	}
}
