// For Library Version: 1.71.3

declare namespace sap {
  namespace suite {
    namespace ui {
      /**
       * SAP UI library: sap.suite.ui.commons
       */
      namespace commons {
        namespace imageeditor {
          interface CustomSizeItemOpts extends sap.ui.core.ElementOpts {
            /**
             * Defines the width of the `CustomSizeItem`.
             * This property is mandatory and must be greater than 0.
             */
            width?: number;

            /**
             * * Defines the height of the `CustomSizeItem`.
             * This property is mandatory and must be greater than 0.
             */
            height?: number;

            /**
             * Defines the label of the `CustomSizeItem`.
             */
            label?: string;

            /**
             * Defines the icon to be displayed in the `CustomSizeItem`.
             * If no icon is specified, the default image is used, which is derived from the set width and height.
             */
            icon?: sap.ui.core.URI;

            /**
             * Specifies whether the `width` and `height` properties use relative values (`true`) or absolute values
             * (`false`).
             * When used in the `customResizeItems` aggregation of an {@link sap.suite.ui.commons.imageeditor.ImageEditorContainer},
             * width and height are multiplied by the `width` and `height` properties of the `CustomSizeItem`.
             * When used in the `customRectangleCropItems` or `customEllipseCropItems` aggregations of an {@link sap.suite.ui.commons.imageeditor.ImageEditorContainer},
             * aspect ratio is set to the `width` and `height` properties of the `CustomSizeItem`.
             */
            relative?: boolean;
          }

          interface ImageEditorOpts extends sap.ui.core.ControlOpts {
            /**
             * Image source.
             * Can be a file or Blob object, a URL address of the image, a Base64 data URL string, or any other source
             * supported by the <img> HTML tag.
             */
            src?: any;

            /**
             * Image source for the custom shape used in custom shape cropping.
             * Can be a file or Blob object, a URL address of the image, a Base64 data URL string, or any other source
             * supported by the <img> HTML tag.
             * **Note:** In Internet Explorer, `customShape` doesn't support SVG files and will throw and exception
             * if SVG files are used.
             */
            customShapeSrc?: any;

            /**
             * Image editor mode.
             * Four modes are available: resize mode, crop to rectangle mode, crop to circle mode, and display image
             * mode (default).
             * The default mode displays the image to be edited.
             */
            mode?: sap.suite.ui.commons.ImageEditorMode;

            /**
             * Defines whether aspect ratio should be kept when the crop area is expanded or shrunk in the `CropRectangle`
             * or `CropEllipse` modes ({@link sap.suite.ui.commons.ImageEditorMode}).
             */
            keepCropAspectRatio?: boolean;

            /**
             * Defines whether aspect ratio should be kept when the image is resized in the `Resize` mode ({@link sap.suite.ui.commons.ImageEditorMode})
             * or using the {@link #setWidth} or {@link #setHeight} methods.
             */
            keepResizeAspectRatio?: boolean;

            /**
             * Defines the behavior of the crop area when zooming in or out.
             * If set to `true`, the crop area is scaled up or down when the zoom level is changed.
             * If set to `false`, the crop area remains unchanged and keeps its size.
             */
            scaleCropArea?: boolean;

            /**
             * This event is fired after the image specified in the `src` property is successfully loaded.
             */
            loaded?: Function;

            /**
             * This event is fired if there is an error loading the image specified in the `src` property, for example,
             * when the URL is unreachable.
             */
            error?: Function;

            /**
             * This event is fired after the image specified in the `customShapeSrc` property is successfully loaded.
             */
            customShapeLoaded?: Function;

            /**
             * This event is fired if there is an error loading the image specified in the `customShapeSrc` property,
             * for example, when the URL is unreachable.
             */
            customShapeError?: Function;

            /**
             * This event is fired when the size of the image is changed by the user while in the `Resize` mode ({@link
             * sap.suite.ui.commons.ImageEditorMode}).
             */
            sizeChanged?: Function;

            /**
             * This event is fired when the size of the crop area is changed by the user while in the `CropRectangle`
             * or `CropEllipse` mode ({@link sap.suite.ui.commons.ImageEditorMode}).
             */
            cropAreaChanged?: Function;

            /**
             * This event is fired when the zoom level is changed by the user interaction.
             */
            zoomChanged?: Function;

            /**
             * This event is fired each time there is a change in the history of recent actions or in the recent actions
             * history index.
             * This may happen either when an action is performed on the image or when the {@link #undo}, {@link #redo},
             * or {@link #jumpToHistory} methods are called.
             */
            historyChanged?: Function;
          }

          interface ImageEditorContainerOpts extends sap.ui.core.ControlOpts {
            /**
             * Image editor container mode.
             * Three modes are available: transform mode, crop mode, and filter mode (default).
             * The default mode provides filters for image editing: brightness, contrast, saturation, sepia grayscale,
             * and others.
             */
            mode?: sap.suite.ui.commons.ImageEditorContainerMode;

            /**
             * Controls order and availability of the buttons in the header panel of ImageEditorContainer.
             */
            enabledButtons?: sap.suite.ui.commons.ImageEditorContainerButton[];

            /**
             * {@link sap.suite.ui.commons.imageeditor.ImageEditor} containing the image for editing.
             * If no {@link sap.suite.ui.commons.imageeditor.ImageEditor} is specified, the `ImageEditorContainer` has
             * no effect.
             */
            imageEditor?: sap.suite.ui.commons.imageeditor.ImageEditor;

            /**
             * Custom controls that are added into the toolbar of `ImageEditorContainer`. Only use controls that are
             * supported by {@link sap.m.OverflowToolbar}.
             */
            customToolbarControls?: sap.ui.core.Control[] | sap.ui.core.Control;

            /**
             * Custom items for Resize option panel.
             */
            customResizeItems?:
              | sap.suite.ui.commons.imageeditor.CustomSizeItem[]
              | sap.suite.ui.commons.imageeditor.CustomSizeItem;

            /**
             * Custom items for Rectangle Crop option panel.
             */
            customRectangleCropItems?:
              | sap.suite.ui.commons.imageeditor.CustomSizeItem[]
              | sap.suite.ui.commons.imageeditor.CustomSizeItem;

            /**
             * Custom items for Ellipse Crop option panel.
             */
            customEllipseCropItems?:
              | sap.suite.ui.commons.imageeditor.CustomSizeItem[]
              | sap.suite.ui.commons.imageeditor.CustomSizeItem;
          }

          interface ImageEditorResponsiveContainerOpts
            extends sap.suite.ui.commons.imageeditor.ImageEditorContainerOpts {}
          /**
           * @SINCE 1.67.0
           *
           * Holds information about an {@link sap.suite.ui.commons.imageeditor.ImageEditor} action history item that
           * was created by the {@link sap.suite.ui.commons.imageeditor.ImageEditor#rectangleCrop} method.
           */
          class CropCustomShapeHistoryItem extends sap.suite.ui.commons
            .imageeditor.HistoryItem {
            /**
             * Constructor for a new CropCustomShapeHistoryItem.
             */
            constructor(
              /**
               * Property bag
               */
              mProperties: {
                /**
                 * X value
                 */
                x: number;
                /**
                 * Y value
                 */
                y: number;
                /**
                 * Width of the rectangle
                 */
                width: number;
                /**
                 * Height of the rectangle
                 */
                height: number;
                /**
                 * Previous width of the rectangle
                 */
                oldWidth: number;
                /**
                 * Previous height of the rectangle
                 */
                oldHeight: number;
              }
            );

            /**
             * Creates a new subclass of class sap.suite.ui.commons.imageeditor.CropCustomShapeHistoryItem with name
             * `sClassName` and enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.imageeditor.HistoryItem.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Returns a metadata object for class sap.suite.ui.commons.imageeditor.CropCustomShapeHistoryItem.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
          }
          /**
           * @SINCE 1.66.0
           *
           * Holds information about an {@link sap.suite.ui.commons.imageeditor.ImageEditor} action history item that
           * was created by the {@link sap.suite.ui.commons.imageeditor.ImageEditor#ellipseCrop} method.
           */
          class CropEllipseHistoryItem extends sap.suite.ui.commons.imageeditor
            .HistoryItem {
            /**
             * Constructor for a new CropEllipseHistoryItem.
             */
            constructor(
              /**
               * Property bag
               */
              mProperties: {
                /**
                 * X value
                 */
                x: number;
                /**
                 * Y value
                 */
                y: number;
                /**
                 * X radius value
                 */
                rx: number;
                /**
                 * Y radius value
                 */
                ry: number;
                /**
                 * Width of the ellipse
                 */
                width: number;
                /**
                 * Height of the ellipse
                 */
                height: number;
                /**
                 * Previous width of the ellipse
                 */
                oldWidth: number;
                /**
                 * Previous height of the ellipse
                 */
                oldHeight: number;
              }
            );

            /**
             * Creates a new subclass of class sap.suite.ui.commons.imageeditor.CropEllipseHistoryItem with name `sClassName`
             * and enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.imageeditor.HistoryItem.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Returns a metadata object for class sap.suite.ui.commons.imageeditor.CropEllipseHistoryItem.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
          }
          /**
           * @SINCE 1.66.0
           *
           * Holds information about an {@link sap.suite.ui.commons.imageeditor.ImageEditor} action history item that
           * was created by the {@link sap.suite.ui.commons.imageeditor.ImageEditor#rectangleCrop} method.
           */
          class CropRectangleHistoryItem extends sap.suite.ui.commons
            .imageeditor.HistoryItem {
            /**
             * Constructor for a new CropRectangleHistoryItem.
             */
            constructor(
              /**
               * Property bag
               */
              mProperties: {
                /**
                 * X value
                 */
                x: number;
                /**
                 * Y value
                 */
                y: number;
                /**
                 * Width of the rectangle
                 */
                width: number;
                /**
                 * Height of the rectangle
                 */
                height: number;
                /**
                 * Previous width of the rectangle
                 */
                oldWidth: number;
                /**
                 * Previous height of the rectangle
                 */
                oldHeight: number;
              }
            );

            /**
             * Creates a new subclass of class sap.suite.ui.commons.imageeditor.CropRectangleHistoryItem with name `sClassName`
             * and enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.imageeditor.HistoryItem.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Returns a metadata object for class sap.suite.ui.commons.imageeditor.CropRectangleHistoryItem.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
          }
          /**
           * @SINCE 1.66.0
           *
           * A `CustomSizeItem` can be used in the {@link sap.suite.ui.commons.imageeditor.ImageEditorContainer} aggregations
           * to define custom items on the Resize, Crop Rectangle, and Crop Ellipse panels.
           */
          class CustomSizeItem extends sap.ui.core.Element {
            /**
             * Constructor for a new CustomSizeItem.
             *
             * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
             * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
             * of the syntax of the settings object.
             */
            constructor(
              /**
               * ID for the new control, generated automatically if no ID is given
               */
              sId?: string,
              /**
               * Initial settings for the new control
               */
              mSettings?: CustomSizeItemOpts
            );

            /**
             * Creates a new subclass of class sap.suite.ui.commons.imageeditor.CustomSizeItem with name `sClassName`
             * and enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Gets current value of property {@link #getHeight height}.
             *
             * * Defines the height of the `CustomSizeItem`.
             * This property is mandatory and must be greater than 0.
             *
             * Default value is `0`.
             */
            getHeight(): number;
            /**
             * Gets current value of property {@link #getIcon icon}.
             *
             * Defines the icon to be displayed in the `CustomSizeItem`.
             * If no icon is specified, the default image is used, which is derived from the set width and height.
             *
             * Default value is `empty string`.
             */
            getIcon(): sap.ui.core.URI;
            /**
             * Gets current value of property {@link #getLabel label}.
             *
             * Defines the label of the `CustomSizeItem`.
             *
             * Default value is `empty string`.
             */
            getLabel(): string;
            /**
             * Returns a metadata object for class sap.suite.ui.commons.imageeditor.CustomSizeItem.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Gets current value of property {@link #getRelative relative}.
             *
             * Specifies whether the `width` and `height` properties use relative values (`true`) or absolute values
             * (`false`).
             * When used in the `customResizeItems` aggregation of an {@link sap.suite.ui.commons.imageeditor.ImageEditorContainer},
             * width and height are multiplied by the `width` and `height` properties of the `CustomSizeItem`.
             * When used in the `customRectangleCropItems` or `customEllipseCropItems` aggregations of an {@link sap.suite.ui.commons.imageeditor.ImageEditorContainer},
             * aspect ratio is set to the `width` and `height` properties of the `CustomSizeItem`.
             *
             * Default value is `false`.
             */
            getRelative(): boolean;
            /**
             * Gets current value of property {@link #getWidth width}.
             *
             * Defines the width of the `CustomSizeItem`.
             * This property is mandatory and must be greater than 0.
             *
             * Default value is `0`.
             */
            getWidth(): number;
            /**
             * Sets a new value for property {@link #getHeight height}.
             *
             * * Defines the height of the `CustomSizeItem`.
             * This property is mandatory and must be greater than 0.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `0`.
             */
            setHeight(
              /**
               * New value for property `height`
               */
              fHeight: number
            ): sap.suite.ui.commons.imageeditor.CustomSizeItem;
            /**
             * Sets a new value for property {@link #getIcon icon}.
             *
             * Defines the icon to be displayed in the `CustomSizeItem`.
             * If no icon is specified, the default image is used, which is derived from the set width and height.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `empty string`.
             */
            setIcon(
              /**
               * New value for property `icon`
               */
              sIcon: sap.ui.core.URI
            ): sap.suite.ui.commons.imageeditor.CustomSizeItem;
            /**
             * Sets a new value for property {@link #getLabel label}.
             *
             * Defines the label of the `CustomSizeItem`.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `empty string`.
             */
            setLabel(
              /**
               * New value for property `label`
               */
              sLabel: string
            ): sap.suite.ui.commons.imageeditor.CustomSizeItem;
            /**
             * Sets a new value for property {@link #getRelative relative}.
             *
             * Specifies whether the `width` and `height` properties use relative values (`true`) or absolute values
             * (`false`).
             * When used in the `customResizeItems` aggregation of an {@link sap.suite.ui.commons.imageeditor.ImageEditorContainer},
             * width and height are multiplied by the `width` and `height` properties of the `CustomSizeItem`.
             * When used in the `customRectangleCropItems` or `customEllipseCropItems` aggregations of an {@link sap.suite.ui.commons.imageeditor.ImageEditorContainer},
             * aspect ratio is set to the `width` and `height` properties of the `CustomSizeItem`.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `false`.
             */
            setRelative(
              /**
               * New value for property `relative`
               */
              bRelative: boolean
            ): sap.suite.ui.commons.imageeditor.CustomSizeItem;
            /**
             * Sets a new value for property {@link #getWidth width}.
             *
             * Defines the width of the `CustomSizeItem`.
             * This property is mandatory and must be greater than 0.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `0`.
             */
            setWidth(
              /**
               * New value for property `width`
               */
              fWidth: number
            ): sap.suite.ui.commons.imageeditor.CustomSizeItem;
          }
          /**
           * @SINCE 1.66.0
           *
           * Holds information about an {@link sap.suite.ui.commons.imageeditor.ImageEditor} action history item that
           * was created by one of the methods that apply filters to the image, such as {@link sap.suite.ui.commons.imageeditor.ImageEditor#sepia},
           * {@link sap.suite.ui.commons.imageeditor.ImageEditor#grayscale}, {@link sap.suite.ui.commons.imageeditor.ImageEditor#saturate},
           * {@link sap.suite.ui.commons.imageeditor.ImageEditor#invert}, {@link sap.suite.ui.commons.imageeditor.ImageEditor#brightness},
           * and {@link sap.suite.ui.commons.imageeditor.ImageEditor#contrast}.
           */
          class FilterHistoryItem extends sap.suite.ui.commons.imageeditor
            .HistoryItem {
            /**
             * Constructor for a new FilterHistoryItem.
             */
            constructor(
              /**
               * Property bag
               */
              mProperties: {
                /**
                 * Filter type
                 */
                type: string;
                /**
                 * Filter value
                 */
                value: number;
                /**
                 * Filter unit
                 */
                unit: string;
              }
            );

            /**
             * Creates a new subclass of class sap.suite.ui.commons.imageeditor.FilterHistoryItem with name `sClassName`
             * and enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.imageeditor.HistoryItem.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Returns a metadata object for class sap.suite.ui.commons.imageeditor.FilterHistoryItem.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Gets the type of the filter applied.
             */
            getType(): string;
            /**
             * Gets the units of the filter value.
             */
            getUnit(): string;
            /**
             * Gets the filter value (its intensity).
             */
            getValue(): number;
          }
          /**
           * @SINCE 1.66.0
           *
           * Holds information about an {@link sap.suite.ui.commons.imageeditor.ImageEditor} action history item that
           * was created by one of the flip methods, such as {@link sap.suite.ui.commons.imageeditor.ImageEditor#flipVertical},
           * {@link sap.suite.ui.commons.imageeditor.ImageEditor#flipHorizontal}, and {@link sap.suite.ui.commons.imageeditor.ImageEditor#flip}.
           */
          class FlipHistoryItem extends sap.suite.ui.commons.imageeditor
            .HistoryItem {
            /**
             * Constructor for a new FlipHistoryItem.
             */
            constructor(
              /**
               * Property bag
               */
              mProperties: {
                /**
                 * Whether vertical flip has been performed
                 */
                vertical: boolean;
                /**
                 * Whether horizontal flip has been performed
                 */
                horizontal: boolean;
              }
            );

            /**
             * Creates a new subclass of class sap.suite.ui.commons.imageeditor.FlipHistoryItem with name `sClassName`
             * and enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.imageeditor.HistoryItem.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Returns a metadata object for class sap.suite.ui.commons.imageeditor.FlipHistoryItem.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
          }
          /**
           * @SINCE 1.66.0
           *
           * Abstract base class for all {@link sap.suite.ui.commons.imageeditor.ImageEditor} action history items.
           */
          class HistoryItem extends sap.ui.base.Object {
            /**/
            constructor();

            /**
             * Creates a new subclass of class sap.suite.ui.commons.imageeditor.HistoryItem with name `sClassName` and
             * enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Returns a metadata object for class sap.suite.ui.commons.imageeditor.HistoryItem.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
          }
          /**
           * @SINCE 1.66.0
           *
           * Image editor displays an image and provides API and visual controls to edit it.
           */
          class ImageEditor extends sap.ui.core.Control {
            /**
             * Constructor for a new ImageEditor.
             *
             * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
             * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
             * of the syntax of the settings object.
             */
            constructor(
              /**
               * ID for the new control, generated automatically if no ID is given
               */
              sId?: string,
              /**
               * Initial settings for the new control
               */
              mSettings?: ImageEditorOpts
            );

            /**
             * Saves current preview to action history, if there is any.
             */
            applyPreview(): void;
            /**
             * Crops the image based on the currently shown crop area.
             * This method works only when the {@link sap.suite.ui.commons.ImageEditorMode} is set to `CropRectangle`
             * or `CropEllipse`.
             */
            applyVisibleCrop(
              /**
               * Indicates whether to show this action in preview only (`true`) or record it in action history as well
               * (`false`)
               */
              bPreview: boolean
            ): void;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:cropAreaChanged cropAreaChanged} event of this
             * `sap.suite.ui.commons.imageeditor.ImageEditor`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.imageeditor.ImageEditor` itself.
             *
             * This event is fired when the size of the crop area is changed by the user while in the `CropRectangle`
             * or `CropEllipse` mode ({@link sap.suite.ui.commons.ImageEditorMode}).
             */
            attachCropAreaChanged(
              /**
               * An application-specific payload object that will be passed to the event handler along with the event
               * object when firing the event
               */
              oData: object,
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.imageeditor.ImageEditor`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:customShapeError customShapeError} event of
             * this `sap.suite.ui.commons.imageeditor.ImageEditor`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.imageeditor.ImageEditor` itself.
             *
             * This event is fired if there is an error loading the image specified in the `customShapeSrc` property,
             * for example, when the URL is unreachable.
             */
            attachCustomShapeError(
              /**
               * An application-specific payload object that will be passed to the event handler along with the event
               * object when firing the event
               */
              oData: object,
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.imageeditor.ImageEditor`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:customShapeLoaded customShapeLoaded} event of
             * this `sap.suite.ui.commons.imageeditor.ImageEditor`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.imageeditor.ImageEditor` itself.
             *
             * This event is fired after the image specified in the `customShapeSrc` property is successfully loaded.
             */
            attachCustomShapeLoaded(
              /**
               * An application-specific payload object that will be passed to the event handler along with the event
               * object when firing the event
               */
              oData: object,
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.imageeditor.ImageEditor`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:error error} event of this `sap.suite.ui.commons.imageeditor.ImageEditor`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.imageeditor.ImageEditor` itself.
             *
             * This event is fired if there is an error loading the image specified in the `src` property, for example,
             * when the URL is unreachable.
             */
            attachError(
              /**
               * An application-specific payload object that will be passed to the event handler along with the event
               * object when firing the event
               */
              oData: object,
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.imageeditor.ImageEditor`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:historyChanged historyChanged} event of this
             * `sap.suite.ui.commons.imageeditor.ImageEditor`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.imageeditor.ImageEditor` itself.
             *
             * This event is fired each time there is a change in the history of recent actions or in the recent actions
             * history index.
             * This may happen either when an action is performed on the image or when the {@link #undo}, {@link #redo},
             * or {@link #jumpToHistory} methods are called.
             */
            attachHistoryChanged(
              /**
               * An application-specific payload object that will be passed to the event handler along with the event
               * object when firing the event
               */
              oData: object,
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.imageeditor.ImageEditor`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:loaded loaded} event of this `sap.suite.ui.commons.imageeditor.ImageEditor`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.imageeditor.ImageEditor` itself.
             *
             * This event is fired after the image specified in the `src` property is successfully loaded.
             */
            attachLoaded(
              /**
               * An application-specific payload object that will be passed to the event handler along with the event
               * object when firing the event
               */
              oData: object,
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.imageeditor.ImageEditor`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:sizeChanged sizeChanged} event of this `sap.suite.ui.commons.imageeditor.ImageEditor`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.imageeditor.ImageEditor` itself.
             *
             * This event is fired when the size of the image is changed by the user while in the `Resize` mode ({@link
             * sap.suite.ui.commons.ImageEditorMode}).
             */
            attachSizeChanged(
              /**
               * An application-specific payload object that will be passed to the event handler along with the event
               * object when firing the event
               */
              oData: object,
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.imageeditor.ImageEditor`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:zoomChanged zoomChanged} event of this `sap.suite.ui.commons.imageeditor.ImageEditor`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.imageeditor.ImageEditor` itself.
             *
             * This event is fired when the zoom level is changed by the user interaction.
             */
            attachZoomChanged(
              /**
               * An application-specific payload object that will be passed to the event handler along with the event
               * object when firing the event
               */
              oData: object,
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.imageeditor.ImageEditor`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Applies the brightness filter to the image.
             */
            brightness(
              /**
               * Filter strength. Applicable range of values is from 0 to 500
               */
              iValue: number,
              /**
               * Indicates whether to show this action in preview only (`true`) or record it in action history as well
               * (`false`)
               */
              bPreview: boolean
            ): void;
            /**
             * Cancels the current preview and restores the image to its last recorded state.
             */
            cancelPreview(): void;
            /**
             * Applies the contrast filter to the image.
             */
            contrast(
              /**
               * Amount of the filter strength. Applicable range of values is from 0 to 500
               */
              iValue: number,
              /**
               * Indicates whether to show this action in preview only (`true`) or record it in action history as well
               * (`false`)
               */
              bPreview: boolean
            ): void;
            /**
             * Crops the image to a new shape based on the loaded custom shape and the specified pixel parameters.
             */
            customShapeCrop(
              /**
               * X coordinate of the top left corner of the crop area
               */
              iX: number,
              /**
               * Y coordinate of the top left corner of the crop area
               */
              iY: number,
              /**
               * Width of the crop area
               */
              iWidth: number,
              /**
               * Height of the crop area
               */
              iHeight: number,
              /**
               * Indicates whether to show this action in preview only (`true`) or record it in action history as well
               * (`false`)
               */
              bPreview: boolean
            ): void;
            /**
             * Detaches event handler `fnFunction` from the {@link #event:cropAreaChanged cropAreaChanged} event of
             * this `sap.suite.ui.commons.imageeditor.ImageEditor`.
             *
             * The passed function and listener object must match the ones used for event registration.
             */
            detachCropAreaChanged(
              /**
               * The function to be called, when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object on which the given function had to be called
               */
              oListener?: object
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Detaches event handler `fnFunction` from the {@link #event:customShapeError customShapeError} event of
             * this `sap.suite.ui.commons.imageeditor.ImageEditor`.
             *
             * The passed function and listener object must match the ones used for event registration.
             */
            detachCustomShapeError(
              /**
               * The function to be called, when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object on which the given function had to be called
               */
              oListener?: object
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Detaches event handler `fnFunction` from the {@link #event:customShapeLoaded customShapeLoaded} event
             * of this `sap.suite.ui.commons.imageeditor.ImageEditor`.
             *
             * The passed function and listener object must match the ones used for event registration.
             */
            detachCustomShapeLoaded(
              /**
               * The function to be called, when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object on which the given function had to be called
               */
              oListener?: object
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Detaches event handler `fnFunction` from the {@link #event:error error} event of this `sap.suite.ui.commons.imageeditor.ImageEditor`.
             *
             * The passed function and listener object must match the ones used for event registration.
             */
            detachError(
              /**
               * The function to be called, when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object on which the given function had to be called
               */
              oListener?: object
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Detaches event handler `fnFunction` from the {@link #event:historyChanged historyChanged} event of this
             * `sap.suite.ui.commons.imageeditor.ImageEditor`.
             *
             * The passed function and listener object must match the ones used for event registration.
             */
            detachHistoryChanged(
              /**
               * The function to be called, when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object on which the given function had to be called
               */
              oListener?: object
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Detaches event handler `fnFunction` from the {@link #event:loaded loaded} event of this `sap.suite.ui.commons.imageeditor.ImageEditor`.
             *
             * The passed function and listener object must match the ones used for event registration.
             */
            detachLoaded(
              /**
               * The function to be called, when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object on which the given function had to be called
               */
              oListener?: object
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Detaches event handler `fnFunction` from the {@link #event:sizeChanged sizeChanged} event of this `sap.suite.ui.commons.imageeditor.ImageEditor`.
             *
             * The passed function and listener object must match the ones used for event registration.
             */
            detachSizeChanged(
              /**
               * The function to be called, when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object on which the given function had to be called
               */
              oListener?: object
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Detaches event handler `fnFunction` from the {@link #event:zoomChanged zoomChanged} event of this `sap.suite.ui.commons.imageeditor.ImageEditor`.
             *
             * The passed function and listener object must match the ones used for event registration.
             */
            detachZoomChanged(
              /**
               * The function to be called, when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object on which the given function had to be called
               */
              oListener?: object
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Crops the image to a new circular or oval shape based on the specified pixel parameters.
             */
            ellipseCrop(
              /**
               * X coordinate of the center of the crop area
               */
              iX: number,
              /**
               * Y coordinate of the center of the crop area
               */
              iY: number,
              /**
               * X radius of the crop area
               */
              iXRadius: number,
              /**
               * Y radius of the crop area
               */
              iYRadius: number,
              /**
               * Indicates whether to show this action in preview only (`true`) or record it in action history as well
               * (`false`)
               */
              bPreview: boolean
            ): void;
            /**
             * Creates a new subclass of class sap.suite.ui.commons.imageeditor.ImageEditor with name `sClassName` and
             * enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Fires event {@link #event:cropAreaChanged cropAreaChanged} to attached listeners.
             */
            fireCropAreaChanged(
              /**
               * Parameters to pass along with the event
               */
              mParameters?: {
                cropArea?: object;

                originalCropArea?: object;
              }
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Fires event {@link #event:customShapeError customShapeError} to attached listeners.
             */
            fireCustomShapeError(
              /**
               * Parameters to pass along with the event
               */
              mParameters?: object
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Fires event {@link #event:customShapeLoaded customShapeLoaded} to attached listeners.
             */
            fireCustomShapeLoaded(
              /**
               * Parameters to pass along with the event
               */
              mParameters?: object
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Fires event {@link #event:error error} to attached listeners.
             */
            fireError(
              /**
               * Parameters to pass along with the event
               */
              mParameters?: object
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Fires event {@link #event:historyChanged historyChanged} to attached listeners.
             */
            fireHistoryChanged(
              /**
               * Parameters to pass along with the event
               */
              mParameters?: object
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Fires event {@link #event:loaded loaded} to attached listeners.
             */
            fireLoaded(
              /**
               * Parameters to pass along with the event
               */
              mParameters?: object
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Fires event {@link #event:sizeChanged sizeChanged} to attached listeners.
             */
            fireSizeChanged(
              /**
               * Parameters to pass along with the event
               */
              mParameters?: {
                width?: number;

                height?: number;

                originalWidth?: number;

                originalHeight?: number;
              }
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Fires event {@link #event:zoomChanged zoomChanged} to attached listeners.
             */
            fireZoomChanged(
              /**
               * Parameters to pass along with the event
               */
              mParameters?: {
                zoom?: number;
              }
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Flips the image based on the specified parameters.
             */
            flip(
              /**
               * Whether to flip the image vertically
               */
              bVertical: boolean,
              /**
               * Whether to flip the image horizontally
               */
              bHorizontal: boolean,
              /**
               * Indicates whether to show this action in preview only (`true`) or record it in action history as well
               * (`false`)
               */
              bPreview: boolean
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Flips the whole image horizontally.
             */
            flipHorizontal(
              /**
               * Indicates whether to show this action in preview only (`true`) or record it in action history as well
               * (`false`)
               */
              bPreview: boolean
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Flips the whole image vertically.
             */
            flipVertical(
              /**
               * Indicates whether to show this action in preview only (`true`) or record it in action history as well
               * (`false`)
               */
              bPreview: boolean
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Gets the current crop area position and size.
             */
            getCropArea(): Object;
            /**
             * Returns `true` when the `src` property is set and the specified image has been successfuly loaded.
             */
            getCustomShapeLoaded(): boolean;
            /**
             * Gets current value of property {@link #getCustomShapeSrc customShapeSrc}.
             *
             * Image source for the custom shape used in custom shape cropping.
             * Can be a file or Blob object, a URL address of the image, a Base64 data URL string, or any other source
             * supported by the <img> HTML tag.
             * **Note:** In Internet Explorer, `customShape` doesn't support SVG files and will throw and exception
             * if SVG files are used.
             *
             * Default value is `empty string`.
             */
            getCustomShapeSrc(): any;
            /**
             * Returns the name of the image file if a file was specified in the`src` property and its name is available.
             * Otherwise returns an empty string.
             */
            getFileName(): string;
            /**
             * Returns the height of the image.
             */
            getHeight(): number;
            /**
             * Returns an array of all action history items.
             */
            getHistory(): sap.suite.ui.commons.imageeditor.HistoryItem[];
            /**
             * Returns Blob object containing the image in the specified format. If the format is not specified, either
             * the original format of the image is used or PNG, if the original format is not supported by the browser's
             * `canvas.toDataURL` method.
             */
            getImageAsBlob(
              /**
               * File format of the returned image Blob. If the selected format is not suppoirted by the browser's `canvas.toDataURL`
               * method, PNG is returned instead.
               */
              sFormat?: sap.suite.ui.commons.ImageFormat,
              /**
               * Only applied when JPEG format is used. Quality of the returned image, ranging from 0 to 1. 0 means highly
               * compressed image, 1 means uncompressed image. When no value is provided, canvas default compression level
               * is used.
               */
              fQuality?: number
            ): any;
            /**
             * Returns Base64 Data URL of the image in the specified format. If the format is not specified, either
             * the original format of the image is used or PNG, if the original format is not supported by the browser's
             * `canvas.toDataURL` method.
             */
            getImageDataURL(
              /**
               * File format of the returned Data URL. If the selected format is not suppoirted by the browser's `canvas.toDataURL`
               * method, PNG is returned instead.
               */
              sFormat?: sap.suite.ui.commons.ImageFormat,
              /**
               * Only applied when JPEG format is used. Quality of the returned image, ranging from 0 to 1. 0 means highly
               * compressed image, 1 means uncompressed image. When no value is provided, canvas default compression level
               * is used.
               */
              fQuality?: number
            ): string;
            /**
             * Returns Base64 Data URL of the image in JPEG format.
             */
            getImageJpegDataURL(
              /**
               * Quality of the returned image, ranging from 0 to 1. 0 means highly compressed image, 1 means uncompressed
               * image. When no value is provided, canvas default compression level is used.
               */
              fQuality?: number
            ): string;
            /**
             * Returns Base64 Data URL of the image in PNG format.
             */
            getImagePngDataURL(): string;
            /**
             * Gets current value of property {@link #getKeepCropAspectRatio keepCropAspectRatio}.
             *
             * Defines whether aspect ratio should be kept when the crop area is expanded or shrunk in the `CropRectangle`
             * or `CropEllipse` modes ({@link sap.suite.ui.commons.ImageEditorMode}).
             *
             * Default value is `true`.
             */
            getKeepCropAspectRatio(): boolean;
            /**
             * Gets current value of property {@link #getKeepResizeAspectRatio keepResizeAspectRatio}.
             *
             * Defines whether aspect ratio should be kept when the image is resized in the `Resize` mode ({@link sap.suite.ui.commons.ImageEditorMode})
             * or using the {@link #setWidth} or {@link #setHeight} methods.
             *
             * Default value is `true`.
             */
            getKeepResizeAspectRatio(): boolean;
            /**
             * Returns `true` when the `customShapeSrc` property is set and the specified image has been successfuly
             * loaded.
             */
            getLoaded(): boolean;
            /**
             * Returns a metadata object for class sap.suite.ui.commons.imageeditor.ImageEditor.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Gets current value of property {@link #getMode mode}.
             *
             * Image editor mode.
             * Four modes are available: resize mode, crop to rectangle mode, crop to circle mode, and display image
             * mode (default).
             * The default mode displays the image to be edited.
             *
             * Default value is `Default`.
             */
            getMode(): sap.suite.ui.commons.ImageEditorMode;
            /**
             * Returns the height of the currently shown image, even if it is in preview state.
             */
            getPreviewHeight(): number;
            /**
             * Gets the width of the currently shown image, even if it is in preview state.
             */
            getPreviewWidth(): number;
            /**
             * Gets current value of property {@link #getScaleCropArea scaleCropArea}.
             *
             * Defines the behavior of the crop area when zooming in or out.
             * If set to `true`, the crop area is scaled up or down when the zoom level is changed.
             * If set to `false`, the crop area remains unchanged and keeps its size.
             *
             * Default value is `false`.
             */
            getScaleCropArea(): boolean;
            /**
             * Gets current value of property {@link #getSrc src}.
             *
             * Image source.
             * Can be a file or Blob object, a URL address of the image, a Base64 data URL string, or any other source
             * supported by the <img> HTML tag.
             *
             * Default value is `empty string`.
             */
            getSrc(): any;
            /**
             * Gets the width of the image.
             */
            getWidth(): number;
            /**
             * Returns the current zoom level.
             */
            getZoomLevel(): number;
            /**
             * Applies the grayscale filter to the image.
             */
            grayscale(
              /**
               * Filter strength. Applicable range of values is from 0 to 100
               */
              iValue: number,
              /**
               * Indicates whether to show this action in preview only (`true`) or record it in action history as well
               * (`false`)
               */
              bPreview: boolean
            ): void;
            /**
             * Inverts the colors of the image.
             */
            invert(
              /**
               * Filter strength. Applicable range of values is from 0 to 100
               */
              iValue: number,
              /**
               * Indicates whether to show this action in preview only (`true`) or record it in action history as well
               * (`false`)
               */
              bPreview: boolean
            ): void;
            /**
             * Changes the state to an action history item at the given index.
             */
            jumpToHistory(
              /**
               * Index of the history item. Newest state has the index of 0, the most recent change has the index of 1.
               * The index increases with each preceding action.
               */
              iIndex: number
            ): void;
            /**
             * Opens Save As dialog in browser.
             */
            openSaveDialog(
              /**
               * File name prefilled in the the save as dialog. Default name is "image".
               */
              sFileName?: string,
              /**
               * File format of the returned image Blob. If the format is not specified, either the original format of
               * the image is used or PNG, if the original format is not supported by the browser's `canvas.toDataURL`
               * method.
               */
              sFormat?: sap.suite.ui.commons.ImageFormat,
              /**
               * Only applied when JPEG format is used. Quality of the returned image, ranging from 0 to 1. 0 means highly
               * compressed image, 1 means uncompressed image. When no value is provided, canvas default compression level
               * is used.
               */
              fQuality?: number
            ): void;
            /**
             * Crops the image to a new rectangle-shaped image based on the specified pixel parameters.
             */
            rectangleCrop(
              /**
               * X coordinate of the top left corner of the crop area
               */
              iX: number,
              /**
               * Y coordinate of the top left corner of the crop area
               */
              iY: number,
              /**
               * Width of the crop area
               */
              iWidth: number,
              /**
               * Height of the crop area
               */
              iHeight: number,
              /**
               * Indicates whether to show this action in preview only (`true`) or record it in action history as well
               * (`false`)
               */
              bPreview: boolean
            ): void;
            /**
             * Goes one action forward in the action history, if possible.
             */
            redo(): void;
            /**
             * Rotates the image to the specified angle, ranging from -360 to 360 degrees.
             * Use a positive value for clockwise rotation and a negative value for counterclockwise rotation.
             */
            rotate(
              /**
               * Number of degrees to rotate the image. Applicable range of values is from -360 to 360
               */
              iDegrees: number,
              /**
               * Indicates whether to show this action in preview only (`true`) or record it in action history as well
               * (`false`)
               */
              bPreview: boolean
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Applies the saturation filter to the image.
             */
            saturate(
              /**
               * Amount of the filter strength. Applicable range of values is from 0 to 500
               */
              iValue: number,
              /**
               * Indicates whether to show this action in preview only (`true`) or record it in action history as well
               * (`false`)
               */
              bPreview: boolean
            ): void;
            /**
             * Applies the sepia filter to the image.
             */
            sepia(
              /**
               * Filter strength. Applicable range of values is from 0 to 100
               */
              iValue: number,
              /**
               * Indicates whether to show this action in preview only (`true`) or record it in action history as well
               * (`false`)
               */
              bPreview: boolean
            ): void;
            /**
             * Sets the crop area to the position and size.
             * The size is expected to be in pixel values corresponding to the actual size of the image.
             * Crop area is automatically constrained, so that it doesn't overflow the edges of the image.
             */
            setCropArea(
              /**
               * X coordinate of the top left corner of the crop area
               */
              iX: number,
              /**
               * Y coordinate of the top left corner of the crop area
               */
              iY: number,
              /**
               * Width of the crop area
               */
              iWidth: number,
              /**
               * Height of the crop area
               */
              iHeight: number
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Sets the size of the crop area to comply with the specified aspect ratio.
             * Centers the crop area, so that there is always some space from the edges of the image.
             */
            setCropAreaByRatio(
              /**
               * Ratio width
               */
              iWidth: number,
              /**
               * Ratio height
               */
              iHeight: number
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Resizes the crop area to the specified height and width.
             * The size is expected to be in pixel values corresponding to the actual size of the image.
             * Crop area is automatically constrained, so that it doesn't overflow the edges of the image.
             */
            setCropAreaBySize(
              /**
               * Width of the cropping area
               */
              iWidth: number,
              /**
               * Height of the cropping area
               */
              iHeight: number
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Sets the size of the crop area to comply with the aspect ratio of the loaded custom shape.
             * Centers the crop area, so that there is always some space from the edges of the image.
             */
            setCustomShapeCropAreaRatio(): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Sets a new value for property {@link #getCustomShapeSrc customShapeSrc}.
             *
             * Image source for the custom shape used in custom shape cropping.
             * Can be a file or Blob object, a URL address of the image, a Base64 data URL string, or any other source
             * supported by the <img> HTML tag.
             * **Note:** In Internet Explorer, `customShape` doesn't support SVG files and will throw and exception
             * if SVG files are used.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `empty string`.
             */
            setCustomShapeSrc(
              /**
               * New value for property `customShapeSrc`
               */
              oCustomShapeSrc: any
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Sets the height of the image in pixels.
             * If the property `keepResizeAspectRatio` is set to `true`, changes the current width as well (even in
             * the preview mode).
             */
            setHeight(
              /**
               * New height of the image in pixels
               */
              iHeight: number,
              /**
               * Indicates whether to show this action in preview only (`true`) or record it in action history as well
               * (`false`)
               */
              bPreview: boolean
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Sets a new value for property {@link #getKeepCropAspectRatio keepCropAspectRatio}.
             *
             * Defines whether aspect ratio should be kept when the crop area is expanded or shrunk in the `CropRectangle`
             * or `CropEllipse` modes ({@link sap.suite.ui.commons.ImageEditorMode}).
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `true`.
             */
            setKeepCropAspectRatio(
              /**
               * New value for property `keepCropAspectRatio`
               */
              bKeepCropAspectRatio: boolean
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Sets a new value for property {@link #getKeepResizeAspectRatio keepResizeAspectRatio}.
             *
             * Defines whether aspect ratio should be kept when the image is resized in the `Resize` mode ({@link sap.suite.ui.commons.ImageEditorMode})
             * or using the {@link #setWidth} or {@link #setHeight} methods.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `true`.
             */
            setKeepResizeAspectRatio(
              /**
               * New value for property `keepResizeAspectRatio`
               */
              bKeepResizeAspectRatio: boolean
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Sets a new value for property {@link #getMode mode}.
             *
             * Image editor mode.
             * Four modes are available: resize mode, crop to rectangle mode, crop to circle mode, and display image
             * mode (default).
             * The default mode displays the image to be edited.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `Default`.
             */
            setMode(
              /**
               * New value for property `mode`
               */
              sMode: sap.suite.ui.commons.ImageEditorMode
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Sets a new value for property {@link #getScaleCropArea scaleCropArea}.
             *
             * Defines the behavior of the crop area when zooming in or out.
             * If set to `true`, the crop area is scaled up or down when the zoom level is changed.
             * If set to `false`, the crop area remains unchanged and keeps its size.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `false`.
             */
            setScaleCropArea(
              /**
               * New value for property `scaleCropArea`
               */
              bScaleCropArea: boolean
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Sets the size of the image in pixels.
             */
            setSize(
              /**
               * New width of the image
               */
              iWidth: number,
              /**
               * New height of the image
               */
              iHeight: number,
              /**
               * Indicates whether to show this action in preview only (`true`) or record it in action history as well
               * (`false`)
               */
              bPreview: boolean
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Sets a new value for property {@link #getSrc src}.
             *
             * Image source.
             * Can be a file or Blob object, a URL address of the image, a Base64 data URL string, or any other source
             * supported by the <img> HTML tag.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `empty string`.
             */
            setSrc(
              /**
               * New value for property `src`
               */
              oSrc: any
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Sets the width of the image in pixels.
             * If the property `keepResizeAspectRatio` is set to `true`, changes the current image height as well (even
             * in preview state).
             */
            setWidth(
              /**
               * New width of the image in pixels
               */
              iWidth: number,
              /**
               * Indicates whether to show this action in preview only (`true`) or record it in action history as well
               * (`false`)
               */
              bPreview: boolean
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Goes one action back in the action history, if possible.
             */
            undo(): void;
            /**
             * Zooms in or out to the specified zoom level.
             */
            zoom(
              /**
               * Level of zoom
               */
              fZoom: number,
              /**
               * Map which contains following parameters properties:
               */
              mParameters?: {
                /**
                 * x position in the image from/to which the zoom should happen
                 */
                x?: number;
                /**
                 * y position in the image from/to which the zoom should happen
                 */
                y?: number;
              }
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Zooms in one step closer.
             */
            zoomIn(
              /**
               * Map that contains following parameters properties:
               */
              mParameters?: {
                /**
                 * x position from/to which the zoom should happen
                 */
                x?: number;
                /**
                 * y position from/to which the zoom should happen
                 */
                y?: number;
              }
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Zooms out one step further.
             */
            zoomOut(
              /**
               * Map that contains following parameters properties:
               */
              mParameters?: {
                /**
                 * x position from/to which the zoom should happen
                 */
                x?: number;
                /**
                 * y position from/to which the zoom should happen
                 */
                y?: number;
              }
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Fits the image into the currently visible area. This method can only be called after the image is loaded
             * and rendered.
             */
            zoomToFit(): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:cropAreaChanged cropAreaChanged} event of this
             * `sap.suite.ui.commons.imageeditor.ImageEditor`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.imageeditor.ImageEditor` itself.
             *
             * This event is fired when the size of the crop area is changed by the user while in the `CropRectangle`
             * or `CropEllipse` mode ({@link sap.suite.ui.commons.ImageEditorMode}).
             */
            attachCropAreaChanged(
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.imageeditor.ImageEditor`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:customShapeError customShapeError} event of
             * this `sap.suite.ui.commons.imageeditor.ImageEditor`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.imageeditor.ImageEditor` itself.
             *
             * This event is fired if there is an error loading the image specified in the `customShapeSrc` property,
             * for example, when the URL is unreachable.
             */
            attachCustomShapeError(
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.imageeditor.ImageEditor`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:customShapeLoaded customShapeLoaded} event of
             * this `sap.suite.ui.commons.imageeditor.ImageEditor`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.imageeditor.ImageEditor` itself.
             *
             * This event is fired after the image specified in the `customShapeSrc` property is successfully loaded.
             */
            attachCustomShapeLoaded(
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.imageeditor.ImageEditor`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:error error} event of this `sap.suite.ui.commons.imageeditor.ImageEditor`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.imageeditor.ImageEditor` itself.
             *
             * This event is fired if there is an error loading the image specified in the `src` property, for example,
             * when the URL is unreachable.
             */
            attachError(
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.imageeditor.ImageEditor`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:historyChanged historyChanged} event of this
             * `sap.suite.ui.commons.imageeditor.ImageEditor`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.imageeditor.ImageEditor` itself.
             *
             * This event is fired each time there is a change in the history of recent actions or in the recent actions
             * history index.
             * This may happen either when an action is performed on the image or when the {@link #undo}, {@link #redo},
             * or {@link #jumpToHistory} methods are called.
             */
            attachHistoryChanged(
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.imageeditor.ImageEditor`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:loaded loaded} event of this `sap.suite.ui.commons.imageeditor.ImageEditor`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.imageeditor.ImageEditor` itself.
             *
             * This event is fired after the image specified in the `src` property is successfully loaded.
             */
            attachLoaded(
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.imageeditor.ImageEditor`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:sizeChanged sizeChanged} event of this `sap.suite.ui.commons.imageeditor.ImageEditor`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.imageeditor.ImageEditor` itself.
             *
             * This event is fired when the size of the image is changed by the user while in the `Resize` mode ({@link
             * sap.suite.ui.commons.ImageEditorMode}).
             */
            attachSizeChanged(
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.imageeditor.ImageEditor`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:zoomChanged zoomChanged} event of this `sap.suite.ui.commons.imageeditor.ImageEditor`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.imageeditor.ImageEditor` itself.
             *
             * This event is fired when the zoom level is changed by the user interaction.
             */
            attachZoomChanged(
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.imageeditor.ImageEditor`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.imageeditor.ImageEditor;
          }
          /**
           * @SINCE 1.66.0
           *
           * This control acts as a wrapper around the {@link sap.suite.ui.commons.imageeditor.ImageEditor} control.
           * It provides additional image editing capabilities for the convenience of your users.
           *
           * Toolbar Customization: There are two ways to customize the toolbar, but they cannot be used together:
           *
           * 	 - Use `enabledButtons property to select the order and visibility of the buttons provided by
           * 			the ImageEditorContainer` control. You can use the `customToolbarControls` aggregation to add custom
           * 			controls that will be rendered in the toolbar.
           * 	 - Use the {@link #getToolbar} method together with the {@link #getToolbarIds} method to customize the
           * 			toolbar as you need.
           * The changes made to the toolbar will be kept unless some of the methods from previous approach are used.
           * The previous approach involves rerendering of the toolbar, which causes all changes to be lost. **Note:**
           * If you use this approach, make sure that you make your changes to the mobile toolbars as well, so that
           * your application can be used on mobile devices.
           * There are three mobile toolbars available:
           * 	The header toolbar that can be customized using the method {@link #getMobileHeaderToolbar} and is intended
           * for custom buttons.
           * 	 - The zoom toolbar contains zoom functionality that can be customized using the methods {@link #getMobileZoomToolbar}
           * 			and {@link #getMobileZoomToolbarIds}.
           * 	 - The footer toolbar that usually includes the `ImageEditorContainer` buttons and can be customized
           * 			using the methods {@link #getMobileFooterToolbar} and {@link #getMobileFooterToolbarIds}.
           */
          class ImageEditorContainer extends sap.ui.core.Control {
            /**
             * Constructor for a new ImageEditorContainer.
             *
             * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
             * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
             * of the syntax of the settings object.
             */
            constructor(
              /**
               * ID for the new control, generated automatically if no ID is given
               */
              sId?: string,
              /**
               * Initial settings for the new control
               */
              mSettings?: ImageEditorContainerOpts
            );

            /**
             * Adds some customEllipseCropItem to the aggregation {@link #getCustomEllipseCropItems customEllipseCropItems}.
             */
            addCustomEllipseCropItem(
              /**
               * The customEllipseCropItem to add; if empty, nothing is inserted
               */
              oCustomEllipseCropItem: sap.suite.ui.commons.imageeditor.CustomSizeItem
            ): sap.suite.ui.commons.imageeditor.ImageEditorContainer;
            /**
             * Adds some customRectangleCropItem to the aggregation {@link #getCustomRectangleCropItems customRectangleCropItems}.
             */
            addCustomRectangleCropItem(
              /**
               * The customRectangleCropItem to add; if empty, nothing is inserted
               */
              oCustomRectangleCropItem: sap.suite.ui.commons.imageeditor.CustomSizeItem
            ): sap.suite.ui.commons.imageeditor.ImageEditorContainer;
            /**
             * Adds some customResizeItem to the aggregation {@link #getCustomResizeItems customResizeItems}.
             */
            addCustomResizeItem(
              /**
               * The customResizeItem to add; if empty, nothing is inserted
               */
              oCustomResizeItem: sap.suite.ui.commons.imageeditor.CustomSizeItem
            ): sap.suite.ui.commons.imageeditor.ImageEditorContainer;
            /**
             * Adds some customToolbarControl to the aggregation {@link #getCustomToolbarControls customToolbarControls}.
             */
            addCustomToolbarControl(
              /**
               * The customToolbarControl to add; if empty, nothing is inserted
               */
              oCustomToolbarControl: sap.ui.core.Control
            ): sap.suite.ui.commons.imageeditor.ImageEditorContainer;
            /**
             * Destroys all the customEllipseCropItems in the aggregation {@link #getCustomEllipseCropItems customEllipseCropItems}.
             */
            destroyCustomEllipseCropItems(): sap.suite.ui.commons.imageeditor.ImageEditorContainer;
            /**
             * Destroys all the customRectangleCropItems in the aggregation {@link #getCustomRectangleCropItems customRectangleCropItems}.
             */
            destroyCustomRectangleCropItems(): sap.suite.ui.commons.imageeditor.ImageEditorContainer;
            /**
             * Destroys all the customResizeItems in the aggregation {@link #getCustomResizeItems customResizeItems}.
             */
            destroyCustomResizeItems(): sap.suite.ui.commons.imageeditor.ImageEditorContainer;
            /**
             * Destroys all the customToolbarControls in the aggregation {@link #getCustomToolbarControls customToolbarControls}.
             */
            destroyCustomToolbarControls(): sap.suite.ui.commons.imageeditor.ImageEditorContainer;
            /**
             * Destroys the imageEditor in the aggregation {@link #getImageEditor imageEditor}.
             */
            destroyImageEditor(): sap.suite.ui.commons.imageeditor.ImageEditorContainer;
            /**
             * Creates a new subclass of class sap.suite.ui.commons.imageeditor.ImageEditorContainer with name `sClassName`
             * and enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Gets content of aggregation {@link #getCustomEllipseCropItems customEllipseCropItems}.
             *
             * Custom items for Ellipse Crop option panel.
             */
            getCustomEllipseCropItems(): sap.suite.ui.commons.imageeditor.CustomSizeItem[];
            /**
             * Gets content of aggregation {@link #getCustomRectangleCropItems customRectangleCropItems}.
             *
             * Custom items for Rectangle Crop option panel.
             */
            getCustomRectangleCropItems(): sap.suite.ui.commons.imageeditor.CustomSizeItem[];
            /**
             * Gets content of aggregation {@link #getCustomResizeItems customResizeItems}.
             *
             * Custom items for Resize option panel.
             */
            getCustomResizeItems(): sap.suite.ui.commons.imageeditor.CustomSizeItem[];
            /**
             * Gets content of aggregation {@link #getCustomToolbarControls customToolbarControls}.
             *
             * Custom controls that are added into the toolbar of `ImageEditorContainer`. Only use controls that are
             * supported by {@link sap.m.OverflowToolbar}.
             */
            getCustomToolbarControls(): sap.ui.core.Control[];
            /**
             * Gets current value of property {@link #getEnabledButtons enabledButtons}.
             *
             * Controls order and availability of the buttons in the header panel of ImageEditorContainer.
             *
             * Default value is `Filter,Transform,Crop`.
             */
            getEnabledButtons(): sap.suite.ui.commons.ImageEditorContainerButton[];
            /**
             * Gets content of aggregation {@link #getImageEditor imageEditor}.
             *
             * {@link sap.suite.ui.commons.imageeditor.ImageEditor} containing the image for editing.
             * If no {@link sap.suite.ui.commons.imageeditor.ImageEditor} is specified, the `ImageEditorContainer` has
             * no effect.
             */
            getImageEditor(): sap.suite.ui.commons.imageeditor.ImageEditor;
            /**
             * Returns a metadata object for class sap.suite.ui.commons.imageeditor.ImageEditorContainer.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Returns the mobile footer toolbar of the `ImageEditorContainer` for customization of its content.
             */
            getMobileFooterToolbar(): sap.m.OverflowToolbar;
            /**
             * Returns IDs of the default items in the mobile footer toolbar. Can be used for toolbar customization.
             */
            getMobileFooterToolbarIds(): Object;
            /**
             * Returns the mobile header toolbar of the `ImageEditorContainer` for customization of its content.
             */
            getMobileHeaderToolbar(): sap.m.OverflowToolbar;
            /**
             * @SINCE 1.68
             *
             * Returns the mobile zoom toolbar of the `ImageEditorContainer` for customization of its content.
             */
            getMobileZoomToolbar(): sap.m.OverflowToolbar;
            /**
             * @SINCE 1.68
             *
             * Returns IDs of the default items in the mobile zoom toolbar. Can be used for toolbar customization.
             */
            getMobileZoomToolbarIds(): Object;
            /**
             * Gets current value of property {@link #getMode mode}.
             *
             * Image editor container mode.
             * Three modes are available: transform mode, crop mode, and filter mode (default).
             * The default mode provides filters for image editing: brightness, contrast, saturation, sepia grayscale,
             * and others.
             *
             * Default value is `Filter`.
             */
            getMode(): sap.suite.ui.commons.ImageEditorContainerMode;
            /**
             * Returns the header toolbar of the `ImageEditorContainer` for customization of its content.
             */
            getToolbar(): sap.m.OverflowToolbar;
            /**
             * Returns IDs of the default items in the header toolbar. Can be used for toolbar customization.
             */
            getToolbarIds(): Object;
            /**
             * Checks for the provided `sap.suite.ui.commons.imageeditor.CustomSizeItem` in the aggregation {@link #getCustomEllipseCropItems
             * customEllipseCropItems}. and returns its index if found or -1 otherwise.
             */
            indexOfCustomEllipseCropItem(
              /**
               * The customEllipseCropItem whose index is looked for
               */
              oCustomEllipseCropItem: sap.suite.ui.commons.imageeditor.CustomSizeItem
            ): number;
            /**
             * Checks for the provided `sap.suite.ui.commons.imageeditor.CustomSizeItem` in the aggregation {@link #getCustomRectangleCropItems
             * customRectangleCropItems}. and returns its index if found or -1 otherwise.
             */
            indexOfCustomRectangleCropItem(
              /**
               * The customRectangleCropItem whose index is looked for
               */
              oCustomRectangleCropItem: sap.suite.ui.commons.imageeditor.CustomSizeItem
            ): number;
            /**
             * Checks for the provided `sap.suite.ui.commons.imageeditor.CustomSizeItem` in the aggregation {@link #getCustomResizeItems
             * customResizeItems}. and returns its index if found or -1 otherwise.
             */
            indexOfCustomResizeItem(
              /**
               * The customResizeItem whose index is looked for
               */
              oCustomResizeItem: sap.suite.ui.commons.imageeditor.CustomSizeItem
            ): number;
            /**
             * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getCustomToolbarControls customToolbarControls}.
             * and returns its index if found or -1 otherwise.
             */
            indexOfCustomToolbarControl(
              /**
               * The customToolbarControl whose index is looked for
               */
              oCustomToolbarControl: sap.ui.core.Control
            ): number;
            /**
             * Inserts a customEllipseCropItem into the aggregation {@link #getCustomEllipseCropItems customEllipseCropItems}.
             */
            insertCustomEllipseCropItem(
              /**
               * The customEllipseCropItem to insert; if empty, nothing is inserted
               */
              oCustomEllipseCropItem: sap.suite.ui.commons.imageeditor.CustomSizeItem,
              /**
               * The `0`-based index the customEllipseCropItem should be inserted at; for a negative value of `iIndex`,
               * the customEllipseCropItem is inserted at position 0; for a value greater than the current size of the
               * aggregation, the customEllipseCropItem is inserted at the last position
               */
              iIndex: number
            ): sap.suite.ui.commons.imageeditor.ImageEditorContainer;
            /**
             * Inserts a customRectangleCropItem into the aggregation {@link #getCustomRectangleCropItems customRectangleCropItems}.
             */
            insertCustomRectangleCropItem(
              /**
               * The customRectangleCropItem to insert; if empty, nothing is inserted
               */
              oCustomRectangleCropItem: sap.suite.ui.commons.imageeditor.CustomSizeItem,
              /**
               * The `0`-based index the customRectangleCropItem should be inserted at; for a negative value of `iIndex`,
               * the customRectangleCropItem is inserted at position 0; for a value greater than the current size of the
               * aggregation, the customRectangleCropItem is inserted at the last position
               */
              iIndex: number
            ): sap.suite.ui.commons.imageeditor.ImageEditorContainer;
            /**
             * Inserts a customResizeItem into the aggregation {@link #getCustomResizeItems customResizeItems}.
             */
            insertCustomResizeItem(
              /**
               * The customResizeItem to insert; if empty, nothing is inserted
               */
              oCustomResizeItem: sap.suite.ui.commons.imageeditor.CustomSizeItem,
              /**
               * The `0`-based index the customResizeItem should be inserted at; for a negative value of `iIndex`, the
               * customResizeItem is inserted at position 0; for a value greater than the current size of the aggregation,
               * the customResizeItem is inserted at the last position
               */
              iIndex: number
            ): sap.suite.ui.commons.imageeditor.ImageEditorContainer;
            /**
             * Inserts a customToolbarControl into the aggregation {@link #getCustomToolbarControls customToolbarControls}.
             */
            insertCustomToolbarControl(
              /**
               * The customToolbarControl to insert; if empty, nothing is inserted
               */
              oCustomToolbarControl: sap.ui.core.Control,
              /**
               * The `0`-based index the customToolbarControl should be inserted at; for a negative value of `iIndex`,
               * the customToolbarControl is inserted at position 0; for a value greater than the current size of the
               * aggregation, the customToolbarControl is inserted at the last position
               */
              iIndex: number
            ): sap.suite.ui.commons.imageeditor.ImageEditorContainer;
            /**
             * Removes all the controls from the aggregation {@link #getCustomEllipseCropItems customEllipseCropItems}.
             *
             * Additionally, it unregisters them from the hosting UIArea.
             */
            removeAllCustomEllipseCropItems(): sap.suite.ui.commons.imageeditor.CustomSizeItem[];
            /**
             * Removes all the controls from the aggregation {@link #getCustomRectangleCropItems customRectangleCropItems}.
             *
             * Additionally, it unregisters them from the hosting UIArea.
             */
            removeAllCustomRectangleCropItems(): sap.suite.ui.commons.imageeditor.CustomSizeItem[];
            /**
             * Removes all the controls from the aggregation {@link #getCustomResizeItems customResizeItems}.
             *
             * Additionally, it unregisters them from the hosting UIArea.
             */
            removeAllCustomResizeItems(): sap.suite.ui.commons.imageeditor.CustomSizeItem[];
            /**
             * Removes all the controls from the aggregation {@link #getCustomToolbarControls customToolbarControls}.
             *
             * Additionally, it unregisters them from the hosting UIArea.
             */
            removeAllCustomToolbarControls(): sap.ui.core.Control[];
            /**
             * Removes a customEllipseCropItem from the aggregation {@link #getCustomEllipseCropItems customEllipseCropItems}.
             */
            removeCustomEllipseCropItem(
              /**
               * The customEllipseCropItem to remove or its index or id
               */
              vCustomEllipseCropItem:
                | number
                | string
                | sap.suite.ui.commons.imageeditor.CustomSizeItem
            ): sap.suite.ui.commons.imageeditor.CustomSizeItem;
            /**
             * Removes a customRectangleCropItem from the aggregation {@link #getCustomRectangleCropItems customRectangleCropItems}.
             */
            removeCustomRectangleCropItem(
              /**
               * The customRectangleCropItem to remove or its index or id
               */
              vCustomRectangleCropItem:
                | number
                | string
                | sap.suite.ui.commons.imageeditor.CustomSizeItem
            ): sap.suite.ui.commons.imageeditor.CustomSizeItem;
            /**
             * Removes a customResizeItem from the aggregation {@link #getCustomResizeItems customResizeItems}.
             */
            removeCustomResizeItem(
              /**
               * The customResizeItem to remove or its index or id
               */
              vCustomResizeItem:
                | number
                | string
                | sap.suite.ui.commons.imageeditor.CustomSizeItem
            ): sap.suite.ui.commons.imageeditor.CustomSizeItem;
            /**
             * Removes a customToolbarControl from the aggregation {@link #getCustomToolbarControls customToolbarControls}.
             */
            removeCustomToolbarControl(
              /**
               * The customToolbarControl to remove or its index or id
               */
              vCustomToolbarControl: number | string | sap.ui.core.Control
            ): sap.ui.core.Control;
            /**
             * Sets a new value for property {@link #getEnabledButtons enabledButtons}.
             *
             * Controls order and availability of the buttons in the header panel of ImageEditorContainer.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `Filter,Transform,Crop`.
             */
            setEnabledButtons(
              /**
               * New value for property `enabledButtons`
               */
              sEnabledButtons: sap.suite.ui.commons.ImageEditorContainerButton[]
            ): sap.suite.ui.commons.imageeditor.ImageEditorContainer;
            /**
             * Sets the aggregated {@link #getImageEditor imageEditor}.
             */
            setImageEditor(
              /**
               * The imageEditor to set
               */
              oImageEditor: sap.suite.ui.commons.imageeditor.ImageEditor
            ): sap.suite.ui.commons.imageeditor.ImageEditorContainer;
            /**
             * Sets a new value for property {@link #getMode mode}.
             *
             * Image editor container mode.
             * Three modes are available: transform mode, crop mode, and filter mode (default).
             * The default mode provides filters for image editing: brightness, contrast, saturation, sepia grayscale,
             * and others.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `Filter`.
             */
            setMode(
              /**
               * New value for property `mode`
               */
              sMode: sap.suite.ui.commons.ImageEditorContainerMode
            ): sap.suite.ui.commons.imageeditor.ImageEditorContainer;
          }
          /**
           * @SINCE 1.68.0
           *
           * This control acts as a wrapper around the {@link sap.suite.ui.commons.imageeditor.ImageEditor} control.
           * It provides additional image editing capabilities for the convenience of your users.
           * This container is responsive and is rendered as a button on mobile devices.
           */
          class ImageEditorResponsiveContainer extends sap.suite.ui.commons
            .imageeditor.ImageEditorContainer {
            /**
             * Constructor for a new ImageEditorResponsiveContainer.
             */
            constructor(
              /**
               * ID for the new control, generated automatically if no ID is given
               */
              sId?: string,
              /**
               * Initial settings for the new control
               */
              mSettings?: ImageEditorResponsiveContainerOpts
            );

            /**
             * Creates a new subclass of class sap.suite.ui.commons.imageeditor.ImageEditorResponsiveContainer with
             * name `sClassName` and enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.imageeditor.ImageEditorContainer.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Returns a metadata object for class sap.suite.ui.commons.imageeditor.ImageEditorResponsiveContainer.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
          }
          /**
           * @SINCE 1.66.0
           *
           * Holds information about an {@link sap.suite.ui.commons.imageeditor.ImageEditor} action history item that
           * was created by one of the methods that change the size of the image, such as {@link sap.suite.ui.commons.imageeditor.ImageEditor#setSize},
           * {@link sap.suite.ui.commons.imageeditor.ImageEditor#setWidth}, and {@link sap.suite.ui.commons.imageeditor.ImageEditor#setHeight}.
           */
          class ResizeHistoryItem extends sap.suite.ui.commons.imageeditor
            .HistoryItem {
            /**
             * Constructor for a new ResizeHistoryItem.
             */
            constructor(
              /**
               * Property bag
               */
              mProperties: {
                /**
                 * Width of the image
                 */
                width: number;
                /**
                 * Height of the image
                 */
                height: number;
                /**
                 * Previous width of the image
                 */
                oldWidth: number;
                /**
                 * Previous height of the image
                 */
                oldHeight: number;
              }
            );

            /**
             * Creates a new subclass of class sap.suite.ui.commons.imageeditor.ResizeHistoryItem with name `sClassName`
             * and enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.imageeditor.HistoryItem.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Returns a metadata object for class sap.suite.ui.commons.imageeditor.ResizeHistoryItem.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
          }
          /**
           * @SINCE 1.66.0
           *
           * Holds information about an {@link sap.suite.ui.commons.imageeditor.ImageEditor} action history item that
           * was created by the {@link sap.suite.ui.commons.imageeditor.ImageEditor#rotate} method.
           */
          class RotateHistoryItem extends sap.suite.ui.commons.imageeditor
            .HistoryItem {
            /**
             * Constructor for a new RotateHistoryItem.
             */
            constructor(
              /**
               * Property bag
               */
              mProperties: {
                /**
                 * Number of deegress
                 */
                degrees: number;
              }
            );

            /**
             * Creates a new subclass of class sap.suite.ui.commons.imageeditor.RotateHistoryItem with name `sClassName`
             * and enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.imageeditor.HistoryItem.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Returns a metadata object for class sap.suite.ui.commons.imageeditor.RotateHistoryItem.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
          }
        }

        namespace networkgraph {
          namespace layout {
            /**
             * @SINCE 1.50
             *
             * This algorithm uses D3.force algorithm to layout the graph. It's good if the graph is too complicated
             * and LayeredLayout is not sufficient.
             */
            class ForceBasedLayout extends sap.suite.ui.commons.networkgraph
              .layout.LayoutAlgorithm {
              /**
               * Constructor for a new ForceBasedLayout.
               *
               * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
               * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
               * of the syntax of the settings object.
               */
              constructor();

              /**
               * Creates a new subclass of class sap.suite.ui.commons.networkgraph.layout.ForceBasedLayout with name `sClassName`
               * and enriches it with the information contained in `oClassInfo`.
               *
               * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.networkgraph.layout.LayoutAlgorithm.extend}.
               */
              // @ts-ignore
              static extend(
                /**
                 * Name of the class being created
                 */
                sClassName: string,
                /**
                 * Object literal with information about the class
                 */
                oClassInfo?: object,
                /**
                 * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
                 */
                FNMetaImpl?: Function
              ): Function;
              /**
               * Gets current value of property {@link #getAlpha alpha}.
               *
               * See: {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Force-Layout.md#alpha}
               *
               * Default value is `0.3`.
               */
              getAlpha(): number;
              /**
               * Gets current value of property {@link #getCharge charge}.
               *
               * See: {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Force-Layout.md#charge}
               *
               * Default value is `-30`.
               */
              getCharge(): number;
              /**
               * Gets current value of property {@link #getFriction friction}.
               *
               * Value in [0,1] range. See: {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Force-Layout.md#friction}
               *
               * Default value is `0.9`.
               */
              getFriction(): number;
              /**
               * Gets the type of the layout algorithm that defines the visual features and layout of the network graph.
               */
              getLayoutRenderType(): sap.suite.ui.commons.networkgraph.LayoutRenderType;
              /**
               * Gets current value of property {@link #getMaximumDuration maximumDuration}.
               *
               * Specifies the maximal time in miliseconds the algorithm is allowed to run.
               *
               * Default value is `1000`.
               */
              getMaximumDuration(): number;
              /**
               * Returns a metadata object for class sap.suite.ui.commons.networkgraph.layout.ForceBasedLayout.
               */
              // @ts-ignore
              static getMetadata(): sap.ui.base.Metadata;
              /**
               * Specifies if this layouting algorithm distributes nodes into layers. Parent graph may change behaviour
               * based on this option.
               */
              // @ts-ignore
              isLayered(): boolean;
              /**
               * Executes the layouting algorithm.
               */
              // @ts-ignore
              layout(): sap.suite.ui.commons.networkgraph.layout.LayoutTask;
              /**
               * Sets a new value for property {@link #getAlpha alpha}.
               *
               * See: {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Force-Layout.md#alpha}
               *
               * When called with a value of `null` or `undefined`, the default value of the property will be restored.
               *
               * Default value is `0.3`.
               */
              setAlpha(
                /**
                 * New value for property `alpha`
                 */
                fAlpha: number
              ): sap.suite.ui.commons.networkgraph.layout.ForceBasedLayout;
              /**
               * Sets a new value for property {@link #getCharge charge}.
               *
               * See: {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Force-Layout.md#charge}
               *
               * When called with a value of `null` or `undefined`, the default value of the property will be restored.
               *
               * Default value is `-30`.
               */
              setCharge(
                /**
                 * New value for property `charge`
                 */
                fCharge: number
              ): sap.suite.ui.commons.networkgraph.layout.ForceBasedLayout;
              /**
               * Sets a new value for property {@link #getFriction friction}.
               *
               * Value in [0,1] range. See: {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Force-Layout.md#friction}
               *
               * When called with a value of `null` or `undefined`, the default value of the property will be restored.
               *
               * Default value is `0.9`.
               */
              setFriction(
                /**
                 * New value for property `friction`
                 */
                fFriction: number
              ): sap.suite.ui.commons.networkgraph.layout.ForceBasedLayout;
              /**
               * Sets a new value for property {@link #getMaximumDuration maximumDuration}.
               *
               * Specifies the maximal time in miliseconds the algorithm is allowed to run.
               *
               * When called with a value of `null` or `undefined`, the default value of the property will be restored.
               *
               * Default value is `1000`.
               */
              setMaximumDuration(
                /**
                 * New value for property `maximumDuration`
                 */
                iMaximumDuration: number
              ): sap.suite.ui.commons.networkgraph.layout.ForceBasedLayout;
            }
            /**
             * @SINCE 1.58
             *
             * This algorithm uses the deterministic variant of the force-directed layout algorithm {@link sap.suite.ui.commons.networkgraph.layout.ForceBasedLayout}
             * to arrange the nodes included in the network graph. It can be useful for complex graphs, where {@link
             * sap.suite.ui.commons.networkgraph.layout.LayeredLayout} is not sufficient.
             */
            class ForceDirectedLayout extends sap.suite.ui.commons.networkgraph
              .layout.LayoutAlgorithm {
              /**
               * Constructor for a new ForceDirectedLayout.
               *
               * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
               * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
               * of the syntax of the settings object.
               */
              constructor();

              /**
               * Creates a new subclass of class sap.suite.ui.commons.networkgraph.layout.ForceDirectedLayout with name
               * `sClassName` and enriches it with the information contained in `oClassInfo`.
               *
               * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.networkgraph.layout.LayoutAlgorithm.extend}.
               */
              // @ts-ignore
              static extend(
                /**
                 * Name of the class being created
                 */
                sClassName: string,
                /**
                 * Object literal with information about the class
                 */
                oClassInfo?: object,
                /**
                 * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
                 */
                FNMetaImpl?: Function
              ): Function;
              /**
               * Gets current value of property {@link #getCoolDownStep coolDownStep}.
               *
               * Specifies how much the 'temperature' decreases after every iteration.
               *
               * Default value is `1`.
               */
              getCoolDownStep(): number;
              /**
               * Gets current value of property {@link #getInitialTemperature initialTemperature}.
               *
               * Initial 'temperature' of the system, that controls the step width of the nodes' movements and that decreases,
               * or 'cools down', after each iteration.
               *
               * Default value is `200`.
               */
              getInitialTemperature(): number;
              /**
               * Specifies the type of layout algorithm that defines the visual features and layout of the network graph.
               */
              getLayoutRenderType(): sap.suite.ui.commons.networkgraph.LayoutRenderType;
              /**
               * Gets current value of property {@link #getMaxIterations maxIterations}.
               *
               * Maximum number of iterations (or cooldown steps) the layouting process will go through.
               *
               * Default value is `200`.
               */
              getMaxIterations(): number;
              /**
               * Gets current value of property {@link #getMaxTime maxTime}.
               *
               * Maximum time in milliseconds the layouting process will run for.
               *
               * Default value is `2000`.
               */
              getMaxTime(): number;
              /**
               * Returns a metadata object for class sap.suite.ui.commons.networkgraph.layout.ForceDirectedLayout.
               */
              // @ts-ignore
              static getMetadata(): sap.ui.base.Metadata;
              /**
               * Gets current value of property {@link #getOptimalDistanceConstant optimalDistanceConstant}.
               *
               * The "C" constant from the optimal distance equation used in the Fruchterman-Reingold Algorithm. See {@link
               * https://www.researchgate.net/publication/309193795_Force-Directed_Graph_Drawing_Algorithm}
               *
               * Default value is `0.2`.
               */
              getOptimalDistanceConstant(): number;
              /**
               * Gets current value of property {@link #getStaticNodes staticNodes}.
               *
               * List of keys of nodes that should ignore cooldown iterations and keep their original positions (x and
               * y coordinates) in the graph.
               *
               * Default value is `[]`.
               */
              getStaticNodes(): string[];
              /**
               * Specifies if this layout algorithm distributes nodes into layers. The parent graph may affect the behaviour
               * based on this option.
               */
              // @ts-ignore
              isLayered(): boolean;
              /**
               * Runs the layout algorithm.
               */
              // @ts-ignore
              layout(): sap.suite.ui.commons.networkgraph.layout.LayoutTask;
              /**
               * Sets a new value for property {@link #getCoolDownStep coolDownStep}.
               *
               * Specifies how much the 'temperature' decreases after every iteration.
               *
               * When called with a value of `null` or `undefined`, the default value of the property will be restored.
               *
               * Default value is `1`.
               */
              setCoolDownStep(
                /**
                 * New value for property `coolDownStep`
                 */
                fCoolDownStep: number
              ): sap.suite.ui.commons.networkgraph.layout.ForceDirectedLayout;
              /**
               * Sets a new value for property {@link #getInitialTemperature initialTemperature}.
               *
               * Initial 'temperature' of the system, that controls the step width of the nodes' movements and that decreases,
               * or 'cools down', after each iteration.
               *
               * When called with a value of `null` or `undefined`, the default value of the property will be restored.
               *
               * Default value is `200`.
               */
              setInitialTemperature(
                /**
                 * New value for property `initialTemperature`
                 */
                fInitialTemperature: number
              ): sap.suite.ui.commons.networkgraph.layout.ForceDirectedLayout;
              /**
               * Sets a new value for property {@link #getMaxIterations maxIterations}.
               *
               * Maximum number of iterations (or cooldown steps) the layouting process will go through.
               *
               * When called with a value of `null` or `undefined`, the default value of the property will be restored.
               *
               * Default value is `200`.
               */
              setMaxIterations(
                /**
                 * New value for property `maxIterations`
                 */
                iMaxIterations: number
              ): sap.suite.ui.commons.networkgraph.layout.ForceDirectedLayout;
              /**
               * Sets a new value for property {@link #getMaxTime maxTime}.
               *
               * Maximum time in milliseconds the layouting process will run for.
               *
               * When called with a value of `null` or `undefined`, the default value of the property will be restored.
               *
               * Default value is `2000`.
               */
              setMaxTime(
                /**
                 * New value for property `maxTime`
                 */
                iMaxTime: number
              ): sap.suite.ui.commons.networkgraph.layout.ForceDirectedLayout;
              /**
               * Sets a new value for property {@link #getOptimalDistanceConstant optimalDistanceConstant}.
               *
               * The "C" constant from the optimal distance equation used in the Fruchterman-Reingold Algorithm. See {@link
               * https://www.researchgate.net/publication/309193795_Force-Directed_Graph_Drawing_Algorithm}
               *
               * When called with a value of `null` or `undefined`, the default value of the property will be restored.
               *
               * Default value is `0.2`.
               */
              setOptimalDistanceConstant(
                /**
                 * New value for property `optimalDistanceConstant`
                 */
                fOptimalDistanceConstant: number
              ): sap.suite.ui.commons.networkgraph.layout.ForceDirectedLayout;
              /**
               * Sets a new value for property {@link #getStaticNodes staticNodes}.
               *
               * List of keys of nodes that should ignore cooldown iterations and keep their original positions (x and
               * y coordinates) in the graph.
               *
               * When called with a value of `null` or `undefined`, the default value of the property will be restored.
               *
               * Default value is `[]`.
               */
              setStaticNodes(
                /**
                 * New value for property `staticNodes`
                 */
                sStaticNodes: string[]
              ): sap.suite.ui.commons.networkgraph.layout.ForceDirectedLayout;
            }
            /**
             * @SINCE 1.50
             *
             * This algorithm uses the klay.js algorithm to rearrange the graph in grid form. It's suitable for process
             * flows and tree-like graphs. It can be used for almost any graph.
             */
            class LayeredLayout extends sap.suite.ui.commons.networkgraph.layout
              .LayoutAlgorithm {
              /**
               * Constructor for a new LayeredLayout.
               *
               * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
               * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
               * of the syntax of the settings object.
               */
              constructor();

              /**
               * Creates a new subclass of class sap.suite.ui.commons.networkgraph.layout.LayeredLayout with name `sClassName`
               * and enriches it with the information contained in `oClassInfo`.
               *
               * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.networkgraph.layout.LayoutAlgorithm.extend}.
               */
              // @ts-ignore
              static extend(
                /**
                 * Name of the class being created
                 */
                sClassName: string,
                /**
                 * Object literal with information about the class
                 */
                oClassInfo?: object,
                /**
                 * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
                 */
                FNMetaImpl?: Function
              ): Function;
              /**
               * Specifies the type of layout algorithm that defines the visual features and layout of the network graph.
               */
              getLayoutRenderType(): sap.suite.ui.commons.networkgraph.LayoutRenderType;
              /**
               * Gets current value of property {@link #getLineSpacingFactor lineSpacingFactor}.
               *
               * Default value is `0.25`.
               */
              getLineSpacingFactor(): number;
              /**
               * Gets current value of property {@link #getMergeEdges mergeEdges}.
               *
               * Determines if all lines should lead to the same place in the node, or if each line should point to a
               * different place.
               *
               * Default value is `false`.
               */
              getMergeEdges(): boolean;
              /**
               * Returns a metadata object for class sap.suite.ui.commons.networkgraph.layout.LayeredLayout.
               */
              // @ts-ignore
              static getMetadata(): sap.ui.base.Metadata;
              /**
               * Gets current value of property {@link #getNodePlacement nodePlacement}.
               *
               * A node placement strategy to use (see {@link sap.suite.ui.commons.networkgraph.NodePlacement}).
               *
               * Default value is `BrandesKoepf`.
               */
              getNodePlacement(): sap.suite.ui.commons.networkgraph.NodePlacement;
              /**
               * Gets current value of property {@link #getNodeSpacing nodeSpacing}.
               *
               * Define a minimal distance on nodes the algorithm will try to keep. The default value is 55. Note that
               * values below 50 are incompatible with presence of groups due to insufficient space for group title bars
               * and space between nodes and their groups' borders.
               *
               * Default value is `55`.
               */
              getNodeSpacing(): number;
              /**
               * Executes the layout algorithm.
               */
              // @ts-ignore
              layout(): sap.suite.ui.commons.networkgraph.layout.LayoutTask;
              /**
               * Sets a new value for property {@link #getLineSpacingFactor lineSpacingFactor}.
               *
               * When called with a value of `null` or `undefined`, the default value of the property will be restored.
               *
               * Default value is `0.25`.
               */
              setLineSpacingFactor(
                /**
                 * New value for property `lineSpacingFactor`
                 */
                fLineSpacingFactor: number
              ): sap.suite.ui.commons.networkgraph.layout.LayeredLayout;
              /**
               * Sets a new value for property {@link #getMergeEdges mergeEdges}.
               *
               * Determines if all lines should lead to the same place in the node, or if each line should point to a
               * different place.
               *
               * When called with a value of `null` or `undefined`, the default value of the property will be restored.
               *
               * Default value is `false`.
               */
              setMergeEdges(
                /**
                 * New value for property `mergeEdges`
                 */
                bMergeEdges: boolean
              ): sap.suite.ui.commons.networkgraph.layout.LayeredLayout;
              /**
               * Sets a new value for property {@link #getNodePlacement nodePlacement}.
               *
               * A node placement strategy to use (see {@link sap.suite.ui.commons.networkgraph.NodePlacement}).
               *
               * When called with a value of `null` or `undefined`, the default value of the property will be restored.
               *
               * Default value is `BrandesKoepf`.
               */
              setNodePlacement(
                /**
                 * New value for property `nodePlacement`
                 */
                sNodePlacement: sap.suite.ui.commons.networkgraph.NodePlacement
              ): sap.suite.ui.commons.networkgraph.layout.LayeredLayout;
              /**
               * Sets a new value for property {@link #getNodeSpacing nodeSpacing}.
               *
               * Define a minimal distance on nodes the algorithm will try to keep. The default value is 55. Note that
               * values below 50 are incompatible with presence of groups due to insufficient space for group title bars
               * and space between nodes and their groups' borders.
               *
               * When called with a value of `null` or `undefined`, the default value of the property will be restored.
               *
               * Default value is `55`.
               */
              setNodeSpacing(
                /**
                 * New value for property `nodeSpacing`
                 */
                fNodeSpacing: number
              ): sap.suite.ui.commons.networkgraph.layout.LayeredLayout;
            }
            /**
             * @SINCE 1.50
             *
             * This is an abstract base class for Layout Algorithms.
             */
            class LayoutAlgorithm extends sap.ui.core.Element {
              /**
               * Constructor for a new LayoutingAlgorithm.
               *
               * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
               * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
               * of the syntax of the settings object.
               *
               * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.core.Element#constructor
               * sap.ui.core.Element} can be used.
               */
              constructor();

              /**/
              _alignCoordinatesWithView(): void;
              /**/
              _hasHierarchicalGroups(): boolean;
              /**
               * Creates a new subclass of class sap.suite.ui.commons.networkgraph.layout.LayoutAlgorithm with name `sClassName`
               * and enriches it with the information contained in `oClassInfo`.
               *
               * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
               */
              // @ts-ignore
              static extend(
                /**
                 * Name of the class being created
                 */
                sClassName: string,
                /**
                 * Object literal with information about the class
                 */
                oClassInfo?: object,
                /**
                 * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
                 */
                FNMetaImpl?: Function
              ): Function;
              /**
               * Returns a metadata object for class sap.suite.ui.commons.networkgraph.layout.LayoutAlgorithm.
               */
              // @ts-ignore
              static getMetadata(): sap.ui.base.Metadata;
              /**
               * Specifies the type of layout algorithm that defines the visual features and layout of the network graph.
               */
              getType(): any;
              /**
               * Specifies if this layouting algorithm distributes nodes into layers. Parent graph may change behaviour
               * based on this option.
               */
              isLayered(): boolean;
              /**
               * Executes the layouting algorithm.
               */
              layout(): sap.suite.ui.commons.networkgraph.layout.LayoutTask;
            }
            /**
             * @SINCE 1.50
             *
             * A layout task is a wrapper around Promise which allows the caller to terminate the task. A terminated
             * layout task should not modify the graph associated with it.
             */
            class LayoutTask extends sap.ui.base.Object {
              /**
               * Constructor for a new LayoutTask.
               */
              constructor(
                /**
                 * A function to be called from Promise main body. It gets
                 */
                fnPromiseCallback: Function
              );

              /**
               * Creates a new subclass of class sap.suite.ui.commons.networkgraph.layout.LayoutTask with name `sClassName`
               * and enriches it with the information contained in `oClassInfo`.
               *
               * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
               */
              // @ts-ignore
              static extend(
                /**
                 * Name of the class being created
                 */
                sClassName: string,
                /**
                 * Object literal with information about the class
                 */
                oClassInfo?: object,
                /**
                 * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
                 */
                FNMetaImpl?: Function
              ): Function;
              /**
               * Returns a metadata object for class sap.suite.ui.commons.networkgraph.layout.LayoutTask.
               */
              // @ts-ignore
              static getMetadata(): sap.ui.base.Metadata;
            }
            /**
             * @SINCE 1.50
             *
             * This is a simple layout algorithm that expects the positions of nodes to be already present. It only
             * creates line coordinates (see {@link sap.suite.ui.commons.networkgraph.Line#setCoordinates}).
             */
            class NoopLayout extends sap.suite.ui.commons.networkgraph.layout
              .LayoutAlgorithm {
              /**
               * Constructor for a new NoopLayout.
               */
              constructor();

              /**
               * Specifies the type of layout algorithm that defines the visual features and layout of the network graph.
               */
              getLayoutRenderType(): sap.suite.ui.commons.networkgraph.LayoutRenderType;
              /**
               * Executes the layout algorithm.
               */
              // @ts-ignore
              layout(): sap.suite.ui.commons.networkgraph.layout.LayoutTask;
            }
            /**
             * @SINCE 1.58
             *
             * This algorithm uses the klay.js algorithm to rearrange the graph in grid form. It's suitable for process
             * flows and tree-like graphs. It can be used for almost any graph.
             */
            class SwimLaneChainLayout extends sap.suite.ui.commons.networkgraph
              .layout.LayoutAlgorithm {
              /**
               * Constructor for a new SwimLaneChainLayout.
               */
              constructor();

              /**
               * In this override of the generic method for all layouts we want to avoid global margin.
               */
              // @ts-ignore
              _alignCoordinatesWithView(): void;
              /**
               * Specifies the type of layout algorithm that defines the visual features and layout of the network graph.
               */
              getLayoutRenderType(): sap.suite.ui.commons.networkgraph.LayoutRenderType;
              /**
               * Executes the layout algorithm.
               */
              // @ts-ignore
              layout(): sap.suite.ui.commons.networkgraph.layout.LayoutTask;
            }
            /**
             * @SINCE 1.63
             *
             * This algorithm rearranges the graph into two columns.
             */
            class TwoColumnsLayout extends sap.suite.ui.commons.networkgraph
              .layout.LayoutAlgorithm {
              /**
               * Constructor for a new TwoColumnsLayout.
               */
              constructor();

              /**
               * Specifies the type of layout algorithm that defines the visual features and layout of the network graph.
               */
              getLayoutRenderType(): sap.suite.ui.commons.networkgraph.LayoutRenderType;
              /**
               * Executes the layout algorithm.
               */
              // @ts-ignore
              layout(): sap.suite.ui.commons.networkgraph.layout.LayoutTask;
            }
          }

          namespace util {
            /**
             * @SINCE 1.58
             *
             * This algorithm uses Dijkstra's algorithm to compute the shortest possible paths from the starting point
             * node to all other nodes in the graph and arrange them accordingly.
             */
            class Dijkstra {
              /**
               * Constructor for a new Dijkstra's algorithm. The constructor computes the shortest paths to all nodes
               * in the network graph from given starting point node.
               */
              constructor(
                /**
                 * Graph to compute the paths in.
                 */
                oGraph: sap.suite.ui.commons.networkgraph.Graph,
                /**
                 * Node that serves as the starting point for computing the paths.
                 */
                oSourceNode: sap.suite.ui.commons.networkgraph.Node,
                /**
                 * Settings for the algorithm.
                 */
                oSettings?: {
                  /**
                   * Evaluation function for determining the value of a line. The function will receive the line to be evaluated
                   * as a parameter and must return a positive number representing its value (note that Dijkstra's algorithm
                   * cannot be used on negative values of lines). If this function is not passed as a parameter, the algorithm
                   * will consider the value of each line to be 1.
                   */
                  fnLineValue?: Function;
                  /**
                   * Makes the algorithm ignore line directions and treat the graph as non-oriented.
                   */
                  bIgnoreDirections?: boolean;
                  /**
                   * Makes the algorithm ignore collapsed and hidden nodes.
                   */
                  bIgnoreCollapsed?: boolean;
                }
              );

              /**
               * Retrieves the shortest path to the given node. Due to the nature of the algorithm, the path is returned
               * in reversed order. In most cases, each line has to be processed anyway, so the order is not important.
               * However, if you need to retrieve lines in the direct order, you can use the `Array.reverse()` method.
               */
              getShortestPathTo(
                /**
                 * Node to find shortest path to.
                 */
                oToNode: sap.suite.ui.commons.networkgraph.Node
              ): sap.suite.ui.commons.networkgraph.Line[];
            }
          }

          /**
           * @SINCE 1.50
           *
           * Holds information about one custom action button.
           */
          class ActionButton extends sap.ui.core.Element {
            /**
             * Constructor for a new ActionButton.
             *
             * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
             * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
             * of the syntax of the settings object.
             */
            constructor();

            /**
             * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.networkgraph.ActionButton`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.ActionButton` itself.
             *
             * This event is fired when the action button is clicked or tapped.
             */
            attachPress(
              /**
               * An application-specific payload object that will be passed to the event handler along with the event
               * object when firing the event
               */
              oData: object,
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.ActionButton`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.ActionButton;
            /**
             * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.suite.ui.commons.networkgraph.ActionButton`.
             *
             * The passed function and listener object must match the ones used for event registration.
             */
            detachPress(
              /**
               * The function to be called, when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object on which the given function had to be called
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.ActionButton;
            /**
             * Creates a new subclass of class sap.suite.ui.commons.networkgraph.ActionButton with name `sClassName`
             * and enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Fires event {@link #event:press press} to attached listeners.
             */
            firePress(
              /**
               * Parameters to pass along with the event
               */
              mParameters?: {
                buttonElement?: object;
              }
            ): sap.suite.ui.commons.networkgraph.ActionButton;
            /**
             * Gets current value of property {@link #getEnabled enabled}.
             *
             * Indicates whether the action button is enabled.
             *
             * Default value is `true`.
             */
            getEnabled(): boolean;
            /**
             * Gets current value of property {@link #getIcon icon}.
             *
             * The icon to be used for the custom action button.
             */
            getIcon(): string;
            /**
             * Returns a metadata object for class sap.suite.ui.commons.networkgraph.ActionButton.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Gets current value of property {@link #getPosition position}.
             *
             * Position of the action button. Available only for nodes.
             *
             * Default value is `Right`.
             */
            getPosition(): sap.suite.ui.commons.networkgraph.ActionButtonPosition;
            /**
             * Gets current value of property {@link #getTitle title}.
             *
             * Tooltip title for custom action button.
             */
            getTitle(): string;
            /**
             * Sets a new value for property {@link #getEnabled enabled}.
             *
             * Indicates whether the action button is enabled.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `true`.
             */
            setEnabled(
              /**
               * New value for property `enabled`
               */
              bEnabled: boolean
            ): sap.suite.ui.commons.networkgraph.ActionButton;
            /**
             * Sets a new value for property {@link #getIcon icon}.
             *
             * The icon to be used for the custom action button.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setIcon(
              /**
               * New value for property `icon`
               */
              sIcon: string
            ): sap.suite.ui.commons.networkgraph.ActionButton;
            /**
             * Sets a new value for property {@link #getPosition position}.
             *
             * Position of the action button. Available only for nodes.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `Right`.
             */
            setPosition(
              /**
               * New value for property `position`
               */
              sPosition: sap.suite.ui.commons.networkgraph.ActionButtonPosition
            ): sap.suite.ui.commons.networkgraph.ActionButton;
            /**
             * Sets a new value for property {@link #getTitle title}.
             *
             * Tooltip title for custom action button.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setTitle(
              /**
               * New value for property `title`
               */
              sTitle: string
            ): sap.suite.ui.commons.networkgraph.ActionButton;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.networkgraph.ActionButton`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.ActionButton` itself.
             *
             * This event is fired when the action button is clicked or tapped.
             */
            attachPress(
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.ActionButton`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.ActionButton;
          }
          /**
           * @SINCE 1.50
           *
           * Holds information about coordinates on a two-dimensional Cartesian plane.
           */
          class Coordinate extends sap.ui.core.Element {
            /**
             * Constructor for a new Coordinate.
             *
             * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
             * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
             * of the syntax of the settings object.
             */
            constructor();

            /**
             * Creates a new subclass of class sap.suite.ui.commons.networkgraph.Coordinate with name `sClassName` and
             * enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Returns a metadata object for class sap.suite.ui.commons.networkgraph.Coordinate.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Gets current value of property {@link #getX x}.
             *
             * The value of the x coordinate.
             *
             * Default value is `undefined`.
             */
            getX(): number;
            /**
             * Gets current value of property {@link #getY y}.
             *
             * The value of the y coordinate.
             *
             * Default value is `undefined`.
             */
            getY(): number;
            /**
             * Sets a new value for property {@link #getX x}.
             *
             * The value of the x coordinate.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `undefined`.
             */
            setX(
              /**
               * New value for property `x`
               */
              fX: number
            ): sap.suite.ui.commons.networkgraph.Coordinate;
            /**
             * Sets a new value for property {@link #getY y}.
             *
             * The value of the y coordinate.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `undefined`.
             */
            setY(
              /**
               * New value for property `y`
               */
              fY: number
            ): sap.suite.ui.commons.networkgraph.Coordinate;
          }
          /**
           * @SINCE 1.50
           *
           * Holds details of an attribute used in the graph.
           */
          class ElementAttribute extends sap.ui.core.Element {
            /**
             * Constructor for a new ElementAttribute.
             *
             * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
             * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
             * of the syntax of the settings object.
             */
            constructor();

            /**
             * Creates a new subclass of class sap.suite.ui.commons.networkgraph.ElementAttribute with name `sClassName`
             * and enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Gets current value of property {@link #getIcon icon}.
             *
             * Icon assigned to the attribute.
             *
             * Default value is `empty string`.
             */
            getIcon(): string;
            /**
             * Gets current value of property {@link #getLabel label}.
             *
             * Label of the attribute. If set to null, the label is not displayed.
             */
            getLabel(): string;
            /**
             * Gets current value of property {@link #getLabelStatus labelStatus}.
             *
             * Name of custom status that can change the color of the label. Note that only contentColor, selectedContentColor
             * and hoverContentColor are relevant to this attribute.
             */
            getLabelStatus(): string;
            /**
             * Returns a metadata object for class sap.suite.ui.commons.networkgraph.ElementAttribute.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Gets current value of property {@link #getValue value}.
             *
             * Value of the attribute. If set to null, the value is not displayed.
             */
            getValue(): string;
            /**
             * Gets current value of property {@link #getValueStatus valueStatus}.
             *
             * Name of custom status that can change the color of the value. Note that only contentColor, selectedContentColor
             * and hoverContentColor are relevant to this attribute.
             */
            getValueStatus(): string;
            /**
             * Gets current value of property {@link #getVisible visible}.
             *
             * Defines whether the attribute is visible. This option is used for rectangular nodes. Visible attributes
             * are displayed right inside the rectangular node. The node's details popup shows all attributes, including
             * the invisible ones.
             *
             * Default value is `true`.
             */
            getVisible(): boolean;
            /**
             * Sets a new value for property {@link #getIcon icon}.
             *
             * Icon assigned to the attribute.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `empty string`.
             */
            setIcon(
              /**
               * New value for property `icon`
               */
              sIcon: string
            ): sap.suite.ui.commons.networkgraph.ElementAttribute;
            /**
             * Sets a new value for property {@link #getLabel label}.
             *
             * Label of the attribute. If set to null, the label is not displayed.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setLabel(
              /**
               * New value for property `label`
               */
              sLabel: string
            ): sap.suite.ui.commons.networkgraph.ElementAttribute;
            /**
             * Sets a new value for property {@link #getLabelStatus labelStatus}.
             *
             * Name of custom status that can change the color of the label. Note that only contentColor, selectedContentColor
             * and hoverContentColor are relevant to this attribute.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setLabelStatus(
              /**
               * New value for property `labelStatus`
               */
              sLabelStatus: string
            ): sap.suite.ui.commons.networkgraph.ElementAttribute;
            /**
             * Sets a new value for property {@link #getValue value}.
             *
             * Value of the attribute. If set to null, the value is not displayed.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setValue(
              /**
               * New value for property `value`
               */
              sValue: string
            ): sap.suite.ui.commons.networkgraph.ElementAttribute;
            /**
             * Sets a new value for property {@link #getValueStatus valueStatus}.
             *
             * Name of custom status that can change the color of the value. Note that only contentColor, selectedContentColor
             * and hoverContentColor are relevant to this attribute.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setValueStatus(
              /**
               * New value for property `valueStatus`
               */
              sValueStatus: string
            ): sap.suite.ui.commons.networkgraph.ElementAttribute;
            /**
             * Sets a new value for property {@link #getVisible visible}.
             *
             * Defines whether the attribute is visible. This option is used for rectangular nodes. Visible attributes
             * are displayed right inside the rectangular node. The node's details popup shows all attributes, including
             * the invisible ones.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `true`.
             */
            setVisible(
              /**
               * New value for property `visible`
               */
              bVisible: boolean
            ): sap.suite.ui.commons.networkgraph.ElementAttribute;
          }
          /**
           * @SINCE 1.50
           *
           * ElementBase class
           */
          class ElementBase extends sap.suite.ui.commons.networkgraph.SvgBase {
            /**
             * Constructor for a new ElementBase.
             *
             * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
             * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
             * of the syntax of the settings object.
             */
            constructor();

            /**
             * Adds some attribute to the aggregation {@link #getAttributes attributes}.
             */
            addAttribute(
              /**
               * The attribute to add; if empty, nothing is inserted
               */
              oAttribute: sap.suite.ui.commons.networkgraph.ElementAttribute
            ): sap.suite.ui.commons.networkgraph.ElementBase;
            /**
             * Destroys all the attributes in the aggregation {@link #getAttributes attributes}.
             */
            destroyAttributes(): sap.suite.ui.commons.networkgraph.ElementBase;
            /**
             * Creates a new subclass of class sap.suite.ui.commons.networkgraph.ElementBase with name `sClassName`
             * and enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.networkgraph.SvgBase.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Gets content of aggregation {@link #getAttributes attributes}.
             *
             * Attributes associated with the element.
             */
            getAttributes(): sap.suite.ui.commons.networkgraph.ElementAttribute[];
            /**
             * Gets current value of property {@link #getDescription description}.
             *
             * Description.
             */
            getDescription(): string;
            /**
             * Returns a metadata object for class sap.suite.ui.commons.networkgraph.ElementBase.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Gets current value of property {@link #getStatus status}.
             *
             * Status associated with this element. You can use any of the custom statuses defined by the `statuses`
             * aggregation in the {@link sap.suite.ui.commons.networkgraph.Graph} or use the default statuses provided
             * by {@link sap.suite.ui.commons.networkgraph.ElementStatus}.
             *
             * Default value is `sap.suite.ui.commons.networkgraph.ElementStatus.Standard`.
             */
            getStatus(): string;
            /**
             * Gets current value of property {@link #getTitle title}.
             *
             * A title associated with the element.
             */
            getTitle(): string;
            /**
             * Checks for the provided `sap.suite.ui.commons.networkgraph.ElementAttribute` in the aggregation {@link
             * #getAttributes attributes}. and returns its index if found or -1 otherwise.
             */
            indexOfAttribute(
              /**
               * The attribute whose index is looked for
               */
              oAttribute: sap.suite.ui.commons.networkgraph.ElementAttribute
            ): number;
            /**
             * Inserts a attribute into the aggregation {@link #getAttributes attributes}.
             */
            insertAttribute(
              /**
               * The attribute to insert; if empty, nothing is inserted
               */
              oAttribute: sap.suite.ui.commons.networkgraph.ElementAttribute,
              /**
               * The `0`-based index the attribute should be inserted at; for a negative value of `iIndex`, the attribute
               * is inserted at position 0; for a value greater than the current size of the aggregation, the attribute
               * is inserted at the last position
               */
              iIndex: number
            ): sap.suite.ui.commons.networkgraph.ElementBase;
            /**
             * Removes all the controls from the aggregation {@link #getAttributes attributes}.
             *
             * Additionally, it unregisters them from the hosting UIArea.
             */
            removeAllAttributes(): sap.suite.ui.commons.networkgraph.ElementAttribute[];
            /**
             * Removes a attribute from the aggregation {@link #getAttributes attributes}.
             */
            removeAttribute(
              /**
               * The attribute to remove or its index or id
               */
              vAttribute:
                | number
                | string
                | sap.suite.ui.commons.networkgraph.ElementAttribute
            ): sap.suite.ui.commons.networkgraph.ElementAttribute;
            /**
             * Scrolls the view port to show this element
             */
            scrollToElement(): void;
            /**
             * Sets a new value for property {@link #getDescription description}.
             *
             * Description.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setDescription(
              /**
               * New value for property `description`
               */
              sDescription: string
            ): sap.suite.ui.commons.networkgraph.ElementBase;
            /**
             * Sets a new value for property {@link #getStatus status}.
             *
             * Status associated with this element. You can use any of the custom statuses defined by the `statuses`
             * aggregation in the {@link sap.suite.ui.commons.networkgraph.Graph} or use the default statuses provided
             * by {@link sap.suite.ui.commons.networkgraph.ElementStatus}.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `sap.suite.ui.commons.networkgraph.ElementStatus.Standard`.
             */
            setStatus(
              /**
               * New value for property `status`
               */
              sStatus: string
            ): sap.suite.ui.commons.networkgraph.ElementBase;
            /**
             * Sets a new value for property {@link #getTitle title}.
             *
             * A title associated with the element.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setTitle(
              /**
               * New value for property `title`
               */
              sTitle: string
            ): sap.suite.ui.commons.networkgraph.ElementBase;
          }
          /**
           * @SINCE 1.50
           *
           * The network graph control allows you to display data as a network of nodes connected by lines. The nodes
           * can be circular or rectangular and can be joined into groups. You can define custom attributes for nodes
           * and groups of nodes as well as apply layout algorithms that define the graph's appearance.
           */
          class Graph extends sap.suite.ui.commons.networkgraph.SvgBase {
            /**
             * Constructor for a new Graph.
             *
             * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
             * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
             * of the syntax of the settings object.
             * See:
             * 	{@link topic:b5649c8de7f74739b66747dcc9356d0b Network Graph}
             * 	{@link fiori:https://experience.sap.com/fiori-design-web/network-graph/ Network Graph}
             */
            constructor();

            /**
             * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
             */
            addAriaDescribedBy(
              /**
               * The ariaDescribedBy to add; if empty, nothing is inserted
               */
              vAriaDescribedBy: sap.ui.core.ID | sap.ui.core.Control
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
             */
            addAriaLabelledBy(
              /**
               * The ariaLabelledBy to add; if empty, nothing is inserted
               */
              vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Adds some group to the aggregation {@link #getGroups groups}.
             */
            addGroup(
              /**
               * The group to add; if empty, nothing is inserted
               */
              oGroup: sap.suite.ui.commons.networkgraph.Group
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Adds some line to the aggregation {@link #getLines lines}.
             */
            addLine(
              /**
               * The line to add; if empty, nothing is inserted
               */
              oLine: sap.suite.ui.commons.networkgraph.Line
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Adds some node to the aggregation {@link #getNodes nodes}.
             */
            addNode(
              /**
               * The node to add; if empty, nothing is inserted
               */
              oNode: sap.suite.ui.commons.networkgraph.Node
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Adds some status to the aggregation {@link #getStatuses statuses}.
             */
            addStatus(
              /**
               * The status to add; if empty, nothing is inserted
               */
              oStatus: sap.suite.ui.commons.networkgraph.Status
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:afterLayouting afterLayouting} event of this
             * `sap.suite.ui.commons.networkgraph.Graph`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Graph` itself.
             *
             * This event is fired when the layouting algorithm has finished arranging the graph and SVG rendering starts.
             */
            attachAfterLayouting(
              /**
               * An application-specific payload object that will be passed to the event handler along with the event
               * object when firing the event
               */
              oData: object,
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Graph`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:beforeLayouting beforeLayouting} event of this
             * `sap.suite.ui.commons.networkgraph.Graph`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Graph` itself.
             *
             * This event is fired just before the layout computation begins.
             */
            attachBeforeLayouting(
              /**
               * An application-specific payload object that will be passed to the event handler along with the event
               * object when firing the event
               */
              oData: object,
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Graph`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:failure failure} event of this `sap.suite.ui.commons.networkgraph.Graph`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Graph` itself.
             *
             * This event is fired when an error has occured and the graph cannot be rendered properly.
             */
            attachFailure(
              /**
               * An application-specific payload object that will be passed to the event handler along with the event
               * object when firing the event
               */
              oData: object,
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Graph`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:graphReady graphReady} event of this `sap.suite.ui.commons.networkgraph.Graph`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Graph` itself.
             *
             * This event is fired when the graph is fully rendered.
             */
            attachGraphReady(
              /**
               * An application-specific payload object that will be passed to the event handler along with the event
               * object when firing the event
               */
              oData: object,
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Graph`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:search search} event of this `sap.suite.ui.commons.networkgraph.Graph`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Graph` itself.
             *
             * This event is fired when the user enters a keyword into the search field.
             */
            attachSearch(
              /**
               * An application-specific payload object that will be passed to the event handler along with the event
               * object when firing the event
               */
              oData: object,
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Graph`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:searchSuggest searchSuggest} event of this `sap.suite.ui.commons.networkgraph.Graph`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Graph` itself.
             *
             * This event is fired when the user runs a search and there is a matching term found among the suggestions.
             */
            attachSearchSuggest(
              /**
               * An application-specific payload object that will be passed to the event handler along with the event
               * object when firing the event
               */
              oData: object,
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Graph`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
             * `sap.suite.ui.commons.networkgraph.Graph`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Graph` itself.
             *
             * This event is fired when a selection of elements in the graph changes.
             */
            attachSelectionChange(
              /**
               * An application-specific payload object that will be passed to the event handler along with the event
               * object when firing the event
               */
              oData: object,
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Graph`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:zoomChanged zoomChanged} event of this `sap.suite.ui.commons.networkgraph.Graph`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Graph` itself.
             *
             * This event is fired when zooming in or out.
             */
            attachZoomChanged(
              /**
               * An application-specific payload object that will be passed to the event handler along with the event
               * object when firing the event
               */
              oData: object,
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Graph`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Deselects all currently selected items.
             */
            deselect(
              /**
               * Indicates whether the `selecitonChange` event should be fired
               */
              bSuppressEvent: boolean
            ): any;
            /**
             * This method removes all elements (lines, nodes, groups) without triggering invalidation. You should use
             * this method when changing graph data that uses data binding, for example with {@link sap.suite.ui.commons.networkgraph.Graph#setModel}.
             */
            destroyAllElements(): void;
            /**
             * Destroys all the groups in the aggregation {@link #getGroups groups}.
             */
            destroyGroups(): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Destroys the layoutAlgorithm in the aggregation {@link #getLayoutAlgorithm layoutAlgorithm}.
             */
            destroyLayoutAlgorithm(): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Destroys the legend in the aggregation {@link #getLegend legend}.
             */
            destroyLegend(): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Destroys all the lines in the aggregation {@link #getLines lines}.
             */
            destroyLines(): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Destroys all the nodes in the aggregation {@link #getNodes nodes}.
             */
            destroyNodes(): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Destroys all the statuses in the aggregation {@link #getStatuses statuses}.
             */
            destroyStatuses(): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Detaches event handler `fnFunction` from the {@link #event:afterLayouting afterLayouting} event of this
             * `sap.suite.ui.commons.networkgraph.Graph`.
             *
             * The passed function and listener object must match the ones used for event registration.
             */
            detachAfterLayouting(
              /**
               * The function to be called, when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object on which the given function had to be called
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Detaches event handler `fnFunction` from the {@link #event:beforeLayouting beforeLayouting} event of
             * this `sap.suite.ui.commons.networkgraph.Graph`.
             *
             * The passed function and listener object must match the ones used for event registration.
             */
            detachBeforeLayouting(
              /**
               * The function to be called, when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object on which the given function had to be called
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Detaches event handler `fnFunction` from the {@link #event:failure failure} event of this `sap.suite.ui.commons.networkgraph.Graph`.
             *
             * The passed function and listener object must match the ones used for event registration.
             */
            detachFailure(
              /**
               * The function to be called, when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object on which the given function had to be called
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Detaches event handler `fnFunction` from the {@link #event:graphReady graphReady} event of this `sap.suite.ui.commons.networkgraph.Graph`.
             *
             * The passed function and listener object must match the ones used for event registration.
             */
            detachGraphReady(
              /**
               * The function to be called, when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object on which the given function had to be called
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Detaches event handler `fnFunction` from the {@link #event:search search} event of this `sap.suite.ui.commons.networkgraph.Graph`.
             *
             * The passed function and listener object must match the ones used for event registration.
             */
            detachSearch(
              /**
               * The function to be called, when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object on which the given function had to be called
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Detaches event handler `fnFunction` from the {@link #event:searchSuggest searchSuggest} event of this
             * `sap.suite.ui.commons.networkgraph.Graph`.
             *
             * The passed function and listener object must match the ones used for event registration.
             */
            detachSearchSuggest(
              /**
               * The function to be called, when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object on which the given function had to be called
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Detaches event handler `fnFunction` from the {@link #event:selectionChange selectionChange} event of
             * this `sap.suite.ui.commons.networkgraph.Graph`.
             *
             * The passed function and listener object must match the ones used for event registration.
             */
            detachSelectionChange(
              /**
               * The function to be called, when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object on which the given function had to be called
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Detaches event handler `fnFunction` from the {@link #event:zoomChanged zoomChanged} event of this `sap.suite.ui.commons.networkgraph.Graph`.
             *
             * The passed function and listener object must match the ones used for event registration.
             */
            detachZoomChanged(
              /**
               * The function to be called, when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object on which the given function had to be called
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Creates a new subclass of class sap.suite.ui.commons.networkgraph.Graph with name `sClassName` and enriches
             * it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.networkgraph.SvgBase.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Fires event {@link #event:afterLayouting afterLayouting} to attached listeners.
             */
            fireAfterLayouting(
              /**
               * Parameters to pass along with the event
               */
              mParameters?: object
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Fires event {@link #event:beforeLayouting beforeLayouting} to attached listeners.
             */
            fireBeforeLayouting(
              /**
               * Parameters to pass along with the event
               */
              mParameters?: object
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Fires event {@link #event:failure failure} to attached listeners.
             */
            fireFailure(
              /**
               * Parameters to pass along with the event
               */
              mParameters?: {
                /**
                 * Type of an error. This parameter can be used for decision making in the calling code.
                 */
                type?: string;
                /**
                 * A human readable message with a description of what went wrong.
                 */
                message?: string;
              }
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Fires event {@link #event:graphReady graphReady} to attached listeners.
             */
            fireGraphReady(
              /**
               * Parameters to pass along with the event
               */
              mParameters?: object
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Fires event {@link #event:search search} to attached listeners.
             */
            fireSearch(
              /**
               * Parameters to pass along with the event
               */
              mParameters?: {
                term?: string;

                key?: string;
              }
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Fires event {@link #event:searchSuggest searchSuggest} to attached listeners.
             */
            fireSearchSuggest(
              /**
               * Parameters to pass along with the event
               */
              mParameters?: {
                term?: string;
              }
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Fires event {@link #event:selectionChange selectionChange} to attached listeners.
             */
            fireSelectionChange(
              /**
               * Parameters to pass along with the event
               */
              mParameters?: {
                /**
                 * A list of elements that changed the state of the selection. To determine the new state, use the `getSelected()`
                 * method.
                 */
                items?: sap.suite.ui.commons.networkgraph.ElementBase[];
              }
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Fires event {@link #event:zoomChanged zoomChanged} to attached listeners.
             */
            fireZoomChanged(
              /**
               * Parameters to pass along with the event
               */
              mParameters?: object
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy
             * ariaDescribedBy}.
             */
            getAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
             * ariaLabelledBy}.
             */
            getAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * Gets current value of property {@link #getBackgroundColor backgroundColor}.
             *
             * Background color.
             *
             * Default value is `White`.
             */
            getBackgroundColor(): sap.suite.ui.commons.networkgraph.BackgroundColor;
            /**
             * Gets current value of property {@link #getBackgroundImage backgroundImage}.
             *
             * An image to be rendered on the background.
             */
            getBackgroundImage(): sap.ui.core.URI;
            /**
             * Returns current zoom level.
             */
            getCurrentZoomLevel(): number;
            /**
             * Gets current value of property {@link #getEnableWheelZoom enableWheelZoom}.
             *
             * If this property is set to `false`, zooming in or out using the mouse wheel is available only when the
             * Ctrl key is pressed.
             *
             * Default value is `true`.
             */
            getEnableWheelZoom(): boolean;
            /**
             * Gets current value of property {@link #getEnableZoom enableZoom}.
             *
             * If this property is set to `false`, zoom buttons are hidden, and the mouse wheel can be used for scrolling
             * only.
             *
             * Default value is `true`.
             */
            getEnableZoom(): boolean;
            /**
             * Gets content of aggregation {@link #getGroups groups}.
             *
             * Holds a list of groups used in the graph.
             */
            getGroups(): sap.suite.ui.commons.networkgraph.Group[];
            /**
             * Gets current value of property {@link #getHeight height}.
             *
             * The height of the graph. If this property is set to 'auto', the network graph will be resized to fit
             * the height of its content, regardless of the height of the parent control.
             *
             * Default value is `100%`.
             */
            getHeight(): sap.ui.core.CSSSize;
            /**
             * Gets content of aggregation {@link #getLayoutAlgorithm layoutAlgorithm}.
             *
             * Defines the layout algorithm to be used. If not defined, {@link sap.suite.ui.commons.networkgraph.layout.LayeredLayout}
             * is used.
             */
            getLayoutAlgorithm(): sap.suite.ui.commons.networkgraph.layout.LayoutAlgorithm;
            /**
             * Gets content of aggregation {@link #getLegend legend}.
             *
             * A custom legend to be rendered instead of the autogenerated one.
             */
            getLegend(): sap.ui.core.Control;
            /**
             * Gets content of aggregation {@link #getLines lines}.
             *
             * Holds the lines to be displayed in the graph.
             */
            getLines(): sap.suite.ui.commons.networkgraph.Line[];
            /**
             * Returns a metadata object for class sap.suite.ui.commons.networkgraph.Graph.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Gets current value of property {@link #getNoData noData}.
             *
             * Set this property to `true` if you want to notify the user that no data has been loaded.
             *  There is no internal check for data received, so we recommend that you make sure you set it correctly
             * when there is no data received, not just when the application is waiting for data to be retrieved.
             *
             * Default value is `false`.
             */
            getNoData(): boolean;
            /**
             * Gets current value of property {@link #getNoDataText noDataText}.
             *
             * Text displayed when no data is set.
             *  This property takes effect only when the `noData` property is set to `true`.
             *
             * Default value is `empty string`.
             */
            getNoDataText(): string;
            /**
             * Returns a node by its key.
             */
            getNodeByKey(
              /**
               * Node's key
               */
              sKey: string
            ): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Gets content of aggregation {@link #getNodes nodes}.
             *
             * Holds the nodes to be displayed in the graph.
             */
            getNodes(): sap.suite.ui.commons.networkgraph.Node[];
            /**
             * Gets current value of property {@link #getOrientation orientation}.
             *
             * Orientation of the graph flow. This property is used by layout algorithms.
             *
             * Default value is `LeftRight`.
             */
            getOrientation(): sap.suite.ui.commons.networkgraph.Orientation;
            /**
             * Gets current value of property {@link #getRenderType renderType}.
             *
             * Nodes rendering type. For optimal performance and usability, it is recommended that you use HTML whenever
             * possible.
             *
             * Default value is `Html`.
             */
            getRenderType(): sap.suite.ui.commons.networkgraph.RenderType;
            /**
             * Gets content of aggregation {@link #getStatuses statuses}.
             *
             * Holds a collection of custom statuses that can be used to assign custom colors to nodes, lines, and groups
             * of nodes, based on their status.
             */
            getStatuses(): sap.suite.ui.commons.networkgraph.Status[];
            /**
             * Returns a toolbar instance to allow its customization.
             */
            getToolbar(): sap.m.OverflowToolbar;
            /**
             * Gets current value of property {@link #getWidth width}.
             *
             * The width of the graph. If this property is set to 'auto', the network graph will be resized to fit the
             * width of its content, regardless of the width of the parent control.
             *
             * Default value is `100%`.
             */
            getWidth(): sap.ui.core.CSSSize;
            /**
             * Returns predefined zoom level steps used by the default zoom functionality.
             */
            getZoomLevelMilestones(): number[];
            /**
             * Checks for the provided `sap.suite.ui.commons.networkgraph.Group` in the aggregation {@link #getGroups
             * groups}. and returns its index if found or -1 otherwise.
             */
            indexOfGroup(
              /**
               * The group whose index is looked for
               */
              oGroup: sap.suite.ui.commons.networkgraph.Group
            ): number;
            /**
             * Checks for the provided `sap.suite.ui.commons.networkgraph.Line` in the aggregation {@link #getLines
             * lines}. and returns its index if found or -1 otherwise.
             */
            indexOfLine(
              /**
               * The line whose index is looked for
               */
              oLine: sap.suite.ui.commons.networkgraph.Line
            ): number;
            /**
             * Checks for the provided `sap.suite.ui.commons.networkgraph.Node` in the aggregation {@link #getNodes
             * nodes}. and returns its index if found or -1 otherwise.
             */
            indexOfNode(
              /**
               * The node whose index is looked for
               */
              oNode: sap.suite.ui.commons.networkgraph.Node
            ): number;
            /**
             * Checks for the provided `sap.suite.ui.commons.networkgraph.Status` in the aggregation {@link #getStatuses
             * statuses}. and returns its index if found or -1 otherwise.
             */
            indexOfStatus(
              /**
               * The status whose index is looked for
               */
              oStatus: sap.suite.ui.commons.networkgraph.Status
            ): number;
            /**
             * Inserts a group into the aggregation {@link #getGroups groups}.
             */
            insertGroup(
              /**
               * The group to insert; if empty, nothing is inserted
               */
              oGroup: sap.suite.ui.commons.networkgraph.Group,
              /**
               * The `0`-based index the group should be inserted at; for a negative value of `iIndex`, the group is inserted
               * at position 0; for a value greater than the current size of the aggregation, the group is inserted at
               * the last position
               */
              iIndex: number
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Inserts a line into the aggregation {@link #getLines lines}.
             */
            insertLine(
              /**
               * The line to insert; if empty, nothing is inserted
               */
              oLine: sap.suite.ui.commons.networkgraph.Line,
              /**
               * The `0`-based index the line should be inserted at; for a negative value of `iIndex`, the line is inserted
               * at position 0; for a value greater than the current size of the aggregation, the line is inserted at
               * the last position
               */
              iIndex: number
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Inserts a node into the aggregation {@link #getNodes nodes}.
             */
            insertNode(
              /**
               * The node to insert; if empty, nothing is inserted
               */
              oNode: sap.suite.ui.commons.networkgraph.Node,
              /**
               * The `0`-based index the node should be inserted at; for a negative value of `iIndex`, the node is inserted
               * at position 0; for a value greater than the current size of the aggregation, the node is inserted at
               * the last position
               */
              iIndex: number
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Inserts a status into the aggregation {@link #getStatuses statuses}.
             */
            insertStatus(
              /**
               * The status to insert; if empty, nothing is inserted
               */
              oStatus: sap.suite.ui.commons.networkgraph.Status,
              /**
               * The `0`-based index the status should be inserted at; for a negative value of `iIndex`, the status is
               * inserted at position 0; for a value greater than the current size of the aggregation, the status is inserted
               * at the last position
               */
              iIndex: number
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Returns `true` if the graph is in full screen mode.
             */
            isFullScreen(): void;
            /**
             * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
             */
            removeAllAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
             */
            removeAllAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * Removes all the controls from the aggregation {@link #getGroups groups}.
             *
             * Additionally, it unregisters them from the hosting UIArea.
             */
            removeAllGroups(): sap.suite.ui.commons.networkgraph.Group[];
            /**
             * Removes all the controls from the aggregation {@link #getLines lines}.
             *
             * Additionally, it unregisters them from the hosting UIArea.
             */
            removeAllLines(): sap.suite.ui.commons.networkgraph.Line[];
            /**
             * Removes all the controls from the aggregation {@link #getNodes nodes}.
             *
             * Additionally, it unregisters them from the hosting UIArea.
             */
            removeAllNodes(): sap.suite.ui.commons.networkgraph.Node[];
            /**
             * Removes all the controls from the aggregation {@link #getStatuses statuses}.
             *
             * Additionally, it unregisters them from the hosting UIArea.
             */
            removeAllStatuses(): sap.suite.ui.commons.networkgraph.Status[];
            /**
             * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
             */
            removeAriaDescribedBy(
              /**
               * The ariaDescribedBy to be removed or its index or ID
               */
              vAriaDescribedBy: number | sap.ui.core.ID | sap.ui.core.Control
            ): sap.ui.core.ID;
            /**
             * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
             */
            removeAriaLabelledBy(
              /**
               * The ariaLabelledBy to be removed or its index or ID
               */
              vAriaLabelledBy: number | sap.ui.core.ID | sap.ui.core.Control
            ): sap.ui.core.ID;
            /**
             * Removes a group from the aggregation {@link #getGroups groups}.
             */
            removeGroup(
              /**
               * The group to remove or its index or id
               */
              vGroup: number | string | sap.suite.ui.commons.networkgraph.Group
            ): sap.suite.ui.commons.networkgraph.Group;
            /**
             * Removes a line from the aggregation {@link #getLines lines}.
             */
            removeLine(
              /**
               * The line to remove or its index or id
               */
              vLine: number | string | sap.suite.ui.commons.networkgraph.Line
            ): sap.suite.ui.commons.networkgraph.Line;
            /**
             * Removes a node from the aggregation {@link #getNodes nodes}.
             */
            removeNode(
              /**
               * The node to remove or its index or id
               */
              vNode: number | string | sap.suite.ui.commons.networkgraph.Node
            ): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Removes a status from the aggregation {@link #getStatuses statuses}.
             */
            removeStatus(
              /**
               * The status to remove or its index or id
               */
              vStatus:
                | number
                | string
                | sap.suite.ui.commons.networkgraph.Status
            ): sap.suite.ui.commons.networkgraph.Status;
            /**
             * Scrolls to the element set in the parameter.
             */
            scrollToElement(
              /**
               * Element to scroll to
               */
              oElement: Object
            ): void;
            /**
             * Sets a new value for property {@link #getBackgroundColor backgroundColor}.
             *
             * Background color.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `White`.
             */
            setBackgroundColor(
              /**
               * New value for property `backgroundColor`
               */
              sBackgroundColor: sap.suite.ui.commons.networkgraph.BackgroundColor
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Sets a new value for property {@link #getBackgroundImage backgroundImage}.
             *
             * An image to be rendered on the background.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setBackgroundImage(
              /**
               * New value for property `backgroundImage`
               */
              sBackgroundImage: sap.ui.core.URI
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Sets current zoom level.
             */
            setCurrentZoomLevel(
              /**
               * New zoom level
               */
              zoomLevel: Number
            ): void;
            /**
             * Sets a custom label for the legend.
             */
            setCustomLegendLabel(
              /**
               * Parameters for this method
               */
              mArguments: {
                /**
                 * New text for the legend label
                 */
                label: string;
                /**
                 * Status the custom text will be assigned to. Works only for the default legend, not when the Legend aggregation
                 * is used
                 */
                status: sap.suite.ui.commons.networkgraph.ElementStatus;
                /**
                 * True for a legend describing nodes. True by default if 'isLine' and 'isGroup' are false.
                 */
                isNode: boolean;
                /**
                 * True for a legend describing lines. By default true if 'isNode' is false.
                 */
                isLine: boolean;
                /**
                 * True for a legend describing groups. False by default.
                 */
                isGroup: boolean;
              }
            ): void;
            /**
             * Sets a new value for property {@link #getEnableWheelZoom enableWheelZoom}.
             *
             * If this property is set to `false`, zooming in or out using the mouse wheel is available only when the
             * Ctrl key is pressed.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `true`.
             */
            setEnableWheelZoom(
              /**
               * New value for property `enableWheelZoom`
               */
              bEnableWheelZoom: boolean
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Sets a new value for property {@link #getEnableZoom enableZoom}.
             *
             * If this property is set to `false`, zoom buttons are hidden, and the mouse wheel can be used for scrolling
             * only.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `true`.
             */
            setEnableZoom(
              /**
               * New value for property `enableZoom`
               */
              bEnableZoom: boolean
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Sets a new value for property {@link #getHeight height}.
             *
             * The height of the graph. If this property is set to 'auto', the network graph will be resized to fit
             * the height of its content, regardless of the height of the parent control.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `100%`.
             */
            setHeight(
              /**
               * New value for property `height`
               */
              sHeight: sap.ui.core.CSSSize
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Sets the aggregated {@link #getLayoutAlgorithm layoutAlgorithm}.
             */
            setLayoutAlgorithm(
              /**
               * The layoutAlgorithm to set
               */
              oLayoutAlgorithm: sap.suite.ui.commons.networkgraph.layout.LayoutAlgorithm
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Sets the aggregated {@link #getLegend legend}.
             */
            setLegend(
              /**
               * The legend to set
               */
              oLegend: sap.ui.core.Control
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Sets a new value for property {@link #getNoData noData}.
             *
             * Set this property to `true` if you want to notify the user that no data has been loaded.
             *  There is no internal check for data received, so we recommend that you make sure you set it correctly
             * when there is no data received, not just when the application is waiting for data to be retrieved.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `false`.
             */
            setNoData(
              /**
               * New value for property `noData`
               */
              bNoData: boolean
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Sets a new value for property {@link #getNoDataText noDataText}.
             *
             * Text displayed when no data is set.
             *  This property takes effect only when the `noData` property is set to `true`.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `empty string`.
             */
            setNoDataText(
              /**
               * New value for property `noDataText`
               */
              sNoDataText: string
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Sets a new value for property {@link #getOrientation orientation}.
             *
             * Orientation of the graph flow. This property is used by layout algorithms.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `LeftRight`.
             */
            setOrientation(
              /**
               * New value for property `orientation`
               */
              sOrientation: sap.suite.ui.commons.networkgraph.Orientation
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Sets a new value for property {@link #getRenderType renderType}.
             *
             * Nodes rendering type. For optimal performance and usability, it is recommended that you use HTML whenever
             * possible.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `Html`.
             */
            setRenderType(
              /**
               * New value for property `renderType`
               */
              sRenderType: sap.suite.ui.commons.networkgraph.RenderType
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Sets custom search suggestions.
             */
            setSearchSuggestionItems(
              /**
               * Array with suggestion items ({@link sap.m.SuggestionItem}) to display when the user runs a search.
               */
              aItems: any
            ): void;
            /**
             * Sets a new value for property {@link #getWidth width}.
             *
             * The width of the graph. If this property is set to 'auto', the network graph will be resized to fit the
             * width of its content, regardless of the width of the parent control.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `100%`.
             */
            setWidth(
              /**
               * New value for property `width`
               */
              sWidth: sap.ui.core.CSSSize
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Toggles full screen mode.
             */
            toggleFullScreen(): void;
            /**
             * Updates the legend.
             */
            updateLegend(): void;
            /**
             * Zooms in or out of the graph.
             */
            zoom(
              /**
               * Map which contains following parameters properties:
               */
              mParameters: {
                /**
                 * x position from/to which the zoom should happen
                 */
                x?: number;
                /**
                 * y position from/to which the zoom should happen
                 */
                y?: number;
                /**
                 * whether to zoom in or out
                 */
                zoomin?: boolean;
                /**
                 * zoom level in percents, parameter zoomin ignored in this case
                 */
                zoomLevel?: number;
              }
            ): void;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:afterLayouting afterLayouting} event of this
             * `sap.suite.ui.commons.networkgraph.Graph`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Graph` itself.
             *
             * This event is fired when the layouting algorithm has finished arranging the graph and SVG rendering starts.
             */
            attachAfterLayouting(
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Graph`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:beforeLayouting beforeLayouting} event of this
             * `sap.suite.ui.commons.networkgraph.Graph`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Graph` itself.
             *
             * This event is fired just before the layout computation begins.
             */
            attachBeforeLayouting(
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Graph`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:failure failure} event of this `sap.suite.ui.commons.networkgraph.Graph`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Graph` itself.
             *
             * This event is fired when an error has occured and the graph cannot be rendered properly.
             */
            attachFailure(
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Graph`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:graphReady graphReady} event of this `sap.suite.ui.commons.networkgraph.Graph`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Graph` itself.
             *
             * This event is fired when the graph is fully rendered.
             */
            attachGraphReady(
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Graph`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:search search} event of this `sap.suite.ui.commons.networkgraph.Graph`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Graph` itself.
             *
             * This event is fired when the user enters a keyword into the search field.
             */
            attachSearch(
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Graph`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:searchSuggest searchSuggest} event of this `sap.suite.ui.commons.networkgraph.Graph`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Graph` itself.
             *
             * This event is fired when the user runs a search and there is a matching term found among the suggestions.
             */
            attachSearchSuggest(
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Graph`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
             * `sap.suite.ui.commons.networkgraph.Graph`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Graph` itself.
             *
             * This event is fired when a selection of elements in the graph changes.
             */
            attachSelectionChange(
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Graph`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Graph;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:zoomChanged zoomChanged} event of this `sap.suite.ui.commons.networkgraph.Graph`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Graph` itself.
             *
             * This event is fired when zooming in or out.
             */
            attachZoomChanged(
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Graph`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Graph;
          }
          /**
           * @SINCE 1.50
           *
           * A component which displays an overview of the entire graph and allows users to quickly navigate in the
           * linked graph.
           */
          class GraphMap extends sap.ui.core.Control {
            /**
             * Constructor for a new GraphMap.
             *
             * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
             * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
             * of the syntax of the settings object.
             */
            constructor();

            /**
             * Attaches event handler `fnFunction` to the {@link #event:mapReady mapReady} event of this `sap.suite.ui.commons.networkgraph.GraphMap`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.GraphMap` itself.
             *
             * This event is fired when the map is fully rendered.
             */
            attachMapReady(
              /**
               * An application-specific payload object that will be passed to the event handler along with the event
               * object when firing the event
               */
              oData: object,
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.GraphMap`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.GraphMap;
            /**
             * Detaches event handler `fnFunction` from the {@link #event:mapReady mapReady} event of this `sap.suite.ui.commons.networkgraph.GraphMap`.
             *
             * The passed function and listener object must match the ones used for event registration.
             */
            detachMapReady(
              /**
               * The function to be called, when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object on which the given function had to be called
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.GraphMap;
            /**
             * Creates a new subclass of class sap.suite.ui.commons.networkgraph.GraphMap with name `sClassName` and
             * enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Fires event {@link #event:mapReady mapReady} to attached listeners.
             */
            fireMapReady(
              /**
               * Parameters to pass along with the event
               */
              mParameters?: object
            ): sap.suite.ui.commons.networkgraph.GraphMap;
            /**
             * Gets current value of property {@link #getDirectRenderNodeLimit directRenderNodeLimit}.
             *
             * This property affects the threshold at which the renderer switches from link rendering to direct graph
             * rendering. Rendering using xlink is much faster, but with larger graphs it may slow down the browser
             * performance. Modify this property with care. Please also keep in mind that a graph map that is rendered
             * directly does not adapt to changes until it's fully rerendered. Available only for `SVG` rendering type.
             *
             * Default value is `250`.
             */
            getDirectRenderNodeLimit(): number;
            /**
             * ID of the element which is the current target of the association {@link #getGraph graph}, or `null`.
             */
            getGraph(): sap.ui.core.ID;
            /**
             * Gets current value of property {@link #getHeight height}.
             *
             * The height of the graph map.
             *
             * Default value is `empty string`.
             */
            getHeight(): sap.ui.core.CSSSize;
            /**
             * Returns a metadata object for class sap.suite.ui.commons.networkgraph.GraphMap.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Gets current value of property {@link #getTitle title}.
             *
             * Graph overview title
             *
             * Default value is `empty string`.
             */
            getTitle(): string;
            /**
             * Gets current value of property {@link #getWidth width}.
             *
             * The width of the graph map.
             *
             * Default value is `empty string`.
             */
            getWidth(): sap.ui.core.CSSSize;
            /**
             * Sets a new value for property {@link #getDirectRenderNodeLimit directRenderNodeLimit}.
             *
             * This property affects the threshold at which the renderer switches from link rendering to direct graph
             * rendering. Rendering using xlink is much faster, but with larger graphs it may slow down the browser
             * performance. Modify this property with care. Please also keep in mind that a graph map that is rendered
             * directly does not adapt to changes until it's fully rerendered. Available only for `SVG` rendering type.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `250`.
             */
            setDirectRenderNodeLimit(
              /**
               * New value for property `directRenderNodeLimit`
               */
              iDirectRenderNodeLimit: number
            ): sap.suite.ui.commons.networkgraph.GraphMap;
            /**
             * Sets the associated {@link #getGraph graph}.
             */
            setGraph(
              /**
               * ID of an element which becomes the new target of this graph association; alternatively, an element instance
               * may be given
               */
              oGraph: sap.ui.core.ID | sap.suite.ui.commons.networkgraph.Graph
            ): sap.suite.ui.commons.networkgraph.GraphMap;
            /**
             * Sets a new value for property {@link #getHeight height}.
             *
             * The height of the graph map.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `empty string`.
             */
            setHeight(
              /**
               * New value for property `height`
               */
              sHeight: sap.ui.core.CSSSize
            ): sap.suite.ui.commons.networkgraph.GraphMap;
            /**
             * Sets a new value for property {@link #getTitle title}.
             *
             * Graph overview title
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `empty string`.
             */
            setTitle(
              /**
               * New value for property `title`
               */
              sTitle: string
            ): sap.suite.ui.commons.networkgraph.GraphMap;
            /**
             * Sets a new value for property {@link #getWidth width}.
             *
             * The width of the graph map.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `empty string`.
             */
            setWidth(
              /**
               * New value for property `width`
               */
              sWidth: sap.ui.core.CSSSize
            ): sap.suite.ui.commons.networkgraph.GraphMap;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:mapReady mapReady} event of this `sap.suite.ui.commons.networkgraph.GraphMap`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.GraphMap` itself.
             *
             * This event is fired when the map is fully rendered.
             */
            attachMapReady(
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.GraphMap`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.GraphMap;
          }
          /**
           * @SINCE 1.50
           *
           * Holds details about a group.
           */
          class Group extends sap.suite.ui.commons.networkgraph.ElementBase {
            /**
             * Constructor for a new Group. Grouping is not supported for custom layouting.
             *
             * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
             * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
             * of the syntax of the settings object.
             */
            constructor();

            /**
             * Attaches event handler `fnFunction` to the {@link #event:collapseExpand collapseExpand} event of this
             * `sap.suite.ui.commons.networkgraph.Group`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Group` itself.
             *
             * This event is fired when the user clicks or taps the collapse/expand button.
             */
            attachCollapseExpand(
              /**
               * An application-specific payload object that will be passed to the event handler along with the event
               * object when firing the event
               */
              oData: object,
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Group`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Group;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:headerCheckBoxPress headerCheckBoxPress} event
             * of this `sap.suite.ui.commons.networkgraph.Group`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Group` itself.
             *
             * This event is fired when the user selects or clears the Header checkbox.
             */
            attachHeaderCheckBoxPress(
              /**
               * An application-specific payload object that will be passed to the event handler along with the event
               * object when firing the event
               */
              oData: object,
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Group`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Group;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:showDetail showDetail} event of this `sap.suite.ui.commons.networkgraph.Group`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Group` itself.
             *
             * This event is fired when the user clicks or taps the group's details button.
             */
            attachShowDetail(
              /**
               * An application-specific payload object that will be passed to the event handler along with the event
               * object when firing the event
               */
              oData: object,
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Group`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Group;
            /**
             * Detaches event handler `fnFunction` from the {@link #event:collapseExpand collapseExpand} event of this
             * `sap.suite.ui.commons.networkgraph.Group`.
             *
             * The passed function and listener object must match the ones used for event registration.
             */
            detachCollapseExpand(
              /**
               * The function to be called, when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object on which the given function had to be called
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Group;
            /**
             * Detaches event handler `fnFunction` from the {@link #event:headerCheckBoxPress headerCheckBoxPress} event
             * of this `sap.suite.ui.commons.networkgraph.Group`.
             *
             * The passed function and listener object must match the ones used for event registration.
             */
            detachHeaderCheckBoxPress(
              /**
               * The function to be called, when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object on which the given function had to be called
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Group;
            /**
             * Detaches event handler `fnFunction` from the {@link #event:showDetail showDetail} event of this `sap.suite.ui.commons.networkgraph.Group`.
             *
             * The passed function and listener object must match the ones used for event registration.
             */
            detachShowDetail(
              /**
               * The function to be called, when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object on which the given function had to be called
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Group;
            /**
             * Creates a new subclass of class sap.suite.ui.commons.networkgraph.Group with name `sClassName` and enriches
             * it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.networkgraph.ElementBase.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Fires event {@link #event:collapseExpand collapseExpand} to attached listeners.
             */
            fireCollapseExpand(
              /**
               * Parameters to pass along with the event
               */
              mParameters?: object
            ): sap.suite.ui.commons.networkgraph.Group;
            /**
             * Fires event {@link #event:headerCheckBoxPress headerCheckBoxPress} to attached listeners.
             */
            fireHeaderCheckBoxPress(
              /**
               * Parameters to pass along with the event
               */
              mParameters?: {
                /**
                 * Indicates whether checkbox is selected.
                 */
                checked?: boolean;
              }
            ): sap.suite.ui.commons.networkgraph.Group;
            /**
             * Fires event {@link #event:showDetail showDetail} to attached listeners.
             */
            fireShowDetail(
              /**
               * Parameters to pass along with the event
               */
              mParameters?: object
            ): sap.suite.ui.commons.networkgraph.Group;
            /**/
            getChildLines(): any;
            /**/
            getChildNodes(): any;
            /**
             * Gets current value of property {@link #getCollapsed collapsed}.
             *
             * Defines whether the group is collapsed. By default, it is expanded.
             *
             * Default value is `false`.
             */
            getCollapsed(): boolean;
            /**
             * Returns header checkbox object
             */
            getHeaderCheckbox(): void;
            /**
             * Gets current value of property {@link #getHeaderCheckBoxState headerCheckBoxState}.
             *
             * Defines if the Header checkbox should be displayed and whether it should be selected or not. By default,
             * the checkbox is hidden.
             *
             * Default value is `Hidden`.
             */
            getHeaderCheckBoxState(): sap.suite.ui.commons.networkgraph.HeaderCheckboxState;
            /**
             * Gets current value of property {@link #getIcon icon}.
             *
             * An icon associated with the group.
             */
            getIcon(): string;
            /**
             * Gets current value of property {@link #getKey key}.
             *
             * The key of the group. This key is used to assign nodes to groups.
             */
            getKey(): string;
            /**
             * Returns a metadata object for class sap.suite.ui.commons.networkgraph.Group.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Gets current value of property {@link #getMinWidth minWidth}.
             *
             * Minimal width of the group (swim lane) for the `SwimLanes` type of {@link sap.suite.ui.commons.networkgraph.LayoutRenderType}.
             *  If not specified, the width of the group (swim lane) is defined automatically, based on the width of
             * the nodes included in the swim lane.
             *  If the width specified in this property is too small to fit the nodes included in this group (swim lane),
             * the width is increased accordingly.
             *
             * Default value is `undefined`.
             */
            getMinWidth(): number;
            /**/
            getNodes(): any;
            /**
             * Gets current value of property {@link #getParentGroupKey parentGroupKey}.
             *
             * Key of the parent group. Can be used only with the `TwoColumns` layout.
             */
            getParentGroupKey(): string;
            /**/
            getParentLines(): any;
            /**/
            getParentNodes(): any;
            /**
             * Sets a new value for property {@link #getCollapsed collapsed}.
             *
             * Defines whether the group is collapsed. By default, it is expanded.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `false`.
             */
            setCollapsed(
              /**
               * New value for property `collapsed`
               */
              bCollapsed: boolean
            ): sap.suite.ui.commons.networkgraph.Group;
            /**
             * Sets a new value for property {@link #getHeaderCheckBoxState headerCheckBoxState}.
             *
             * Defines if the Header checkbox should be displayed and whether it should be selected or not. By default,
             * the checkbox is hidden.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `Hidden`.
             */
            setHeaderCheckBoxState(
              /**
               * New value for property `headerCheckBoxState`
               */
              sHeaderCheckBoxState: sap.suite.ui.commons.networkgraph.HeaderCheckboxState
            ): sap.suite.ui.commons.networkgraph.Group;
            /**
             * Hides the group and the nodes included in it.
             */
            setHidden(): void;
            /**
             * Sets a new value for property {@link #getIcon icon}.
             *
             * An icon associated with the group.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setIcon(
              /**
               * New value for property `icon`
               */
              sIcon: string
            ): sap.suite.ui.commons.networkgraph.Group;
            /**
             * Sets a new value for property {@link #getKey key}.
             *
             * The key of the group. This key is used to assign nodes to groups.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setKey(
              /**
               * New value for property `key`
               */
              sKey: string
            ): sap.suite.ui.commons.networkgraph.Group;
            /**
             * Sets a new value for property {@link #getMinWidth minWidth}.
             *
             * Minimal width of the group (swim lane) for the `SwimLanes` type of {@link sap.suite.ui.commons.networkgraph.LayoutRenderType}.
             *  If not specified, the width of the group (swim lane) is defined automatically, based on the width of
             * the nodes included in the swim lane.
             *  If the width specified in this property is too small to fit the nodes included in this group (swim lane),
             * the width is increased accordingly.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `undefined`.
             */
            setMinWidth(
              /**
               * New value for property `minWidth`
               */
              fMinWidth: number
            ): sap.suite.ui.commons.networkgraph.Group;
            /**
             * Sets a new value for property {@link #getParentGroupKey parentGroupKey}.
             *
             * Key of the parent group. Can be used only with the `TwoColumns` layout.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setParentGroupKey(
              /**
               * New value for property `parentGroupKey`
               */
              sParentGroupKey: string
            ): sap.suite.ui.commons.networkgraph.Group;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:collapseExpand collapseExpand} event of this
             * `sap.suite.ui.commons.networkgraph.Group`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Group` itself.
             *
             * This event is fired when the user clicks or taps the collapse/expand button.
             */
            attachCollapseExpand(
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Group`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Group;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:headerCheckBoxPress headerCheckBoxPress} event
             * of this `sap.suite.ui.commons.networkgraph.Group`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Group` itself.
             *
             * This event is fired when the user selects or clears the Header checkbox.
             */
            attachHeaderCheckBoxPress(
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Group`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Group;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:showDetail showDetail} event of this `sap.suite.ui.commons.networkgraph.Group`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Group` itself.
             *
             * This event is fired when the user clicks or taps the group's details button.
             */
            attachShowDetail(
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Group`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Group;
          }
          /**
           * @SINCE 1.50
           *
           * Holds information about one connector line.
           */
          class Line extends sap.suite.ui.commons.networkgraph.ElementBase {
            /**
             * Constructor for a new Line.
             *
             * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
             * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
             * of the syntax of the settings object.
             */
            constructor();

            /**
             * Adds some actionButton to the aggregation {@link #getActionButtons actionButtons}.
             */
            addActionButton(
              /**
               * The actionButton to add; if empty, nothing is inserted
               */
              oActionButton: sap.suite.ui.commons.networkgraph.ActionButton
            ): sap.suite.ui.commons.networkgraph.Line;
            /**
             * Adds coordinates for points that should define the shape of the line between its start and end points.
             * This method doesn't call invalidate on the object.
             */
            addBend(
              /**
               * X and Y coordinates
               */
              oPoint: Object
            ): sap.suite.ui.commons.networkgraph.Coordinate;
            /**
             * Adds some coordinate to the aggregation {@link #getCoordinates coordinates}.
             */
            addCoordinate(
              /**
               * The coordinate to add; if empty, nothing is inserted
               */
              oCoordinate: sap.suite.ui.commons.networkgraph.Coordinate
            ): sap.suite.ui.commons.networkgraph.Line;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:hover hover} event of this `sap.suite.ui.commons.networkgraph.Line`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Line` itself.
             *
             * This event is fired when the user moves the mouse pointer over the line.
             */
            attachHover(
              /**
               * An application-specific payload object that will be passed to the event handler along with the event
               * object when firing the event
               */
              oData: object,
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Line`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Line;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.networkgraph.Line`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Line` itself.
             *
             * This event is fired when the user clicks or taps the line.
             */
            attachPress(
              /**
               * An application-specific payload object that will be passed to the event handler along with the event
               * object when firing the event
               */
              oData: object,
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Line`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Line;
            /**
             * Removes all points that define the shape of the line between its start and end points. This method doesn't
             * call invalidate on the object.
             */
            clearBends(): void;
            /**
             * Destroys all the actionButtons in the aggregation {@link #getActionButtons actionButtons}.
             */
            destroyActionButtons(): sap.suite.ui.commons.networkgraph.Line;
            /**
             * Destroys all the coordinates in the aggregation {@link #getCoordinates coordinates}.
             */
            destroyCoordinates(): sap.suite.ui.commons.networkgraph.Line;
            /**
             * Detaches event handler `fnFunction` from the {@link #event:hover hover} event of this `sap.suite.ui.commons.networkgraph.Line`.
             *
             * The passed function and listener object must match the ones used for event registration.
             */
            detachHover(
              /**
               * The function to be called, when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object on which the given function had to be called
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Line;
            /**
             * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.suite.ui.commons.networkgraph.Line`.
             *
             * The passed function and listener object must match the ones used for event registration.
             */
            detachPress(
              /**
               * The function to be called, when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object on which the given function had to be called
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Line;
            /**
             * Creates a new subclass of class sap.suite.ui.commons.networkgraph.Line with name `sClassName` and enriches
             * it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.networkgraph.ElementBase.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Fires event {@link #event:hover hover} to attached listeners.
             */
            fireHover(
              /**
               * Parameters to pass along with the event
               */
              mParameters?: object
            ): sap.suite.ui.commons.networkgraph.Line;
            /**
             * Fires event {@link #event:press press} to attached listeners.
             */
            firePress(
              /**
               * Parameters to pass along with the event
               */
              mParameters?: {
                /**
                 * Coordinates of the cursor when pressed.
                 */
                point?: Object;
                /**
                 * Object you can pass to 'openBy' method for custom tooltip. Its important for lines where you want to
                 * display tooltip precisely where the cursor is.
                 */
                opener?: Object;
              }
            ): sap.suite.ui.commons.networkgraph.Line;
            /**
             * Gets content of aggregation {@link #getActionButtons actionButtons}.
             *
             * A list of custom action buttons.
             */
            getActionButtons(): sap.suite.ui.commons.networkgraph.ActionButton[];
            /**
             * Gets current value of property {@link #getArrowOrientation arrowOrientation}.
             *
             * Orientation of the line that defines the direction of the arrow.
             *
             * Default value is `ParentOf`.
             */
            getArrowOrientation(): sap.suite.ui.commons.networkgraph.LineArrowOrientation;
            /**
             * Gets current value of property {@link #getArrowPosition arrowPosition}.
             *
             * Position of the arrow on the line. Can be set to End, Middle, or Start.
             *
             * Default value is `End`.
             */
            getArrowPosition(): sap.suite.ui.commons.networkgraph.LineArrowPosition;
            /**
             * Returns the coordinates of all points that define the shape of the line between its start and end points.
             * This method doesn't call invalidate on the object.
             */
            getBends(): sap.suite.ui.commons.networkgraph.Coordinate[];
            /**
             * Gets content of aggregation {@link #getCoordinates coordinates}.
             *
             * A list of points the line goes through. After the layouting algorithm has finished arranging the graph,
             * this aggregation contains the coordinates of at least two points: the starting point and the end point
             * of the line. The rest of the points making up the line are treated as break points.
             */
            getCoordinates(): sap.suite.ui.commons.networkgraph.Coordinate[];
            /**
             * Gets current value of property {@link #getFrom from}.
             *
             * Key of the node where the line begins.
             */
            getFrom(): string;
            /**
             * Returns the node instance where the line starts. This method doesn't call invalidate on the object.
             */
            getFromNode(): object;
            /**
             * Gets current value of property {@link #getLineType lineType}.
             *
             * Defines the appearance of the line. Can be set to solid, dashed, or dotted.
             *
             * Default value is `Solid`.
             */
            getLineType(): sap.suite.ui.commons.networkgraph.LineType;
            /**
             * Returns a metadata object for class sap.suite.ui.commons.networkgraph.Line.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Gets current value of property {@link #getSelected selected}.
             *
             * Shows if the line is selected. Once the line is selected, its appearance changes slightly to distinguish
             * it from other lines.
             *
             * Default value is `false`.
             */
            getSelected(): boolean;
            /**
             * Returns the coordinates of the line's starting point. This method doesn't call invalidate on the object.
             */
            getSource(): sap.suite.ui.commons.networkgraph.Coordinate;
            /**
             * Gets current value of property {@link #getStretchToCenter stretchToCenter}.
             *
             * Extends the line up to the node's horizontal or vertical axis to ensure that it meets the shape's outline
             * even when a fancy shape is used.
             *  Available for custom nodes only.
             *
             * Default value is `false`.
             */
            getStretchToCenter(): boolean;
            /**
             * Returns the coordinates of the line's end point. This method doesn't call invalidate on the object.
             */
            getTarget(): sap.suite.ui.commons.networkgraph.Coordinate;
            /**
             * Gets current value of property {@link #getTo to}.
             *
             * Key of the node the line leads to.
             */
            getTo(): string;
            /**
             * Returns the node instance where the line leads to. This method doesn't call invalidate on the object.
             */
            getToNode(): object;
            /**
             * Checks for the provided `sap.suite.ui.commons.networkgraph.ActionButton` in the aggregation {@link #getActionButtons
             * actionButtons}. and returns its index if found or -1 otherwise.
             */
            indexOfActionButton(
              /**
               * The actionButton whose index is looked for
               */
              oActionButton: sap.suite.ui.commons.networkgraph.ActionButton
            ): number;
            /**
             * Checks for the provided `sap.suite.ui.commons.networkgraph.Coordinate` in the aggregation {@link #getCoordinates
             * coordinates}. and returns its index if found or -1 otherwise.
             */
            indexOfCoordinate(
              /**
               * The coordinate whose index is looked for
               */
              oCoordinate: sap.suite.ui.commons.networkgraph.Coordinate
            ): number;
            /**
             * Inserts a actionButton into the aggregation {@link #getActionButtons actionButtons}.
             */
            insertActionButton(
              /**
               * The actionButton to insert; if empty, nothing is inserted
               */
              oActionButton: sap.suite.ui.commons.networkgraph.ActionButton,
              /**
               * The `0`-based index the actionButton should be inserted at; for a negative value of `iIndex`, the actionButton
               * is inserted at position 0; for a value greater than the current size of the aggregation, the actionButton
               * is inserted at the last position
               */
              iIndex: number
            ): sap.suite.ui.commons.networkgraph.Line;
            /**
             * Inserts a coordinate into the aggregation {@link #getCoordinates coordinates}.
             */
            insertCoordinate(
              /**
               * The coordinate to insert; if empty, nothing is inserted
               */
              oCoordinate: sap.suite.ui.commons.networkgraph.Coordinate,
              /**
               * The `0`-based index the coordinate should be inserted at; for a negative value of `iIndex`, the coordinate
               * is inserted at position 0; for a value greater than the current size of the aggregation, the coordinate
               * is inserted at the last position
               */
              iIndex: number
            ): sap.suite.ui.commons.networkgraph.Line;
            /**
             * Removes a actionButton from the aggregation {@link #getActionButtons actionButtons}.
             */
            removeActionButton(
              /**
               * The actionButton to remove or its index or id
               */
              vActionButton:
                | number
                | string
                | sap.suite.ui.commons.networkgraph.ActionButton
            ): sap.suite.ui.commons.networkgraph.ActionButton;
            /**
             * Removes all the controls from the aggregation {@link #getActionButtons actionButtons}.
             *
             * Additionally, it unregisters them from the hosting UIArea.
             */
            removeAllActionButtons(): sap.suite.ui.commons.networkgraph.ActionButton[];
            /**
             * Removes all the controls from the aggregation {@link #getCoordinates coordinates}.
             *
             * Additionally, it unregisters them from the hosting UIArea.
             */
            removeAllCoordinates(): sap.suite.ui.commons.networkgraph.Coordinate[];
            /**
             * Removes a coordinate from the aggregation {@link #getCoordinates coordinates}.
             */
            removeCoordinate(
              /**
               * The coordinate to remove or its index or id
               */
              vCoordinate:
                | number
                | string
                | sap.suite.ui.commons.networkgraph.Coordinate
            ): sap.suite.ui.commons.networkgraph.Coordinate;
            /**
             * Sets a new value for property {@link #getArrowOrientation arrowOrientation}.
             *
             * Orientation of the line that defines the direction of the arrow.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `ParentOf`.
             */
            setArrowOrientation(
              /**
               * New value for property `arrowOrientation`
               */
              sArrowOrientation: sap.suite.ui.commons.networkgraph.LineArrowOrientation
            ): sap.suite.ui.commons.networkgraph.Line;
            /**
             * Sets a new value for property {@link #getArrowPosition arrowPosition}.
             *
             * Position of the arrow on the line. Can be set to End, Middle, or Start.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `End`.
             */
            setArrowPosition(
              /**
               * New value for property `arrowPosition`
               */
              sArrowPosition: sap.suite.ui.commons.networkgraph.LineArrowPosition
            ): sap.suite.ui.commons.networkgraph.Line;
            /**
             * Sets a new value for property {@link #getFrom from}.
             *
             * Key of the node where the line begins.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setFrom(
              /**
               * New value for property `from`
               */
              sFrom: string
            ): sap.suite.ui.commons.networkgraph.Line;
            /**
             * Hides the line.
             */
            setHidden(): void;
            /**
             * Sets a new value for property {@link #getLineType lineType}.
             *
             * Defines the appearance of the line. Can be set to solid, dashed, or dotted.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `Solid`.
             */
            setLineType(
              /**
               * New value for property `lineType`
               */
              sLineType: sap.suite.ui.commons.networkgraph.LineType
            ): sap.suite.ui.commons.networkgraph.Line;
            /**
             * Sets a new value for property {@link #getSelected selected}.
             *
             * Shows if the line is selected. Once the line is selected, its appearance changes slightly to distinguish
             * it from other lines.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `false`.
             */
            setSelected(
              /**
               * New value for property `selected`
               */
              bSelected: boolean
            ): sap.suite.ui.commons.networkgraph.Line;
            /**
             * Sets the starting point, or the source, for the line. This method doesn't call invalidate on the object.
             */
            setSource(
              /**
               * mArguments.x mArguments.y X and Y coordinates of the starting point
               */
              mArguments: object
            ): void;
            /**
             * Sets a new value for property {@link #getStretchToCenter stretchToCenter}.
             *
             * Extends the line up to the node's horizontal or vertical axis to ensure that it meets the shape's outline
             * even when a fancy shape is used.
             *  Available for custom nodes only.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `false`.
             */
            setStretchToCenter(
              /**
               * New value for property `stretchToCenter`
               */
              bStretchToCenter: boolean
            ): sap.suite.ui.commons.networkgraph.Line;
            /**
             * Sets the end point, or the target, for the line. This method doesn't call invalidate on the object.
             */
            setTarget(
              /**
               * mArguments.x mArguments.y X and Y coordinates of the end point
               */
              mArguments: object
            ): void;
            /**
             * Sets a new value for property {@link #getTo to}.
             *
             * Key of the node the line leads to.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setTo(
              /**
               * New value for property `to`
               */
              sTo: string
            ): sap.suite.ui.commons.networkgraph.Line;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:hover hover} event of this `sap.suite.ui.commons.networkgraph.Line`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Line` itself.
             *
             * This event is fired when the user moves the mouse pointer over the line.
             */
            attachHover(
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Line`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Line;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.networkgraph.Line`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Line` itself.
             *
             * This event is fired when the user clicks or taps the line.
             */
            attachPress(
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Line`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Line;
          }
          /**
           * @SINCE 1.50
           *
           * Holds information about one node. When changing the size of the node after the graph is rendered, you
           * have to manually invalidate the graph, which causes the layout algorithm to be applied again.
           */
          class Node extends sap.suite.ui.commons.networkgraph.ElementBase {
            /**
             * Constructor for a new Node.
             *
             * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
             * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
             * of the syntax of the settings object.
             */
            constructor();

            /**
             * Adds some actionButton to the aggregation {@link #getActionButtons actionButtons}.
             */
            addActionButton(
              /**
               * The actionButton to add; if empty, nothing is inserted
               */
              oActionButton: sap.suite.ui.commons.networkgraph.ActionButton
            ): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Adds some actionLink to the aggregation {@link #getActionLinks actionLinks}.
             */
            addActionLink(
              /**
               * The actionLink to add; if empty, nothing is inserted
               */
              oActionLink: sap.ui.core.Control
            ): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:collapseExpand collapseExpand} event of this
             * `sap.suite.ui.commons.networkgraph.Node`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Node` itself.
             *
             * This event is fired when the user clicks the node's collapse/expand button.
             */
            attachCollapseExpand(
              /**
               * An application-specific payload object that will be passed to the event handler along with the event
               * object when firing the event
               */
              oData: object,
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Node`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:headerCheckBoxPress headerCheckBoxPress} event
             * of this `sap.suite.ui.commons.networkgraph.Node`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Node` itself.
             *
             * This event is fired when the user selects or clears the Header checkbox.
             */
            attachHeaderCheckBoxPress(
              /**
               * An application-specific payload object that will be passed to the event handler along with the event
               * object when firing the event
               */
              oData: object,
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Node`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:hover hover} event of this `sap.suite.ui.commons.networkgraph.Node`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Node` itself.
             *
             * This event is fired when the user moves the mouse pointer over the node.
             */
            attachHover(
              /**
               * An application-specific payload object that will be passed to the event handler along with the event
               * object when firing the event
               */
              oData: object,
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Node`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.networkgraph.Node`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Node` itself.
             *
             * This event is fired when the user clicks or taps the node.
             */
            attachPress(
              /**
               * An application-specific payload object that will be passed to the event handler along with the event
               * object when firing the event
               */
              oData: object,
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Node`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Determines node sizes, applies text trimming, arranges the text into lines, and makes other necessary
             * adjustments.
             *
             *
             * This method can only be overridden when custom rendering is used. It must never be called directly.
             */
            calculateSizes(): any;
            /**
             * Returns an object that includes an array of text lines and the height of a single line.
             */
            computeTextDimensions(
              /**
               * Arguments passed to the method
               */
              mArguments?: {
                /**
                 * Additional attributes appended to the text
                 */
                attributes?: Object;
                /**
                 * Width of the text is trimmed to
                 */
                width?: number;
                /**
                 * Text to trim
                 */
                text?: string;
              }
            ): void;
            /**
             * Destroys all the actionButtons in the aggregation {@link #getActionButtons actionButtons}.
             */
            destroyActionButtons(): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Destroys all the actionLinks in the aggregation {@link #getActionLinks actionLinks}.
             */
            destroyActionLinks(): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Destroys the content in the aggregation {@link #getContent content}.
             */
            destroyContent(): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Destroys the image in the aggregation {@link #getImage image}.
             */
            destroyImage(): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Detaches event handler `fnFunction` from the {@link #event:collapseExpand collapseExpand} event of this
             * `sap.suite.ui.commons.networkgraph.Node`.
             *
             * The passed function and listener object must match the ones used for event registration.
             */
            detachCollapseExpand(
              /**
               * The function to be called, when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object on which the given function had to be called
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Detaches event handler `fnFunction` from the {@link #event:headerCheckBoxPress headerCheckBoxPress} event
             * of this `sap.suite.ui.commons.networkgraph.Node`.
             *
             * The passed function and listener object must match the ones used for event registration.
             */
            detachHeaderCheckBoxPress(
              /**
               * The function to be called, when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object on which the given function had to be called
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Detaches event handler `fnFunction` from the {@link #event:hover hover} event of this `sap.suite.ui.commons.networkgraph.Node`.
             *
             * The passed function and listener object must match the ones used for event registration.
             */
            detachHover(
              /**
               * The function to be called, when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object on which the given function had to be called
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.suite.ui.commons.networkgraph.Node`.
             *
             * The passed function and listener object must match the ones used for event registration.
             */
            detachPress(
              /**
               * The function to be called, when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object on which the given function had to be called
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Creates a new subclass of class sap.suite.ui.commons.networkgraph.Node with name `sClassName` and enriches
             * it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.networkgraph.ElementBase.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Fires event {@link #event:collapseExpand collapseExpand} to attached listeners.
             */
            fireCollapseExpand(
              /**
               * Parameters to pass along with the event
               */
              mParameters?: object
            ): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Fires event {@link #event:headerCheckBoxPress headerCheckBoxPress} to attached listeners.
             */
            fireHeaderCheckBoxPress(
              /**
               * Parameters to pass along with the event
               */
              mParameters?: {
                /**
                 * Indicates whether checkbox is selected.
                 */
                checked?: boolean;
              }
            ): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Fires event {@link #event:hover hover} to attached listeners.
             */
            fireHover(
              /**
               * Parameters to pass along with the event
               */
              mParameters?: object
            ): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Fires event {@link #event:press press} to attached listeners.
             */
            firePress(
              /**
               * Parameters to pass along with the event
               */
              mParameters?: object
            ): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Gets content of aggregation {@link #getActionButtons actionButtons}.
             *
             * A list of custom action buttons. These buttons are displayed in the button area for each node. A node
             * may have up to 4 buttons. The default 3 buttons (collapse/expand, details, and links) have priority over
             * any other custom buttons that you add. If you want all 4 of your custom buttons to be displayed, set
             * the visibility of the default buttons to false.
             */
            getActionButtons(): sap.suite.ui.commons.networkgraph.ActionButton[];
            /**
             * Gets content of aggregation {@link #getActionLinks actionLinks}.
             *
             * A list of links to be shown in the links area. A link may point to any UI5 control. It's up to the caller
             * to set up all necessary callback functions.
             */
            getActionLinks(): sap.ui.core.Control[];
            /**
             * Returns center position of the node.
             */
            getCenterPosition(): Object;
            /**
             * Returns all lines connected to the child nodes.
             */
            getChildLines(): any;
            /**
             * Returns all child nodes.
             */
            getChildNodes(): any;
            /**
             * Gets current value of property {@link #getCollapsed collapsed}.
             *
             * Defines if the subtree of this node is collapsed. By default, it is expanded.
             *
             * Default value is `false`.
             */
            getCollapsed(): boolean;
            /**
             * Gets content of aggregation {@link #getContent content}.
             *
             * Custom content rendered with the node. Available only for rectangular nodes with HTML rendering type.
             * When this aggregation is used, the description and attributes of {@link sap.suite.ui.commons.networkgraph.ElementBase}
             * are ignored.
             */
            getContent(): sap.ui.core.Control;
            /**
             * Gets current value of property {@link #getCoreNodeSize coreNodeSize}.
             *
             * Determines the size of a custom node, which can be useful for nodes that have text or other content outside
             * of its shape.
             * This property is available for custom nodes only.
             *
             * Default value is `0`.
             */
            getCoreNodeSize(): number;
            /**
             * Gets current value of property {@link #getDescriptionLineSize descriptionLineSize}.
             *
             * Determines the maximum number of lines allowed to be displayed in the node's description. If you want
             * to hide the description, set this property to `-1` (default). To display an unlimited number of lines,
             * set this property to `0`. This property does not affect the description that appears in the tooltip,
             * which is always fully rendered.
             *
             * Default value is `-1`.
             */
            getDescriptionLineSize(): number;
            /**
             * Gets the node's action buttons that are enabled.
             */
            getEnabledActionButtons(): any;
            /**
             * Gets current value of property {@link #getGroup group}.
             *
             * Key of the group where this node is included.
             */
            getGroup(): string;
            /**
             * Returns header checkbox object
             */
            getHeaderCheckbox(): void;
            /**
             * Gets current value of property {@link #getHeaderCheckBoxState headerCheckBoxState}.
             *
             * Defines if the Header checkbox should be displayed and whether it should be selected or not. By default,
             * the checkbox is hidden. Available only for box nodes.
             *
             * Default value is `Hidden`.
             */
            getHeaderCheckBoxState(): sap.suite.ui.commons.networkgraph.HeaderCheckboxState;
            /**
             * Gets current value of property {@link #getHeight height}.
             *
             * Height of the node. In circular nodes, it determines the circle diameter.
             *
             * Default value is `undefined`.
             */
            getHeight(): number;
            /**
             * Gets current value of property {@link #getIcon icon}.
             *
             * An icon associated with the element.
             */
            getIcon(): string;
            /**
             * Gets current value of property {@link #getIconSize iconSize}.
             *
             * Determines the size of the node's icon. This property can be applied only to circular nodes.
             *
             * Default value is `undefined`.
             */
            getIconSize(): number;
            /**
             * Gets content of aggregation {@link #getImage image}.
             *
             * The image that is displayed in the node's header instead of the icon.
             */
            getImage(): sap.suite.ui.commons.networkgraph.NodeImage;
            /**
             * Gets current value of property {@link #getKey key}.
             *
             * Key of the node. This key is used throughout the DOM to reference this node, mainly in the connector
             * line (Line) elements of the graph.
             */
            getKey(): string;
            /**
             * Gets current value of property {@link #getMaxWidth maxWidth}.
             *
             * Maximum width allowed. The auto grow algorithm stops increasing the width at this value.
             *
             * Default value is `undefined`.
             */
            getMaxWidth(): number;
            /**
             * Returns a metadata object for class sap.suite.ui.commons.networkgraph.Node.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Returns all lines connected to the parent nodes.
             */
            getParentLines(): any;
            /**
             * Returns all parent nodes.
             */
            getParentNodes(): any;
            /**
             * Gets current value of property {@link #getSelected selected}.
             *
             * Shows if the node is selected. Once the node is selected, its appearance changes slightly to distinguish
             * it from other nodes.
             *
             * Default value is `false`.
             */
            getSelected(): boolean;
            /**
             * Gets current value of property {@link #getShape shape}.
             *
             * Shape of the node. The shape is round by default. To create a rectangular node, set this property to
             * Box.
             *
             * Default value is `Circle`.
             */
            getShape(): sap.suite.ui.commons.networkgraph.NodeShape;
            /**
             * Gets current value of property {@link #getShowActionLinksButton showActionLinksButton}.
             *
             * Determines if the links button is visible.
             *
             * Default value is `true`.
             */
            getShowActionLinksButton(): boolean;
            /**
             * Gets current value of property {@link #getShowDetailButton showDetailButton}.
             *
             * Determines if the details button is visible.
             *
             * Default value is `true`.
             */
            getShowDetailButton(): boolean;
            /**
             * Gets current value of property {@link #getShowExpandButton showExpandButton}.
             *
             * Determines if the expand button is visible.
             *
             * Default value is `true`.
             */
            getShowExpandButton(): boolean;
            /**
             * Gets current value of property {@link #getStatusIcon statusIcon}.
             *
             * An additional status icon displayed when the node is collapsed.
             */
            getStatusIcon(): string;
            /**
             * Gets current value of property {@link #getTitleLineSize titleLineSize}.
             *
             * Determines the maximum number of lines allowed for the node's label. If set to 0, the label may have
             * an unlimited number of lines.
             *
             * Default value is `1`.
             */
            getTitleLineSize(): number;
            /**
             * Gets current value of property {@link #getVisible visible}.
             *
             * Whether the control should be visible on the screen. Node is still used for layouter.
             *
             * Default value is `true`.
             */
            // @ts-ignore
            getVisible(): boolean;
            /**
             * Gets current value of property {@link #getWidth width}.
             *
             * Width of the node. If the width is not defined, the node expands, so it can fit the content.
             *
             * Default value is `undefined`.
             */
            getWidth(): number;
            /**
             * Gets current value of property {@link #getX x}.
             *
             * The x coordinate of the node. This value must be set after the layout algorithm has finished arranging
             * the graph. It may come from the input data but is not required for most layout algorithms.
             * Works only for `CustomLayout` or `NoopLayout` layout algorithms. Other layout algorithms override this
             * property. However, you can still change it using an `afterLayouting` event.
             *
             * Default value is `0`.
             */
            getX(): number;
            /**
             * Gets current value of property {@link #getY y}.
             *
             * The y coordinate of the node. This value must be set after the layout algorithm has finished arranging
             * the graph. It may come from the input data but is not required for most layout algorithms.
             * Works only for `CustomLayout` or `NoopLayout` layout algorithms. Other layout algorithms override this
             * property. However, you can still change it using an `afterLayouting` event.
             *
             * Default value is `0`.
             */
            getY(): number;
            /**
             * Checks whether the node has visible action buttons
             */
            hasVisibleActionButtons(): boolean;
            /**
             * Checks for the provided `sap.suite.ui.commons.networkgraph.ActionButton` in the aggregation {@link #getActionButtons
             * actionButtons}. and returns its index if found or -1 otherwise.
             */
            indexOfActionButton(
              /**
               * The actionButton whose index is looked for
               */
              oActionButton: sap.suite.ui.commons.networkgraph.ActionButton
            ): number;
            /**
             * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getActionLinks actionLinks}.
             * and returns its index if found or -1 otherwise.
             */
            indexOfActionLink(
              /**
               * The actionLink whose index is looked for
               */
              oActionLink: sap.ui.core.Control
            ): number;
            /**
             * Inserts a actionButton into the aggregation {@link #getActionButtons actionButtons}.
             */
            insertActionButton(
              /**
               * The actionButton to insert; if empty, nothing is inserted
               */
              oActionButton: sap.suite.ui.commons.networkgraph.ActionButton,
              /**
               * The `0`-based index the actionButton should be inserted at; for a negative value of `iIndex`, the actionButton
               * is inserted at position 0; for a value greater than the current size of the aggregation, the actionButton
               * is inserted at the last position
               */
              iIndex: number
            ): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Inserts a actionLink into the aggregation {@link #getActionLinks actionLinks}.
             */
            insertActionLink(
              /**
               * The actionLink to insert; if empty, nothing is inserted
               */
              oActionLink: sap.ui.core.Control,
              /**
               * The `0`-based index the actionLink should be inserted at; for a negative value of `iIndex`, the actionLink
               * is inserted at position 0; for a value greater than the current size of the aggregation, the actionLink
               * is inserted at the last position
               */
              iIndex: number
            ): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Indicates whether the node is hidden by collapsing any of its parent nodes.
             */
            isHidden(): boolean | any;
            /**
             * Removes a actionButton from the aggregation {@link #getActionButtons actionButtons}.
             */
            removeActionButton(
              /**
               * The actionButton to remove or its index or id
               */
              vActionButton:
                | number
                | string
                | sap.suite.ui.commons.networkgraph.ActionButton
            ): sap.suite.ui.commons.networkgraph.ActionButton;
            /**
             * Removes a actionLink from the aggregation {@link #getActionLinks actionLinks}.
             */
            removeActionLink(
              /**
               * The actionLink to remove or its index or id
               */
              vActionLink: number | string | sap.ui.core.Control
            ): sap.ui.core.Control;
            /**
             * Removes all the controls from the aggregation {@link #getActionButtons actionButtons}.
             *
             * Additionally, it unregisters them from the hosting UIArea.
             */
            removeAllActionButtons(): sap.suite.ui.commons.networkgraph.ActionButton[];
            /**
             * Removes all the controls from the aggregation {@link #getActionLinks actionLinks}.
             *
             * Additionally, it unregisters them from the hosting UIArea.
             */
            removeAllActionLinks(): sap.ui.core.Control[];
            /**
             * This method can only be overridden when custom rendering is used. It must never be called directly.
             */
            renderContent(
              /**
               * Options passed to the method
               */
              mOptions?: {
                /**
                 * If `true`, the size is determined for the purposes of text trimming and other resizing operations that
                 * are performed later, just before the final rendering of the graph, not when the method is called.
                 *  If you don't plan to trim text or resize the node, skip the rendering if you set this property to `true`.
                 */
                sizeDetermination?: boolean;
              }
            ): any;
            /**
             * Creates an SVG element string.
             */
            renderElement(
              /**
               * Name of the element
               */
              name?: string,
              /**
               * Attributes of the element.
               */
              mAttributes?: string,
              /**
               * Indicates whether to close the element. If set to `false`, the caller is responsible for adding a closing
               * tag.
               */
              bClose?: boolean
            ): string;
            /**
             * Renders wrappers for HTML action buttons. Used for custom rendering.
             */
            renderHtmlActionButtons(
              /**
               * Options passed to the method (optional).
               */
              mOptions?: {
                /**
                 * Suffix (optional). When the suffix is specified, it is added to the IDs of the wrappers.
                 */
                idSufix?: string;
              }
            ): string;
            /**
             * Creates HTML representation of an icon.
             */
            renderHtmlIcon(
              /**
               * icon to render
               */
              sIcon: undefined
            ): string;
            /**
             * Renders custom info icon for HTML rendering.
             */
            renderHtmlInfoIcon(
              /**
               * Object with additional style appended to info icon
               */
              oStyle: object
            ): void;
            /**
             * Creates an SVG icon string.
             */
            renderIcon(
              /**
               * Arguments passed to the method
               */
              mArguments?: {
                /**
                 * Icon name, based on the SAP icon font
                 */
                icon?: string;
                /**
                 * X coordinate that is added to node's top left x coordinate.
                 */
                x?: number;
                /**
                 * Y coordinate that is added to node's top left y coordinate.
                 */
                y?: number;
                /**
                 * Additional attributes rendered with the text
                 */
                attributes?: Object;
              }
            ): string;
            /**
             * This method can only be overridden when custom rendering is used. It must never be called directly.
             */
            renderItemContent(
              /**
               * Options passed to the method
               */
              mOptions?: {
                /**
                 * If `true`, the size is determined for the purposes of text trimming and other resizing operations that
                 * are performed later, just before the final rendering of the graph, not when the method is called.
                 *  If you don't plan to trim text or resize the node, skip the rendering if you set this property to `true`.
                 */
                sizeDetermination?: boolean;
              }
            ): any;
            /**
             * Renders the status icon. Can be called directly or overridden when custom rendering is used.
             */
            renderStatusIcon(
              /**
               * Options passed to the method
               */
              mParameters?: Object
            ): void;
            /**
             * Renders the text of the node as SVG. Either text or lines of text must be passed to this method as an
             * argument.
             */
            renderText(
              /**
               * Arguments passed to the method
               */
              mArguments?: {
                /**
                 * Text to render, available only for single-line text. Rendered as it is, cannot be used for trim or any
                 * other similar operation
                 */
                text?: string;
                /**
                 * Array with lines of text. Words are spread across multiple lines
                 */
                lines?: any;
                /**
                 * X coordinate that is added to the node's top left x coordinate
                 */
                x?: number;
                /**
                 * Y coordinate that is added to the node's top left y coordinate
                 */
                y?: number;
                /**
                 * Line size for the node, if not set, the default line size is used
                 */
                lineSize?: number;
                /**
                 * Additional attributes rendered with the text
                 */
                attributes?: Object;
              }
            ): string;
            /**
             * Sets a new value for property {@link #getCollapsed collapsed}.
             *
             * Defines if the subtree of this node is collapsed. By default, it is expanded.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `false`.
             */
            setCollapsed(
              /**
               * New value for property `collapsed`
               */
              bCollapsed: boolean
            ): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Sets the aggregated {@link #getContent content}.
             */
            setContent(
              /**
               * The content to set
               */
              oContent: sap.ui.core.Control
            ): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Sets a new value for property {@link #getCoreNodeSize coreNodeSize}.
             *
             * Determines the size of a custom node, which can be useful for nodes that have text or other content outside
             * of its shape.
             * This property is available for custom nodes only.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `0`.
             */
            setCoreNodeSize(
              /**
               * New value for property `coreNodeSize`
               */
              iCoreNodeSize: number
            ): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Sets a new value for property {@link #getDescriptionLineSize descriptionLineSize}.
             *
             * Determines the maximum number of lines allowed to be displayed in the node's description. If you want
             * to hide the description, set this property to `-1` (default). To display an unlimited number of lines,
             * set this property to `0`. This property does not affect the description that appears in the tooltip,
             * which is always fully rendered.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `-1`.
             */
            setDescriptionLineSize(
              /**
               * New value for property `descriptionLineSize`
               */
              iDescriptionLineSize: number
            ): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Sets a new value for property {@link #getGroup group}.
             *
             * Key of the group where this node is included.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setGroup(
              /**
               * New value for property `group`
               */
              sGroup: string
            ): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Sets a new value for property {@link #getHeaderCheckBoxState headerCheckBoxState}.
             *
             * Defines if the Header checkbox should be displayed and whether it should be selected or not. By default,
             * the checkbox is hidden. Available only for box nodes.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `Hidden`.
             */
            setHeaderCheckBoxState(
              /**
               * New value for property `headerCheckBoxState`
               */
              sHeaderCheckBoxState: sap.suite.ui.commons.networkgraph.HeaderCheckboxState
            ): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Sets a new value for property {@link #getHeight height}.
             *
             * Height of the node. In circular nodes, it determines the circle diameter.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `undefined`.
             */
            setHeight(
              /**
               * New value for property `height`
               */
              iHeight: number
            ): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Hides the node and any lines that lead to it.
             */
            setHidden(
              /**
               * value
               */
              bValue: undefined
            ): void;
            /**
             * Sets a new value for property {@link #getIcon icon}.
             *
             * An icon associated with the element.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setIcon(
              /**
               * New value for property `icon`
               */
              sIcon: string
            ): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Sets a new value for property {@link #getIconSize iconSize}.
             *
             * Determines the size of the node's icon. This property can be applied only to circular nodes.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `undefined`.
             */
            setIconSize(
              /**
               * New value for property `iconSize`
               */
              iIconSize: number
            ): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Sets the aggregated {@link #getImage image}.
             */
            setImage(
              /**
               * The image to set
               */
              oImage: sap.suite.ui.commons.networkgraph.NodeImage
            ): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Sets a new value for property {@link #getKey key}.
             *
             * Key of the node. This key is used throughout the DOM to reference this node, mainly in the connector
             * line (Line) elements of the graph.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setKey(
              /**
               * New value for property `key`
               */
              sKey: string
            ): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Sets a new value for property {@link #getMaxWidth maxWidth}.
             *
             * Maximum width allowed. The auto grow algorithm stops increasing the width at this value.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `undefined`.
             */
            setMaxWidth(
              /**
               * New value for property `maxWidth`
               */
              iMaxWidth: number
            ): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Sets a new value for property {@link #getSelected selected}.
             *
             * Shows if the node is selected. Once the node is selected, its appearance changes slightly to distinguish
             * it from other nodes.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `false`.
             */
            setSelected(
              /**
               * New value for property `selected`
               */
              bSelected: boolean
            ): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Sets a new value for property {@link #getShape shape}.
             *
             * Shape of the node. The shape is round by default. To create a rectangular node, set this property to
             * Box.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `Circle`.
             */
            setShape(
              /**
               * New value for property `shape`
               */
              sShape: sap.suite.ui.commons.networkgraph.NodeShape
            ): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Sets a new value for property {@link #getShowActionLinksButton showActionLinksButton}.
             *
             * Determines if the links button is visible.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `true`.
             */
            setShowActionLinksButton(
              /**
               * New value for property `showActionLinksButton`
               */
              bShowActionLinksButton: boolean
            ): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Sets a new value for property {@link #getShowDetailButton showDetailButton}.
             *
             * Determines if the details button is visible.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `true`.
             */
            setShowDetailButton(
              /**
               * New value for property `showDetailButton`
               */
              bShowDetailButton: boolean
            ): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Sets a new value for property {@link #getShowExpandButton showExpandButton}.
             *
             * Determines if the expand button is visible.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `true`.
             */
            setShowExpandButton(
              /**
               * New value for property `showExpandButton`
               */
              bShowExpandButton: boolean
            ): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Sets the width and height of the node.
             *  If you don't want to change the `height` and `width` properties, use this method to change the internal
             * width and height.
             */
            setSize(
              /**
               * Arguments passed to the method
               */
              mArguments: Object
            ): void;
            /**
             * Sets a new value for property {@link #getStatusIcon statusIcon}.
             *
             * An additional status icon displayed when the node is collapsed.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setStatusIcon(
              /**
               * New value for property `statusIcon`
               */
              sStatusIcon: string
            ): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Sets a new value for property {@link #getTitleLineSize titleLineSize}.
             *
             * Determines the maximum number of lines allowed for the node's label. If set to 0, the label may have
             * an unlimited number of lines.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `1`.
             */
            setTitleLineSize(
              /**
               * New value for property `titleLineSize`
               */
              iTitleLineSize: number
            ): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Sets a new value for property {@link #getVisible visible}.
             *
             * Whether the control should be visible on the screen. Node is still used for layouter.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `true`.
             */
            // @ts-ignore
            setVisible(
              /**
               * New value for property `visible`
               */
              bVisible: boolean
            ): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Sets a new value for property {@link #getWidth width}.
             *
             * Width of the node. If the width is not defined, the node expands, so it can fit the content.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `undefined`.
             */
            setWidth(
              /**
               * New value for property `width`
               */
              iWidth: number
            ): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Sets a new value for property {@link #getX x}.
             *
             * The x coordinate of the node. This value must be set after the layout algorithm has finished arranging
             * the graph. It may come from the input data but is not required for most layout algorithms.
             * Works only for `CustomLayout` or `NoopLayout` layout algorithms. Other layout algorithms override this
             * property. However, you can still change it using an `afterLayouting` event.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `0`.
             */
            setX(
              /**
               * New value for property `x`
               */
              fX: number
            ): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Sets a new value for property {@link #getY y}.
             *
             * The y coordinate of the node. This value must be set after the layout algorithm has finished arranging
             * the graph. It may come from the input data but is not required for most layout algorithms.
             * Works only for `CustomLayout` or `NoopLayout` layout algorithms. Other layout algorithms override this
             * property. However, you can still change it using an `afterLayouting` event.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `0`.
             */
            setY(
              /**
               * New value for property `y`
               */
              fY: number
            ): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Shows or hides the node's action buttons.
             */
            showActionButtons(
              /**
               * Indicates whether to hide or to show buttons
               */
              bShow: boolean
            ): void;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:collapseExpand collapseExpand} event of this
             * `sap.suite.ui.commons.networkgraph.Node`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Node` itself.
             *
             * This event is fired when the user clicks the node's collapse/expand button.
             */
            attachCollapseExpand(
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Node`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:headerCheckBoxPress headerCheckBoxPress} event
             * of this `sap.suite.ui.commons.networkgraph.Node`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Node` itself.
             *
             * This event is fired when the user selects or clears the Header checkbox.
             */
            attachHeaderCheckBoxPress(
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Node`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:hover hover} event of this `sap.suite.ui.commons.networkgraph.Node`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Node` itself.
             *
             * This event is fired when the user moves the mouse pointer over the node.
             */
            attachHover(
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Node`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Node;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.networkgraph.Node`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.networkgraph.Node` itself.
             *
             * This event is fired when the user clicks or taps the node.
             */
            attachPress(
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.networkgraph.Node`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.networkgraph.Node;
          }
          /**
           * @SINCE 1.50
           *
           * Holds information about node image.
           */
          class NodeImage extends sap.ui.core.Element {
            /**
             * Constructor for a new Node Image.
             *
             * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
             * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
             * of the syntax of the settings object.
             */
            constructor();

            /**
             * Creates a new subclass of class sap.suite.ui.commons.networkgraph.NodeImage with name `sClassName` and
             * enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Gets current value of property {@link #getHeight height}.
             *
             * Height of the image.
             */
            getHeight(): number;
            /**
             * Returns a metadata object for class sap.suite.ui.commons.networkgraph.NodeImage.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Gets current value of property {@link #getSrc src}.
             *
             * Relative or absolute path to the image file.
             */
            getSrc(): sap.ui.core.URI;
            /**
             * Gets current value of property {@link #getWidth width}.
             *
             * Width of the image.
             */
            getWidth(): number;
            /**
             * Sets a new value for property {@link #getHeight height}.
             *
             * Height of the image.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setHeight(
              /**
               * New value for property `height`
               */
              iHeight: number
            ): sap.suite.ui.commons.networkgraph.NodeImage;
            /**
             * Sets a new value for property {@link #getSrc src}.
             *
             * Relative or absolute path to the image file.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setSrc(
              /**
               * New value for property `src`
               */
              sSrc: sap.ui.core.URI
            ): sap.suite.ui.commons.networkgraph.NodeImage;
            /**
             * Sets a new value for property {@link #getWidth width}.
             *
             * Width of the image.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setWidth(
              /**
               * New value for property `width`
               */
              iWidth: number
            ): sap.suite.ui.commons.networkgraph.NodeImage;
          }
          /**
           * @SINCE 1.50
           *
           * The status element holds information about a custom status that can be applied to nodes, lines, and groups
           * of nodes.
           *
           *  You can create multiple custom statuses and assign them to your graph using the `statuses` aggregation
           * of the {@link sap.suite.ui.commons.networkgraph.Graph} control.
           *
           *  Alternatively, you can use default statuses provided by the {@link sap.suite.ui.commons.networkgraph.ElementStatus}
           * element.
           */
          class Status extends sap.ui.core.Element {
            /**
             * Constructor for a new Status.
             *
             * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
             * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
             * of the syntax of the settings object.
             */
            constructor();

            /**
             * Creates a new subclass of class sap.suite.ui.commons.networkgraph.Status with name `sClassName` and enriches
             * it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Gets current value of property {@link #getBackgroundColor backgroundColor}.
             *
             * Fill color.
             *  The fill color that is applied to elements and lines that are in this custom status.
             */
            getBackgroundColor(): string;
            /**
             * Gets current value of property {@link #getBorderColor borderColor}.
             *
             * Border color.
             *  The border color that is applied to elements in this custom status.
             */
            getBorderColor(): string;
            /**
             * Gets current value of property {@link #getBorderStyle borderStyle}.
             *
             * Style of the border. For {@link sap.suite.ui.commons.networkgraph.Line} elements use this value as parameter
             * for `stroke-dasharray`.
             */
            getBorderStyle(): string;
            /**
             * Gets current value of property {@link #getBorderWidth borderWidth}.
             *
             * Border width of the element in specific units (for example 2px).
             */
            getBorderWidth(): sap.ui.core.CSSSize;
            /**
             * Gets current value of property {@link #getContentColor contentColor}.
             *
             * Color of the content (text or icon) inside the node.
             *  The color is applied to a node's content when it enters this custom status.
             */
            getContentColor(): string;
            /**
             * Gets current value of property {@link #getHeaderContentColor headerContentColor}.
             *
             * Color of the header content (title and icon) of the node.
             *  Applicable only to the rectangular nodes.
             */
            getHeaderContentColor(): string;
            /**
             * Gets current value of property {@link #getHoverBackgroundColor hoverBackgroundColor}.
             *
             * Fill color on hover.
             *  The fill color of a custom status element, line, or group when you hover over it.
             */
            getHoverBackgroundColor(): string;
            /**
             * Gets current value of property {@link #getHoverBorderColor hoverBorderColor}.
             *
             * Border color on hover.
             *  The border color of a custom status element when you hover over it.
             */
            getHoverBorderColor(): string;
            /**
             * Gets current value of property {@link #getHoverContentColor hoverContentColor}.
             *
             * Content color on hover. Color of the content (text or icon) inside the custom status element when you
             * hover over it.
             */
            getHoverContentColor(): string;
            /**
             * Gets current value of property {@link #getKey key}.
             */
            getKey(): string;
            /**
             * Gets current value of property {@link #getLegendColor legendColor}.
             *
             * Color displayed in the graph's legend.
             *  If not set, the fill color defined in the `backgroundColor` property is used.
             */
            getLegendColor(): string;
            /**
             * Returns a metadata object for class sap.suite.ui.commons.networkgraph.Status.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Gets current value of property {@link #getSelectedBackgroundColor selectedBackgroundColor}.
             *
             * Fill color when selected.
             *  The fill color of a custom status element when you select it.
             */
            getSelectedBackgroundColor(): string;
            /**
             * Gets current value of property {@link #getSelectedBorderColor selectedBorderColor}.
             *
             * Border color when selected. The border color of a custom status element when you select it.
             */
            getSelectedBorderColor(): string;
            /**
             * Gets current value of property {@link #getSelectedContentColor selectedContentColor}.
             *
             * Content color when selected. Color of the content (text or icon) inside the custom status node when you
             * select it.
             */
            getSelectedContentColor(): string;
            /**
             * Gets current value of property {@link #getTitle title}.
             *
             * Title of the node.
             *  The title that is applied to elements that are in this custom status. The title is displayed in the
             * legend.
             */
            getTitle(): string;
            /**
             * Gets current value of property {@link #getUseFocusColorAsContentColor useFocusColorAsContentColor}.
             *
             * Defines whether the focus border should match the color of the content in focus. If false, the focus
             * border has the default color.
             * This property can be used only for nodes and groups of nodes.
             *
             * Default value is `false`.
             */
            getUseFocusColorAsContentColor(): boolean;
            /**
             * Sets a new value for property {@link #getBackgroundColor backgroundColor}.
             *
             * Fill color.
             *  The fill color that is applied to elements and lines that are in this custom status.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setBackgroundColor(
              /**
               * New value for property `backgroundColor`
               */
              sBackgroundColor: string
            ): sap.suite.ui.commons.networkgraph.Status;
            /**
             * Sets a new value for property {@link #getBorderColor borderColor}.
             *
             * Border color.
             *  The border color that is applied to elements in this custom status.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setBorderColor(
              /**
               * New value for property `borderColor`
               */
              sBorderColor: string
            ): sap.suite.ui.commons.networkgraph.Status;
            /**
             * Sets a new value for property {@link #getBorderStyle borderStyle}.
             *
             * Style of the border. For {@link sap.suite.ui.commons.networkgraph.Line} elements use this value as parameter
             * for `stroke-dasharray`.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setBorderStyle(
              /**
               * New value for property `borderStyle`
               */
              sBorderStyle: string
            ): sap.suite.ui.commons.networkgraph.Status;
            /**
             * Sets a new value for property {@link #getBorderWidth borderWidth}.
             *
             * Border width of the element in specific units (for example 2px).
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setBorderWidth(
              /**
               * New value for property `borderWidth`
               */
              sBorderWidth: sap.ui.core.CSSSize
            ): sap.suite.ui.commons.networkgraph.Status;
            /**
             * Sets a new value for property {@link #getContentColor contentColor}.
             *
             * Color of the content (text or icon) inside the node.
             *  The color is applied to a node's content when it enters this custom status.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setContentColor(
              /**
               * New value for property `contentColor`
               */
              sContentColor: string
            ): sap.suite.ui.commons.networkgraph.Status;
            /**
             * Sets a new value for property {@link #getHeaderContentColor headerContentColor}.
             *
             * Color of the header content (title and icon) of the node.
             *  Applicable only to the rectangular nodes.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setHeaderContentColor(
              /**
               * New value for property `headerContentColor`
               */
              sHeaderContentColor: string
            ): sap.suite.ui.commons.networkgraph.Status;
            /**
             * Sets a new value for property {@link #getHoverBackgroundColor hoverBackgroundColor}.
             *
             * Fill color on hover.
             *  The fill color of a custom status element, line, or group when you hover over it.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setHoverBackgroundColor(
              /**
               * New value for property `hoverBackgroundColor`
               */
              sHoverBackgroundColor: string
            ): sap.suite.ui.commons.networkgraph.Status;
            /**
             * Sets a new value for property {@link #getHoverBorderColor hoverBorderColor}.
             *
             * Border color on hover.
             *  The border color of a custom status element when you hover over it.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setHoverBorderColor(
              /**
               * New value for property `hoverBorderColor`
               */
              sHoverBorderColor: string
            ): sap.suite.ui.commons.networkgraph.Status;
            /**
             * Sets a new value for property {@link #getHoverContentColor hoverContentColor}.
             *
             * Content color on hover. Color of the content (text or icon) inside the custom status element when you
             * hover over it.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setHoverContentColor(
              /**
               * New value for property `hoverContentColor`
               */
              sHoverContentColor: string
            ): sap.suite.ui.commons.networkgraph.Status;
            /**
             * Sets a new value for property {@link #getKey key}.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setKey(
              /**
               * New value for property `key`
               */
              sKey: string
            ): sap.suite.ui.commons.networkgraph.Status;
            /**
             * Sets a new value for property {@link #getLegendColor legendColor}.
             *
             * Color displayed in the graph's legend.
             *  If not set, the fill color defined in the `backgroundColor` property is used.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setLegendColor(
              /**
               * New value for property `legendColor`
               */
              sLegendColor: string
            ): sap.suite.ui.commons.networkgraph.Status;
            /**
             * Sets a new value for property {@link #getSelectedBackgroundColor selectedBackgroundColor}.
             *
             * Fill color when selected.
             *  The fill color of a custom status element when you select it.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setSelectedBackgroundColor(
              /**
               * New value for property `selectedBackgroundColor`
               */
              sSelectedBackgroundColor: string
            ): sap.suite.ui.commons.networkgraph.Status;
            /**
             * Sets a new value for property {@link #getSelectedBorderColor selectedBorderColor}.
             *
             * Border color when selected. The border color of a custom status element when you select it.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setSelectedBorderColor(
              /**
               * New value for property `selectedBorderColor`
               */
              sSelectedBorderColor: string
            ): sap.suite.ui.commons.networkgraph.Status;
            /**
             * Sets a new value for property {@link #getSelectedContentColor selectedContentColor}.
             *
             * Content color when selected. Color of the content (text or icon) inside the custom status node when you
             * select it.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setSelectedContentColor(
              /**
               * New value for property `selectedContentColor`
               */
              sSelectedContentColor: string
            ): sap.suite.ui.commons.networkgraph.Status;
            /**
             * Sets a new value for property {@link #getTitle title}.
             *
             * Title of the node.
             *  The title that is applied to elements that are in this custom status. The title is displayed in the
             * legend.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setTitle(
              /**
               * New value for property `title`
               */
              sTitle: string
            ): sap.suite.ui.commons.networkgraph.Status;
            /**
             * Sets a new value for property {@link #getUseFocusColorAsContentColor useFocusColorAsContentColor}.
             *
             * Defines whether the focus border should match the color of the content in focus. If false, the focus
             * border has the default color.
             * This property can be used only for nodes and groups of nodes.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `false`.
             */
            setUseFocusColorAsContentColor(
              /**
               * New value for property `useFocusColorAsContentColor`
               */
              bUseFocusColorAsContentColor: boolean
            ): sap.suite.ui.commons.networkgraph.Status;
          }
          /**
           * @SINCE 1.50
           *
           * SvgBase class
           */
          class SvgBase extends sap.ui.core.Control {
            /**
             * Constructor for a new ElementBase.
             *
             * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
             * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
             * of the syntax of the settings object.
             */
            constructor();

            /**
             * Creates a new subclass of class sap.suite.ui.commons.networkgraph.SvgBase with name `sClassName` and
             * enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Returns a metadata object for class sap.suite.ui.commons.networkgraph.SvgBase.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
          }
          /**
           * Position of a custom action button.
           */
          enum ActionButtonPosition {
            /**
             * The action button is aligned to the left.
             */
            Left,
            /**
             * The action button is aligned to the right.
             */
            Right
          }
          /**
           * Background color for the network graph.
           */
          enum BackgroundColor {
            /**
             * The default color of the parent container is used.
             */
            Default,
            /**
             * White.
             */
            White
          }
          /**
           * Semantic type of the node status.
           */
          enum ElementStatus {
            /**
             * A node type that communicates an error.
             */
            Error,
            /**
             * A node type that communicates information.
             */
            Information,
            /**
             * A standard node
             */
            Standard,
            /**
             * A node type that communicates success.
             */
            Success,
            /**
             * A node type that communicates a warning.
             */
            Warning
          }
          /**
           * States of the Header checkbox.
           */
          enum HeaderCheckboxState {
            /**
             * Checkbox is visible and selected.
             */
            Checked,
            /**
             * Checkbox is not visible.
             */
            Hidden,
            /**
             * Checkbox is visible and not selected.
             */
            Unchecked
          }
          /**
           * Types of layout algorithms that define the visual features and layout of the network graph.
           */
          enum LayoutRenderType {
            /**
             * Algorithm that arranges the nodes freely in a force-directed manner, based on the attractive and repulsive
             * forces within the graph.
             *  This layout algorithm ignores node groups, so all nodes appear as standalone nodes not grouped in any
             * way.
             */
            Forces,
            /**
             * Algorithm that arranges nodes into layers and ensures support for free-form groups.
             */
            LayeredWithGroups,
            /**
             * Algorithm that arranges nodes into swim lanes, which are single-layer groups.
             */
            SwimLanes,
            /**
             * Algorithm that supports nested groups, similar to `SwimLanes`, but arranges them into two columns only:
             * one on the left and one on the right.
             */
            TwoColumns
          }
          /**
           * Direction of the arrow on the connector line.
           */
          enum LineArrowOrientation {
            /**
             * The arrows on the line point both ways.
             */
            Both,
            /**
             * The arrow points from child to parent.
             */
            ChildOf,
            /**
             * The arrow is hidden.
             */
            None,
            /**
             * The arrow points from parent to child.
             */
            ParentOf
          }
          /**
           * Position of the arrow on a connector line.
           */
          enum LineArrowPosition {
            /**
             * The arrow is placed at the end of the last line segment.
             */
            End,
            /**
             * The arrow is placed in the middle of the last line segment. If the line has only one segment, the arrow
             * appears in the middle of the line.
             */
            Middle,
            /**
             * The arrow is placed at the beginning of the first line segment.
             */
            Start
          }
          /**
           * Type of connector line used in the network graph.
           */
          enum LineType {
            /**
             * Dashed connector line.
             */
            Dashed,
            /**
             * Dotted connector line.
             */
            Dotted,
            /**
             * Solid connector line.
             */
            Solid
          }
          /**
           * Type of node placement for Layered Algorithm. See {@link https://rtsys.informatik.uni-kiel.de/confluence/display/KIELER/KLay+Layered+Layout+Options#KLayLayeredLayoutOptions-nodePlacement}
           */
          enum NodePlacement {
            /**
             * Minimizes the number of edge bends at the expense of the graph size.
             */
            BrandesKoepf,
            /**
             * Calculates the most optimal layout balance.
             */
            LinearSegments,
            /**
             * Minimizes the area taken by the graph at the expense of everything else.
             */
            Simple
          }
          /**
           * Shape of a node in a network graph.
           */
          enum NodeShape {
            /**
             * Rectangular shape with an optional list of attributes.
             */
            Box,
            /**
             * Round shape with a text label below.
             */
            Circle,
            /**
             * Shape for custom rendering.
             */
            Custom
          }
          /**
           * Orientation of layered layout.
           */
          enum Orientation {
            /**
             * The flow of the graph is bottom to top.
             */
            BottomTop,
            /**
             * The flow of the graph is left to right.
             */
            LeftRight,
            /**
             * The flow of the graph is right to left.
             */
            RightLeft,
            /**
             * The flow of the graph is top to bottom.
             */
            TopBottom
          }
          /**
           * Determines how nodes are rendered. For optimal performance and usability, it is recommended that you
           * use HTML, which allows you to avoid dealing with SVG limitations.
           */
          enum RenderType {
            /**
             * Nodes are rendered as classic HTML.
             */
            Html,
            /**
             * Nodes are rendered as SVG.
             */
            Svg
          }
        }

        namespace statusindicator {
          interface CircleOpts
            extends sap.suite.ui.commons.statusindicator.SimpleShapeOpts {
            /**
             * Defines the x coordinate of the center of the circle with respect to its parent status indicator.
             */
            cx?: number;

            /**
             * Defines the y coordinate of the center of the circle with respect to its parent status indicator.
             */
            cy?: number;

            /**
             * Defines the radius of the circle.
             */
            r?: number;
          }

          interface CustomShapeOpts
            extends sap.suite.ui.commons.statusindicator.ShapeOpts {
            /**
             * Defines the x coordinate of the upper-left corner of the bounding rectangle.
             */
            x?: number;

            /**
             * Defines the y coordinate of the upper-left corner of the bounding rectangle.
             */
            y?: number;

            /**
             * Defines the width of the bounding rectangle.
             */
            width?: sap.ui.core.CSSSize;

            /**
             * Defines the height of the bounding rectangle.
             */
            height?: sap.ui.core.CSSSize;

            /**
             * Specifies the color of the shape's outline.
             */
            strokeColor?: sap.m.ValueCSSColor;

            /**
             * Specifies the width of the shape's outline.
             */
            strokeWidth?: number;

            /**
             * A valid XML fragment that contains an <svg> element that complies with the following requirements:
             *
             * 	 - It includes no SVG groups (<g> elements).
             * 	 - It includes no <defs> elements.  The SVG element is transformed into a status indicator
             * 			shape in the following way:
             * 	 - The `viewBox` attribute of the root SVG element is respected and kept after the transformation.
             * 	 - The inline styles of SVG shapes are respected, and shapes with such inline styles are not considered
             * 			to be fillable.
             * 	 - The SVG shapes without classes are considered fillable.
             * 	 - If there are multiple fillable shapes, each shape element must have a `data-shape-id` attribute that
             * 			is set to a unique value.  Example:
             * ```javascript
             *
             *   <svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 30 30" xml:space="preserve">
             *      <path style="fill:blue;" d="M14.664,29...." />
             *      <path style="fill:blue;" d="M13.626,25...." />
             *      <path data-shape-id="fill-1" d="M15.337,21...." />
             *      <path data-shape-id="fill-2" d="M13.626,17...." />
             *      <path data-shape-id="fill-3" d="M15.337,14...." />
             *      <path data-shape-id="fill-4" d="M13.107,10...." />
             *   </svg>
             * ```
             *  The first two paths in this example are filled with blue color. The last four shape elements are filled
             * gradually, as the status indicator's value changes.
             *
             * Please note that the SVG element must be escaped when used directly as an attribute in the XML view.
             */
            definition?: string;

            /**
             * Read-only aggregation that contains simple shapes transformed from the SVG definition.
             */
            shapes?:
              | sap.suite.ui.commons.statusindicator.SimpleShape[]
              | sap.suite.ui.commons.statusindicator.SimpleShape;

            /**
             * Defines the order and weight of fillable shapes based on the status indicator value distribution. If
             * this aggregation is not used, the shapes are filled in the order they are specified in the SVG definition.
             */
            fillingOptions?:
              | sap.suite.ui.commons.statusindicator.FillingOption[]
              | sap.suite.ui.commons.statusindicator.FillingOption;
          }

          interface DiscreteThresholdOpts extends sap.ui.core.ControlOpts {
            /**
             * Defines the value threshold. This value is displayed when the status indicator's percentage value is
             * above or equal to this value but below the value of the next threshold.
             */
            value?: number;

            /**
             * ARIA label for this threshold to be used by screen reader software.
             */
            ariaLabel?: string;
          }

          interface FillingOptionOpts extends sap.ui.core.ControlOpts {
            /**
             * ID of the fillable SVG shape included in a custom shape.
             */
            shapeId?: string;

            /**
             * Weight of the fillable shape, relative to other fillable shapes included in this custom shape. This property
             * allows you to distribute the status indicator's value between distinct SVG shapes included in the custom
             * shape. For example, for four SVG shapes with weights 1, 2, 3, and 4 (total weight 10), the status indicator's
             * value is distributed in the following way:
             * 	 - If the status indicator's value is below 10% (1 out of 10), the first SVG shape (weight 1) is partially
             * 			filled, depending on the percentage value. For example, if the percentage value of the status indicator
             * 			is 5, the first SVG shape appears half-full. The rest of the SVG shapes appear empty.
             * 	 - If the status indicator's value is at least 10% but below 30%, the first SVG shape (weight 1) is
             * 			filled, and the second shape (weight 2) is filled only partially, depending on the percentage value.
             * 			The rest of the SVG shapes in this custom shape appear empty.
             * 	 - If the status indicator's value is at least 30% but below 60%, the first two SVG shapes (weight 1
             * 			and 2) are filled, and the third SVG shape (weight 3) is filled only partially. The fourth SVG shape
             * 			(weight 4) appears empty.
             * 	 - If the status indicator's value is at least 60% but below 100%, the first three SVG shapes (weight
             * 			1, 2, and 3) are filled, but the fourth SVG shape is filled only partially, depending on the percentage
             * 			value.
             * 	 - If the status indicator's value is 100, all four SVG shapes appear filled.
             */
            weight?: number;

            /**
             * Order in which this fillable SVG shape must be filled, relative to other SVG shapes included in the custom
             * shape. For example, if you have three SVG shapes with order values 1, 2, and 4 assigned, the first shape
             * will be filled first, then the second shape, and, finally, the third shape, regardless of their order
             * in the SVG definition. The value of this property must be unique.
             */
            order?: number;
          }

          interface LibraryShapeOpts
            extends sap.suite.ui.commons.statusindicator.CustomShapeOpts {
            /**
             * An ID associated with a specific shape from the shape library.
             */
            shapeId?: string;

            /**
             * This event is fired when the definition of shape is loaded.
             */
            afterShapeLoaded?: Function;
          }

          interface PathOpts
            extends sap.suite.ui.commons.statusindicator.SimpleShapeOpts {
            /**
             * Specifies the path that outlines the shape. The format is identical to the `d` attribute of the `<path>`
             * SVG element.
             */
            d?: string;
          }

          interface PropertyThresholdOpts extends sap.ui.core.ControlOpts {
            /**
             * Defines the color used to fill the shapes included in the status indicator.
             */
            fillColor?: sap.m.ValueCSSColor;

            /**
             * Defines the maximum value up to which the threshold setting should apply.
             */
            toValue?: number;

            /**
             * ARIA label for this threshold to be used by screen reader software.
             */
            ariaLabel?: string;
          }

          interface RectangleOpts
            extends sap.suite.ui.commons.statusindicator.SimpleShapeOpts {
            /**
             * Defines the x coordinate of the upper-left corner of the rectangle.
             */
            x?: number;

            /**
             * Defines the y coordinate of the upper-left corner of the rectangle.
             */
            y?: number;

            /**
             * Defines the horizontal corner radius of the rectangle. If set to 0, the corners are not rounded.
             */
            rx?: number;

            /**
             * Defines the vertical corner radius of the rectangle. If set to 0, the corners are not rounded.
             */
            ry?: number;

            /**
             * Defines the width of the rectangle.
             */
            width?: number;

            /**
             * Defines the height of the rectangle.
             */
            height?: number;
          }

          interface ShapeOpts extends sap.ui.core.ControlOpts {
            /**
             * @deprecated (since 1.54.1) - All animations are now limited to 250 ms.
             *
             * Specifies the duration, in milliseconds, of the animation that would fill an empty shape to the full.
             * The actual time it takes to change the shape's filling is proportional to the difference between the
             * initial and the target status indicator's value. For example, a change from 20 percent to 70 percent
             * takes only half of the time specified in the `fullAnimationDuration` property. If this property is set
             * to `0`, changes are applied instantly without any animation.
             */
            fullAnimationDuration?: number;

            /**
             * Defines the color of the shape's fill.
             */
            fillColor?: sap.m.ValueCSSColor;

            /**
             * @deprecated (since 1.54.1) - Use the animationOnChange property instead.
             *
             * Defines if the initial value of the status indicator should be animated or directly displayed on startup.
             * By default, it's displayed on startup without any animation.
             */
            animationOnStartup?: boolean;

            /**
             * Defines if the change in the status indicator value should be animated or not.
             *  When set to `true`, the change in value is animated.
             */
            animationOnChange?: boolean;

            /**
             * @deprecated
             *
             * Specifies the delay of the initial value animation. Only applicable if the `animationOnStartup` property
             * is set to `true`.
             */
            animationOnStartupDelay?: number;

            /**
             * Defines the direction in which the shape is filled.
             */
            fillingDirection?: sap.suite.ui.commons.statusindicator.FillingDirectionType;

            /**
             * Defines the type of the shape's fill.
             */
            fillingType?: sap.suite.ui.commons.statusindicator.FillingType;

            /**
             * Defines the angle at which the shape is filled. This property overrides the `fillingDirection` property.
             *  Accepted values include `0` through `360` degrees.
             *  For example, if you set the filling angle to `45`, the shape will be filled diagonally from the lower
             * right part of the shape to its upper left part.
             *  This property can be used only when {@link sap.suite.ui.commons.statusindicator.FillingType} is set
             * to `Linear`.
             */
            fillingAngle?: number;

            /**
             * Defines the vertical alignment of the shape within its parent container.
             */
            verticalAlignment?: sap.suite.ui.commons.statusindicator.VerticalAlignmentType;

            /**
             * Defines the horizontal alignment of the shape within its parent container.
             */
            horizontalAlignment?: sap.suite.ui.commons.statusindicator.HorizontalAlignmentType;
          }

          interface ShapeGroupOpts extends sap.ui.core.ControlOpts {
            /**
             * Weight of the group, relative to other groups in the status indicator. This property allows you to distribute
             * the status indicator's value between groups of shapes that it contains. For example, for three groups
             * with weights 10, 10, and 20 (total weight 40), the status indicator's value is distributed in the following
             * way:
             * 	 - If the status indicator's value is below 25% (10 out of 40), the first group of shapes (weight 10)
             * 			is partially filled, depending on the percentage value. For example, if the percentage value is 5, the
             * 			first group of shapes is 1/5-full. The second and the third groups are empty.
             * 	 - If the status indicator's value is at least 25% but below 50%, the first group of shapes (weight
             * 			10) is filled, the second group (also weight 10) is partially filled, and the third group (weight 20)
             * 			appears empty.
             * 	 - If the status indicator's value is at least 50% but below 100%, the first two groups of shapes (weight
             * 			10 each) are filled, but the third group (weight 20) is only partially filled.
             * 	 - If the status indicator's value is 100, all three groups of shapes are filled.
             */
            weight?: number;

            /**
             * List of shapes that belong to this group.
             */
            shapes?:
              | sap.suite.ui.commons.statusindicator.Shape[]
              | sap.suite.ui.commons.statusindicator.Shape;
          }

          interface SimpleShapeOpts
            extends sap.suite.ui.commons.statusindicator.ShapeOpts {
            /**
             * Specifies the width of the shape's outline.
             */
            strokeWidth?: number;

            /**
             * Specifies the color of the shape's outline.
             */
            strokeColor?: sap.m.ValueCSSColor;
          }

          interface StatusIndicatorOpts extends sap.ui.core.ControlOpts {
            /**
             * Width of the status indicator. Only sets the width of the image part of the status indicator, potential
             * label is not included. The root div of the status indicator is set as display: "block" and so takes up
             * the whole space available. Wrap status indicator in {@link sap.m.FlexBox} control if you wish to control
             * width of the whole status indicator.
             */
            width?: sap.ui.core.CSSSize;

            /**
             * Height of the status indicator. Only sets the height of the image part of the status indicator, potential
             * label is not included.
             */
            height?: sap.ui.core.CSSSize;

            /**
             * Percentage value, between 0 and 100, that the status indicator reflects.
             */
            value?: number;

            /**
             * Defines the view box surrounding the shapes included in the status indicator.
             */
            viewBox?: string;

            /**
             * ARIA label for this control to be used by screen reader software.
             */
            ariaLabel?: string;

            /**
             * Predefined sizes for the status indicator.
             */
            size?: sap.suite.ui.commons.statusindicator.SizeType;

            labelPosition?: sap.suite.ui.commons.statusindicator.LabelPositionType;

            showLabel?: boolean;

            /**
             * This event is fired when the user clicks or taps the status indicator.
             */
            press?: Function;

            /**
             * Groups of shapes that display the status indicator's percentage value. A status indicator must always
             * include at least one group.
             */
            groups?:
              | sap.suite.ui.commons.statusindicator.ShapeGroup[]
              | sap.suite.ui.commons.statusindicator.ShapeGroup;

            /**
             * Defines how shapes are filled based on the status indicator's percentage value.
             */
            propertyThresholds?:
              | sap.suite.ui.commons.statusindicator.PropertyThreshold[]
              | sap.suite.ui.commons.statusindicator.PropertyThreshold;

            /**
             * Specifies discrete thresholds for the status indicator. If discrete thresholds are set, the status indicator
             * adjusts its appearance to the closest threshold value that is not greater than the actual percentage
             * value of the status indicator. For example, if the following discrete thresholds are specified:
             *
             * 	 - `value = "20"`
             * 	 - `value = "60"`
             * 	 - `value = "100"`  The status indicator displays the following percentage values:
             * 	 - `0` if the actual value is 15
             * 	 - `20` if the actual value is 20
             * 	 - `20` if the actual value is 55
             * 	 - `60` if the actual value is 60
             * 	 - `60` if the actual value is 79
             * 	 - `100` if the actual value is 100  Please note that these thresholds affect only the appearance
             * 			of the status inicator, not its stored value.
             */
            discreteThresholds?:
              | sap.suite.ui.commons.statusindicator.DiscreteThreshold[]
              | sap.suite.ui.commons.statusindicator.DiscreteThreshold;

            label?: sap.m.Text;

            /**
             * Controls or IDs that provide a description for this control. Can be used by screen reader software.
             */
            ariaDescribedBy?: sap.ui.core.Control[] | string[];

            /**
             * Controls or IDs that label this control. Can be used by screen reader software.
             */
            ariaLabelledBy?: sap.ui.core.Control[] | string[];
          }
          /**
           * @SINCE 1.50
           *
           * Status indicator shape in the form of a circle.
           */
          class Circle extends sap.suite.ui.commons.statusindicator
            .SimpleShape {
            /**
             * Constructor for a new Circle.
             *
             * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
             * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
             * of the syntax of the settings object.
             */
            constructor(
              /**
               * id for the new control, generated automatically if no id is given
               */
              sId?: string,
              /**
               * initial settings for the new control
               */
              mSettings?: CircleOpts
            );

            /**
             * Creates a new subclass of class sap.suite.ui.commons.statusindicator.Circle with name `sClassName` and
             * enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.statusindicator.SimpleShape.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Gets current value of property {@link #getCx cx}.
             *
             * Defines the x coordinate of the center of the circle with respect to its parent status indicator.
             *
             * Default value is `0`.
             */
            getCx(): number;
            /**
             * Gets current value of property {@link #getCy cy}.
             *
             * Defines the y coordinate of the center of the circle with respect to its parent status indicator.
             *
             * Default value is `0`.
             */
            getCy(): number;
            /**
             * Returns a metadata object for class sap.suite.ui.commons.statusindicator.Circle.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Gets current value of property {@link #getR r}.
             *
             * Defines the radius of the circle.
             *
             * Default value is `0`.
             */
            getR(): number;
            /**
             * Sets a new value for property {@link #getCx cx}.
             *
             * Defines the x coordinate of the center of the circle with respect to its parent status indicator.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `0`.
             */
            setCx(
              /**
               * New value for property `cx`
               */
              fCx: number
            ): sap.suite.ui.commons.statusindicator.Circle;
            /**
             * Sets a new value for property {@link #getCy cy}.
             *
             * Defines the y coordinate of the center of the circle with respect to its parent status indicator.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `0`.
             */
            setCy(
              /**
               * New value for property `cy`
               */
              fCy: number
            ): sap.suite.ui.commons.statusindicator.Circle;
            /**
             * Sets a new value for property {@link #getR r}.
             *
             * Defines the radius of the circle.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `0`.
             */
            setR(
              /**
               * New value for property `r`
               */
              fR: number
            ): sap.suite.ui.commons.statusindicator.Circle;
          }
          /**
           * @SINCE 1.50
           *
           * Custom shape that is defined directly as SVG.
           */
          class CustomShape extends sap.suite.ui.commons.statusindicator.Shape {
            /**
             * Constructor for a new CustomShape.
             *
             * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
             * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
             * of the syntax of the settings object.
             */
            constructor(
              /**
               * id for the new control, generated automatically if no id is given
               */
              sId?: string,
              /**
               * initial settings for the new control
               */
              mSettings?: CustomShapeOpts
            );

            /**
             * Adds some fillingOption to the aggregation {@link #getFillingOptions fillingOptions}.
             */
            addFillingOption(
              /**
               * The fillingOption to add; if empty, nothing is inserted
               */
              oFillingOption: sap.suite.ui.commons.statusindicator.FillingOption
            ): sap.suite.ui.commons.statusindicator.CustomShape;
            /**
             * Adds some shape to the aggregation {@link #getShapes shapes}.
             */
            addShape(
              /**
               * The shape to add; if empty, nothing is inserted
               */
              oShape: sap.suite.ui.commons.statusindicator.SimpleShape
            ): sap.suite.ui.commons.statusindicator.CustomShape;
            /**
             * Destroys all the fillingOptions in the aggregation {@link #getFillingOptions fillingOptions}.
             */
            destroyFillingOptions(): sap.suite.ui.commons.statusindicator.CustomShape;
            /**
             * Destroys all the shapes in the aggregation {@link #getShapes shapes}.
             */
            destroyShapes(): sap.suite.ui.commons.statusindicator.CustomShape;
            /**
             * Creates a new subclass of class sap.suite.ui.commons.statusindicator.CustomShape with name `sClassName`
             * and enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.statusindicator.Shape.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Gets current value of property {@link #getDefinition definition}.
             *
             * A valid XML fragment that contains an <svg> element that complies with the following requirements:
             *
             * 	 - It includes no SVG groups (<g> elements).
             * 	 - It includes no <defs> elements.  The SVG element is transformed into a status indicator
             * 			shape in the following way:
             * 	 - The `viewBox` attribute of the root SVG element is respected and kept after the transformation.
             * 	 - The inline styles of SVG shapes are respected, and shapes with such inline styles are not considered
             * 			to be fillable.
             * 	 - The SVG shapes without classes are considered fillable.
             * 	 - If there are multiple fillable shapes, each shape element must have a `data-shape-id` attribute that
             * 			is set to a unique value.  Example:
             * ```javascript
             *
             *   <svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 30 30" xml:space="preserve">
             *      <path style="fill:blue;" d="M14.664,29...." />
             *      <path style="fill:blue;" d="M13.626,25...." />
             *      <path data-shape-id="fill-1" d="M15.337,21...." />
             *      <path data-shape-id="fill-2" d="M13.626,17...." />
             *      <path data-shape-id="fill-3" d="M15.337,14...." />
             *      <path data-shape-id="fill-4" d="M13.107,10...." />
             *   </svg>
             * ```
             *  The first two paths in this example are filled with blue color. The last four shape elements are filled
             * gradually, as the status indicator's value changes.
             *
             * Please note that the SVG element must be escaped when used directly as an attribute in the XML view.
             */
            getDefinition(): string;
            /**
             * Gets content of aggregation {@link #getFillingOptions fillingOptions}.
             *
             * Defines the order and weight of fillable shapes based on the status indicator value distribution. If
             * this aggregation is not used, the shapes are filled in the order they are specified in the SVG definition.
             */
            getFillingOptions(): sap.suite.ui.commons.statusindicator.FillingOption[];
            /**
             * Gets current value of property {@link #getHeight height}.
             *
             * Defines the height of the bounding rectangle.
             *
             * Default value is `100%`.
             */
            getHeight(): sap.ui.core.CSSSize;
            /**
             * Returns a metadata object for class sap.suite.ui.commons.statusindicator.CustomShape.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Gets content of aggregation {@link #getShapes shapes}.
             *
             * Read-only aggregation that contains simple shapes transformed from the SVG definition.
             */
            getShapes(): sap.suite.ui.commons.statusindicator.SimpleShape[];
            /**
             * Gets current value of property {@link #getStrokeColor strokeColor}.
             *
             * Specifies the color of the shape's outline.
             *
             * Default value is `Neutral`.
             */
            getStrokeColor(): sap.m.ValueCSSColor;
            /**
             * Gets current value of property {@link #getStrokeWidth strokeWidth}.
             *
             * Specifies the width of the shape's outline.
             *
             * Default value is `0.25`.
             */
            getStrokeWidth(): number;
            /**
             * Gets current value of property {@link #getWidth width}.
             *
             * Defines the width of the bounding rectangle.
             *
             * Default value is `100%`.
             */
            getWidth(): sap.ui.core.CSSSize;
            /**
             * Gets current value of property {@link #getX x}.
             *
             * Defines the x coordinate of the upper-left corner of the bounding rectangle.
             *
             * Default value is `0`.
             */
            getX(): number;
            /**
             * Gets current value of property {@link #getY y}.
             *
             * Defines the y coordinate of the upper-left corner of the bounding rectangle.
             *
             * Default value is `0`.
             */
            getY(): number;
            /**
             * Checks for the provided `sap.suite.ui.commons.statusindicator.FillingOption` in the aggregation {@link
             * #getFillingOptions fillingOptions}. and returns its index if found or -1 otherwise.
             */
            indexOfFillingOption(
              /**
               * The fillingOption whose index is looked for
               */
              oFillingOption: sap.suite.ui.commons.statusindicator.FillingOption
            ): number;
            /**
             * Checks for the provided `sap.suite.ui.commons.statusindicator.SimpleShape` in the aggregation {@link
             * #getShapes shapes}. and returns its index if found or -1 otherwise.
             */
            indexOfShape(
              /**
               * The shape whose index is looked for
               */
              oShape: sap.suite.ui.commons.statusindicator.SimpleShape
            ): number;
            /**
             * Inserts a fillingOption into the aggregation {@link #getFillingOptions fillingOptions}.
             */
            insertFillingOption(
              /**
               * The fillingOption to insert; if empty, nothing is inserted
               */
              oFillingOption: sap.suite.ui.commons.statusindicator.FillingOption,
              /**
               * The `0`-based index the fillingOption should be inserted at; for a negative value of `iIndex`, the fillingOption
               * is inserted at position 0; for a value greater than the current size of the aggregation, the fillingOption
               * is inserted at the last position
               */
              iIndex: number
            ): sap.suite.ui.commons.statusindicator.CustomShape;
            /**
             * Inserts a shape into the aggregation {@link #getShapes shapes}.
             */
            insertShape(
              /**
               * The shape to insert; if empty, nothing is inserted
               */
              oShape: sap.suite.ui.commons.statusindicator.SimpleShape,
              /**
               * The `0`-based index the shape should be inserted at; for a negative value of `iIndex`, the shape is inserted
               * at position 0; for a value greater than the current size of the aggregation, the shape is inserted at
               * the last position
               */
              iIndex: number
            ): sap.suite.ui.commons.statusindicator.CustomShape;
            /**
             * Removes all the controls from the aggregation {@link #getFillingOptions fillingOptions}.
             *
             * Additionally, it unregisters them from the hosting UIArea.
             */
            removeAllFillingOptions(): sap.suite.ui.commons.statusindicator.FillingOption[];
            /**
             * Removes all the controls from the aggregation {@link #getShapes shapes}.
             *
             * Additionally, it unregisters them from the hosting UIArea.
             */
            removeAllShapes(): sap.suite.ui.commons.statusindicator.SimpleShape[];
            /**
             * Removes a fillingOption from the aggregation {@link #getFillingOptions fillingOptions}.
             */
            removeFillingOption(
              /**
               * The fillingOption to remove or its index or id
               */
              vFillingOption:
                | number
                | string
                | sap.suite.ui.commons.statusindicator.FillingOption
            ): sap.suite.ui.commons.statusindicator.FillingOption;
            /**
             * Removes a shape from the aggregation {@link #getShapes shapes}.
             */
            removeShape(
              /**
               * The shape to remove or its index or id
               */
              vShape:
                | number
                | string
                | sap.suite.ui.commons.statusindicator.SimpleShape
            ): sap.suite.ui.commons.statusindicator.SimpleShape;
            /**
             * Sets a new value for property {@link #getDefinition definition}.
             *
             * A valid XML fragment that contains an <svg> element that complies with the following requirements:
             *
             * 	 - It includes no SVG groups (<g> elements).
             * 	 - It includes no <defs> elements.  The SVG element is transformed into a status indicator
             * 			shape in the following way:
             * 	 - The `viewBox` attribute of the root SVG element is respected and kept after the transformation.
             * 	 - The inline styles of SVG shapes are respected, and shapes with such inline styles are not considered
             * 			to be fillable.
             * 	 - The SVG shapes without classes are considered fillable.
             * 	 - If there are multiple fillable shapes, each shape element must have a `data-shape-id` attribute that
             * 			is set to a unique value.  Example:
             * ```javascript
             *
             *   <svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 30 30" xml:space="preserve">
             *      <path style="fill:blue;" d="M14.664,29...." />
             *      <path style="fill:blue;" d="M13.626,25...." />
             *      <path data-shape-id="fill-1" d="M15.337,21...." />
             *      <path data-shape-id="fill-2" d="M13.626,17...." />
             *      <path data-shape-id="fill-3" d="M15.337,14...." />
             *      <path data-shape-id="fill-4" d="M13.107,10...." />
             *   </svg>
             * ```
             *  The first two paths in this example are filled with blue color. The last four shape elements are filled
             * gradually, as the status indicator's value changes.
             *
             * Please note that the SVG element must be escaped when used directly as an attribute in the XML view.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setDefinition(
              /**
               * New value for property `definition`
               */
              sDefinition: string
            ): sap.suite.ui.commons.statusindicator.CustomShape;
            /**
             * Sets a new value for property {@link #getHeight height}.
             *
             * Defines the height of the bounding rectangle.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `100%`.
             */
            setHeight(
              /**
               * New value for property `height`
               */
              sHeight: sap.ui.core.CSSSize
            ): sap.suite.ui.commons.statusindicator.CustomShape;
            /**
             * Sets a new value for property {@link #getStrokeColor strokeColor}.
             *
             * Specifies the color of the shape's outline.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `Neutral`.
             */
            setStrokeColor(
              /**
               * New value for property `strokeColor`
               */
              sStrokeColor: sap.m.ValueCSSColor
            ): sap.suite.ui.commons.statusindicator.CustomShape;
            /**
             * Sets a new value for property {@link #getStrokeWidth strokeWidth}.
             *
             * Specifies the width of the shape's outline.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `0.25`.
             */
            setStrokeWidth(
              /**
               * New value for property `strokeWidth`
               */
              fStrokeWidth: number
            ): sap.suite.ui.commons.statusindicator.CustomShape;
            /**
             * Sets a new value for property {@link #getWidth width}.
             *
             * Defines the width of the bounding rectangle.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `100%`.
             */
            setWidth(
              /**
               * New value for property `width`
               */
              sWidth: sap.ui.core.CSSSize
            ): sap.suite.ui.commons.statusindicator.CustomShape;
            /**
             * Sets a new value for property {@link #getX x}.
             *
             * Defines the x coordinate of the upper-left corner of the bounding rectangle.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `0`.
             */
            setX(
              /**
               * New value for property `x`
               */
              iX: number
            ): sap.suite.ui.commons.statusindicator.CustomShape;
            /**
             * Sets a new value for property {@link #getY y}.
             *
             * Defines the y coordinate of the upper-left corner of the bounding rectangle.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `0`.
             */
            setY(
              /**
               * New value for property `y`
               */
              iY: number
            ): sap.suite.ui.commons.statusindicator.CustomShape;
          }
          /**
           * @SINCE 1.50
           *
           * Discrete threshold specifies which values should be displayed by the status indicator.
           */
          class DiscreteThreshold extends sap.ui.core.Control {
            /**
             * Constructor for a new DiscreteThreshold.
             *
             * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
             * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
             * of the syntax of the settings object.
             */
            constructor(
              /**
               * id for the new control, generated automatically if no id is given
               */
              sId?: string,
              /**
               * initial settings for the new control
               */
              mSettings?: DiscreteThresholdOpts
            );

            /**
             * Creates a new subclass of class sap.suite.ui.commons.statusindicator.DiscreteThreshold with name `sClassName`
             * and enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Gets current value of property {@link #getAriaLabel ariaLabel}.
             *
             * ARIA label for this threshold to be used by screen reader software.
             */
            getAriaLabel(): string;
            /**
             * Returns a metadata object for class sap.suite.ui.commons.statusindicator.DiscreteThreshold.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Gets current value of property {@link #getValue value}.
             *
             * Defines the value threshold. This value is displayed when the status indicator's percentage value is
             * above or equal to this value but below the value of the next threshold.
             *
             * Default value is `0`.
             */
            getValue(): number;
            /**
             * Sets a new value for property {@link #getAriaLabel ariaLabel}.
             *
             * ARIA label for this threshold to be used by screen reader software.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setAriaLabel(
              /**
               * New value for property `ariaLabel`
               */
              sAriaLabel: string
            ): sap.suite.ui.commons.statusindicator.DiscreteThreshold;
            /**
             * Sets a new value for property {@link #getValue value}.
             *
             * Defines the value threshold. This value is displayed when the status indicator's percentage value is
             * above or equal to this value but below the value of the next threshold.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `0`.
             */
            setValue(
              /**
               * New value for property `value`
               */
              iValue: number
            ): sap.suite.ui.commons.statusindicator.DiscreteThreshold;
          }
          /**
           * @SINCE 1.50
           *
           * Filling options for an SVG shape included in a custom shape.
           */
          class FillingOption extends sap.ui.core.Control {
            /**
             * Constructor for a new FillingOption.
             *
             * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
             * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
             * of the syntax of the settings object.
             */
            constructor(
              /**
               * id for the new control, generated automatically if no id is given
               */
              sId?: string,
              /**
               * initial settings for the new control
               */
              mSettings?: FillingOptionOpts
            );

            /**
             * Creates a new subclass of class sap.suite.ui.commons.statusindicator.FillingOption with name `sClassName`
             * and enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Returns a metadata object for class sap.suite.ui.commons.statusindicator.FillingOption.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Gets current value of property {@link #getOrder order}.
             *
             * Order in which this fillable SVG shape must be filled, relative to other SVG shapes included in the custom
             * shape. For example, if you have three SVG shapes with order values 1, 2, and 4 assigned, the first shape
             * will be filled first, then the second shape, and, finally, the third shape, regardless of their order
             * in the SVG definition. The value of this property must be unique.
             */
            getOrder(): number;
            /**
             * Gets current value of property {@link #getShapeId shapeId}.
             *
             * ID of the fillable SVG shape included in a custom shape.
             */
            getShapeId(): string;
            /**
             * Gets current value of property {@link #getWeight weight}.
             *
             * Weight of the fillable shape, relative to other fillable shapes included in this custom shape. This property
             * allows you to distribute the status indicator's value between distinct SVG shapes included in the custom
             * shape. For example, for four SVG shapes with weights 1, 2, 3, and 4 (total weight 10), the status indicator's
             * value is distributed in the following way:
             * 	 - If the status indicator's value is below 10% (1 out of 10), the first SVG shape (weight 1) is partially
             * 			filled, depending on the percentage value. For example, if the percentage value of the status indicator
             * 			is 5, the first SVG shape appears half-full. The rest of the SVG shapes appear empty.
             * 	 - If the status indicator's value is at least 10% but below 30%, the first SVG shape (weight 1) is
             * 			filled, and the second shape (weight 2) is filled only partially, depending on the percentage value.
             * 			The rest of the SVG shapes in this custom shape appear empty.
             * 	 - If the status indicator's value is at least 30% but below 60%, the first two SVG shapes (weight 1
             * 			and 2) are filled, and the third SVG shape (weight 3) is filled only partially. The fourth SVG shape
             * 			(weight 4) appears empty.
             * 	 - If the status indicator's value is at least 60% but below 100%, the first three SVG shapes (weight
             * 			1, 2, and 3) are filled, but the fourth SVG shape is filled only partially, depending on the percentage
             * 			value.
             * 	 - If the status indicator's value is 100, all four SVG shapes appear filled.
             *
             * Default value is `1`.
             */
            getWeight(): number;
            /**
             * Sets a new value for property {@link #getOrder order}.
             *
             * Order in which this fillable SVG shape must be filled, relative to other SVG shapes included in the custom
             * shape. For example, if you have three SVG shapes with order values 1, 2, and 4 assigned, the first shape
             * will be filled first, then the second shape, and, finally, the third shape, regardless of their order
             * in the SVG definition. The value of this property must be unique.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setOrder(
              /**
               * New value for property `order`
               */
              iOrder: number
            ): sap.suite.ui.commons.statusindicator.FillingOption;
            /**
             * Sets a new value for property {@link #getShapeId shapeId}.
             *
             * ID of the fillable SVG shape included in a custom shape.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setShapeId(
              /**
               * New value for property `shapeId`
               */
              sShapeId: string
            ): sap.suite.ui.commons.statusindicator.FillingOption;
            /**
             * Sets a new value for property {@link #getWeight weight}.
             *
             * Weight of the fillable shape, relative to other fillable shapes included in this custom shape. This property
             * allows you to distribute the status indicator's value between distinct SVG shapes included in the custom
             * shape. For example, for four SVG shapes with weights 1, 2, 3, and 4 (total weight 10), the status indicator's
             * value is distributed in the following way:
             * 	 - If the status indicator's value is below 10% (1 out of 10), the first SVG shape (weight 1) is partially
             * 			filled, depending on the percentage value. For example, if the percentage value of the status indicator
             * 			is 5, the first SVG shape appears half-full. The rest of the SVG shapes appear empty.
             * 	 - If the status indicator's value is at least 10% but below 30%, the first SVG shape (weight 1) is
             * 			filled, and the second shape (weight 2) is filled only partially, depending on the percentage value.
             * 			The rest of the SVG shapes in this custom shape appear empty.
             * 	 - If the status indicator's value is at least 30% but below 60%, the first two SVG shapes (weight 1
             * 			and 2) are filled, and the third SVG shape (weight 3) is filled only partially. The fourth SVG shape
             * 			(weight 4) appears empty.
             * 	 - If the status indicator's value is at least 60% but below 100%, the first three SVG shapes (weight
             * 			1, 2, and 3) are filled, but the fourth SVG shape is filled only partially, depending on the percentage
             * 			value.
             * 	 - If the status indicator's value is 100, all four SVG shapes appear filled.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `1`.
             */
            setWeight(
              /**
               * New value for property `weight`
               */
              iWeight: number
            ): sap.suite.ui.commons.statusindicator.FillingOption;
          }
          /**
           * @SINCE 1.60.0
           *
           * Custom shape that is selected by `shapeId` from the shapes library.
           */
          class LibraryShape extends sap.suite.ui.commons.statusindicator
            .CustomShape {
            /**
             * Constructor for a new Library Shape.
             *
             * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
             * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
             * of the syntax of the settings object.
             */
            constructor(
              /**
               * ID for the new control, generated automatically if no ID is given
               */
              sId?: string,
              /**
               * Initial settings for the new control
               */
              mSettings?: LibraryShapeOpts
            );

            /**
             * Attaches event handler `fnFunction` to the {@link #event:afterShapeLoaded afterShapeLoaded} event of
             * this `sap.suite.ui.commons.statusindicator.LibraryShape`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.statusindicator.LibraryShape` itself.
             *
             * This event is fired when the definition of shape is loaded.
             */
            attachAfterShapeLoaded(
              /**
               * An application-specific payload object that will be passed to the event handler along with the event
               * object when firing the event
               */
              oData: object,
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.statusindicator.LibraryShape`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.statusindicator.LibraryShape;
            /**
             * Detaches event handler `fnFunction` from the {@link #event:afterShapeLoaded afterShapeLoaded} event of
             * this `sap.suite.ui.commons.statusindicator.LibraryShape`.
             *
             * The passed function and listener object must match the ones used for event registration.
             */
            detachAfterShapeLoaded(
              /**
               * The function to be called, when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object on which the given function had to be called
               */
              oListener?: object
            ): sap.suite.ui.commons.statusindicator.LibraryShape;
            /**
             * Creates a new subclass of class sap.suite.ui.commons.statusindicator.LibraryShape with name `sClassName`
             * and enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.statusindicator.CustomShape.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Fires event {@link #event:afterShapeLoaded afterShapeLoaded} to attached listeners.
             */
            fireAfterShapeLoaded(
              /**
               * Parameters to pass along with the event
               */
              mParameters?: object
            ): sap.suite.ui.commons.statusindicator.LibraryShape;
            /**
             * Returns a metadata object for class sap.suite.ui.commons.statusindicator.LibraryShape.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Gets current value of property {@link #getShapeId shapeId}.
             *
             * An ID associated with a specific shape from the shape library.
             */
            getShapeId(): string;
            /**
             * Sets a new value for property {@link #getShapeId shapeId}.
             *
             * An ID associated with a specific shape from the shape library.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setShapeId(
              /**
               * New value for property `shapeId`
               */
              sShapeId: string
            ): sap.suite.ui.commons.statusindicator.LibraryShape;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:afterShapeLoaded afterShapeLoaded} event of
             * this `sap.suite.ui.commons.statusindicator.LibraryShape`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.statusindicator.LibraryShape` itself.
             *
             * This event is fired when the definition of shape is loaded.
             */
            attachAfterShapeLoaded(
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.statusindicator.LibraryShape`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.statusindicator.LibraryShape;
          }
          /**
           * @SINCE 1.50
           *
           * Shape that consists of a single SVG path element.
           */
          class Path extends sap.suite.ui.commons.statusindicator.SimpleShape {
            /**
             * Constructor for a new Path.
             *
             * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
             * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
             * of the syntax of the settings object.
             */
            constructor(
              /**
               * id for the new control, generated automatically if no id is given
               */
              sId?: string,
              /**
               * initial settings for the new control
               */
              mSettings?: PathOpts
            );

            /**
             * Creates a new subclass of class sap.suite.ui.commons.statusindicator.Path with name `sClassName` and
             * enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.statusindicator.SimpleShape.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Gets current value of property {@link #getD d}.
             *
             * Specifies the path that outlines the shape. The format is identical to the `d` attribute of the `<path>`
             * SVG element.
             */
            getD(): string;
            /**
             * Returns a metadata object for class sap.suite.ui.commons.statusindicator.Path.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Sets a new value for property {@link #getD d}.
             *
             * Specifies the path that outlines the shape. The format is identical to the `d` attribute of the `<path>`
             * SVG element.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setD(
              /**
               * New value for property `d`
               */
              sD: string
            ): sap.suite.ui.commons.statusindicator.Path;
          }
          /**
           * @SINCE 1.50
           *
           * Property threshold defines how the shapes included in the status indicator should be filled when the
           * status indicator's percentage value is below the given threshold.
           */
          class PropertyThreshold extends sap.ui.core.Control {
            /**
             * Constructor for a new PropertyThreshold.
             *
             * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
             * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
             * of the syntax of the settings object.
             */
            constructor(
              /**
               * id for the new control, generated automatically if no id is provided
               */
              sId?: string,
              /**
               * initial settings for the new control
               */
              mSettings?: PropertyThresholdOpts
            );

            /**
             * Creates a new subclass of class sap.suite.ui.commons.statusindicator.PropertyThreshold with name `sClassName`
             * and enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Gets current value of property {@link #getAriaLabel ariaLabel}.
             *
             * ARIA label for this threshold to be used by screen reader software.
             */
            getAriaLabel(): string;
            /**
             * Gets current value of property {@link #getFillColor fillColor}.
             *
             * Defines the color used to fill the shapes included in the status indicator.
             *
             * Default value is `Neutral`.
             */
            getFillColor(): sap.m.ValueCSSColor;
            /**
             * Returns a metadata object for class sap.suite.ui.commons.statusindicator.PropertyThreshold.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Gets current value of property {@link #getToValue toValue}.
             *
             * Defines the maximum value up to which the threshold setting should apply.
             *
             * Default value is `0`.
             */
            getToValue(): number;
            /**
             * Sets a new value for property {@link #getAriaLabel ariaLabel}.
             *
             * ARIA label for this threshold to be used by screen reader software.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setAriaLabel(
              /**
               * New value for property `ariaLabel`
               */
              sAriaLabel: string
            ): sap.suite.ui.commons.statusindicator.PropertyThreshold;
            /**
             * Sets a new value for property {@link #getFillColor fillColor}.
             *
             * Defines the color used to fill the shapes included in the status indicator.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `Neutral`.
             */
            setFillColor(
              /**
               * New value for property `fillColor`
               */
              sFillColor: sap.m.ValueCSSColor
            ): sap.suite.ui.commons.statusindicator.PropertyThreshold;
            /**
             * Sets a new value for property {@link #getToValue toValue}.
             *
             * Defines the maximum value up to which the threshold setting should apply.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `0`.
             */
            setToValue(
              /**
               * New value for property `toValue`
               */
              iToValue: number
            ): sap.suite.ui.commons.statusindicator.PropertyThreshold;
          }
          /**
           * @SINCE 1.50
           *
           * Status indicator shape in the form of a rectangle.
           */
          class Rectangle extends sap.suite.ui.commons.statusindicator
            .SimpleShape {
            /**
             * Constructor for a new Rectangle.
             *
             * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
             * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
             * of the syntax of the settings object.
             */
            constructor(
              /**
               * id for the new control, generated automatically if no id is given
               */
              sId?: string,
              /**
               * initial settings for the new control
               */
              mSettings?: RectangleOpts
            );

            /**
             * Creates a new subclass of class sap.suite.ui.commons.statusindicator.Rectangle with name `sClassName`
             * and enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.statusindicator.SimpleShape.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Gets current value of property {@link #getHeight height}.
             *
             * Defines the height of the rectangle.
             *
             * Default value is `0`.
             */
            getHeight(): number;
            /**
             * Returns a metadata object for class sap.suite.ui.commons.statusindicator.Rectangle.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Gets current value of property {@link #getRx rx}.
             *
             * Defines the horizontal corner radius of the rectangle. If set to 0, the corners are not rounded.
             *
             * Default value is `0`.
             */
            getRx(): number;
            /**
             * Gets current value of property {@link #getRy ry}.
             *
             * Defines the vertical corner radius of the rectangle. If set to 0, the corners are not rounded.
             *
             * Default value is `0`.
             */
            getRy(): number;
            /**
             * Gets current value of property {@link #getWidth width}.
             *
             * Defines the width of the rectangle.
             *
             * Default value is `0`.
             */
            getWidth(): number;
            /**
             * Gets current value of property {@link #getX x}.
             *
             * Defines the x coordinate of the upper-left corner of the rectangle.
             *
             * Default value is `0`.
             */
            getX(): number;
            /**
             * Gets current value of property {@link #getY y}.
             *
             * Defines the y coordinate of the upper-left corner of the rectangle.
             *
             * Default value is `0`.
             */
            getY(): number;
            /**
             * Sets a new value for property {@link #getHeight height}.
             *
             * Defines the height of the rectangle.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `0`.
             */
            setHeight(
              /**
               * New value for property `height`
               */
              iHeight: number
            ): sap.suite.ui.commons.statusindicator.Rectangle;
            /**
             * Sets a new value for property {@link #getRx rx}.
             *
             * Defines the horizontal corner radius of the rectangle. If set to 0, the corners are not rounded.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `0`.
             */
            setRx(
              /**
               * New value for property `rx`
               */
              iRx: number
            ): sap.suite.ui.commons.statusindicator.Rectangle;
            /**
             * Sets a new value for property {@link #getRy ry}.
             *
             * Defines the vertical corner radius of the rectangle. If set to 0, the corners are not rounded.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `0`.
             */
            setRy(
              /**
               * New value for property `ry`
               */
              iRy: number
            ): sap.suite.ui.commons.statusindicator.Rectangle;
            /**
             * Sets a new value for property {@link #getWidth width}.
             *
             * Defines the width of the rectangle.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `0`.
             */
            setWidth(
              /**
               * New value for property `width`
               */
              iWidth: number
            ): sap.suite.ui.commons.statusindicator.Rectangle;
            /**
             * Sets a new value for property {@link #getX x}.
             *
             * Defines the x coordinate of the upper-left corner of the rectangle.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `0`.
             */
            setX(
              /**
               * New value for property `x`
               */
              iX: number
            ): sap.suite.ui.commons.statusindicator.Rectangle;
            /**
             * Sets a new value for property {@link #getY y}.
             *
             * Defines the y coordinate of the upper-left corner of the rectangle.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `0`.
             */
            setY(
              /**
               * New value for property `y`
               */
              iY: number
            ): sap.suite.ui.commons.statusindicator.Rectangle;
          }
          /**
           * @SINCE 1.50
           *
           * Abstract shape that displays the value of the status indicator. The shape reflects the status indicator's
           * percentage value by filling one or more of its parts (SVG shapes) with the specified color.
           */
          class Shape extends sap.ui.core.Control {
            /**
             * Constructor for a new Shape.
             *
             * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
             * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
             * of the syntax of the settings object.
             */
            constructor(
              /**
               * id for the new control, generated automatically if no id is provided
               */
              sId?: string,
              /**
               * initial settings for the new control
               */
              mSettings?: ShapeOpts
            );

            /**
             * Creates a new subclass of class sap.suite.ui.commons.statusindicator.Shape with name `sClassName` and
             * enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Gets current value of property {@link #getAnimationOnChange animationOnChange}.
             *
             * Defines if the change in the status indicator value should be animated or not.
             *  When set to `true`, the change in value is animated.
             *
             * Default value is `true`.
             */
            getAnimationOnChange(): boolean;
            /**
             * @deprecated (since 1.54.1) - Use the animationOnChange property instead.
             *
             * Gets current value of property {@link #getAnimationOnStartup animationOnStartup}.
             *
             * Defines if the initial value of the status indicator should be animated or directly displayed on startup.
             * By default, it's displayed on startup without any animation.
             *
             * Default value is `false`.
             */
            getAnimationOnStartup(): boolean;
            /**
             * @deprecated - true
             *
             * Gets current value of property {@link #getAnimationOnStartupDelay animationOnStartupDelay}.
             *
             * Specifies the delay of the initial value animation. Only applicable if the `animationOnStartup` property
             * is set to `true`.
             *
             * Default value is `0`.
             */
            getAnimationOnStartupDelay(): number;
            /**
             * Returns the currently displayed value This method must be overridden by a child class
             */
            getDisplayedValue(): void;
            /**
             * Gets current value of property {@link #getFillColor fillColor}.
             *
             * Defines the color of the shape's fill.
             *
             * Default value is `Neutral`.
             */
            getFillColor(): sap.m.ValueCSSColor;
            /**
             * Gets current value of property {@link #getFillingAngle fillingAngle}.
             *
             * Defines the angle at which the shape is filled. This property overrides the `fillingDirection` property.
             *  Accepted values include `0` through `360` degrees.
             *  For example, if you set the filling angle to `45`, the shape will be filled diagonally from the lower
             * right part of the shape to its upper left part.
             *  This property can be used only when {@link sap.suite.ui.commons.statusindicator.FillingType} is set
             * to `Linear`.
             *
             * Default value is `undefined`.
             */
            getFillingAngle(): number;
            /**
             * Gets current value of property {@link #getFillingDirection fillingDirection}.
             *
             * Defines the direction in which the shape is filled.
             *
             * Default value is `Up`.
             */
            getFillingDirection(): sap.suite.ui.commons.statusindicator.FillingDirectionType;
            /**
             * Gets current value of property {@link #getFillingType fillingType}.
             *
             * Defines the type of the shape's fill.
             *
             * Default value is `Linear`.
             */
            getFillingType(): sap.suite.ui.commons.statusindicator.FillingType;
            /**
             * @deprecated (since 1.54.1) - All animations are now limited to 250 ms.
             *
             * Gets current value of property {@link #getFullAnimationDuration fullAnimationDuration}.
             *
             * Specifies the duration, in milliseconds, of the animation that would fill an empty shape to the full.
             * The actual time it takes to change the shape's filling is proportional to the difference between the
             * initial and the target status indicator's value. For example, a change from 20 percent to 70 percent
             * takes only half of the time specified in the `fullAnimationDuration` property. If this property is set
             * to `0`, changes are applied instantly without any animation.
             *
             * Default value is `0`.
             */
            getFullAnimationDuration(): number;
            /**
             * Gets current value of property {@link #getHorizontalAlignment horizontalAlignment}.
             *
             * Defines the horizontal alignment of the shape within its parent container.
             *
             * Default value is `Middle`.
             */
            getHorizontalAlignment(): sap.suite.ui.commons.statusindicator.HorizontalAlignmentType;
            /**
             * Returns a metadata object for class sap.suite.ui.commons.statusindicator.Shape.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Gets current value of property {@link #getVerticalAlignment verticalAlignment}.
             *
             * Defines the vertical alignment of the shape within its parent container.
             *
             * Default value is `Middle`.
             */
            getVerticalAlignment(): sap.suite.ui.commons.statusindicator.VerticalAlignmentType;
            /**
             * Sets a new value for property {@link #getAnimationOnChange animationOnChange}.
             *
             * Defines if the change in the status indicator value should be animated or not.
             *  When set to `true`, the change in value is animated.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `true`.
             */
            setAnimationOnChange(
              /**
               * New value for property `animationOnChange`
               */
              bAnimationOnChange: boolean
            ): sap.suite.ui.commons.statusindicator.Shape;
            /**
             * @deprecated (since 1.54.1) - Use the animationOnChange property instead.
             *
             * Sets a new value for property {@link #getAnimationOnStartup animationOnStartup}.
             *
             * Defines if the initial value of the status indicator should be animated or directly displayed on startup.
             * By default, it's displayed on startup without any animation.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `false`.
             */
            setAnimationOnStartup(
              /**
               * New value for property `animationOnStartup`
               */
              bAnimationOnStartup: boolean
            ): sap.suite.ui.commons.statusindicator.Shape;
            /**
             * @deprecated - true
             *
             * Sets a new value for property {@link #getAnimationOnStartupDelay animationOnStartupDelay}.
             *
             * Specifies the delay of the initial value animation. Only applicable if the `animationOnStartup` property
             * is set to `true`.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `0`.
             */
            setAnimationOnStartupDelay(
              /**
               * New value for property `animationOnStartupDelay`
               */
              iAnimationOnStartupDelay: number
            ): sap.suite.ui.commons.statusindicator.Shape;
            /**
             * Sets a new value for property {@link #getFillColor fillColor}.
             *
             * Defines the color of the shape's fill.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `Neutral`.
             */
            setFillColor(
              /**
               * New value for property `fillColor`
               */
              sFillColor: sap.m.ValueCSSColor
            ): sap.suite.ui.commons.statusindicator.Shape;
            /**
             * Sets a new value for property {@link #getFillingAngle fillingAngle}.
             *
             * Defines the angle at which the shape is filled. This property overrides the `fillingDirection` property.
             *  Accepted values include `0` through `360` degrees.
             *  For example, if you set the filling angle to `45`, the shape will be filled diagonally from the lower
             * right part of the shape to its upper left part.
             *  This property can be used only when {@link sap.suite.ui.commons.statusindicator.FillingType} is set
             * to `Linear`.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `undefined`.
             */
            setFillingAngle(
              /**
               * New value for property `fillingAngle`
               */
              iFillingAngle: number
            ): sap.suite.ui.commons.statusindicator.Shape;
            /**
             * Sets a new value for property {@link #getFillingDirection fillingDirection}.
             *
             * Defines the direction in which the shape is filled.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `Up`.
             */
            setFillingDirection(
              /**
               * New value for property `fillingDirection`
               */
              sFillingDirection: sap.suite.ui.commons.statusindicator.FillingDirectionType
            ): sap.suite.ui.commons.statusindicator.Shape;
            /**
             * Sets a new value for property {@link #getFillingType fillingType}.
             *
             * Defines the type of the shape's fill.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `Linear`.
             */
            setFillingType(
              /**
               * New value for property `fillingType`
               */
              sFillingType: sap.suite.ui.commons.statusindicator.FillingType
            ): sap.suite.ui.commons.statusindicator.Shape;
            /**
             * @deprecated (since 1.54.1) - All animations are now limited to 250 ms.
             *
             * Sets a new value for property {@link #getFullAnimationDuration fullAnimationDuration}.
             *
             * Specifies the duration, in milliseconds, of the animation that would fill an empty shape to the full.
             * The actual time it takes to change the shape's filling is proportional to the difference between the
             * initial and the target status indicator's value. For example, a change from 20 percent to 70 percent
             * takes only half of the time specified in the `fullAnimationDuration` property. If this property is set
             * to `0`, changes are applied instantly without any animation.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `0`.
             */
            setFullAnimationDuration(
              /**
               * New value for property `fullAnimationDuration`
               */
              iFullAnimationDuration: number
            ): sap.suite.ui.commons.statusindicator.Shape;
            /**
             * Sets a new value for property {@link #getHorizontalAlignment horizontalAlignment}.
             *
             * Defines the horizontal alignment of the shape within its parent container.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `Middle`.
             */
            setHorizontalAlignment(
              /**
               * New value for property `horizontalAlignment`
               */
              sHorizontalAlignment: sap.suite.ui.commons.statusindicator.HorizontalAlignmentType
            ): sap.suite.ui.commons.statusindicator.Shape;
            /**
             * Sets a new value for property {@link #getVerticalAlignment verticalAlignment}.
             *
             * Defines the vertical alignment of the shape within its parent container.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `Middle`.
             */
            setVerticalAlignment(
              /**
               * New value for property `verticalAlignment`
               */
              sVerticalAlignment: sap.suite.ui.commons.statusindicator.VerticalAlignmentType
            ): sap.suite.ui.commons.statusindicator.Shape;
          }
          /**
           * @SINCE 1.50
           *
           * Group of shapes that display status indicator value. Shapes in the group are filled in parallel, actual
           * animation might depend on particular shape setting.
           */
          class ShapeGroup extends sap.ui.core.Control {
            /**
             * Constructor for a new ShapeGroup.
             *
             * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
             * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
             * of the syntax of the settings object.
             */
            constructor(
              /**
               * id for the new control, generated automatically if no id is given
               */
              sId?: string,
              /**
               * initial settings for the new control
               */
              mSettings?: ShapeGroupOpts
            );

            /**
             * Adds some shape to the aggregation {@link #getShapes shapes}.
             */
            addShape(
              /**
               * The shape to add; if empty, nothing is inserted
               */
              oShape: sap.suite.ui.commons.statusindicator.Shape
            ): sap.suite.ui.commons.statusindicator.ShapeGroup;
            /**
             * Destroys all the shapes in the aggregation {@link #getShapes shapes}.
             */
            destroyShapes(): sap.suite.ui.commons.statusindicator.ShapeGroup;
            /**
             * Creates a new subclass of class sap.suite.ui.commons.statusindicator.ShapeGroup with name `sClassName`
             * and enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Returns a metadata object for class sap.suite.ui.commons.statusindicator.ShapeGroup.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Gets content of aggregation {@link #getShapes shapes}.
             *
             * List of shapes that belong to this group.
             */
            getShapes(): sap.suite.ui.commons.statusindicator.Shape[];
            /**
             * Gets current value of property {@link #getWeight weight}.
             *
             * Weight of the group, relative to other groups in the status indicator. This property allows you to distribute
             * the status indicator's value between groups of shapes that it contains. For example, for three groups
             * with weights 10, 10, and 20 (total weight 40), the status indicator's value is distributed in the following
             * way:
             * 	 - If the status indicator's value is below 25% (10 out of 40), the first group of shapes (weight 10)
             * 			is partially filled, depending on the percentage value. For example, if the percentage value is 5, the
             * 			first group of shapes is 1/5-full. The second and the third groups are empty.
             * 	 - If the status indicator's value is at least 25% but below 50%, the first group of shapes (weight
             * 			10) is filled, the second group (also weight 10) is partially filled, and the third group (weight 20)
             * 			appears empty.
             * 	 - If the status indicator's value is at least 50% but below 100%, the first two groups of shapes (weight
             * 			10 each) are filled, but the third group (weight 20) is only partially filled.
             * 	 - If the status indicator's value is 100, all three groups of shapes are filled.
             *
             * Default value is `10`.
             */
            getWeight(): number;
            /**
             * Checks for the provided `sap.suite.ui.commons.statusindicator.Shape` in the aggregation {@link #getShapes
             * shapes}. and returns its index if found or -1 otherwise.
             */
            indexOfShape(
              /**
               * The shape whose index is looked for
               */
              oShape: sap.suite.ui.commons.statusindicator.Shape
            ): number;
            /**
             * Inserts a shape into the aggregation {@link #getShapes shapes}.
             */
            insertShape(
              /**
               * The shape to insert; if empty, nothing is inserted
               */
              oShape: sap.suite.ui.commons.statusindicator.Shape,
              /**
               * The `0`-based index the shape should be inserted at; for a negative value of `iIndex`, the shape is inserted
               * at position 0; for a value greater than the current size of the aggregation, the shape is inserted at
               * the last position
               */
              iIndex: number
            ): sap.suite.ui.commons.statusindicator.ShapeGroup;
            /**
             * Removes all the controls from the aggregation {@link #getShapes shapes}.
             *
             * Additionally, it unregisters them from the hosting UIArea.
             */
            removeAllShapes(): sap.suite.ui.commons.statusindicator.Shape[];
            /**
             * Removes a shape from the aggregation {@link #getShapes shapes}.
             */
            removeShape(
              /**
               * The shape to remove or its index or id
               */
              vShape:
                | number
                | string
                | sap.suite.ui.commons.statusindicator.Shape
            ): sap.suite.ui.commons.statusindicator.Shape;
            /**
             * Sets a new value for property {@link #getWeight weight}.
             *
             * Weight of the group, relative to other groups in the status indicator. This property allows you to distribute
             * the status indicator's value between groups of shapes that it contains. For example, for three groups
             * with weights 10, 10, and 20 (total weight 40), the status indicator's value is distributed in the following
             * way:
             * 	 - If the status indicator's value is below 25% (10 out of 40), the first group of shapes (weight 10)
             * 			is partially filled, depending on the percentage value. For example, if the percentage value is 5, the
             * 			first group of shapes is 1/5-full. The second and the third groups are empty.
             * 	 - If the status indicator's value is at least 25% but below 50%, the first group of shapes (weight
             * 			10) is filled, the second group (also weight 10) is partially filled, and the third group (weight 20)
             * 			appears empty.
             * 	 - If the status indicator's value is at least 50% but below 100%, the first two groups of shapes (weight
             * 			10 each) are filled, but the third group (weight 20) is only partially filled.
             * 	 - If the status indicator's value is 100, all three groups of shapes are filled.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `10`.
             */
            setWeight(
              /**
               * New value for property `weight`
               */
              iWeight: number
            ): sap.suite.ui.commons.statusindicator.ShapeGroup;
          }
          /**
           * @SINCE 1.50
           *
           * A simple shape that consists of a single SVG shape.
           */
          class SimpleShape extends sap.suite.ui.commons.statusindicator.Shape {
            /**
             * Constructor for a new SimpleShape.
             *
             * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
             * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
             * of the syntax of the settings object.
             */
            constructor(
              /**
               * id for the new control, generated automatically if no id is given
               */
              sId?: string,
              /**
               * initial settings for the new control
               */
              mSettings?: SimpleShapeOpts
            );

            /**
             * Creates a new subclass of class sap.suite.ui.commons.statusindicator.SimpleShape with name `sClassName`
             * and enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.statusindicator.Shape.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Returns currently displayed value.
             */
            // @ts-ignore
            getDisplayedValue(): number;
            /**
             * Returns a metadata object for class sap.suite.ui.commons.statusindicator.SimpleShape.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Gets current value of property {@link #getStrokeColor strokeColor}.
             *
             * Specifies the color of the shape's outline.
             *
             * Default value is `Neutral`.
             */
            getStrokeColor(): sap.m.ValueCSSColor;
            /**
             * Gets current value of property {@link #getStrokeWidth strokeWidth}.
             *
             * Specifies the width of the shape's outline.
             *
             * Default value is `0.25`.
             */
            getStrokeWidth(): number;
            /**
             * Sets a new value for property {@link #getStrokeColor strokeColor}.
             *
             * Specifies the color of the shape's outline.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `Neutral`.
             */
            setStrokeColor(
              /**
               * New value for property `strokeColor`
               */
              sStrokeColor: sap.m.ValueCSSColor
            ): sap.suite.ui.commons.statusindicator.SimpleShape;
            /**
             * Sets a new value for property {@link #getStrokeWidth strokeWidth}.
             *
             * Specifies the width of the shape's outline.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `0.25`.
             */
            setStrokeWidth(
              /**
               * New value for property `strokeWidth`
               */
              fStrokeWidth: number
            ): sap.suite.ui.commons.statusindicator.SimpleShape;
          }
          /**
           * @SINCE 1.50
           *
           * The status indicator control displays a value between 0 and 100.
           *
           * A status indicator may consist of multiple groups that gradually display the value. The shapes in the
           * first group are filled first, the shapes in the second group second, and so on.
           *
           * The value of the status indicator is distributed between the groups depending on their weight.
           *
           * The filling of the shapes in the groups can be proportional to the value of the status indicator or can
           * be based on thresholds specified in the `discreteThresholds` aggregation.
           */
          class StatusIndicator extends sap.ui.core.Control {
            /**
             * Constructor for a new StatusIndicator.
             *
             * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
             * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
             * of the syntax of the settings object.
             */
            constructor(
              /**
               * id for the new control, generated automatically if no id is given
               */
              sId?: string,
              /**
               * initial settings for the new control
               */
              mSettings?: StatusIndicatorOpts
            );

            /**
             * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
             */
            addAriaDescribedBy(
              /**
               * The ariaDescribedBy to add; if empty, nothing is inserted
               */
              vAriaDescribedBy: sap.ui.core.ID | sap.ui.core.Control
            ): sap.suite.ui.commons.statusindicator.StatusIndicator;
            /**
             * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
             */
            addAriaLabelledBy(
              /**
               * The ariaLabelledBy to add; if empty, nothing is inserted
               */
              vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control
            ): sap.suite.ui.commons.statusindicator.StatusIndicator;
            /**
             * Adds some discreteThreshold to the aggregation {@link #getDiscreteThresholds discreteThresholds}.
             */
            addDiscreteThreshold(
              /**
               * The discreteThreshold to add; if empty, nothing is inserted
               */
              oDiscreteThreshold: sap.suite.ui.commons.statusindicator.DiscreteThreshold
            ): sap.suite.ui.commons.statusindicator.StatusIndicator;
            /**
             * Adds some group to the aggregation {@link #getGroups groups}.
             */
            addGroup(
              /**
               * The group to add; if empty, nothing is inserted
               */
              oGroup: sap.suite.ui.commons.statusindicator.ShapeGroup
            ): sap.suite.ui.commons.statusindicator.StatusIndicator;
            /**
             * Adds some propertyThreshold to the aggregation {@link #getPropertyThresholds propertyThresholds}.
             */
            addPropertyThreshold(
              /**
               * The propertyThreshold to add; if empty, nothing is inserted
               */
              oPropertyThreshold: sap.suite.ui.commons.statusindicator.PropertyThreshold
            ): sap.suite.ui.commons.statusindicator.StatusIndicator;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.statusindicator.StatusIndicator`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.statusindicator.StatusIndicator` itself.
             *
             * This event is fired when the user clicks or taps the status indicator.
             */
            attachPress(
              /**
               * An application-specific payload object that will be passed to the event handler along with the event
               * object when firing the event
               */
              oData: object,
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.statusindicator.StatusIndicator`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.statusindicator.StatusIndicator;
            /**
             * Destroys all the discreteThresholds in the aggregation {@link #getDiscreteThresholds discreteThresholds}.
             */
            destroyDiscreteThresholds(): sap.suite.ui.commons.statusindicator.StatusIndicator;
            /**
             * Destroys all the groups in the aggregation {@link #getGroups groups}.
             */
            destroyGroups(): sap.suite.ui.commons.statusindicator.StatusIndicator;
            /**
             * Destroys the label in the aggregation {@link #getLabel label}.
             */
            destroyLabel(): sap.suite.ui.commons.statusindicator.StatusIndicator;
            /**
             * Destroys all the propertyThresholds in the aggregation {@link #getPropertyThresholds propertyThresholds}.
             */
            destroyPropertyThresholds(): sap.suite.ui.commons.statusindicator.StatusIndicator;
            /**
             * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.suite.ui.commons.statusindicator.StatusIndicator`.
             *
             * The passed function and listener object must match the ones used for event registration.
             */
            detachPress(
              /**
               * The function to be called, when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object on which the given function had to be called
               */
              oListener?: object
            ): sap.suite.ui.commons.statusindicator.StatusIndicator;
            /**
             * Creates a new subclass of class sap.suite.ui.commons.statusindicator.StatusIndicator with name `sClassName`
             * and enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Fires event {@link #event:press press} to attached listeners.
             */
            firePress(
              /**
               * Parameters to pass along with the event
               */
              mParameters?: object
            ): sap.suite.ui.commons.statusindicator.StatusIndicator;
            /**
             * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy
             * ariaDescribedBy}.
             */
            getAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * Gets current value of property {@link #getAriaLabel ariaLabel}.
             *
             * ARIA label for this control to be used by screen reader software.
             */
            getAriaLabel(): string;
            /**
             * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
             * ariaLabelledBy}.
             */
            getAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * Gets content of aggregation {@link #getDiscreteThresholds discreteThresholds}.
             *
             * Specifies discrete thresholds for the status indicator. If discrete thresholds are set, the status indicator
             * adjusts its appearance to the closest threshold value that is not greater than the actual percentage
             * value of the status indicator. For example, if the following discrete thresholds are specified:
             *
             * 	 - `value = "20"`
             * 	 - `value = "60"`
             * 	 - `value = "100"`  The status indicator displays the following percentage values:
             * 	 - `0` if the actual value is 15
             * 	 - `20` if the actual value is 20
             * 	 - `20` if the actual value is 55
             * 	 - `60` if the actual value is 60
             * 	 - `60` if the actual value is 79
             * 	 - `100` if the actual value is 100  Please note that these thresholds affect only the appearance
             * 			of the status inicator, not its stored value.
             */
            getDiscreteThresholds(): sap.suite.ui.commons.statusindicator.DiscreteThreshold[];
            /**
             * Gets content of aggregation {@link #getGroups groups}.
             *
             * Groups of shapes that display the status indicator's percentage value. A status indicator must always
             * include at least one group.
             */
            getGroups(): sap.suite.ui.commons.statusindicator.ShapeGroup[];
            /**
             * Gets current value of property {@link #getHeight height}.
             *
             * Height of the status indicator. Only sets the height of the image part of the status indicator, potential
             * label is not included.
             *
             * Default value is `auto`.
             */
            getHeight(): sap.ui.core.CSSSize;
            /**
             * Gets content of aggregation {@link #getLabel label}.
             */
            getLabel(): sap.m.Text;
            /**
             * Gets current value of property {@link #getLabelPosition labelPosition}.
             *
             * Default value is `Left`.
             */
            getLabelPosition(): sap.suite.ui.commons.statusindicator.LabelPositionType;
            /**
             * Returns a metadata object for class sap.suite.ui.commons.statusindicator.StatusIndicator.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Gets content of aggregation {@link #getPropertyThresholds propertyThresholds}.
             *
             * Defines how shapes are filled based on the status indicator's percentage value.
             */
            getPropertyThresholds(): sap.suite.ui.commons.statusindicator.PropertyThreshold[];
            /**
             * Gets current value of property {@link #getShowLabel showLabel}.
             *
             * Default value is `false`.
             */
            getShowLabel(): boolean;
            /**
             * Gets current value of property {@link #getSize size}.
             *
             * Predefined sizes for the status indicator.
             *
             * Default value is `None`.
             */
            getSize(): sap.suite.ui.commons.statusindicator.SizeType;
            /**
             * Gets current value of property {@link #getValue value}.
             *
             * Percentage value, between 0 and 100, that the status indicator reflects.
             *
             * Default value is `0`.
             */
            getValue(): number;
            /**
             * Gets current value of property {@link #getViewBox viewBox}.
             *
             * Defines the view box surrounding the shapes included in the status indicator.
             */
            getViewBox(): string;
            /**
             * Gets current value of property {@link #getWidth width}.
             *
             * Width of the status indicator. Only sets the width of the image part of the status indicator, potential
             * label is not included. The root div of the status indicator is set as display: "block" and so takes up
             * the whole space available. Wrap status indicator in {@link sap.m.FlexBox} control if you wish to control
             * width of the whole status indicator.
             *
             * Default value is `100%`.
             */
            getWidth(): sap.ui.core.CSSSize;
            /**
             * Checks for the provided `sap.suite.ui.commons.statusindicator.DiscreteThreshold` in the aggregation {@link
             * #getDiscreteThresholds discreteThresholds}. and returns its index if found or -1 otherwise.
             */
            indexOfDiscreteThreshold(
              /**
               * The discreteThreshold whose index is looked for
               */
              oDiscreteThreshold: sap.suite.ui.commons.statusindicator.DiscreteThreshold
            ): number;
            /**
             * Checks for the provided `sap.suite.ui.commons.statusindicator.ShapeGroup` in the aggregation {@link #getGroups
             * groups}. and returns its index if found or -1 otherwise.
             */
            indexOfGroup(
              /**
               * The group whose index is looked for
               */
              oGroup: sap.suite.ui.commons.statusindicator.ShapeGroup
            ): number;
            /**
             * Checks for the provided `sap.suite.ui.commons.statusindicator.PropertyThreshold` in the aggregation {@link
             * #getPropertyThresholds propertyThresholds}. and returns its index if found or -1 otherwise.
             */
            indexOfPropertyThreshold(
              /**
               * The propertyThreshold whose index is looked for
               */
              oPropertyThreshold: sap.suite.ui.commons.statusindicator.PropertyThreshold
            ): number;
            /**
             * Inserts a discreteThreshold into the aggregation {@link #getDiscreteThresholds discreteThresholds}.
             */
            insertDiscreteThreshold(
              /**
               * The discreteThreshold to insert; if empty, nothing is inserted
               */
              oDiscreteThreshold: sap.suite.ui.commons.statusindicator.DiscreteThreshold,
              /**
               * The `0`-based index the discreteThreshold should be inserted at; for a negative value of `iIndex`, the
               * discreteThreshold is inserted at position 0; for a value greater than the current size of the aggregation,
               * the discreteThreshold is inserted at the last position
               */
              iIndex: number
            ): sap.suite.ui.commons.statusindicator.StatusIndicator;
            /**
             * Inserts a group into the aggregation {@link #getGroups groups}.
             */
            insertGroup(
              /**
               * The group to insert; if empty, nothing is inserted
               */
              oGroup: sap.suite.ui.commons.statusindicator.ShapeGroup,
              /**
               * The `0`-based index the group should be inserted at; for a negative value of `iIndex`, the group is inserted
               * at position 0; for a value greater than the current size of the aggregation, the group is inserted at
               * the last position
               */
              iIndex: number
            ): sap.suite.ui.commons.statusindicator.StatusIndicator;
            /**
             * Inserts a propertyThreshold into the aggregation {@link #getPropertyThresholds propertyThresholds}.
             */
            insertPropertyThreshold(
              /**
               * The propertyThreshold to insert; if empty, nothing is inserted
               */
              oPropertyThreshold: sap.suite.ui.commons.statusindicator.PropertyThreshold,
              /**
               * The `0`-based index the propertyThreshold should be inserted at; for a negative value of `iIndex`, the
               * propertyThreshold is inserted at position 0; for a value greater than the current size of the aggregation,
               * the propertyThreshold is inserted at the last position
               */
              iIndex: number
            ): sap.suite.ui.commons.statusindicator.StatusIndicator;
            /**
             * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
             */
            removeAllAriaDescribedBy(): sap.ui.core.ID[];
            /**
             * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
             */
            removeAllAriaLabelledBy(): sap.ui.core.ID[];
            /**
             * Removes all the controls from the aggregation {@link #getDiscreteThresholds discreteThresholds}.
             *
             * Additionally, it unregisters them from the hosting UIArea.
             */
            removeAllDiscreteThresholds(): sap.suite.ui.commons.statusindicator.DiscreteThreshold[];
            /**
             * Removes all the controls from the aggregation {@link #getGroups groups}.
             *
             * Additionally, it unregisters them from the hosting UIArea.
             */
            removeAllGroups(): sap.suite.ui.commons.statusindicator.ShapeGroup[];
            /**
             * Removes all the controls from the aggregation {@link #getPropertyThresholds propertyThresholds}.
             *
             * Additionally, it unregisters them from the hosting UIArea.
             */
            removeAllPropertyThresholds(): sap.suite.ui.commons.statusindicator.PropertyThreshold[];
            /**
             * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
             */
            removeAriaDescribedBy(
              /**
               * The ariaDescribedBy to be removed or its index or ID
               */
              vAriaDescribedBy: number | sap.ui.core.ID | sap.ui.core.Control
            ): sap.ui.core.ID;
            /**
             * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
             */
            removeAriaLabelledBy(
              /**
               * The ariaLabelledBy to be removed or its index or ID
               */
              vAriaLabelledBy: number | sap.ui.core.ID | sap.ui.core.Control
            ): sap.ui.core.ID;
            /**
             * Removes a discreteThreshold from the aggregation {@link #getDiscreteThresholds discreteThresholds}.
             */
            removeDiscreteThreshold(
              /**
               * The discreteThreshold to remove or its index or id
               */
              vDiscreteThreshold:
                | number
                | string
                | sap.suite.ui.commons.statusindicator.DiscreteThreshold
            ): sap.suite.ui.commons.statusindicator.DiscreteThreshold;
            /**
             * Removes a group from the aggregation {@link #getGroups groups}.
             */
            removeGroup(
              /**
               * The group to remove or its index or id
               */
              vGroup:
                | number
                | string
                | sap.suite.ui.commons.statusindicator.ShapeGroup
            ): sap.suite.ui.commons.statusindicator.ShapeGroup;
            /**
             * Removes a propertyThreshold from the aggregation {@link #getPropertyThresholds propertyThresholds}.
             */
            removePropertyThreshold(
              /**
               * The propertyThreshold to remove or its index or id
               */
              vPropertyThreshold:
                | number
                | string
                | sap.suite.ui.commons.statusindicator.PropertyThreshold
            ): sap.suite.ui.commons.statusindicator.PropertyThreshold;
            /**
             * Sets a new value for property {@link #getAriaLabel ariaLabel}.
             *
             * ARIA label for this control to be used by screen reader software.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setAriaLabel(
              /**
               * New value for property `ariaLabel`
               */
              sAriaLabel: string
            ): sap.suite.ui.commons.statusindicator.StatusIndicator;
            /**
             * Sets a new value for property {@link #getHeight height}.
             *
             * Height of the status indicator. Only sets the height of the image part of the status indicator, potential
             * label is not included.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `auto`.
             */
            setHeight(
              /**
               * New value for property `height`
               */
              sHeight: sap.ui.core.CSSSize
            ): sap.suite.ui.commons.statusindicator.StatusIndicator;
            /**
             * Sets the aggregated {@link #getLabel label}.
             */
            setLabel(
              /**
               * The label to set
               */
              oLabel: sap.m.Text
            ): sap.suite.ui.commons.statusindicator.StatusIndicator;
            /**
             * Sets a new value for property {@link #getLabelPosition labelPosition}.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `Left`.
             */
            setLabelPosition(
              /**
               * New value for property `labelPosition`
               */
              sLabelPosition: sap.suite.ui.commons.statusindicator.LabelPositionType
            ): sap.suite.ui.commons.statusindicator.StatusIndicator;
            /**
             * Sets a new value for property {@link #getShowLabel showLabel}.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `false`.
             */
            setShowLabel(
              /**
               * New value for property `showLabel`
               */
              bShowLabel: boolean
            ): sap.suite.ui.commons.statusindicator.StatusIndicator;
            /**
             * Sets a new value for property {@link #getSize size}.
             *
             * Predefined sizes for the status indicator.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `None`.
             */
            setSize(
              /**
               * New value for property `size`
               */
              sSize: sap.suite.ui.commons.statusindicator.SizeType
            ): sap.suite.ui.commons.statusindicator.StatusIndicator;
            /**/
            setValue(
              /**
               * Value that should be displayed
               */
              iValue: number
            ): Object;
            /**
             * Sets a new value for property {@link #getViewBox viewBox}.
             *
             * Defines the view box surrounding the shapes included in the status indicator.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setViewBox(
              /**
               * New value for property `viewBox`
               */
              sViewBox: string
            ): sap.suite.ui.commons.statusindicator.StatusIndicator;
            /**
             * Sets a new value for property {@link #getWidth width}.
             *
             * Width of the status indicator. Only sets the width of the image part of the status indicator, potential
             * label is not included. The root div of the status indicator is set as display: "block" and so takes up
             * the whole space available. Wrap status indicator in {@link sap.m.FlexBox} control if you wish to control
             * width of the whole status indicator.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `100%`.
             */
            setWidth(
              /**
               * New value for property `width`
               */
              sWidth: sap.ui.core.CSSSize
            ): sap.suite.ui.commons.statusindicator.StatusIndicator;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.statusindicator.StatusIndicator`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.statusindicator.StatusIndicator` itself.
             *
             * This event is fired when the user clicks or taps the status indicator.
             */
            attachPress(
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.statusindicator.StatusIndicator`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.statusindicator.StatusIndicator;
          }
          /**
           * The direction of animation.
           *
           *
           * The direction types `Up`, `Down`, `Left`, and `Right` are available when {@link sap.suite.ui.commons.statusindicator.FillingType}
           * is set to `Linear`.
           *  The direction types `Clockwise` and `Counterclockwise` are available when {@link sap.suite.ui.commons.statusindicator.FillingType}
           * is set to `Circular`.
           */
          enum FillingDirectionType {
            /**
             * Clockwise.
             */
            Clockwise,
            /**
             * Counterclockwise.
             */
            CounterClockwise,
            /**
             * From top to bottom.
             */
            Down,
            /**
             * From right to left.
             */
            Left,
            /**
             * From left to right.
             */
            Right,
            /**
             * From bottom upwards.
             */
            Up
          }
          /**
           * The type of filling.
           */
          enum FillingType {
            /**
             * Clockwise or counterclockwise circular filling is applied.
             *
             *  For details, see {@link sap.suite.ui.commons.statusindicator.FillingDirectionType}.
             */
            Circular,
            /**
             * The shape is filled with a linear gradient.
             */
            Linear,
            /**
             * No filling is applied.
             */
            None
          }
          /**
           * The horizontal alignment of the status indicator within its parent container.
           */
          enum HorizontalAlignmentType {
            /**
             * Left.
             */
            Left,
            /**
             * Middle.
             */
            Middle,
            /**
             * Right.
             */
            Right
          }
          /**
           * Position of the label, relative to the status indicator.
           */
          enum LabelPositionType {
            /**
             * Bottom.
             */
            Bottom,
            /**
             * Left
             */
            Left,
            /**
             * Right.
             */
            Right,
            /**
             * Top.
             */
            Top
          }
          /**
           * Predefined sizes of the status indicator.
           */
          enum SizeType {
            /**
             * Extra large status indicator.
             */
            ExtraLarge,
            /**
             * Large status indicator.
             */
            Large,
            /**
             * Medium status indicator.
             */
            Medium,
            /**
             * No size settings are applied.
             */
            None,
            /**
             * Small status indicator.
             */
            Small
          }
          /**
           * The vertical alignment of the status indicator within its parent container.
           */
          enum VerticalAlignmentType {
            /**
             * Bottom.
             */
            Bottom,
            /**
             * Middle.
             */
            Middle,
            /**
             * Top.
             */
            Top
          }
        }

        namespace taccount {
          interface TAccountOpts extends sap.ui.core.ControlOpts {
            /**
             * Unit of measurement. Can be set to a currency or any other applicable unit of measurement.
             *  Please note that if multi-currency accounts are used, the T account control will not convert the values
             * to the currency defined in this property.
             */
            measureOfUnit?: string;

            /**
             * Defines whether the T account should appear as collapsed.
             * By default, it appears as expanded.
             */
            collapsed?: boolean;

            /**
             * Title of the T account.
             */
            title?: string;

            /**
             * Subtitle of the T account.
             */
            subtitle?: string;

            /**
             * TAccount property's key, which is used for ordering. If not set, order mode is not enabled. Only supports
             * `DateTime` properties.
             */
            orderBy?: string;

            /**
             * Mode with opening and closing balance of the T account.
             */
            opening?: boolean;

            /**
             * Opening debit balance of the T account.
             */
            openingDebit?: number;

            /**
             * Opening credit balance of the T account.
             */
            openingCredit?: number;

            /**
             * Debit entries.
             */
            debit?:
              | sap.suite.ui.commons.taccount.TAccountItem[]
              | sap.suite.ui.commons.taccount.TAccountItem;

            /**
             * Credit entries.
             */
            credit?:
              | sap.suite.ui.commons.taccount.TAccountItem[]
              | sap.suite.ui.commons.taccount.TAccountItem;
          }

          interface TAccountGroupOpts extends sap.ui.core.ControlOpts {
            /**
             * Title of the group.
             */
            title?: string;

            /**
             * Defines whether the group should appear as collapsed. By default, it appears as expanded.
             */
            collapsed?: boolean;

            /**
             * T accounts included in the group.
             */
            accounts?:
              | sap.suite.ui.commons.taccount.TAccount[]
              | sap.suite.ui.commons.taccount.TAccount;
          }

          interface TAccountItemOpts extends sap.ui.core.ControlOpts {
            /**
             * Value of the credit or debit entry.
             */
            value?: number;

            /**
             * Color applied to the debit or credit entry.
             */
            color?: sap.m.ValueCSSColor;

            /**
             * Group where this debit or credit entry belongs.
             *  Entries that share the same group are highlighted when the user clicks or taps one of such entries.
             */
            group?: string;

            /**
             * Aria label for item.
             */
            ariaLabel?: string;

            /**
             * This event is fired when the user clicks or taps the entry. It highlights the entry and all other entries
             * that belong to the same group.
             */
            press?: Function;

            /**
             * Additional properties that define how the entry is displayed.
             */
            properties?:
              | sap.suite.ui.commons.taccount.TAccountItemProperty[]
              | sap.suite.ui.commons.taccount.TAccountItemProperty;
          }

          interface TAccountItemPropertyOpts extends sap.ui.core.ControlOpts {
            /**
             * Key of the property.
             */
            key?: string;

            /**
             * Value of the property.
             */
            value?: string;

            /**
             * Label of the property.
             * Can be hidden or displayed using the `displayLabel` property.
             */
            label?: string;

            /**
             * Defines whether the label should be displayed.
             *  This property can be overridden by the {@link sap.suite.ui.commons.TAccountPanel} settings.
             */
            displayLabel?: boolean;

            /**
             * Defines whether the T account property should be visible or hidden.
             */
            visible?: boolean;
          }

          interface TAccountPanelOpts extends sap.ui.core.ControlOpts {
            /**
             * Title of the panel.
             */
            title?: string;

            /**
             * State of the panel that defines how T accounts are displayed.
             *  By default, the T accounts included in the panel are displayed as T shapes with debit and credit entries
             * on either side of the T.
             */
            state?: sap.suite.ui.commons.taccount.TAccountPanelState;

            /**
             * Indicates whether the T account panel should be covered by a translucent overlay screen.
             *  This overlay screen can be used to hide the data temporarily.
             */
            showOverlay?: boolean;

            /**
             * This event is fired when the user switches between T account view and table view.
             */
            stateChanged?: Function;

            /**
             * This event is fired when the panel's settings are applied.
             */
            settingsApplied?: Function;

            /**
             * Properties of the T-account entries that can be shown or hidden using the panel's settings dialog.
             */
            properties?:
              | sap.suite.ui.commons.taccount.TAccountItemProperty[]
              | sap.suite.ui.commons.taccount.TAccountItemProperty;

            /**
             * Table that can be used to display additional data.
             */
            table?: sap.ui.core.Control;
          }
          /**
           * @SINCE 1.58.0
           *
           * The T account control displays debit and credit entries on a general ledger account. It can be used to
           * visualize the flow of transactions through the accounts where these transactions are stored.
           */
          class TAccount extends sap.ui.core.Control {
            /**
             * Constructor for a new TAccount.
             *
             * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
             * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
             * of the syntax of the settings object.
             * See:
             * 	{@link topic:fe6792fa673c4b0fba91d35fd6493c86 T Account}
             */
            constructor(
              /**
               * ID for the new control, generated automatically if no ID is given
               */
              sId?: string,
              /**
               * Initial settings for the new control
               */
              mSettings?: TAccountOpts
            );

            /**
             * Adds some credit to the aggregation {@link #getCredit credit}.
             */
            addCredit(
              /**
               * The credit to add; if empty, nothing is inserted
               */
              oCredit: sap.suite.ui.commons.taccount.TAccountItem
            ): sap.suite.ui.commons.taccount.TAccount;
            /**
             * Adds some debit to the aggregation {@link #getDebit debit}.
             */
            addDebit(
              /**
               * The debit to add; if empty, nothing is inserted
               */
              oDebit: sap.suite.ui.commons.taccount.TAccountItem
            ): sap.suite.ui.commons.taccount.TAccount;
            /**
             * Destroys all the credit in the aggregation {@link #getCredit credit}.
             */
            destroyCredit(): sap.suite.ui.commons.taccount.TAccount;
            /**
             * Destroys all the debit in the aggregation {@link #getDebit debit}.
             */
            destroyDebit(): sap.suite.ui.commons.taccount.TAccount;
            /**
             * Creates a new subclass of class sap.suite.ui.commons.taccount.TAccount with name `sClassName` and enriches
             * it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Gets current value of property {@link #getCollapsed collapsed}.
             *
             * Defines whether the T account should appear as collapsed.
             * By default, it appears as expanded.
             *
             * Default value is `false`.
             */
            getCollapsed(): boolean;
            /**
             * Gets content of aggregation {@link #getCredit credit}.
             *
             * Credit entries.
             */
            getCredit(): sap.suite.ui.commons.taccount.TAccountItem[];
            /**
             * Gets content of aggregation {@link #getDebit debit}.
             *
             * Debit entries.
             */
            getDebit(): sap.suite.ui.commons.taccount.TAccountItem[];
            /**
             * Gets current value of property {@link #getMeasureOfUnit measureOfUnit}.
             *
             * Unit of measurement. Can be set to a currency or any other applicable unit of measurement.
             *  Please note that if multi-currency accounts are used, the T account control will not convert the values
             * to the currency defined in this property.
             *
             * Default value is `empty string`.
             */
            getMeasureOfUnit(): string;
            /**
             * Returns a metadata object for class sap.suite.ui.commons.taccount.TAccount.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Gets current value of property {@link #getOpening opening}.
             *
             * Mode with opening and closing balance of the T account.
             *
             * Default value is `false`.
             */
            getOpening(): boolean;
            /**
             * Gets current value of property {@link #getOpeningCredit openingCredit}.
             *
             * Opening credit balance of the T account.
             *
             * Default value is `0`.
             */
            getOpeningCredit(): number;
            /**
             * Gets current value of property {@link #getOpeningDebit openingDebit}.
             *
             * Opening debit balance of the T account.
             *
             * Default value is `0`.
             */
            getOpeningDebit(): number;
            /**
             * Gets current value of property {@link #getOrderBy orderBy}.
             *
             * TAccount property's key, which is used for ordering. If not set, order mode is not enabled. Only supports
             * `DateTime` properties.
             *
             * Default value is `empty string`.
             */
            getOrderBy(): string;
            /**
             * Gets current value of property {@link #getSubtitle subtitle}.
             *
             * Subtitle of the T account.
             */
            getSubtitle(): string;
            /**
             * Gets current value of property {@link #getTitle title}.
             *
             * Title of the T account.
             */
            getTitle(): string;
            /**
             * Checks for the provided `sap.suite.ui.commons.taccount.TAccountItem` in the aggregation {@link #getCredit
             * credit}. and returns its index if found or -1 otherwise.
             */
            indexOfCredit(
              /**
               * The credit whose index is looked for
               */
              oCredit: sap.suite.ui.commons.taccount.TAccountItem
            ): number;
            /**
             * Checks for the provided `sap.suite.ui.commons.taccount.TAccountItem` in the aggregation {@link #getDebit
             * debit}. and returns its index if found or -1 otherwise.
             */
            indexOfDebit(
              /**
               * The debit whose index is looked for
               */
              oDebit: sap.suite.ui.commons.taccount.TAccountItem
            ): number;
            /**
             * Inserts a credit into the aggregation {@link #getCredit credit}.
             */
            insertCredit(
              /**
               * The credit to insert; if empty, nothing is inserted
               */
              oCredit: sap.suite.ui.commons.taccount.TAccountItem,
              /**
               * The `0`-based index the credit should be inserted at; for a negative value of `iIndex`, the credit is
               * inserted at position 0; for a value greater than the current size of the aggregation, the credit is inserted
               * at the last position
               */
              iIndex: number
            ): sap.suite.ui.commons.taccount.TAccount;
            /**
             * Inserts a debit into the aggregation {@link #getDebit debit}.
             */
            insertDebit(
              /**
               * The debit to insert; if empty, nothing is inserted
               */
              oDebit: sap.suite.ui.commons.taccount.TAccountItem,
              /**
               * The `0`-based index the debit should be inserted at; for a negative value of `iIndex`, the debit is inserted
               * at position 0; for a value greater than the current size of the aggregation, the debit is inserted at
               * the last position
               */
              iIndex: number
            ): sap.suite.ui.commons.taccount.TAccount;
            /**
             * Removes all the controls from the aggregation {@link #getCredit credit}.
             *
             * Additionally, it unregisters them from the hosting UIArea.
             */
            removeAllCredit(): sap.suite.ui.commons.taccount.TAccountItem[];
            /**
             * Removes all the controls from the aggregation {@link #getDebit debit}.
             *
             * Additionally, it unregisters them from the hosting UIArea.
             */
            removeAllDebit(): sap.suite.ui.commons.taccount.TAccountItem[];
            /**
             * Removes a credit from the aggregation {@link #getCredit credit}.
             */
            removeCredit(
              /**
               * The credit to remove or its index or id
               */
              vCredit:
                | number
                | string
                | sap.suite.ui.commons.taccount.TAccountItem
            ): sap.suite.ui.commons.taccount.TAccountItem;
            /**
             * Removes a debit from the aggregation {@link #getDebit debit}.
             */
            removeDebit(
              /**
               * The debit to remove or its index or id
               */
              vDebit:
                | number
                | string
                | sap.suite.ui.commons.taccount.TAccountItem
            ): sap.suite.ui.commons.taccount.TAccountItem;
            /**
             * @SINCE 1.68
             *
             * Resets the internal state of the T account.
             */
            reset(): void;
            /**
             * Sets a new value for property {@link #getCollapsed collapsed}.
             *
             * Defines whether the T account should appear as collapsed.
             * By default, it appears as expanded.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `false`.
             */
            setCollapsed(
              /**
               * New value for property `collapsed`
               */
              bCollapsed: boolean
            ): sap.suite.ui.commons.taccount.TAccount;
            /**
             * Sets a new value for property {@link #getMeasureOfUnit measureOfUnit}.
             *
             * Unit of measurement. Can be set to a currency or any other applicable unit of measurement.
             *  Please note that if multi-currency accounts are used, the T account control will not convert the values
             * to the currency defined in this property.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `empty string`.
             */
            setMeasureOfUnit(
              /**
               * New value for property `measureOfUnit`
               */
              sMeasureOfUnit: string
            ): sap.suite.ui.commons.taccount.TAccount;
            /**
             * Sets a new value for property {@link #getOpening opening}.
             *
             * Mode with opening and closing balance of the T account.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `false`.
             */
            setOpening(
              /**
               * New value for property `opening`
               */
              bOpening: boolean
            ): sap.suite.ui.commons.taccount.TAccount;
            /**
             * Sets a new value for property {@link #getOpeningCredit openingCredit}.
             *
             * Opening credit balance of the T account.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `0`.
             */
            setOpeningCredit(
              /**
               * New value for property `openingCredit`
               */
              fOpeningCredit: number
            ): sap.suite.ui.commons.taccount.TAccount;
            /**
             * Sets a new value for property {@link #getOpeningDebit openingDebit}.
             *
             * Opening debit balance of the T account.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `0`.
             */
            setOpeningDebit(
              /**
               * New value for property `openingDebit`
               */
              fOpeningDebit: number
            ): sap.suite.ui.commons.taccount.TAccount;
            /**
             * Sets a new value for property {@link #getOrderBy orderBy}.
             *
             * TAccount property's key, which is used for ordering. If not set, order mode is not enabled. Only supports
             * `DateTime` properties.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `empty string`.
             */
            setOrderBy(
              /**
               * New value for property `orderBy`
               */
              sOrderBy: string
            ): sap.suite.ui.commons.taccount.TAccount;
            /**
             * Sets a new value for property {@link #getSubtitle subtitle}.
             *
             * Subtitle of the T account.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setSubtitle(
              /**
               * New value for property `subtitle`
               */
              sSubtitle: string
            ): sap.suite.ui.commons.taccount.TAccount;
            /**
             * Sets a new value for property {@link #getTitle title}.
             *
             * Title of the T account.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setTitle(
              /**
               * New value for property `title`
               */
              sTitle: string
            ): sap.suite.ui.commons.taccount.TAccount;
          }
          /**
           * @SINCE 1.58.0
           *
           * The T account group control displays debit and credit entries for all {@link sap.suite.ui.commons.TAccount}
           * controls included in the group.
           */
          class TAccountGroup extends sap.ui.core.Control {
            /**
             * Constructor for a new TAccountGroup.
             *
             * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
             * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
             * of the syntax of the settings object.
             */
            constructor(
              /**
               * ID for the new control, generated automatically if no ID is given
               */
              sId?: string,
              /**
               * Initial settings for the new control
               */
              mSettings?: TAccountGroupOpts
            );

            /**
             * Adds some account to the aggregation {@link #getAccounts accounts}.
             */
            addAccount(
              /**
               * The account to add; if empty, nothing is inserted
               */
              oAccount: sap.suite.ui.commons.taccount.TAccount
            ): sap.suite.ui.commons.taccount.TAccountGroup;
            /**
             * Destroys all the accounts in the aggregation {@link #getAccounts accounts}.
             */
            destroyAccounts(): sap.suite.ui.commons.taccount.TAccountGroup;
            /**
             * Creates a new subclass of class sap.suite.ui.commons.taccount.TAccountGroup with name `sClassName` and
             * enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Gets content of aggregation {@link #getAccounts accounts}.
             *
             * T accounts included in the group.
             */
            getAccounts(): sap.suite.ui.commons.taccount.TAccount[];
            /**
             * Gets current value of property {@link #getCollapsed collapsed}.
             *
             * Defines whether the group should appear as collapsed. By default, it appears as expanded.
             *
             * Default value is `false`.
             */
            getCollapsed(): boolean;
            /**
             * Returns a metadata object for class sap.suite.ui.commons.taccount.TAccountGroup.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Gets current value of property {@link #getTitle title}.
             *
             * Title of the group.
             */
            getTitle(): string;
            /**
             * Checks for the provided `sap.suite.ui.commons.taccount.TAccount` in the aggregation {@link #getAccounts
             * accounts}. and returns its index if found or -1 otherwise.
             */
            indexOfAccount(
              /**
               * The account whose index is looked for
               */
              oAccount: sap.suite.ui.commons.taccount.TAccount
            ): number;
            /**
             * Inserts a account into the aggregation {@link #getAccounts accounts}.
             */
            insertAccount(
              /**
               * The account to insert; if empty, nothing is inserted
               */
              oAccount: sap.suite.ui.commons.taccount.TAccount,
              /**
               * The `0`-based index the account should be inserted at; for a negative value of `iIndex`, the account
               * is inserted at position 0; for a value greater than the current size of the aggregation, the account
               * is inserted at the last position
               */
              iIndex: number
            ): sap.suite.ui.commons.taccount.TAccountGroup;
            /**
             * Removes a account from the aggregation {@link #getAccounts accounts}.
             */
            removeAccount(
              /**
               * The account to remove or its index or id
               */
              vAccount: number | string | sap.suite.ui.commons.taccount.TAccount
            ): sap.suite.ui.commons.taccount.TAccount;
            /**
             * Removes all the controls from the aggregation {@link #getAccounts accounts}.
             *
             * Additionally, it unregisters them from the hosting UIArea.
             */
            removeAllAccounts(): sap.suite.ui.commons.taccount.TAccount[];
            /**
             * @SINCE 1.68
             *
             * Resets the internal state of the T account group.
             */
            reset(): void;
            /**
             * Sets a new value for property {@link #getCollapsed collapsed}.
             *
             * Defines whether the group should appear as collapsed. By default, it appears as expanded.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `false`.
             */
            setCollapsed(
              /**
               * New value for property `collapsed`
               */
              bCollapsed: boolean
            ): sap.suite.ui.commons.taccount.TAccountGroup;
            /**
             * Sets a new value for property {@link #getTitle title}.
             *
             * Title of the group.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setTitle(
              /**
               * New value for property `title`
               */
              sTitle: string
            ): sap.suite.ui.commons.taccount.TAccountGroup;
          }
          /**
           * @SINCE 1.58.0
           *
           * The T account item control represents a credit or debit entry on a {@link sap.suite.ui.commons.TAccount}.
           */
          class TAccountItem extends sap.ui.core.Control {
            /**
             * Constructor for a new TAccountItem.
             *
             * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
             * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
             * of the syntax of the settings object.
             */
            constructor(
              /**
               * ID for the new control, generated automatically if no ID is given
               */
              sId?: string,
              /**
               * Initial settings for the new control
               */
              mSettings?: TAccountItemOpts
            );

            /**
             * Adds some property to the aggregation {@link #getProperties properties}.
             */
            addProperty(
              /**
               * The property to add; if empty, nothing is inserted
               */
              oProperty: sap.suite.ui.commons.taccount.TAccountItemProperty
            ): sap.suite.ui.commons.taccount.TAccountItem;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.taccount.TAccountItem`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.taccount.TAccountItem` itself.
             *
             * This event is fired when the user clicks or taps the entry. It highlights the entry and all other entries
             * that belong to the same group.
             */
            attachPress(
              /**
               * An application-specific payload object that will be passed to the event handler along with the event
               * object when firing the event
               */
              oData: object,
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.taccount.TAccountItem`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.taccount.TAccountItem;
            /**
             * Destroys all the properties in the aggregation {@link #getProperties properties}.
             */
            destroyProperties(): sap.suite.ui.commons.taccount.TAccountItem;
            /**
             * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.suite.ui.commons.taccount.TAccountItem`.
             *
             * The passed function and listener object must match the ones used for event registration.
             */
            detachPress(
              /**
               * The function to be called, when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object on which the given function had to be called
               */
              oListener?: object
            ): sap.suite.ui.commons.taccount.TAccountItem;
            /**
             * Creates a new subclass of class sap.suite.ui.commons.taccount.TAccountItem with name `sClassName` and
             * enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Fires event {@link #event:press press} to attached listeners.
             */
            firePress(
              /**
               * Parameters to pass along with the event
               */
              mParameters?: object
            ): sap.suite.ui.commons.taccount.TAccountItem;
            /**
             * Gets current value of property {@link #getAriaLabel ariaLabel}.
             *
             * Aria label for item.
             *
             * Default value is `empty string`.
             */
            getAriaLabel(): string;
            /**
             * Gets current value of property {@link #getColor color}.
             *
             * Color applied to the debit or credit entry.
             */
            getColor(): sap.m.ValueCSSColor;
            /**
             * Gets current value of property {@link #getGroup group}.
             *
             * Group where this debit or credit entry belongs.
             *  Entries that share the same group are highlighted when the user clicks or taps one of such entries.
             *
             * Default value is `empty string`.
             */
            getGroup(): string;
            /**
             * Returns a metadata object for class sap.suite.ui.commons.taccount.TAccountItem.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Gets content of aggregation {@link #getProperties properties}.
             *
             * Additional properties that define how the entry is displayed.
             */
            getProperties(): sap.suite.ui.commons.taccount.TAccountItemProperty[];
            /**
             * Gets current value of property {@link #getValue value}.
             *
             * Value of the credit or debit entry.
             *
             * Default value is `0`.
             */
            getValue(): number;
            /**
             * Checks for the provided `sap.suite.ui.commons.taccount.TAccountItemProperty` in the aggregation {@link
             * #getProperties properties}. and returns its index if found or -1 otherwise.
             */
            indexOfProperty(
              /**
               * The property whose index is looked for
               */
              oProperty: sap.suite.ui.commons.taccount.TAccountItemProperty
            ): number;
            /**
             * Inserts a property into the aggregation {@link #getProperties properties}.
             */
            insertProperty(
              /**
               * The property to insert; if empty, nothing is inserted
               */
              oProperty: sap.suite.ui.commons.taccount.TAccountItemProperty,
              /**
               * The `0`-based index the property should be inserted at; for a negative value of `iIndex`, the property
               * is inserted at position 0; for a value greater than the current size of the aggregation, the property
               * is inserted at the last position
               */
              iIndex: number
            ): sap.suite.ui.commons.taccount.TAccountItem;
            /**
             * Removes all the controls from the aggregation {@link #getProperties properties}.
             *
             * Additionally, it unregisters them from the hosting UIArea.
             */
            removeAllProperties(): sap.suite.ui.commons.taccount.TAccountItemProperty[];
            /**
             * Removes a property from the aggregation {@link #getProperties properties}.
             */
            removeProperty(
              /**
               * The property to remove or its index or id
               */
              vProperty:
                | number
                | string
                | sap.suite.ui.commons.taccount.TAccountItemProperty
            ): sap.suite.ui.commons.taccount.TAccountItemProperty;
            /**
             * Sets a new value for property {@link #getAriaLabel ariaLabel}.
             *
             * Aria label for item.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `empty string`.
             */
            setAriaLabel(
              /**
               * New value for property `ariaLabel`
               */
              sAriaLabel: string
            ): sap.suite.ui.commons.taccount.TAccountItem;
            /**
             * Sets a new value for property {@link #getColor color}.
             *
             * Color applied to the debit or credit entry.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setColor(
              /**
               * New value for property `color`
               */
              sColor: sap.m.ValueCSSColor
            ): sap.suite.ui.commons.taccount.TAccountItem;
            /**
             * Sets a new value for property {@link #getGroup group}.
             *
             * Group where this debit or credit entry belongs.
             *  Entries that share the same group are highlighted when the user clicks or taps one of such entries.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `empty string`.
             */
            setGroup(
              /**
               * New value for property `group`
               */
              sGroup: string
            ): sap.suite.ui.commons.taccount.TAccountItem;
            /**
             * Sets a new value for property {@link #getValue value}.
             *
             * Value of the credit or debit entry.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `0`.
             */
            setValue(
              /**
               * New value for property `value`
               */
              fValue: number
            ): sap.suite.ui.commons.taccount.TAccountItem;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.taccount.TAccountItem`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.taccount.TAccountItem` itself.
             *
             * This event is fired when the user clicks or taps the entry. It highlights the entry and all other entries
             * that belong to the same group.
             */
            attachPress(
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.taccount.TAccountItem`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.taccount.TAccountItem;
          }
          /**
           * @SINCE 1.58.0
           *
           * An additional property that defines how a {@link sap.suite.ui.commons.TAccountItem} is displayed.
           */
          class TAccountItemProperty extends sap.ui.core.Control {
            /**
             * Constructor for a new TAccountItemProperty.
             *
             * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
             * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
             * of the syntax of the settings object.
             */
            constructor(
              /**
               * ID for the new control, generated automatically if no ID is given
               */
              sId?: string,
              /**
               * Initial settings for the new control
               */
              mSettings?: TAccountItemPropertyOpts
            );

            /**
             * Creates a new subclass of class sap.suite.ui.commons.taccount.TAccountItemProperty with name `sClassName`
             * and enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Gets current value of property {@link #getDisplayLabel displayLabel}.
             *
             * Defines whether the label should be displayed.
             *  This property can be overridden by the {@link sap.suite.ui.commons.TAccountPanel} settings.
             *
             * Default value is `true`.
             */
            getDisplayLabel(): boolean;
            /**
             * Gets current value of property {@link #getKey key}.
             *
             * Key of the property.
             */
            getKey(): string;
            /**
             * Gets current value of property {@link #getLabel label}.
             *
             * Label of the property.
             * Can be hidden or displayed using the `displayLabel` property.
             */
            getLabel(): string;
            /**
             * Returns a metadata object for class sap.suite.ui.commons.taccount.TAccountItemProperty.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Gets current value of property {@link #getValue value}.
             *
             * Value of the property.
             */
            getValue(): string;
            /**
             * Gets current value of property {@link #getVisible visible}.
             *
             * Defines whether the T account property should be visible or hidden.
             *
             * Default value is `true`.
             */
            // @ts-ignore
            getVisible(): boolean;
            /**
             * Sets a new value for property {@link #getDisplayLabel displayLabel}.
             *
             * Defines whether the label should be displayed.
             *  This property can be overridden by the {@link sap.suite.ui.commons.TAccountPanel} settings.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `true`.
             */
            setDisplayLabel(
              /**
               * New value for property `displayLabel`
               */
              bDisplayLabel: boolean
            ): sap.suite.ui.commons.taccount.TAccountItemProperty;
            /**
             * Sets a new value for property {@link #getKey key}.
             *
             * Key of the property.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setKey(
              /**
               * New value for property `key`
               */
              sKey: string
            ): sap.suite.ui.commons.taccount.TAccountItemProperty;
            /**
             * Sets a new value for property {@link #getLabel label}.
             *
             * Label of the property.
             * Can be hidden or displayed using the `displayLabel` property.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setLabel(
              /**
               * New value for property `label`
               */
              sLabel: string
            ): sap.suite.ui.commons.taccount.TAccountItemProperty;
            /**
             * Sets a new value for property {@link #getValue value}.
             *
             * Value of the property.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setValue(
              /**
               * New value for property `value`
               */
              sValue: string
            ): sap.suite.ui.commons.taccount.TAccountItemProperty;
            /**
             * Sets a new value for property {@link #getVisible visible}.
             *
             * Defines whether the T account property should be visible or hidden.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `true`.
             */
            // @ts-ignore
            setVisible(
              /**
               * New value for property `visible`
               */
              bVisible: boolean
            ): sap.suite.ui.commons.taccount.TAccountItemProperty;
          }
          /**
           * @SINCE 1.58.0
           *
           * A panel that acts as a container for {@link sap.suite.ui.commons.TAccountGroup} controls included in
           * it.
           *  The settings dialog of the panel can be used to modify how the {@link sap.suite.ui.commons.TAccountItem}
           * elements in the included T accounts are displayed.
           */
          class TAccountPanel extends sap.ui.core.Control {
            /**
             * Constructor for a new TAccountPanel.
             *
             * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
             * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
             * of the syntax of the settings object.
             */
            constructor(
              /**
               * ID for the new control, generated automatically if no ID is given
               */
              sId?: string,
              /**
               * Initial settings for the new control
               */
              mSettings?: TAccountPanelOpts
            );

            /**
             * Adds some property to the aggregation {@link #getProperties properties}.
             */
            addProperty(
              /**
               * The property to add; if empty, nothing is inserted
               */
              oProperty: sap.suite.ui.commons.taccount.TAccountItemProperty
            ): sap.suite.ui.commons.taccount.TAccountPanel;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:settingsApplied settingsApplied} event of this
             * `sap.suite.ui.commons.taccount.TAccountPanel`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.taccount.TAccountPanel` itself.
             *
             * This event is fired when the panel's settings are applied.
             */
            attachSettingsApplied(
              /**
               * An application-specific payload object that will be passed to the event handler along with the event
               * object when firing the event
               */
              oData: object,
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.taccount.TAccountPanel`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.taccount.TAccountPanel;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:stateChanged stateChanged} event of this `sap.suite.ui.commons.taccount.TAccountPanel`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.taccount.TAccountPanel` itself.
             *
             * This event is fired when the user switches between T account view and table view.
             */
            attachStateChanged(
              /**
               * An application-specific payload object that will be passed to the event handler along with the event
               * object when firing the event
               */
              oData: object,
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.taccount.TAccountPanel`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.taccount.TAccountPanel;
            /**
             * Destroys all the properties in the aggregation {@link #getProperties properties}.
             */
            destroyProperties(): sap.suite.ui.commons.taccount.TAccountPanel;
            /**
             * Destroys the table in the aggregation {@link #getTable table}.
             */
            destroyTable(): sap.suite.ui.commons.taccount.TAccountPanel;
            /**
             * Detaches event handler `fnFunction` from the {@link #event:settingsApplied settingsApplied} event of
             * this `sap.suite.ui.commons.taccount.TAccountPanel`.
             *
             * The passed function and listener object must match the ones used for event registration.
             */
            detachSettingsApplied(
              /**
               * The function to be called, when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object on which the given function had to be called
               */
              oListener?: object
            ): sap.suite.ui.commons.taccount.TAccountPanel;
            /**
             * Detaches event handler `fnFunction` from the {@link #event:stateChanged stateChanged} event of this `sap.suite.ui.commons.taccount.TAccountPanel`.
             *
             * The passed function and listener object must match the ones used for event registration.
             */
            detachStateChanged(
              /**
               * The function to be called, when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object on which the given function had to be called
               */
              oListener?: object
            ): sap.suite.ui.commons.taccount.TAccountPanel;
            /**
             * Creates a new subclass of class sap.suite.ui.commons.taccount.TAccountPanel with name `sClassName` and
             * enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Fires event {@link #event:settingsApplied settingsApplied} to attached listeners.
             */
            fireSettingsApplied(
              /**
               * Parameters to pass along with the event
               */
              mParameters?: {
                /**
                 * Hash map witch changed properties
                 */
                properties?: object;
              }
            ): sap.suite.ui.commons.taccount.TAccountPanel;
            /**
             * Fires event {@link #event:stateChanged stateChanged} to attached listeners.
             */
            fireStateChanged(
              /**
               * Parameters to pass along with the event
               */
              mParameters?: {
                /**
                 * Type of current state
                 */
                state?: sap.suite.ui.commons.taccount.TAccountPanelState;
              }
            ): sap.suite.ui.commons.taccount.TAccountPanel;
            /**
             * Returns a metadata object for class sap.suite.ui.commons.taccount.TAccountPanel.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Gets content of aggregation {@link #getProperties properties}.
             *
             * Properties of the T-account entries that can be shown or hidden using the panel's settings dialog.
             */
            getProperties(): sap.suite.ui.commons.taccount.TAccountItemProperty[];
            /**
             * Returns the settings dialog of the panel.
             */
            getSettingsDialog(): void;
            /**
             * Gets current value of property {@link #getShowOverlay showOverlay}.
             *
             * Indicates whether the T account panel should be covered by a translucent overlay screen.
             *  This overlay screen can be used to hide the data temporarily.
             *
             * Default value is `false`.
             */
            getShowOverlay(): boolean;
            /**
             * Gets current value of property {@link #getState state}.
             *
             * State of the panel that defines how T accounts are displayed.
             *  By default, the T accounts included in the panel are displayed as T shapes with debit and credit entries
             * on either side of the T.
             *
             * Default value is `Default`.
             */
            getState(): sap.suite.ui.commons.taccount.TAccountPanelState;
            /**
             * Gets the sum of transactions in all T-account groups included in the panel.
             *
             *
             * Returns a sum object that is structured as follows:
             *  `{`
             *  `measure: {string}` Unit of measurement of the T accounts. If T accounts use different units of measurements,
             * the last one is returned.
             *  `sum: {number}` Sum of all entries in the T accounts and T-account groups included in the panel.
             *  `correct: {boolean}` If `false`, the sum cannot be calculated, because the T accounts use different
             * units of measurement.
             *  `}`
             */
            getSum(): Object;
            /**
             * Gets content of aggregation {@link #getTable table}.
             *
             * Table that can be used to display additional data.
             */
            getTable(): sap.ui.core.Control;
            /**
             * Gets current value of property {@link #getTitle title}.
             *
             * Title of the panel.
             */
            getTitle(): string;
            /**
             * Returns the panel's toolbar, so the app can modify it.
             */
            getToolbar(): void;
            /**
             * Checks for the provided `sap.suite.ui.commons.taccount.TAccountItemProperty` in the aggregation {@link
             * #getProperties properties}. and returns its index if found or -1 otherwise.
             */
            indexOfProperty(
              /**
               * The property whose index is looked for
               */
              oProperty: sap.suite.ui.commons.taccount.TAccountItemProperty
            ): number;
            /**
             * Inserts a property into the aggregation {@link #getProperties properties}.
             */
            insertProperty(
              /**
               * The property to insert; if empty, nothing is inserted
               */
              oProperty: sap.suite.ui.commons.taccount.TAccountItemProperty,
              /**
               * The `0`-based index the property should be inserted at; for a negative value of `iIndex`, the property
               * is inserted at position 0; for a value greater than the current size of the aggregation, the property
               * is inserted at the last position
               */
              iIndex: number
            ): sap.suite.ui.commons.taccount.TAccountPanel;
            /**
             * Opens the settings dialog of the panel.
             */
            openSettings(): void;
            /**
             * Removes all the controls from the aggregation {@link #getProperties properties}.
             *
             * Additionally, it unregisters them from the hosting UIArea.
             */
            removeAllProperties(): sap.suite.ui.commons.taccount.TAccountItemProperty[];
            /**
             * Removes a property from the aggregation {@link #getProperties properties}.
             */
            removeProperty(
              /**
               * The property to remove or its index or id
               */
              vProperty:
                | number
                | string
                | sap.suite.ui.commons.taccount.TAccountItemProperty
            ): sap.suite.ui.commons.taccount.TAccountItemProperty;
            /**
             * @SINCE 1.68
             *
             * Resets the internal state of the T account group.
             */
            reset(): void;
            /**
             * Sets a new value for property {@link #getShowOverlay showOverlay}.
             *
             * Indicates whether the T account panel should be covered by a translucent overlay screen.
             *  This overlay screen can be used to hide the data temporarily.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `false`.
             */
            setShowOverlay(
              /**
               * New value for property `showOverlay`
               */
              bShowOverlay: boolean
            ): sap.suite.ui.commons.taccount.TAccountPanel;
            /**
             * Sets a new value for property {@link #getState state}.
             *
             * State of the panel that defines how T accounts are displayed.
             *  By default, the T accounts included in the panel are displayed as T shapes with debit and credit entries
             * on either side of the T.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `Default`.
             */
            setState(
              /**
               * New value for property `state`
               */
              sState: sap.suite.ui.commons.taccount.TAccountPanelState
            ): sap.suite.ui.commons.taccount.TAccountPanel;
            /**
             * Sets the aggregated {@link #getTable table}.
             */
            setTable(
              /**
               * The table to set
               */
              oTable: sap.ui.core.Control
            ): sap.suite.ui.commons.taccount.TAccountPanel;
            /**
             * Sets a new value for property {@link #getTitle title}.
             *
             * Title of the panel.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setTitle(
              /**
               * New value for property `title`
               */
              sTitle: string
            ): sap.suite.ui.commons.taccount.TAccountPanel;
            /**
             * Switches the content displayed in the panel to either table view or T-account view.
             */
            switchContent(
              /**
               * Defines whether to show accounts as tables (`true`) or standard T accounts.
               */
              showTable: boolean
            ): void;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:settingsApplied settingsApplied} event of this
             * `sap.suite.ui.commons.taccount.TAccountPanel`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.taccount.TAccountPanel` itself.
             *
             * This event is fired when the panel's settings are applied.
             */
            attachSettingsApplied(
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.taccount.TAccountPanel`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.taccount.TAccountPanel;
            /**
             * Attaches event handler `fnFunction` to the {@link #event:stateChanged stateChanged} event of this `sap.suite.ui.commons.taccount.TAccountPanel`.
             *
             * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
             * otherwise it will be bound to this `sap.suite.ui.commons.taccount.TAccountPanel` itself.
             *
             * This event is fired when the user switches between T account view and table view.
             */
            attachStateChanged(
              /**
               * The function to be called when the event occurs
               */
              fnFunction: Function,
              /**
               * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.taccount.TAccountPanel`
               * itself
               */
              oListener?: object
            ): sap.suite.ui.commons.taccount.TAccountPanel;
          }
          /**
           * The state of the {@link sap.suite.ui.commons.taccount.TAccountPanel} that defines how T accounts included
           * in the panel are displayed.
           */
          enum TAccountPanelState {
            /**
             * The T account panel displays T accounts as T shapes with debit and credit entries on either side of the
             * T.
             */
            Default,
            /**
             * The T account panel displays T accounts as an aggregated table, with each debit and credit entry listed
             * on a separate row.
             */
            Table
          }
        }

        namespace util {
          /**
           * HtmlElement A model class for holding information about one HTML tag.
           */
          class HtmlElement extends sap.ui.base.Object {
            /**
             * Creates a HtmlElement which resembles one HTML tag.
             */
            constructor(
              /**
               * Tag name (eg. div, ul etc.).
               */
              sName: string
            );

            /**
             * Adds a child to the element. A child can be either text, another HtmlElement or a Control. Children will
             * e rendered as a content of this element.
             */
            addChild(
              /**
               * Child to add.
               */
              oChild:
                | string
                | sap.suite.ui.commons.util.HtmlElement
                | sap.ui.core.Control
            ): void;
            /**
             * Adds a string child and escapes it using encodeHTML.
             */
            addChildEscaped(
              /**
               * Text to add.
               */
              sText: string,
              /**
               * If true, \n will be converted to
               * .
               */
              bConvertLineBreakToBr: boolean
            ): void;
            /**
             * Adds a class.
             */
            addClass(
              /**
               * CSS class to add.
               */
              sClass: string
            ): void;
            /**
             * Adds all html relevant data from UI5 control. It sets ID, adds all custom data and adds custom style
             * classes. This function should be called on the element which resembles the rendered control. It's usually
             * the top element.
             */
            addControlData(
              /**
               * Control to load data from. Usually the control which resembles this element.
               */
              oControl: sap.ui.core.Control
            ): void;
            /**
             * Adds a HTML style (eg. "color:red").
             */
            addStyle(
              /**
               * Name of the style (eg. margin, color).
               */
              sName: string,
              /**
               * Value of the style.
               */
              oValue: string | number
            ): void;
            /**
             * Creates a new subclass of class sap.suite.ui.commons.util.HtmlElement with name `sClassName` and enriches
             * it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Returns a metadata object for class sap.suite.ui.commons.util.HtmlElement.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Returns a renderer for this tag.
             */
            getRenderer(): sap.suite.ui.commons.util.HtmlElementRenderer;
            /**
             * Sets an attribute.
             */
            setAttribute(
              /**
               * Attribute name.
               */
              sKey: string,
              /**
               * Value of an attribute.
               */
              oValue: string | number | boolean,
              /**
               * Tells if the value should be escaped using encodeHTML.
               */
              bEscape?: boolean
            ): void;
            /**
             * Sets id attribute.
             */
            setId(
              /**
               * Id to set.
               */
              sId: string,
              /**
               * If true, data-sap-ui will be set to the Id as well.
               */
              bAddSapUi?: boolean
            ): void;
          }
          /**
           * HtmlElementRenderer A renderer for HtmlElement.
           */
          class HtmlElementRenderer extends sap.ui.base.Object {
            /**
             * Creates a renderer for HtmlElement.
             */
            constructor(
              /**
               * Html element to render.
               */
              oHtmlElement: sap.suite.ui.commons.util.HtmlElement
            );

            /**
             * Renders all attributes of parent tag.
             */
            _renderAttributes(
              /**
               * RenderManager used for outputting content.
               */
              oRm: sap.ui.core.RenderManager
            ): void;
            /**
             * Renders children of given node.
             */
            _renderChildren(
              /**
               * RenderManager used for outputting content.
               */
              oRm: sap.ui.core.RenderManager
            ): void;
            /**
             * Creates a new subclass of class sap.suite.ui.commons.util.HtmlElementRenderer with name `sClassName`
             * and enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Returns a metadata object for class sap.suite.ui.commons.util.HtmlElementRenderer.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Renders HtmlElement to given render manager.
             */
            render(
              /**
               * RenderManager used for outputting content.
               */
              oRm: sap.ui.core.RenderManager
            ): void;
          }
          /**
           * A registry which keeps a set of managed objects and allows you to lazy load them and destroy them at
           * once. A lot of controls keep those object as private properties and destroies them one by one. Instead
           * you can just use:
           * ```javascript
           *
           * this._objectRegister = new ManagedObjectRegister();
           * this._objectRegister.register("Button", function() {
           *  return new Button(...);
           * });
           *
           * this._objectRegister.getButton()...
           *
           * this._objectRegister.destroyAll();
           * ```
           */
          class ManagedObjectRegister extends sap.ui.base.Object {
            /**
             * Creates an object registry for storing references to managed objects.
             */
            constructor();

            /**
             * Destroys all objects in the registry and removes it's definition.
             */
            destroyAll(): void;
            /**
             * Destroys an object and removes it from the registry.
             */
            destroyObject(
              /**
               * Key of the object.
               */
              sKey: string
            ): void;
            /**
             * Creates a new subclass of class sap.suite.ui.commons.util.ManagedObjectRegister with name `sClassName`
             * and enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Returns a metadata object for class sap.suite.ui.commons.util.ManagedObjectRegister.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Returns a stored object. If called without parameters it will return object registered with key "Object".
             */
            getObject(
              /**
               * Key of the object.
               */
              sKey?: string
            ): sap.ui.base.ManagedObject;
            /**
             * Returns true if there is the object registered and created. If there is not triggered factory function,
             * returns false.
             */
            isObjectInitialized(
              /**
               * Key of the object.
               */
              sKey?: string
            ): boolean;
            /**
             * Registers an object. Registry will automatically create a getter for the object.
             */
            register(
              /**
               * Key of the object. Should start with capital letter.
               */
              sKey: string,
              /**
               * A managed object to register or a factory function which can build the object. Factory function can be
               * used for lazy loading of the object. Register will pass sKey to the function, so it can be shared for
               * more objects.
               */
              oFactoryFunction: Function | sap.ui.base.ManagedObject
            ): void;
          }
        }

        interface BulletChartOpts
          extends sap.suite.ui.microchart.BulletMicroChartOpts {}

        interface BulletChartDataOpts
          extends sap.suite.ui.microchart.BulletMicroChartDataOpts {}

        interface BusinessCardOpts extends sap.ui.core.ControlOpts {
          /**
           * Title of the BusinessCard that describes its type.
           */
          type?: string;

          /**
           * A path to the BusinessCard icon.
           */
          iconPath?: sap.ui.core.URI;

          /**
           * A short text line that describes this BusinessCard.
           */
          secondTitle?: string;

          /**
           * Width of the BusinessCard. Alternatively, CSS size can be set in %, px, or em.
           */
          width?: sap.ui.core.CSSSize;

          /**
           * A tooltip that is set for an image.
           */
          imageTooltip?: string;

          /**
           * The content of the BusinessCard body must be provided by the application developer.
           */
          content?: sap.ui.core.Control;

          /**
           * Any control that can display a title. Content of this control appears at the first position in BusinessCard.
           * Recomended controls: sap.ui.commons.Label and sap.ui.commons.Link.
           */
          firstTitle?: sap.ui.core.Control;
        }

        interface CalculationBuilderOpts extends sap.ui.core.ControlOpts {
          /**
           * Holds the arithmetic expression.
           *  Use either this property or aggregation `Items`. Not both.
           */
          expression?: string;

          /**
           * The title of the calculation builder element.
           */
          title?: string;

          /**
           * Defines whether the toolbar is visible.
           */
          showToolbar?: boolean;

          /**
           * Defines whether the expression should be wrapped inside the calculation builder field.
           *  If set to `false`, the expression is rearranged into a single scrollable row.
           */
          wrapItemsInExpression?: boolean;

          /**
           * Defines the layout type used for the calculation builder.
           *  The layout may include a visual editor, a text editor, or both. In addition, you can set the text editor
           * to be read-only.
           */
          layoutType?: string;

          /**
           * Defines whether the input toolbar is visible.
           *  The input toolbar contains operators and functions that can be used in the expression.
           */
          showInputToolbar?: boolean;

          /**
           * Defines whether the control is read-only.
           */
          readOnly?: boolean;

          /**
           * Defines whether comparison operators (, =, =, !=) are allowed.
           */
          allowComparisonOperators?: boolean;

          /**
           * Defines whether logical operators (AND, OR, XOR, NOT) are allowed.
           */
          allowLogicalOperators?: boolean;

          /**
           * Defines whether autocomplete suggestions are shown when you type. Available only for desktop devices.
           */
          allowSuggestions?: boolean;

          /**
           * Defines whether string constants are allowed.
           *  If set to `true`, the calculation builder doesn't validate custom strings as errors.
           */
          allowStringConstants?: boolean;

          /**
           * Defines when the expression is validated.
           *
           * 	 - If set to `LiveChange`, the input is validated as you type.
           * 	 - If set to `FocusOut`, the input is validated, once you press Enter or Tab.
           */
          validationMode?: sap.suite.ui.commons.CalculationBuilderValidationMode;

          /**
           * Default operators or functions that are disabled. Delimiter for multiple items is ';'.
           *  Example of usage: +;-;sqrt
           */
          disabledDefaultTokens?: string;

          /**
           * This event is fired for each custom function included in the expression.
           *  Custom functions can be defined using {@link sap.suite.ui.commons.CalculationBuilderFunction} and validated
           * using {@link sap.suite.ui.commons.CalculationBuilderValidationResult}.
           */
          validateFunction?: Function;

          /**
           * This event is fired when the order of items changes, or when some items are added or removed.
           */
          change?: Function;

          /**
           * This event is fired after the expression is validated.
           */
          afterValidation?: Function;

          /**
           * Holds the items (operators and operands) to be displayed in the calculation builder.
           */
          items?:
            | sap.suite.ui.commons.CalculationBuilderItem[]
            | sap.suite.ui.commons.CalculationBuilderItem;

          /**
           * Holds the variables that can be used in the calculation builder.
           */
          variables?:
            | sap.suite.ui.commons.CalculationBuilderVariable[]
            | sap.suite.ui.commons.CalculationBuilderVariable;

          /**
           * Holds the custom functions that can be used in the calculation builder.
           */
          functions?:
            | sap.suite.ui.commons.CalculationBuilderFunction[]
            | sap.suite.ui.commons.CalculationBuilderFunction;

          /**
           * Holds additional operators defined by the application.
           * These operators are not validated.
           */
          operators?: sap.ui.core.Item[] | sap.ui.core.Item;

          /**
           * Defines groups of variables.
           *  Variables can be organized into multiple groups for better orientation among different types of variables.
           */
          groups?:
            | sap.suite.ui.commons.CalculationBuilderGroup[]
            | sap.suite.ui.commons.CalculationBuilderGroup;
        }

        interface CalculationBuilderFunctionOpts
          extends sap.ui.core.ControlOpts {
          /**
           * A key associated with the function. This property is mandatory.
           *  The key is displayed in the text editor area of the calculation builder.
           */
          key?: string;

          /**
           * Label for the function.
           *  The label is displayed in the visual editor of the calculation builder and in the functions menu on
           * the calculation builder's toolbar.
           */
          label?: string;

          /**
           * Description of the function.
           *  The description is displayed in the functions menu on the calculation builder's toolbar. If no description
           * is specified, it is generated automatically based on the `key` property and the parameters defined in
           * the `items` aggregation.
           */
          description?: string;

          /**
           * Defines whether default validation should be used.
           *  Set this property to `false` to provide your own validation algorithm using {@link sap.suite.ui.commons.CalculationBuilderValidationResult}.
           *  If you do not provide your own validation algorithm for this custom function, set this property to `true`,
           * and the function will be validated by the calculation builder.
           */
          useDefaultValidation?: boolean;

          /**
           * Holds the parameters that can be passed to the function.
           *  For example, if the function has two parameters, the `items` aggregation may consist of:
           * 	 - A {@link sap.suite.ui.commons.CalculationBuilderItem} with an empty key for the first argument entered
           * 			by the user.
           * 	 - A {@link sap.suite.ui.commons.CalculationBuilderItem} with a "`,`" (comma) key for the comma that
           * 			separates the arguments.
           * 	 - A {@link sap.suite.ui.commons.CalculationBuilderItem} with an empty key for the second argument entered
           * 			by the user.
           */
          items?:
            | sap.suite.ui.commons.CalculationBuilderItem[]
            | sap.suite.ui.commons.CalculationBuilderItem;
        }

        interface CalculationBuilderGroupOpts extends sap.ui.core.ControlOpts {
          /**
           * A key associated with the group. This property is mandatory.
           *  The key is displayed in the text editor area of the calculation builder.
           */
          key?: string;

          /**
           * Label for the group.
           *  The label is displayed in the visual editor of the calculation builder and in the variables menu on
           * the calculation builder's toolbar.
           */
          title?: string;

          /**
           * Additional description for the variable group.
           */
          description?: string;

          /**
           * Icon for the variable group. This icon is displayed in the Variables menu.
           */
          icon?: string;

          /**
           * This event is fired when the user selects the variable group.
           */
          setSelection?: Function;

          /**
           * Holds the variables included in the variable group.
           */
          customView?: sap.ui.core.Control;
        }

        interface CalculationBuilderItemOpts extends sap.ui.core.ControlOpts {
          /**
           * A key associated with the item. This property is mandatory.
           *  The key is displayed in the text editor area of the calculation builder.
           */
          key?: string;
        }

        interface CalculationBuilderVariableOpts
          extends sap.ui.core.ControlOpts {
          /**
           * A key associated with the variable. This property is mandatory.
           *  The key is displayed in the text editor area of the calculation builder.
           */
          key?: string;

          /**
           * Label for the variable.
           *  The label is displayed in the visual editor of the calculation builder and in the variables menu on
           * the calculation builder's toolbar.
           */
          label?: string;

          /**
           * The group where this variable belongs.
           *  To define variable groups, use {@link sap.suite.ui.commons.CalculationBuilderGroup}.
           */
          group?: string;

          /**
           * Holds the items included in the variable.
           */
          items?:
            | sap.suite.ui.commons.CalculationBuilderItem[]
            | sap.suite.ui.commons.CalculationBuilderItem;
        }

        interface ChartContainerOpts extends sap.ui.core.ControlOpts {
          /**
           * Set to true to display the personalization icon. Set to false to hide it.
           */
          showPersonalization?: boolean;

          /**
           * Set to true to display the full screen icon. Set to false to hide it.
           */
          showFullScreen?: boolean;

          /**
           * Display the chart and the toolbar in full screen or normal mode.
           */
          fullScreen?: boolean;

          /**
           * Set to true to display the charts' legends. Set to false to hide them. See also showLegendButton.
           */
          showLegend?: boolean;

          /**
           * String shown if there are no dimensions to display.
           */
          title?: string;

          /**
           * @deprecated (since 1.32.0) - Obsolete property as sap.m.Toolbar is replaced by sap.m.OverflowToolbar.
           *
           * Custom Label for Selectors Group.
           */
          selectorGroupLabel?: string;

          /**
           * Determine whether to stretch the chart height to the maximum possible height of ChartContainer's parent
           * container. As a prerequisite, the parent container needs to have a fixed value height or be able to determine
           * height from its parent.
           */
          autoAdjustHeight?: boolean;

          /**
           * Set to true to display zoom icons. Set to false to hide them.
           */
          showZoom?: boolean;

          /**
           * Set to true or false to display or hide a button for controlling the visbility of the chart's legend.
           * Please be aware that setting this property to true indirectly is setting showLegend to false. If you
           * need to hide the button but to show the legend, you need to set showLegend at a later point in time (onBeforeRendering).
           * The execution order of the combined properties is not guaranteed by the control.
           */
          showLegendButton?: boolean;

          /**
           * @SINCE 1.48.0
           *
           * Set to true to display the 'Details' button that opens a popup dialog with details about the selected
           * data from the VizFrame based chart.
           */
          showSelectionDetails?: boolean;

          /**
           * @SINCE 1.58.0
           *
           * Set to true to wrap text labels in the dialog that opens when the user clicks or taps the 'Details' button.
           */
          wrapLabels?: boolean;

          /**
           * If set to `true`, the Container control has its own scroll bar, with the scrolling taking place within
           * the Container control itself.
           */
          enableScroll?: boolean;

          /**
           * Event fired when a user clicks on the personalization icon.
           */
          personalizationPress?: Function;

          /**
           * Event fired when a user changes the displayed content.
           */
          contentChange?: Function;

          /**
           * Custom event for zoom in.
           */
          customZoomInPress?: Function;

          /**
           * Custom event for zoom out.
           */
          customZoomOutPress?: Function;

          /**
           * Dimension Selects.
           */
          dimensionSelectors?: sap.ui.core.Control[] | sap.ui.core.Control;

          /**
           * ChartToolBar Content aggregation. Only sap.viz.ui5.controls.VizFrame, sap.m.Table and sap.ui.table.Table
           * can be embedded. If not specified explicitly, the rendering order of the charts is determined by the
           * sequence of contents provided by the application via this aggregation. This means, per default the first
           * chart of the aggregation will be rendered within the container.
           */
          content?:
            | sap.suite.ui.commons.ChartContainerContent[]
            | sap.suite.ui.commons.ChartContainerContent;

          /**
           * Overflow ToolBar. If an external toolbar is used, it will be integrated with the embedded toolbar via
           * a placeholder. This placeholder is mandatory, and it needs to be of type 'sap.suite.ui.commons.ChartContainerToolbarPlaceholder'.
           */
          toolbar?: sap.m.OverflowToolbar;

          /**
           * This aggregation contains the custom icons that should be displayed additionally on the toolbar. It is
           * not guaranteed that the same instance of the sap.ui.core.Icon control will be used within the toolbar,
           * but the toolbar will contain a sap.m.OverflowToolbarButton with an icon property equal to the src property
           * of the sap.ui.core.Icon provided in the aggregation. If a press event is triggered by the icon displayed
           * on the toolbar, then the press handler of the original sap.ui.core.Icon control is used. The instance
           * of the control, that has triggered the press event, can be accessed using the "controlReference" parameter
           * of the event object.
           */
          customIcons?: sap.ui.core.Icon[] | sap.ui.core.Icon;
        }

        interface ChartContainerContentOpts extends sap.ui.core.ControlOpts {
          /**
           * Icon of the Chart.
           */
          icon?: string;

          /**
           * Title of the Chart/Table
           */
          title?: string;

          /**
           * Chart or Table as content of the ChartToolBar. Supported Types: sap.viz.ui5.controls.VizFrame, sap.m.Table,
           * sap.ui.table.Table
           */
          content?: sap.ui.core.Control;
        }

        interface ChartContainerToolbarPlaceholderOpts
          extends sap.ui.core.ControlOpts {}

        interface ChartTileOpts extends sap.suite.ui.commons.InfoTileOpts {
          /**
           * The percent sign, the currency symbol, or the unit of measure.
           */
          unit?: string;
        }

        interface ColumnDataOpts
          extends sap.suite.ui.microchart.ColumnMicroChartDataOpts {}

        interface ColumnMicroChartOpts
          extends sap.suite.ui.microchart.ColumnMicroChartOpts {}

        interface ColumnMicroChartLabelOpts
          extends sap.suite.ui.microchart.ColumnMicroChartLabelOpts {}

        interface ComparisonChartOpts
          extends sap.suite.ui.microchart.ComparisonMicroChartOpts {}

        interface ComparisonDataOpts
          extends sap.suite.ui.microchart.ComparisonMicroChartDataOpts {}

        interface DateRangeScrollerOpts extends sap.ui.core.ControlOpts {
          /**
           * This event is fired whenever the date range is changed.
           */
          change?: Function;

          /**
           * Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).
           */
          ariaDescribedBy?: sap.ui.core.Control[] | string[];

          /**
           * Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).
           */
          ariaLabelledBy?: sap.ui.core.Control[] | string[];
        }

        interface DateRangeSliderOpts extends sap.ui.core.ControlOpts {
          /**
           * Width of the horizontal date range slider.
           */
          width?: sap.ui.core.CSSSize;

          /**
           * This property switches the enabled state of the control. Disabled fields have different colors, and can
           * not be focused.
           */
          enabled?: boolean;

          /**
           * This property switches the enabled state of the control. Using the date range slider interactively requires
           * this property to be true.
           */
          editable?: boolean;

          /**
           * This property switches the visible state of the control. Invisible date range slider are not rendered.
           */
          visible?: boolean;

          /**
           * Property to show or hide bubbles. Default is true.
           */
          showBubbles?: boolean;

          /**
           * The grips of the control can only be moved in steps of this width.
           */
          smallStepWidth?: number;

          /**
           * Number of units between ticks.
           */
          totalUnits?: number;

          /**
           * Display a date label above each tick.
           */
          stepLabels?: boolean;

          /**
           * Labels to be displayed instead of dates.
           */
          labels?: string[];

          /**
           * Minimum date for the slider.
           */
          min?: object;

          /**
           * Maximum date for the slider.
           */
          max?: object;

          /**
           * Date value of the left grip.
           */
          value?: object;

          /**
           * Date value of the right grip.
           */
          value2?: object;

          /**
           * Pin the left grip so that user cannot move it with the keyboard or mouse.
           */
          pinGrip?: boolean;

          /**
           * Pin the right grip so that user cannot move it with the keyboard or mouse.
           */
          pinGrip2?: boolean;

          /**
           * This event is fired when user changes completes the selection of a new date using a grip. It contains
           * the Date object value of each grip such that the left grip value is held by the value property and the
           * right grip value is held by the value2 property.
           */
          change?: Function;

          /**
           * This live event is fired as the user slides a grip with the mouse. It contains the Date object value
           * of each grip such that the left grip value is held by the value property and the right grip value is
           * held by the value2 property.
           */
          liveChange?: Function;
        }

        interface DateRangeSliderInternalOpts
          extends sap.ui.commons.RangeSliderOpts {
          /**
           * Property to show or hide bubbles. Default is true.
           */
          showBubbles?: boolean;

          /**
           * Property to pin Grip (left grip) of the slider so that user cannot move it with key or mouse clicks.
           */
          pinGrip?: boolean;

          /**
           * Property to pin Grip2 (right grip) of the slider so that user cannot move it with key or mouse clicks.
           */
          pinGrip2?: boolean;

          /**
           * This event is fired when user changes the positions of the grips of the control. It contains value as
           * Date object and value2 as Date object which are based on the positions of two grips.
           */
          change?: Function;

          /**
           * This live event is fired when user changes the positions of the grips of the control. It contains value
           * as Date object and value2 as Date object which are based on the positions of two grips.
           */
          liveChange?: Function;
        }

        interface DeltaMicroChartOpts
          extends sap.suite.ui.microchart.DeltaMicroChartOpts {}

        interface DynamicContainerOpts extends sap.m.SlideTileOpts {}

        interface FacetOverviewOpts extends sap.ui.core.ControlOpts {
          /**
           * This property is shown in the upper left part of control.
           */
          title?: string;

          /**
           * Displays a label with the number of items in the right part of the control.
           */
          quantity?: number;

          /**
           * Defines the width of the control. By default, the value is empty and the control inhertis the size from
           * its content.
           */
          width?: sap.ui.core.CSSSize;

          /**
           * @deprecated (since 1.17.1) - This property was replaced by heightType property.
           *
           * Defines the height of the control only if the heightType prperty is set to None. Must be set in rems
           * for the correct work in the UnifiedThingInspector.
           */
          height?: sap.ui.core.CSSSize;

          /**
           * @deprecated (since 1.17.1) - It is not used any more for the laoyut calculations in UnifiedThingInspector.
           *
           * Defines the number of rows that the control represents in an external layout.
           */
          rowSpan?: number;

          /**
           * Indicates the height of the control in the predifened values. If set to None, then the height is defined
           * by the depricated height property.
           */
          heightType?: sap.suite.ui.commons.FacetOverviewHeight;

          /**
           * The event is fired when the user chooses the control. Provides an event with parameter id, the ID of
           * the chosen control.
           */
          press?: Function;

          /**
           * This event is fired when a new value to the heightType or height property is set.
           */
          heightChange?: Function;

          /**
           * The content that appears in the left part of the control.
           */
          content?: sap.ui.core.Control;
        }

        interface FeedItemOpts extends sap.ui.core.ElementOpts {
          /**
           * The title of the feed item.
           */
          title?: string;

          /**
           * The background image for the feed item.
           */
          image?: sap.ui.core.URI;

          /**
           * The target location of the feed item.
           */
          link?: sap.ui.core.URI;

          /**
           * The source of the feed item.
           */
          source?: string;

          /**
           * The date the feed was published.
           */
          publicationDate?: object;
        }

        interface FeedItemHeaderOpts extends sap.m.ListItemBaseOpts {
          /**
           * The title of the feed item.
           */
          title?: string;

          /**
           * The image associated with the feed item.
           */
          image?: sap.ui.core.URI;

          /**
           * The target location of the feed item.
           */
          link?: sap.ui.core.URI;

          /**
           * The source of the feed item.
           */
          source?: string;

          /**
           * The date the feed item was published.
           */
          publicationDate?: object;

          /**
           * The description of the feed item.
           */
          description?: string;
        }

        interface FeedTileOpts extends sap.ui.core.ControlOpts {
          /**
           * The length of time in seconds the control displays each feed item. Default value is 5 seconds.
           */
          displayDuration?: number;

          /**
           * To display article Image or not. If it is true, the article Image will be displayed based on precedence.
           * If it is false, the default image will be displayed.
           */
          displayArticleImage?: boolean;

          /**
           * The source of the feed item.
           */
          source?: string;

          /**
           * A list of default images that is cycled by the control when no image is available for a feed item or
           * when no feed items exist. After a random image is displayed first time, control cycles through this list
           * of images.
           */
          defaultImages?: sap.ui.core.URI[];

          /**
           * The event fired when the user clicks on the control.
           */
          press?: Function;

          /**
           * The feed items the control cycles through.
           */
          items?:
            | sap.suite.ui.commons.FeedItem[]
            | sap.suite.ui.commons.FeedItem;
        }

        interface GenericTileOpts extends sap.m.GenericTileOpts {}

        interface GenericTile2X2Opts extends sap.ui.core.ControlOpts {
          /**
           * The header of the tile.
           */
          header?: string;

          /**
           * The subheader of the tile.
           */
          subheader?: string;

          /**
           * The message that appears when the control is in the Failed state.
           */
          failedText?: string;

          /**
           * The size of the tile. If not set, then the default size is applied based on the device tile.
           */
          size?: sap.suite.ui.commons.InfoTileSize;

          /**
           * The URI of the background image.
           */
          backgroundImage?: sap.ui.core.URI;

          /**
           * The image to be displayed as a graphical element within the header. This can be an image or an icon from
           * the icon font.
           */
          headerImage?: sap.ui.core.URI;

          /**
           * The frame type: 1x1 or 2x1.
           */
          frameType?: sap.suite.ui.commons.FrameType;

          /**
           * The load status.
           */
          state?: sap.suite.ui.commons.LoadState;

          /**
           * Description of a header image that is used in the tooltip.
           */
          imageDescription?: string;

          /**
           * The event is fired when the user chooses the tile.
           */
          press?: Function;

          /**
           * The switchable view that depends on the tile type.
           */
          tileContent?:
            | sap.suite.ui.commons.TileContent2X2[]
            | sap.suite.ui.commons.TileContent2X2;

          /**
           * An icon or image to be displayed in the control.
           */
          icon?: sap.ui.core.Control;
        }

        interface HarveyBallMicroChartOpts
          extends sap.suite.ui.microchart.HarveyBallMicroChartOpts {}

        interface HarveyBallMicroChartItemOpts
          extends sap.suite.ui.microchart.HarveyBallMicroChartItemOpts {}

        interface HeaderCellOpts extends sap.ui.core.ControlOpts {
          /**
           * @deprecated (since 1.20.2) - Wrong property name
           *
           * Height of the HeaderCell control.
           */
          heigth?: sap.ui.core.CSSSize;

          /**
           * Height of the HeaderCell control.
           */
          height?: sap.ui.core.CSSSize;

          /**
           * Object that contains control to render in west area of the HeaderCell.
           */
          west?: sap.suite.ui.commons.HeaderCellItem;

          /**
           * Object that contains control to render in north area of the HeaderCell.
           */
          north?: sap.suite.ui.commons.HeaderCellItem;

          /**
           * Object that contains control to render in east area of the HeaderCell.
           */
          east?: sap.suite.ui.commons.HeaderCellItem;

          /**
           * Object that contains control to render in south area of the HeaderCell.
           */
          south?: sap.suite.ui.commons.HeaderCellItem;
        }

        interface HeaderCellItemOpts extends sap.ui.core.ElementOpts {
          /**
           * Height of area to occupy by control.
           */
          height?: sap.ui.core.CSSSize;

          /**
           * Instance of UI5 Control that is used as content.
           */
          content?: sap.ui.core.Control;
        }

        interface HeaderContainerOpts extends sap.ui.core.ControlOpts {
          /**
           * Number of pixels to scroll when the user chooses Next or Previous buttons. Relevant only for desktop.
           */
          scrollStep?: number;

          /**
           * Scroll animation time in milliseconds.
           */
          scrollTime?: number;

          /**
           * @SINCE 1.25
           *
           * If set to true, shows dividers between scrollable items.
           */
          showDividers?: boolean;

          /**
           * @SINCE 1.25
           *
           * The view of the HeaderContainer. There are two view modes: horizontal and vertical. In horizontal mode
           * the content controls are displayed next to each other, in vertical mode the content controls are displayed
           * on top of each other.
           */
          view?: sap.suite.ui.commons.HeaderContainerView;

          /**
           * @SINCE 1.38
           *
           * Specifies the background color of the content. The visualization of the different options depends on
           * the used theme.
           */
          backgroundDesign?: sap.m.BackgroundDesign;

          /**
           * Items to add to HeaderContainer.
           */
          items?: sap.ui.core.Control[] | sap.ui.core.Control;
        }

        interface InfoTileOpts extends sap.ui.core.ControlOpts {
          /**
           * Shows the description of the selected tile.
           */
          description?: string;

          /**
           * The title of the tile.
           */
          title?: string;

          /**
           * The footer text of the tile.
           */
          footer?: string;

          /**
           * Updates the size of the tile. If not set then the default size is applied based on the device tile.
           */
          size?: sap.suite.ui.commons.InfoTileSize;

          /**
           * Indicates the load status.
           */
          state?: sap.suite.ui.commons.LoadState;

          /**
           * The event is fired when the user chooses the tile.
           */
          press?: Function;

          /**
           * The switchable view that depends on the tile type.
           */
          content?: sap.ui.core.Control;
        }

        interface JamContentOpts extends sap.m.FeedContentOpts {}

        interface KpiTileOpts extends sap.ui.core.ControlOpts {
          /**
           * The Value field.
           */
          value?: string;

          /**
           * The Description field.
           */
          description?: string;

          /**
           * If true, the value text will have 2 rem, if false - 1 rem.
           */
          doubleFontSize?: boolean;

          /**
           * The percent sign, currency symbol, or unit for a value.
           */
          valueUnit?: string;

          /**
           * The scale of a value.
           */
          valueScale?: string;

          /**
           * The status color of the value. Depending on the status the tile is displayed in different colors.
           */
          valueStatus?: sap.suite.ui.commons.ValueStatus;
        }

        interface LaunchTileOpts extends sap.ui.core.ControlOpts {
          /**
           * Descriptive title of the launch destination.
           */
          title?: string;

          /**
           * Icon associated with the launch destination.
           */
          icon?: sap.ui.core.URI;

          /**
           * The launch destination.
           */
          link?: sap.ui.core.URI;

          /**
           * The event fired when the user clicks on the control.
           */
          press?: Function;
        }

        interface LinkActionSheetOpts extends sap.m.ActionSheetOpts {
          /**
           * The event is fired when the user chooses any item.
           */
          itemPress?: Function;

          /**
           * These buttons or links are added to the content area in the LinkActionSheet control. If the user chooses
           * a button or a link, the LinkActionSheet is closed before the event listener is called.
           */
          items?: sap.ui.core.Control[] | sap.ui.core.Control;
        }

        interface MicroAreaChartOpts
          extends sap.suite.ui.microchart.AreaMicroChartOpts {}

        interface MicroAreaChartItemOpts
          extends sap.suite.ui.microchart.AreaMicroChartItemOpts {}

        interface MicroAreaChartLabelOpts
          extends sap.suite.ui.microchart.AreaMicroChartLabelOpts {}

        interface MicroAreaChartPointOpts
          extends sap.suite.ui.microchart.AreaMicroChartPointOpts {}

        interface MicroProcessFlowItemOpts extends sap.ui.core.ControlOpts {
          /**
           * Key of the node.
           */
          key?: string;

          /**
           * Icon that is displayed inside the node.
           * By default, an icon that corresponds to the node's `state` is used.
           */
          icon?: string;

          /**
           * Title associated with this node.
           * The title is displayed as a tooltip when the user hovers over the node. This title can also be used by
           * screen reader software.
           */
          title?: string;

          /**
           * State associated with this node.
           * The state defines the semantic color applied to the node. Available states include `Standard` (neutral),
           * `Error` (negative), `Success` (positive), and `Warning` (critical).
           */
          state?: sap.ui.core.ValueState;

          /**
           * Defines whether an object should be displayed between this node and the following node.
           * When set to `true`, a vertical red bar is displayed by default. To define custom objects, use the `intermediary`
           * aggregation.
           */
          showIntermediary?: boolean;

          /**
           * Distance between this node and the following node.
           * When set to a percentage value, the distance is calculated based on the height of the parent container.
           */
          stepWidth?: sap.ui.core.CSSSize;

          /**
           * Defines whether a connector line should be displayed between this node and the node that follows it.
           */
          showSeparator?: boolean;

          /**
           * This event is fired when the user clicks or taps a node.
           */
          press?: Function;

          /**
           * Holds custom controls to be used as process flow nodes.
           */
          customControl?: sap.ui.core.Control;

          /**
           * Holds objects to be displayed between the process flow nodes.
           */
          intermediary?: sap.ui.core.Control;
        }

        interface MonitoringContentOpts extends sap.ui.core.ControlOpts {
          /**
           * The actual value.
           */
          value?: string;

          /**
           * This property is set by the return value of sap.ui.core.IconPool.getIconURI that is called with an icon
           * name parameter and optional collection parameter. The collection parameter is required when the application
           * extended icons are used.
           */
          iconSrc?: string;

          /**
           * Updates the size of the chart. If not set then the default size is applied based on the device tile.
           */
          size?: sap.suite.ui.commons.InfoTileSize;

          /**
           * Indicates the load status.
           */
          state?: sap.suite.ui.commons.LoadState;

          /**
           * If set to true, changing of the value is animated.
           */
          animateTextChange?: boolean;

          /**
           * The event is fired when the user chooses the monitoring content.
           */
          press?: Function;

          /**
           * The icon that is displayed in the content.
           */
          icon?: sap.ui.core.Icon;
        }

        interface MonitoringTileOpts extends sap.suite.ui.commons.InfoTileOpts {
          /**
           * The actual value.
           */
          value?: string;

          /**
           * This property is set by the return value of sap.ui.core.IconPool.getIconURI that is called with an icon
           * name parameter and optional collection parameter. The collection parameter is required when the application
           * extended icons are used.
           */
          iconSrc?: string;

          /**
           * The color of the tile footer text.
           */
          footerColor?: sap.suite.ui.commons.InfoTileTextColor;
        }

        interface NewsContentOpts extends sap.m.NewsContentOpts {}

        interface NoteTakerOpts extends sap.ui.core.ControlOpts {
          /**
           * Number of notes to display.
           */
          visibleNotes?: number;

          /**
           * The View All link appears in the Note Taker card when length of a card body text exceeds the specified
           * value. The updated value of this property is not applied to the existing cards.
           */
          cardViewAllTrigger?: number;

          /**
           * A composite object containing criteria for filtering cards in the Note Taker.
           */
          filterCriteria?: object;

          /**
           * Defines a path on the server where the attached files are uploaded.
           */
          attachmentUploadUrl?: string;

          /**
           * The attachment property name for identification on the server side after sending data to the server.
           */
          attachmentName?: string;

          /**
           * The event is fired when a new card is added if no data binding is available. If data binding is available,
           * the event is fired to notify a developer to add an element to the model.
           */
          addCard?: Function;

          /**
           * The event is fired when a new card is deleted if no data binding is available. If data binding is available,
           * the event is fired to notify a developer to delete the element from the model.
           */
          deleteCard?: Function;

          /**
           * The event is fired when a new card has been edited.
           */
          editCard?: Function;

          /**
           * The event is fired when the value of attached file has been changed.
           */
          attachmentSelect?: Function;

          /**
           * Fire event uploadComplete to attached listeners.
           */
          attachmentUploadComplete?: Function;

          /**
           * The event is fired, when user deletes the attached file.
           */
          attachmentDelete?: Function;

          /**
           * The event is fired when a user presses the attachment link.
           */
          attachmentClick?: Function;

          /**
           * This aggregation allows you to add note cards to the Note Taker and remove them from the Note Taker.
           */
          cards?:
            | sap.suite.ui.commons.NoteTakerCard[]
            | sap.suite.ui.commons.NoteTakerCard;
        }

        interface NoteTakerCardOpts extends sap.ui.core.ControlOpts {
          /**
           * Stores the Note Taker card header.
           */
          header?: string;

          /**
           * Stores the Note Taker card body text.
           */
          body?: string;

          /**
           * Stores a timestamp of the Note Taker card.
           */
          timestamp?: object;

          /**
           * Contains an array of the String type tags applied to the current card.
           */
          tags?: object;

          /**
           * The View All link appears in the Note Taker card if a body text length exceeds the specified value.
           */
          viewAllTrigger?: number;

          /**
           * The card ID. This property should be set by an application developer.
           */
          uid?: string;

          /**
           * Shows whether the note card is hidden by the applied filter.
           */
          isFiltered?: boolean;

          /**
           * Indicates positive information for the card.
           */
          thumbUp?: boolean;

          /**
           * Indicates negative information for the card.
           */
          thumbDown?: boolean;

          /**
           * Contains an array of the String type tags available for selection during the card update.
           */
          allTags?: object;

          /**
           * Stores the name of the file attached to the card.
           */
          attachmentFilename?: string;

          /**
           * Stores the address of the file attached to the card.
           */
          attachmentUrl?: string;

          /**
           * The event is fired when a user chooses the Edit button in the note card.
           */
          editNote?: Function;

          /**
           * The event is fired when a card needs to be deleted. This event is needed for the Note Taker control.
           */
          deleteNote?: Function;

          /**
           * The event is fired when a user chooses the attachment download link.
           */
          attachmentClick?: Function;
        }

        interface NoteTakerFeederOpts extends sap.ui.core.ControlOpts {
          /**
           * The text inside the note card.
           */
          body?: string;

          /**
           * This text is the header of a new note.
           */
          title?: string;

          /**
           * The list of tags selected for addition to a new note card.
           */
          tags?: object;

          /**
           * Sets positive indication for a new note.
           */
          thumbUp?: boolean;

          /**
           * Sets negative indication for a new note.
           */
          thumbDown?: boolean;

          /**
           * Sets the upload attachment URL for a new card.
           */
          attachmentUploadUrl?: string;

          /**
           * The attachment property name for identification on the server side after sending data to the server.
           */
          attachmentName?: string;

          /**
           * The event is fired when a user chooses the Add button in the control.
           */
          addNote?: Function;

          /**
           * The event is fired when the value of attached file has been changed.
           */
          attachmentSelect?: Function;

          /**
           * The event is fired when the upload of the file is completed. However this covers only the client side
           * of the Upload process and does not give any success status from the server.
           */
          attachmentUploadComplete?: Function;

          /**
           * The event is fired when a user presses the Delete button in the Feeder card.
           */
          attachmentDelete?: Function;

          /**
           * The event is fired when a user presses the attachment link.
           */
          attachmentClick?: Function;
        }

        interface NumericTileOpts extends sap.suite.ui.commons.InfoTileOpts {
          /**
           * The actual value.
           */
          value?: string;

          /**
           * The scaling prefix. Financial characters can be used for currencies and counters. The SI prefixes can
           * be used for units.
           */
          scale?: string;

          /**
           * The percent sign, the currency symbol, or the unit of measure.
           */
          unit?: string;

          /**
           * The semantic color of the value.
           */
          valueColor?: sap.suite.ui.commons.InfoTileValueColor;

          /**
           * The indicator arrow that shows value deviation.
           */
          indicator?: sap.suite.ui.commons.DeviationIndicator;
        }

        interface PictureZoomInOpts extends sap.ui.core.ControlOpts {
          /**
           * Description is shown under image.
           */
          description?: string;

          /**
           * Source for image.
           */
          imageSrc?: sap.ui.core.URI;

          /**
           * Custom busy indicator.
           */
          busyIndicator?: sap.ui.core.Control;
        }

        interface ProcessFlowOpts extends sap.ui.core.ControlOpts {
          /**
           * This property defines the folded corners for the single node control. The following values exist: - true:
           * means folded corner - false/null/undefined: means normal corner
           */
          foldedCorners?: boolean;

          /**
           * By default, the control body is embedded into a scroll container of fixed size, so the user can put the
           * control into a fixed size layout. When the control body (the graph) gets larger, the container cuts the
           * overflowing parts of the graph and the cut parts can be displayed by scrolling the control body. When
           * the control body fits into the container limits, obviously no scrolling is possible (and makes sense).
           *
           * The scrolling feature can be turned off by setting this property value to false, so the width/height
           * of the whole control will change as the flow graph gets smaller/larger. In this case the control body
           * could not be scrolled, as the control body size matches the control container size.
           */
          scrollable?: boolean;

          /**
           * Defines if semantic zooming by mouse wheel events on desktop browsers is enabled.
           */
          wheelZoomable?: boolean;

          /**
           * Defines if the connection labels are shown or not.
           */
          showLabels?: boolean;

          /**
           * @deprecated (since 1.26) - Should not be used any longer, use nodePress event instead ( click on the
           * node)
           *
           * This event is fired when a process flow node title was clicked. The user can access the clicked process
           * flow node control object which is the only argument of the event handler.
           */
          nodeTitlePress?: Function;

          /**
           * This event is fired when a process flow node was clicked.
           */
          nodePress?: Function;

          /**
           * This event is fired when a process flow connection label was clicked.
           */
          labelPress?: Function;

          /**
           * This event is fired when the header column is clicked. This event is available only in header mode, i.e.
           * when no nodes are defined.
           */
          headerPress?: Function;

          /**
           * This event is fired when an issue occurs with the process flow calculation. In most cases, there is an
           * issue with the data. The console contains the detailed error description with the errors.
           */
          onError?: Function;

          /**
           * This is the aggregation of nodes in the process flow control.
           */
          nodes?:
            | sap.suite.ui.commons.ProcessFlowNode[]
            | sap.suite.ui.commons.ProcessFlowNode;

          /**
           * This is a header of the table for the process flow control.
           */
          lanes?:
            | sap.suite.ui.commons.ProcessFlowLaneHeader[]
            | sap.suite.ui.commons.ProcessFlowLaneHeader;

          /**
           * ARIA-compliant properties to be added to the control.
           */
          ariaProperties?: sap.suite.ui.commons.AriaProperties;
        }

        interface ProcessFlowConnectionOpts extends sap.ui.core.ControlOpts {
          /**
           * This is an array of the following attributes for one element: 1. flowLine (string) - A connection definition
           * where the line should be drawn. A string which defines a course of a flow line. A flow line is a connection
           * between nodes in a process flow control. The string can contain the following characters: - "r" for right,
           * - "t" for top, - "l" for left, - "b" for bottom. 2. targetNodeState (ProcessFlowNodeState) - A copy of
           * the target node status. If the target node is created, the line is solid. If the target node is planned,
           * the line is dashed. 3. displayState (ProcessFlowDisplayState) - Display state of the node. This property
           * defines if the node is displayed regularly, highlighted, or dimmed in combination with a selected visual
           * style of the control. 4. hasArrow (boolean) - Indicates if the line has an arrow on the right end.
           */
          drawData?: object[];

          /**
           * This is a current zoom level for the connection. The point of connection to the node is derived from
           * zoom level.
           */
          zoomLevel?: sap.suite.ui.commons.ProcessFlowZoomLevel;

          /**
           * @deprecated (since 1.32) - Type is deprecated because of no usages. There will be no replacement.
           *
           * Type of the connection.
           */
          type?: sap.suite.ui.commons.ProcessFlowConnectionType;

          /**
           * @deprecated (since 1.32) - State is deprecated because of no usages. There will be no replacement.
           *
           * State of the connection.
           */
          state?: sap.suite.ui.commons.ProcessFlowConnectionState;
        }

        interface ProcessFlowConnectionLabelOpts extends sap.m.ButtonOpts {
          /**
           * Priority is used to define which label is visible if the state of multiple labels is equal. Assuming
           * there are multiple labels with equal state (e.g. Negative state appears twice), the priority decides
           * which one needs to be selected.
           */
          priority?: number;

          /**
           * Specifies the state of the connection label. If multiple labels are available for one connection, the
           * label will be selected by state based on the following order: Neutral -> Positive -> Critical -> Negative.
           */
          state?: sap.suite.ui.commons.ProcessFlowConnectionLabelState;
        }

        interface ProcessFlowLaneHeaderOpts extends sap.ui.core.ControlOpts {
          /**
           * Text information that is displayed in the control.
           */
          text?: string;

          /**
           * Icon to be displayed in the middle of the control.
           */
          iconSrc?: sap.ui.core.URI;

          /**
           * Position of the lane in the process flow control. Numbering of the position has to be sequential and
           * needs to start from 0.
           */
          position?: number;

          /**
           * Internal identification of the header.
           */
          laneId?: string;

          /**
           * Array of the ProcessFlowLaneState. The user can explicitly set an array with the two properties state
           * and value of the state, for example [state:sap.suite.ui.commons.ProcessFlowNodeState.Neutral, value:
           * 20]. Possible states are states are positive, negative, neutral, and planned.
           */
          state?: object;

          /**
           * Current zoom level for the lane header.
           */
          zoomLevel?: sap.suite.ui.commons.ProcessFlowZoomLevel;

          /**
           * This event is fired when the header is clicked.
           */
          press?: Function;
        }

        interface ProcessFlowNodeOpts extends sap.ui.core.ControlOpts {
          /**
           * The node title.
           */
          title?: string;

          /**
           * @deprecated (since 1.26) - According to the new requirement there should be only one click event for
           * each node (click on the whole node – see Press event) that is why titlePress event should not be used
           * any longer. Hence isTitleClickable should not be used either.
           *
           * Specifies if the node title is clickable.
           */
          isTitleClickable?: boolean;

          /**
           * Specifies the assignment of the node to the respective lane.
           */
          laneId?: string;

          /**
           * Node identifier.
           */
          nodeId?: string;

          /**
           * State of the node.
           */
          state?: sap.suite.ui.commons.ProcessFlowNodeState;

          /**
           * Type of the node.
           */
          type?: sap.suite.ui.commons.ProcessFlowNodeType;

          /**
           * Defines an array of children of the node.
           */
          children?: any[];

          /**
           * Title abbreviation is used in zoom level 'Three'.
           */
          titleAbbreviation?: string;

          /**
           * Description of the state, for example "Status OK".
           */
          stateText?: string;

          /**
           * The property contains the additional texts on the node. The expected type is array of strings. One array
           * must not contain more than two strings. Additional strings in the array will be ignored.
           */
          texts?: string[];

          /**
           * The parameter defines if the node should be displayed in highlighted state.
           */
          highlighted?: boolean;

          /**
           * The parameter defines if the node should be displayed in focus state.
           */
          focused?: boolean;

          /**
           * The user-defined object which is returned back to the user by a node click event.
           */
          tag?: object;

          /**
           * The parameter defines if the node should be displayed in selected state.
           */
          selected?: boolean;

          /**
           * @deprecated (since 1.26) - Should not be used any longer, use Press event instead ( click on the node)
           *
           * This event handler is executed when the user clicks the node title. This event is fired only when the
           * title is clickable (isTitleClickable equals true).
           */
          titlePress?: Function;

          /**
           * @deprecated (since 1.50.0) - This event is deprecated, use nodePress event instead. See
           * {@link sap.suite.ui.commons.ProcessFlow.html#event:nodePress}.
           *
           * This event is fired when the user clicks on the node. However, this event is not fired if the titlePress
           * event has been fired.
           */
          press?: Function;

          /**
           * @EXPERIMENTAL (since 1.50)
           *
           * The node's content used for zoom level 1. If this aggregation is set, no default content like title and
           * texts is used.
           */
          zoomLevelOneContent?: sap.ui.core.Control;

          /**
           * @EXPERIMENTAL (since 1.50)
           *
           * The node's content used for zoom level 2. If this aggregation is set, no default content like title and
           * texts is used.
           */
          zoomLevelTwoContent?: sap.ui.core.Control;

          /**
           * @EXPERIMENTAL (since 1.50)
           *
           * The node's content used for zoom level 3. If this aggregation is set, no default content like title and
           * texts is used.
           */
          zoomLevelThreeContent?: sap.ui.core.Control;

          /**
           * @EXPERIMENTAL (since 1.50)
           *
           * The node's content used for zoom level 4. If this aggregation is set, no default content like title and
           * texts is used.
           */
          zoomLevelFourContent?: sap.ui.core.Control;

          /**
           * ARIA-compliant properties to be added to the control.
           */
          ariaProperties?: sap.suite.ui.commons.AriaProperties;

          /**
           * Reference to ProcessFlowNodes which appears before this ProcessFlowNode.
           */
          parents?: sap.suite.ui.commons.ProcessFlowNode[] | string[];
        }

        interface RepeaterViewConfigurationOpts
          extends sap.ui.core.ControlOpts {
          /**
           * The title of the view to be displayed in sap.suite.ui.commons.ViewRepeater view selector. If neither
           * this nor "icon" property are defined, the default title "View ##" will be shown, where ## is an index
           * number of the view in View Repeater starting from 1.
           */
          title?: string;

          /**
           * A path to the icon representing this view in sap.suite.ui.commons.ViewRepeater view selector.
           */
          icon?: sap.ui.core.URI;

          /**
           * A path to the icon representing this view in sap.suite.ui.commons.ViewRepeater view selector when the
           * regular icon is hovered.
           */
          iconHovered?: sap.ui.core.URI;

          /**
           * A path used for rows/titles data binding.
           */
          path?: string;

          /**
           * The minimal width of the tile in this view. Only applicable if "responsive" property is set to true.
           */
          itemMinWidth?: number;

          /**
           * The number of tiles/rows that will be shown on a single page in this view.
           */
          numberOfTiles?: number;

          /**
           * This parameter indicates whether the content is shown in rows or tiles. If false, the content is shown
           * in rows just like in core sap.ui.commons.RowRepeater. If true, the content is shown in tiles (similar
           * to sap.ui.ux3.DataSet control) that have minimal width defined by the "itemMinWidth" property. The number
           * of columns depends on the parent control's width. If you resize the control, the number of columns may
           * change respectively so that the content tiles can fill the entire space of a row.
           */
          responsive?: any;

          /**
           * Indicates if the external representation of this view is rendered instead of the row repeater's own content.
           */
          external?: boolean;

          /**
           * A path to the icon representing this view in sap.suite.ui.commons.ViewRepeater view selector when the
           * regular icon is selected.
           */
          iconSelected?: sap.ui.core.URI;

          /**
           * The height of the tile in this view in pixels. Only applicable if the responsive property is set to true.
           * This value is used for calculating the number of tile rows.
           */
          itemHeight?: number;

          /**
           * The control used as a template while displaying rows/tiles in this view. It should not have fixed width
           * wider than defined by the "itemMinWidth" property, otherwise some content may appear cropped.
           */
          template?: sap.ui.core.Control;

          /**
           * The control to be rendered instead of sap.suite.ui.commons.ViewRepeater's own content. Only used if the
           * "external" property is set to true. This allows you to create custom views, for example, Table views.
           * The sap.suite.ui.commons.ViewRepeater control will share its model with this control if the control does
           * not have its own model.
           */
          externalRepresentation?: sap.ui.core.Control;
        }

        interface SplitButtonOpts extends sap.ui.core.ControlOpts {
          /**
           * Invisible split buttons are not rendered
           */
          visible?: boolean;

          /**
           * Boolean property to enable the control (default is true). Buttons that are disabled have other colors
           * than enabled ones, depending on custom settings.
           */
          enabled?: boolean;

          /**
           * The split button is rendered as lite split button.
           */
          lite?: boolean;

          /**
           * Style of the control (e.g. emphasized, accept)
           */
          style?: sap.ui.commons.ButtonStyle;

          /**
           * Indicatied if the button is styled. If not it is rendered as native HTML-button. In this case a custom
           * styling can be added usig addStyleClass.
           */
          styled?: boolean;

          /**
           * If set to true (default), the display sequence is 1. icon 2. control text .
           */
          iconFirst?: boolean;

          /**
           * Text to be displayed for the action button.
           */
          text?: string;

          /**
           * Icon to be displayed as graphical element within the action button.
           */
          icon?: sap.ui.core.URI;

          /**
           * Menu that shall be opened when the menu part of the button is clicked
           */
          menu?: sap.ui.commons.Menu;
        }

        interface TargetFilterOpts extends sap.ui.core.ControlOpts {
          /**
           * The name of the entity set from OData service metadata. The filtering applies to this entity set.
           */
          entitySet?: string;

          /**
           * This event is fired if the user chooses the Show Selected link.
           */
          search?: Function;

          /**
           * This event is fired if the user changes a selected filter set.
           */
          filterChange?: Function;

          /**
           * This event is fired if the user changes a selected filter set to the filter set used for the last search.
           */
          cancel?: Function;

          /**
           * The list of the columns.
           */
          columns?:
            | sap.suite.ui.commons.TargetFilterColumn[]
            | sap.suite.ui.commons.TargetFilterColumn;

          /**
           * The measure column.
           */
          measureColumn?: sap.suite.ui.commons.TargetFilterMeasureColumn;

          /**
           * The list of selected columns. The index of the columns in this list corresponds to the quadrant.
           */
          selectedColumns?:
            | sap.suite.ui.commons.TargetFilterColumn[]
            | string[];
        }

        interface TargetFilterColumnOpts extends sap.ui.core.ElementOpts {
          /**
           * The binding path.
           */
          path?: string;

          /**
           * The column title.
           */
          title?: string;

          /**
           * The number of the retrieved entries for the cloud of the links in the quadrant. The quadrant can display
           * fewer links than retrieved. The font size of the links in the quadrant depends on the measure number.
           * The font size of the links is relative in the retrieved group.
           */
          length?: number;

          /**
           * The type of the displayed data. The type of the property must be sap.ui.model.SimpleType or its descendants.
           * By default, sap.ui.model.type.String. This property is used for formatting the displayed values. If sap.ui.model.type.String,
           * the filter operator in the Search field of the column selection dialog is 'Contains'. In other cases,
           * the filter operator is 'EQ'.
           */
          type?: any;
        }

        interface TargetFilterMeasureColumnOpts
          extends sap.ui.core.ElementOpts {
          /**
           * The binding path.
           */
          path?: string;

          /**
           * This property is used for formatting the displayed values. The type of the property must be sap.ui.model.SimpleType
           * or its descendants. By default, sap.ui.model.type.Integer with enabled grouping.
           */
          type?: any;
        }

        interface ThingCollectionOpts extends sap.ui.core.ControlOpts {
          /**
           * The width of the control.
           */
          width?: sap.ui.core.CSSSize;

          /**
           * The height of the control.
           */
          height?: sap.ui.core.CSSSize;

          /**
           * The minimal width of the control.
           */
          minWidth?: sap.ui.core.CSSSize;

          /**
           * The minimal height of the control.
           */
          minHeight?: sap.ui.core.CSSSize;

          /**
           * Contains a collection of sap.ui.ux3.ThingViewer controls or descendants of sap.ui.ux3.ThingViewer.
           */
          content?: sap.ui.ux3.ThingViewer[] | sap.ui.ux3.ThingViewer;
        }

        interface ThreePanelThingInspectorOpts
          extends sap.ui.ux3.ThingInspectorOpts {
          /**
           * Shows or hides a middle panel of the ThingViewer named Header that contains general information.
           */
          showHeader?: boolean;

          /**
           * A URL of the source of the ThingViewer's key visual image.
           */
          logo?: sap.ui.core.URI;

          /**
           * The width of the ThingViewer's navigation panel.
           */
          sidebarWidth?: sap.ui.core.CSSSize;

          /**
           * The items of the ThingViewer's Action Menu.
           */
          menuContent?: sap.ui.commons.Link[] | sap.ui.commons.Link;
        }

        interface ThreePanelThingViewerOpts extends sap.ui.ux3.ThingViewerOpts {
          /**
           * A URL of the source of an image known as key visual. This can be a company logo or other essential graphics.
           */
          logo?: sap.ui.core.URI;

          /**
           * Shows or hides a middle panel named Header that contains general information.
           */
          showHeader?: boolean;

          /**
           * The width of the first panel that contains thing's title, icon, key visual and navigation bar. The default
           * value is "244px".
           */
          sidebarWidth?: sap.ui.core.CSSSize;

          /**
           * This aggregation allows you to add sap.ui.commons.Link items to the Action Menu. The menu appears as
           * a popup when a user chooses a button in the top title section of the navigation panel.
           */
          menuContent?: sap.ui.commons.Link[] | sap.ui.commons.Link;
        }

        interface TileContentOpts extends sap.m.TileContentOpts {}

        interface TileContent2X2Opts extends sap.ui.core.ControlOpts {
          /**
           * The footer text of the tile.
           */
          footer?: string;

          /**
           * Updates the size of the tile. If not set then the default size is applied based on the device tile.
           */
          size?: sap.suite.ui.commons.InfoTileSize;

          /**
           * The percent sign, the currency symbol, or the unit of measure.
           */
          unit?: string;

          /**
           * Disables control if true.
           */
          disabled?: boolean;

          /**
           * The switchable view that depends on the tile type.
           */
          content?: sap.ui.core.Control;
        }

        interface TimelineOpts extends sap.ui.core.ControlOpts {
          /**
           * Defines the alignment of timeline posts relative to the timeline axis. This option can be used for single-sided
           * timelines only. If the axisOrientation property is set to ` Horizontal`, the `Right` value is interpreted
           * as bottom alignment and the `Left` value as top alignment.
           */
          alignment?: sap.suite.ui.commons.TimelineAlignment;

          /**
           * Defines the orientation of the timeline. Can be set to `Vertical` or `Horizontal`.
           */
          axisOrientation?: sap.suite.ui.commons.TimelineAxisOrientation;

          /**
           * @deprecated (since 1.46.0) - As of version 1.46, this property was replaced by JSONModel context binding.
           *
           * Data for the Timeline control.
           */
          data?: object;

          /**
           * @deprecated (since 1.46.0) - The filter list now includes a Select All check box, so the All radio button
           * is no longer required. This property is ignored.
           *
           * Enables to add 'All' at the beginning of the filter list.
           */
          enableAllInFilterItem?: boolean;

          /**
           * @deprecated (since 1.46.0) - Use the enableModelFilter property instead.
           *
           * Enables fetching data from backend instead of deriving filter values from the frontend values (displayed
           * list). As of version 1.46, replaced by {@link sap.suite.ui.commons.Timeline#getEnableModelFilter}.
           */
          enableBackendFilter?: boolean;

          /**
           * When this property is set to `true`, the timeline displays a busy indicator when loading data. This busy
           * indicator blocks the interaction with the items until the data loading is complete. It is strongly recommended
           * to use this option. Loading data without a busy indicator may confuse the users.
           */
          enableBusyIndicator?: boolean;

          /**
           * If set to `true`, timeline posts are displayed on both sides of the timeline axis.
           */
          enableDoubleSided?: boolean;

          /**
           * @SINCE 1.46.0
           *
           * Enables filtering directly on the binding level. If set to `true`, all filters are translated into the
           * filters in the model binding. When the OData model is used, the filtering is performed on the backend
           * side. This option is strongly recommended. If set to `false`, all entries from the model need to be fetched
           * before they can be filtered on the frontend side. Please be aware that the `growingThreshold` property
           * determines how many entries can be rendered. Timeline requests all entries from the model before it performs
           * the filtering. Some models may have internal limits for the number of entries that can be used in bindings.
           * Such limits can be set using {@link sap.ui.model.Model#setSizeLimit}.
           */
          enableModelFilter?: boolean;

          /**
           * If set to `true`, the Timeline control has its own scroll bar, with the scrolling taking place within
           * the Timeline control itself. Scrolling is required if you want to enable the lazyLoading property.
           */
          enableScroll?: boolean;

          /**
           * Adds a Reply link to the posts on a social timeline that allows users to reply to posts. When
           * a user adds a reply, an event is fired. This event should be handled by external code.
           */
          enableSocial?: boolean;

          /**
           * Title for the data filter. When a filter is applied, this title is displayed in the message strip along
           * with the filter name.
           */
          filterTitle?: string;

          /**
           * If set to `true`, the Show More button is displayed when the user scrolls along the timeline axis.
           */
          forceGrowing?: boolean;

          /**
           * @deprecated (since 1.46.0) - Use the groupByType property instead.
           *
           * Groups the timeline posts by year. As of version 1.46, replaced by {@link sap.suite.ui.commons.Timeline#getGroupByType}.
           */
          group?: boolean;

          /**
           * Groups the timeline posts by a field. Only fields that contain date values are supported.
           */
          groupBy?: string;

          /**
           * Groups the timeline posts by a time period, including year, quarter, month, week, and day. If set to
           * `None`, no grouping is applied. If you specify a custom grouping function using the {@link sap.suite.ui.commons.Timeline#setCustomGrouping}
           * method, this function overrides the groupByType property settings.
           */
          groupByType?: sap.suite.ui.commons.TimelineGroupType;

          /**
           * @deprecated (since 1.46.0) - Use the growingThreshold property instead, setting it to 0 to disable growing.
           *
           * If set to `true`, the timeline displays a limited number of posts with a button to show more. The displayed
           * posts limit can be set using the growingThreshold property. As of version 1.46, replaced by {@link sap.suite.ui.commons.Timeline#getGrowingThreshold}.
           */
          growing?: boolean;

          /**
           * Number of posts requested from the server at a time. Each time when the timeline needs to load more posts,
           * it will request exactly this amount. The number of posts displayed in the timeline is increased by this
           * number. If set to `0`, all posts are fetched and displayed on the initial load.
           */
          growingThreshold?: number;

          /**
           * @SINCE 1.46.0
           *
           * Sets the height of the Timeline.
           */
          height?: sap.ui.core.CSSSize;

          /**
           * @SINCE 1.46.0
           *
           * Enables the Lazy Loading feature that automatically loads more posts as the user scrolls along the timeline
           * axis. This feature works only when the enableScroll property is set to `true`. See also {@link sap.suite.ui.commons.Timeline#getEnableScroll}.
           */
          lazyLoading?: boolean;

          /**
           * This text is displayed when the control has no data. The default value is loaded from the component resource
           * bundle.
           */
          noDataText?: string;

          /**
           * @SINCE 1.46.0
           * @deprecated (since 1.54.0) - Not Fiori.
           *
           * If set to `Area`, the timeline fades into the visible area margin. If set to `AreaWithButtons`, the timeline
           * fades into the visible area margin and scroll buttons are displayed. If set to `None`, the fading effect
           * is not applied. This feature works only when the enableScroll property is set to `true`. See also {@link
           * sap.suite.ui.commons.Timeline#getEnableScroll}.
           */
          scrollingFadeout?: sap.suite.ui.commons.TimelineScrollingFadeout;

          /**
           * @deprecated (since 1.46.0) - Use the showHeaderBar property instead.
           *
           * Sets the visibility of the filter in the timeline toolbar.
           *  As of version 1.46, replaced by {@link sap.suite.ui.commons.Timeline#getShowHeaderBar}.
           */
          showFilterBar?: boolean;

          /**
           * Shows the timeline toolbar with search and filter options.
           */
          showHeaderBar?: boolean;

          /**
           * Shows an icon on the timeline axis as an anchor for each entry node. If set to `false`, all icons are
           * replaced by dots.
           */
          showIcons?: boolean;

          /**
           * Show item filter in filter area.
           */
          showItemFilter?: boolean;

          /**
           * Sets the search field visibility on the timeline toolbar.
           */
          showSearch?: boolean;

          /**
           * Show sort icon in the header bar. For displaying this icon, sorting have to be allowed.
           */
          showSort?: boolean;

          /**
           * @SINCE 1.26.1
           * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
           *
           * If set to `true`, a suggest event is fired when the user enters text into the search field. Changing
           * the suggestionItems aggregation in the suggest event listener will display suggestions inside a popup.
           * As of version 1.46, replaced by {@link sap.collaboration.components.feed.Component}.
           */
          showSuggestion?: boolean;

          /**
           * Shows the time range filter in the filter menu.
           */
          showTimeFilter?: boolean;

          /**
           * Indicates whether the data should be sorted. If set to `false` the data model's default sorting is applied.
           */
          sort?: boolean;

          /**
           * Path for dateTime in mode binding. Use this property when you use factory function for `TimeLineItem`
           * creation. When every item has different path or the `datetime` is calculated in factory sorting, filtering
           * and searching has to be done manually using events. If not set for factory binding filter and sorting
           * won't work.
           */
          dateTimePath?: string;

          /**
           * Whether the oldest item will be displayed first.
           */
          sortOldestFirst?: boolean;

          /**
           * Height of the timeline posts. It can be set to either of the following types of values:
           * 	 -  Automatic – If set to `automatic`, the optimal post height is calculated automatically to
           * 			fit the timeline height specified by the height parameter. This option works only in horizontal timelines
           * 			and only when the timeline height is defined. In vertical timelines, this setting is ignored.
           * 	 -  Number – If set to a number, a corresponding number of text lines is displayed in every post.
           *
           * 	 -  Pixels – If set to a number followed by `px`, such as `50px`, the closest number in lines
           * 			is calculated and applied to the timeline posts, so that the post height corresponds to the specified
           * 			number of pixels and the text lines are not cut off in the middle of a line.
           * 	 -  Any other valid {@link sap.ui.core.CSSSize CSSSize} value that is inserted into the text wrapper
           * 			without being changed.
           */
          textHeight?: string;

          /**
           * Sets the width of the Timeline.
           */
          width?: sap.ui.core.CSSSize;

          /**
           * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
           *
           * This event is fired when a new post is added. As of version 1.46, replaced by {@link sap.collaboration.components.feed.Component}.
           */
          addPost?: Function;

          /**
           * This event is fired when the user clicks the Close button on a message strip.
           */
          customMessageClosed?: Function;

          /**
           * This event is fired when the user clicks the filter icon in the timeline toolbar and opens the filter.
           */
          filterOpen?: Function;

          /**
           * This event is fired when filtering is applied to timeline posts or when a search term is entered into
           * the search field. This event can be fired only if the enableModelFilter property is set to `true`.
           */
          filterSelectionChange?: Function;

          /**
           * This event is fired when the "More" button is clicked.
           */
          grow?: Function;

          /**
           * This event is fired for every timeline post when data filtering is being applied. It indicates whether
           * this post is included in the filtering and why. Can be used only when the enableModelFilter property
           * is set to `false`.
           */
          itemFiltering?: Function;

          /**
           * This event is fired when a timeline post is selected.
           */
          select?: Function;

          /**
           * @SINCE 1.26.1
           * @deprecated (since 1.46.0) - Replaced by {@link sap.collaboration.components.feed.Component}.
           *
           * This event is fired when the user enters text into the search field, in cases when the showSuggestion
           * property is set to `true`. Changing the suggestionItems aggregation will show the suggestions inside
           * a popup.
           */
          suggest?: Function;

          /**
           * @SINCE 1.26.1
           * @deprecated (since 1.46.0) - Replaced by {@link sap.collaboration.components.feed.Component}.
           *
           * This event is fired when a suggested post is selected in the suggestions popup list. This event is only
           * fired when the showSuggestion property is set to `true` and there is at least one post in the suggestions
           * popup list. See also the suggestionItems aggregation.
           */
          suggestionItemSelected?: Function;

          /**
           * List of timeline posts.
           */
          content?:
            | sap.suite.ui.commons.TimelineItem[]
            | sap.suite.ui.commons.TimelineItem;

          /**
           * A custom filter to be used instead of the default item filter. This control must have an `openBy` or
           * `open` function that is used by the timeline to open the control. If the control has both functions,
           * `openBy` is used.
           */
          customFilter?: sap.ui.core.Control;

          /**
           * Custom filter criteria for the items filter.
           */
          filterList?:
            | sap.suite.ui.commons.TimelineFilterListItem[]
            | sap.suite.ui.commons.TimelineFilterListItem;

          /**
           * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
           *
           * Items for suggestions. As of version 1.46, replaced by {@link sap.collaboration.components.feed.Component}.
           */
          suggestionItems?: sap.m.StandardListItem[] | sap.m.StandardListItem;
        }

        interface TimelineFilterListItemOpts extends sap.ui.core.ControlOpts {
          /**
           * A key for a filter criterion. Each filter criterion must have a unique key.
           */
          key?: string;

          /**
           * A textual label for the filter criterion. This text is displayed in the filter criteria list in the UI.
           */
          text?: string;
        }

        interface TimelineItemOpts extends sap.ui.core.ControlOpts {
          /**
           * Date and time value of the timeline post. This value must be in one of the following formats:
           * 	 -  A valid instance of the `Date` object.
           * 	 -  An integer representing Unix time (also known as POSIX or Epoch time) in milliseconds.
           * 	 -  A string with an integer representing Unix time in milliseconds.
           * 	 -  A string that contains `Date([number])`, where `[number]` represents Unix time in milliseconds.
           * 			  If this property has any other format, the timeline will try to parse it using `Date.parse`. It
           * 			is not recommended to use this functionality, as different web browsers implement this function differently,
           * 			which may lead to unpredictable behavior.
           */
          dateTime?: any;

          /**
           * Text for the items filter name. This text will be used as the name of the items filter in the filter
           * popover.
           */
          filterValue?: string;

          /**
           * Icon on the timeline axis that corresponds to the point in time when the entry was posted. Posts can
           * be displayed in chronological or reverse chronological order.
           */
          icon?: string;

          /**
           * Tooltip for an icon displayed on the timeline axis.
           */
          iconTooltip?: string;

          /**
           * Decides whether a default Icon tooltip should be used if no tooltip is set.
           */
          useIconTooltip?: boolean;

          /**
           * The expand and collapse feature is set by default and uses 300 characters on mobile devices and 500 characters
           * on desktop computers as limits. Based on these values, the text of the timeline post is collapsed once
           * it reaches these character limits. In this case, only the specified number of characters is displayed.
           * By clicking the More link, the entire text can be displayed. Clicking Less collapses the text. The application
           * can set the value according to its needs.
           */
          maxCharacters?: number;

          /**
           * Number of replies to a timeline post.
           */
          replyCount?: number;

          /**
           * Indicates the post status. The status affects the post's icon color. Supported values:
           * 	 -  `Information`
           * 	 -  `Success`
           * 	 -  `Warning`
           * 	 -  `Error`
           */
          status?: string;

          /**
           * Text shown in the post title right after the user name.
           */
          title?: string;

          /**
           * Text shown inside the timeline post.
           */
          text?: string;

          /**
           * User name shown in the post title.
           */
          userName?: string;

          /**
           * Makes the user name clickable. Clicking the name fires a userNameClicked event.
           */
          userNameClickable?: boolean;

          /**
           * Picture shown next to the user name.
           */
          userPicture?: sap.ui.core.URI;

          /**
           * This event is fired when a user name is clicked in the post's header section.
           */
          userNameClicked?: Function;

          /**
           * This event is fired when the Reply button is clicked in the links section of a timeline post.
           */
          replyPost?: Function;

          /**
           * This event is fired when the Reply link is clicked to open the reply dialog.
           */
          replyListOpen?: Function;

          /**
           * Fired when custom action link is clicked.
           */
          customActionClicked?: Function;

          /**
           * @SINCE 1.28.1
           * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
           *
           * This event is fired when the user types text into the search field and showSuggestion is set to true.
           * Changing the suggestItems aggregation will show the suggestions inside a popup.
           *  As of version 1.46, replaced by {@link sap.collaboration.components.feed.Component}.
           */
          suggest?: Function;

          /**
           * @SINCE 1.28.1
           * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
           *
           * This event is fired when a suggested post is selected in the search suggestions popup. This event is
           * fired only when the showSuggestion propery is set to `true` and there are suggested posts shown in the
           * suggestions popup.
           *  As of version 1.46, replaced by {@link sap.collaboration.components.feed.Component}.
           */
          suggestionItemSelected?: Function;

          /**
           * Custom actions displayed as links in the links section of the post. The key must be unique for each link.
           * Values are used as labels for the link. When a user clicks the link, a customActionClicked event is fired.
           */
          customAction?: sap.ui.core.CustomData[] | sap.ui.core.CustomData;

          /**
           * A UI5 control that acts as a custom reply dialog. It is used instead of the default reply dialog that
           * is displayed when the user clicks the Reply link. Supports UI5 controls that have an openBy method, for
           * example, the Popup control.
           */
          customReply?: sap.ui.core.Control;

          /**
           * A UI5 control that is displayed as a timeline post's content instead of the default content (text). Examples
           * of such a control include the Panel control and the List control.
           */
          embeddedControl?: sap.ui.core.Control;

          /**
           * A list of replies related to the post.
           */
          replyList?: sap.m.List;

          /**
           * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
           *
           * Suggested posts.
           *  As of version 1.46, replaced by {@link sap.collaboration.components.feed.Component}.
           */
          suggestionItems?: sap.m.StandardListItem[] | sap.m.StandardListItem;
        }

        interface UnifiedThingGroupOpts extends sap.ui.core.ControlOpts {
          /**
           * The title of the group.
           */
          title?: string;

          /**
           * The description of the group.
           */
          description?: string;

          /**
           * Defines how the control is rendered.
           */
          design?: sap.suite.ui.commons.ThingGroupDesign;

          /**
           * The content of the group.
           */
          content?: sap.ui.core.Control;
        }

        interface UnifiedThingInspectorOpts extends sap.ui.core.ControlOpts {
          /**
           * The height of the control.
           */
          height?: sap.ui.core.CSSSize;

          /**
           * The title of the thing.
           */
          title?: string;

          /**
           * The name of the thing.
           */
          name?: string;

          /**
           * The description of the thing.
           */
          description?: string;

          /**
           * The icon to be displayed as a graphical element within the header. This can be an image or an icon from
           * the icon font.
           */
          icon?: sap.ui.core.URI;

          /**
           * If set to true, the Transaction button appears.
           */
          transactionsVisible?: boolean;

          /**
           * If set to true, the Actions button appears.
           */
          actionsVisible?: boolean;

          /**
           * If set to true, destroys a page when the user chooses the Back button to leave this page.
           */
          destroyPageOnBack?: boolean;

          /**
           * If set to true, the Configuration button appears.
           */
          configurationVisible?: boolean;

          /**
           * The event is fired when the user chooses the Back button.
           */
          backAction?: Function;

          /**
           * The event is fired when the user chooses the Transactions button.
           */
          transactionsButtonPress?: Function;

          /**
           * The event is fired when the user chooses the Actions button.
           */
          actionsButtonPress?: Function;

          /**
           * The event is fired when the user chooses the Configuration button.
           */
          configurationButtonPress?: Function;

          /**
           * The event is fired when navigation between two pages has been triggered. The transition (if any) to the
           * new page has not started yet. This event can be aborted by the application with preventDefault(), which
           * means that there will be no navigation. This event is propogated from the inner NavContainer. The event
           * can also return internal Master and Detail pages.
           */
          navigate?: Function;

          /**
           * The event is fired when navigation between two pages has completed. In case of animated transitions this
           * event is fired with some delay after the "navigate" event. This event is propogated from the inner NavContainer.
           * The event can also return internal Master and Detail pages.
           */
          afterNavigate?: Function;

          /**
           * The list of the sap.suite.ui.commons.FacetOverview objects.
           */
          facets?:
            | sap.suite.ui.commons.FacetOverview[]
            | sap.suite.ui.commons.FacetOverview;

          /**
           * The content that appears on the detail page of the UnifiedThingInspector.
           */
          facetContent?: sap.ui.core.Control[] | sap.ui.core.Control;

          /**
           * A set of the KPI tiles to be shown in the header. Currently only 3 tiles from the list are displayed
           * on the desktop and tablet. On the phone, all tiles are displayed in a swipeable container.
           */
          kpis?: sap.suite.ui.commons.KpiTile[] | sap.suite.ui.commons.KpiTile;

          /**
           * @deprecated (since 1.18.2) - Deprecated due to the incorrect work with data binding. Open the popup in
           * the transactionsButtonPress event handler instead.
           *
           * Menu items for transaction popup.
           */
          transactions?: sap.ui.core.Control[] | sap.ui.core.Control;

          /**
           * @deprecated (since 1.18.2) - Deprecated due to the incorrect work with data binding. Open the popup in
           * the actionsButtonPress event handler instead.
           *
           * Action sheet controls.
           */
          actions?: sap.m.Button[] | sap.m.Button;

          /**
           * Contains pages except for Master and Detail.
           */
          pages?: sap.ui.core.Control[] | sap.ui.core.Control;
        }

        interface VerticalNavigationBarOpts
          extends sap.ui.ux3.NavigationBarOpts {}

        interface ViewRepeaterOpts extends sap.ui.commons.RowRepeaterOpts {
          /**
           * The minimal width of the tile for the current view. Only applicable if "responsive" property is set to
           * true.
           */
          itemMinWidth?: number;

          /**
           * This parameter indicates whether the content is shown in rows or tiles. If false, the content is shown
           * in rows just like in core sap.ui.commons.RowRepeater. If true, the content is shown in tiles (similar
           * to sap.ui.ux3.DataSet control) that have minimal width defined by the "itemMinWidth" property. The number
           * of columns depends on the parent control's width. If you resize the control, the number of columns may
           * change respectively so that the content tiles can fill the entire space of a row.
           */
          responsive?: boolean;

          /**
           * The index of the default view starting from 0. The view is selected on the initial rendering of the control.
           * If the index is greater than the total quantity of the views, the last view is selected.
           */
          defaultViewIndex?: number;

          /**
           * Indicates if the search field panel is shown.
           */
          showSearchField?: boolean;

          /**
           * Indicates if the view selector panel is shown.
           */
          showViews?: boolean;

          /**
           * Indicates if the external representation of the current view is rendered.
           */
          external?: boolean;

          /**
           * The height of the tile in the current view in pixels. Only applicable if the responsive property is set
           * to true. This value is used for calculating the number of tile rows.
           */
          itemHeight?: number;

          /**
           * The height of the control. Only applicable if the responsive property is set to true.
           */
          height?: sap.ui.core.CSSSize;

          /**
           * This event is fired when the user performs a search.
           */
          search?: Function;

          /**
           * This event is fired when a user switches between views.
           */
          changeView?: Function;

          /**
           * The list of views for the data representation.
           */
          views?:
            | sap.suite.ui.commons.RepeaterViewConfiguration[]
            | sap.suite.ui.commons.RepeaterViewConfiguration;

          /**
           * The control to be rendered instead of the repeater's own content.
           */
          externalRepresentation?: sap.ui.core.Control | string;
        }
        /**
         * @SINCE 1.65.0
         *
         * `AriaProperties` provides ARIA-compliant properties for screen reader software that can be added to any
         * control renderer.
         */
        class AriaProperties extends sap.ui.core.Element {
          /**
           * Constructor for a new AriaProperties.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor();

          /**
           * Creates a new subclass of class sap.suite.ui.commons.AriaProperties with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets current value of property {@link #getDescribedBy describedBy}.
           *
           * Identifies one or more elements that describe the object. See the related `labelledBy` property.
           */
          getDescribedBy(): string;
          /**
           * Gets current value of property {@link #getHasPopup hasPopup}.
           *
           * Indicates that the element has a popup context menu or a submenu.
           */
          getHasPopup(): string;
          /**
           * Gets current value of property {@link #getLabel label}.
           *
           * Defines a string value that labels the current element. See the related `labelledBy` property.
           */
          getLabel(): string;
          /**
           * Gets current value of property {@link #getLabelledBy labelledBy}.
           *
           * Identifies one or more elements that label the current element. See the related `label` and `describedBy`
           * properties.
           */
          getLabelledBy(): string;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.AriaProperties.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getRole role}.
           *
           * Identifies the element role.
           */
          getRole(): string;
          /**
           * Sets a new value for property {@link #getDescribedBy describedBy}.
           *
           * Identifies one or more elements that describe the object. See the related `labelledBy` property.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setDescribedBy(
            /**
             * New value for property `describedBy`
             */
            sDescribedBy: string
          ): sap.suite.ui.commons.AriaProperties;
          /**
           * Sets a new value for property {@link #getHasPopup hasPopup}.
           *
           * Indicates that the element has a popup context menu or a submenu.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setHasPopup(
            /**
             * New value for property `hasPopup`
             */
            sHasPopup: string
          ): sap.suite.ui.commons.AriaProperties;
          /**
           * Sets a new value for property {@link #getLabel label}.
           *
           * Defines a string value that labels the current element. See the related `labelledBy` property.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setLabel(
            /**
             * New value for property `label`
             */
            sLabel: string
          ): sap.suite.ui.commons.AriaProperties;
          /**
           * Sets a new value for property {@link #getLabelledBy labelledBy}.
           *
           * Identifies one or more elements that label the current element. See the related `label` and `describedBy`
           * properties.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setLabelledBy(
            /**
             * New value for property `labelledBy`
             */
            sLabelledBy: string
          ): sap.suite.ui.commons.AriaProperties;
          /**
           * Sets a new value for property {@link #getRole role}.
           *
           * Identifies the element role.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setRole(
            /**
             * New value for property `role`
             */
            sRole: string
          ): sap.suite.ui.commons.AriaProperties;
          /**
           * Adds the provided ARIA-compliant properties to a control.
           */
          static writeAriaProperties(
            /**
             * The RenderManager that can be used for writing to the render output buffer
             */
            oRm: sap.ui.core.RenderManager,
            /**
             * Default ARIA-compliant properties of the control
             */
            oDefaultProperties: object,
            /**
             * ARIA-compliant properties from data binding
             */
            oAriaProperties: sap.suite.ui.commons.AriaProperties
          ): void;
        }
        /**
         * @deprecated (since 1.34) - this control is a mere wrapper for sap.suite.ui.microchart.BulletMicroChart.
         *
         * Chart that displays an actual value as a horizontal bar in semantic color on the top of the background
         * bar, the numeric value, the scaling factor, along with the thresholds, and a target value as vertical
         * bars.
         */
        class BulletChart extends sap.suite.ui.microchart.BulletMicroChart {
          /**
           * Constructor for a new BulletChart.
           */
          constructor(
            /**
             * ID for the new control, automatically generated if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: BulletChartOpts
          );

          /**
           * Creates a new subclass of class sap.suite.ui.commons.BulletChart with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.microchart.BulletMicroChart.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.BulletChart.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
        }
        /**
         * @deprecated (since 1.34) - this control is a mere wrapper for sap.suite.ui.microchart.BulletMicroChartData.
         *
         * Thresholds data holder.
         */
        class BulletChartData extends sap.suite.ui.microchart
          .BulletMicroChartData {
          /**
           * Constructor for a new BulletChartData.
           */
          constructor(
            /**
             * ID for the new control, automatically generated if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: BulletChartDataOpts
          );

          /**
           * Creates a new subclass of class sap.suite.ui.commons.BulletChartData with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.microchart.BulletMicroChartData.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.BulletChartData.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
        }
        /**
         * @deprecated (since 1.32) - Deprecated. Standard Fiori technology should be used.
         *
         * This control allows you to display business card information including an image, first title (either
         * URL link or text), second title, and multiple text lines.
         */
        class BusinessCard extends sap.ui.core.Control {
          /**
           * Constructor for a new BusinessCard.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: BusinessCardOpts
          );

          /**
           * Destroys the content in the aggregation {@link #getContent content}.
           */
          destroyContent(): sap.suite.ui.commons.BusinessCard;
          /**
           * Destroys the firstTitle in the aggregation {@link #getFirstTitle firstTitle}.
           */
          destroyFirstTitle(): sap.suite.ui.commons.BusinessCard;
          /**
           * Creates a new subclass of class sap.suite.ui.commons.BusinessCard with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets content of aggregation {@link #getContent content}.
           *
           * The content of the BusinessCard body must be provided by the application developer.
           */
          getContent(): sap.ui.core.Control;
          /**
           * Gets content of aggregation {@link #getFirstTitle firstTitle}.
           *
           * Any control that can display a title. Content of this control appears at the first position in BusinessCard.
           * Recomended controls: sap.ui.commons.Label and sap.ui.commons.Link.
           */
          getFirstTitle(): sap.ui.core.Control;
          /**
           * Gets current value of property {@link #getIconPath iconPath}.
           *
           * A path to the BusinessCard icon.
           */
          getIconPath(): sap.ui.core.URI;
          /**
           * Gets current value of property {@link #getImageTooltip imageTooltip}.
           *
           * A tooltip that is set for an image.
           */
          getImageTooltip(): string;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.BusinessCard.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getSecondTitle secondTitle}.
           *
           * A short text line that describes this BusinessCard.
           */
          getSecondTitle(): string;
          /**
           * Gets current value of property {@link #getType type}.
           *
           * Title of the BusinessCard that describes its type.
           */
          getType(): string;
          /**
           * Gets current value of property {@link #getWidth width}.
           *
           * Width of the BusinessCard. Alternatively, CSS size can be set in %, px, or em.
           */
          getWidth(): sap.ui.core.CSSSize;
          /**
           * Sets the aggregated {@link #getContent content}.
           */
          setContent(
            /**
             * The content to set
             */
            oContent: sap.ui.core.Control
          ): sap.suite.ui.commons.BusinessCard;
          /**
           * Sets the aggregated {@link #getFirstTitle firstTitle}.
           */
          setFirstTitle(
            /**
             * The firstTitle to set
             */
            oFirstTitle: sap.ui.core.Control
          ): sap.suite.ui.commons.BusinessCard;
          /**
           * Sets a new value for property {@link #getIconPath iconPath}.
           *
           * A path to the BusinessCard icon.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setIconPath(
            /**
             * New value for property `iconPath`
             */
            sIconPath: sap.ui.core.URI
          ): sap.suite.ui.commons.BusinessCard;
          /**
           * Sets a new value for property {@link #getImageTooltip imageTooltip}.
           *
           * A tooltip that is set for an image.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setImageTooltip(
            /**
             * New value for property `imageTooltip`
             */
            sImageTooltip: string
          ): sap.suite.ui.commons.BusinessCard;
          /**
           * Sets a new value for property {@link #getSecondTitle secondTitle}.
           *
           * A short text line that describes this BusinessCard.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setSecondTitle(
            /**
             * New value for property `secondTitle`
             */
            sSecondTitle: string
          ): sap.suite.ui.commons.BusinessCard;
          /**
           * Sets a new value for property {@link #getType type}.
           *
           * Title of the BusinessCard that describes its type.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setType(
            /**
             * New value for property `type`
             */
            sType: string
          ): sap.suite.ui.commons.BusinessCard;
          /**
           * Sets a new value for property {@link #getWidth width}.
           *
           * Width of the BusinessCard. Alternatively, CSS size can be set in %, px, or em.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setWidth(
            /**
             * New value for property `width`
             */
            sWidth: sap.ui.core.CSSSize
          ): sap.suite.ui.commons.BusinessCard;
        }
        /**
         * @SINCE 1.56.0
         *
         * Calculation Builder allows you to perform arithmetic calculations on constants and variables using standard
         * arithmetic operators as well as most common logical operators and functions.
         *  You can customize the sets of variables and functions that are visible in the calculation builder and
         * introduce your own custom functions, as needed.
         *  Arithmetic expressions can be entered using a touch-friendly visual editor or a textual editor that
         * provides autocomplete suggestions for variables and checks the expression syntax as you type.
         */
        class CalculationBuilder extends sap.ui.core.Control {
          /**
           * Constructor for a new calculation builder.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           * See:
           * 	{@link topic:1db504725155424a8dc9fabd4147dd28 Calculation Builder}
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: CalculationBuilderOpts
          );

          /**
           * Adds some Function to the aggregation {@link #getFunctions functions}.
           */
          addFunction(
            /**
             * The Function to add; if empty, nothing is inserted
             */
            oFunction: sap.suite.ui.commons.CalculationBuilderFunction
          ): sap.suite.ui.commons.CalculationBuilder;
          /**
           * Adds some Group to the aggregation {@link #getGroups groups}.
           */
          addGroup(
            /**
             * The Group to add; if empty, nothing is inserted
             */
            oGroup: sap.suite.ui.commons.CalculationBuilderGroup
          ): sap.suite.ui.commons.CalculationBuilder;
          /**
           * Adds some item to the aggregation {@link #getItems items}.
           */
          addItem(
            /**
             * The item to add; if empty, nothing is inserted
             */
            oItem: sap.suite.ui.commons.CalculationBuilderItem
          ): sap.suite.ui.commons.CalculationBuilder;
          /**
           * Adds some Operator to the aggregation {@link #getOperators operators}.
           */
          addOperator(
            /**
             * The Operator to add; if empty, nothing is inserted
             */
            oOperator: sap.ui.core.Item
          ): sap.suite.ui.commons.CalculationBuilder;
          /**
           * Adds some Variable to the aggregation {@link #getVariables variables}.
           */
          addVariable(
            /**
             * The Variable to add; if empty, nothing is inserted
             */
            oVariable: sap.suite.ui.commons.CalculationBuilderVariable
          ): sap.suite.ui.commons.CalculationBuilder;
          /**
           * Checks if the function is visible to the user.
           */
          allowFunction(
            /**
             * Name of the function
             */
            sFunction: sap.suite.ui.commons.CalculationBuilderFunctionType,
            /**
             * True if the function should be visible to the user
             */
            bAllow: boolean
          ): void;
          /**
           * Records a new error detected in the expression.
           */
          appendError(
            /**
             * Error object with contains following properties:
             */
            oError: {
              /**
               * Index of the item that contains errors
               */
              index?: object;
              /**
               * Title of the error
               */
              title?: number;
            }
          ): void;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:afterValidation afterValidation} event of this
           * `sap.suite.ui.commons.CalculationBuilder`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.CalculationBuilder` itself.
           *
           * This event is fired after the expression is validated.
           */
          attachAfterValidation(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.CalculationBuilder`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.CalculationBuilder;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.suite.ui.commons.CalculationBuilder`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.CalculationBuilder` itself.
           *
           * This event is fired when the order of items changes, or when some items are added or removed.
           */
          attachChange(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.CalculationBuilder`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.CalculationBuilder;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:validateFunction validateFunction} event of
           * this `sap.suite.ui.commons.CalculationBuilder`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.CalculationBuilder` itself.
           *
           * This event is fired for each custom function included in the expression.
           *  Custom functions can be defined using {@link sap.suite.ui.commons.CalculationBuilderFunction} and validated
           * using {@link sap.suite.ui.commons.CalculationBuilderValidationResult}.
           */
          attachValidateFunction(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.CalculationBuilder`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.CalculationBuilder;
          /**
           * Binds aggregation {@link #getItems items} to model data.
           *
           * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
           * of the possible properties of `oBindingInfo`.
           */
          bindItems(
            /**
             * The binding information
             */
            oBindingInfo: object
          ): sap.suite.ui.commons.CalculationBuilder;
          /**
           * Destroys all the functions in the aggregation {@link #getFunctions functions}.
           */
          destroyFunctions(): sap.suite.ui.commons.CalculationBuilder;
          /**
           * Destroys all the groups in the aggregation {@link #getGroups groups}.
           */
          destroyGroups(): sap.suite.ui.commons.CalculationBuilder;
          /**
           * Destroys all the items in the aggregation {@link #getItems items}.
           */
          destroyItems(): sap.suite.ui.commons.CalculationBuilder;
          /**
           * Destroys all the operators in the aggregation {@link #getOperators operators}.
           */
          destroyOperators(): sap.suite.ui.commons.CalculationBuilder;
          /**
           * Destroys all the variables in the aggregation {@link #getVariables variables}.
           */
          destroyVariables(): sap.suite.ui.commons.CalculationBuilder;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:afterValidation afterValidation} event of
           * this `sap.suite.ui.commons.CalculationBuilder`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachAfterValidation(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.CalculationBuilder;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.suite.ui.commons.CalculationBuilder`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachChange(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.CalculationBuilder;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:validateFunction validateFunction} event of
           * this `sap.suite.ui.commons.CalculationBuilder`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachValidateFunction(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.CalculationBuilder;
          /**
           * Creates a new subclass of class sap.suite.ui.commons.CalculationBuilder with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:afterValidation afterValidation} to attached listeners.
           */
          fireAfterValidation(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.suite.ui.commons.CalculationBuilder;
          /**
           * Fires event {@link #event:change change} to attached listeners.
           */
          fireChange(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.suite.ui.commons.CalculationBuilder;
          /**
           * Fires event {@link #event:validateFunction validateFunction} to attached listeners.
           */
          fireValidateFunction(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              definition?: object;

              customFunction?: object;

              result?: sap.suite.ui.commons.CalculationBuilderValidationResult;
            }
          ): sap.suite.ui.commons.CalculationBuilder;
          /**
           * Gets current value of property {@link #getAllowComparisonOperators allowComparisonOperators}.
           *
           * Defines whether comparison operators (, =, =, !=) are allowed.
           *
           * Default value is `true`.
           */
          getAllowComparisonOperators(): boolean;
          /**
           * Gets current value of property {@link #getAllowLogicalOperators allowLogicalOperators}.
           *
           * Defines whether logical operators (AND, OR, XOR, NOT) are allowed.
           *
           * Default value is `true`.
           */
          getAllowLogicalOperators(): boolean;
          /**
           * Gets current value of property {@link #getAllowStringConstants allowStringConstants}.
           *
           * Defines whether string constants are allowed.
           *  If set to `true`, the calculation builder doesn't validate custom strings as errors.
           *
           * Default value is `false`.
           */
          getAllowStringConstants(): boolean;
          /**
           * Gets current value of property {@link #getAllowSuggestions allowSuggestions}.
           *
           * Defines whether autocomplete suggestions are shown when you type. Available only for desktop devices.
           *
           * Default value is `true`.
           */
          getAllowSuggestions(): boolean;
          /**
           * Gets current value of property {@link #getDisabledDefaultTokens disabledDefaultTokens}.
           *
           * Default operators or functions that are disabled. Delimiter for multiple items is ';'.
           *  Example of usage: +;-;sqrt
           *
           * Default value is `empty string`.
           */
          getDisabledDefaultTokens(): string;
          /**
           * Returns syntax errors.
           */
          getErrors(): void;
          /**
           * Gets current value of property {@link #getExpression expression}.
           *
           * Holds the arithmetic expression.
           *  Use either this property or aggregation `Items`. Not both.
           */
          getExpression(): string;
          /**
           * Gets content of aggregation {@link #getFunctions functions}.
           *
           * Holds the custom functions that can be used in the calculation builder.
           */
          getFunctions(): sap.suite.ui.commons.CalculationBuilderFunction[];
          /**
           * Gets content of aggregation {@link #getGroups groups}.
           *
           * Defines groups of variables.
           *  Variables can be organized into multiple groups for better orientation among different types of variables.
           */
          getGroups(): sap.suite.ui.commons.CalculationBuilderGroup[];
          /**
           * Returns the input toolbar of the calculation builder.
           */
          getInputToolbar(): Object;
          /**
           * Gets content of aggregation {@link #getItems items}.
           *
           * Holds the items (operators and operands) to be displayed in the calculation builder.
           */
          getItems(): sap.suite.ui.commons.CalculationBuilderItem[];
          /**
           * Gets current value of property {@link #getLayoutType layoutType}.
           *
           * Defines the layout type used for the calculation builder.
           *  The layout may include a visual editor, a text editor, or both. In addition, you can set the text editor
           * to be read-only.
           *
           * Default value is `Default`.
           */
          getLayoutType(): string;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.CalculationBuilder.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets content of aggregation {@link #getOperators operators}.
           *
           * Holds additional operators defined by the application.
           * These operators are not validated.
           */
          getOperators(): sap.ui.core.Item[];
          /**
           * Gets current value of property {@link #getReadOnly readOnly}.
           *
           * Defines whether the control is read-only.
           *
           * Default value is `false`.
           */
          getReadOnly(): boolean;
          /**
           * Gets current value of property {@link #getShowInputToolbar showInputToolbar}.
           *
           * Defines whether the input toolbar is visible.
           *  The input toolbar contains operators and functions that can be used in the expression.
           *
           * Default value is `false`.
           */
          getShowInputToolbar(): boolean;
          /**
           * Gets current value of property {@link #getShowToolbar showToolbar}.
           *
           * Defines whether the toolbar is visible.
           *
           * Default value is `true`.
           */
          getShowToolbar(): boolean;
          /**
           * Gets current value of property {@link #getTitle title}.
           *
           * The title of the calculation builder element.
           */
          getTitle(): string;
          /**
           * Returns the toolbar of the calculation builder.
           */
          getToolbar(): Object;
          /**
           * Gets current value of property {@link #getValidationMode validationMode}.
           *
           * Defines when the expression is validated.
           *
           * 	 - If set to `LiveChange`, the input is validated as you type.
           * 	 - If set to `FocusOut`, the input is validated, once you press Enter or Tab.
           *
           * Default value is `LiveChange`.
           */
          getValidationMode(): sap.suite.ui.commons.CalculationBuilderValidationMode;
          /**
           * Gets content of aggregation {@link #getVariables variables}.
           *
           * Holds the variables that can be used in the calculation builder.
           */
          getVariables(): sap.suite.ui.commons.CalculationBuilderVariable[];
          /**
           * Gets current value of property {@link #getWrapItemsInExpression wrapItemsInExpression}.
           *
           * Defines whether the expression should be wrapped inside the calculation builder field.
           *  If set to `false`, the expression is rearranged into a single scrollable row.
           *
           * Default value is `true`.
           */
          getWrapItemsInExpression(): boolean;
          /**
           * Checks for the provided `sap.suite.ui.commons.CalculationBuilderFunction` in the aggregation {@link #getFunctions
           * functions}. and returns its index if found or -1 otherwise.
           */
          indexOfFunction(
            /**
             * The Function whose index is looked for
             */
            oFunction: sap.suite.ui.commons.CalculationBuilderFunction
          ): number;
          /**
           * Checks for the provided `sap.suite.ui.commons.CalculationBuilderGroup` in the aggregation {@link #getGroups
           * groups}. and returns its index if found or -1 otherwise.
           */
          indexOfGroup(
            /**
             * The Group whose index is looked for
             */
            oGroup: sap.suite.ui.commons.CalculationBuilderGroup
          ): number;
          /**
           * Checks for the provided `sap.suite.ui.commons.CalculationBuilderItem` in the aggregation {@link #getItems
           * items}. and returns its index if found or -1 otherwise.
           */
          indexOfItem(
            /**
             * The item whose index is looked for
             */
            oItem: sap.suite.ui.commons.CalculationBuilderItem
          ): number;
          /**
           * Checks for the provided `sap.ui.core.Item` in the aggregation {@link #getOperators operators}. and returns
           * its index if found or -1 otherwise.
           */
          indexOfOperator(
            /**
             * The Operator whose index is looked for
             */
            oOperator: sap.ui.core.Item
          ): number;
          /**
           * Checks for the provided `sap.suite.ui.commons.CalculationBuilderVariable` in the aggregation {@link #getVariables
           * variables}. and returns its index if found or -1 otherwise.
           */
          indexOfVariable(
            /**
             * The Variable whose index is looked for
             */
            oVariable: sap.suite.ui.commons.CalculationBuilderVariable
          ): number;
          /**
           * Inserts a Function into the aggregation {@link #getFunctions functions}.
           */
          insertFunction(
            /**
             * The Function to insert; if empty, nothing is inserted
             */
            oFunction: sap.suite.ui.commons.CalculationBuilderFunction,
            /**
             * The `0`-based index the Function should be inserted at; for a negative value of `iIndex`, the Function
             * is inserted at position 0; for a value greater than the current size of the aggregation, the Function
             * is inserted at the last position
             */
            iIndex: number
          ): sap.suite.ui.commons.CalculationBuilder;
          /**
           * Inserts a Group into the aggregation {@link #getGroups groups}.
           */
          insertGroup(
            /**
             * The Group to insert; if empty, nothing is inserted
             */
            oGroup: sap.suite.ui.commons.CalculationBuilderGroup,
            /**
             * The `0`-based index the Group should be inserted at; for a negative value of `iIndex`, the Group is inserted
             * at position 0; for a value greater than the current size of the aggregation, the Group is inserted at
             * the last position
             */
            iIndex: number
          ): sap.suite.ui.commons.CalculationBuilder;
          /**
           * Inserts a item into the aggregation {@link #getItems items}.
           */
          insertItem(
            /**
             * The item to insert; if empty, nothing is inserted
             */
            oItem: sap.suite.ui.commons.CalculationBuilderItem,
            /**
             * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
             * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
             * the last position
             */
            iIndex: number
          ): sap.suite.ui.commons.CalculationBuilder;
          /**
           * Inserts a Operator into the aggregation {@link #getOperators operators}.
           */
          insertOperator(
            /**
             * The Operator to insert; if empty, nothing is inserted
             */
            oOperator: sap.ui.core.Item,
            /**
             * The `0`-based index the Operator should be inserted at; for a negative value of `iIndex`, the Operator
             * is inserted at position 0; for a value greater than the current size of the aggregation, the Operator
             * is inserted at the last position
             */
            iIndex: number
          ): sap.suite.ui.commons.CalculationBuilder;
          /**
           * Inserts a Variable into the aggregation {@link #getVariables variables}.
           */
          insertVariable(
            /**
             * The Variable to insert; if empty, nothing is inserted
             */
            oVariable: sap.suite.ui.commons.CalculationBuilderVariable,
            /**
             * The `0`-based index the Variable should be inserted at; for a negative value of `iIndex`, the Variable
             * is inserted at position 0; for a value greater than the current size of the aggregation, the Variable
             * is inserted at the last position
             */
            iIndex: number
          ): sap.suite.ui.commons.CalculationBuilder;
          /**
           * Removes all the controls from the aggregation {@link #getFunctions functions}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllFunctions(): sap.suite.ui.commons.CalculationBuilderFunction[];
          /**
           * Removes all the controls from the aggregation {@link #getGroups groups}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllGroups(): sap.suite.ui.commons.CalculationBuilderGroup[];
          /**
           * Removes all the controls from the aggregation {@link #getItems items}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllItems(): sap.suite.ui.commons.CalculationBuilderItem[];
          /**
           * Removes all the controls from the aggregation {@link #getOperators operators}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllOperators(): sap.ui.core.Item[];
          /**
           * Removes all the controls from the aggregation {@link #getVariables variables}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllVariables(): sap.suite.ui.commons.CalculationBuilderVariable[];
          /**
           * Removes a Function from the aggregation {@link #getFunctions functions}.
           */
          removeFunction(
            /**
             * The Function to remove or its index or id
             */
            vFunction:
              | number
              | string
              | sap.suite.ui.commons.CalculationBuilderFunction
          ): sap.suite.ui.commons.CalculationBuilderFunction;
          /**
           * Removes a Group from the aggregation {@link #getGroups groups}.
           */
          removeGroup(
            /**
             * The Group to remove or its index or id
             */
            vGroup:
              | number
              | string
              | sap.suite.ui.commons.CalculationBuilderGroup
          ): sap.suite.ui.commons.CalculationBuilderGroup;
          /**
           * Removes a item from the aggregation {@link #getItems items}.
           */
          removeItem(
            /**
             * The item to remove or its index or id
             */
            vItem: number | string | sap.suite.ui.commons.CalculationBuilderItem
          ): sap.suite.ui.commons.CalculationBuilderItem;
          /**
           * Removes a Operator from the aggregation {@link #getOperators operators}.
           */
          removeOperator(
            /**
             * The Operator to remove or its index or id
             */
            vOperator: number | string | sap.ui.core.Item
          ): sap.ui.core.Item;
          /**
           * Removes a Variable from the aggregation {@link #getVariables variables}.
           */
          removeVariable(
            /**
             * The Variable to remove or its index or id
             */
            vVariable:
              | number
              | string
              | sap.suite.ui.commons.CalculationBuilderVariable
          ): sap.suite.ui.commons.CalculationBuilderVariable;
          /**
           * Sets a new value for property {@link #getAllowComparisonOperators allowComparisonOperators}.
           *
           * Defines whether comparison operators (, =, =, !=) are allowed.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setAllowComparisonOperators(
            /**
             * New value for property `allowComparisonOperators`
             */
            bAllowComparisonOperators: boolean
          ): sap.suite.ui.commons.CalculationBuilder;
          /**
           * Sets a new value for property {@link #getAllowLogicalOperators allowLogicalOperators}.
           *
           * Defines whether logical operators (AND, OR, XOR, NOT) are allowed.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setAllowLogicalOperators(
            /**
             * New value for property `allowLogicalOperators`
             */
            bAllowLogicalOperators: boolean
          ): sap.suite.ui.commons.CalculationBuilder;
          /**
           * Sets a new value for property {@link #getAllowStringConstants allowStringConstants}.
           *
           * Defines whether string constants are allowed.
           *  If set to `true`, the calculation builder doesn't validate custom strings as errors.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setAllowStringConstants(
            /**
             * New value for property `allowStringConstants`
             */
            bAllowStringConstants: boolean
          ): sap.suite.ui.commons.CalculationBuilder;
          /**
           * Sets a new value for property {@link #getAllowSuggestions allowSuggestions}.
           *
           * Defines whether autocomplete suggestions are shown when you type. Available only for desktop devices.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setAllowSuggestions(
            /**
             * New value for property `allowSuggestions`
             */
            bAllowSuggestions: boolean
          ): sap.suite.ui.commons.CalculationBuilder;
          /**
           * Sets a new value for property {@link #getDisabledDefaultTokens disabledDefaultTokens}.
           *
           * Default operators or functions that are disabled. Delimiter for multiple items is ';'.
           *  Example of usage: +;-;sqrt
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `empty string`.
           */
          setDisabledDefaultTokens(
            /**
             * New value for property `disabledDefaultTokens`
             */
            sDisabledDefaultTokens: string
          ): sap.suite.ui.commons.CalculationBuilder;
          /**
           * Sets a new value for property {@link #getExpression expression}.
           *
           * Holds the arithmetic expression.
           *  Use either this property or aggregation `Items`. Not both.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setExpression(
            /**
             * New value for property `expression`
             */
            sExpression: string
          ): sap.suite.ui.commons.CalculationBuilder;
          /**
           * Sets a new value for property {@link #getLayoutType layoutType}.
           *
           * Defines the layout type used for the calculation builder.
           *  The layout may include a visual editor, a text editor, or both. In addition, you can set the text editor
           * to be read-only.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `Default`.
           */
          setLayoutType(
            /**
             * New value for property `layoutType`
             */
            sLayoutType: string
          ): sap.suite.ui.commons.CalculationBuilder;
          /**
           * Sets a new value for property {@link #getReadOnly readOnly}.
           *
           * Defines whether the control is read-only.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setReadOnly(
            /**
             * New value for property `readOnly`
             */
            bReadOnly: boolean
          ): sap.suite.ui.commons.CalculationBuilder;
          /**
           * Sets a new value for property {@link #getShowInputToolbar showInputToolbar}.
           *
           * Defines whether the input toolbar is visible.
           *  The input toolbar contains operators and functions that can be used in the expression.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setShowInputToolbar(
            /**
             * New value for property `showInputToolbar`
             */
            bShowInputToolbar: boolean
          ): sap.suite.ui.commons.CalculationBuilder;
          /**
           * Sets a new value for property {@link #getShowToolbar showToolbar}.
           *
           * Defines whether the toolbar is visible.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setShowToolbar(
            /**
             * New value for property `showToolbar`
             */
            bShowToolbar: boolean
          ): sap.suite.ui.commons.CalculationBuilder;
          /**
           * Sets a new value for property {@link #getTitle title}.
           *
           * The title of the calculation builder element.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setTitle(
            /**
             * New value for property `title`
             */
            sTitle: string
          ): sap.suite.ui.commons.CalculationBuilder;
          /**
           * Sets a new value for property {@link #getValidationMode validationMode}.
           *
           * Defines when the expression is validated.
           *
           * 	 - If set to `LiveChange`, the input is validated as you type.
           * 	 - If set to `FocusOut`, the input is validated, once you press Enter or Tab.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `LiveChange`.
           */
          setValidationMode(
            /**
             * New value for property `validationMode`
             */
            sValidationMode: sap.suite.ui.commons.CalculationBuilderValidationMode
          ): sap.suite.ui.commons.CalculationBuilder;
          /**
           * Sets a new value for property {@link #getWrapItemsInExpression wrapItemsInExpression}.
           *
           * Defines whether the expression should be wrapped inside the calculation builder field.
           *  If set to `false`, the expression is rearranged into a single scrollable row.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setWrapItemsInExpression(
            /**
             * New value for property `wrapItemsInExpression`
             */
            bWrapItemsInExpression: boolean
          ): sap.suite.ui.commons.CalculationBuilder;
          /**
           * Unbinds aggregation {@link #getItems items} from model data.
           */
          unbindItems(): sap.suite.ui.commons.CalculationBuilder;
          /**
           * Updates the list of displayed errors
           *  You can call this method when you change errors outside default calculation builder events.
           */
          updateErrorsDisplay(): void;
          /**
           * Creates or updates the currently selected item.
           *  Call this function only when using the `customView` aggregation in the {@link sap.suite.ui.commons.CalculationBuilderGroup}.
           */
          updateOrCreateItem(
            /**
             * New key for current item (new or old)
             */
            sKey: string
          ): void;
          /**
           * Validates the current expression and displays errors.
           */
          validate(): void;
          /**
           * Checks if the expression syntax is valid.
           */
          validateParts(): any;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:afterValidation afterValidation} event of this
           * `sap.suite.ui.commons.CalculationBuilder`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.CalculationBuilder` itself.
           *
           * This event is fired after the expression is validated.
           */
          attachAfterValidation(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.CalculationBuilder`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.CalculationBuilder;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.suite.ui.commons.CalculationBuilder`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.CalculationBuilder` itself.
           *
           * This event is fired when the order of items changes, or when some items are added or removed.
           */
          attachChange(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.CalculationBuilder`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.CalculationBuilder;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:validateFunction validateFunction} event of
           * this `sap.suite.ui.commons.CalculationBuilder`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.CalculationBuilder` itself.
           *
           * This event is fired for each custom function included in the expression.
           *  Custom functions can be defined using {@link sap.suite.ui.commons.CalculationBuilderFunction} and validated
           * using {@link sap.suite.ui.commons.CalculationBuilderValidationResult}.
           */
          attachValidateFunction(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.CalculationBuilder`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.CalculationBuilder;
        }
        /**
         * @SINCE 1.56.0
         *
         * A custom function to be used in the calculation builder.
         *  The default functions available for the calculation builder are defined in {@link sap.suite.ui.commons.CalculationBuilderFunctionType}.
         */
        class CalculationBuilderFunction extends sap.ui.core.Control {
          /**
           * Constructor for a new custom function.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: CalculationBuilderFunctionOpts
          );

          /**
           * Adds some item to the aggregation {@link #getItems items}.
           */
          addItem(
            /**
             * The item to add; if empty, nothing is inserted
             */
            oItem: sap.suite.ui.commons.CalculationBuilderItem
          ): sap.suite.ui.commons.CalculationBuilderFunction;
          /**
           * Destroys all the items in the aggregation {@link #getItems items}.
           */
          destroyItems(): sap.suite.ui.commons.CalculationBuilderFunction;
          /**
           * Creates a new subclass of class sap.suite.ui.commons.CalculationBuilderFunction with name `sClassName`
           * and enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets current value of property {@link #getDescription description}.
           *
           * Description of the function.
           *  The description is displayed in the functions menu on the calculation builder's toolbar. If no description
           * is specified, it is generated automatically based on the `key` property and the parameters defined in
           * the `items` aggregation.
           */
          getDescription(): string;
          /**
           * Gets content of aggregation {@link #getItems items}.
           *
           * Holds the parameters that can be passed to the function.
           *  For example, if the function has two parameters, the `items` aggregation may consist of:
           * 	 - A {@link sap.suite.ui.commons.CalculationBuilderItem} with an empty key for the first argument entered
           * 			by the user.
           * 	 - A {@link sap.suite.ui.commons.CalculationBuilderItem} with a "`,`" (comma) key for the comma that
           * 			separates the arguments.
           * 	 - A {@link sap.suite.ui.commons.CalculationBuilderItem} with an empty key for the second argument entered
           * 			by the user.
           */
          getItems(): sap.suite.ui.commons.CalculationBuilderItem[];
          /**
           * Gets current value of property {@link #getKey key}.
           *
           * A key associated with the function. This property is mandatory.
           *  The key is displayed in the text editor area of the calculation builder.
           */
          getKey(): string;
          /**
           * Gets current value of property {@link #getLabel label}.
           *
           * Label for the function.
           *  The label is displayed in the visual editor of the calculation builder and in the functions menu on
           * the calculation builder's toolbar.
           */
          getLabel(): string;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.CalculationBuilderFunction.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getUseDefaultValidation useDefaultValidation}.
           *
           * Defines whether default validation should be used.
           *  Set this property to `false` to provide your own validation algorithm using {@link sap.suite.ui.commons.CalculationBuilderValidationResult}.
           *  If you do not provide your own validation algorithm for this custom function, set this property to `true`,
           * and the function will be validated by the calculation builder.
           *
           * Default value is `false`.
           */
          getUseDefaultValidation(): boolean;
          /**
           * Checks for the provided `sap.suite.ui.commons.CalculationBuilderItem` in the aggregation {@link #getItems
           * items}. and returns its index if found or -1 otherwise.
           */
          indexOfItem(
            /**
             * The item whose index is looked for
             */
            oItem: sap.suite.ui.commons.CalculationBuilderItem
          ): number;
          /**
           * Inserts a item into the aggregation {@link #getItems items}.
           */
          insertItem(
            /**
             * The item to insert; if empty, nothing is inserted
             */
            oItem: sap.suite.ui.commons.CalculationBuilderItem,
            /**
             * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
             * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
             * the last position
             */
            iIndex: number
          ): sap.suite.ui.commons.CalculationBuilderFunction;
          /**
           * Removes all the controls from the aggregation {@link #getItems items}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllItems(): sap.suite.ui.commons.CalculationBuilderItem[];
          /**
           * Removes a item from the aggregation {@link #getItems items}.
           */
          removeItem(
            /**
             * The item to remove or its index or id
             */
            vItem: number | string | sap.suite.ui.commons.CalculationBuilderItem
          ): sap.suite.ui.commons.CalculationBuilderItem;
          /**
           * Sets a new value for property {@link #getDescription description}.
           *
           * Description of the function.
           *  The description is displayed in the functions menu on the calculation builder's toolbar. If no description
           * is specified, it is generated automatically based on the `key` property and the parameters defined in
           * the `items` aggregation.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setDescription(
            /**
             * New value for property `description`
             */
            sDescription: string
          ): sap.suite.ui.commons.CalculationBuilderFunction;
          /**
           * Sets a new value for property {@link #getKey key}.
           *
           * A key associated with the function. This property is mandatory.
           *  The key is displayed in the text editor area of the calculation builder.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setKey(
            /**
             * New value for property `key`
             */
            sKey: string
          ): sap.suite.ui.commons.CalculationBuilderFunction;
          /**
           * Sets a new value for property {@link #getLabel label}.
           *
           * Label for the function.
           *  The label is displayed in the visual editor of the calculation builder and in the functions menu on
           * the calculation builder's toolbar.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setLabel(
            /**
             * New value for property `label`
             */
            sLabel: string
          ): sap.suite.ui.commons.CalculationBuilderFunction;
          /**
           * Sets a new value for property {@link #getUseDefaultValidation useDefaultValidation}.
           *
           * Defines whether default validation should be used.
           *  Set this property to `false` to provide your own validation algorithm using {@link sap.suite.ui.commons.CalculationBuilderValidationResult}.
           *  If you do not provide your own validation algorithm for this custom function, set this property to `true`,
           * and the function will be validated by the calculation builder.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setUseDefaultValidation(
            /**
             * New value for property `useDefaultValidation`
             */
            bUseDefaultValidation: boolean
          ): sap.suite.ui.commons.CalculationBuilderFunction;
        }
        /**
         * @SINCE 1.60.0
         *
         * A variable group is used to organize the variables that the user can insert into the {@link sap.suite.ui.commons.CalculationBuilder}
         * expression.
         */
        class CalculationBuilderGroup extends sap.ui.core.Control {
          /**
           * Constructor for a new calculation builder variable group.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: CalculationBuilderGroupOpts
          );

          /**
           * Attaches event handler `fnFunction` to the {@link #event:setSelection setSelection} event of this `sap.suite.ui.commons.CalculationBuilderGroup`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.CalculationBuilderGroup` itself.
           *
           * This event is fired when the user selects the variable group.
           */
          attachSetSelection(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.CalculationBuilderGroup`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.CalculationBuilderGroup;
          /**
           * Destroys the customView in the aggregation {@link #getCustomView customView}.
           */
          destroyCustomView(): sap.suite.ui.commons.CalculationBuilderGroup;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:setSelection setSelection} event of this `sap.suite.ui.commons.CalculationBuilderGroup`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachSetSelection(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.CalculationBuilderGroup;
          /**
           * Creates a new subclass of class sap.suite.ui.commons.CalculationBuilderGroup with name `sClassName` and
           * enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:setSelection setSelection} to attached listeners.
           */
          fireSetSelection(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              key?: string;
            }
          ): sap.suite.ui.commons.CalculationBuilderGroup;
          /**
           * Gets content of aggregation {@link #getCustomView customView}.
           *
           * Holds the variables included in the variable group.
           */
          getCustomView(): sap.ui.core.Control;
          /**
           * Gets current value of property {@link #getDescription description}.
           *
           * Additional description for the variable group.
           */
          getDescription(): string;
          /**
           * Gets current value of property {@link #getIcon icon}.
           *
           * Icon for the variable group. This icon is displayed in the Variables menu.
           */
          getIcon(): string;
          /**
           * Gets current value of property {@link #getKey key}.
           *
           * A key associated with the group. This property is mandatory.
           *  The key is displayed in the text editor area of the calculation builder.
           */
          getKey(): string;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.CalculationBuilderGroup.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getTitle title}.
           *
           * Label for the group.
           *  The label is displayed in the visual editor of the calculation builder and in the variables menu on
           * the calculation builder's toolbar.
           */
          getTitle(): string;
          /**
           * Sets the aggregated {@link #getCustomView customView}.
           */
          setCustomView(
            /**
             * The customView to set
             */
            oCustomView: sap.ui.core.Control
          ): sap.suite.ui.commons.CalculationBuilderGroup;
          /**
           * Sets a new value for property {@link #getDescription description}.
           *
           * Additional description for the variable group.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setDescription(
            /**
             * New value for property `description`
             */
            sDescription: string
          ): sap.suite.ui.commons.CalculationBuilderGroup;
          /**
           * Sets a new value for property {@link #getIcon icon}.
           *
           * Icon for the variable group. This icon is displayed in the Variables menu.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setIcon(
            /**
             * New value for property `icon`
             */
            sIcon: string
          ): sap.suite.ui.commons.CalculationBuilderGroup;
          /**
           * Sets a new value for property {@link #getKey key}.
           *
           * A key associated with the group. This property is mandatory.
           *  The key is displayed in the text editor area of the calculation builder.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setKey(
            /**
             * New value for property `key`
             */
            sKey: string
          ): sap.suite.ui.commons.CalculationBuilderGroup;
          /**
           * Sets a new value for property {@link #getTitle title}.
           *
           * Label for the group.
           *  The label is displayed in the visual editor of the calculation builder and in the variables menu on
           * the calculation builder's toolbar.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setTitle(
            /**
             * New value for property `title`
             */
            sTitle: string
          ): sap.suite.ui.commons.CalculationBuilderGroup;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:setSelection setSelection} event of this `sap.suite.ui.commons.CalculationBuilderGroup`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.CalculationBuilderGroup` itself.
           *
           * This event is fired when the user selects the variable group.
           */
          attachSetSelection(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.CalculationBuilderGroup`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.CalculationBuilderGroup;
        }
        /**
         * @SINCE 1.56.0
         *
         * Each of the items used as building blocks to create an arithmetic expression in the calculation builder.
         */
        class CalculationBuilderItem extends sap.ui.core.Control {
          /**
           * Constructor for a new item used in the expression.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: CalculationBuilderItemOpts
          );

          /**
           * Creates a new subclass of class sap.suite.ui.commons.CalculationBuilderItem with name `sClassName` and
           * enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets current value of property {@link #getKey key}.
           *
           * A key associated with the item. This property is mandatory.
           *  The key is displayed in the text editor area of the calculation builder.
           */
          getKey(): string;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.CalculationBuilderItem.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Returns the type of the item.
           *  Available item types are defined in {@link sap.suite.ui.commons.CalculationBuilderItemType}.
           */
          getType(): String;
          /**
           * Checks if there is a variable object related to this item.
           */
          getVariable(): sap.suite.ui.commons.CalculationBuilderVariable;
          /**
           * Checks if the item is expandable.
           */
          isExpandable(): boolean;
          /**
           * Sets a new value for property {@link #getKey key}.
           *
           * A key associated with the item. This property is mandatory.
           *  The key is displayed in the text editor area of the calculation builder.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setKey(
            /**
             * New value for property `key`
             */
            sKey: string
          ): sap.suite.ui.commons.CalculationBuilderItem;
        }
        /**
         * @SINCE 1.56.0
         *
         * This control can be used for creating your own validation algorithm for custom functions.
         *  Custom functions can be defined using {@link sap.suite.ui.commons.CalculationBuilderFunction}.
         */
        class CalculationBuilderValidationResult extends sap.ui.base.Object {
          /**
           * Constructor for a new validation result.
           */
          constructor(
            /**
             * A function to be called on the custom function.
             */
            callback: Function
          );

          /**
           * Creates a new subclass of class sap.suite.ui.commons.CalculationBuilderValidationResult with name `sClassName`
           * and enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.CalculationBuilderValidationResult.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
        }
        /**
         * @SINCE 1.56.0
         *
         * A variable used in the expression entered into the calculation builder.
         */
        class CalculationBuilderVariable extends sap.ui.core.Control {
          /**
           * Constructor for a new variable.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: CalculationBuilderVariableOpts
          );

          /**
           * Adds some Item to the aggregation {@link #getItems items}.
           */
          addItem(
            /**
             * The Item to add; if empty, nothing is inserted
             */
            oItem: sap.suite.ui.commons.CalculationBuilderItem
          ): sap.suite.ui.commons.CalculationBuilderVariable;
          /**
           * Destroys all the items in the aggregation {@link #getItems items}.
           */
          destroyItems(): sap.suite.ui.commons.CalculationBuilderVariable;
          /**
           * Creates a new subclass of class sap.suite.ui.commons.CalculationBuilderVariable with name `sClassName`
           * and enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets current value of property {@link #getGroup group}.
           *
           * The group where this variable belongs.
           *  To define variable groups, use {@link sap.suite.ui.commons.CalculationBuilderGroup}.
           */
          getGroup(): string;
          /**
           * Gets content of aggregation {@link #getItems items}.
           *
           * Holds the items included in the variable.
           */
          getItems(): sap.suite.ui.commons.CalculationBuilderItem[];
          /**
           * Gets current value of property {@link #getKey key}.
           *
           * A key associated with the variable. This property is mandatory.
           *  The key is displayed in the text editor area of the calculation builder.
           */
          getKey(): string;
          /**
           * Gets current value of property {@link #getLabel label}.
           *
           * Label for the variable.
           *  The label is displayed in the visual editor of the calculation builder and in the variables menu on
           * the calculation builder's toolbar.
           */
          getLabel(): string;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.CalculationBuilderVariable.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Checks for the provided `sap.suite.ui.commons.CalculationBuilderItem` in the aggregation {@link #getItems
           * items}. and returns its index if found or -1 otherwise.
           */
          indexOfItem(
            /**
             * The Item whose index is looked for
             */
            oItem: sap.suite.ui.commons.CalculationBuilderItem
          ): number;
          /**
           * Inserts a Item into the aggregation {@link #getItems items}.
           */
          insertItem(
            /**
             * The Item to insert; if empty, nothing is inserted
             */
            oItem: sap.suite.ui.commons.CalculationBuilderItem,
            /**
             * The `0`-based index the Item should be inserted at; for a negative value of `iIndex`, the Item is inserted
             * at position 0; for a value greater than the current size of the aggregation, the Item is inserted at
             * the last position
             */
            iIndex: number
          ): sap.suite.ui.commons.CalculationBuilderVariable;
          /**
           * Removes all the controls from the aggregation {@link #getItems items}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllItems(): sap.suite.ui.commons.CalculationBuilderItem[];
          /**
           * Removes a Item from the aggregation {@link #getItems items}.
           */
          removeItem(
            /**
             * The Item to remove or its index or id
             */
            vItem: number | string | sap.suite.ui.commons.CalculationBuilderItem
          ): sap.suite.ui.commons.CalculationBuilderItem;
          /**
           * Sets a new value for property {@link #getGroup group}.
           *
           * The group where this variable belongs.
           *  To define variable groups, use {@link sap.suite.ui.commons.CalculationBuilderGroup}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setGroup(
            /**
             * New value for property `group`
             */
            sGroup: string
          ): sap.suite.ui.commons.CalculationBuilderVariable;
          /**
           * Sets a new value for property {@link #getKey key}.
           *
           * A key associated with the variable. This property is mandatory.
           *  The key is displayed in the text editor area of the calculation builder.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setKey(
            /**
             * New value for property `key`
             */
            sKey: string
          ): sap.suite.ui.commons.CalculationBuilderVariable;
          /**
           * Sets a new value for property {@link #getLabel label}.
           *
           * Label for the variable.
           *  The label is displayed in the visual editor of the calculation builder and in the variables menu on
           * the calculation builder's toolbar.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setLabel(
            /**
             * New value for property `label`
             */
            sLabel: string
          ): sap.suite.ui.commons.CalculationBuilderVariable;
        }
        /**
         * Provides a toolbar with generic functions for tables and charts based on the VizFrame control like zoom,
         * display in fullscreen mode, toggle the legend, switch between chart types, and changes of the chart dimension.
         * The controls of the content aggregation are positioned below the toolbar. Additional functions can be
         * added to the toolbar with the customIcons aggregation.
         */
        class ChartContainer extends sap.ui.core.Control {
          /**
           * Constructor for a new ChartContainer.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: ChartContainerOpts
          );

          /**
           * Adds some content to the aggregation {@link #getContent content}.
           */
          addContent(
            /**
             * The content to add; if empty, nothing is inserted
             */
            oContent: sap.suite.ui.commons.ChartContainerContent
          ): sap.suite.ui.commons.ChartContainer;
          /**
           * Adds some customIcon to the aggregation {@link #getCustomIcons customIcons}.
           */
          addCustomIcon(
            /**
             * The customIcon to add; if empty, nothing is inserted
             */
            oCustomIcon: sap.ui.core.Icon
          ): sap.suite.ui.commons.ChartContainer;
          /**
           * Adds some dimensionSelector to the aggregation {@link #getDimensionSelectors dimensionSelectors}.
           */
          addDimensionSelector(
            /**
             * The dimensionSelector to add; if empty, nothing is inserted
             */
            oDimensionSelector: sap.ui.core.Control
          ): sap.suite.ui.commons.ChartContainer;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:contentChange contentChange} event of this `sap.suite.ui.commons.ChartContainer`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.ChartContainer` itself.
           *
           * Event fired when a user changes the displayed content.
           */
          attachContentChange(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ChartContainer`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.ChartContainer;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:customZoomInPress customZoomInPress} event of
           * this `sap.suite.ui.commons.ChartContainer`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.ChartContainer` itself.
           *
           * Custom event for zoom in.
           */
          attachCustomZoomInPress(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ChartContainer`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.ChartContainer;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:customZoomOutPress customZoomOutPress} event
           * of this `sap.suite.ui.commons.ChartContainer`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.ChartContainer` itself.
           *
           * Custom event for zoom out.
           */
          attachCustomZoomOutPress(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ChartContainer`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.ChartContainer;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:personalizationPress personalizationPress} event
           * of this `sap.suite.ui.commons.ChartContainer`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.ChartContainer` itself.
           *
           * Event fired when a user clicks on the personalization icon.
           */
          attachPersonalizationPress(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ChartContainer`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.ChartContainer;
          /**
           * Destroys all the content in the aggregation {@link #getContent content}.
           */
          destroyContent(): sap.suite.ui.commons.ChartContainer;
          /**
           * Destroys all the customIcons in the aggregation {@link #getCustomIcons customIcons}.
           */
          destroyCustomIcons(): sap.suite.ui.commons.ChartContainer;
          /**
           * Destroys all the dimensionSelectors in the aggregation {@link #getDimensionSelectors dimensionSelectors}.
           */
          destroyDimensionSelectors(): sap.suite.ui.commons.ChartContainer;
          /**
           * Destroys the toolbar in the aggregation {@link #getToolbar toolbar}.
           */
          destroyToolbar(): sap.suite.ui.commons.ChartContainer;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:contentChange contentChange} event of this
           * `sap.suite.ui.commons.ChartContainer`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachContentChange(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.ChartContainer;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:customZoomInPress customZoomInPress} event
           * of this `sap.suite.ui.commons.ChartContainer`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachCustomZoomInPress(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.ChartContainer;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:customZoomOutPress customZoomOutPress} event
           * of this `sap.suite.ui.commons.ChartContainer`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachCustomZoomOutPress(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.ChartContainer;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:personalizationPress personalizationPress}
           * event of this `sap.suite.ui.commons.ChartContainer`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachPersonalizationPress(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.ChartContainer;
          /**
           * Creates a new subclass of class sap.suite.ui.commons.ChartContainer with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:contentChange contentChange} to attached listeners.
           */
          fireContentChange(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * Id of the selected item.
               */
              selectedItemId?: string;
            }
          ): sap.suite.ui.commons.ChartContainer;
          /**
           * Fires event {@link #event:customZoomInPress customZoomInPress} to attached listeners.
           */
          fireCustomZoomInPress(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.suite.ui.commons.ChartContainer;
          /**
           * Fires event {@link #event:customZoomOutPress customZoomOutPress} to attached listeners.
           */
          fireCustomZoomOutPress(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.suite.ui.commons.ChartContainer;
          /**
           * Fires event {@link #event:personalizationPress personalizationPress} to attached listeners.
           */
          firePersonalizationPress(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.suite.ui.commons.ChartContainer;
          /**
           * Gets current value of property {@link #getAutoAdjustHeight autoAdjustHeight}.
           *
           * Determine whether to stretch the chart height to the maximum possible height of ChartContainer's parent
           * container. As a prerequisite, the parent container needs to have a fixed value height or be able to determine
           * height from its parent.
           *
           * Default value is `false`.
           */
          getAutoAdjustHeight(): boolean;
          /**
           * Gets content of aggregation {@link #getContent content}.
           *
           * ChartToolBar Content aggregation. Only sap.viz.ui5.controls.VizFrame, sap.m.Table and sap.ui.table.Table
           * can be embedded. If not specified explicitly, the rendering order of the charts is determined by the
           * sequence of contents provided by the application via this aggregation. This means, per default the first
           * chart of the aggregation will be rendered within the container.
           */
          getContent(): sap.suite.ui.commons.ChartContainerContent[];
          /**
           * Gets content of aggregation {@link #getCustomIcons customIcons}.
           *
           * This aggregation contains the custom icons that should be displayed additionally on the toolbar. It is
           * not guaranteed that the same instance of the sap.ui.core.Icon control will be used within the toolbar,
           * but the toolbar will contain a sap.m.OverflowToolbarButton with an icon property equal to the src property
           * of the sap.ui.core.Icon provided in the aggregation. If a press event is triggered by the icon displayed
           * on the toolbar, then the press handler of the original sap.ui.core.Icon control is used. The instance
           * of the control, that has triggered the press event, can be accessed using the "controlReference" parameter
           * of the event object.
           */
          getCustomIcons(): sap.ui.core.Icon[];
          /**
           * Gets content of aggregation {@link #getDimensionSelectors dimensionSelectors}.
           *
           * Dimension Selects.
           */
          getDimensionSelectors(): sap.ui.core.Control[];
          /**
           * Gets current value of property {@link #getEnableScroll enableScroll}.
           *
           * If set to `true`, the Container control has its own scroll bar, with the scrolling taking place within
           * the Container control itself.
           *
           * Default value is `true`.
           */
          getEnableScroll(): boolean;
          /**
           * Gets current value of property {@link #getFullScreen fullScreen}.
           *
           * Display the chart and the toolbar in full screen or normal mode.
           *
           * Default value is `false`.
           */
          getFullScreen(): boolean;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.ChartContainer.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Returns the current instance of the delegate to other controls.
           */
          getScrollDelegate(): sap.ui.core.delegate.ScrollEnablement;
          /**
           * Returns the currently selected content control.
           */
          getSelectedContent(): sap.ui.core.Control;
          /**
           * @deprecated (since 1.32.0) - Obsolete property as sap.m.Toolbar is replaced by sap.m.OverflowToolbar.
           *
           * Gets current value of property {@link #getSelectorGroupLabel selectorGroupLabel}.
           *
           * Custom Label for Selectors Group.
           */
          getSelectorGroupLabel(): string;
          /**
           * Gets current value of property {@link #getShowFullScreen showFullScreen}.
           *
           * Set to true to display the full screen icon. Set to false to hide it.
           *
           * Default value is `false`.
           */
          getShowFullScreen(): boolean;
          /**
           * Gets current value of property {@link #getShowLegend showLegend}.
           *
           * Set to true to display the charts' legends. Set to false to hide them. See also showLegendButton.
           *
           * Default value is `true`.
           */
          getShowLegend(): boolean;
          /**
           * Gets current value of property {@link #getShowLegendButton showLegendButton}.
           *
           * Set to true or false to display or hide a button for controlling the visbility of the chart's legend.
           * Please be aware that setting this property to true indirectly is setting showLegend to false. If you
           * need to hide the button but to show the legend, you need to set showLegend at a later point in time (onBeforeRendering).
           * The execution order of the combined properties is not guaranteed by the control.
           *
           * Default value is `true`.
           */
          getShowLegendButton(): boolean;
          /**
           * Gets current value of property {@link #getShowPersonalization showPersonalization}.
           *
           * Set to true to display the personalization icon. Set to false to hide it.
           *
           * Default value is `false`.
           */
          getShowPersonalization(): boolean;
          /**
           * @SINCE 1.48.0
           *
           * Gets current value of property {@link #getShowSelectionDetails showSelectionDetails}.
           *
           * Set to true to display the 'Details' button that opens a popup dialog with details about the selected
           * data from the VizFrame based chart.
           *
           * Default value is `false`.
           */
          getShowSelectionDetails(): boolean;
          /**
           * Gets current value of property {@link #getShowZoom showZoom}.
           *
           * Set to true to display zoom icons. Set to false to hide them.
           *
           * Default value is `true`.
           */
          getShowZoom(): boolean;
          /**
           * Gets current value of property {@link #getTitle title}.
           *
           * String shown if there are no dimensions to display.
           *
           * Default value is `empty string`.
           */
          getTitle(): string;
          /**
           * Gets content of aggregation {@link #getToolbar toolbar}.
           *
           * Overflow ToolBar. If an external toolbar is used, it will be integrated with the embedded toolbar via
           * a placeholder. This placeholder is mandatory, and it needs to be of type 'sap.suite.ui.commons.ChartContainerToolbarPlaceholder'.
           */
          getToolbar(): sap.m.OverflowToolbar;
          /**
           * @SINCE 1.58.0
           *
           * Gets current value of property {@link #getWrapLabels wrapLabels}.
           *
           * Set to true to wrap text labels in the dialog that opens when the user clicks or taps the 'Details' button.
           *
           * Default value is `false`.
           */
          getWrapLabels(): boolean;
          /**
           * Checks for the provided `sap.suite.ui.commons.ChartContainerContent` in the aggregation {@link #getContent
           * content}. and returns its index if found or -1 otherwise.
           */
          indexOfContent(
            /**
             * The content whose index is looked for
             */
            oContent: sap.suite.ui.commons.ChartContainerContent
          ): number;
          /**
           * Checks for the provided `sap.ui.core.Icon` in the aggregation {@link #getCustomIcons customIcons}. and
           * returns its index if found or -1 otherwise.
           */
          indexOfCustomIcon(
            /**
             * The customIcon whose index is looked for
             */
            oCustomIcon: sap.ui.core.Icon
          ): number;
          /**
           * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getDimensionSelectors dimensionSelectors}.
           * and returns its index if found or -1 otherwise.
           */
          indexOfDimensionSelector(
            /**
             * The dimensionSelector whose index is looked for
             */
            oDimensionSelector: sap.ui.core.Control
          ): number;
          /**
           * Inserts a content into the aggregation {@link #getContent content}.
           */
          insertContent(
            /**
             * The content to insert; if empty, nothing is inserted
             */
            oContent: sap.suite.ui.commons.ChartContainerContent,
            /**
             * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
             * is inserted at position 0; for a value greater than the current size of the aggregation, the content
             * is inserted at the last position
             */
            iIndex: number
          ): sap.suite.ui.commons.ChartContainer;
          /**
           * Inserts a customIcon into the aggregation {@link #getCustomIcons customIcons}.
           */
          insertCustomIcon(
            /**
             * The customIcon to insert; if empty, nothing is inserted
             */
            oCustomIcon: sap.ui.core.Icon,
            /**
             * The `0`-based index the customIcon should be inserted at; for a negative value of `iIndex`, the customIcon
             * is inserted at position 0; for a value greater than the current size of the aggregation, the customIcon
             * is inserted at the last position
             */
            iIndex: number
          ): sap.suite.ui.commons.ChartContainer;
          /**
           * Inserts a dimensionSelector into the aggregation {@link #getDimensionSelectors dimensionSelectors}.
           */
          insertDimensionSelector(
            /**
             * The dimensionSelector to insert; if empty, nothing is inserted
             */
            oDimensionSelector: sap.ui.core.Control,
            /**
             * The `0`-based index the dimensionSelector should be inserted at; for a negative value of `iIndex`, the
             * dimensionSelector is inserted at position 0; for a value greater than the current size of the aggregation,
             * the dimensionSelector is inserted at the last position
             */
            iIndex: number
          ): sap.suite.ui.commons.ChartContainer;
          /**
           * Removes all the controls from the aggregation {@link #getContent content}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllContent(): sap.suite.ui.commons.ChartContainerContent[];
          /**
           * Removes all the controls from the aggregation {@link #getCustomIcons customIcons}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllCustomIcons(): sap.ui.core.Icon[];
          /**
           * Removes all the controls from the aggregation {@link #getDimensionSelectors dimensionSelectors}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllDimensionSelectors(): sap.ui.core.Control[];
          /**
           * Removes a content from the aggregation {@link #getContent content}.
           */
          removeContent(
            /**
             * The content to remove or its index or id
             */
            vContent:
              | number
              | string
              | sap.suite.ui.commons.ChartContainerContent
          ): sap.suite.ui.commons.ChartContainerContent;
          /**
           * Removes a customIcon from the aggregation {@link #getCustomIcons customIcons}.
           */
          removeCustomIcon(
            /**
             * The customIcon to remove or its index or id
             */
            vCustomIcon: number | string | sap.ui.core.Icon
          ): sap.ui.core.Icon;
          /**
           * Removes a dimensionSelector from the aggregation {@link #getDimensionSelectors dimensionSelectors}.
           */
          removeDimensionSelector(
            /**
             * The dimensionSelector to remove or its index or id
             */
            vDimensionSelector: number | string | sap.ui.core.Control
          ): sap.ui.core.Control;
          /**
           * Sets a new value for property {@link #getAutoAdjustHeight autoAdjustHeight}.
           *
           * Determine whether to stretch the chart height to the maximum possible height of ChartContainer's parent
           * container. As a prerequisite, the parent container needs to have a fixed value height or be able to determine
           * height from its parent.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setAutoAdjustHeight(
            /**
             * New value for property `autoAdjustHeight`
             */
            bAutoAdjustHeight: boolean
          ): sap.suite.ui.commons.ChartContainer;
          /**
           * Sets a new value for property {@link #getEnableScroll enableScroll}.
           *
           * If set to `true`, the Container control has its own scroll bar, with the scrolling taking place within
           * the Container control itself.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setEnableScroll(
            /**
             * New value for property `enableScroll`
             */
            bEnableScroll: boolean
          ): sap.suite.ui.commons.ChartContainer;
          /**
           * Sets a new value for property {@link #getFullScreen fullScreen}.
           *
           * Display the chart and the toolbar in full screen or normal mode.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setFullScreen(
            /**
             * New value for property `fullScreen`
             */
            bFullScreen: boolean
          ): sap.suite.ui.commons.ChartContainer;
          /**
           * Sets a new value for property {@link #getShowFullScreen showFullScreen}.
           *
           * Set to true to display the full screen icon. Set to false to hide it.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setShowFullScreen(
            /**
             * New value for property `showFullScreen`
             */
            bShowFullScreen: boolean
          ): sap.suite.ui.commons.ChartContainer;
          /**
           * Sets a new value for property {@link #getShowLegend showLegend}.
           *
           * Set to true to display the charts' legends. Set to false to hide them. See also showLegendButton.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setShowLegend(
            /**
             * New value for property `showLegend`
             */
            bShowLegend: boolean
          ): sap.suite.ui.commons.ChartContainer;
          /**
           * Sets a new value for property {@link #getShowLegendButton showLegendButton}.
           *
           * Set to true or false to display or hide a button for controlling the visbility of the chart's legend.
           * Please be aware that setting this property to true indirectly is setting showLegend to false. If you
           * need to hide the button but to show the legend, you need to set showLegend at a later point in time (onBeforeRendering).
           * The execution order of the combined properties is not guaranteed by the control.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setShowLegendButton(
            /**
             * New value for property `showLegendButton`
             */
            bShowLegendButton: boolean
          ): sap.suite.ui.commons.ChartContainer;
          /**
           * Sets a new value for property {@link #getShowPersonalization showPersonalization}.
           *
           * Set to true to display the personalization icon. Set to false to hide it.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setShowPersonalization(
            /**
             * New value for property `showPersonalization`
             */
            bShowPersonalization: boolean
          ): sap.suite.ui.commons.ChartContainer;
          /**
           * @SINCE 1.48.0
           *
           * Sets a new value for property {@link #getShowSelectionDetails showSelectionDetails}.
           *
           * Set to true to display the 'Details' button that opens a popup dialog with details about the selected
           * data from the VizFrame based chart.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setShowSelectionDetails(
            /**
             * New value for property `showSelectionDetails`
             */
            bShowSelectionDetails: boolean
          ): sap.suite.ui.commons.ChartContainer;
          /**
           * Sets a new value for property {@link #getShowZoom showZoom}.
           *
           * Set to true to display zoom icons. Set to false to hide them.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setShowZoom(
            /**
             * New value for property `showZoom`
             */
            bShowZoom: boolean
          ): sap.suite.ui.commons.ChartContainer;
          /**
           * Sets a new value for property {@link #getTitle title}.
           *
           * String shown if there are no dimensions to display.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `empty string`.
           */
          setTitle(
            /**
             * New value for property `title`
             */
            sTitle: string
          ): sap.suite.ui.commons.ChartContainer;
          /**
           * Sets the aggregated {@link #getToolbar toolbar}.
           */
          setToolbar(
            /**
             * The toolbar to set
             */
            oToolbar: sap.m.OverflowToolbar
          ): sap.suite.ui.commons.ChartContainer;
          /**
           * @SINCE 1.58.0
           *
           * Sets a new value for property {@link #getWrapLabels wrapLabels}.
           *
           * Set to true to wrap text labels in the dialog that opens when the user clicks or taps the 'Details' button.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setWrapLabels(
            /**
             * New value for property `wrapLabels`
             */
            bWrapLabels: boolean
          ): sap.suite.ui.commons.ChartContainer;
          /**
           * Switches the currently viewed content (triggers re-rendering).
           */
          switchChart(
            /**
             * The new content (Chart or Table) to be displayed
             */
            chart: sap.ui.core.Control
          ): void;
          /**
           * Updates ChartContainer and re-renders all its contents.
           */
          updateChartContainer(): sap.suite.ui.commons.ChartContainer;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:contentChange contentChange} event of this `sap.suite.ui.commons.ChartContainer`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.ChartContainer` itself.
           *
           * Event fired when a user changes the displayed content.
           */
          attachContentChange(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ChartContainer`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.ChartContainer;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:customZoomInPress customZoomInPress} event of
           * this `sap.suite.ui.commons.ChartContainer`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.ChartContainer` itself.
           *
           * Custom event for zoom in.
           */
          attachCustomZoomInPress(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ChartContainer`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.ChartContainer;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:customZoomOutPress customZoomOutPress} event
           * of this `sap.suite.ui.commons.ChartContainer`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.ChartContainer` itself.
           *
           * Custom event for zoom out.
           */
          attachCustomZoomOutPress(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ChartContainer`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.ChartContainer;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:personalizationPress personalizationPress} event
           * of this `sap.suite.ui.commons.ChartContainer`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.ChartContainer` itself.
           *
           * Event fired when a user clicks on the personalization icon.
           */
          attachPersonalizationPress(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ChartContainer`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.ChartContainer;
        }
        /**
         * Content aggregation for ChartContainer.
         */
        class ChartContainerContent extends sap.ui.core.Control {
          /**
           * Constructor for a new ChartContainerContent.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: ChartContainerContentOpts
          );

          /**
           * Destroys the content in the aggregation {@link #getContent content}.
           */
          destroyContent(): sap.suite.ui.commons.ChartContainerContent;
          /**
           * Creates a new subclass of class sap.suite.ui.commons.ChartContainerContent with name `sClassName` and
           * enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets content of aggregation {@link #getContent content}.
           *
           * Chart or Table as content of the ChartToolBar. Supported Types: sap.viz.ui5.controls.VizFrame, sap.m.Table,
           * sap.ui.table.Table
           */
          getContent(): sap.ui.core.Control;
          /**
           * Gets current value of property {@link #getIcon icon}.
           *
           * Icon of the Chart.
           */
          getIcon(): string;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.ChartContainerContent.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * @SINCE 1.48
           *
           * Getter for the Selection Details facade.
           */
          getSelectionDetails(): sap.m.SelectionDetailsFacade;
          /**
           * Gets current value of property {@link #getTitle title}.
           *
           * Title of the Chart/Table
           */
          getTitle(): string;
          /**
           * Sets the aggregated {@link #getContent content}.
           */
          setContent(
            /**
             * The content to set
             */
            oContent: sap.ui.core.Control
          ): sap.suite.ui.commons.ChartContainerContent;
          /**
           * Sets a new value for property {@link #getIcon icon}.
           *
           * Icon of the Chart.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setIcon(
            /**
             * New value for property `icon`
             */
            sIcon: string
          ): sap.suite.ui.commons.ChartContainerContent;
          /**
           * Sets a new value for property {@link #getTitle title}.
           *
           * Title of the Chart/Table
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setTitle(
            /**
             * New value for property `title`
             */
            sTitle: string
          ): sap.suite.ui.commons.ChartContainerContent;
        }
        /**
         * Provides a placeholder for the embedded chart container toolbar.
         */
        class ChartContainerToolbarPlaceholder extends sap.ui.core.Control {
          /**
           * Constructor for a new ChartContainerToolbarPlaceholder.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           *
           * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.core.Control#constructor
           * sap.ui.core.Control} can be used.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: ChartContainerToolbarPlaceholderOpts
          );

          /**
           * Creates a new subclass of class sap.suite.ui.commons.ChartContainerToolbarPlaceholder with name `sClassName`
           * and enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.ChartContainerToolbarPlaceholder.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
        }
        /**
         * @deprecated (since 1.25) - This control has been deprecated in favor of new sap.suite.ui.commons.GenericTile.
         *
         * This control is the implementation of the InfoTile to show a comparison or bullet chart.
         */
        class ChartTile extends sap.suite.ui.commons.InfoTile {
          /**
           * Constructor for a new ChartTile.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: ChartTileOpts
          );

          /**
           * Creates a new subclass of class sap.suite.ui.commons.ChartTile with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.InfoTile.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.ChartTile.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getUnit unit}.
           *
           * The percent sign, the currency symbol, or the unit of measure.
           */
          getUnit(): string;
          /**
           * Sets a new value for property {@link #getUnit unit}.
           *
           * The percent sign, the currency symbol, or the unit of measure.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setUnit(
            /**
             * New value for property `unit`
             */
            sUnit: string
          ): sap.suite.ui.commons.ChartTile;
        }
        /**
         * @deprecated (since 1.34) - this control is a mere wrapper for sap.suite.ui.microchart.ColumnMicroChartData.
         *
         * Column data holder.
         */
        class ColumnData extends sap.suite.ui.microchart.ColumnMicroChartData {
          /**
           * Constructor for a new ColumnData.
           */
          constructor(
            /**
             * ID for the new control, automatically generated if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: ColumnDataOpts
          );

          /**
           * Creates a new subclass of class sap.suite.ui.commons.ColumnData with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.microchart.ColumnMicroChartData.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.ColumnData.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
        }
        /**
         * @deprecated (since 1.34) - this control is a mere wrapper for sap.suite.ui.microchart.ColumnMicroChart.
         *
         * This control shows a column chart.
         */
        class ColumnMicroChart extends sap.suite.ui.microchart
          .ColumnMicroChart {
          /**
           * Constructor for a new ColumnMicroChart.
           */
          constructor(
            /**
             * ID for the new control, automatically generated if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: ColumnMicroChartOpts
          );

          /**
           * Creates a new subclass of class sap.suite.ui.commons.ColumnMicroChart with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.microchart.ColumnMicroChart.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.ColumnMicroChart.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
        }
        /**
         * @deprecated (since 1.34) - this control is a mere wrapper for sap.suite.ui.microchart.ColumnMicroChartLabel.
         *
         * This element contains data for a label in ColumnMicroChart control.
         */
        class ColumnMicroChartLabel extends sap.suite.ui.microchart
          .ColumnMicroChartLabel {
          /**
           * Constructor for a new ColumnMicroChartLabel.
           */
          constructor(
            /**
             * ID for the new control, automatically generated if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: ColumnMicroChartLabelOpts
          );

          /**
           * Creates a new subclass of class sap.suite.ui.commons.ColumnMicroChartLabel with name `sClassName` and
           * enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.microchart.ColumnMicroChartLabel.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.ColumnMicroChartLabel.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
        }
        /**
         * @deprecated (since 1.34) - this control is a mere wrapper for sap.suite.ui.microchart.ComparisonMicroChart.
         *
         * This control shows a comparison chart.
         */
        class ComparisonChart extends sap.suite.ui.microchart
          .ComparisonMicroChart {
          /**
           * Constructor for a new ComparisonChart.
           */
          constructor(
            /**
             * ID for the new control, automatically generated if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: ComparisonChartOpts
          );

          /**
           * Creates a new subclass of class sap.suite.ui.commons.ComparisonChart with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.microchart.ComparisonMicroChart.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.ComparisonChart.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
        }
        /**
         * @deprecated (since 1.34) - this control is a mere wrapper for sap.suite.ui.microchart.ComparisonMicroChartData.
         *
         * Comparison tile value holder.
         */
        class ComparisonData extends sap.suite.ui.microchart
          .ComparisonMicroChartData {
          /**
           * Constructor for a new ComparisonData.
           */
          constructor(
            /**
             * ID for the new control, automatically generated if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: ComparisonDataOpts
          );

          /**
           * Creates a new subclass of class sap.suite.ui.commons.ComparisonData with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.microchart.ComparisonMicroChartData.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.ComparisonData.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
        }
        /**
         * @deprecated (since 1.34) - Deprecated. Not Fiori.
         *
         * The DateRangeScroller provides a method to scroll through a series of time periods, each of which is
         * represented by a starting date and an ending date, known as the date range. The user may scroll to the
         * previous or next date range. Several predefined ranges are supported such as day, week, work week, month,
         * and year.
         */
        class DateRangeScroller extends sap.ui.core.Control {
          /**
           * Constructor for a new DateRangeScroller.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: DateRangeScrollerOpts
          );

          /**
           * Adds some ariaDescribedBy into the association {@link #getAriaDescribedBy ariaDescribedBy}.
           */
          addAriaDescribedBy(
            /**
             * The ariaDescribedBy to add; if empty, nothing is inserted
             */
            vAriaDescribedBy: sap.ui.core.ID | sap.ui.core.Control
          ): sap.suite.ui.commons.DateRangeScroller;
          /**
           * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
           */
          addAriaLabelledBy(
            /**
             * The ariaLabelledBy to add; if empty, nothing is inserted
             */
            vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control
          ): sap.suite.ui.commons.DateRangeScroller;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.suite.ui.commons.DateRangeScroller`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.DateRangeScroller` itself.
           *
           * This event is fired whenever the date range is changed.
           */
          attachChange(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.DateRangeScroller`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.DateRangeScroller;
          /**
           * Decrement the date range by a time period increment according to the the date range type and fire the
           * dateChange event.
           */
          decrementDateRange(): sap.suite.ui.commons.DateRangeScroller;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.suite.ui.commons.DateRangeScroller`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachChange(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.DateRangeScroller;
          /**
           * Creates a new subclass of class sap.suite.ui.commons.DateRangeScroller with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:change change} to attached listeners.
           */
          fireChange(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * Object containing startDate and endDate Date properties signifying the start and ending dates of the
               * currently selected range.
               */
              dateRange?: any;
            }
          ): sap.suite.ui.commons.DateRangeScroller;
          /**
           * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaDescribedBy
           * ariaDescribedBy}.
           */
          getAriaDescribedBy(): sap.ui.core.ID[];
          /**
           * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
           * ariaLabelledBy}.
           */
          getAriaLabelledBy(): sap.ui.core.ID[];
          /**
           * Returns an object containing startDate and endDate set to the current start and end Date objects.
           */
          getDateRange(): Object;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.DateRangeScroller.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Increment the date range by a time period increment according to the the date range type and fire the
           * dateChange event.
           */
          incrementDateRange(): sap.suite.ui.commons.DateRangeScroller;
          /**
           * Removes all the controls in the association named {@link #getAriaDescribedBy ariaDescribedBy}.
           */
          removeAllAriaDescribedBy(): sap.ui.core.ID[];
          /**
           * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
           */
          removeAllAriaLabelledBy(): sap.ui.core.ID[];
          /**
           * Removes an ariaDescribedBy from the association named {@link #getAriaDescribedBy ariaDescribedBy}.
           */
          removeAriaDescribedBy(
            /**
             * The ariaDescribedBy to be removed or its index or ID
             */
            vAriaDescribedBy: number | sap.ui.core.ID | sap.ui.core.Control
          ): sap.ui.core.ID;
          /**
           * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
           */
          removeAriaLabelledBy(
            /**
             * The ariaLabelledBy to be removed or its index or ID
             */
            vAriaLabelledBy: number | sap.ui.core.ID | sap.ui.core.Control
          ): sap.ui.core.ID;
          /**
           * Setter for dateFormat which is used for formating the dates If passed object is null or is of incorrect
           * type, control's default formatting will be used.
           */
          setDateFormat(
            /**
             * Date format which should be used
             */
            oDateFormat: sap.ui.core.format.DateFormat
          ): void;
          /**
           * Set a custom date range beginning with the specified start date that increments/decrements `iDuration`
           * days at a time.
           */
          setDateRangeCustom(
            /**
             * The initial date for the custom range.
             */
            dInitialDate: Date,
            /**
             * The number of days in the custom range, including the start date.
             */
            iDuration?: number
          ): sap.suite.ui.commons.DateRangeScroller;
          /**
           * Set a date range equal to a single day, starting with the given initial date.
           */
          setDateRangeDay(
            /**
             * The initial date.
             */
            dInitialDate: Date
          ): sap.suite.ui.commons.DateRangeScroller;
          /**
           * Set a date range that increments/decrements one calendar month at a time. The month date range begins
           * on the first day of the month (beginning of the day) and ends on the last day of the month (end of the
           * day).
           */
          setDateRangeMonth(
            /**
             * Any date that falls within the desired month.
             */
            dInitialDate: Date
          ): sap.suite.ui.commons.DateRangeScroller;
          /**
           * Set a date range that steps one week at a time. The starting date is set according to the first day of
           * the week (default is Monday) and the initial date. For example, if the first day of the week is set to
           * Tuesday and the initial date is Wednesday, January 9, 2013, then the starting date will be Tuesday, January
           * 8, 2013.
           *
           * The last day of the range is calculated by adding (duration - 1) days to the starting date.
           */
          setDateRangeWeek(
            /**
             * Any date that falls on the desired week. Start/end dates will be adjusted according to the first day
             * of the week.
             */
            dInitialDate: Date,
            /**
             * Settings for the object
             */
            oSettings?: {
              /**
               * The number of days in the range with a minimum of 1 and maximum of 7.
               */
              duration?: number;
              /**
               * The starting day for the range. Valid values are 0-6, with 0=Sunday and 6=Saturday.
               */
              iFirstDayOfWeek?: number;
            }
          ): sap.suite.ui.commons.DateRangeScroller;
          /**
           * Set a date range that increments/decrements one calendar year at a time. The year date range begins on
           * the first day of the year (beginning of the day) and ends on the last day of the year (end of the day).
           */
          setDateRangeYear(
            /**
             * Any date that falls within the desired year.
             */
            dInitialDate: Date
          ): sap.suite.ui.commons.DateRangeScroller;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.suite.ui.commons.DateRangeScroller`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.DateRangeScroller` itself.
           *
           * This event is fired whenever the date range is changed.
           */
          attachChange(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.DateRangeScroller`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.DateRangeScroller;
        }
        /**
         * @deprecated (since 1.34) - Deprecated. Not Fiori.
         *
         * The Date Range Slider provides the user with a Range Slider control that is optimized for use with Dates.
         */
        class DateRangeSlider extends sap.ui.core.Control {
          /**
           * Constructor for a new DateRangeSlider.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: DateRangeSliderOpts
          );

          /**
           * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.suite.ui.commons.DateRangeSlider`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.DateRangeSlider` itself.
           *
           * This event is fired when user changes completes the selection of a new date using a grip. It contains
           * the Date object value of each grip such that the left grip value is held by the value property and the
           * right grip value is held by the value2 property.
           */
          attachChange(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.DateRangeSlider`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.DateRangeSlider;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:liveChange liveChange} event of this `sap.suite.ui.commons.DateRangeSlider`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.DateRangeSlider` itself.
           *
           * This live event is fired as the user slides a grip with the mouse. It contains the Date object value
           * of each grip such that the left grip value is held by the value property and the right grip value is
           * held by the value2 property.
           */
          attachLiveChange(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.DateRangeSlider`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.DateRangeSlider;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.suite.ui.commons.DateRangeSlider`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachChange(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.DateRangeSlider;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:liveChange liveChange} event of this `sap.suite.ui.commons.DateRangeSlider`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachLiveChange(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.DateRangeSlider;
          /**
           * Creates a new subclass of class sap.suite.ui.commons.DateRangeSlider with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:change change} to attached listeners.
           */
          fireChange(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.suite.ui.commons.DateRangeSlider;
          /**
           * Fires event {@link #event:liveChange liveChange} to attached listeners.
           */
          fireLiveChange(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.suite.ui.commons.DateRangeSlider;
          /**
           * Gets current value of property {@link #getEditable editable}.
           *
           * This property switches the enabled state of the control. Using the date range slider interactively requires
           * this property to be true.
           *
           * Default value is `true`.
           */
          getEditable(): boolean;
          /**
           * Gets current value of property {@link #getEnabled enabled}.
           *
           * This property switches the enabled state of the control. Disabled fields have different colors, and can
           * not be focused.
           *
           * Default value is `true`.
           */
          getEnabled(): boolean;
          /**
           * Gets current value of property {@link #getLabels labels}.
           *
           * Labels to be displayed instead of dates.
           */
          getLabels(): string[];
          /**
           * Gets current value of property {@link #getMax max}.
           *
           * Maximum date for the slider.
           */
          getMax(): object;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.DateRangeSlider.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getMin min}.
           *
           * Minimum date for the slider.
           */
          getMin(): object;
          /**
           * Gets current value of property {@link #getPinGrip pinGrip}.
           *
           * Pin the left grip so that user cannot move it with the keyboard or mouse.
           *
           * Default value is `false`.
           */
          getPinGrip(): boolean;
          /**
           * Gets current value of property {@link #getPinGrip2 pinGrip2}.
           *
           * Pin the right grip so that user cannot move it with the keyboard or mouse.
           *
           * Default value is `false`.
           */
          getPinGrip2(): boolean;
          /**
           * Gets current value of property {@link #getShowBubbles showBubbles}.
           *
           * Property to show or hide bubbles. Default is true.
           *
           * Default value is `true`.
           */
          getShowBubbles(): boolean;
          /**
           * Gets current value of property {@link #getSmallStepWidth smallStepWidth}.
           *
           * The grips of the control can only be moved in steps of this width.
           */
          getSmallStepWidth(): number;
          /**
           * Gets current value of property {@link #getStepLabels stepLabels}.
           *
           * Display a date label above each tick.
           *
           * Default value is `false`.
           */
          getStepLabels(): boolean;
          /**
           * Gets current value of property {@link #getTotalUnits totalUnits}.
           *
           * Number of units between ticks.
           */
          getTotalUnits(): number;
          /**
           * Gets current value of property {@link #getValue value}.
           *
           * Date value of the left grip.
           */
          getValue(): object;
          /**
           * Gets current value of property {@link #getValue2 value2}.
           *
           * Date value of the right grip.
           */
          getValue2(): object;
          /**
           * Gets current value of property {@link #getVisible visible}.
           *
           * This property switches the visible state of the control. Invisible date range slider are not rendered.
           *
           * Default value is `true`.
           */
          // @ts-ignore
          getVisible(): boolean;
          /**
           * Gets current value of property {@link #getWidth width}.
           *
           * Width of the horizontal date range slider.
           *
           * Default value is `100%`.
           */
          getWidth(): sap.ui.core.CSSSize;
          /**
           * Setter for dateFormat which is used to format the dates for Labels, bubble texts, and tool tips. If passed
           * object is null or is of incorrect type, _oDateRangeSliderInternal's default formatting will be used.
           */
          setDateFormat(
            /**
             * Date format which is used to format the dates.
             */
            oDateFormat: sap.ui.core.format.DateFormat
          ): void;
          /**
           * Set Date Range Slider Granularity to Day
           */
          setDayGranularity(): sap.suite.ui.commons.DateRangeSlider;
          /**
           * Sets a new value for property {@link #getEditable editable}.
           *
           * This property switches the enabled state of the control. Using the date range slider interactively requires
           * this property to be true.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setEditable(
            /**
             * New value for property `editable`
             */
            bEditable: boolean
          ): sap.suite.ui.commons.DateRangeSlider;
          /**
           * Sets a new value for property {@link #getEnabled enabled}.
           *
           * This property switches the enabled state of the control. Disabled fields have different colors, and can
           * not be focused.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setEnabled(
            /**
             * New value for property `enabled`
             */
            bEnabled: boolean
          ): sap.suite.ui.commons.DateRangeSlider;
          /**
           * Sets a new value for property {@link #getLabels labels}.
           *
           * Labels to be displayed instead of dates.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setLabels(
            /**
             * New value for property `labels`
             */
            sLabels: string[]
          ): sap.suite.ui.commons.DateRangeSlider;
          /**
           * Set max property for the DateRangeSlider. This sets the maximum date for the slider.
           */
          setMax(
            /**
             * The max date.
             */
            dMax: Date
          ): void;
          /**
           * Set min property for the DateRangeSlider. This sets the minimum date for the slider.
           */
          setMin(
            /**
             * The min date.
             */
            dMin: Date
          ): void;
          /**
           * Set Date Range Slider Granularity to Month
           */
          setMonthGranularity(): sap.suite.ui.commons.DateRangeSlider;
          /**
           * Sets a new value for property {@link #getPinGrip pinGrip}.
           *
           * Pin the left grip so that user cannot move it with the keyboard or mouse.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setPinGrip(
            /**
             * New value for property `pinGrip`
             */
            bPinGrip: boolean
          ): sap.suite.ui.commons.DateRangeSlider;
          /**
           * Sets a new value for property {@link #getPinGrip2 pinGrip2}.
           *
           * Pin the right grip so that user cannot move it with the keyboard or mouse.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setPinGrip2(
            /**
             * New value for property `pinGrip2`
             */
            bPinGrip2: boolean
          ): sap.suite.ui.commons.DateRangeSlider;
          /**
           * Sets a new value for property {@link #getShowBubbles showBubbles}.
           *
           * Property to show or hide bubbles. Default is true.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setShowBubbles(
            /**
             * New value for property `showBubbles`
             */
            bShowBubbles: boolean
          ): sap.suite.ui.commons.DateRangeSlider;
          /**
           * Sets a new value for property {@link #getSmallStepWidth smallStepWidth}.
           *
           * The grips of the control can only be moved in steps of this width.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setSmallStepWidth(
            /**
             * New value for property `smallStepWidth`
             */
            fSmallStepWidth: number
          ): sap.suite.ui.commons.DateRangeSlider;
          /**
           * Sets a new value for property {@link #getStepLabels stepLabels}.
           *
           * Display a date label above each tick.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setStepLabels(
            /**
             * New value for property `stepLabels`
             */
            bStepLabels: boolean
          ): sap.suite.ui.commons.DateRangeSlider;
          /**
           * Sets a new value for property {@link #getTotalUnits totalUnits}.
           *
           * Number of units between ticks.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setTotalUnits(
            /**
             * New value for property `totalUnits`
             */
            iTotalUnits: number
          ): sap.suite.ui.commons.DateRangeSlider;
          /**
           * Set value property for the DateRangeSlider. This sets the value date for the slider.
           */
          setValue(
            /**
             * The value date.
             */
            dValue: Date
          ): void;
          /**
           * Sets a new value for property {@link #getValue2 value2}.
           *
           * Date value of the right grip.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setValue2(
            /**
             * New value for property `value2`
             */
            oValue2: object
          ): sap.suite.ui.commons.DateRangeSlider;
          /**
           * Sets a new value for property {@link #getVisible visible}.
           *
           * This property switches the visible state of the control. Invisible date range slider are not rendered.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          // @ts-ignore
          setVisible(
            /**
             * New value for property `visible`
             */
            bVisible: boolean
          ): sap.suite.ui.commons.DateRangeSlider;
          /**
           * Sets a new value for property {@link #getWidth width}.
           *
           * Width of the horizontal date range slider.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `100%`.
           */
          setWidth(
            /**
             * New value for property `width`
             */
            sWidth: sap.ui.core.CSSSize
          ): sap.suite.ui.commons.DateRangeSlider;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.suite.ui.commons.DateRangeSlider`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.DateRangeSlider` itself.
           *
           * This event is fired when user changes completes the selection of a new date using a grip. It contains
           * the Date object value of each grip such that the left grip value is held by the value property and the
           * right grip value is held by the value2 property.
           */
          attachChange(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.DateRangeSlider`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.DateRangeSlider;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:liveChange liveChange} event of this `sap.suite.ui.commons.DateRangeSlider`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.DateRangeSlider` itself.
           *
           * This live event is fired as the user slides a grip with the mouse. It contains the Date object value
           * of each grip such that the left grip value is held by the value property and the right grip value is
           * held by the value2 property.
           */
          attachLiveChange(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.DateRangeSlider`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.DateRangeSlider;
        }
        /**
         * @deprecated (since 1.34) - Deprecated. Not Fiori.
         *
         * The Date Range Slider provides the user with a Range Slider control that is optimized for use with Dates.
         */
        class DateRangeSliderInternal extends sap.ui.commons.RangeSlider {
          /**
           * Constructor for a new DateRangeSliderInternal.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: DateRangeSliderInternalOpts
          );

          /**
           * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.suite.ui.commons.DateRangeSliderInternal`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.DateRangeSliderInternal` itself.
           *
           * This event is fired when user changes the positions of the grips of the control. It contains value as
           * Date object and value2 as Date object which are based on the positions of two grips.
           */
          // @ts-ignore
          attachChange(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.DateRangeSliderInternal`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.DateRangeSliderInternal;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:liveChange liveChange} event of this `sap.suite.ui.commons.DateRangeSliderInternal`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.DateRangeSliderInternal` itself.
           *
           * This live event is fired when user changes the positions of the grips of the control. It contains value
           * as Date object and value2 as Date object which are based on the positions of two grips.
           */
          // @ts-ignore
          attachLiveChange(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.DateRangeSliderInternal`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.DateRangeSliderInternal;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.suite.ui.commons.DateRangeSliderInternal`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          // @ts-ignore
          detachChange(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.DateRangeSliderInternal;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:liveChange liveChange} event of this `sap.suite.ui.commons.DateRangeSliderInternal`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          // @ts-ignore
          detachLiveChange(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.DateRangeSliderInternal;
          /**
           * Creates a new subclass of class sap.suite.ui.commons.DateRangeSliderInternal with name `sClassName` and
           * enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.commons.RangeSlider.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:change change} to attached listeners.
           */
          // @ts-ignore
          fireChange(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.suite.ui.commons.DateRangeSliderInternal;
          /**
           * Fires event {@link #event:liveChange liveChange} to attached listeners.
           */
          // @ts-ignore
          fireLiveChange(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.suite.ui.commons.DateRangeSliderInternal;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.DateRangeSliderInternal.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getPinGrip pinGrip}.
           *
           * Property to pin Grip (left grip) of the slider so that user cannot move it with key or mouse clicks.
           *
           * Default value is `false`.
           */
          getPinGrip(): boolean;
          /**
           * Gets current value of property {@link #getPinGrip2 pinGrip2}.
           *
           * Property to pin Grip2 (right grip) of the slider so that user cannot move it with key or mouse clicks.
           *
           * Default value is `false`.
           */
          getPinGrip2(): boolean;
          /**
           * Gets current value of property {@link #getShowBubbles showBubbles}.
           *
           * Property to show or hide bubbles. Default is true.
           *
           * Default value is `true`.
           */
          getShowBubbles(): boolean;
          /**
           * Sets a new value for property {@link #getPinGrip pinGrip}.
           *
           * Property to pin Grip (left grip) of the slider so that user cannot move it with key or mouse clicks.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setPinGrip(
            /**
             * New value for property `pinGrip`
             */
            bPinGrip: boolean
          ): sap.suite.ui.commons.DateRangeSliderInternal;
          /**
           * Sets a new value for property {@link #getPinGrip2 pinGrip2}.
           *
           * Property to pin Grip2 (right grip) of the slider so that user cannot move it with key or mouse clicks.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setPinGrip2(
            /**
             * New value for property `pinGrip2`
             */
            bPinGrip2: boolean
          ): sap.suite.ui.commons.DateRangeSliderInternal;
          /**
           * Sets a new value for property {@link #getShowBubbles showBubbles}.
           *
           * Property to show or hide bubbles. Default is true.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setShowBubbles(
            /**
             * New value for property `showBubbles`
             */
            bShowBubbles: boolean
          ): sap.suite.ui.commons.DateRangeSliderInternal;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.suite.ui.commons.DateRangeSliderInternal`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.DateRangeSliderInternal` itself.
           *
           * This event is fired when user changes the positions of the grips of the control. It contains value as
           * Date object and value2 as Date object which are based on the positions of two grips.
           */
          // @ts-ignore
          attachChange(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.DateRangeSliderInternal`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.DateRangeSliderInternal;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:liveChange liveChange} event of this `sap.suite.ui.commons.DateRangeSliderInternal`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.DateRangeSliderInternal` itself.
           *
           * This live event is fired when user changes the positions of the grips of the control. It contains value
           * as Date object and value2 as Date object which are based on the positions of two grips.
           */
          // @ts-ignore
          attachLiveChange(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.DateRangeSliderInternal`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.DateRangeSliderInternal;
        }
        /**
         * @deprecated (since 1.34) - Deprecated. sap.suite.ui.microchart.DeltaMicroChart should be used.
         *
         * This control displays a delta of two values as a chart.
         */
        class DeltaMicroChart extends sap.suite.ui.microchart.DeltaMicroChart {
          /**
           * Constructor for a new DeltaMicroChart.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: DeltaMicroChartOpts
          );

          /**
           * Creates a new subclass of class sap.suite.ui.commons.DeltaMicroChart with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.microchart.DeltaMicroChart.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.DeltaMicroChart.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
        }
        /**
         * @deprecated (since 1.34) - Deprecated. Moved to openui5.
         *
         * The control that displays multiple GenericTile controls as changing slides.
         */
        class DynamicContainer extends sap.m.SlideTile {
          /**
           * Constructor for a new DynamicContainer.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: DynamicContainerOpts
          );

          /**
           * Creates a new subclass of class sap.suite.ui.commons.DynamicContainer with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.m.SlideTile.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.DynamicContainer.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
        }
        /**
         * @deprecated (since 1.32) - Deprecated. Object page should be used instead.
         *
         * This control is used in UnifiedThingInspector to display the preview of the facet content.
         */
        class FacetOverview extends sap.ui.core.Control {
          /**
           * Constructor for a new FacetOverview.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: FacetOverviewOpts
          );

          /**
           * Attaches event handler `fnFunction` to the {@link #event:heightChange heightChange} event of this `sap.suite.ui.commons.FacetOverview`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.FacetOverview` itself.
           *
           * This event is fired when a new value to the heightType or height property is set.
           */
          attachHeightChange(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.FacetOverview`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.FacetOverview;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.FacetOverview`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.FacetOverview` itself.
           *
           * The event is fired when the user chooses the control. Provides an event with parameter id, the ID of
           * the chosen control.
           */
          attachPress(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.FacetOverview`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.FacetOverview;
          /**
           * Destroys the content in the aggregation {@link #getContent content}.
           */
          destroyContent(): sap.suite.ui.commons.FacetOverview;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:heightChange heightChange} event of this `sap.suite.ui.commons.FacetOverview`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachHeightChange(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.FacetOverview;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.suite.ui.commons.FacetOverview`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachPress(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.FacetOverview;
          /**
           * Creates a new subclass of class sap.suite.ui.commons.FacetOverview with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:heightChange heightChange} to attached listeners.
           */
          fireHeightChange(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.suite.ui.commons.FacetOverview;
          /**
           * Fires event {@link #event:press press} to attached listeners.
           */
          firePress(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * The control ID.
               */
              id?: string;
            }
          ): sap.suite.ui.commons.FacetOverview;
          /**
           * Gets content of aggregation {@link #getContent content}.
           *
           * The content that appears in the left part of the control.
           */
          getContent(): sap.ui.core.Control;
          /**
           * @deprecated (since 1.17.1) - This property was replaced by heightType property.
           *
           * Gets current value of property {@link #getHeight height}.
           *
           * Defines the height of the control only if the heightType prperty is set to None. Must be set in rems
           * for the correct work in the UnifiedThingInspector.
           *
           * Default value is `10rem`.
           */
          getHeight(): sap.ui.core.CSSSize;
          /**
           * Gets current value of property {@link #getHeightType heightType}.
           *
           * Indicates the height of the control in the predifened values. If set to None, then the height is defined
           * by the depricated height property.
           *
           * Default value is `None`.
           */
          getHeightType(): sap.suite.ui.commons.FacetOverviewHeight;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.FacetOverview.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getQuantity quantity}.
           *
           * Displays a label with the number of items in the right part of the control.
           *
           * Default value is `-1`.
           */
          getQuantity(): number;
          /**
           * @deprecated (since 1.17.1) - It is not used any more for the laoyut calculations in UnifiedThingInspector.
           *
           * Gets current value of property {@link #getRowSpan rowSpan}.
           *
           * Defines the number of rows that the control represents in an external layout.
           *
           * Default value is `1`.
           */
          getRowSpan(): number;
          /**
           * Gets current value of property {@link #getTitle title}.
           *
           * This property is shown in the upper left part of control.
           */
          getTitle(): string;
          /**
           * Gets current value of property {@link #getWidth width}.
           *
           * Defines the width of the control. By default, the value is empty and the control inhertis the size from
           * its content.
           *
           * Default value is `auto`.
           */
          getWidth(): sap.ui.core.CSSSize;
          /**
           * Sets the aggregated {@link #getContent content}.
           */
          setContent(
            /**
             * The content to set
             */
            oContent: sap.ui.core.Control
          ): sap.suite.ui.commons.FacetOverview;
          /**
           * @deprecated (since 1.17.1) - This property was replaced by heightType property.
           *
           * Sets a new value for property {@link #getHeight height}.
           *
           * Defines the height of the control only if the heightType prperty is set to None. Must be set in rems
           * for the correct work in the UnifiedThingInspector.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `10rem`.
           */
          setHeight(
            /**
             * New value for property `height`
             */
            sHeight: sap.ui.core.CSSSize
          ): sap.suite.ui.commons.FacetOverview;
          /**
           * Sets a new value for property {@link #getHeightType heightType}.
           *
           * Indicates the height of the control in the predifened values. If set to None, then the height is defined
           * by the depricated height property.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `None`.
           */
          setHeightType(
            /**
             * New value for property `heightType`
             */
            sHeightType: sap.suite.ui.commons.FacetOverviewHeight
          ): sap.suite.ui.commons.FacetOverview;
          /**
           * Sets a new value for property {@link #getQuantity quantity}.
           *
           * Displays a label with the number of items in the right part of the control.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `-1`.
           */
          setQuantity(
            /**
             * New value for property `quantity`
             */
            iQuantity: number
          ): sap.suite.ui.commons.FacetOverview;
          /**
           * @deprecated (since 1.17.1) - It is not used any more for the laoyut calculations in UnifiedThingInspector.
           *
           * Sets a new value for property {@link #getRowSpan rowSpan}.
           *
           * Defines the number of rows that the control represents in an external layout.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `1`.
           */
          setRowSpan(
            /**
             * New value for property `rowSpan`
             */
            iRowSpan: number
          ): sap.suite.ui.commons.FacetOverview;
          /**
           * Sets a new value for property {@link #getTitle title}.
           *
           * This property is shown in the upper left part of control.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setTitle(
            /**
             * New value for property `title`
             */
            sTitle: string
          ): sap.suite.ui.commons.FacetOverview;
          /**
           * Sets a new value for property {@link #getWidth width}.
           *
           * Defines the width of the control. By default, the value is empty and the control inhertis the size from
           * its content.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `auto`.
           */
          setWidth(
            /**
             * New value for property `width`
             */
            sWidth: sap.ui.core.CSSSize
          ): sap.suite.ui.commons.FacetOverview;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:heightChange heightChange} event of this `sap.suite.ui.commons.FacetOverview`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.FacetOverview` itself.
           *
           * This event is fired when a new value to the heightType or height property is set.
           */
          attachHeightChange(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.FacetOverview`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.FacetOverview;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.FacetOverview`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.FacetOverview` itself.
           *
           * The event is fired when the user chooses the control. Provides an event with parameter id, the ID of
           * the chosen control.
           */
          attachPress(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.FacetOverview`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.FacetOverview;
        }
        /**
         * @deprecated (since 1.32) - Deprecated. Generic Tile should be used instead.
         *
         * This element represents a news feed item.
         */
        class FeedItem extends sap.ui.core.Element {
          /**
           * Constructor for a new FeedItem.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: FeedItemOpts
          );

          /**
           * Creates a new subclass of class sap.suite.ui.commons.FeedItem with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets current value of property {@link #getImage image}.
           *
           * The background image for the feed item.
           */
          getImage(): sap.ui.core.URI;
          /**
           * Gets current value of property {@link #getLink link}.
           *
           * The target location of the feed item.
           */
          getLink(): sap.ui.core.URI;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.FeedItem.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getPublicationDate publicationDate}.
           *
           * The date the feed was published.
           */
          getPublicationDate(): object;
          /**
           * Gets current value of property {@link #getSource source}.
           *
           * The source of the feed item.
           */
          getSource(): string;
          /**
           * Gets current value of property {@link #getTitle title}.
           *
           * The title of the feed item.
           */
          getTitle(): string;
          /**
           * Sets a new value for property {@link #getImage image}.
           *
           * The background image for the feed item.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setImage(
            /**
             * New value for property `image`
             */
            sImage: sap.ui.core.URI
          ): sap.suite.ui.commons.FeedItem;
          /**
           * Sets a new value for property {@link #getLink link}.
           *
           * The target location of the feed item.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setLink(
            /**
             * New value for property `link`
             */
            sLink: sap.ui.core.URI
          ): sap.suite.ui.commons.FeedItem;
          /**
           * Sets a new value for property {@link #getPublicationDate publicationDate}.
           *
           * The date the feed was published.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setPublicationDate(
            /**
             * New value for property `publicationDate`
             */
            oPublicationDate: object
          ): sap.suite.ui.commons.FeedItem;
          /**
           * Sets a new value for property {@link #getSource source}.
           *
           * The source of the feed item.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setSource(
            /**
             * New value for property `source`
             */
            sSource: string
          ): sap.suite.ui.commons.FeedItem;
          /**
           * Sets a new value for property {@link #getTitle title}.
           *
           * The title of the feed item.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setTitle(
            /**
             * New value for property `title`
             */
            sTitle: string
          ): sap.suite.ui.commons.FeedItem;
        }
        /**
         * @deprecated (since 1.25) - This control has been deprecated in favor of new sap.suite.ui.commons.GenericTile.
         *
         * This control displays feed item header information.
         */
        class FeedItemHeader extends sap.m.ListItemBase {
          /**
           * Constructor for a new FeedItemHeader.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: FeedItemHeaderOpts
          );

          /**
           * Creates a new subclass of class sap.suite.ui.commons.FeedItemHeader with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets current value of property {@link #getDescription description}.
           *
           * The description of the feed item.
           */
          getDescription(): string;
          /**
           * Gets current value of property {@link #getImage image}.
           *
           * The image associated with the feed item.
           */
          getImage(): sap.ui.core.URI;
          /**
           * Gets current value of property {@link #getLink link}.
           *
           * The target location of the feed item.
           */
          getLink(): sap.ui.core.URI;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.FeedItemHeader.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getPublicationDate publicationDate}.
           *
           * The date the feed item was published.
           */
          getPublicationDate(): object;
          /**
           * Gets current value of property {@link #getSource source}.
           *
           * The source of the feed item.
           */
          getSource(): string;
          /**
           * Gets current value of property {@link #getTitle title}.
           *
           * The title of the feed item.
           */
          getTitle(): string;
          /**
           * Sets a new value for property {@link #getDescription description}.
           *
           * The description of the feed item.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setDescription(
            /**
             * New value for property `description`
             */
            sDescription: string
          ): sap.suite.ui.commons.FeedItemHeader;
          /**
           * Sets a new value for property {@link #getImage image}.
           *
           * The image associated with the feed item.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setImage(
            /**
             * New value for property `image`
             */
            sImage: sap.ui.core.URI
          ): sap.suite.ui.commons.FeedItemHeader;
          /**
           * Sets a new value for property {@link #getLink link}.
           *
           * The target location of the feed item.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setLink(
            /**
             * New value for property `link`
             */
            sLink: sap.ui.core.URI
          ): sap.suite.ui.commons.FeedItemHeader;
          /**
           * Sets a new value for property {@link #getPublicationDate publicationDate}.
           *
           * The date the feed item was published.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setPublicationDate(
            /**
             * New value for property `publicationDate`
             */
            oPublicationDate: object
          ): sap.suite.ui.commons.FeedItemHeader;
          /**
           * Sets a new value for property {@link #getSource source}.
           *
           * The source of the feed item.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setSource(
            /**
             * New value for property `source`
             */
            sSource: string
          ): sap.suite.ui.commons.FeedItemHeader;
          /**
           * Sets a new value for property {@link #getTitle title}.
           *
           * The title of the feed item.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setTitle(
            /**
             * New value for property `title`
             */
            sTitle: string
          ): sap.suite.ui.commons.FeedItemHeader;
        }
        /**
         * @deprecated (since 1.25) - This control has been deprecated in favor of new sap.suite.ui.commons.GenericTile.
         *
         * This control displays news feeds.
         */
        class FeedTile extends sap.ui.core.Control {
          /**
           * Constructor for a new FeedTile.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: FeedTileOpts
          );

          /**
           * Adds some item to the aggregation {@link #getItems items}.
           */
          addItem(
            /**
             * The item to add; if empty, nothing is inserted
             */
            oItem: sap.suite.ui.commons.FeedItem
          ): sap.suite.ui.commons.FeedTile;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.FeedTile`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.FeedTile` itself.
           *
           * The event fired when the user clicks on the control.
           */
          attachPress(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.FeedTile` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.FeedTile;
          /**
           * Destroys all the items in the aggregation {@link #getItems items}.
           */
          destroyItems(): sap.suite.ui.commons.FeedTile;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.suite.ui.commons.FeedTile`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachPress(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.FeedTile;
          /**
           * Creates a new subclass of class sap.suite.ui.commons.FeedTile with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:press press} to attached listeners.
           */
          firePress(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.suite.ui.commons.FeedTile;
          /**
           * Gets current value of property {@link #getDefaultImages defaultImages}.
           *
           * A list of default images that is cycled by the control when no image is available for a feed item or
           * when no feed items exist. After a random image is displayed first time, control cycles through this list
           * of images.
           */
          getDefaultImages(): sap.ui.core.URI[];
          /**
           * Gets current value of property {@link #getDisplayArticleImage displayArticleImage}.
           *
           * To display article Image or not. If it is true, the article Image will be displayed based on precedence.
           * If it is false, the default image will be displayed.
           *
           * Default value is `true`.
           */
          getDisplayArticleImage(): boolean;
          /**
           * Gets current value of property {@link #getDisplayDuration displayDuration}.
           *
           * The length of time in seconds the control displays each feed item. Default value is 5 seconds.
           *
           * Default value is `5`.
           */
          getDisplayDuration(): number;
          /**
           * Gets content of aggregation {@link #getItems items}.
           *
           * The feed items the control cycles through.
           */
          getItems(): sap.suite.ui.commons.FeedItem[];
          /**
           * Returns a metadata object for class sap.suite.ui.commons.FeedTile.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getSource source}.
           *
           * The source of the feed item.
           */
          getSource(): string;
          /**
           * Checks for the provided `sap.suite.ui.commons.FeedItem` in the aggregation {@link #getItems items}. and
           * returns its index if found or -1 otherwise.
           */
          indexOfItem(
            /**
             * The item whose index is looked for
             */
            oItem: sap.suite.ui.commons.FeedItem
          ): number;
          /**
           * Inserts a item into the aggregation {@link #getItems items}.
           */
          insertItem(
            /**
             * The item to insert; if empty, nothing is inserted
             */
            oItem: sap.suite.ui.commons.FeedItem,
            /**
             * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
             * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
             * the last position
             */
            iIndex: number
          ): sap.suite.ui.commons.FeedTile;
          /**
           * Removes all the controls from the aggregation {@link #getItems items}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllItems(): sap.suite.ui.commons.FeedItem[];
          /**
           * Removes a item from the aggregation {@link #getItems items}.
           */
          removeItem(
            /**
             * The item to remove or its index or id
             */
            vItem: number | string | sap.suite.ui.commons.FeedItem
          ): sap.suite.ui.commons.FeedItem;
          /**
           * Validate the array of URI first and then set the defaultImages property
           */
          setDefaultImages(
            /**
             * Default image URIs
             */
            oDefaultImages: sap.ui.core.URI[]
          ): void;
          /**
           * Sets a new value for property {@link #getDisplayArticleImage displayArticleImage}.
           *
           * To display article Image or not. If it is true, the article Image will be displayed based on precedence.
           * If it is false, the default image will be displayed.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setDisplayArticleImage(
            /**
             * New value for property `displayArticleImage`
             */
            bDisplayArticleImage: boolean
          ): sap.suite.ui.commons.FeedTile;
          /**
           * Sets a new value for property {@link #getDisplayDuration displayDuration}.
           *
           * The length of time in seconds the control displays each feed item. Default value is 5 seconds.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `5`.
           */
          setDisplayDuration(
            /**
             * New value for property `displayDuration`
             */
            iDisplayDuration: number
          ): sap.suite.ui.commons.FeedTile;
          /**
           * Sets a new value for property {@link #getSource source}.
           *
           * The source of the feed item.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setSource(
            /**
             * New value for property `source`
             */
            sSource: string
          ): sap.suite.ui.commons.FeedTile;
          /**
           * Set a new model of feed items, such as when a feed aggregator has collected the latest feed items. This
           * model is staged (not immediately set on the control) to avoid re-rendering before the currently displayed
           * article is faded out. Therefore a smooth transition between the display of feed items is always maintained.
           */
          stageModel(
            /**
             * Model of new feed items.
             */
            oModel: sap.ui.model.Model
          ): void;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.FeedTile`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.FeedTile` itself.
           *
           * The event fired when the user clicks on the control.
           */
          attachPress(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.FeedTile` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.FeedTile;
        }
        /**
         * @deprecated (since 1.34) - Deprecated. Moved to openui5.
         *
         * The tile control that displays the title, description, and customizable main area.
         */
        class GenericTile extends sap.m.GenericTile {
          /**
           * Constructor for a new GenericTile.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: GenericTileOpts
          );

          /**
           * Creates a new subclass of class sap.suite.ui.commons.GenericTile with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.m.GenericTile.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.GenericTile.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
        }
        /**
         * @deprecated (since 1.34) - Deprecated.
         *
         * The tile control that displays the title, description, and customizable main area.
         */
        class GenericTile2X2 extends sap.ui.core.Control {
          /**
           * Constructor for a new GenericTile2X2.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: GenericTile2X2Opts
          );

          /**
           * Adds some tileContent to the aggregation {@link #getTileContent tileContent}.
           */
          addTileContent(
            /**
             * The tileContent to add; if empty, nothing is inserted
             */
            oTileContent: sap.suite.ui.commons.TileContent2X2
          ): sap.suite.ui.commons.GenericTile2X2;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.GenericTile2X2`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.GenericTile2X2` itself.
           *
           * The event is fired when the user chooses the tile.
           */
          attachPress(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.GenericTile2X2`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.GenericTile2X2;
          /**
           * Destroys the icon in the aggregation {@link #getIcon icon}.
           */
          destroyIcon(): sap.suite.ui.commons.GenericTile2X2;
          /**
           * Destroys all the tileContent in the aggregation {@link #getTileContent tileContent}.
           */
          destroyTileContent(): sap.suite.ui.commons.GenericTile2X2;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.suite.ui.commons.GenericTile2X2`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachPress(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.GenericTile2X2;
          /**
           * Creates a new subclass of class sap.suite.ui.commons.GenericTile2X2 with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:press press} to attached listeners.
           */
          firePress(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.suite.ui.commons.GenericTile2X2;
          /**
           * Gets current value of property {@link #getBackgroundImage backgroundImage}.
           *
           * The URI of the background image.
           */
          getBackgroundImage(): sap.ui.core.URI;
          /**
           * Gets current value of property {@link #getFailedText failedText}.
           *
           * The message that appears when the control is in the Failed state.
           */
          getFailedText(): string;
          /**
           * Gets current value of property {@link #getFrameType frameType}.
           *
           * The frame type: 1x1 or 2x1.
           *
           * Default value is `OneByOne`.
           */
          getFrameType(): sap.suite.ui.commons.FrameType;
          /**
           * Gets current value of property {@link #getHeader header}.
           *
           * The header of the tile.
           */
          getHeader(): string;
          /**
           * Gets current value of property {@link #getHeaderImage headerImage}.
           *
           * The image to be displayed as a graphical element within the header. This can be an image or an icon from
           * the icon font.
           */
          getHeaderImage(): sap.ui.core.URI;
          /**
           * Gets content of aggregation {@link #getIcon icon}.
           *
           * An icon or image to be displayed in the control.
           */
          getIcon(): sap.ui.core.Control;
          /**
           * Gets current value of property {@link #getImageDescription imageDescription}.
           *
           * Description of a header image that is used in the tooltip.
           */
          getImageDescription(): string;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.GenericTile2X2.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getSize size}.
           *
           * The size of the tile. If not set, then the default size is applied based on the device tile.
           *
           * Default value is `Auto`.
           */
          getSize(): sap.suite.ui.commons.InfoTileSize;
          /**
           * Gets current value of property {@link #getState state}.
           *
           * The load status.
           *
           * Default value is `Loaded`.
           */
          getState(): sap.suite.ui.commons.LoadState;
          /**
           * Gets current value of property {@link #getSubheader subheader}.
           *
           * The subheader of the tile.
           */
          getSubheader(): string;
          /**
           * Gets content of aggregation {@link #getTileContent tileContent}.
           *
           * The switchable view that depends on the tile type.
           */
          getTileContent(): sap.suite.ui.commons.TileContent2X2[];
          /**
           * Checks for the provided `sap.suite.ui.commons.TileContent2X2` in the aggregation {@link #getTileContent
           * tileContent}. and returns its index if found or -1 otherwise.
           */
          indexOfTileContent(
            /**
             * The tileContent whose index is looked for
             */
            oTileContent: sap.suite.ui.commons.TileContent2X2
          ): number;
          /**
           * Inserts a tileContent into the aggregation {@link #getTileContent tileContent}.
           */
          insertTileContent(
            /**
             * The tileContent to insert; if empty, nothing is inserted
             */
            oTileContent: sap.suite.ui.commons.TileContent2X2,
            /**
             * The `0`-based index the tileContent should be inserted at; for a negative value of `iIndex`, the tileContent
             * is inserted at position 0; for a value greater than the current size of the aggregation, the tileContent
             * is inserted at the last position
             */
            iIndex: number
          ): sap.suite.ui.commons.GenericTile2X2;
          /**
           * Removes all the controls from the aggregation {@link #getTileContent tileContent}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllTileContent(): sap.suite.ui.commons.TileContent2X2[];
          /**
           * Removes a tileContent from the aggregation {@link #getTileContent tileContent}.
           */
          removeTileContent(
            /**
             * The tileContent to remove or its index or id
             */
            vTileContent: number | string | sap.suite.ui.commons.TileContent2X2
          ): sap.suite.ui.commons.TileContent2X2;
          /**
           * Sets a new value for property {@link #getBackgroundImage backgroundImage}.
           *
           * The URI of the background image.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setBackgroundImage(
            /**
             * New value for property `backgroundImage`
             */
            sBackgroundImage: sap.ui.core.URI
          ): sap.suite.ui.commons.GenericTile2X2;
          /**
           * Sets a new value for property {@link #getFailedText failedText}.
           *
           * The message that appears when the control is in the Failed state.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setFailedText(
            /**
             * New value for property `failedText`
             */
            sFailedText: string
          ): sap.suite.ui.commons.GenericTile2X2;
          /**
           * Sets a new value for property {@link #getFrameType frameType}.
           *
           * The frame type: 1x1 or 2x1.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `OneByOne`.
           */
          setFrameType(
            /**
             * New value for property `frameType`
             */
            sFrameType: sap.suite.ui.commons.FrameType
          ): sap.suite.ui.commons.GenericTile2X2;
          /**
           * Sets a new value for property {@link #getHeader header}.
           *
           * The header of the tile.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setHeader(
            /**
             * New value for property `header`
             */
            sHeader: string
          ): sap.suite.ui.commons.GenericTile2X2;
          /**
           * Sets a new value for property {@link #getHeaderImage headerImage}.
           *
           * The image to be displayed as a graphical element within the header. This can be an image or an icon from
           * the icon font.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setHeaderImage(
            /**
             * New value for property `headerImage`
             */
            sHeaderImage: sap.ui.core.URI
          ): sap.suite.ui.commons.GenericTile2X2;
          /**
           * Sets the aggregated {@link #getIcon icon}.
           */
          setIcon(
            /**
             * The icon to set
             */
            oIcon: sap.ui.core.Control
          ): sap.suite.ui.commons.GenericTile2X2;
          /**
           * Sets a new value for property {@link #getImageDescription imageDescription}.
           *
           * Description of a header image that is used in the tooltip.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setImageDescription(
            /**
             * New value for property `imageDescription`
             */
            sImageDescription: string
          ): sap.suite.ui.commons.GenericTile2X2;
          /**
           * Sets a new value for property {@link #getSize size}.
           *
           * The size of the tile. If not set, then the default size is applied based on the device tile.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `Auto`.
           */
          setSize(
            /**
             * New value for property `size`
             */
            sSize: sap.suite.ui.commons.InfoTileSize
          ): sap.suite.ui.commons.GenericTile2X2;
          /**
           * Sets a new value for property {@link #getState state}.
           *
           * The load status.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `Loaded`.
           */
          setState(
            /**
             * New value for property `state`
             */
            sState: sap.suite.ui.commons.LoadState
          ): sap.suite.ui.commons.GenericTile2X2;
          /**
           * Sets a new value for property {@link #getSubheader subheader}.
           *
           * The subheader of the tile.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setSubheader(
            /**
             * New value for property `subheader`
             */
            sSubheader: string
          ): sap.suite.ui.commons.GenericTile2X2;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.GenericTile2X2`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.GenericTile2X2` itself.
           *
           * The event is fired when the user chooses the tile.
           */
          attachPress(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.GenericTile2X2`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.GenericTile2X2;
        }
        /**
         * @deprecated (since 1.34) - this control is a mere wrapper for sap.suite.ui.microchart.HarveyBallMicroChart.
         *
         * This chart shows the part comparative to total.
         */
        class HarveyBallMicroChart extends sap.suite.ui.microchart
          .HarveyBallMicroChart {
          /**
           * Constructor for a new HarveyBallMicroChart.
           */
          constructor(
            /**
             * ID for the new control, automatically generated if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: HarveyBallMicroChartOpts
          );

          /**
           * Creates a new subclass of class sap.suite.ui.commons.HarveyBallMicroChart with name `sClassName` and
           * enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.microchart.HarveyBallMicroChart.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.HarveyBallMicroChart.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
        }
        /**
         * @deprecated (since 1.34) - this control is a mere wrapper for sap.suite.ui.microchart.HarveyBallMicroChartItem.
         *
         * The configuration of the slice on the pie chart.
         */
        class HarveyBallMicroChartItem extends sap.suite.ui.microchart
          .HarveyBallMicroChartItem {
          /**
           * Constructor for a new HarveyBallMicroChartItem.
           */
          constructor(
            /**
             * ID for the new control, automatically generated if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: HarveyBallMicroChartItemOpts
          );

          /**
           * Creates a new subclass of class sap.suite.ui.commons.HarveyBallMicroChartItem with name `sClassName`
           * and enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.microchart.HarveyBallMicroChartItem.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.HarveyBallMicroChartItem.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
        }
        /**
         * @deprecated (since 1.44.0) - HeaderCell control is no longer used. Please use other container controls
         * instead (like sap.m.VBox or sap.m.HBox).
         *
         * This control contains 4 cells (West, North, East, South). It can display one or more controls in different
         * layouts. Each aggregation must contain only one instance of HeaderCellItem.
         */
        class HeaderCell extends sap.ui.core.Control {
          /**
           * Constructor for a new HeaderCell.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: HeaderCellOpts
          );

          /**
           * Destroys the east in the aggregation {@link #getEast east}.
           */
          destroyEast(): sap.suite.ui.commons.HeaderCell;
          /**
           * Destroys the north in the aggregation {@link #getNorth north}.
           */
          destroyNorth(): sap.suite.ui.commons.HeaderCell;
          /**
           * Destroys the south in the aggregation {@link #getSouth south}.
           */
          destroySouth(): sap.suite.ui.commons.HeaderCell;
          /**
           * Destroys the west in the aggregation {@link #getWest west}.
           */
          destroyWest(): sap.suite.ui.commons.HeaderCell;
          /**
           * Creates a new subclass of class sap.suite.ui.commons.HeaderCell with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets content of aggregation {@link #getEast east}.
           *
           * Object that contains control to render in east area of the HeaderCell.
           */
          getEast(): sap.suite.ui.commons.HeaderCellItem;
          /**
           * Gets current value of property {@link #getHeight height}.
           *
           * Height of the HeaderCell control.
           *
           * Default value is `106px`.
           */
          getHeight(): sap.ui.core.CSSSize;
          /**
           * @deprecated (since 1.20.2) - Wrong property name
           *
           * Gets current value of property {@link #getHeigth heigth}.
           *
           * Height of the HeaderCell control.
           *
           * Default value is `100px`.
           */
          getHeigth(): sap.ui.core.CSSSize;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.HeaderCell.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets content of aggregation {@link #getNorth north}.
           *
           * Object that contains control to render in north area of the HeaderCell.
           */
          getNorth(): sap.suite.ui.commons.HeaderCellItem;
          /**
           * Gets content of aggregation {@link #getSouth south}.
           *
           * Object that contains control to render in south area of the HeaderCell.
           */
          getSouth(): sap.suite.ui.commons.HeaderCellItem;
          /**
           * Gets content of aggregation {@link #getWest west}.
           *
           * Object that contains control to render in west area of the HeaderCell.
           */
          getWest(): sap.suite.ui.commons.HeaderCellItem;
          /**
           * Sets the aggregated {@link #getEast east}.
           */
          setEast(
            /**
             * The east to set
             */
            oEast: sap.suite.ui.commons.HeaderCellItem
          ): sap.suite.ui.commons.HeaderCell;
          /**
           * Sets a new value for property {@link #getHeight height}.
           *
           * Height of the HeaderCell control.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `106px`.
           */
          setHeight(
            /**
             * New value for property `height`
             */
            sHeight: sap.ui.core.CSSSize
          ): sap.suite.ui.commons.HeaderCell;
          /**
           * @deprecated (since 1.20.2) - Wrong property name
           *
           * Sets a new value for property {@link #getHeigth heigth}.
           *
           * Height of the HeaderCell control.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `100px`.
           */
          setHeigth(
            /**
             * New value for property `heigth`
             */
            sHeigth: sap.ui.core.CSSSize
          ): sap.suite.ui.commons.HeaderCell;
          /**
           * Sets the aggregated {@link #getNorth north}.
           */
          setNorth(
            /**
             * The north to set
             */
            oNorth: sap.suite.ui.commons.HeaderCellItem
          ): sap.suite.ui.commons.HeaderCell;
          /**
           * Sets the aggregated {@link #getSouth south}.
           */
          setSouth(
            /**
             * The south to set
             */
            oSouth: sap.suite.ui.commons.HeaderCellItem
          ): sap.suite.ui.commons.HeaderCell;
          /**
           * Sets the aggregated {@link #getWest west}.
           */
          setWest(
            /**
             * The west to set
             */
            oWest: sap.suite.ui.commons.HeaderCellItem
          ): sap.suite.ui.commons.HeaderCell;
        }
        /**
         * @deprecated (since 1.44.0) - The HeaderCellItem was deprecated because of the deprecation of HeaderCell.
         * Please see HeaderCell for replacement advice.
         *
         * Object that contains instance of control and information about height. It should be used inside sap.suite.ui.commons.HeaderCell
         */
        class HeaderCellItem extends sap.ui.core.Element {
          /**
           * Constructor for a new HeaderCellItem.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: HeaderCellItemOpts
          );

          /**
           * Destroys the content in the aggregation {@link #getContent content}.
           */
          destroyContent(): sap.suite.ui.commons.HeaderCellItem;
          /**
           * Creates a new subclass of class sap.suite.ui.commons.HeaderCellItem with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets content of aggregation {@link #getContent content}.
           *
           * Instance of UI5 Control that is used as content.
           */
          getContent(): sap.ui.core.Control;
          /**
           * Gets current value of property {@link #getHeight height}.
           *
           * Height of area to occupy by control.
           */
          getHeight(): sap.ui.core.CSSSize;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.HeaderCellItem.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Sets the aggregated {@link #getContent content}.
           */
          setContent(
            /**
             * The content to set
             */
            oContent: sap.ui.core.Control
          ): sap.suite.ui.commons.HeaderCellItem;
          /**
           * Sets a new value for property {@link #getHeight height}.
           *
           * Height of area to occupy by control.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setHeight(
            /**
             * New value for property `height`
             */
            sHeight: sap.ui.core.CSSSize
          ): sap.suite.ui.commons.HeaderCellItem;
        }
        /**
         * @deprecated (since 1.44) - This control is deprecated in this library since 1.44 and moved to sap.m library
         * that is also part of openUI5.
         *
         * The container that provides a horizontal layout. It provides a horizontal scroll on the tablet and phone.
         * On the desktop, it provides scroll left and scroll right buttons. This control supports keyboard navigation.
         * You can use left and right arrow keys to navigate through the inner content. The Home key puts focus
         * on the first control and the End key puts focus on the last control. Use Enter or Space to choose the
         * control.
         */
        class HeaderContainer extends sap.ui.core.Control
          implements sap.m.ObjectHeaderContainer {
          /**
           * Constructor for a new HeaderContainer.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: HeaderContainerOpts
          );

          /**
           * Adds some item to the aggregation {@link #getItems items}.
           */
          addItem(
            /**
             * The item to add; if empty, nothing is inserted
             */
            oItem: sap.ui.core.Control
          ): sap.suite.ui.commons.HeaderContainer;
          /**
           * Destroys all the items in the aggregation {@link #getItems items}.
           */
          destroyItems(): sap.suite.ui.commons.HeaderContainer;
          /**
           * Creates a new subclass of class sap.suite.ui.commons.HeaderContainer with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * @SINCE 1.38
           *
           * Gets current value of property {@link #getBackgroundDesign backgroundDesign}.
           *
           * Specifies the background color of the content. The visualization of the different options depends on
           * the used theme.
           *
           * Default value is `Transparent`.
           */
          getBackgroundDesign(): sap.m.BackgroundDesign;
          /**
           * Gets content of aggregation {@link #getItems items}.
           *
           * Items to add to HeaderContainer.
           */
          getItems(): sap.ui.core.Control[];
          /**
           * Returns a metadata object for class sap.suite.ui.commons.HeaderContainer.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getScrollStep scrollStep}.
           *
           * Number of pixels to scroll when the user chooses Next or Previous buttons. Relevant only for desktop.
           *
           * Default value is `300`.
           */
          getScrollStep(): number;
          /**
           * Gets current value of property {@link #getScrollTime scrollTime}.
           *
           * Scroll animation time in milliseconds.
           *
           * Default value is `500`.
           */
          getScrollTime(): number;
          /**
           * @SINCE 1.25
           *
           * Gets current value of property {@link #getShowDividers showDividers}.
           *
           * If set to true, shows dividers between scrollable items.
           *
           * Default value is `true`.
           */
          getShowDividers(): boolean;
          /**
           * @SINCE 1.25
           *
           * Gets current value of property {@link #getView view}.
           *
           * The view of the HeaderContainer. There are two view modes: horizontal and vertical. In horizontal mode
           * the content controls are displayed next to each other, in vertical mode the content controls are displayed
           * on top of each other.
           *
           * Default value is `Horizontal`.
           */
          getView(): sap.suite.ui.commons.HeaderContainerView;
          /**
           * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getItems items}. and returns
           * its index if found or -1 otherwise.
           */
          indexOfItem(
            /**
             * The item whose index is looked for
             */
            oItem: sap.ui.core.Control
          ): number;
          /**
           * Inserts a item into the aggregation {@link #getItems items}.
           */
          insertItem(
            /**
             * The item to insert; if empty, nothing is inserted
             */
            oItem: sap.ui.core.Control,
            /**
             * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
             * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
             * the last position
             */
            iIndex: number
          ): sap.suite.ui.commons.HeaderContainer;
          /**
           * Removes all the controls from the aggregation {@link #getItems items}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllItems(): sap.ui.core.Control[];
          /**
           * Removes a item from the aggregation {@link #getItems items}.
           */
          removeItem(
            /**
             * The item to remove or its index or id
             */
            vItem: number | string | sap.ui.core.Control
          ): sap.ui.core.Control;
          /**
           * @SINCE 1.38
           *
           * Sets a new value for property {@link #getBackgroundDesign backgroundDesign}.
           *
           * Specifies the background color of the content. The visualization of the different options depends on
           * the used theme.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `Transparent`.
           */
          setBackgroundDesign(
            /**
             * New value for property `backgroundDesign`
             */
            sBackgroundDesign: sap.m.BackgroundDesign
          ): sap.suite.ui.commons.HeaderContainer;
          /**
           * Sets a new value for property {@link #getScrollStep scrollStep}.
           *
           * Number of pixels to scroll when the user chooses Next or Previous buttons. Relevant only for desktop.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `300`.
           */
          setScrollStep(
            /**
             * New value for property `scrollStep`
             */
            iScrollStep: number
          ): sap.suite.ui.commons.HeaderContainer;
          /**
           * Sets a new value for property {@link #getScrollTime scrollTime}.
           *
           * Scroll animation time in milliseconds.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `500`.
           */
          setScrollTime(
            /**
             * New value for property `scrollTime`
             */
            iScrollTime: number
          ): sap.suite.ui.commons.HeaderContainer;
          /**
           * @SINCE 1.25
           *
           * Sets a new value for property {@link #getShowDividers showDividers}.
           *
           * If set to true, shows dividers between scrollable items.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setShowDividers(
            /**
             * New value for property `showDividers`
             */
            bShowDividers: boolean
          ): sap.suite.ui.commons.HeaderContainer;
          /**
           * @SINCE 1.25
           *
           * Sets a new value for property {@link #getView view}.
           *
           * The view of the HeaderContainer. There are two view modes: horizontal and vertical. In horizontal mode
           * the content controls are displayed next to each other, in vertical mode the content controls are displayed
           * on top of each other.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `Horizontal`.
           */
          setView(
            /**
             * New value for property `view`
             */
            sView: sap.suite.ui.commons.HeaderContainerView
          ): sap.suite.ui.commons.HeaderContainer;
        }
        /**
         * @deprecated (since 1.25) - This control has been deprecated in favor of new sap.suite.ui.commons.GenericTile.
         *
         * The tile control that displays the title, description, footer, and customizable main area.
         */
        class InfoTile extends sap.ui.core.Control {
          /**
           * Constructor for a new InfoTile.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: InfoTileOpts
          );

          /**
           * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.InfoTile`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.InfoTile` itself.
           *
           * The event is fired when the user chooses the tile.
           */
          attachPress(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.InfoTile` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.InfoTile;
          /**
           * Destroys the content in the aggregation {@link #getContent content}.
           */
          destroyContent(): sap.suite.ui.commons.InfoTile;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.suite.ui.commons.InfoTile`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachPress(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.InfoTile;
          /**
           * Creates a new subclass of class sap.suite.ui.commons.InfoTile with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:press press} to attached listeners.
           */
          firePress(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.suite.ui.commons.InfoTile;
          /**
           * Gets content of aggregation {@link #getContent content}.
           *
           * The switchable view that depends on the tile type.
           */
          getContent(): sap.ui.core.Control;
          /**
           * Gets current value of property {@link #getDescription description}.
           *
           * Shows the description of the selected tile.
           */
          getDescription(): string;
          /**
           * Gets current value of property {@link #getFooter footer}.
           *
           * The footer text of the tile.
           */
          getFooter(): string;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.InfoTile.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getSize size}.
           *
           * Updates the size of the tile. If not set then the default size is applied based on the device tile.
           *
           * Default value is `Auto`.
           */
          getSize(): sap.suite.ui.commons.InfoTileSize;
          /**
           * Gets current value of property {@link #getState state}.
           *
           * Indicates the load status.
           *
           * Default value is `Loading`.
           */
          getState(): sap.suite.ui.commons.LoadState;
          /**
           * Gets current value of property {@link #getTitle title}.
           *
           * The title of the tile.
           */
          getTitle(): string;
          /**
           * Sets the aggregated {@link #getContent content}.
           */
          setContent(
            /**
             * The content to set
             */
            oContent: sap.ui.core.Control
          ): sap.suite.ui.commons.InfoTile;
          /**
           * Sets a new value for property {@link #getDescription description}.
           *
           * Shows the description of the selected tile.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setDescription(
            /**
             * New value for property `description`
             */
            sDescription: string
          ): sap.suite.ui.commons.InfoTile;
          /**
           * Sets a new value for property {@link #getFooter footer}.
           *
           * The footer text of the tile.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setFooter(
            /**
             * New value for property `footer`
             */
            sFooter: string
          ): sap.suite.ui.commons.InfoTile;
          /**
           * Sets a new value for property {@link #getSize size}.
           *
           * Updates the size of the tile. If not set then the default size is applied based on the device tile.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `Auto`.
           */
          setSize(
            /**
             * New value for property `size`
             */
            sSize: sap.suite.ui.commons.InfoTileSize
          ): sap.suite.ui.commons.InfoTile;
          /**
           * Sets a new value for property {@link #getState state}.
           *
           * Indicates the load status.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `Loading`.
           */
          setState(
            /**
             * New value for property `state`
             */
            sState: sap.suite.ui.commons.LoadState
          ): sap.suite.ui.commons.InfoTile;
          /**
           * Sets a new value for property {@link #getTitle title}.
           *
           * The title of the tile.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setTitle(
            /**
             * New value for property `title`
             */
            sTitle: string
          ): sap.suite.ui.commons.InfoTile;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.InfoTile`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.InfoTile` itself.
           *
           * The event is fired when the user chooses the tile.
           */
          attachPress(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.InfoTile` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.InfoTile;
        }
        /**
         * @deprecated (since 1.34) - this control is a mere wrapper for sap.m.FeedContent.
         *
         * This control displays the jam content text, subheader, and numeric value in a tile.
         */
        class JamContent extends sap.m.FeedContent {
          /**
           * Constructor for a new JamContent.
           */
          constructor(
            /**
             * ID for the new control, automatically generated if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: JamContentOpts
          );

          /**
           * Creates a new subclass of class sap.suite.ui.commons.JamContent with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.m.FeedContent.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.JamContent.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
        }
        /**
         * @deprecated (since 1.32) - Deprecated. Numeric content or any other standard Fiori control should be
         * used instead.
         *
         * This control is used in UnifiedThingInspector to display object-related KPIs in a factsheet.
         */
        class KpiTile extends sap.ui.core.Control {
          /**
           * Constructor for a new KpiTile.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: KpiTileOpts
          );

          /**
           * Creates a new subclass of class sap.suite.ui.commons.KpiTile with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets current value of property {@link #getDescription description}.
           *
           * The Description field.
           */
          getDescription(): string;
          /**
           * Gets current value of property {@link #getDoubleFontSize doubleFontSize}.
           *
           * If true, the value text will have 2 rem, if false - 1 rem.
           *
           * Default value is `true`.
           */
          getDoubleFontSize(): boolean;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.KpiTile.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getValue value}.
           *
           * The Value field.
           */
          getValue(): string;
          /**
           * Gets current value of property {@link #getValueScale valueScale}.
           *
           * The scale of a value.
           */
          getValueScale(): string;
          /**
           * Gets current value of property {@link #getValueStatus valueStatus}.
           *
           * The status color of the value. Depending on the status the tile is displayed in different colors.
           *
           * Default value is `Neutral`.
           */
          getValueStatus(): sap.suite.ui.commons.ValueStatus;
          /**
           * Gets current value of property {@link #getValueUnit valueUnit}.
           *
           * The percent sign, currency symbol, or unit for a value.
           */
          getValueUnit(): string;
          /**
           * Sets a new value for property {@link #getDescription description}.
           *
           * The Description field.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setDescription(
            /**
             * New value for property `description`
             */
            sDescription: string
          ): sap.suite.ui.commons.KpiTile;
          /**
           * Sets a new value for property {@link #getDoubleFontSize doubleFontSize}.
           *
           * If true, the value text will have 2 rem, if false - 1 rem.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setDoubleFontSize(
            /**
             * New value for property `doubleFontSize`
             */
            bDoubleFontSize: boolean
          ): sap.suite.ui.commons.KpiTile;
          /**
           * Sets a new value for property {@link #getValue value}.
           *
           * The Value field.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setValue(
            /**
             * New value for property `value`
             */
            sValue: string
          ): sap.suite.ui.commons.KpiTile;
          /**
           * Sets a new value for property {@link #getValueScale valueScale}.
           *
           * The scale of a value.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setValueScale(
            /**
             * New value for property `valueScale`
             */
            sValueScale: string
          ): sap.suite.ui.commons.KpiTile;
          /**
           * Sets a new value for property {@link #getValueStatus valueStatus}.
           *
           * The status color of the value. Depending on the status the tile is displayed in different colors.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `Neutral`.
           */
          setValueStatus(
            /**
             * New value for property `valueStatus`
             */
            sValueStatus: sap.suite.ui.commons.ValueStatus
          ): sap.suite.ui.commons.KpiTile;
          /**
           * Sets a new value for property {@link #getValueUnit valueUnit}.
           *
           * The percent sign, currency symbol, or unit for a value.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setValueUnit(
            /**
             * New value for property `valueUnit`
             */
            sValueUnit: string
          ): sap.suite.ui.commons.KpiTile;
        }
        /**
         * @deprecated (since 1.25) - Deprecated.
         *
         * This control launches a URL.
         */
        class LaunchTile extends sap.ui.core.Control {
          /**
           * Constructor for a new LaunchTile.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: LaunchTileOpts
          );

          /**
           * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.LaunchTile`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.LaunchTile` itself.
           *
           * The event fired when the user clicks on the control.
           */
          attachPress(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.LaunchTile` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.LaunchTile;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.suite.ui.commons.LaunchTile`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachPress(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.LaunchTile;
          /**
           * Creates a new subclass of class sap.suite.ui.commons.LaunchTile with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:press press} to attached listeners.
           */
          firePress(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.suite.ui.commons.LaunchTile;
          /**
           * Gets current value of property {@link #getIcon icon}.
           *
           * Icon associated with the launch destination.
           */
          getIcon(): sap.ui.core.URI;
          /**
           * Gets current value of property {@link #getLink link}.
           *
           * The launch destination.
           */
          getLink(): sap.ui.core.URI;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.LaunchTile.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getTitle title}.
           *
           * Descriptive title of the launch destination.
           */
          getTitle(): string;
          /**
           * Sets a new value for property {@link #getIcon icon}.
           *
           * Icon associated with the launch destination.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setIcon(
            /**
             * New value for property `icon`
             */
            sIcon: sap.ui.core.URI
          ): sap.suite.ui.commons.LaunchTile;
          /**
           * Sets a new value for property {@link #getLink link}.
           *
           * The launch destination.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setLink(
            /**
             * New value for property `link`
             */
            sLink: sap.ui.core.URI
          ): sap.suite.ui.commons.LaunchTile;
          /**
           * Sets a new value for property {@link #getTitle title}.
           *
           * Descriptive title of the launch destination.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setTitle(
            /**
             * New value for property `title`
             */
            sTitle: string
          ): sap.suite.ui.commons.LaunchTile;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.LaunchTile`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.LaunchTile` itself.
           *
           * The event fired when the user clicks on the control.
           */
          attachPress(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.LaunchTile` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.LaunchTile;
        }
        /**
         * @deprecated (since 1.32) - Deprecated. Object page should be used instead.
         *
         * This control contains one or more sap.m.Button controls or sap.ui.commons.Link controls. The LinkActionSheet
         * control is closed if the user chooses one of the buttons or links. It looks similar to sap.m.Dialog in
         * iPhone and Android, and to sap.m.Popover in iPad.
         */
        class LinkActionSheet extends sap.m.ActionSheet {
          /**
           * Constructor for a new LinkActionSheet.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: LinkActionSheetOpts
          );

          /**
           * Adds some item to the aggregation {@link #getItems items}.
           */
          addItem(
            /**
             * The item to add; if empty, nothing is inserted
             */
            oItem: sap.ui.core.Control
          ): sap.suite.ui.commons.LinkActionSheet;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:itemPress itemPress} event of this `sap.suite.ui.commons.LinkActionSheet`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.LinkActionSheet` itself.
           *
           * The event is fired when the user chooses any item.
           */
          attachItemPress(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.LinkActionSheet`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.LinkActionSheet;
          /**
           * Destroys all the items in the aggregation {@link #getItems items}.
           */
          destroyItems(): sap.suite.ui.commons.LinkActionSheet;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:itemPress itemPress} event of this `sap.suite.ui.commons.LinkActionSheet`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachItemPress(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.LinkActionSheet;
          /**
           * Creates a new subclass of class sap.suite.ui.commons.LinkActionSheet with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.m.ActionSheet.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:itemPress itemPress} to attached listeners.
           *
           * Listeners may prevent the default action of this event by using the `preventDefault`-method on the event
           * object.
           */
          fireItemPress(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * The object that initiated the event.
               */
              item?: sap.ui.core.Control;
            }
          ): boolean;
          /**
           * Gets content of aggregation {@link #getItems items}.
           *
           * These buttons or links are added to the content area in the LinkActionSheet control. If the user chooses
           * a button or a link, the LinkActionSheet is closed before the event listener is called.
           */
          getItems(): sap.ui.core.Control[];
          /**
           * Returns a metadata object for class sap.suite.ui.commons.LinkActionSheet.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getItems items}. and returns
           * its index if found or -1 otherwise.
           */
          indexOfItem(
            /**
             * The item whose index is looked for
             */
            oItem: sap.ui.core.Control
          ): number;
          /**
           * Inserts a item into the aggregation {@link #getItems items}.
           */
          insertItem(
            /**
             * The item to insert; if empty, nothing is inserted
             */
            oItem: sap.ui.core.Control,
            /**
             * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
             * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
             * the last position
             */
            iIndex: number
          ): sap.suite.ui.commons.LinkActionSheet;
          /**
           * Removes all the controls from the aggregation {@link #getItems items}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllItems(): sap.ui.core.Control[];
          /**
           * Removes a item from the aggregation {@link #getItems items}.
           */
          removeItem(
            /**
             * The item to remove or its index or id
             */
            vItem: number | string | sap.ui.core.Control
          ): sap.ui.core.Control;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:itemPress itemPress} event of this `sap.suite.ui.commons.LinkActionSheet`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.LinkActionSheet` itself.
           *
           * The event is fired when the user chooses any item.
           */
          attachItemPress(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.LinkActionSheet`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.LinkActionSheet;
        }
        /**
         * @deprecated (since 1.34) - this control is a mere wrapper for sap.suite.ui.microchart.AreaMicroChart.
         *
         * This control displays the history of values as a line mini chart or an area mini chart.
         */
        class MicroAreaChart extends sap.suite.ui.microchart.AreaMicroChart {
          /**
           * Constructor for a new MicroAreaChart.
           */
          constructor(
            /**
             * ID for the new control, automatically generated if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: MicroAreaChartOpts
          );

          /**
           * Creates a new subclass of class sap.suite.ui.commons.MicroAreaChart with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.microchart.AreaMicroChart.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.MicroAreaChart.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
        }
        /**
         * @deprecated (since 1.34) - this control is a mere wrapper for sap.suite.ui.microchart.AreaMicroChartItem.
         *
         * The configuration of the graphic element on the chart.
         */
        class MicroAreaChartItem extends sap.suite.ui.microchart
          .AreaMicroChartItem {
          /**
           * Constructor for a new MicroAreaChartItem.
           */
          constructor(
            /**
             * ID for the new control, automatically generated if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: MicroAreaChartItemOpts
          );

          /**
           * Creates a new subclass of class sap.suite.ui.commons.MicroAreaChartItem with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.microchart.AreaMicroChartItem.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.MicroAreaChartItem.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
        }
        /**
         * @deprecated (since 1.34) - this control is a mere wrapper for sap.suite.ui.microchart.AreaMicroChartLabel.
         *
         * This element contains data for a label in MicroAreaChart control.
         */
        class MicroAreaChartLabel extends sap.suite.ui.microchart
          .AreaMicroChartLabel {
          /**
           * Constructor for a new MicroAreaChartLabel.
           */
          constructor(
            /**
             * ID for the new control, automatically generated if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: MicroAreaChartLabelOpts
          );

          /**
           * Creates a new subclass of class sap.suite.ui.commons.MicroAreaChartLabel with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.microchart.AreaMicroChartLabel.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.MicroAreaChartLabel.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
        }
        /**
         * @deprecated (since 1.34) - this control is a mere wrapper for sap.suite.ui.microchart.AreaMicroChartPoint.
         *
         * This control contains data for the point.
         */
        class MicroAreaChartPoint extends sap.suite.ui.microchart
          .AreaMicroChartPoint {
          /**
           * Constructor for a new MicroAreaChartPoint.
           */
          constructor(
            /**
             * ID for the new control, automatically generated if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: MicroAreaChartPointOpts
          );

          /**
           * Creates a new subclass of class sap.suite.ui.commons.MicroAreaChartPoint with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.microchart.AreaMicroChartPoint.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.MicroAreaChartPoint.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
        }
        /**
         * The MicroProcessFlow control can be used to track the progress of a process.
         *  It is best used for linear processes, such as document, order, and approval flows, and can be embedded
         * in tiles, tables, and other containers.
         *
         *  To display more complex processes and workflows, use {@link sap.suite.ui.commons.ProcessFlow} instead.
         */
        class MicroProcessFlow extends sap.ui.core.Control {
          /**
           * Constructor for a new MicroProcessFlow.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor();

          /**
           * Adds some content to the aggregation {@link #getContent content}.
           */
          addContent(
            /**
             * The content to add; if empty, nothing is inserted
             */
            oContent: sap.suite.ui.commons.MicroProcessFlowItem
          ): sap.suite.ui.commons.MicroProcessFlow;
          /**
           * Destroys all the content in the aggregation {@link #getContent content}.
           */
          destroyContent(): sap.suite.ui.commons.MicroProcessFlow;
          /**
           * Creates a new subclass of class sap.suite.ui.commons.MicroProcessFlow with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets current value of property {@link #getAriaLabel ariaLabel}.
           *
           * ARIA label for this control to be used by screen reader software.
           */
          getAriaLabel(): string;
          /**
           * Gets content of aggregation {@link #getContent content}.
           *
           * Holds the nodes and other content diplayed in the micro process flow.
           */
          getContent(): sap.suite.ui.commons.MicroProcessFlowItem[];
          /**
           * Returns a metadata object for class sap.suite.ui.commons.MicroProcessFlow.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getRenderType renderType}.
           *
           * Determines how the micro process flow should be rendered inside its parent container.
           * When the width of the parent container does not allow for all nodes in the micro process flow to be displayed,
           * you can wrap it inside the parent container or add scrolling icons.
           *
           * Default value is `Wrap`.
           */
          getRenderType(): sap.suite.ui.commons.MicroProcessFlowRenderType;
          /**
           * Gets current value of property {@link #getWidth width}.
           *
           * The width of the micro process flow.
           *
           * Default value is `empty string`.
           */
          getWidth(): sap.ui.core.CSSSize;
          /**
           * Checks for the provided `sap.suite.ui.commons.MicroProcessFlowItem` in the aggregation {@link #getContent
           * content}. and returns its index if found or -1 otherwise.
           */
          indexOfContent(
            /**
             * The content whose index is looked for
             */
            oContent: sap.suite.ui.commons.MicroProcessFlowItem
          ): number;
          /**
           * Inserts a content into the aggregation {@link #getContent content}.
           */
          insertContent(
            /**
             * The content to insert; if empty, nothing is inserted
             */
            oContent: sap.suite.ui.commons.MicroProcessFlowItem,
            /**
             * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
             * is inserted at position 0; for a value greater than the current size of the aggregation, the content
             * is inserted at the last position
             */
            iIndex: number
          ): sap.suite.ui.commons.MicroProcessFlow;
          /**
           * Removes all the controls from the aggregation {@link #getContent content}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllContent(): sap.suite.ui.commons.MicroProcessFlowItem[];
          /**
           * Removes a content from the aggregation {@link #getContent content}.
           */
          removeContent(
            /**
             * The content to remove or its index or id
             */
            vContent:
              | number
              | string
              | sap.suite.ui.commons.MicroProcessFlowItem
          ): sap.suite.ui.commons.MicroProcessFlowItem;
          /**
           * Sets a new value for property {@link #getAriaLabel ariaLabel}.
           *
           * ARIA label for this control to be used by screen reader software.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setAriaLabel(
            /**
             * New value for property `ariaLabel`
             */
            sAriaLabel: string
          ): sap.suite.ui.commons.MicroProcessFlow;
          /**
           * Sets a new value for property {@link #getRenderType renderType}.
           *
           * Determines how the micro process flow should be rendered inside its parent container.
           * When the width of the parent container does not allow for all nodes in the micro process flow to be displayed,
           * you can wrap it inside the parent container or add scrolling icons.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `Wrap`.
           */
          setRenderType(
            /**
             * New value for property `renderType`
             */
            sRenderType: sap.suite.ui.commons.MicroProcessFlowRenderType
          ): sap.suite.ui.commons.MicroProcessFlow;
          /**
           * Sets a new value for property {@link #getWidth width}.
           *
           * The width of the micro process flow.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `empty string`.
           */
          setWidth(
            /**
             * New value for property `width`
             */
            sWidth: sap.ui.core.CSSSize
          ): sap.suite.ui.commons.MicroProcessFlow;
        }
        /**
         * Holds information about one node in the micro process flow.
         */
        class MicroProcessFlowItem extends sap.ui.core.Control {
          /**
           * Constructor for a new MicroProcessFlowItem.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: MicroProcessFlowItemOpts
          );

          /**
           * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.MicroProcessFlowItem`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.MicroProcessFlowItem` itself.
           *
           * This event is fired when the user clicks or taps a node.
           */
          attachPress(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.MicroProcessFlowItem`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.MicroProcessFlowItem;
          /**
           * Destroys the customControl in the aggregation {@link #getCustomControl customControl}.
           */
          destroyCustomControl(): sap.suite.ui.commons.MicroProcessFlowItem;
          /**
           * Destroys the intermediary in the aggregation {@link #getIntermediary intermediary}.
           */
          destroyIntermediary(): sap.suite.ui.commons.MicroProcessFlowItem;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.suite.ui.commons.MicroProcessFlowItem`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachPress(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.MicroProcessFlowItem;
          /**
           * Creates a new subclass of class sap.suite.ui.commons.MicroProcessFlowItem with name `sClassName` and
           * enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:press press} to attached listeners.
           */
          firePress(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              item?: object;
            }
          ): sap.suite.ui.commons.MicroProcessFlowItem;
          /**
           * Gets content of aggregation {@link #getCustomControl customControl}.
           *
           * Holds custom controls to be used as process flow nodes.
           */
          getCustomControl(): sap.ui.core.Control;
          /**
           * Gets current value of property {@link #getIcon icon}.
           *
           * Icon that is displayed inside the node.
           * By default, an icon that corresponds to the node's `state` is used.
           */
          getIcon(): string;
          /**
           * Gets content of aggregation {@link #getIntermediary intermediary}.
           *
           * Holds objects to be displayed between the process flow nodes.
           */
          getIntermediary(): sap.ui.core.Control;
          /**
           * Gets current value of property {@link #getKey key}.
           *
           * Key of the node.
           */
          getKey(): string;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.MicroProcessFlowItem.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getShowIntermediary showIntermediary}.
           *
           * Defines whether an object should be displayed between this node and the following node.
           * When set to `true`, a vertical red bar is displayed by default. To define custom objects, use the `intermediary`
           * aggregation.
           *
           * Default value is `false`.
           */
          getShowIntermediary(): boolean;
          /**
           * Gets current value of property {@link #getShowSeparator showSeparator}.
           *
           * Defines whether a connector line should be displayed between this node and the node that follows it.
           *
           * Default value is `true`.
           */
          getShowSeparator(): boolean;
          /**
           * Gets current value of property {@link #getState state}.
           *
           * State associated with this node.
           * The state defines the semantic color applied to the node. Available states include `Standard` (neutral),
           * `Error` (negative), `Success` (positive), and `Warning` (critical).
           *
           * Default value is `Standard`.
           */
          getState(): sap.ui.core.ValueState;
          /**
           * Gets current value of property {@link #getStepWidth stepWidth}.
           *
           * Distance between this node and the following node.
           * When set to a percentage value, the distance is calculated based on the height of the parent container.
           */
          getStepWidth(): sap.ui.core.CSSSize;
          /**
           * Gets current value of property {@link #getTitle title}.
           *
           * Title associated with this node.
           * The title is displayed as a tooltip when the user hovers over the node. This title can also be used by
           * screen reader software.
           */
          getTitle(): string;
          /**
           * Sets the aggregated {@link #getCustomControl customControl}.
           */
          setCustomControl(
            /**
             * The customControl to set
             */
            oCustomControl: sap.ui.core.Control
          ): sap.suite.ui.commons.MicroProcessFlowItem;
          /**
           * Sets a new value for property {@link #getIcon icon}.
           *
           * Icon that is displayed inside the node.
           * By default, an icon that corresponds to the node's `state` is used.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setIcon(
            /**
             * New value for property `icon`
             */
            sIcon: string
          ): sap.suite.ui.commons.MicroProcessFlowItem;
          /**
           * Sets the aggregated {@link #getIntermediary intermediary}.
           */
          setIntermediary(
            /**
             * The intermediary to set
             */
            oIntermediary: sap.ui.core.Control
          ): sap.suite.ui.commons.MicroProcessFlowItem;
          /**
           * Sets a new value for property {@link #getKey key}.
           *
           * Key of the node.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setKey(
            /**
             * New value for property `key`
             */
            sKey: string
          ): sap.suite.ui.commons.MicroProcessFlowItem;
          /**
           * Sets a new value for property {@link #getShowIntermediary showIntermediary}.
           *
           * Defines whether an object should be displayed between this node and the following node.
           * When set to `true`, a vertical red bar is displayed by default. To define custom objects, use the `intermediary`
           * aggregation.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setShowIntermediary(
            /**
             * New value for property `showIntermediary`
             */
            bShowIntermediary: boolean
          ): sap.suite.ui.commons.MicroProcessFlowItem;
          /**
           * Sets a new value for property {@link #getShowSeparator showSeparator}.
           *
           * Defines whether a connector line should be displayed between this node and the node that follows it.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setShowSeparator(
            /**
             * New value for property `showSeparator`
             */
            bShowSeparator: boolean
          ): sap.suite.ui.commons.MicroProcessFlowItem;
          /**
           * Sets a new value for property {@link #getState state}.
           *
           * State associated with this node.
           * The state defines the semantic color applied to the node. Available states include `Standard` (neutral),
           * `Error` (negative), `Success` (positive), and `Warning` (critical).
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `Standard`.
           */
          setState(
            /**
             * New value for property `state`
             */
            sState: sap.ui.core.ValueState
          ): sap.suite.ui.commons.MicroProcessFlowItem;
          /**
           * Sets a new value for property {@link #getStepWidth stepWidth}.
           *
           * Distance between this node and the following node.
           * When set to a percentage value, the distance is calculated based on the height of the parent container.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setStepWidth(
            /**
             * New value for property `stepWidth`
             */
            sStepWidth: sap.ui.core.CSSSize
          ): sap.suite.ui.commons.MicroProcessFlowItem;
          /**
           * Sets a new value for property {@link #getTitle title}.
           *
           * Title associated with this node.
           * The title is displayed as a tooltip when the user hovers over the node. This title can also be used by
           * screen reader software.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setTitle(
            /**
             * New value for property `title`
             */
            sTitle: string
          ): sap.suite.ui.commons.MicroProcessFlowItem;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.MicroProcessFlowItem`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.MicroProcessFlowItem` itself.
           *
           * This event is fired when the user clicks or taps a node.
           */
          attachPress(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.MicroProcessFlowItem`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.MicroProcessFlowItem;
        }
        /**
         * @deprecated (since 1.25) - This control has been deprecated in favor of new sap.suite.ui.commons.NumericContent.
         *
         * This control is used in a tile or any other place to display numeric values and an icon.
         */
        class MonitoringContent extends sap.ui.core.Control {
          /**
           * Constructor for a new MonitoringContent.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: MonitoringContentOpts
          );

          /**
           * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.MonitoringContent`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.MonitoringContent` itself.
           *
           * The event is fired when the user chooses the monitoring content.
           */
          attachPress(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.MonitoringContent`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.MonitoringContent;
          /**
           * Destroys the icon in the aggregation {@link #getIcon icon}.
           */
          destroyIcon(): sap.suite.ui.commons.MonitoringContent;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.suite.ui.commons.MonitoringContent`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachPress(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.MonitoringContent;
          /**
           * Creates a new subclass of class sap.suite.ui.commons.MonitoringContent with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:press press} to attached listeners.
           */
          firePress(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.suite.ui.commons.MonitoringContent;
          /**
           * Gets current value of property {@link #getAnimateTextChange animateTextChange}.
           *
           * If set to true, changing of the value is animated.
           *
           * Default value is `true`.
           */
          getAnimateTextChange(): boolean;
          /**
           * Gets content of aggregation {@link #getIcon icon}.
           *
           * The icon that is displayed in the content.
           */
          getIcon(): sap.ui.core.Icon;
          /**
           * Gets current value of property {@link #getIconSrc iconSrc}.
           *
           * This property is set by the return value of sap.ui.core.IconPool.getIconURI that is called with an icon
           * name parameter and optional collection parameter. The collection parameter is required when the application
           * extended icons are used.
           */
          getIconSrc(): string;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.MonitoringContent.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getSize size}.
           *
           * Updates the size of the chart. If not set then the default size is applied based on the device tile.
           *
           * Default value is `Auto`.
           */
          getSize(): sap.suite.ui.commons.InfoTileSize;
          /**
           * Gets current value of property {@link #getState state}.
           *
           * Indicates the load status.
           *
           * Default value is `Loaded`.
           */
          getState(): sap.suite.ui.commons.LoadState;
          /**
           * Gets current value of property {@link #getValue value}.
           *
           * The actual value.
           */
          getValue(): string;
          /**
           * Sets a new value for property {@link #getAnimateTextChange animateTextChange}.
           *
           * If set to true, changing of the value is animated.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setAnimateTextChange(
            /**
             * New value for property `animateTextChange`
             */
            bAnimateTextChange: boolean
          ): sap.suite.ui.commons.MonitoringContent;
          /**
           * Sets the aggregated {@link #getIcon icon}.
           */
          setIcon(
            /**
             * The icon to set
             */
            oIcon: sap.ui.core.Icon
          ): sap.suite.ui.commons.MonitoringContent;
          /**
           * Sets a new value for property {@link #getIconSrc iconSrc}.
           *
           * This property is set by the return value of sap.ui.core.IconPool.getIconURI that is called with an icon
           * name parameter and optional collection parameter. The collection parameter is required when the application
           * extended icons are used.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setIconSrc(
            /**
             * New value for property `iconSrc`
             */
            sIconSrc: string
          ): sap.suite.ui.commons.MonitoringContent;
          /**
           * Sets a new value for property {@link #getSize size}.
           *
           * Updates the size of the chart. If not set then the default size is applied based on the device tile.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `Auto`.
           */
          setSize(
            /**
             * New value for property `size`
             */
            sSize: sap.suite.ui.commons.InfoTileSize
          ): sap.suite.ui.commons.MonitoringContent;
          /**
           * Sets a new value for property {@link #getState state}.
           *
           * Indicates the load status.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `Loaded`.
           */
          setState(
            /**
             * New value for property `state`
             */
            sState: sap.suite.ui.commons.LoadState
          ): sap.suite.ui.commons.MonitoringContent;
          /**
           * Sets a new value for property {@link #getValue value}.
           *
           * The actual value.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setValue(
            /**
             * New value for property `value`
             */
            sValue: string
          ): sap.suite.ui.commons.MonitoringContent;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.MonitoringContent`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.MonitoringContent` itself.
           *
           * The event is fired when the user chooses the monitoring content.
           */
          attachPress(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.MonitoringContent`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.MonitoringContent;
        }
        /**
         * @deprecated (since 1.25) - This control has been deprecated in favor of new sap.suite.ui.commons.GenericTile.
         *
         * This control is the implementation of the InfoTile to show a numeric value and an icon.
         */
        class MonitoringTile extends sap.suite.ui.commons.InfoTile {
          /**
           * Constructor for a new MonitoringTile.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: MonitoringTileOpts
          );

          /**
           * Creates a new subclass of class sap.suite.ui.commons.MonitoringTile with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.InfoTile.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets current value of property {@link #getFooterColor footerColor}.
           *
           * The color of the tile footer text.
           *
           * Default value is `Positive`.
           */
          getFooterColor(): sap.suite.ui.commons.InfoTileTextColor;
          /**
           * Gets current value of property {@link #getIconSrc iconSrc}.
           *
           * This property is set by the return value of sap.ui.core.IconPool.getIconURI that is called with an icon
           * name parameter and optional collection parameter. The collection parameter is required when the application
           * extended icons are used.
           */
          getIconSrc(): string;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.MonitoringTile.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getValue value}.
           *
           * The actual value.
           */
          getValue(): string;
          /**
           * Sets a new value for property {@link #getFooterColor footerColor}.
           *
           * The color of the tile footer text.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `Positive`.
           */
          setFooterColor(
            /**
             * New value for property `footerColor`
             */
            sFooterColor: sap.suite.ui.commons.InfoTileTextColor
          ): sap.suite.ui.commons.MonitoringTile;
          /**
           * Sets a new value for property {@link #getIconSrc iconSrc}.
           *
           * This property is set by the return value of sap.ui.core.IconPool.getIconURI that is called with an icon
           * name parameter and optional collection parameter. The collection parameter is required when the application
           * extended icons are used.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setIconSrc(
            /**
             * New value for property `iconSrc`
             */
            sIconSrc: string
          ): sap.suite.ui.commons.MonitoringTile;
          /**
           * Sets a new value for property {@link #getValue value}.
           *
           * The actual value.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setValue(
            /**
             * New value for property `value`
             */
            sValue: string
          ): sap.suite.ui.commons.MonitoringTile;
        }
        /**
         * @deprecated (since 1.34) - this control is a mere wrapper for sap.m.NewsContent.
         *
         * This control displays the news content text and subheader in a tile.
         */
        class NewsContent extends sap.m.NewsContent {
          /**
           * Constructor for a new NewsContent.
           */
          constructor(
            /**
             * ID for the new control, automatically generated if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: NewsContentOpts
          );

          /**
           * Creates a new subclass of class sap.suite.ui.commons.NewsContent with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.m.NewsContent.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.NewsContent.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
        }
        /**
         * @deprecated (since 1.32) - Deprecated. Standard Fiori technology should be used.
         *
         * This control allows you to create and store your notes for further reference.
         */
        class NoteTaker extends sap.ui.core.Control {
          /**
           * Constructor for a new NoteTaker.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: NoteTakerOpts
          );

          /**
           * Adds some card to the aggregation {@link #getCards cards}.
           */
          addCard(
            /**
             * The card to add; if empty, nothing is inserted
             */
            oCard: sap.suite.ui.commons.NoteTakerCard
          ): sap.suite.ui.commons.NoteTaker;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:addCard addCard} event of this `sap.suite.ui.commons.NoteTaker`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.NoteTaker` itself.
           *
           * The event is fired when a new card is added if no data binding is available. If data binding is available,
           * the event is fired to notify a developer to add an element to the model.
           */
          attachAddCard(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTaker` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.NoteTaker;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:attachmentClick attachmentClick} event of this
           * `sap.suite.ui.commons.NoteTaker`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.NoteTaker` itself.
           *
           * The event is fired when a user presses the attachment link.
           */
          attachAttachmentClick(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTaker` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.NoteTaker;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:attachmentDelete attachmentDelete} event of
           * this `sap.suite.ui.commons.NoteTaker`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.NoteTaker` itself.
           *
           * The event is fired, when user deletes the attached file.
           */
          attachAttachmentDelete(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTaker` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.NoteTaker;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:attachmentSelect attachmentSelect} event of
           * this `sap.suite.ui.commons.NoteTaker`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.NoteTaker` itself.
           *
           * The event is fired when the value of attached file has been changed.
           */
          attachAttachmentSelect(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTaker` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.NoteTaker;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:attachmentUploadComplete attachmentUploadComplete}
           * event of this `sap.suite.ui.commons.NoteTaker`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.NoteTaker` itself.
           *
           * Fire event uploadComplete to attached listeners.
           */
          attachAttachmentUploadComplete(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTaker` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.NoteTaker;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:deleteCard deleteCard} event of this `sap.suite.ui.commons.NoteTaker`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.NoteTaker` itself.
           *
           * The event is fired when a new card is deleted if no data binding is available. If data binding is available,
           * the event is fired to notify a developer to delete the element from the model.
           */
          attachDeleteCard(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTaker` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.NoteTaker;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:editCard editCard} event of this `sap.suite.ui.commons.NoteTaker`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.NoteTaker` itself.
           *
           * The event is fired when a new card has been edited.
           */
          attachEditCard(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTaker` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.NoteTaker;
          /**
           * Destroys all the cards in the aggregation {@link #getCards cards}.
           */
          destroyCards(): sap.suite.ui.commons.NoteTaker;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:addCard addCard} event of this `sap.suite.ui.commons.NoteTaker`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachAddCard(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.NoteTaker;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:attachmentClick attachmentClick} event of
           * this `sap.suite.ui.commons.NoteTaker`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachAttachmentClick(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.NoteTaker;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:attachmentDelete attachmentDelete} event of
           * this `sap.suite.ui.commons.NoteTaker`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachAttachmentDelete(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.NoteTaker;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:attachmentSelect attachmentSelect} event of
           * this `sap.suite.ui.commons.NoteTaker`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachAttachmentSelect(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.NoteTaker;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:attachmentUploadComplete attachmentUploadComplete}
           * event of this `sap.suite.ui.commons.NoteTaker`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachAttachmentUploadComplete(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.NoteTaker;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:deleteCard deleteCard} event of this `sap.suite.ui.commons.NoteTaker`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachDeleteCard(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.NoteTaker;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:editCard editCard} event of this `sap.suite.ui.commons.NoteTaker`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachEditCard(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.NoteTaker;
          /**
           * Creates a new subclass of class sap.suite.ui.commons.NoteTaker with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:addCard addCard} to attached listeners.
           */
          fireAddCard(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * The title of the note to be added.
               */
              title?: string;
              /**
               * The text of the note to be added.
               */
              body?: string;
              /**
               * The timestamp of the note to be added.
               */
              timestamp?: object;
              /**
               * The View All link appears in the Note Taker card when length of a body text exceeds the specified value.
               */
              viewAllTrigger?: number;
              /**
               * Indicates positive information for a new card.
               */
              thumbUp?: boolean;
              /**
               * Indicates negative information for a new card.
               */
              thumbDown?: boolean;
              /**
               * Stores the name of the file attached to the card.
               */
              attachmentFilename?: string;
              /**
               * The unique ID if available.
               */
              uid?: string;
              /**
               * Stores the URL of the file attached to the card.
               */
              attachmentUrl?: string;
              /**
               * A newly created card if no data binding is available. If data binding is available, this parameter is
               * empty.
               */
              card?: sap.suite.ui.commons.NoteTakerCard;
            }
          ): sap.suite.ui.commons.NoteTaker;
          /**
           * Fires event {@link #event:attachmentClick attachmentClick} to attached listeners.
           */
          fireAttachmentClick(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * The unique ID of the card.
               */
              uid?: string;
              /**
               * If true, a user chooses the attachment in the Note card. If false, a user chooses the attachment in the
               * Feeder card.
               */
              isCardAttachment?: string;
              /**
               * A name of the attached file.
               */
              filename?: string;
            }
          ): sap.suite.ui.commons.NoteTaker;
          /**
           * Fires event {@link #event:attachmentDelete attachmentDelete} to attached listeners.
           */
          fireAttachmentDelete(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * A name of the attached file.
               */
              filename?: string;
              /**
               * The unique ID of the card.
               */
              uid?: string;
            }
          ): sap.suite.ui.commons.NoteTaker;
          /**
           * Fires event {@link #event:attachmentSelect attachmentSelect} to attached listeners.
           */
          fireAttachmentSelect(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * A name of the attached file.
               */
              filename?: string;
            }
          ): sap.suite.ui.commons.NoteTaker;
          /**
           * Fires event {@link #event:attachmentUploadComplete attachmentUploadComplete} to attached listeners.
           */
          fireAttachmentUploadComplete(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * The response message of the String type that comes from the server. On the server side this response
               * has to be put within the "body" tags of the response document of the iFrame. It can consist of a return
               * code and an optional message. This does not work in cross-domain scenarios.
               */
              response?: string;
              /**
               * The unique ID of the card.
               */
              uid?: string;
            }
          ): sap.suite.ui.commons.NoteTaker;
          /**
           * Fires event {@link #event:deleteCard deleteCard} to attached listeners.
           */
          fireDeleteCard(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * The title of the card to be deleted.
               */
              title?: string;
              /**
               * The text of the card to be deleted.
               */
              body?: string;
              /**
               * The timestamp of the card to be deleted.
               */
              timestamp?: string;
              /**
               * The unique ID that was set by an application developer.
               */
              uid?: string;
              /**
               * Indicates positive information for the deleted card.
               */
              thumbUp?: boolean;
              /**
               * Indicates negative information for the deleted card.
               */
              thumbDown?: boolean;
            }
          ): sap.suite.ui.commons.NoteTaker;
          /**
           * Fires event {@link #event:editCard editCard} to attached listeners.
           */
          fireEditCard(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * The title of the edited card.
               */
              title?: string;
              /**
               * A new text of the edited card.
               */
              body?: string;
              /**
               * A new timestamp of the edited card.
               */
              timestamp?: string;
              /**
               * A unique ID that was set by an application developer.
               */
              uid?: string;
              /**
               * Indicates positive information for the edited card.
               */
              thumbUp?: boolean;
              /**
               * Indicates negative information for the edited card.
               */
              thumbDown?: boolean;
              /**
               * Updated array of the String type tags applied to the card during editing.
               */
              tags?: object;
            }
          ): sap.suite.ui.commons.NoteTaker;
          /**
           * Gets current value of property {@link #getAttachmentName attachmentName}.
           *
           * The attachment property name for identification on the server side after sending data to the server.
           *
           * Default value is `attachment`.
           */
          getAttachmentName(): string;
          /**
           * Gets current value of property {@link #getAttachmentUploadUrl attachmentUploadUrl}.
           *
           * Defines a path on the server where the attached files are uploaded.
           */
          getAttachmentUploadUrl(): string;
          /**
           * Gets content of aggregation {@link #getCards cards}.
           *
           * This aggregation allows you to add note cards to the Note Taker and remove them from the Note Taker.
           */
          getCards(): sap.suite.ui.commons.NoteTakerCard[];
          /**
           * Gets current value of property {@link #getCardViewAllTrigger cardViewAllTrigger}.
           *
           * The View All link appears in the Note Taker card when length of a card body text exceeds the specified
           * value. The updated value of this property is not applied to the existing cards.
           *
           * Default value is `1800`.
           */
          getCardViewAllTrigger(): number;
          /**
           * Gets current value of property {@link #getFilterCriteria filterCriteria}.
           *
           * A composite object containing criteria for filtering cards in the Note Taker.
           */
          getFilterCriteria(): object;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.NoteTaker.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getVisibleNotes visibleNotes}.
           *
           * Number of notes to display.
           *
           * Default value is `2`.
           */
          getVisibleNotes(): number;
          /**
           * Checks for the provided `sap.suite.ui.commons.NoteTakerCard` in the aggregation {@link #getCards cards}.
           * and returns its index if found or -1 otherwise.
           */
          indexOfCard(
            /**
             * The card whose index is looked for
             */
            oCard: sap.suite.ui.commons.NoteTakerCard
          ): number;
          /**
           * Inserts a card into the aggregation {@link #getCards cards}.
           */
          insertCard(
            /**
             * The card to insert; if empty, nothing is inserted
             */
            oCard: sap.suite.ui.commons.NoteTakerCard,
            /**
             * The `0`-based index the card should be inserted at; for a negative value of `iIndex`, the card is inserted
             * at position 0; for a value greater than the current size of the aggregation, the card is inserted at
             * the last position
             */
            iIndex: number
          ): sap.suite.ui.commons.NoteTaker;
          /**
           * Removes all the controls from the aggregation {@link #getCards cards}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllCards(): sap.suite.ui.commons.NoteTakerCard[];
          /**
           * Removes a card from the aggregation {@link #getCards cards}.
           */
          removeCard(
            /**
             * The card to remove or its index or id
             */
            vCard: number | string | sap.suite.ui.commons.NoteTakerCard
          ): sap.suite.ui.commons.NoteTakerCard;
          /**
           * Sets a new value for property {@link #getAttachmentName attachmentName}.
           *
           * The attachment property name for identification on the server side after sending data to the server.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `attachment`.
           */
          setAttachmentName(
            /**
             * New value for property `attachmentName`
             */
            sAttachmentName: string
          ): sap.suite.ui.commons.NoteTaker;
          /**
           * Sets a new value for property {@link #getAttachmentUploadUrl attachmentUploadUrl}.
           *
           * Defines a path on the server where the attached files are uploaded.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setAttachmentUploadUrl(
            /**
             * New value for property `attachmentUploadUrl`
             */
            sAttachmentUploadUrl: string
          ): sap.suite.ui.commons.NoteTaker;
          /**
           * Sets a new value for property {@link #getCardViewAllTrigger cardViewAllTrigger}.
           *
           * The View All link appears in the Note Taker card when length of a card body text exceeds the specified
           * value. The updated value of this property is not applied to the existing cards.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `1800`.
           */
          setCardViewAllTrigger(
            /**
             * New value for property `cardViewAllTrigger`
             */
            iCardViewAllTrigger: number
          ): sap.suite.ui.commons.NoteTaker;
          /**
           * Sets a new value for property {@link #getFilterCriteria filterCriteria}.
           *
           * A composite object containing criteria for filtering cards in the Note Taker.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setFilterCriteria(
            /**
             * New value for property `filterCriteria`
             */
            oFilterCriteria: object
          ): sap.suite.ui.commons.NoteTaker;
          /**
           * Sets a new value for property {@link #getVisibleNotes visibleNotes}.
           *
           * Number of notes to display.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `2`.
           */
          setVisibleNotes(
            /**
             * New value for property `visibleNotes`
             */
            iVisibleNotes: number
          ): sap.suite.ui.commons.NoteTaker;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:addCard addCard} event of this `sap.suite.ui.commons.NoteTaker`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.NoteTaker` itself.
           *
           * The event is fired when a new card is added if no data binding is available. If data binding is available,
           * the event is fired to notify a developer to add an element to the model.
           */
          attachAddCard(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTaker` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.NoteTaker;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:attachmentClick attachmentClick} event of this
           * `sap.suite.ui.commons.NoteTaker`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.NoteTaker` itself.
           *
           * The event is fired when a user presses the attachment link.
           */
          attachAttachmentClick(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTaker` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.NoteTaker;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:attachmentDelete attachmentDelete} event of
           * this `sap.suite.ui.commons.NoteTaker`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.NoteTaker` itself.
           *
           * The event is fired, when user deletes the attached file.
           */
          attachAttachmentDelete(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTaker` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.NoteTaker;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:attachmentSelect attachmentSelect} event of
           * this `sap.suite.ui.commons.NoteTaker`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.NoteTaker` itself.
           *
           * The event is fired when the value of attached file has been changed.
           */
          attachAttachmentSelect(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTaker` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.NoteTaker;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:attachmentUploadComplete attachmentUploadComplete}
           * event of this `sap.suite.ui.commons.NoteTaker`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.NoteTaker` itself.
           *
           * Fire event uploadComplete to attached listeners.
           */
          attachAttachmentUploadComplete(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTaker` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.NoteTaker;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:deleteCard deleteCard} event of this `sap.suite.ui.commons.NoteTaker`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.NoteTaker` itself.
           *
           * The event is fired when a new card is deleted if no data binding is available. If data binding is available,
           * the event is fired to notify a developer to delete the element from the model.
           */
          attachDeleteCard(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTaker` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.NoteTaker;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:editCard editCard} event of this `sap.suite.ui.commons.NoteTaker`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.NoteTaker` itself.
           *
           * The event is fired when a new card has been edited.
           */
          attachEditCard(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTaker` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.NoteTaker;
        }
        /**
         * @deprecated (since 1.32) - Deprecated. Standard Fiori technology should be used.
         *
         * This control allows you to store Note Taker card header and body text.
         */
        class NoteTakerCard extends sap.ui.core.Control {
          /**
           * Constructor for a new NoteTakerCard.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: NoteTakerCardOpts
          );

          /**
           * Attaches event handler `fnFunction` to the {@link #event:attachmentClick attachmentClick} event of this
           * `sap.suite.ui.commons.NoteTakerCard`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.NoteTakerCard` itself.
           *
           * The event is fired when a user chooses the attachment download link.
           */
          attachAttachmentClick(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTakerCard`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.NoteTakerCard;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:deleteNote deleteNote} event of this `sap.suite.ui.commons.NoteTakerCard`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.NoteTakerCard` itself.
           *
           * The event is fired when a card needs to be deleted. This event is needed for the Note Taker control.
           */
          attachDeleteNote(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTakerCard`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.NoteTakerCard;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:editNote editNote} event of this `sap.suite.ui.commons.NoteTakerCard`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.NoteTakerCard` itself.
           *
           * The event is fired when a user chooses the Edit button in the note card.
           */
          attachEditNote(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTakerCard`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.NoteTakerCard;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:attachmentClick attachmentClick} event of
           * this `sap.suite.ui.commons.NoteTakerCard`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachAttachmentClick(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.NoteTakerCard;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:deleteNote deleteNote} event of this `sap.suite.ui.commons.NoteTakerCard`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachDeleteNote(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.NoteTakerCard;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:editNote editNote} event of this `sap.suite.ui.commons.NoteTakerCard`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachEditNote(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.NoteTakerCard;
          /**
           * Creates a new subclass of class sap.suite.ui.commons.NoteTakerCard with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:attachmentClick attachmentClick} to attached listeners.
           */
          fireAttachmentClick(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * A unique ID that was set by an application developer.
               */
              uid?: string;
              /**
               * The address of the file attached to the card.
               */
              url?: string;
              /**
               * The name of the file attached to the card.
               */
              filename?: string;
            }
          ): sap.suite.ui.commons.NoteTakerCard;
          /**
           * Fires event {@link #event:deleteNote deleteNote} to attached listeners.
           */
          fireDeleteNote(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * The HTML ID of a card that needs to be deleted.
               */
              cardId?: string;
              /**
               * The title of the card to be deleted.
               */
              title?: string;
              /**
               * The text of the card to be deleted.
               */
              body?: string;
              /**
               * The timestamp of the card to be deleted.
               */
              timestamp?: string;
              /**
               * A unique ID that was set by an application developer.
               */
              uid?: string;
              /**
               * Indicates positive information for the deleted card.
               */
              thumbUp?: boolean;
              /**
               * Indicates negative information for the deleted card.
               */
              thumbDown?: boolean;
            }
          ): sap.suite.ui.commons.NoteTakerCard;
          /**
           * Fires event {@link #event:editNote editNote} to attached listeners.
           */
          fireEditNote(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * The title of edited card.
               */
              title?: string;
              /**
               * A new text of the edited card.
               */
              body?: string;
              /**
               * A new timestamp of the edited card.
               */
              timestamp?: string;
              /**
               * A unique ID that was set by an application developer.
               */
              uid?: string;
              /**
               * Indicates positive information for the edited card.
               */
              thumbUp?: boolean;
              /**
               * Indicates negative information for the edited card.
               */
              thumbDown?: boolean;
              /**
               * Updated array of the String type tags applied to the card during editing.
               */
              tags?: object;
            }
          ): sap.suite.ui.commons.NoteTakerCard;
          /**
           * Gets current value of property {@link #getAllTags allTags}.
           *
           * Contains an array of the String type tags available for selection during the card update.
           *
           * Default value is `[]`.
           */
          getAllTags(): object;
          /**
           * Gets current value of property {@link #getAttachmentFilename attachmentFilename}.
           *
           * Stores the name of the file attached to the card.
           */
          getAttachmentFilename(): string;
          /**
           * Gets current value of property {@link #getAttachmentUrl attachmentUrl}.
           *
           * Stores the address of the file attached to the card.
           */
          getAttachmentUrl(): string;
          /**
           * Gets current value of property {@link #getBody body}.
           *
           * Stores the Note Taker card body text.
           */
          getBody(): string;
          /**
           * Gets current value of property {@link #getHeader header}.
           *
           * Stores the Note Taker card header.
           */
          getHeader(): string;
          /**
           * Gets current value of property {@link #getIsFiltered isFiltered}.
           *
           * Shows whether the note card is hidden by the applied filter.
           *
           * Default value is `false`.
           */
          getIsFiltered(): boolean;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.NoteTakerCard.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getTags tags}.
           *
           * Contains an array of the String type tags applied to the current card.
           *
           * Default value is `[]`.
           */
          getTags(): object;
          /**
           * Gets current value of property {@link #getThumbDown thumbDown}.
           *
           * Indicates negative information for the card.
           */
          getThumbDown(): boolean;
          /**
           * Gets current value of property {@link #getThumbUp thumbUp}.
           *
           * Indicates positive information for the card.
           */
          getThumbUp(): boolean;
          /**
           * Gets current value of property {@link #getTimestamp timestamp}.
           *
           * Stores a timestamp of the Note Taker card.
           *
           * Default value is `new Date()`.
           */
          getTimestamp(): object;
          /**
           * Gets current value of property {@link #getUid uid}.
           *
           * The card ID. This property should be set by an application developer.
           */
          getUid(): string;
          /**
           * Gets current value of property {@link #getViewAllTrigger viewAllTrigger}.
           *
           * The View All link appears in the Note Taker card if a body text length exceeds the specified value.
           *
           * Default value is `1800`.
           */
          getViewAllTrigger(): number;
          /**
           * Sets a new value for property {@link #getAllTags allTags}.
           *
           * Contains an array of the String type tags available for selection during the card update.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `[]`.
           */
          setAllTags(
            /**
             * New value for property `allTags`
             */
            oAllTags: object
          ): sap.suite.ui.commons.NoteTakerCard;
          /**
           * Sets a new value for property {@link #getAttachmentFilename attachmentFilename}.
           *
           * Stores the name of the file attached to the card.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setAttachmentFilename(
            /**
             * New value for property `attachmentFilename`
             */
            sAttachmentFilename: string
          ): sap.suite.ui.commons.NoteTakerCard;
          /**
           * Sets a new value for property {@link #getAttachmentUrl attachmentUrl}.
           *
           * Stores the address of the file attached to the card.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setAttachmentUrl(
            /**
             * New value for property `attachmentUrl`
             */
            sAttachmentUrl: string
          ): sap.suite.ui.commons.NoteTakerCard;
          /**
           * Sets a new value for property {@link #getBody body}.
           *
           * Stores the Note Taker card body text.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setBody(
            /**
             * New value for property `body`
             */
            sBody: string
          ): sap.suite.ui.commons.NoteTakerCard;
          /**
           * Sets a new value for property {@link #getHeader header}.
           *
           * Stores the Note Taker card header.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setHeader(
            /**
             * New value for property `header`
             */
            sHeader: string
          ): sap.suite.ui.commons.NoteTakerCard;
          /**
           * Sets a new value for property {@link #getIsFiltered isFiltered}.
           *
           * Shows whether the note card is hidden by the applied filter.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setIsFiltered(
            /**
             * New value for property `isFiltered`
             */
            bIsFiltered: boolean
          ): sap.suite.ui.commons.NoteTakerCard;
          /**
           * Sets a new value for property {@link #getTags tags}.
           *
           * Contains an array of the String type tags applied to the current card.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `[]`.
           */
          setTags(
            /**
             * New value for property `tags`
             */
            oTags: object
          ): sap.suite.ui.commons.NoteTakerCard;
          /**
           * Sets a new value for property {@link #getThumbDown thumbDown}.
           *
           * Indicates negative information for the card.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setThumbDown(
            /**
             * New value for property `thumbDown`
             */
            bThumbDown: boolean
          ): sap.suite.ui.commons.NoteTakerCard;
          /**
           * Sets a new value for property {@link #getThumbUp thumbUp}.
           *
           * Indicates positive information for the card.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setThumbUp(
            /**
             * New value for property `thumbUp`
             */
            bThumbUp: boolean
          ): sap.suite.ui.commons.NoteTakerCard;
          /**
           * Sets a new value for property {@link #getTimestamp timestamp}.
           *
           * Stores a timestamp of the Note Taker card.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `new Date()`.
           */
          setTimestamp(
            /**
             * New value for property `timestamp`
             */
            oTimestamp: object
          ): sap.suite.ui.commons.NoteTakerCard;
          /**
           * Sets a new value for property {@link #getUid uid}.
           *
           * The card ID. This property should be set by an application developer.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setUid(
            /**
             * New value for property `uid`
             */
            sUid: string
          ): sap.suite.ui.commons.NoteTakerCard;
          /**
           * Sets a new value for property {@link #getViewAllTrigger viewAllTrigger}.
           *
           * The View All link appears in the Note Taker card if a body text length exceeds the specified value.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `1800`.
           */
          setViewAllTrigger(
            /**
             * New value for property `viewAllTrigger`
             */
            iViewAllTrigger: number
          ): sap.suite.ui.commons.NoteTakerCard;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:attachmentClick attachmentClick} event of this
           * `sap.suite.ui.commons.NoteTakerCard`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.NoteTakerCard` itself.
           *
           * The event is fired when a user chooses the attachment download link.
           */
          attachAttachmentClick(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTakerCard`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.NoteTakerCard;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:deleteNote deleteNote} event of this `sap.suite.ui.commons.NoteTakerCard`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.NoteTakerCard` itself.
           *
           * The event is fired when a card needs to be deleted. This event is needed for the Note Taker control.
           */
          attachDeleteNote(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTakerCard`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.NoteTakerCard;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:editNote editNote} event of this `sap.suite.ui.commons.NoteTakerCard`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.NoteTakerCard` itself.
           *
           * The event is fired when a user chooses the Edit button in the note card.
           */
          attachEditNote(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTakerCard`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.NoteTakerCard;
        }
        /**
         * @deprecated (since 1.32) - Deprecated. Standard Fiori technology should be used.
         *
         * This control allows you to enter a quick note and N note cards.
         */
        class NoteTakerFeeder extends sap.ui.core.Control {
          /**
           * Constructor for a new NoteTakerFeeder.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: NoteTakerFeederOpts
          );

          /**
           * Attaches event handler `fnFunction` to the {@link #event:addNote addNote} event of this `sap.suite.ui.commons.NoteTakerFeeder`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.NoteTakerFeeder` itself.
           *
           * The event is fired when a user chooses the Add button in the control.
           */
          attachAddNote(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTakerFeeder`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.NoteTakerFeeder;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:attachmentClick attachmentClick} event of this
           * `sap.suite.ui.commons.NoteTakerFeeder`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.NoteTakerFeeder` itself.
           *
           * The event is fired when a user presses the attachment link.
           */
          attachAttachmentClick(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTakerFeeder`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.NoteTakerFeeder;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:attachmentDelete attachmentDelete} event of
           * this `sap.suite.ui.commons.NoteTakerFeeder`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.NoteTakerFeeder` itself.
           *
           * The event is fired when a user presses the Delete button in the Feeder card.
           */
          attachAttachmentDelete(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTakerFeeder`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.NoteTakerFeeder;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:attachmentSelect attachmentSelect} event of
           * this `sap.suite.ui.commons.NoteTakerFeeder`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.NoteTakerFeeder` itself.
           *
           * The event is fired when the value of attached file has been changed.
           */
          attachAttachmentSelect(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTakerFeeder`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.NoteTakerFeeder;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:attachmentUploadComplete attachmentUploadComplete}
           * event of this `sap.suite.ui.commons.NoteTakerFeeder`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.NoteTakerFeeder` itself.
           *
           * The event is fired when the upload of the file is completed. However this covers only the client side
           * of the Upload process and does not give any success status from the server.
           */
          attachAttachmentUploadComplete(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTakerFeeder`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.NoteTakerFeeder;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:addNote addNote} event of this `sap.suite.ui.commons.NoteTakerFeeder`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachAddNote(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.NoteTakerFeeder;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:attachmentClick attachmentClick} event of
           * this `sap.suite.ui.commons.NoteTakerFeeder`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachAttachmentClick(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.NoteTakerFeeder;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:attachmentDelete attachmentDelete} event of
           * this `sap.suite.ui.commons.NoteTakerFeeder`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachAttachmentDelete(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.NoteTakerFeeder;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:attachmentSelect attachmentSelect} event of
           * this `sap.suite.ui.commons.NoteTakerFeeder`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachAttachmentSelect(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.NoteTakerFeeder;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:attachmentUploadComplete attachmentUploadComplete}
           * event of this `sap.suite.ui.commons.NoteTakerFeeder`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachAttachmentUploadComplete(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.NoteTakerFeeder;
          /**
           * Creates a new subclass of class sap.suite.ui.commons.NoteTakerFeeder with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:addNote addNote} to attached listeners.
           */
          fireAddNote(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * The title of the note to be added.
               */
              title?: string;
              /**
               * The text of the note to be added.
               */
              body?: string;
              /**
               * The timestamp of the note to be added.
               */
              timestamp?: object;
              /**
               * If set to true, a new card should be marked as positive one.
               */
              thumbUp?: boolean;
              /**
               * If set to true, a new card should be marked as negative one.
               */
              thumbDown?: boolean;
              /**
               * Stores the attachment file name for a new card.
               */
              attachmentFilename?: string;
            }
          ): sap.suite.ui.commons.NoteTakerFeeder;
          /**
           * Fires event {@link #event:attachmentClick attachmentClick} to attached listeners.
           */
          fireAttachmentClick(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * A name of the attached file.
               */
              filename?: string;
            }
          ): sap.suite.ui.commons.NoteTakerFeeder;
          /**
           * Fires event {@link #event:attachmentDelete attachmentDelete} to attached listeners.
           */
          fireAttachmentDelete(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * A name of the attached file.
               */
              filename?: string;
            }
          ): sap.suite.ui.commons.NoteTakerFeeder;
          /**
           * Fires event {@link #event:attachmentSelect attachmentSelect} to attached listeners.
           */
          fireAttachmentSelect(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * A name of the attached file.
               */
              filename?: string;
            }
          ): sap.suite.ui.commons.NoteTakerFeeder;
          /**
           * Fires event {@link #event:attachmentUploadComplete attachmentUploadComplete} to attached listeners.
           */
          fireAttachmentUploadComplete(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * The response message that comes from the server. On the server side this response has to be put within
               * the "body" tags of the response document of the iFrame. It can consist of a return code and an optional
               * message. This does not work in cross-domain scenarios.
               */
              response?: string;
            }
          ): sap.suite.ui.commons.NoteTakerFeeder;
          /**
           * Gets current value of property {@link #getAttachmentName attachmentName}.
           *
           * The attachment property name for identification on the server side after sending data to the server.
           *
           * Default value is `attachment`.
           */
          getAttachmentName(): string;
          /**
           * Gets current value of property {@link #getAttachmentUploadUrl attachmentUploadUrl}.
           *
           * Sets the upload attachment URL for a new card.
           */
          getAttachmentUploadUrl(): string;
          /**
           * Gets current value of property {@link #getBody body}.
           *
           * The text inside the note card.
           */
          getBody(): string;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.NoteTakerFeeder.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getTags tags}.
           *
           * The list of tags selected for addition to a new note card.
           *
           * Default value is `[]`.
           */
          getTags(): object;
          /**
           * Gets current value of property {@link #getThumbDown thumbDown}.
           *
           * Sets negative indication for a new note.
           */
          getThumbDown(): boolean;
          /**
           * Gets current value of property {@link #getThumbUp thumbUp}.
           *
           * Sets positive indication for a new note.
           */
          getThumbUp(): boolean;
          /**
           * Gets current value of property {@link #getTitle title}.
           *
           * This text is the header of a new note.
           */
          getTitle(): string;
          /**
           * Sets a new value for property {@link #getAttachmentName attachmentName}.
           *
           * The attachment property name for identification on the server side after sending data to the server.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `attachment`.
           */
          setAttachmentName(
            /**
             * New value for property `attachmentName`
             */
            sAttachmentName: string
          ): sap.suite.ui.commons.NoteTakerFeeder;
          /**
           * Sets a new value for property {@link #getAttachmentUploadUrl attachmentUploadUrl}.
           *
           * Sets the upload attachment URL for a new card.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setAttachmentUploadUrl(
            /**
             * New value for property `attachmentUploadUrl`
             */
            sAttachmentUploadUrl: string
          ): sap.suite.ui.commons.NoteTakerFeeder;
          /**
           * Sets a new value for property {@link #getBody body}.
           *
           * The text inside the note card.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setBody(
            /**
             * New value for property `body`
             */
            sBody: string
          ): sap.suite.ui.commons.NoteTakerFeeder;
          /**
           * Sets a new value for property {@link #getTags tags}.
           *
           * The list of tags selected for addition to a new note card.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `[]`.
           */
          setTags(
            /**
             * New value for property `tags`
             */
            oTags: object
          ): sap.suite.ui.commons.NoteTakerFeeder;
          /**
           * Sets a new value for property {@link #getThumbDown thumbDown}.
           *
           * Sets negative indication for a new note.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setThumbDown(
            /**
             * New value for property `thumbDown`
             */
            bThumbDown: boolean
          ): sap.suite.ui.commons.NoteTakerFeeder;
          /**
           * Sets a new value for property {@link #getThumbUp thumbUp}.
           *
           * Sets positive indication for a new note.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setThumbUp(
            /**
             * New value for property `thumbUp`
             */
            bThumbUp: boolean
          ): sap.suite.ui.commons.NoteTakerFeeder;
          /**
           * Sets a new value for property {@link #getTitle title}.
           *
           * This text is the header of a new note.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setTitle(
            /**
             * New value for property `title`
             */
            sTitle: string
          ): sap.suite.ui.commons.NoteTakerFeeder;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:addNote addNote} event of this `sap.suite.ui.commons.NoteTakerFeeder`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.NoteTakerFeeder` itself.
           *
           * The event is fired when a user chooses the Add button in the control.
           */
          attachAddNote(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTakerFeeder`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.NoteTakerFeeder;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:attachmentClick attachmentClick} event of this
           * `sap.suite.ui.commons.NoteTakerFeeder`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.NoteTakerFeeder` itself.
           *
           * The event is fired when a user presses the attachment link.
           */
          attachAttachmentClick(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTakerFeeder`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.NoteTakerFeeder;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:attachmentDelete attachmentDelete} event of
           * this `sap.suite.ui.commons.NoteTakerFeeder`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.NoteTakerFeeder` itself.
           *
           * The event is fired when a user presses the Delete button in the Feeder card.
           */
          attachAttachmentDelete(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTakerFeeder`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.NoteTakerFeeder;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:attachmentSelect attachmentSelect} event of
           * this `sap.suite.ui.commons.NoteTakerFeeder`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.NoteTakerFeeder` itself.
           *
           * The event is fired when the value of attached file has been changed.
           */
          attachAttachmentSelect(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTakerFeeder`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.NoteTakerFeeder;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:attachmentUploadComplete attachmentUploadComplete}
           * event of this `sap.suite.ui.commons.NoteTakerFeeder`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.NoteTakerFeeder` itself.
           *
           * The event is fired when the upload of the file is completed. However this covers only the client side
           * of the Upload process and does not give any success status from the server.
           */
          attachAttachmentUploadComplete(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.NoteTakerFeeder`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.NoteTakerFeeder;
        }
        /**
         * @deprecated (since 1.25) - This control has been deprecated in favor of new sap.suite.ui.commons.GenericTile.
         *
         * This control is the implementation of the InfoTile to show a numeric value.
         */
        class NumericTile extends sap.suite.ui.commons.InfoTile {
          /**
           * Constructor for a new NumericTile.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: NumericTileOpts
          );

          /**
           * Creates a new subclass of class sap.suite.ui.commons.NumericTile with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.suite.ui.commons.InfoTile.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets current value of property {@link #getIndicator indicator}.
           *
           * The indicator arrow that shows value deviation.
           *
           * Default value is `None`.
           */
          getIndicator(): sap.suite.ui.commons.DeviationIndicator;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.NumericTile.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getScale scale}.
           *
           * The scaling prefix. Financial characters can be used for currencies and counters. The SI prefixes can
           * be used for units.
           */
          getScale(): string;
          /**
           * Gets current value of property {@link #getUnit unit}.
           *
           * The percent sign, the currency symbol, or the unit of measure.
           */
          getUnit(): string;
          /**
           * Gets current value of property {@link #getValue value}.
           *
           * The actual value.
           */
          getValue(): string;
          /**
           * Gets current value of property {@link #getValueColor valueColor}.
           *
           * The semantic color of the value.
           */
          getValueColor(): sap.suite.ui.commons.InfoTileValueColor;
          /**
           * Sets a new value for property {@link #getIndicator indicator}.
           *
           * The indicator arrow that shows value deviation.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `None`.
           */
          setIndicator(
            /**
             * New value for property `indicator`
             */
            sIndicator: sap.suite.ui.commons.DeviationIndicator
          ): sap.suite.ui.commons.NumericTile;
          /**
           * Sets a new value for property {@link #getScale scale}.
           *
           * The scaling prefix. Financial characters can be used for currencies and counters. The SI prefixes can
           * be used for units.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setScale(
            /**
             * New value for property `scale`
             */
            sScale: string
          ): sap.suite.ui.commons.NumericTile;
          /**
           * Sets a new value for property {@link #getUnit unit}.
           *
           * The percent sign, the currency symbol, or the unit of measure.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setUnit(
            /**
             * New value for property `unit`
             */
            sUnit: string
          ): sap.suite.ui.commons.NumericTile;
          /**
           * Sets a new value for property {@link #getValue value}.
           *
           * The actual value.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setValue(
            /**
             * New value for property `value`
             */
            sValue: string
          ): sap.suite.ui.commons.NumericTile;
          /**
           * Sets a new value for property {@link #getValueColor valueColor}.
           *
           * The semantic color of the value.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setValueColor(
            /**
             * New value for property `valueColor`
             */
            sValueColor: sap.suite.ui.commons.InfoTileValueColor
          ): sap.suite.ui.commons.NumericTile;
        }
        /**
         * @deprecated (since 1.34) - Deprecated. Not Fiori.
         *
         * Shows picture in fullscreen.
         */
        class PictureZoomIn extends sap.ui.core.Control {
          /**
           * Constructor for a new PictureZoomIn.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: PictureZoomInOpts
          );

          /**
           * Destroys the busyIndicator in the aggregation {@link #getBusyIndicator busyIndicator}.
           */
          destroyBusyIndicator(): sap.suite.ui.commons.PictureZoomIn;
          /**
           * Creates a new subclass of class sap.suite.ui.commons.PictureZoomIn with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets content of aggregation {@link #getBusyIndicator busyIndicator}.
           *
           * Custom busy indicator.
           */
          getBusyIndicator(): sap.ui.core.Control;
          /**
           * Gets current value of property {@link #getDescription description}.
           *
           * Description is shown under image.
           */
          getDescription(): string;
          /**
           * Gets current value of property {@link #getImageSrc imageSrc}.
           *
           * Source for image.
           */
          getImageSrc(): sap.ui.core.URI;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.PictureZoomIn.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Sets the aggregated {@link #getBusyIndicator busyIndicator}.
           */
          setBusyIndicator(
            /**
             * The busyIndicator to set
             */
            oBusyIndicator: sap.ui.core.Control
          ): sap.suite.ui.commons.PictureZoomIn;
          /**
           * Sets a new value for property {@link #getDescription description}.
           *
           * Description is shown under image.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setDescription(
            /**
             * New value for property `description`
             */
            sDescription: string
          ): sap.suite.ui.commons.PictureZoomIn;
          /**
           * Sets a new value for property {@link #getImageSrc imageSrc}.
           *
           * Source for image.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setImageSrc(
            /**
             * New value for property `imageSrc`
             */
            sImageSrc: sap.ui.core.URI
          ): sap.suite.ui.commons.PictureZoomIn;
        }
        /**
         * Complex control that enables you to display documents or other items in their flow.
         */
        class ProcessFlow extends sap.ui.core.Control {
          /**
           * Constructor for a new ProcessFlow.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: ProcessFlowOpts
          );

          /**
           * Adds some lane to the aggregation {@link #getLanes lanes}.
           */
          addLane(
            /**
             * The lane to add; if empty, nothing is inserted
             */
            oLane: sap.suite.ui.commons.ProcessFlowLaneHeader
          ): sap.suite.ui.commons.ProcessFlow;
          /**
           * Function applies the changes to the display state based on the requirements. If any node is in the highlighted
           * state all others are set to the dimmed state.
           */
          applyNodeDisplayState(): void;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:headerPress headerPress} event of this `sap.suite.ui.commons.ProcessFlow`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.ProcessFlow` itself.
           *
           * This event is fired when the header column is clicked. This event is available only in header mode, i.e.
           * when no nodes are defined.
           */
          attachHeaderPress(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ProcessFlow` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.ProcessFlow;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:labelPress labelPress} event of this `sap.suite.ui.commons.ProcessFlow`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.ProcessFlow` itself.
           *
           * This event is fired when a process flow connection label was clicked.
           */
          attachLabelPress(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ProcessFlow` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.ProcessFlow;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:nodePress nodePress} event of this `sap.suite.ui.commons.ProcessFlow`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.ProcessFlow` itself.
           *
           * This event is fired when a process flow node was clicked.
           */
          attachNodePress(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ProcessFlow` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.ProcessFlow;
          /**
           * @deprecated (since 1.26) - Should not be used any longer, use nodePress event instead ( click on the
           * node)
           *
           * Attaches event handler `fnFunction` to the {@link #event:nodeTitlePress nodeTitlePress} event of this
           * `sap.suite.ui.commons.ProcessFlow`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.ProcessFlow` itself.
           *
           * This event is fired when a process flow node title was clicked. The user can access the clicked process
           * flow node control object which is the only argument of the event handler.
           */
          attachNodeTitlePress(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ProcessFlow` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.ProcessFlow;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:onError onError} event of this `sap.suite.ui.commons.ProcessFlow`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.ProcessFlow` itself.
           *
           * This event is fired when an issue occurs with the process flow calculation. In most cases, there is an
           * issue with the data. The console contains the detailed error description with the errors.
           */
          attachOnError(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ProcessFlow` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.ProcessFlow;
          /**
           * Destroys the ariaProperties in the aggregation {@link #getAriaProperties ariaProperties}.
           */
          destroyAriaProperties(): sap.suite.ui.commons.ProcessFlow;
          /**
           * Destroys all the lanes in the aggregation {@link #getLanes lanes}.
           */
          destroyLanes(): sap.suite.ui.commons.ProcessFlow;
          /**
           * Destroys all the nodes in the aggregation {@link #getNodes nodes}.
           */
          destroyNodes(): sap.suite.ui.commons.ProcessFlow;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:headerPress headerPress} event of this `sap.suite.ui.commons.ProcessFlow`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachHeaderPress(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.ProcessFlow;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:labelPress labelPress} event of this `sap.suite.ui.commons.ProcessFlow`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachLabelPress(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.ProcessFlow;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:nodePress nodePress} event of this `sap.suite.ui.commons.ProcessFlow`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachNodePress(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.ProcessFlow;
          /**
           * @deprecated (since 1.26) - Should not be used any longer, use nodePress event instead ( click on the
           * node)
           *
           * Detaches event handler `fnFunction` from the {@link #event:nodeTitlePress nodeTitlePress} event of this
           * `sap.suite.ui.commons.ProcessFlow`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachNodeTitlePress(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.ProcessFlow;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:onError onError} event of this `sap.suite.ui.commons.ProcessFlow`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachOnError(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.ProcessFlow;
          /**
           * Creates a new subclass of class sap.suite.ui.commons.ProcessFlow with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:headerPress headerPress} to attached listeners.
           */
          fireHeaderPress(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * This object represents the wrapped process flow lane header object.
               */
              oEvent?: object;
            }
          ): sap.suite.ui.commons.ProcessFlow;
          /**
           * Fires event {@link #event:labelPress labelPress} to attached listeners.
           */
          fireLabelPress(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * This object represents the label information.
               */
              oEvent?: object;
            }
          ): sap.suite.ui.commons.ProcessFlow;
          /**
           * Fires event {@link #event:nodePress nodePress} to attached listeners.
           */
          fireNodePress(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * This object represents the wrapped process flow node object.
               */
              oEvent?: object;
            }
          ): sap.suite.ui.commons.ProcessFlow;
          /**
           * @deprecated (since 1.26) - Should not be used any longer, use nodePress event instead ( click on the
           * node)
           *
           * Fires event {@link #event:nodeTitlePress nodeTitlePress} to attached listeners.
           */
          fireNodeTitlePress(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * This object represents the wrapped process flow node object.
               */
              oEvent?: object;
            }
          ): sap.suite.ui.commons.ProcessFlow;
          /**
           * Fires event {@link #event:onError onError} to attached listeners.
           */
          fireOnError(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * This parameters contains the localized string with error message.
               */
              oEvent?: object;
            }
          ): sap.suite.ui.commons.ProcessFlow;
          /**
           * Gets content of aggregation {@link #getAriaProperties ariaProperties}.
           *
           * ARIA-compliant properties to be added to the control.
           */
          getAriaProperties(): sap.suite.ui.commons.AriaProperties;
          /**
           * Function returns the nodeId of the node which is focused.
           */
          getFocusedNode(): string;
          /**
           * Gets current value of property {@link #getFoldedCorners foldedCorners}.
           *
           * This property defines the folded corners for the single node control. The following values exist: - true:
           * means folded corner - false/null/undefined: means normal corner
           *
           * Default value is `false`.
           */
          getFoldedCorners(): boolean;
          /**
           * @SINCE 1.46.0
           *
           * Returns a lane from the aggregation named 'lanes' by comparing the laneId property of lane.
           */
          getLane(
            /**
             * ID of the lane to return
             */
            sLaneId: string
          ): sap.suite.ui.commons.ProcessFlowLaneHeader;
          /**
           * Gets content of aggregation {@link #getLanes lanes}.
           *
           * This is a header of the table for the process flow control.
           */
          getLanes(): sap.suite.ui.commons.ProcessFlowLaneHeader[];
          /**
           * Returns a metadata object for class sap.suite.ui.commons.ProcessFlow.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * @SINCE 1.46.0
           *
           * Returns a node from the aggregation named 'nodes' by comparing the nodeId property of node.
           */
          getNode(
            /**
             * ID of node to return
             */
            sNodeId: string
          ): sap.suite.ui.commons.ProcessFlowNode;
          /**
           * Gets content of aggregation {@link #getNodes nodes}.
           *
           * This is the aggregation of nodes in the process flow control.
           */
          getNodes(): sap.suite.ui.commons.ProcessFlowNode[];
          /**
           * Gets current value of property {@link #getScrollable scrollable}.
           *
           * By default, the control body is embedded into a scroll container of fixed size, so the user can put the
           * control into a fixed size layout. When the control body (the graph) gets larger, the container cuts the
           * overflowing parts of the graph and the cut parts can be displayed by scrolling the control body. When
           * the control body fits into the container limits, obviously no scrolling is possible (and makes sense).
           *
           * The scrolling feature can be turned off by setting this property value to false, so the width/height
           * of the whole control will change as the flow graph gets smaller/larger. In this case the control body
           * could not be scrolled, as the control body size matches the control container size.
           *
           * Default value is `true`.
           */
          getScrollable(): boolean;
          /**
           * Gets current value of property {@link #getShowLabels showLabels}.
           *
           * Defines if the connection labels are shown or not.
           *
           * Default value is `false`.
           */
          getShowLabels(): boolean;
          /**
           * Gets current value of property {@link #getWheelZoomable wheelZoomable}.
           *
           * Defines if semantic zooming by mouse wheel events on desktop browsers is enabled.
           *
           * Default value is `true`.
           */
          getWheelZoomable(): boolean;
          /**
           * Function returns current zoom level.
           */
          getZoomLevel(): string;
          /**
           * Checks for the provided `sap.suite.ui.commons.ProcessFlowLaneHeader` in the aggregation {@link #getLanes
           * lanes}. and returns its index if found or -1 otherwise.
           */
          indexOfLane(
            /**
             * The lane whose index is looked for
             */
            oLane: sap.suite.ui.commons.ProcessFlowLaneHeader
          ): number;
          /**
           * Checks for the provided `sap.suite.ui.commons.ProcessFlowNode` in the aggregation {@link #getNodes nodes}.
           * and returns its index if found or -1 otherwise.
           */
          indexOfNode(
            /**
             * The node whose index is looked for
             */
            oNode: sap.suite.ui.commons.ProcessFlowNode
          ): number;
          /**
           * Inserts a lane into the aggregation {@link #getLanes lanes}.
           */
          insertLane(
            /**
             * The lane to insert; if empty, nothing is inserted
             */
            oLane: sap.suite.ui.commons.ProcessFlowLaneHeader,
            /**
             * The `0`-based index the lane should be inserted at; for a negative value of `iIndex`, the lane is inserted
             * at position 0; for a value greater than the current size of the aggregation, the lane is inserted at
             * the last position
             */
            iIndex: number
          ): sap.suite.ui.commons.ProcessFlow;
          /**
           * Inserts a node into the aggregation {@link #getNodes nodes}.
           */
          insertNode(
            /**
             * The node to insert; if empty, nothing is inserted
             */
            oNode: sap.suite.ui.commons.ProcessFlowNode,
            /**
             * The `0`-based index the node should be inserted at; for a negative value of `iIndex`, the node is inserted
             * at position 0; for a value greater than the current size of the aggregation, the node is inserted at
             * the last position
             */
            iIndex: number
          ): sap.suite.ui.commons.ProcessFlow;
          /**
           * @SINCE 1.44
           *
           * Optimizes the layout and updates the model. To be used carefully because of its possible side effects
           * on the performance.
           */
          optimizeLayout(
            /**
             * True if the layout should be optimized; false if the layout should be brought to the initial state.
             */
            isOptimized: boolean
          ): sap.suite.ui.commons.ProcessFlow;
          /**
           * Removes all the controls from the aggregation {@link #getLanes lanes}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllLanes(): sap.suite.ui.commons.ProcessFlowLaneHeader[];
          /**
           * Removes all the controls from the aggregation {@link #getNodes nodes}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllNodes(): sap.suite.ui.commons.ProcessFlowNode[];
          /**
           * Removes a lane from the aggregation {@link #getLanes lanes}.
           */
          removeLane(
            /**
             * The lane to remove or its index or id
             */
            vLane: number | string | sap.suite.ui.commons.ProcessFlowLaneHeader
          ): sap.suite.ui.commons.ProcessFlowLaneHeader;
          /**
           * Removes a node from the aggregation {@link #getNodes nodes}.
           */
          removeNode(
            /**
             * The node to remove or its index or id
             */
            vNode: number | string | sap.suite.ui.commons.ProcessFlowNode
          ): sap.suite.ui.commons.ProcessFlowNode;
          /**
           * Sets the aggregated {@link #getAriaProperties ariaProperties}.
           */
          setAriaProperties(
            /**
             * The ariaProperties to set
             */
            oAriaProperties: sap.suite.ui.commons.AriaProperties
          ): sap.suite.ui.commons.ProcessFlow;
          /**
           * @SINCE 1.32
           *
           * Sets the focus to the given Label
           */
          setFocusToLabel(
            /**
             * Label to focus
             */
            label: sap.suite.ui.commons.ProcessFlowConnectionLabel
          ): void;
          /**
           * Sets a new value for property {@link #getFoldedCorners foldedCorners}.
           *
           * This property defines the folded corners for the single node control. The following values exist: - true:
           * means folded corner - false/null/undefined: means normal corner
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setFoldedCorners(
            /**
             * New value for property `foldedCorners`
             */
            bFoldedCorners: boolean
          ): sap.suite.ui.commons.ProcessFlow;
          /**
           * Sets a new value for property {@link #getScrollable scrollable}.
           *
           * By default, the control body is embedded into a scroll container of fixed size, so the user can put the
           * control into a fixed size layout. When the control body (the graph) gets larger, the container cuts the
           * overflowing parts of the graph and the cut parts can be displayed by scrolling the control body. When
           * the control body fits into the container limits, obviously no scrolling is possible (and makes sense).
           *
           * The scrolling feature can be turned off by setting this property value to false, so the width/height
           * of the whole control will change as the flow graph gets smaller/larger. In this case the control body
           * could not be scrolled, as the control body size matches the control container size.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setScrollable(
            /**
             * New value for property `scrollable`
             */
            bScrollable: boolean
          ): sap.suite.ui.commons.ProcessFlow;
          /**
           * @SINCE 1.32
           *
           * Sets the path between source and target node to selected status and rerenders the control. If parameters
           * are null, sets all nodes to normal status.
           */
          setSelectedPath(
            /**
             * of the path or null
             */
            sourceNodeId: string,
            /**
             * of the path or null
             */
            targetNodeId: string
          ): void;
          /**
           * Overwrites setShowLabels of ProcessFlow control to apply additional functionality.
           */
          setShowLabels(
            /**
             * New value for showLabels
             */
            value: boolean
          ): void;
          /**
           * Sets a new value for property {@link #getWheelZoomable wheelZoomable}.
           *
           * Defines if semantic zooming by mouse wheel events on desktop browsers is enabled.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setWheelZoomable(
            /**
             * New value for property `wheelZoomable`
             */
            bWheelZoomable: boolean
          ): sap.suite.ui.commons.ProcessFlow;
          /**
           * Function sets the zoom level.
           */
          setZoomLevel(
            /**
             * The new zoom level.
             */
            zoomLevel: sap.suite.ui.commons.ProcessFlowZoomLevel
          ): void;
          /**
           * Updates the model and rerenders the control.
           */
          updateModel(): void;
          /**
           * Updates the nodes and rerenders the control.
           */
          updateNodesOnly(): void;
          /**
           * Function sets new zoom level with higher level of details. Having max details it stays as it is.
           */
          zoomIn(): string;
          /**
           * Function sets new zoom level with smaller level of details. Having the least detail view it stays as
           * it is.
           */
          zoomOut(): string;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:headerPress headerPress} event of this `sap.suite.ui.commons.ProcessFlow`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.ProcessFlow` itself.
           *
           * This event is fired when the header column is clicked. This event is available only in header mode, i.e.
           * when no nodes are defined.
           */
          attachHeaderPress(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ProcessFlow` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.ProcessFlow;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:labelPress labelPress} event of this `sap.suite.ui.commons.ProcessFlow`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.ProcessFlow` itself.
           *
           * This event is fired when a process flow connection label was clicked.
           */
          attachLabelPress(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ProcessFlow` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.ProcessFlow;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:nodePress nodePress} event of this `sap.suite.ui.commons.ProcessFlow`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.ProcessFlow` itself.
           *
           * This event is fired when a process flow node was clicked.
           */
          attachNodePress(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ProcessFlow` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.ProcessFlow;
          /**
           * @deprecated (since 1.26) - Should not be used any longer, use nodePress event instead ( click on the
           * node)
           *
           * Attaches event handler `fnFunction` to the {@link #event:nodeTitlePress nodeTitlePress} event of this
           * `sap.suite.ui.commons.ProcessFlow`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.ProcessFlow` itself.
           *
           * This event is fired when a process flow node title was clicked. The user can access the clicked process
           * flow node control object which is the only argument of the event handler.
           */
          attachNodeTitlePress(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ProcessFlow` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.ProcessFlow;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:onError onError} event of this `sap.suite.ui.commons.ProcessFlow`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.ProcessFlow` itself.
           *
           * This event is fired when an issue occurs with the process flow calculation. In most cases, there is an
           * issue with the data. The console contains the detailed error description with the errors.
           */
          attachOnError(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ProcessFlow` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.ProcessFlow;
        }
        /**
         * This control is used inside the ProcessFlow control to connect process flow node A with process flow
         * node B in respect to the style(x) chosen by the application.
         */
        class ProcessFlowConnection extends sap.ui.core.Control {
          /**
           * Constructor for a new ProcessFlowConnection.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: ProcessFlowConnectionOpts
          );

          /**
           * Creates a new subclass of class sap.suite.ui.commons.ProcessFlowConnection with name `sClassName` and
           * enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets current value of property {@link #getDrawData drawData}.
           *
           * This is an array of the following attributes for one element: 1. flowLine (string) - A connection definition
           * where the line should be drawn. A string which defines a course of a flow line. A flow line is a connection
           * between nodes in a process flow control. The string can contain the following characters: - "r" for right,
           * - "t" for top, - "l" for left, - "b" for bottom. 2. targetNodeState (ProcessFlowNodeState) - A copy of
           * the target node status. If the target node is created, the line is solid. If the target node is planned,
           * the line is dashed. 3. displayState (ProcessFlowDisplayState) - Display state of the node. This property
           * defines if the node is displayed regularly, highlighted, or dimmed in combination with a selected visual
           * style of the control. 4. hasArrow (boolean) - Indicates if the line has an arrow on the right end.
           */
          getDrawData(): object[];
          /**
           * Returns a metadata object for class sap.suite.ui.commons.ProcessFlowConnection.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * @deprecated (since 1.32) - State is deprecated because of no usages. There will be no replacement.
           *
           * Gets current value of property {@link #getState state}.
           *
           * State of the connection.
           *
           * Default value is `Regular`.
           */
          getState(): sap.suite.ui.commons.ProcessFlowConnectionState;
          /**
           * @deprecated (since 1.32) - Type is deprecated because of no usages. There will be no replacement.
           *
           * Gets current value of property {@link #getType type}.
           *
           * Type of the connection.
           *
           * Default value is `Normal`.
           */
          getType(): sap.suite.ui.commons.ProcessFlowConnectionType;
          /**
           * Gets current value of property {@link #getZoomLevel zoomLevel}.
           *
           * This is a current zoom level for the connection. The point of connection to the node is derived from
           * zoom level.
           *
           * Default value is `Two`.
           */
          getZoomLevel(): sap.suite.ui.commons.ProcessFlowZoomLevel;
          /**
           * Sets a new value for property {@link #getDrawData drawData}.
           *
           * This is an array of the following attributes for one element: 1. flowLine (string) - A connection definition
           * where the line should be drawn. A string which defines a course of a flow line. A flow line is a connection
           * between nodes in a process flow control. The string can contain the following characters: - "r" for right,
           * - "t" for top, - "l" for left, - "b" for bottom. 2. targetNodeState (ProcessFlowNodeState) - A copy of
           * the target node status. If the target node is created, the line is solid. If the target node is planned,
           * the line is dashed. 3. displayState (ProcessFlowDisplayState) - Display state of the node. This property
           * defines if the node is displayed regularly, highlighted, or dimmed in combination with a selected visual
           * style of the control. 4. hasArrow (boolean) - Indicates if the line has an arrow on the right end.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setDrawData(
            /**
             * New value for property `drawData`
             */
            sDrawData: object[]
          ): sap.suite.ui.commons.ProcessFlowConnection;
          /**
           * @deprecated (since 1.32) - State is deprecated because of no usages. There will be no replacement.
           *
           * Sets a new value for property {@link #getState state}.
           *
           * State of the connection.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `Regular`.
           */
          setState(
            /**
             * New value for property `state`
             */
            sState: sap.suite.ui.commons.ProcessFlowConnectionState
          ): sap.suite.ui.commons.ProcessFlowConnection;
          /**
           * @deprecated (since 1.32) - Type is deprecated because of no usages. There will be no replacement.
           *
           * Sets a new value for property {@link #getType type}.
           *
           * Type of the connection.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `Normal`.
           */
          setType(
            /**
             * New value for property `type`
             */
            sType: sap.suite.ui.commons.ProcessFlowConnectionType
          ): sap.suite.ui.commons.ProcessFlowConnection;
          /**
           * Sets a new value for property {@link #getZoomLevel zoomLevel}.
           *
           * This is a current zoom level for the connection. The point of connection to the node is derived from
           * zoom level.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `Two`.
           */
          setZoomLevel(
            /**
             * New value for property `zoomLevel`
             */
            sZoomLevel: sap.suite.ui.commons.ProcessFlowZoomLevel
          ): sap.suite.ui.commons.ProcessFlowConnection;
        }
        /**
         * This control is used inside the ProcessFlow control providing information on connections. Using this
         * control, you need to take care of the lifetime handling instance as instances of this control are not
         * destroyed automatically.
         */
        class ProcessFlowConnectionLabel extends sap.m.Button {
          /**
           * Constructor for a new ProcessFlowConnectionLabel.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: ProcessFlowConnectionLabelOpts
          );

          /**
           * Creates a new subclass of class sap.suite.ui.commons.ProcessFlowConnectionLabel with name `sClassName`
           * and enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.m.Button.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.ProcessFlowConnectionLabel.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getPriority priority}.
           *
           * Priority is used to define which label is visible if the state of multiple labels is equal. Assuming
           * there are multiple labels with equal state (e.g. Negative state appears twice), the priority decides
           * which one needs to be selected.
           *
           * Default value is `0`.
           */
          getPriority(): number;
          /**
           * Gets current value of property {@link #getState state}.
           *
           * Specifies the state of the connection label. If multiple labels are available for one connection, the
           * label will be selected by state based on the following order: Neutral -> Positive -> Critical -> Negative.
           *
           * Default value is `Neutral`.
           */
          getState(): sap.suite.ui.commons.ProcessFlowConnectionLabelState;
          /**
           * Sets a new value for property {@link #getPriority priority}.
           *
           * Priority is used to define which label is visible if the state of multiple labels is equal. Assuming
           * there are multiple labels with equal state (e.g. Negative state appears twice), the priority decides
           * which one needs to be selected.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `0`.
           */
          setPriority(
            /**
             * New value for property `priority`
             */
            iPriority: number
          ): sap.suite.ui.commons.ProcessFlowConnectionLabel;
          /**
           * Sets a new value for property {@link #getState state}.
           *
           * Specifies the state of the connection label. If multiple labels are available for one connection, the
           * label will be selected by state based on the following order: Neutral -> Positive -> Critical -> Negative.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `Neutral`.
           */
          setState(
            /**
             * New value for property `state`
             */
            sState: sap.suite.ui.commons.ProcessFlowConnectionLabelState
          ): sap.suite.ui.commons.ProcessFlowConnectionLabel;
        }
        /**
         * This control gives you an overview of documents or items used in a process flow. The process flow is
         * represented by donut chart sections that are colored according to the status of documents. This control
         * can be used in two different ways. If you use it standalone, an event is triggered and can be caught
         * to display the node map. If you use it with nodes or documents, it gives you an overview of the documents
         * or items used in the process flow, which is represented by the donut chart sections.
         */
        class ProcessFlowLaneHeader extends sap.ui.core.Control {
          /**
           * Constructor for a new ProcessFlowLaneHeader.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: ProcessFlowLaneHeaderOpts
          );

          /**
           * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.ProcessFlowLaneHeader`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.ProcessFlowLaneHeader` itself.
           *
           * This event is fired when the header is clicked.
           */
          attachPress(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ProcessFlowLaneHeader`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.ProcessFlowLaneHeader;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.suite.ui.commons.ProcessFlowLaneHeader`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachPress(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.ProcessFlowLaneHeader;
          /**
           * Creates a new subclass of class sap.suite.ui.commons.ProcessFlowLaneHeader with name `sClassName` and
           * enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:press press} to attached listeners.
           */
          firePress(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * tbd
               */
              oEvent?: object;
            }
          ): sap.suite.ui.commons.ProcessFlowLaneHeader;
          /**
           * Gets current value of property {@link #getIconSrc iconSrc}.
           *
           * Icon to be displayed in the middle of the control.
           */
          getIconSrc(): sap.ui.core.URI;
          /**
           * Gets current value of property {@link #getLaneId laneId}.
           *
           * Internal identification of the header.
           */
          getLaneId(): string;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.ProcessFlowLaneHeader.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Overrides the getter method for property position. It returns the position that was changed due to the
           * artificial merged lanes. Otherwise it returns the position set as a property.
           */
          getPosition(): number;
          /**
           * Gets current value of property {@link #getState state}.
           *
           * Array of the ProcessFlowLaneState. The user can explicitly set an array with the two properties state
           * and value of the state, for example [state:sap.suite.ui.commons.ProcessFlowNodeState.Neutral, value:
           * 20]. Possible states are states are positive, negative, neutral, and planned.
           */
          getState(): object;
          /**
           * Gets current value of property {@link #getText text}.
           *
           * Text information that is displayed in the control.
           */
          getText(): string;
          /**
           * Gets current value of property {@link #getZoomLevel zoomLevel}.
           *
           * Current zoom level for the lane header.
           */
          getZoomLevel(): sap.suite.ui.commons.ProcessFlowZoomLevel;
          /**
           * Sets a new value for property {@link #getIconSrc iconSrc}.
           *
           * Icon to be displayed in the middle of the control.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setIconSrc(
            /**
             * New value for property `iconSrc`
             */
            sIconSrc: sap.ui.core.URI
          ): sap.suite.ui.commons.ProcessFlowLaneHeader;
          /**
           * Sets a new value for property {@link #getLaneId laneId}.
           *
           * Internal identification of the header.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setLaneId(
            /**
             * New value for property `laneId`
             */
            sLaneId: string
          ): sap.suite.ui.commons.ProcessFlowLaneHeader;
          /**
           * Sets a new value for property {@link #getPosition position}.
           *
           * Position of the lane in the process flow control. Numbering of the position has to be sequential and
           * needs to start from 0.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setPosition(
            /**
             * New value for property `position`
             */
            iPosition: number
          ): sap.suite.ui.commons.ProcessFlowLaneHeader;
          /**
           * Sets a new value for property {@link #getState state}.
           *
           * Array of the ProcessFlowLaneState. The user can explicitly set an array with the two properties state
           * and value of the state, for example [state:sap.suite.ui.commons.ProcessFlowNodeState.Neutral, value:
           * 20]. Possible states are states are positive, negative, neutral, and planned.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setState(
            /**
             * New value for property `state`
             */
            oState: object
          ): sap.suite.ui.commons.ProcessFlowLaneHeader;
          /**
           * Sets a new value for property {@link #getText text}.
           *
           * Text information that is displayed in the control.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setText(
            /**
             * New value for property `text`
             */
            sText: string
          ): sap.suite.ui.commons.ProcessFlowLaneHeader;
          /**
           * Sets a new value for property {@link #getZoomLevel zoomLevel}.
           *
           * Current zoom level for the lane header.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setZoomLevel(
            /**
             * New value for property `zoomLevel`
             */
            sZoomLevel: sap.suite.ui.commons.ProcessFlowZoomLevel
          ): sap.suite.ui.commons.ProcessFlowLaneHeader;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.ProcessFlowLaneHeader`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.ProcessFlowLaneHeader` itself.
           *
           * This event is fired when the header is clicked.
           */
          attachPress(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ProcessFlowLaneHeader`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.ProcessFlowLaneHeader;
        }
        /**
         * This control enables you to see documents (or other items) in respect to their statuses – positive, negative,
         * neutral, planned, planned negative. In addition to the node title (which can be optionally a hyperlink)
         * also two other text fields are provided and can be filled. The process flow nodes consider all styles
         * depending on the status they are in. The user can update or change the content of the node. The content
         * of the node can be also filtered according to updated data and specific parameters set. This means that
         * also the node’s style is affected.
         */
        class ProcessFlowNode extends sap.ui.core.Control {
          /**
           * Constructor for a new ProcessFlowNode.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: ProcessFlowNodeOpts
          );

          /**
           * Adds some parent into the association {@link #getParents parents}.
           */
          addParent(
            /**
             * The parents to add; if empty, nothing is inserted
             */
            vParent: sap.ui.core.ID | sap.suite.ui.commons.ProcessFlowNode
          ): sap.suite.ui.commons.ProcessFlowNode;
          /**
           * @deprecated (since 1.50.0) - This event is deprecated, use nodePress event instead. See
           * {@link sap.suite.ui.commons.ProcessFlow.html#event:nodePress}.
           *
           * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.ProcessFlowNode`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.ProcessFlowNode` itself.
           *
           * This event is fired when the user clicks on the node. However, this event is not fired if the titlePress
           * event has been fired.
           */
          attachPress(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ProcessFlowNode`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.ProcessFlowNode;
          /**
           * @deprecated (since 1.26) - Should not be used any longer, use Press event instead ( click on the node)
           *
           * Attaches event handler `fnFunction` to the {@link #event:titlePress titlePress} event of this `sap.suite.ui.commons.ProcessFlowNode`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.ProcessFlowNode` itself.
           *
           * This event handler is executed when the user clicks the node title. This event is fired only when the
           * title is clickable (isTitleClickable equals true).
           */
          attachTitlePress(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ProcessFlowNode`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.ProcessFlowNode;
          /**
           * Destroys the ariaProperties in the aggregation {@link #getAriaProperties ariaProperties}.
           */
          destroyAriaProperties(): sap.suite.ui.commons.ProcessFlowNode;
          /**
           * @EXPERIMENTAL (since 1.50)
           *
           * Destroys the zoomLevelFourContent in the aggregation {@link #getZoomLevelFourContent zoomLevelFourContent}.
           */
          destroyZoomLevelFourContent(): sap.suite.ui.commons.ProcessFlowNode;
          /**
           * @EXPERIMENTAL (since 1.50)
           *
           * Destroys the zoomLevelOneContent in the aggregation {@link #getZoomLevelOneContent zoomLevelOneContent}.
           */
          destroyZoomLevelOneContent(): sap.suite.ui.commons.ProcessFlowNode;
          /**
           * @EXPERIMENTAL (since 1.50)
           *
           * Destroys the zoomLevelThreeContent in the aggregation {@link #getZoomLevelThreeContent zoomLevelThreeContent}.
           */
          destroyZoomLevelThreeContent(): sap.suite.ui.commons.ProcessFlowNode;
          /**
           * @EXPERIMENTAL (since 1.50)
           *
           * Destroys the zoomLevelTwoContent in the aggregation {@link #getZoomLevelTwoContent zoomLevelTwoContent}.
           */
          destroyZoomLevelTwoContent(): sap.suite.ui.commons.ProcessFlowNode;
          /**
           * @deprecated (since 1.50.0) - This event is deprecated, use nodePress event instead. See
           * {@link sap.suite.ui.commons.ProcessFlow.html#event:nodePress}.
           *
           * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.suite.ui.commons.ProcessFlowNode`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachPress(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.ProcessFlowNode;
          /**
           * @deprecated (since 1.26) - Should not be used any longer, use Press event instead ( click on the node)
           *
           * Detaches event handler `fnFunction` from the {@link #event:titlePress titlePress} event of this `sap.suite.ui.commons.ProcessFlowNode`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachTitlePress(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.ProcessFlowNode;
          /**
           * Creates a new subclass of class sap.suite.ui.commons.ProcessFlowNode with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * @deprecated (since 1.50.0) - This event is deprecated, use nodePress event instead. See
           * {@link sap.suite.ui.commons.ProcessFlow.html#event:nodePress}.
           *
           * Fires event {@link #event:press press} to attached listeners.
           */
          firePress(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * The node identification.
               */
              oEvent?: object;
            }
          ): sap.suite.ui.commons.ProcessFlowNode;
          /**
           * @deprecated (since 1.26) - Should not be used any longer, use Press event instead ( click on the node)
           *
           * Fires event {@link #event:titlePress titlePress} to attached listeners.
           */
          fireTitlePress(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * The node identification.
               */
              oEvent?: object;
            }
          ): sap.suite.ui.commons.ProcessFlowNode;
          /**
           * Gets content of aggregation {@link #getAriaProperties ariaProperties}.
           *
           * ARIA-compliant properties to be added to the control.
           */
          getAriaProperties(): sap.suite.ui.commons.AriaProperties;
          /**
           * Gets current value of property {@link #getChildren children}.
           *
           * Defines an array of children of the node.
           */
          getChildren(): any[];
          /**
           * Gets current value of property {@link #getFocused focused}.
           *
           * The parameter defines if the node should be displayed in focus state.
           *
           * Default value is `false`.
           */
          getFocused(): boolean;
          /**
           * Gets current value of property {@link #getHighlighted highlighted}.
           *
           * The parameter defines if the node should be displayed in highlighted state.
           *
           * Default value is `false`.
           */
          getHighlighted(): boolean;
          /**
           * @deprecated (since 1.26) - According to the new requirement there should be only one click event for
           * each node (click on the whole node – see Press event) that is why titlePress event should not be used
           * any longer. Hence isTitleClickable should not be used either.
           *
           * Gets current value of property {@link #getIsTitleClickable isTitleClickable}.
           *
           * Specifies if the node title is clickable.
           *
           * Default value is `false`.
           */
          getIsTitleClickable(): boolean;
          /**
           * Gets current value of property {@link #getLaneId laneId}.
           *
           * Specifies the assignment of the node to the respective lane.
           */
          getLaneId(): string;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.ProcessFlowNode.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getNodeId nodeId}.
           *
           * Node identifier.
           */
          getNodeId(): string;
          /**
           * Returns array of IDs of the elements which are the current targets of the association {@link #getParents
           * parents}.
           */
          getParents(): sap.ui.core.ID[];
          /**
           * Gets current value of property {@link #getSelected selected}.
           *
           * The parameter defines if the node should be displayed in selected state.
           *
           * Default value is `false`.
           */
          getSelected(): boolean;
          /**
           * Gets current value of property {@link #getState state}.
           *
           * State of the node.
           *
           * Default value is `Neutral`.
           */
          getState(): sap.suite.ui.commons.ProcessFlowNodeState;
          /**
           * Gets current value of property {@link #getStateText stateText}.
           *
           * Description of the state, for example "Status OK".
           */
          getStateText(): string;
          /**
           * Gets current value of property {@link #getTag tag}.
           *
           * The user-defined object which is returned back to the user by a node click event.
           */
          getTag(): object;
          /**
           * Gets current value of property {@link #getTexts texts}.
           *
           * The property contains the additional texts on the node. The expected type is array of strings. One array
           * must not contain more than two strings. Additional strings in the array will be ignored.
           */
          getTexts(): string[];
          /**
           * Gets current value of property {@link #getTitle title}.
           *
           * The node title.
           */
          getTitle(): string;
          /**
           * Gets current value of property {@link #getTitleAbbreviation titleAbbreviation}.
           *
           * Title abbreviation is used in zoom level 'Three'.
           */
          getTitleAbbreviation(): string;
          /**
           * Gets current value of property {@link #getType type}.
           *
           * Type of the node.
           *
           * Default value is `Single`.
           */
          getType(): sap.suite.ui.commons.ProcessFlowNodeType;
          /**
           * @EXPERIMENTAL (since 1.50)
           *
           * Gets content of aggregation {@link #getZoomLevelFourContent zoomLevelFourContent}.
           *
           * The node's content used for zoom level 4. If this aggregation is set, no default content like title and
           * texts is used.
           */
          getZoomLevelFourContent(): sap.ui.core.Control;
          /**
           * @EXPERIMENTAL (since 1.50)
           *
           * Gets content of aggregation {@link #getZoomLevelOneContent zoomLevelOneContent}.
           *
           * The node's content used for zoom level 1. If this aggregation is set, no default content like title and
           * texts is used.
           */
          getZoomLevelOneContent(): sap.ui.core.Control;
          /**
           * @EXPERIMENTAL (since 1.50)
           *
           * Gets content of aggregation {@link #getZoomLevelThreeContent zoomLevelThreeContent}.
           *
           * The node's content used for zoom level 3. If this aggregation is set, no default content like title and
           * texts is used.
           */
          getZoomLevelThreeContent(): sap.ui.core.Control;
          /**
           * @EXPERIMENTAL (since 1.50)
           *
           * Gets content of aggregation {@link #getZoomLevelTwoContent zoomLevelTwoContent}.
           *
           * The node's content used for zoom level 2. If this aggregation is set, no default content like title and
           * texts is used.
           */
          getZoomLevelTwoContent(): sap.ui.core.Control;
          /**
           * Removes all the controls in the association named {@link #getParents parents}.
           */
          removeAllParents(): sap.ui.core.ID[];
          /**
           * Removes an parent from the association named {@link #getParents parents}.
           */
          removeParent(
            /**
             * The parent to be removed or its index or ID
             */
            vParent:
              | number
              | sap.ui.core.ID
              | sap.suite.ui.commons.ProcessFlowNode
          ): sap.ui.core.ID;
          /**
           * Sets the aggregated {@link #getAriaProperties ariaProperties}.
           */
          setAriaProperties(
            /**
             * The ariaProperties to set
             */
            oAriaProperties: sap.suite.ui.commons.AriaProperties
          ): sap.suite.ui.commons.ProcessFlowNode;
          /**
           * Sets a new value for property {@link #getChildren children}.
           *
           * Defines an array of children of the node.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setChildren(
            /**
             * New value for property `children`
             */
            sChildren: any[]
          ): sap.suite.ui.commons.ProcessFlowNode;
          /**
           * Sets a new value for property {@link #getFocused focused}.
           *
           * The parameter defines if the node should be displayed in focus state.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setFocused(
            /**
             * New value for property `focused`
             */
            bFocused: boolean
          ): sap.suite.ui.commons.ProcessFlowNode;
          /**
           * Sets a new value for property {@link #getHighlighted highlighted}.
           *
           * The parameter defines if the node should be displayed in highlighted state.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setHighlighted(
            /**
             * New value for property `highlighted`
             */
            bHighlighted: boolean
          ): sap.suite.ui.commons.ProcessFlowNode;
          /**
           * @deprecated (since 1.26) - According to the new requirement there should be only one click event for
           * each node (click on the whole node – see Press event) that is why titlePress event should not be used
           * any longer. Hence isTitleClickable should not be used either.
           *
           * Sets a new value for property {@link #getIsTitleClickable isTitleClickable}.
           *
           * Specifies if the node title is clickable.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setIsTitleClickable(
            /**
             * New value for property `isTitleClickable`
             */
            bIsTitleClickable: boolean
          ): sap.suite.ui.commons.ProcessFlowNode;
          /**
           * Sets a new value for property {@link #getLaneId laneId}.
           *
           * Specifies the assignment of the node to the respective lane.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setLaneId(
            /**
             * New value for property `laneId`
             */
            sLaneId: string
          ): sap.suite.ui.commons.ProcessFlowNode;
          /**
           * Sets a new value for property {@link #getNodeId nodeId}.
           *
           * Node identifier.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setNodeId(
            /**
             * New value for property `nodeId`
             */
            sNodeId: string
          ): sap.suite.ui.commons.ProcessFlowNode;
          /**
           * Sets a new value for property {@link #getSelected selected}.
           *
           * The parameter defines if the node should be displayed in selected state.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setSelected(
            /**
             * New value for property `selected`
             */
            bSelected: boolean
          ): sap.suite.ui.commons.ProcessFlowNode;
          /**
           * Sets a new value for property {@link #getState state}.
           *
           * State of the node.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `Neutral`.
           */
          setState(
            /**
             * New value for property `state`
             */
            sState: sap.suite.ui.commons.ProcessFlowNodeState
          ): sap.suite.ui.commons.ProcessFlowNode;
          /**
           * Sets a new value for property {@link #getStateText stateText}.
           *
           * Description of the state, for example "Status OK".
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setStateText(
            /**
             * New value for property `stateText`
             */
            sStateText: string
          ): sap.suite.ui.commons.ProcessFlowNode;
          /**
           * Sets a new value for property {@link #getTag tag}.
           *
           * The user-defined object which is returned back to the user by a node click event.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setTag(
            /**
             * New value for property `tag`
             */
            oTag: object
          ): sap.suite.ui.commons.ProcessFlowNode;
          /**
           * Sets a new value for property {@link #getTexts texts}.
           *
           * The property contains the additional texts on the node. The expected type is array of strings. One array
           * must not contain more than two strings. Additional strings in the array will be ignored.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setTexts(
            /**
             * New value for property `texts`
             */
            sTexts: string[]
          ): sap.suite.ui.commons.ProcessFlowNode;
          /**
           * Sets a new value for property {@link #getTitle title}.
           *
           * The node title.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setTitle(
            /**
             * New value for property `title`
             */
            sTitle: string
          ): sap.suite.ui.commons.ProcessFlowNode;
          /**
           * Sets a new value for property {@link #getTitleAbbreviation titleAbbreviation}.
           *
           * Title abbreviation is used in zoom level 'Three'.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setTitleAbbreviation(
            /**
             * New value for property `titleAbbreviation`
             */
            sTitleAbbreviation: string
          ): sap.suite.ui.commons.ProcessFlowNode;
          /**
           * Sets a new value for property {@link #getType type}.
           *
           * Type of the node.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `Single`.
           */
          setType(
            /**
             * New value for property `type`
             */
            sType: sap.suite.ui.commons.ProcessFlowNodeType
          ): sap.suite.ui.commons.ProcessFlowNode;
          /**
           * @EXPERIMENTAL (since 1.50)
           *
           * Sets the aggregated {@link #getZoomLevelFourContent zoomLevelFourContent}.
           */
          setZoomLevelFourContent(
            /**
             * The zoomLevelFourContent to set
             */
            oZoomLevelFourContent: sap.ui.core.Control
          ): sap.suite.ui.commons.ProcessFlowNode;
          /**
           * @EXPERIMENTAL (since 1.50)
           *
           * Sets the aggregated {@link #getZoomLevelOneContent zoomLevelOneContent}.
           */
          setZoomLevelOneContent(
            /**
             * The zoomLevelOneContent to set
             */
            oZoomLevelOneContent: sap.ui.core.Control
          ): sap.suite.ui.commons.ProcessFlowNode;
          /**
           * @EXPERIMENTAL (since 1.50)
           *
           * Sets the aggregated {@link #getZoomLevelThreeContent zoomLevelThreeContent}.
           */
          setZoomLevelThreeContent(
            /**
             * The zoomLevelThreeContent to set
             */
            oZoomLevelThreeContent: sap.ui.core.Control
          ): sap.suite.ui.commons.ProcessFlowNode;
          /**
           * @EXPERIMENTAL (since 1.50)
           *
           * Sets the aggregated {@link #getZoomLevelTwoContent zoomLevelTwoContent}.
           */
          setZoomLevelTwoContent(
            /**
             * The zoomLevelTwoContent to set
             */
            oZoomLevelTwoContent: sap.ui.core.Control
          ): sap.suite.ui.commons.ProcessFlowNode;
          /**
           * @deprecated (since 1.50.0) - This event is deprecated, use nodePress event instead. See
           * {@link sap.suite.ui.commons.ProcessFlow.html#event:nodePress}.
           *
           * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.suite.ui.commons.ProcessFlowNode`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.ProcessFlowNode` itself.
           *
           * This event is fired when the user clicks on the node. However, this event is not fired if the titlePress
           * event has been fired.
           */
          attachPress(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ProcessFlowNode`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.ProcessFlowNode;
          /**
           * @deprecated (since 1.26) - Should not be used any longer, use Press event instead ( click on the node)
           *
           * Attaches event handler `fnFunction` to the {@link #event:titlePress titlePress} event of this `sap.suite.ui.commons.ProcessFlowNode`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.ProcessFlowNode` itself.
           *
           * This event handler is executed when the user clicks the node title. This event is fired only when the
           * title is clickable (isTitleClickable equals true).
           */
          attachTitlePress(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ProcessFlowNode`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.ProcessFlowNode;
        }
        /**
         * @deprecated (since 1.32) - Deprecated. Standard Fiori technology should be used.
         *
         * A configuration control defining how the content of the sap.suite.ui.commons.ViewRepeater control is
         * displayed and what data is bound.
         */
        class RepeaterViewConfiguration extends sap.ui.core.Control {
          /**
           * Constructor for a new RepeaterViewConfiguration.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: RepeaterViewConfigurationOpts
          );

          /**
           * Destroys the externalRepresentation in the aggregation {@link #getExternalRepresentation externalRepresentation}.
           */
          destroyExternalRepresentation(): sap.suite.ui.commons.RepeaterViewConfiguration;
          /**
           * Destroys the template in the aggregation {@link #getTemplate template}.
           */
          destroyTemplate(): sap.suite.ui.commons.RepeaterViewConfiguration;
          /**
           * Creates a new subclass of class sap.suite.ui.commons.RepeaterViewConfiguration with name `sClassName`
           * and enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets current value of property {@link #getExternal external}.
           *
           * Indicates if the external representation of this view is rendered instead of the row repeater's own content.
           *
           * Default value is `false`.
           */
          getExternal(): boolean;
          /**
           * Gets content of aggregation {@link #getExternalRepresentation externalRepresentation}.
           *
           * The control to be rendered instead of sap.suite.ui.commons.ViewRepeater's own content. Only used if the
           * "external" property is set to true. This allows you to create custom views, for example, Table views.
           * The sap.suite.ui.commons.ViewRepeater control will share its model with this control if the control does
           * not have its own model.
           */
          getExternalRepresentation(): sap.ui.core.Control;
          /**
           * Gets current value of property {@link #getIcon icon}.
           *
           * A path to the icon representing this view in sap.suite.ui.commons.ViewRepeater view selector.
           */
          getIcon(): sap.ui.core.URI;
          /**
           * Gets current value of property {@link #getIconHovered iconHovered}.
           *
           * A path to the icon representing this view in sap.suite.ui.commons.ViewRepeater view selector when the
           * regular icon is hovered.
           */
          getIconHovered(): sap.ui.core.URI;
          /**
           * Gets current value of property {@link #getIconSelected iconSelected}.
           *
           * A path to the icon representing this view in sap.suite.ui.commons.ViewRepeater view selector when the
           * regular icon is selected.
           */
          getIconSelected(): sap.ui.core.URI;
          /**
           * Gets current value of property {@link #getItemHeight itemHeight}.
           *
           * The height of the tile in this view in pixels. Only applicable if the responsive property is set to true.
           * This value is used for calculating the number of tile rows.
           */
          getItemHeight(): number;
          /**
           * Gets current value of property {@link #getItemMinWidth itemMinWidth}.
           *
           * The minimal width of the tile in this view. Only applicable if "responsive" property is set to true.
           *
           * Default value is `-1`.
           */
          getItemMinWidth(): number;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.RepeaterViewConfiguration.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getNumberOfTiles numberOfTiles}.
           *
           * The number of tiles/rows that will be shown on a single page in this view.
           *
           * Default value is `-1`.
           */
          getNumberOfTiles(): number;
          /**
           * Gets current value of property {@link #getPath path}.
           *
           * A path used for rows/titles data binding.
           */
          getPath(): string;
          /**
           * Gets current value of property {@link #getResponsive responsive}.
           *
           * This parameter indicates whether the content is shown in rows or tiles. If false, the content is shown
           * in rows just like in core sap.ui.commons.RowRepeater. If true, the content is shown in tiles (similar
           * to sap.ui.ux3.DataSet control) that have minimal width defined by the "itemMinWidth" property. The number
           * of columns depends on the parent control's width. If you resize the control, the number of columns may
           * change respectively so that the content tiles can fill the entire space of a row.
           *
           * Default value is `false`.
           */
          getResponsive(): any;
          /**
           * Gets content of aggregation {@link #getTemplate template}.
           *
           * The control used as a template while displaying rows/tiles in this view. It should not have fixed width
           * wider than defined by the "itemMinWidth" property, otherwise some content may appear cropped.
           */
          getTemplate(): sap.ui.core.Control;
          /**
           * Gets current value of property {@link #getTitle title}.
           *
           * The title of the view to be displayed in sap.suite.ui.commons.ViewRepeater view selector. If neither
           * this nor "icon" property are defined, the default title "View ##" will be shown, where ## is an index
           * number of the view in View Repeater starting from 1.
           */
          getTitle(): string;
          /**
           * Sets a new value for property {@link #getExternal external}.
           *
           * Indicates if the external representation of this view is rendered instead of the row repeater's own content.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setExternal(
            /**
             * New value for property `external`
             */
            bExternal: boolean
          ): sap.suite.ui.commons.RepeaterViewConfiguration;
          /**
           * Sets the aggregated {@link #getExternalRepresentation externalRepresentation}.
           */
          setExternalRepresentation(
            /**
             * The externalRepresentation to set
             */
            oExternalRepresentation: sap.ui.core.Control
          ): sap.suite.ui.commons.RepeaterViewConfiguration;
          /**
           * Sets a new value for property {@link #getIcon icon}.
           *
           * A path to the icon representing this view in sap.suite.ui.commons.ViewRepeater view selector.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setIcon(
            /**
             * New value for property `icon`
             */
            sIcon: sap.ui.core.URI
          ): sap.suite.ui.commons.RepeaterViewConfiguration;
          /**
           * Sets a new value for property {@link #getIconHovered iconHovered}.
           *
           * A path to the icon representing this view in sap.suite.ui.commons.ViewRepeater view selector when the
           * regular icon is hovered.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setIconHovered(
            /**
             * New value for property `iconHovered`
             */
            sIconHovered: sap.ui.core.URI
          ): sap.suite.ui.commons.RepeaterViewConfiguration;
          /**
           * Sets a new value for property {@link #getIconSelected iconSelected}.
           *
           * A path to the icon representing this view in sap.suite.ui.commons.ViewRepeater view selector when the
           * regular icon is selected.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setIconSelected(
            /**
             * New value for property `iconSelected`
             */
            sIconSelected: sap.ui.core.URI
          ): sap.suite.ui.commons.RepeaterViewConfiguration;
          /**
           * Sets a new value for property {@link #getItemHeight itemHeight}.
           *
           * The height of the tile in this view in pixels. Only applicable if the responsive property is set to true.
           * This value is used for calculating the number of tile rows.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setItemHeight(
            /**
             * New value for property `itemHeight`
             */
            iItemHeight: number
          ): sap.suite.ui.commons.RepeaterViewConfiguration;
          /**
           * Sets a new value for property {@link #getItemMinWidth itemMinWidth}.
           *
           * The minimal width of the tile in this view. Only applicable if "responsive" property is set to true.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `-1`.
           */
          setItemMinWidth(
            /**
             * New value for property `itemMinWidth`
             */
            iItemMinWidth: number
          ): sap.suite.ui.commons.RepeaterViewConfiguration;
          /**
           * Sets a new value for property {@link #getNumberOfTiles numberOfTiles}.
           *
           * The number of tiles/rows that will be shown on a single page in this view.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `-1`.
           */
          setNumberOfTiles(
            /**
             * New value for property `numberOfTiles`
             */
            iNumberOfTiles: number
          ): sap.suite.ui.commons.RepeaterViewConfiguration;
          /**
           * Sets a new value for property {@link #getPath path}.
           *
           * A path used for rows/titles data binding.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setPath(
            /**
             * New value for property `path`
             */
            sPath: string
          ): sap.suite.ui.commons.RepeaterViewConfiguration;
          /**
           * Sets a new value for property {@link #getResponsive responsive}.
           *
           * This parameter indicates whether the content is shown in rows or tiles. If false, the content is shown
           * in rows just like in core sap.ui.commons.RowRepeater. If true, the content is shown in tiles (similar
           * to sap.ui.ux3.DataSet control) that have minimal width defined by the "itemMinWidth" property. The number
           * of columns depends on the parent control's width. If you resize the control, the number of columns may
           * change respectively so that the content tiles can fill the entire space of a row.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setResponsive(
            /**
             * New value for property `responsive`
             */
            oResponsive: any
          ): sap.suite.ui.commons.RepeaterViewConfiguration;
          /**
           * Sets the aggregated {@link #getTemplate template}.
           */
          setTemplate(
            /**
             * The template to set
             */
            oTemplate: sap.ui.core.Control
          ): sap.suite.ui.commons.RepeaterViewConfiguration;
          /**
           * Sets a new value for property {@link #getTitle title}.
           *
           * The title of the view to be displayed in sap.suite.ui.commons.ViewRepeater view selector. If neither
           * this nor "icon" property are defined, the default title "View ##" will be shown, where ## is an index
           * number of the view in View Repeater starting from 1.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setTitle(
            /**
             * New value for property `title`
             */
            sTitle: string
          ): sap.suite.ui.commons.RepeaterViewConfiguration;
        }
        /**
         * @deprecated (since 1.34) - Deprecated. Not Fiori.
         *
         * The Split Button Control is a composite control that consists of a default-action Button and a Menu Button
         * control. The default-action button control represents a simple push button. It is used for initiating
         * actions, such as save or print. It can contain some text, an icon, or both; the order of the two can
         * be configured. The action initiated by this button is considered to be the default action for the control,
         * and it must be one of the selections defined in the Menu Button menu. The Menu Button control is a button
         * that opens a menu upon user's click. MenuButton is a composition of the Menu control and the Button control
         * and thus inheriting all features. When a menu item is selected by the user, MenuButton throws an event
         * called itemSelected. The event transfers the itemId of the selected item. As an alternative, the button
         * press event can be used which has a similar behavior.
         */
        class SplitButton extends sap.ui.core.Control {
          /**
           * Constructor for a new SplitButton.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: SplitButtonOpts
          );

          /**
           * Destroys the menu in the aggregation {@link #getMenu menu}.
           */
          destroyMenu(): sap.suite.ui.commons.SplitButton;
          /**
           * Creates a new subclass of class sap.suite.ui.commons.SplitButton with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets current value of property {@link #getEnabled enabled}.
           *
           * Boolean property to enable the control (default is true). Buttons that are disabled have other colors
           * than enabled ones, depending on custom settings.
           *
           * Default value is `true`.
           */
          getEnabled(): boolean;
          /**
           * Gets current value of property {@link #getIcon icon}.
           *
           * Icon to be displayed as graphical element within the action button.
           *
           * Default value is `empty string`.
           */
          getIcon(): sap.ui.core.URI;
          /**
           * Gets current value of property {@link #getIconFirst iconFirst}.
           *
           * If set to true (default), the display sequence is 1. icon 2. control text .
           *
           * Default value is `true`.
           */
          getIconFirst(): boolean;
          /**
           * Gets current value of property {@link #getLite lite}.
           *
           * The split button is rendered as lite split button.
           *
           * Default value is `false`.
           */
          getLite(): boolean;
          /**
           * Gets content of aggregation {@link #getMenu menu}.
           *
           * Menu that shall be opened when the menu part of the button is clicked
           */
          getMenu(): sap.ui.commons.Menu;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.SplitButton.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getStyle style}.
           *
           * Style of the control (e.g. emphasized, accept)
           *
           * Default value is `Default`.
           */
          getStyle(): sap.ui.commons.ButtonStyle;
          /**
           * Gets current value of property {@link #getStyled styled}.
           *
           * Indicatied if the button is styled. If not it is rendered as native HTML-button. In this case a custom
           * styling can be added usig addStyleClass.
           *
           * Default value is `true`.
           */
          getStyled(): boolean;
          /**
           * Gets current value of property {@link #getText text}.
           *
           * Text to be displayed for the action button.
           *
           * Default value is `empty string`.
           */
          getText(): string;
          /**
           * Gets current value of property {@link #getVisible visible}.
           *
           * Invisible split buttons are not rendered
           *
           * Default value is `true`.
           */
          // @ts-ignore
          getVisible(): boolean;
          /**
           * Sets a new value for property {@link #getEnabled enabled}.
           *
           * Boolean property to enable the control (default is true). Buttons that are disabled have other colors
           * than enabled ones, depending on custom settings.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setEnabled(
            /**
             * New value for property `enabled`
             */
            bEnabled: boolean
          ): sap.suite.ui.commons.SplitButton;
          /**
           * Sets a new value for property {@link #getIcon icon}.
           *
           * Icon to be displayed as graphical element within the action button.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `empty string`.
           */
          setIcon(
            /**
             * New value for property `icon`
             */
            sIcon: sap.ui.core.URI
          ): sap.suite.ui.commons.SplitButton;
          /**
           * Sets a new value for property {@link #getIconFirst iconFirst}.
           *
           * If set to true (default), the display sequence is 1. icon 2. control text .
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setIconFirst(
            /**
             * New value for property `iconFirst`
             */
            bIconFirst: boolean
          ): sap.suite.ui.commons.SplitButton;
          /**
           * Sets a new value for property {@link #getLite lite}.
           *
           * The split button is rendered as lite split button.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setLite(
            /**
             * New value for property `lite`
             */
            bLite: boolean
          ): sap.suite.ui.commons.SplitButton;
          /**
           * Set the menu to the button and set menu item for the action button. The menu item for action button must
           * exist in the menu. If it doesn't exist the first menu item is set by default.
           */
          setMenu(
            /**
             * Menu
             */
            oMenu: sap.ui.commons.Menu,
            /**
             * Item of menu
             */
            oMenuItem: sap.ui.commons.MenuItem
          ): sap.suite.ui.commons.SplitButton;
          /**
           * Sets a new value for property {@link #getStyle style}.
           *
           * Style of the control (e.g. emphasized, accept)
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `Default`.
           */
          setStyle(
            /**
             * New value for property `style`
             */
            sStyle: sap.ui.commons.ButtonStyle
          ): sap.suite.ui.commons.SplitButton;
          /**
           * Sets a new value for property {@link #getStyled styled}.
           *
           * Indicatied if the button is styled. If not it is rendered as native HTML-button. In this case a custom
           * styling can be added usig addStyleClass.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setStyled(
            /**
             * New value for property `styled`
             */
            bStyled: boolean
          ): sap.suite.ui.commons.SplitButton;
          /**
           * Sets a new value for property {@link #getText text}.
           *
           * Text to be displayed for the action button.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `empty string`.
           */
          setText(
            /**
             * New value for property `text`
             */
            sText: string
          ): sap.suite.ui.commons.SplitButton;
          /**
           * Sets a new value for property {@link #getVisible visible}.
           *
           * Invisible split buttons are not rendered
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          // @ts-ignore
          setVisible(
            /**
             * New value for property `visible`
             */
            bVisible: boolean
          ): sap.suite.ui.commons.SplitButton;
        }
        /**
         * @deprecated (since 1.34) - Deprecated.
         *
         * The analytical filter control. The control works only with the OData model connected to the analytical
         * OData service (for example, HANA XS Analytical view exposed as an OData service).
         */
        class TargetFilter extends sap.ui.core.Control {
          /**
           * Constructor for a new TargetFilter.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: TargetFilterOpts
          );

          /**
           * Adds some column to the aggregation {@link #getColumns columns}.
           */
          addColumn(
            /**
             * The column to add; if empty, nothing is inserted
             */
            oColumn: sap.suite.ui.commons.TargetFilterColumn
          ): sap.suite.ui.commons.TargetFilter;
          /**
           * Adds some selectedColumn into the association {@link #getSelectedColumns selectedColumns}.
           */
          addSelectedColumn(
            /**
             * The selectedColumns to add; if empty, nothing is inserted
             */
            vSelectedColumn:
              | sap.ui.core.ID
              | sap.suite.ui.commons.TargetFilterColumn
          ): sap.suite.ui.commons.TargetFilter;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:cancel cancel} event of this `sap.suite.ui.commons.TargetFilter`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.TargetFilter` itself.
           *
           * This event is fired if the user changes a selected filter set to the filter set used for the last search.
           */
          attachCancel(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.TargetFilter` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.TargetFilter;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:filterChange filterChange} event of this `sap.suite.ui.commons.TargetFilter`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.TargetFilter` itself.
           *
           * This event is fired if the user changes a selected filter set.
           */
          attachFilterChange(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.TargetFilter` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.TargetFilter;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:search search} event of this `sap.suite.ui.commons.TargetFilter`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.TargetFilter` itself.
           *
           * This event is fired if the user chooses the Show Selected link.
           */
          attachSearch(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.TargetFilter` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.TargetFilter;
          /**
           * Destroys all the columns in the aggregation {@link #getColumns columns}.
           */
          destroyColumns(): sap.suite.ui.commons.TargetFilter;
          /**
           * Destroys the measureColumn in the aggregation {@link #getMeasureColumn measureColumn}.
           */
          destroyMeasureColumn(): sap.suite.ui.commons.TargetFilter;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:cancel cancel} event of this `sap.suite.ui.commons.TargetFilter`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachCancel(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.TargetFilter;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:filterChange filterChange} event of this `sap.suite.ui.commons.TargetFilter`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachFilterChange(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.TargetFilter;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:search search} event of this `sap.suite.ui.commons.TargetFilter`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachSearch(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.TargetFilter;
          /**
           * Creates a new subclass of class sap.suite.ui.commons.TargetFilter with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:cancel cancel} to attached listeners.
           */
          fireCancel(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.suite.ui.commons.TargetFilter;
          /**
           * Fires event {@link #event:filterChange filterChange} to attached listeners.
           */
          fireFilterChange(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.suite.ui.commons.TargetFilter;
          /**
           * Fires event {@link #event:search search} to attached listeners.
           */
          fireSearch(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.suite.ui.commons.TargetFilter;
          /**
           * Gets content of aggregation {@link #getColumns columns}.
           *
           * The list of the columns.
           */
          getColumns(): sap.suite.ui.commons.TargetFilterColumn[];
          /**
           * Gets current value of property {@link #getEntitySet entitySet}.
           *
           * The name of the entity set from OData service metadata. The filtering applies to this entity set.
           */
          getEntitySet(): string;
          /**
           * Returns a selected filter set.
           */
          getFilters(): any[];
          /**
           * Gets content of aggregation {@link #getMeasureColumn measureColumn}.
           *
           * The measure column.
           */
          getMeasureColumn(): sap.suite.ui.commons.TargetFilterMeasureColumn;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.TargetFilter.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Returns the binding parameters for the controls that use this control.
           */
          getParameters(): object;
          /**
           * Returns array of IDs of the elements which are the current targets of the association {@link #getSelectedColumns
           * selectedColumns}.
           */
          getSelectedColumns(): sap.ui.core.ID[];
          /**
           * Checks for the provided `sap.suite.ui.commons.TargetFilterColumn` in the aggregation {@link #getColumns
           * columns}. and returns its index if found or -1 otherwise.
           */
          indexOfColumn(
            /**
             * The column whose index is looked for
             */
            oColumn: sap.suite.ui.commons.TargetFilterColumn
          ): number;
          /**
           * Inserts a column into the aggregation {@link #getColumns columns}.
           */
          insertColumn(
            /**
             * The column to insert; if empty, nothing is inserted
             */
            oColumn: sap.suite.ui.commons.TargetFilterColumn,
            /**
             * The `0`-based index the column should be inserted at; for a negative value of `iIndex`, the column is
             * inserted at position 0; for a value greater than the current size of the aggregation, the column is inserted
             * at the last position
             */
            iIndex: number
          ): sap.suite.ui.commons.TargetFilter;
          /**
           * Removes all the controls from the aggregation {@link #getColumns columns}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllColumns(): sap.suite.ui.commons.TargetFilterColumn[];
          /**
           * Removes all the controls in the association named {@link #getSelectedColumns selectedColumns}.
           */
          removeAllSelectedColumns(): sap.ui.core.ID[];
          /**
           * Removes a column from the aggregation {@link #getColumns columns}.
           */
          removeColumn(
            /**
             * The column to remove or its index or id
             */
            vColumn: number | string | sap.suite.ui.commons.TargetFilterColumn
          ): sap.suite.ui.commons.TargetFilterColumn;
          /**
           * Removes an selectedColumn from the association named {@link #getSelectedColumns selectedColumns}.
           */
          removeSelectedColumn(
            /**
             * The selectedColumn to be removed or its index or ID
             */
            vSelectedColumn:
              | number
              | sap.ui.core.ID
              | sap.suite.ui.commons.TargetFilterColumn
          ): sap.ui.core.ID;
          /**
           * Triggers filtering in the controls that use this control. Returns this control for the method chaining.
           */
          search(): sap.suite.ui.commons.TargetFilter;
          /**
           * Sets a new value for property {@link #getEntitySet entitySet}.
           *
           * The name of the entity set from OData service metadata. The filtering applies to this entity set.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setEntitySet(
            /**
             * New value for property `entitySet`
             */
            sEntitySet: string
          ): sap.suite.ui.commons.TargetFilter;
          /**
           * Sets the aggregated {@link #getMeasureColumn measureColumn}.
           */
          setMeasureColumn(
            /**
             * The measureColumn to set
             */
            oMeasureColumn: sap.suite.ui.commons.TargetFilterMeasureColumn
          ): sap.suite.ui.commons.TargetFilter;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:cancel cancel} event of this `sap.suite.ui.commons.TargetFilter`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.TargetFilter` itself.
           *
           * This event is fired if the user changes a selected filter set to the filter set used for the last search.
           */
          attachCancel(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.TargetFilter` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.TargetFilter;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:filterChange filterChange} event of this `sap.suite.ui.commons.TargetFilter`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.TargetFilter` itself.
           *
           * This event is fired if the user changes a selected filter set.
           */
          attachFilterChange(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.TargetFilter` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.TargetFilter;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:search search} event of this `sap.suite.ui.commons.TargetFilter`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.TargetFilter` itself.
           *
           * This event is fired if the user chooses the Show Selected link.
           */
          attachSearch(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.TargetFilter` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.TargetFilter;
        }
        /**
         * @deprecated (since 1.34) - Deprecated.
         *
         * The configuration element for the column in the TargetFilter control.
         */
        class TargetFilterColumn extends sap.ui.core.Element {
          /**
           * Constructor for a new TargetFilterColumn.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: TargetFilterColumnOpts
          );

          /**
           * Creates a new subclass of class sap.suite.ui.commons.TargetFilterColumn with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets current value of property {@link #getLength length}.
           *
           * The number of the retrieved entries for the cloud of the links in the quadrant. The quadrant can display
           * fewer links than retrieved. The font size of the links in the quadrant depends on the measure number.
           * The font size of the links is relative in the retrieved group.
           *
           * Default value is `10`.
           */
          getLength(): number;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.TargetFilterColumn.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getPath path}.
           *
           * The binding path.
           */
          getPath(): string;
          /**
           * Gets current value of property {@link #getTitle title}.
           *
           * The column title.
           */
          getTitle(): string;
          /**
           * Gets current value of property {@link #getType type}.
           *
           * The type of the displayed data. The type of the property must be sap.ui.model.SimpleType or its descendants.
           * By default, sap.ui.model.type.String. This property is used for formatting the displayed values. If sap.ui.model.type.String,
           * the filter operator in the Search field of the column selection dialog is 'Contains'. In other cases,
           * the filter operator is 'EQ'.
           */
          getType(): any;
          /**
           * Sets a new value for property {@link #getLength length}.
           *
           * The number of the retrieved entries for the cloud of the links in the quadrant. The quadrant can display
           * fewer links than retrieved. The font size of the links in the quadrant depends on the measure number.
           * The font size of the links is relative in the retrieved group.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `10`.
           */
          setLength(
            /**
             * New value for property `length`
             */
            iLength: number
          ): sap.suite.ui.commons.TargetFilterColumn;
          /**
           * Sets a new value for property {@link #getPath path}.
           *
           * The binding path.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setPath(
            /**
             * New value for property `path`
             */
            sPath: string
          ): sap.suite.ui.commons.TargetFilterColumn;
          /**
           * Sets a new value for property {@link #getTitle title}.
           *
           * The column title.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setTitle(
            /**
             * New value for property `title`
             */
            sTitle: string
          ): sap.suite.ui.commons.TargetFilterColumn;
          /**
           * Sets a new value for property {@link #getType type}.
           *
           * The type of the displayed data. The type of the property must be sap.ui.model.SimpleType or its descendants.
           * By default, sap.ui.model.type.String. This property is used for formatting the displayed values. If sap.ui.model.type.String,
           * the filter operator in the Search field of the column selection dialog is 'Contains'. In other cases,
           * the filter operator is 'EQ'.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setType(
            /**
             * New value for property `type`
             */
            oType: any
          ): sap.suite.ui.commons.TargetFilterColumn;
        }
        /**
         * @deprecated (since 1.34) - Deprecated.
         *
         * The configuration element for the measure column in the TargetFilter control.
         */
        class TargetFilterMeasureColumn extends sap.ui.core.Element {
          /**
           * Constructor for a new TargetFilterMeasureColumn.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: TargetFilterMeasureColumnOpts
          );

          /**
           * Creates a new subclass of class sap.suite.ui.commons.TargetFilterMeasureColumn with name `sClassName`
           * and enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.TargetFilterMeasureColumn.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getPath path}.
           *
           * The binding path.
           */
          getPath(): string;
          /**
           * Gets current value of property {@link #getType type}.
           *
           * This property is used for formatting the displayed values. The type of the property must be sap.ui.model.SimpleType
           * or its descendants. By default, sap.ui.model.type.Integer with enabled grouping.
           */
          getType(): any;
          /**
           * Sets a new value for property {@link #getPath path}.
           *
           * The binding path.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setPath(
            /**
             * New value for property `path`
             */
            sPath: string
          ): sap.suite.ui.commons.TargetFilterMeasureColumn;
          /**
           * Sets a new value for property {@link #getType type}.
           *
           * This property is used for formatting the displayed values. The type of the property must be sap.ui.model.SimpleType
           * or its descendants. By default, sap.ui.model.type.Integer with enabled grouping.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setType(
            /**
             * New value for property `type`
             */
            oType: any
          ): sap.suite.ui.commons.TargetFilterMeasureColumn;
        }
        /**
         * @deprecated (since 1.32) - Deprecated. Object page should be used instead.
         *
         * This control contains a collection of the sap.ui.ux3.ThingViewer controls or descendants of sap.ui.ux3.ThingViewer.
         * It allows you to navigate through them as well as delete them from the collection.
         */
        class ThingCollection extends sap.ui.core.Control {
          /**
           * Constructor for a new ThingCollection.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: ThingCollectionOpts
          );

          /**
           * Adds some content to the aggregation {@link #getContent content}.
           */
          addContent(
            /**
             * The content to add; if empty, nothing is inserted
             */
            oContent: sap.ui.ux3.ThingViewer
          ): sap.suite.ui.commons.ThingCollection;
          /**
           * Destroys all the content in the aggregation {@link #getContent content}.
           */
          destroyContent(): sap.suite.ui.commons.ThingCollection;
          /**
           * Creates a new subclass of class sap.suite.ui.commons.ThingCollection with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets content of aggregation {@link #getContent content}.
           *
           * Contains a collection of sap.ui.ux3.ThingViewer controls or descendants of sap.ui.ux3.ThingViewer.
           */
          getContent(): sap.ui.ux3.ThingViewer[];
          /**
           * Gets current value of property {@link #getHeight height}.
           *
           * The height of the control.
           *
           * Default value is `100%`.
           */
          getHeight(): sap.ui.core.CSSSize;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.ThingCollection.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getMinHeight minHeight}.
           *
           * The minimal height of the control.
           */
          getMinHeight(): sap.ui.core.CSSSize;
          /**
           * Gets current value of property {@link #getMinWidth minWidth}.
           *
           * The minimal width of the control.
           */
          getMinWidth(): sap.ui.core.CSSSize;
          /**
           * Gets current value of property {@link #getWidth width}.
           *
           * The width of the control.
           *
           * Default value is `100%`.
           */
          getWidth(): sap.ui.core.CSSSize;
          /**
           * Checks for the provided `sap.ui.ux3.ThingViewer` in the aggregation {@link #getContent content}. and
           * returns its index if found or -1 otherwise.
           */
          indexOfContent(
            /**
             * The content whose index is looked for
             */
            oContent: sap.ui.ux3.ThingViewer
          ): number;
          /**
           * Inserts a content into the aggregation {@link #getContent content}.
           */
          insertContent(
            /**
             * The content to insert; if empty, nothing is inserted
             */
            oContent: sap.ui.ux3.ThingViewer,
            /**
             * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
             * is inserted at position 0; for a value greater than the current size of the aggregation, the content
             * is inserted at the last position
             */
            iIndex: number
          ): sap.suite.ui.commons.ThingCollection;
          /**
           * Removes all the controls from the aggregation {@link #getContent content}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllContent(): sap.ui.ux3.ThingViewer[];
          /**
           * Removes a content from the aggregation {@link #getContent content}.
           */
          removeContent(
            /**
             * The content to remove or its index or id
             */
            vContent: number | string | sap.ui.ux3.ThingViewer
          ): sap.ui.ux3.ThingViewer;
          /**
           * Sets a new value for property {@link #getHeight height}.
           *
           * The height of the control.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `100%`.
           */
          setHeight(
            /**
             * New value for property `height`
             */
            sHeight: sap.ui.core.CSSSize
          ): sap.suite.ui.commons.ThingCollection;
          /**
           * Sets a new value for property {@link #getMinHeight minHeight}.
           *
           * The minimal height of the control.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setMinHeight(
            /**
             * New value for property `minHeight`
             */
            sMinHeight: sap.ui.core.CSSSize
          ): sap.suite.ui.commons.ThingCollection;
          /**
           * Sets a new value for property {@link #getMinWidth minWidth}.
           *
           * The minimal width of the control.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setMinWidth(
            /**
             * New value for property `minWidth`
             */
            sMinWidth: sap.ui.core.CSSSize
          ): sap.suite.ui.commons.ThingCollection;
          /**
           * Sets a new value for property {@link #getWidth width}.
           *
           * The width of the control.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `100%`.
           */
          setWidth(
            /**
             * New value for property `width`
             */
            sWidth: sap.ui.core.CSSSize
          ): sap.suite.ui.commons.ThingCollection;
        }
        /**
         * @deprecated (since 1.32) - Deprecated. Object page should be used instead.
         *
         * This control extends the sap.ui.ux3.ThingInspector control. It displays the sap.suite.ui.commons.ThreePanelThingViewer
         * control in the sap.ui.ux3.Overlay control.
         */
        class ThreePanelThingInspector extends sap.ui.ux3.ThingInspector {
          /**
           * Constructor for a new ThreePanelThingInspector.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: ThreePanelThingInspectorOpts
          );

          /**
           * Adds some menuContent to the aggregation {@link #getMenuContent menuContent}.
           */
          addMenuContent(
            /**
             * The menuContent to add; if empty, nothing is inserted
             */
            oMenuContent: sap.ui.commons.Link
          ): sap.suite.ui.commons.ThreePanelThingInspector;
          /**
           * Destroys all the menuContent in the aggregation {@link #getMenuContent menuContent}.
           */
          destroyMenuContent(): sap.suite.ui.commons.ThreePanelThingInspector;
          /**
           * Creates a new subclass of class sap.suite.ui.commons.ThreePanelThingInspector with name `sClassName`
           * and enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.ux3.ThingInspector.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets current value of property {@link #getLogo logo}.
           *
           * A URL of the source of the ThingViewer's key visual image.
           */
          getLogo(): sap.ui.core.URI;
          /**
           * Gets content of aggregation {@link #getMenuContent menuContent}.
           *
           * The items of the ThingViewer's Action Menu.
           */
          getMenuContent(): sap.ui.commons.Link[];
          /**
           * Returns a metadata object for class sap.suite.ui.commons.ThreePanelThingInspector.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getShowHeader showHeader}.
           *
           * Shows or hides a middle panel of the ThingViewer named Header that contains general information.
           *
           * Default value is `true`.
           */
          getShowHeader(): boolean;
          /**
           * Gets current value of property {@link #getSidebarWidth sidebarWidth}.
           *
           * The width of the ThingViewer's navigation panel.
           *
           * Default value is `224px`.
           */
          getSidebarWidth(): sap.ui.core.CSSSize;
          /**
           * Checks for the provided `sap.ui.commons.Link` in the aggregation {@link #getMenuContent menuContent}.
           * and returns its index if found or -1 otherwise.
           */
          indexOfMenuContent(
            /**
             * The menuContent whose index is looked for
             */
            oMenuContent: sap.ui.commons.Link
          ): number;
          /**
           * Inserts a menuContent into the aggregation {@link #getMenuContent menuContent}.
           */
          insertMenuContent(
            /**
             * The menuContent to insert; if empty, nothing is inserted
             */
            oMenuContent: sap.ui.commons.Link,
            /**
             * The `0`-based index the menuContent should be inserted at; for a negative value of `iIndex`, the menuContent
             * is inserted at position 0; for a value greater than the current size of the aggregation, the menuContent
             * is inserted at the last position
             */
            iIndex: number
          ): sap.suite.ui.commons.ThreePanelThingInspector;
          /**
           * Removes all the controls from the aggregation {@link #getMenuContent menuContent}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllMenuContent(): sap.ui.commons.Link[];
          /**
           * Removes a menuContent from the aggregation {@link #getMenuContent menuContent}.
           */
          removeMenuContent(
            /**
             * The menuContent to remove or its index or id
             */
            vMenuContent: number | string | sap.ui.commons.Link
          ): sap.ui.commons.Link;
          /**
           * Sets a new value for property {@link #getLogo logo}.
           *
           * A URL of the source of the ThingViewer's key visual image.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setLogo(
            /**
             * New value for property `logo`
             */
            sLogo: sap.ui.core.URI
          ): sap.suite.ui.commons.ThreePanelThingInspector;
          /**
           * Sets a new value for property {@link #getShowHeader showHeader}.
           *
           * Shows or hides a middle panel of the ThingViewer named Header that contains general information.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setShowHeader(
            /**
             * New value for property `showHeader`
             */
            bShowHeader: boolean
          ): sap.suite.ui.commons.ThreePanelThingInspector;
          /**
           * Sets a new value for property {@link #getSidebarWidth sidebarWidth}.
           *
           * The width of the ThingViewer's navigation panel.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `224px`.
           */
          setSidebarWidth(
            /**
             * New value for property `sidebarWidth`
             */
            sSidebarWidth: sap.ui.core.CSSSize
          ): sap.suite.ui.commons.ThreePanelThingInspector;
        }
        /**
         * @deprecated (since 1.32) - Deprecated. Object page should be used instead.
         *
         * This control extends the sap.ui.ux3.ThingViewer control. The first panel can display a thing icon, a
         * title, the Action Menu button, up to two rows of text descriptions (the first is wrapped, the second
         * is truncated), vertical navigation bar (sap.suite.ui.commons.VerticalNavigationBar), and an image aka
         * key visual. The second panel displays the header area as a vertical panel containing ThingGroup objects.
         * The third panel is a main content area designed to display ThingGroup objects.
         */
        class ThreePanelThingViewer extends sap.ui.ux3.ThingViewer {
          /**
           * Constructor for a new ThreePanelThingViewer.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: ThreePanelThingViewerOpts
          );

          /**
           * Adds some menuContent to the aggregation {@link #getMenuContent menuContent}.
           */
          addMenuContent(
            /**
             * The menuContent to add; if empty, nothing is inserted
             */
            oMenuContent: sap.ui.commons.Link
          ): sap.suite.ui.commons.ThreePanelThingViewer;
          /**
           * Destroys all the menuContent in the aggregation {@link #getMenuContent menuContent}.
           */
          destroyMenuContent(): sap.suite.ui.commons.ThreePanelThingViewer;
          /**
           * Creates a new subclass of class sap.suite.ui.commons.ThreePanelThingViewer with name `sClassName` and
           * enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.ux3.ThingViewer.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets current value of property {@link #getLogo logo}.
           *
           * A URL of the source of an image known as key visual. This can be a company logo or other essential graphics.
           */
          getLogo(): sap.ui.core.URI;
          /**
           * Gets content of aggregation {@link #getMenuContent menuContent}.
           *
           * This aggregation allows you to add sap.ui.commons.Link items to the Action Menu. The menu appears as
           * a popup when a user chooses a button in the top title section of the navigation panel.
           */
          getMenuContent(): sap.ui.commons.Link[];
          /**
           * Returns a metadata object for class sap.suite.ui.commons.ThreePanelThingViewer.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getShowHeader showHeader}.
           *
           * Shows or hides a middle panel named Header that contains general information.
           */
          getShowHeader(): boolean;
          /**
           * Gets current value of property {@link #getSidebarWidth sidebarWidth}.
           *
           * The width of the first panel that contains thing's title, icon, key visual and navigation bar. The default
           * value is "244px".
           *
           * Default value is `244px`.
           */
          getSidebarWidth(): sap.ui.core.CSSSize;
          /**
           * Checks for the provided `sap.ui.commons.Link` in the aggregation {@link #getMenuContent menuContent}.
           * and returns its index if found or -1 otherwise.
           */
          indexOfMenuContent(
            /**
             * The menuContent whose index is looked for
             */
            oMenuContent: sap.ui.commons.Link
          ): number;
          /**
           * Inserts a menuContent into the aggregation {@link #getMenuContent menuContent}.
           */
          insertMenuContent(
            /**
             * The menuContent to insert; if empty, nothing is inserted
             */
            oMenuContent: sap.ui.commons.Link,
            /**
             * The `0`-based index the menuContent should be inserted at; for a negative value of `iIndex`, the menuContent
             * is inserted at position 0; for a value greater than the current size of the aggregation, the menuContent
             * is inserted at the last position
             */
            iIndex: number
          ): sap.suite.ui.commons.ThreePanelThingViewer;
          /**
           * Removes all the controls from the aggregation {@link #getMenuContent menuContent}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllMenuContent(): sap.ui.commons.Link[];
          /**
           * Removes a menuContent from the aggregation {@link #getMenuContent menuContent}.
           */
          removeMenuContent(
            /**
             * The menuContent to remove or its index or id
             */
            vMenuContent: number | string | sap.ui.commons.Link
          ): sap.ui.commons.Link;
          /**
           * Sets a new value for property {@link #getLogo logo}.
           *
           * A URL of the source of an image known as key visual. This can be a company logo or other essential graphics.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setLogo(
            /**
             * New value for property `logo`
             */
            sLogo: sap.ui.core.URI
          ): sap.suite.ui.commons.ThreePanelThingViewer;
          /**
           * Sets a new value for property {@link #getShowHeader showHeader}.
           *
           * Shows or hides a middle panel named Header that contains general information.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setShowHeader(
            /**
             * New value for property `showHeader`
             */
            bShowHeader: boolean
          ): sap.suite.ui.commons.ThreePanelThingViewer;
          /**
           * Sets a new value for property {@link #getSidebarWidth sidebarWidth}.
           *
           * The width of the first panel that contains thing's title, icon, key visual and navigation bar. The default
           * value is "244px".
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `244px`.
           */
          setSidebarWidth(
            /**
             * New value for property `sidebarWidth`
             */
            sSidebarWidth: sap.ui.core.CSSSize
          ): sap.suite.ui.commons.ThreePanelThingViewer;
        }
        /**
         * @deprecated (since 1.34) - this control is a mere wrapper for sap.m.TileContent.
         *
         * This control serves a universal container for different types of content and footer.
         */
        class TileContent extends sap.m.TileContent {
          /**
           * Constructor for a new TileContent.
           */
          constructor(
            /**
             * ID for the new control, automatically generated if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: TileContentOpts
          );

          /**
           * Creates a new subclass of class sap.suite.ui.commons.TileContent with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.m.TileContent.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.TileContent.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
        }
        /**
         * @deprecated (since 1.34) - Deprecated.
         *
         * This control serves a universal container for different types of content and footer.
         */
        class TileContent2X2 extends sap.ui.core.Control {
          /**
           * Constructor for a new TileContent2X2.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: TileContent2X2Opts
          );

          /**
           * Destroys the content in the aggregation {@link #getContent content}.
           */
          destroyContent(): sap.suite.ui.commons.TileContent2X2;
          /**
           * Creates a new subclass of class sap.suite.ui.commons.TileContent2X2 with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets content of aggregation {@link #getContent content}.
           *
           * The switchable view that depends on the tile type.
           */
          getContent(): sap.ui.core.Control;
          /**
           * Gets current value of property {@link #getDisabled disabled}.
           *
           * Disables control if true.
           *
           * Default value is `false`.
           */
          getDisabled(): boolean;
          /**
           * Gets current value of property {@link #getFooter footer}.
           *
           * The footer text of the tile.
           */
          getFooter(): string;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.TileContent2X2.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getSize size}.
           *
           * Updates the size of the tile. If not set then the default size is applied based on the device tile.
           *
           * Default value is `Auto`.
           */
          getSize(): sap.suite.ui.commons.InfoTileSize;
          /**
           * Gets current value of property {@link #getUnit unit}.
           *
           * The percent sign, the currency symbol, or the unit of measure.
           */
          getUnit(): string;
          /**
           * Sets the aggregated {@link #getContent content}.
           */
          setContent(
            /**
             * The content to set
             */
            oContent: sap.ui.core.Control
          ): sap.suite.ui.commons.TileContent2X2;
          /**
           * Sets a new value for property {@link #getDisabled disabled}.
           *
           * Disables control if true.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setDisabled(
            /**
             * New value for property `disabled`
             */
            bDisabled: boolean
          ): sap.suite.ui.commons.TileContent2X2;
          /**
           * Sets a new value for property {@link #getFooter footer}.
           *
           * The footer text of the tile.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setFooter(
            /**
             * New value for property `footer`
             */
            sFooter: string
          ): sap.suite.ui.commons.TileContent2X2;
          /**
           * Sets a new value for property {@link #getSize size}.
           *
           * Updates the size of the tile. If not set then the default size is applied based on the device tile.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `Auto`.
           */
          setSize(
            /**
             * New value for property `size`
             */
            sSize: sap.suite.ui.commons.InfoTileSize
          ): sap.suite.ui.commons.TileContent2X2;
          /**
           * Sets a new value for property {@link #getUnit unit}.
           *
           * The percent sign, the currency symbol, or the unit of measure.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setUnit(
            /**
             * New value for property `unit`
             */
            sUnit: string
          ): sap.suite.ui.commons.TileContent2X2;
        }
        /**
         * The timeline control shows entries (such as objects, events, or posts) in chronological order.
         * A common use case is to provide information about changes to an object, or events related to an object.
         * These entries can be generated by the system (for example, value XY changed from A to B), or added manually.
         *
         * There are two distinct variants of the timeline: basic and social. The basic timeline is read-only, while
         * the social timeline offers a high level of interaction and collaboration, and is integrated within SAP
         * Jam.
         */
        class Timeline extends sap.ui.core.Control {
          /**
           * Constructor for a new Timeline.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: TimelineOpts
          );

          /**
           * Adds some content to the aggregation {@link #getContent content}.
           */
          addContent(
            /**
             * The content to add; if empty, nothing is inserted
             */
            oContent: sap.suite.ui.commons.TimelineItem
          ): sap.suite.ui.commons.Timeline;
          /**
           * Adds some filterList to the aggregation {@link #getFilterList filterList}.
           */
          addFilterList(
            /**
             * The filterList to add; if empty, nothing is inserted
             */
            oFilterList: sap.suite.ui.commons.TimelineFilterListItem
          ): sap.suite.ui.commons.Timeline;
          /**
           * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
           *
           * Adds some suggestionItem to the aggregation {@link #getSuggestionItems suggestionItems}.
           */
          addSuggestionItem(
            /**
             * The suggestionItem to add; if empty, nothing is inserted
             */
            oSuggestionItem: sap.m.StandardListItem
          ): sap.suite.ui.commons.Timeline;
          /**
           * Refreshes the UI.
           */
          adjustUI(): void;
          /**
           * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
           *
           * Attaches event handler `fnFunction` to the {@link #event:addPost addPost} event of this `sap.suite.ui.commons.Timeline`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.Timeline` itself.
           *
           * This event is fired when a new post is added. As of version 1.46, replaced by {@link sap.collaboration.components.feed.Component}.
           */
          attachAddPost(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.Timeline` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.Timeline;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:customMessageClosed customMessageClosed} event
           * of this `sap.suite.ui.commons.Timeline`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.Timeline` itself.
           *
           * This event is fired when the user clicks the Close button on a message strip.
           */
          attachCustomMessageClosed(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.Timeline` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.Timeline;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:filterOpen filterOpen} event of this `sap.suite.ui.commons.Timeline`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.Timeline` itself.
           *
           * This event is fired when the user clicks the filter icon in the timeline toolbar and opens the filter.
           */
          attachFilterOpen(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.Timeline` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.Timeline;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:filterSelectionChange filterSelectionChange}
           * event of this `sap.suite.ui.commons.Timeline`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.Timeline` itself.
           *
           * This event is fired when filtering is applied to timeline posts or when a search term is entered into
           * the search field. This event can be fired only if the enableModelFilter property is set to `true`.
           */
          attachFilterSelectionChange(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.Timeline` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.Timeline;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:grow grow} event of this `sap.suite.ui.commons.Timeline`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.Timeline` itself.
           *
           * This event is fired when the "More" button is clicked.
           */
          attachGrow(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.Timeline` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.Timeline;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:itemFiltering itemFiltering} event of this `sap.suite.ui.commons.Timeline`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.Timeline` itself.
           *
           * This event is fired for every timeline post when data filtering is being applied. It indicates whether
           * this post is included in the filtering and why. Can be used only when the enableModelFilter property
           * is set to `false`.
           */
          attachItemFiltering(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.Timeline` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.Timeline;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:select select} event of this `sap.suite.ui.commons.Timeline`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.Timeline` itself.
           *
           * This event is fired when a timeline post is selected.
           */
          attachSelect(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.Timeline` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.Timeline;
          /**
           * @SINCE 1.26.1
           * @deprecated (since 1.46.0) - Replaced by {@link sap.collaboration.components.feed.Component}.
           *
           * Attaches event handler `fnFunction` to the {@link #event:suggest suggest} event of this `sap.suite.ui.commons.Timeline`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.Timeline` itself.
           *
           * This event is fired when the user enters text into the search field, in cases when the showSuggestion
           * property is set to `true`. Changing the suggestionItems aggregation will show the suggestions inside
           * a popup.
           */
          attachSuggest(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.Timeline` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.Timeline;
          /**
           * @SINCE 1.26.1
           * @deprecated (since 1.46.0) - Replaced by {@link sap.collaboration.components.feed.Component}.
           *
           * Attaches event handler `fnFunction` to the {@link #event:suggestionItemSelected suggestionItemSelected}
           * event of this `sap.suite.ui.commons.Timeline`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.Timeline` itself.
           *
           * This event is fired when a suggested post is selected in the suggestions popup list. This event is only
           * fired when the showSuggestion property is set to `true` and there is at least one post in the suggestions
           * popup list. See also the suggestionItems aggregation.
           */
          attachSuggestionItemSelected(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.Timeline` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.Timeline;
          /**
           * Destroys the customFilter in the aggregation {@link #getCustomFilter customFilter}.
           */
          destroyCustomFilter(): sap.suite.ui.commons.Timeline;
          /**
           * Destroys all the filterList in the aggregation {@link #getFilterList filterList}.
           */
          destroyFilterList(): sap.suite.ui.commons.Timeline;
          /**
           * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
           *
           * Destroys all the suggestionItems in the aggregation {@link #getSuggestionItems suggestionItems}.
           */
          destroySuggestionItems(): sap.suite.ui.commons.Timeline;
          /**
           * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
           *
           * Detaches event handler `fnFunction` from the {@link #event:addPost addPost} event of this `sap.suite.ui.commons.Timeline`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachAddPost(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.Timeline;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:customMessageClosed customMessageClosed} event
           * of this `sap.suite.ui.commons.Timeline`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachCustomMessageClosed(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.Timeline;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:filterOpen filterOpen} event of this `sap.suite.ui.commons.Timeline`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachFilterOpen(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.Timeline;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:filterSelectionChange filterSelectionChange}
           * event of this `sap.suite.ui.commons.Timeline`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachFilterSelectionChange(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.Timeline;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:grow grow} event of this `sap.suite.ui.commons.Timeline`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachGrow(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.Timeline;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:itemFiltering itemFiltering} event of this
           * `sap.suite.ui.commons.Timeline`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachItemFiltering(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.Timeline;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:select select} event of this `sap.suite.ui.commons.Timeline`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachSelect(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.Timeline;
          /**
           * @SINCE 1.26.1
           * @deprecated (since 1.46.0) - Replaced by {@link sap.collaboration.components.feed.Component}.
           *
           * Detaches event handler `fnFunction` from the {@link #event:suggest suggest} event of this `sap.suite.ui.commons.Timeline`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachSuggest(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.Timeline;
          /**
           * @SINCE 1.26.1
           * @deprecated (since 1.46.0) - Replaced by {@link sap.collaboration.components.feed.Component}.
           *
           * Detaches event handler `fnFunction` from the {@link #event:suggestionItemSelected suggestionItemSelected}
           * event of this `sap.suite.ui.commons.Timeline`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachSuggestionItemSelected(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.Timeline;
          /**
           * Cleans up the element instance before destruction
           */
          // @ts-ignore
          exit(): void;
          /**
           * Creates a new subclass of class sap.suite.ui.commons.Timeline with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
           *
           * Fires event {@link #event:addPost addPost} to attached listeners.
           */
          fireAddPost(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * Post message text.
               */
              value?: string;
            }
          ): sap.suite.ui.commons.Timeline;
          /**
           * Fires event {@link #event:customMessageClosed customMessageClosed} to attached listeners.
           */
          fireCustomMessageClosed(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.suite.ui.commons.Timeline;
          /**
           * Fires event {@link #event:filterOpen filterOpen} to attached listeners.
           */
          fireFilterOpen(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.suite.ui.commons.Timeline;
          /**
           * Fires event {@link #event:filterSelectionChange filterSelectionChange} to attached listeners.
           */
          fireFilterSelectionChange(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * Type of filter that has changed, can be an item filter or a time range filter.
               */
              type?: sap.suite.ui.commons.TimelineFilterType;
              /**
               * Search term entered into the search field.
               */
              searchTerm?: string;
              /**
               * The first criteria selected in the filter criteria list (required for backward compatibility).
               */
              selectedItem?: string;
              /**
               * An array with all selected filter criteria.
               */
              selectedItems?: object;
              /**
               * An object specifying the start date (`from`) and the end date (`to`) of the time range.
               */
              timeKeys?: object;
              /**
               * Is set to `true` when this event is fired by clearing the filter.
               */
              clear?: boolean;
            }
          ): sap.suite.ui.commons.Timeline;
          /**
           * Fires event {@link #event:grow grow} to attached listeners.
           */
          fireGrow(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.suite.ui.commons.Timeline;
          /**
           * Fires event {@link #event:itemFiltering itemFiltering} to attached listeners.
           */
          fireItemFiltering(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * Timeline post that is currently being filtered.
               */
              item?: sap.suite.ui.commons.TimelineItem;
              /**
               * Reasons why the post is being filtered. Empty if the post is not being filtered. There are three properties
               * available in the object: `Search`, `Time`, and `Data`. You can call preventDefault to the event object
               * to prevent the result.
               */
              reasons?: object;
              /**
               * Array with keys used for data filtering.
               */
              dataKeys?: object;
              /**
               * An object specifying the start date (`from`) and the end date (`to`) of the time range.
               */
              timeKeys?: object;
              /**
               * The text string that has been typed into the search field.
               */
              searchTerm?: string;
            }
          ): sap.suite.ui.commons.Timeline;
          /**
           * Fires event {@link #event:select select} to attached listeners.
           */
          fireSelect(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * The timeline post that is selected.
               */
              selectedItem?: sap.suite.ui.commons.TimelineItem;
              /**
               * Indicates whether the selection was triggered by a user action or in any other way.
               * Set to `true` if the selection was triggered by a user action, for example, by clicking with a mouse
               * or pressing the Enter key.
               * Set to `false` if the selection was triggered in a different way, for example, by shifting focus back
               * from a Popover element or by pressing an arrow key.
               * For backward compatibility, the `select` event is fired whenever an item gets focus.
               */
              userAction?: boolean;
            }
          ): sap.suite.ui.commons.Timeline;
          /**
           * @SINCE 1.26.1
           * @deprecated (since 1.46.0) - Replaced by {@link sap.collaboration.components.feed.Component}.
           *
           * Fires event {@link #event:suggest suggest} to attached listeners.
           */
          fireSuggest(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * The text string that has been typed into the search field.
               */
              suggestValue?: string;
            }
          ): sap.suite.ui.commons.Timeline;
          /**
           * @SINCE 1.26.1
           * @deprecated (since 1.46.0) - Replaced by {@link sap.collaboration.components.feed.Component}.
           *
           * Fires event {@link #event:suggestionItemSelected suggestionItemSelected} to attached listeners.
           */
          fireSuggestionItemSelected(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * The item selected in the suggestions popup.
               */
              selectedItem?: sap.ui.core.Item;
            }
          ): sap.suite.ui.commons.Timeline;
          /**
           * An override which exposes hidden aggregations. Hidden aggregations are used by Run Time Adaptation.
           */
          // @ts-ignore
          getAggregation(
            /**
             * the name of the aggregation
             */
            sAggregationName: undefined
          ): void;
          /**
           * Gets current value of property {@link #getAlignment alignment}.
           *
           * Defines the alignment of timeline posts relative to the timeline axis. This option can be used for single-sided
           * timelines only. If the axisOrientation property is set to ` Horizontal`, the `Right` value is interpreted
           * as bottom alignment and the `Left` value as top alignment.
           *
           * Default value is `Right`.
           */
          getAlignment(): sap.suite.ui.commons.TimelineAlignment;
          /**
           * Gets current value of property {@link #getAxisOrientation axisOrientation}.
           *
           * Defines the orientation of the timeline. Can be set to `Vertical` or `Horizontal`.
           *
           * Default value is `Vertical`.
           */
          getAxisOrientation(): sap.suite.ui.commons.TimelineAxisOrientation;
          /**
           * Gets content of aggregation {@link #getContent content}.
           *
           * List of timeline posts.
           */
          getContent(): sap.suite.ui.commons.TimelineItem[];
          /**
           * Returns the keys of the currently applied filter criteria as an array of objects, containing filter criteria
           * keys (`key`) and values (`text`).
           */
          getCurrentFilter(): any;
          /**
           * Gets content of aggregation {@link #getCustomFilter customFilter}.
           *
           * A custom filter to be used instead of the default item filter. This control must have an `openBy` or
           * `open` function that is used by the timeline to open the control. If the control has both functions,
           * `openBy` is used.
           */
          getCustomFilter(): sap.ui.core.Control;
          /**
           * @deprecated (since 1.46.0) - As of version 1.46, this property was replaced by JSONModel context binding.
           *
           * Gets current value of property {@link #getData data}.
           *
           * Data for the Timeline control.
           */
          getData(): object;
          /**
           * Gets current value of property {@link #getDateTimePath dateTimePath}.
           *
           * Path for dateTime in mode binding. Use this property when you use factory function for `TimeLineItem`
           * creation. When every item has different path or the `datetime` is calculated in factory sorting, filtering
           * and searching has to be done manually using events. If not set for factory binding filter and sorting
           * won't work.
           *
           * Default value is `empty string`.
           */
          getDateTimePath(): string;
          /**
           * @deprecated (since 1.46.0) - The filter list now includes a Select All check box, so the All radio button
           * is no longer required. This property is ignored.
           *
           * Gets current value of property {@link #getEnableAllInFilterItem enableAllInFilterItem}.
           *
           * Enables to add 'All' at the beginning of the filter list.
           *
           * Default value is `true`.
           */
          getEnableAllInFilterItem(): boolean;
          /**
           * @deprecated (since 1.46.0) - Use the enableModelFilter property instead.
           *
           * Gets current value of property {@link #getEnableBackendFilter enableBackendFilter}.
           *
           * Enables fetching data from backend instead of deriving filter values from the frontend values (displayed
           * list). As of version 1.46, replaced by {@link sap.suite.ui.commons.Timeline#getEnableModelFilter}.
           *
           * Default value is `true`.
           */
          getEnableBackendFilter(): boolean;
          /**
           * Gets current value of property {@link #getEnableBusyIndicator enableBusyIndicator}.
           *
           * When this property is set to `true`, the timeline displays a busy indicator when loading data. This busy
           * indicator blocks the interaction with the items until the data loading is complete. It is strongly recommended
           * to use this option. Loading data without a busy indicator may confuse the users.
           *
           * Default value is `true`.
           */
          getEnableBusyIndicator(): boolean;
          /**
           * Gets current value of property {@link #getEnableDoubleSided enableDoubleSided}.
           *
           * If set to `true`, timeline posts are displayed on both sides of the timeline axis.
           *
           * Default value is `false`.
           */
          getEnableDoubleSided(): boolean;
          /**
           * @SINCE 1.46.0
           *
           * Gets current value of property {@link #getEnableModelFilter enableModelFilter}.
           *
           * Enables filtering directly on the binding level. If set to `true`, all filters are translated into the
           * filters in the model binding. When the OData model is used, the filtering is performed on the backend
           * side. This option is strongly recommended. If set to `false`, all entries from the model need to be fetched
           * before they can be filtered on the frontend side. Please be aware that the `growingThreshold` property
           * determines how many entries can be rendered. Timeline requests all entries from the model before it performs
           * the filtering. Some models may have internal limits for the number of entries that can be used in bindings.
           * Such limits can be set using {@link sap.ui.model.Model#setSizeLimit}.
           *
           * Default value is `true`.
           */
          getEnableModelFilter(): boolean;
          /**
           * Gets current value of property {@link #getEnableScroll enableScroll}.
           *
           * If set to `true`, the Timeline control has its own scroll bar, with the scrolling taking place within
           * the Timeline control itself. Scrolling is required if you want to enable the lazyLoading property.
           *
           * Default value is `true`.
           */
          getEnableScroll(): boolean;
          /**
           * Gets current value of property {@link #getEnableSocial enableSocial}.
           *
           * Adds a Reply link to the posts on a social timeline that allows users to reply to posts. When
           * a user adds a reply, an event is fired. This event should be handled by external code.
           *
           * Default value is `false`.
           */
          getEnableSocial(): boolean;
          /**
           * Gets content of aggregation {@link #getFilterList filterList}.
           *
           * Custom filter criteria for the items filter.
           */
          getFilterList(): sap.suite.ui.commons.TimelineFilterListItem[];
          /**
           * Gets current value of property {@link #getFilterTitle filterTitle}.
           *
           * Title for the data filter. When a filter is applied, this title is displayed in the message strip along
           * with the filter name.
           */
          getFilterTitle(): string;
          /**
           * Gets current value of property {@link #getForceGrowing forceGrowing}.
           *
           * If set to `true`, the Show More button is displayed when the user scrolls along the timeline axis.
           *
           * Default value is `false`.
           */
          getForceGrowing(): boolean;
          /**
           * @deprecated (since 1.46.0) - Use the groupByType property instead.
           *
           * Gets current value of property {@link #getGroup group}.
           *
           * Groups the timeline posts by year. As of version 1.46, replaced by {@link sap.suite.ui.commons.Timeline#getGroupByType}.
           *
           * Default value is `false`.
           */
          getGroup(): boolean;
          /**
           * Gets current value of property {@link #getGroupBy groupBy}.
           *
           * Groups the timeline posts by a field. Only fields that contain date values are supported.
           */
          getGroupBy(): string;
          /**
           * Gets current value of property {@link #getGroupByType groupByType}.
           *
           * Groups the timeline posts by a time period, including year, quarter, month, week, and day. If set to
           * `None`, no grouping is applied. If you specify a custom grouping function using the {@link sap.suite.ui.commons.Timeline#setCustomGrouping}
           * method, this function overrides the groupByType property settings.
           *
           * Default value is `None`.
           */
          getGroupByType(): sap.suite.ui.commons.TimelineGroupType;
          /**
           * Returns all group items.
           */
          getGroups(): sap.ui.core.Control[];
          /**
           * @deprecated (since 1.46.0) - Use the growingThreshold property instead, setting it to 0 to disable growing.
           *
           * Gets current value of property {@link #getGrowing growing}.
           *
           * If set to `true`, the timeline displays a limited number of posts with a button to show more. The displayed
           * posts limit can be set using the growingThreshold property. As of version 1.46, replaced by {@link sap.suite.ui.commons.Timeline#getGrowingThreshold}.
           *
           * Default value is `true`.
           */
          getGrowing(): boolean;
          /**
           * Gets current value of property {@link #getGrowingThreshold growingThreshold}.
           *
           * Number of posts requested from the server at a time. Each time when the timeline needs to load more posts,
           * it will request exactly this amount. The number of posts displayed in the timeline is increased by this
           * number. If set to `0`, all posts are fetched and displayed on the initial load.
           *
           * Default value is `5`.
           */
          getGrowingThreshold(): number;
          /**
           * @SINCE 1.46.0
           *
           * Gets current value of property {@link #getHeight height}.
           *
           * Sets the height of the Timeline.
           *
           * Default value is `empty string`.
           */
          getHeight(): sap.ui.core.CSSSize;
          /**
           * @SINCE 1.46.0
           *
           * Gets current value of property {@link #getLazyLoading lazyLoading}.
           *
           * Enables the Lazy Loading feature that automatically loads more posts as the user scrolls along the timeline
           * axis. This feature works only when the enableScroll property is set to `true`. See also {@link sap.suite.ui.commons.Timeline#getEnableScroll}.
           *
           * Default value is `false`.
           */
          getLazyLoading(): boolean;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.Timeline.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getNoDataText noDataText}.
           *
           * This text is displayed when the control has no data. The default value is loaded from the component resource
           * bundle.
           */
          getNoDataText(): string;
          /**
           * @SINCE 1.46.0
           * @deprecated (since 1.54.0) - Not Fiori.
           *
           * Gets current value of property {@link #getScrollingFadeout scrollingFadeout}.
           *
           * If set to `Area`, the timeline fades into the visible area margin. If set to `AreaWithButtons`, the timeline
           * fades into the visible area margin and scroll buttons are displayed. If set to `None`, the fading effect
           * is not applied. This feature works only when the enableScroll property is set to `true`. See also {@link
           * sap.suite.ui.commons.Timeline#getEnableScroll}.
           *
           * Default value is `None`.
           */
          getScrollingFadeout(): sap.suite.ui.commons.TimelineScrollingFadeout;
          /**
           * @deprecated (since 1.46.0) - Use the showHeaderBar property instead.
           *
           * Gets current value of property {@link #getShowFilterBar showFilterBar}.
           *
           * Sets the visibility of the filter in the timeline toolbar.
           *  As of version 1.46, replaced by {@link sap.suite.ui.commons.Timeline#getShowHeaderBar}.
           *
           * Default value is `true`.
           */
          getShowFilterBar(): boolean;
          /**
           * Gets current value of property {@link #getShowHeaderBar showHeaderBar}.
           *
           * Shows the timeline toolbar with search and filter options.
           *
           * Default value is `true`.
           */
          getShowHeaderBar(): boolean;
          /**
           * Gets current value of property {@link #getShowIcons showIcons}.
           *
           * Shows an icon on the timeline axis as an anchor for each entry node. If set to `false`, all icons are
           * replaced by dots.
           *
           * Default value is `true`.
           */
          getShowIcons(): boolean;
          /**
           * Gets current value of property {@link #getShowItemFilter showItemFilter}.
           *
           * Show item filter in filter area.
           *
           * Default value is `true`.
           */
          getShowItemFilter(): boolean;
          /**
           * Gets current value of property {@link #getShowSearch showSearch}.
           *
           * Sets the search field visibility on the timeline toolbar.
           *
           * Default value is `true`.
           */
          getShowSearch(): boolean;
          /**
           * Gets current value of property {@link #getShowSort showSort}.
           *
           * Show sort icon in the header bar. For displaying this icon, sorting have to be allowed.
           *
           * Default value is `true`.
           */
          getShowSort(): boolean;
          /**
           * @SINCE 1.26.1
           * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
           *
           * Gets current value of property {@link #getShowSuggestion showSuggestion}.
           *
           * If set to `true`, a suggest event is fired when the user enters text into the search field. Changing
           * the suggestionItems aggregation in the suggest event listener will display suggestions inside a popup.
           * As of version 1.46, replaced by {@link sap.collaboration.components.feed.Component}.
           *
           * Default value is `true`.
           */
          getShowSuggestion(): boolean;
          /**
           * Gets current value of property {@link #getShowTimeFilter showTimeFilter}.
           *
           * Shows the time range filter in the filter menu.
           *
           * Default value is `true`.
           */
          getShowTimeFilter(): boolean;
          /**
           * Gets current value of property {@link #getSort sort}.
           *
           * Indicates whether the data should be sorted. If set to `false` the data model's default sorting is applied.
           *
           * Default value is `true`.
           */
          getSort(): boolean;
          /**
           * Gets current value of property {@link #getSortOldestFirst sortOldestFirst}.
           *
           * Whether the oldest item will be displayed first.
           *
           * Default value is `false`.
           */
          getSortOldestFirst(): boolean;
          /**
           * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
           *
           * Gets content of aggregation {@link #getSuggestionItems suggestionItems}.
           *
           * Items for suggestions. As of version 1.46, replaced by {@link sap.collaboration.components.feed.Component}.
           */
          getSuggestionItems(): sap.m.StandardListItem[];
          /**
           * Gets current value of property {@link #getTextHeight textHeight}.
           *
           * Height of the timeline posts. It can be set to either of the following types of values:
           * 	 -  Automatic – If set to `automatic`, the optimal post height is calculated automatically to
           * 			fit the timeline height specified by the height parameter. This option works only in horizontal timelines
           * 			and only when the timeline height is defined. In vertical timelines, this setting is ignored.
           * 	 -  Number – If set to a number, a corresponding number of text lines is displayed in every post.
           *
           * 	 -  Pixels – If set to a number followed by `px`, such as `50px`, the closest number in lines
           * 			is calculated and applied to the timeline posts, so that the post height corresponds to the specified
           * 			number of pixels and the text lines are not cut off in the middle of a line.
           * 	 -  Any other valid {@link sap.ui.core.CSSSize CSSSize} value that is inserted into the text wrapper
           * 			without being changed.
           *
           * Default value is `empty string`.
           */
          getTextHeight(): string;
          /**
           * Gets current value of property {@link #getWidth width}.
           *
           * Sets the width of the Timeline.
           *
           * Default value is `100%`.
           */
          getWidth(): sap.ui.core.CSSSize;
          /**
           * Checks for the provided `sap.suite.ui.commons.TimelineItem` in the aggregation {@link #getContent content}.
           * and returns its index if found or -1 otherwise.
           */
          indexOfContent(
            /**
             * The content whose index is looked for
             */
            oContent: sap.suite.ui.commons.TimelineItem
          ): number;
          /**
           * Checks for the provided `sap.suite.ui.commons.TimelineFilterListItem` in the aggregation {@link #getFilterList
           * filterList}. and returns its index if found or -1 otherwise.
           */
          indexOfFilterList(
            /**
             * The filterList whose index is looked for
             */
            oFilterList: sap.suite.ui.commons.TimelineFilterListItem
          ): number;
          /**
           * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
           *
           * Checks for the provided `sap.m.StandardListItem` in the aggregation {@link #getSuggestionItems suggestionItems}.
           * and returns its index if found or -1 otherwise.
           */
          indexOfSuggestionItem(
            /**
             * The suggestionItem whose index is looked for
             */
            oSuggestionItem: sap.m.StandardListItem
          ): number;
          /**
           * Inserts a content into the aggregation {@link #getContent content}.
           */
          insertContent(
            /**
             * The content to insert; if empty, nothing is inserted
             */
            oContent: sap.suite.ui.commons.TimelineItem,
            /**
             * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
             * is inserted at position 0; for a value greater than the current size of the aggregation, the content
             * is inserted at the last position
             */
            iIndex: number
          ): sap.suite.ui.commons.Timeline;
          /**
           * Inserts a filterList into the aggregation {@link #getFilterList filterList}.
           */
          insertFilterList(
            /**
             * The filterList to insert; if empty, nothing is inserted
             */
            oFilterList: sap.suite.ui.commons.TimelineFilterListItem,
            /**
             * The `0`-based index the filterList should be inserted at; for a negative value of `iIndex`, the filterList
             * is inserted at position 0; for a value greater than the current size of the aggregation, the filterList
             * is inserted at the last position
             */
            iIndex: number
          ): sap.suite.ui.commons.Timeline;
          /**
           * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
           *
           * Inserts a suggestionItem into the aggregation {@link #getSuggestionItems suggestionItems}.
           */
          insertSuggestionItem(
            /**
             * The suggestionItem to insert; if empty, nothing is inserted
             */
            oSuggestionItem: sap.m.StandardListItem,
            /**
             * The `0`-based index the suggestionItem should be inserted at; for a negative value of `iIndex`, the suggestionItem
             * is inserted at position 0; for a value greater than the current size of the aggregation, the suggestionItem
             * is inserted at the last position
             */
            iIndex: number
          ): sap.suite.ui.commons.Timeline;
          /**
           * Removes all the controls from the aggregation {@link #getContent content}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllContent(): sap.suite.ui.commons.TimelineItem[];
          /**
           * Removes all the controls from the aggregation {@link #getFilterList filterList}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllFilterList(): sap.suite.ui.commons.TimelineFilterListItem[];
          /**
           * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
           *
           * Removes all the controls from the aggregation {@link #getSuggestionItems suggestionItems}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllSuggestionItems(): sap.m.StandardListItem[];
          /**
           * Removes a content from the aggregation {@link #getContent content}.
           */
          removeContent(
            /**
             * The content to remove or its index or id
             */
            vContent: number | string | sap.suite.ui.commons.TimelineItem
          ): sap.suite.ui.commons.TimelineItem;
          /**
           * Removes a filterList from the aggregation {@link #getFilterList filterList}.
           */
          removeFilterList(
            /**
             * The filterList to remove or its index or id
             */
            vFilterList:
              | number
              | string
              | sap.suite.ui.commons.TimelineFilterListItem
          ): sap.suite.ui.commons.TimelineFilterListItem;
          /**
           * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
           *
           * Removes a suggestionItem from the aggregation {@link #getSuggestionItems suggestionItems}.
           */
          removeSuggestionItem(
            /**
             * The suggestionItem to remove or its index or id
             */
            vSuggestionItem: number | string | sap.m.StandardListItem
          ): sap.m.StandardListItem;
          /**
           * Reset all internal settings. Use if you want the same instance with different data.
           */
          reset(): void;
          /**
           * Resets the start date and end date of the timeline, so that they are calculated once again. Call this
           * method when changing the date of a timeline post.
           */
          resetTimeLimits(): void;
          /**
           * Sets a new value for property {@link #getAlignment alignment}.
           *
           * Defines the alignment of timeline posts relative to the timeline axis. This option can be used for single-sided
           * timelines only. If the axisOrientation property is set to ` Horizontal`, the `Right` value is interpreted
           * as bottom alignment and the `Left` value as top alignment.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `Right`.
           */
          setAlignment(
            /**
             * New value for property `alignment`
             */
            sAlignment: sap.suite.ui.commons.TimelineAlignment
          ): sap.suite.ui.commons.Timeline;
          /**
           * Sets a new value for property {@link #getAxisOrientation axisOrientation}.
           *
           * Defines the orientation of the timeline. Can be set to `Vertical` or `Horizontal`.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `Vertical`.
           */
          setAxisOrientation(
            /**
             * New value for property `axisOrientation`
             */
            sAxisOrientation: sap.suite.ui.commons.TimelineAxisOrientation
          ): sap.suite.ui.commons.Timeline;
          /**
           * Sets filter criteria keys.
           */
          setCurrentFilter(
            /**
             * Filter criteria keys to select. Can be also used as a single value.
             */
            aSelectedItemKeys: string[]
          ): void;
          /**
           * Sets values for the search field.
           */
          setCurrentSearch(
            /**
             * Search term value.
             */
            sSearchTerm: string
          ): void;
          /**
           * Sets values for the time range filter.
           */
          setCurrentTimeFilter(
            /**
             * Time filter arguments
             */
            mArguments?: {
              /**
               * Start date of the time range filter.
               */
              from?: Date;
              /**
               * End date of the time range filter.
               */
              to?: Date;
              /**
               * The step of the time range filter scale. Can be set to day, month, quarter, or year. Week is currently
               * not supported.
               */
              type?: sap.suite.ui.commons.TimelineGroupType;
            }
          ): void;
          /**
           * Sets the aggregated {@link #getCustomFilter customFilter}.
           */
          setCustomFilter(
            /**
             * The customFilter to set
             */
            oCustomFilter: sap.ui.core.Control
          ): sap.suite.ui.commons.Timeline;
          /**
           * Sets a custom message for the filter message strip. This message is appended to the default filter text.
           */
          setCustomFilterMessage(
            /**
             * Message to append.
             */
            sMessage: string
          ): void;
          /**
           * Sets custom grouping function. This function must have one parameter that is a date object. This date
           * object is used for grouping timeline posts. The function should return an object that has three properties:
           *
           * 	 -  `key` – The key of the related group.
           * 	 -  `title` – The title of the related group.
           * 	 -  `date` – The same value as the one entered in the input parameter.
           */
          setCustomGrouping(
            /**
             * Grouping function.
             */
            fnGroupBy: Function
          ): void;
          /**
           * Sets a custom message that is displayed below the timeline's header.
           */
          setCustomMessage(
            /**
             * Message text.
             */
            sMsg: string
          ): void;
          /**
           * Adds a custom filter in addition to the default filters: items filter, time range filter, and search.
           */
          setCustomModelFilter(
            /**
             * A unique filter ID that the caller can use to manipulate the filter after it has been created, for example,
             * to remove it.
             */
            sFilterId: string,
            /**
             * Filter object.
             */
            oFilter: sap.ui.model.Filter
          ): void;
          /**
           * @deprecated (since 1.46.0) - As of version 1.46, this property was replaced by JSONModel context binding.
           *
           * Sets a new value for property {@link #getData data}.
           *
           * Data for the Timeline control.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setData(
            /**
             * New value for property `data`
             */
            oData: object
          ): sap.suite.ui.commons.Timeline;
          /**
           * Sets a new value for property {@link #getDateTimePath dateTimePath}.
           *
           * Path for dateTime in mode binding. Use this property when you use factory function for `TimeLineItem`
           * creation. When every item has different path or the `datetime` is calculated in factory sorting, filtering
           * and searching has to be done manually using events. If not set for factory binding filter and sorting
           * won't work.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `empty string`.
           */
          setDateTimePath(
            /**
             * New value for property `dateTimePath`
             */
            sDateTimePath: string
          ): sap.suite.ui.commons.Timeline;
          /**
           * @deprecated (since 1.46.0) - The filter list now includes a Select All check box, so the All radio button
           * is no longer required. This property is ignored.
           *
           * Sets a new value for property {@link #getEnableAllInFilterItem enableAllInFilterItem}.
           *
           * Enables to add 'All' at the beginning of the filter list.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setEnableAllInFilterItem(
            /**
             * New value for property `enableAllInFilterItem`
             */
            bEnableAllInFilterItem: boolean
          ): sap.suite.ui.commons.Timeline;
          /**
           * @deprecated (since 1.46.0) - Use the enableModelFilter property instead.
           *
           * Sets a new value for property {@link #getEnableBackendFilter enableBackendFilter}.
           *
           * Enables fetching data from backend instead of deriving filter values from the frontend values (displayed
           * list). As of version 1.46, replaced by {@link sap.suite.ui.commons.Timeline#getEnableModelFilter}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setEnableBackendFilter(
            /**
             * New value for property `enableBackendFilter`
             */
            bEnableBackendFilter: boolean
          ): sap.suite.ui.commons.Timeline;
          /**
           * Sets a new value for property {@link #getEnableBusyIndicator enableBusyIndicator}.
           *
           * When this property is set to `true`, the timeline displays a busy indicator when loading data. This busy
           * indicator blocks the interaction with the items until the data loading is complete. It is strongly recommended
           * to use this option. Loading data without a busy indicator may confuse the users.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setEnableBusyIndicator(
            /**
             * New value for property `enableBusyIndicator`
             */
            bEnableBusyIndicator: boolean
          ): sap.suite.ui.commons.Timeline;
          /**
           * Sets a new value for property {@link #getEnableDoubleSided enableDoubleSided}.
           *
           * If set to `true`, timeline posts are displayed on both sides of the timeline axis.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setEnableDoubleSided(
            /**
             * New value for property `enableDoubleSided`
             */
            bEnableDoubleSided: boolean
          ): sap.suite.ui.commons.Timeline;
          /**
           * @SINCE 1.46.0
           *
           * Sets a new value for property {@link #getEnableModelFilter enableModelFilter}.
           *
           * Enables filtering directly on the binding level. If set to `true`, all filters are translated into the
           * filters in the model binding. When the OData model is used, the filtering is performed on the backend
           * side. This option is strongly recommended. If set to `false`, all entries from the model need to be fetched
           * before they can be filtered on the frontend side. Please be aware that the `growingThreshold` property
           * determines how many entries can be rendered. Timeline requests all entries from the model before it performs
           * the filtering. Some models may have internal limits for the number of entries that can be used in bindings.
           * Such limits can be set using {@link sap.ui.model.Model#setSizeLimit}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setEnableModelFilter(
            /**
             * New value for property `enableModelFilter`
             */
            bEnableModelFilter: boolean
          ): sap.suite.ui.commons.Timeline;
          /**
           * Sets a new value for property {@link #getEnableScroll enableScroll}.
           *
           * If set to `true`, the Timeline control has its own scroll bar, with the scrolling taking place within
           * the Timeline control itself. Scrolling is required if you want to enable the lazyLoading property.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setEnableScroll(
            /**
             * New value for property `enableScroll`
             */
            bEnableScroll: boolean
          ): sap.suite.ui.commons.Timeline;
          /**
           * Sets a new value for property {@link #getEnableSocial enableSocial}.
           *
           * Adds a Reply link to the posts on a social timeline that allows users to reply to posts. When
           * a user adds a reply, an event is fired. This event should be handled by external code.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setEnableSocial(
            /**
             * New value for property `enableSocial`
             */
            bEnableSocial: boolean
          ): sap.suite.ui.commons.Timeline;
          /**
           * Sets a new value for property {@link #getFilterTitle filterTitle}.
           *
           * Title for the data filter. When a filter is applied, this title is displayed in the message strip along
           * with the filter name.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setFilterTitle(
            /**
             * New value for property `filterTitle`
             */
            sFilterTitle: string
          ): sap.suite.ui.commons.Timeline;
          /**
           * Sets a new value for property {@link #getForceGrowing forceGrowing}.
           *
           * If set to `true`, the Show More button is displayed when the user scrolls along the timeline axis.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setForceGrowing(
            /**
             * New value for property `forceGrowing`
             */
            bForceGrowing: boolean
          ): sap.suite.ui.commons.Timeline;
          /**
           * @deprecated (since 1.46.0) - Use the groupByType property instead.
           *
           * Sets a new value for property {@link #getGroup group}.
           *
           * Groups the timeline posts by year. As of version 1.46, replaced by {@link sap.suite.ui.commons.Timeline#getGroupByType}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setGroup(
            /**
             * New value for property `group`
             */
            bGroup: boolean
          ): sap.suite.ui.commons.Timeline;
          /**
           * Sets a new value for property {@link #getGroupBy groupBy}.
           *
           * Groups the timeline posts by a field. Only fields that contain date values are supported.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setGroupBy(
            /**
             * New value for property `groupBy`
             */
            sGroupBy: string
          ): sap.suite.ui.commons.Timeline;
          /**
           * Sets a new value for property {@link #getGroupByType groupByType}.
           *
           * Groups the timeline posts by a time period, including year, quarter, month, week, and day. If set to
           * `None`, no grouping is applied. If you specify a custom grouping function using the {@link sap.suite.ui.commons.Timeline#setCustomGrouping}
           * method, this function overrides the groupByType property settings.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `None`.
           */
          setGroupByType(
            /**
             * New value for property `groupByType`
             */
            sGroupByType: sap.suite.ui.commons.TimelineGroupType
          ): sap.suite.ui.commons.Timeline;
          /**
           * @deprecated (since 1.46.0) - Use the growingThreshold property instead, setting it to 0 to disable growing.
           *
           * Sets a new value for property {@link #getGrowing growing}.
           *
           * If set to `true`, the timeline displays a limited number of posts with a button to show more. The displayed
           * posts limit can be set using the growingThreshold property. As of version 1.46, replaced by {@link sap.suite.ui.commons.Timeline#getGrowingThreshold}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setGrowing(
            /**
             * New value for property `growing`
             */
            bGrowing: boolean
          ): sap.suite.ui.commons.Timeline;
          /**
           * Sets a new value for property {@link #getGrowingThreshold growingThreshold}.
           *
           * Number of posts requested from the server at a time. Each time when the timeline needs to load more posts,
           * it will request exactly this amount. The number of posts displayed in the timeline is increased by this
           * number. If set to `0`, all posts are fetched and displayed on the initial load.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `5`.
           */
          setGrowingThreshold(
            /**
             * New value for property `growingThreshold`
             */
            iGrowingThreshold: number
          ): sap.suite.ui.commons.Timeline;
          /**
           * @SINCE 1.46.0
           *
           * Sets a new value for property {@link #getHeight height}.
           *
           * Sets the height of the Timeline.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `empty string`.
           */
          setHeight(
            /**
             * New value for property `height`
             */
            sHeight: sap.ui.core.CSSSize
          ): sap.suite.ui.commons.Timeline;
          /**
           * @SINCE 1.46.0
           *
           * Sets a new value for property {@link #getLazyLoading lazyLoading}.
           *
           * Enables the Lazy Loading feature that automatically loads more posts as the user scrolls along the timeline
           * axis. This feature works only when the enableScroll property is set to `true`. See also {@link sap.suite.ui.commons.Timeline#getEnableScroll}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setLazyLoading(
            /**
             * New value for property `lazyLoading`
             */
            bLazyLoading: boolean
          ): sap.suite.ui.commons.Timeline;
          /**
           * Replaces one of the default filters: items filter, time range filter, or search.
           */
          setModelFilter(
            /**
             * The object containing settings
             */
            mArguments: {
              /**
               * Type of the filter to replace.
               */
              type: sap.suite.ui.commons.TimelineFilterType;
              /**
               * Filter object to specify the filter criteria.
               */
              filter: sap.ui.model.Filter;
              /**
               * If set to `true` (default), filters are automatically recreated, and the content is updated.
               */
              refresh: boolean;
            }
          ): void;
          /**
           * Sets the message displayed in the filter message strip. This message overwrites the default filter message.
           */
          setModelFilterMessage(
            /**
             * Filter type. Supports only items filter (`Data`) and time range filter (`Time`).
             */
            sType: sap.suite.ui.commons.TimelineFilterType,
            /**
             * The message that should replace the default message.
             */
            sMessage: string
          ): void;
          /**
           * Sets a new value for property {@link #getNoDataText noDataText}.
           *
           * This text is displayed when the control has no data. The default value is loaded from the component resource
           * bundle.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setNoDataText(
            /**
             * New value for property `noDataText`
             */
            sNoDataText: string
          ): sap.suite.ui.commons.Timeline;
          /**
           * @SINCE 1.46.0
           * @deprecated (since 1.54.0) - Not Fiori.
           *
           * Sets a new value for property {@link #getScrollingFadeout scrollingFadeout}.
           *
           * If set to `Area`, the timeline fades into the visible area margin. If set to `AreaWithButtons`, the timeline
           * fades into the visible area margin and scroll buttons are displayed. If set to `None`, the fading effect
           * is not applied. This feature works only when the enableScroll property is set to `true`. See also {@link
           * sap.suite.ui.commons.Timeline#getEnableScroll}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `None`.
           */
          setScrollingFadeout(
            /**
             * New value for property `scrollingFadeout`
             */
            sScrollingFadeout: sap.suite.ui.commons.TimelineScrollingFadeout
          ): sap.suite.ui.commons.Timeline;
          /**
           * @deprecated (since 1.46.0) - Use the showHeaderBar property instead.
           *
           * Sets a new value for property {@link #getShowFilterBar showFilterBar}.
           *
           * Sets the visibility of the filter in the timeline toolbar.
           *  As of version 1.46, replaced by {@link sap.suite.ui.commons.Timeline#getShowHeaderBar}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setShowFilterBar(
            /**
             * New value for property `showFilterBar`
             */
            bShowFilterBar: boolean
          ): sap.suite.ui.commons.Timeline;
          /**
           * Sets a new value for property {@link #getShowHeaderBar showHeaderBar}.
           *
           * Shows the timeline toolbar with search and filter options.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setShowHeaderBar(
            /**
             * New value for property `showHeaderBar`
             */
            bShowHeaderBar: boolean
          ): sap.suite.ui.commons.Timeline;
          /**
           * Sets a new value for property {@link #getShowIcons showIcons}.
           *
           * Shows an icon on the timeline axis as an anchor for each entry node. If set to `false`, all icons are
           * replaced by dots.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setShowIcons(
            /**
             * New value for property `showIcons`
             */
            bShowIcons: boolean
          ): sap.suite.ui.commons.Timeline;
          /**
           * Sets a new value for property {@link #getShowItemFilter showItemFilter}.
           *
           * Show item filter in filter area.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setShowItemFilter(
            /**
             * New value for property `showItemFilter`
             */
            bShowItemFilter: boolean
          ): sap.suite.ui.commons.Timeline;
          /**
           * Sets a new value for property {@link #getShowSearch showSearch}.
           *
           * Sets the search field visibility on the timeline toolbar.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setShowSearch(
            /**
             * New value for property `showSearch`
             */
            bShowSearch: boolean
          ): sap.suite.ui.commons.Timeline;
          /**
           * Sets a new value for property {@link #getShowSort showSort}.
           *
           * Show sort icon in the header bar. For displaying this icon, sorting have to be allowed.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setShowSort(
            /**
             * New value for property `showSort`
             */
            bShowSort: boolean
          ): sap.suite.ui.commons.Timeline;
          /**
           * @SINCE 1.26.1
           * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
           *
           * Sets a new value for property {@link #getShowSuggestion showSuggestion}.
           *
           * If set to `true`, a suggest event is fired when the user enters text into the search field. Changing
           * the suggestionItems aggregation in the suggest event listener will display suggestions inside a popup.
           * As of version 1.46, replaced by {@link sap.collaboration.components.feed.Component}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setShowSuggestion(
            /**
             * New value for property `showSuggestion`
             */
            bShowSuggestion: boolean
          ): sap.suite.ui.commons.Timeline;
          /**
           * Sets a new value for property {@link #getShowTimeFilter showTimeFilter}.
           *
           * Shows the time range filter in the filter menu.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setShowTimeFilter(
            /**
             * New value for property `showTimeFilter`
             */
            bShowTimeFilter: boolean
          ): sap.suite.ui.commons.Timeline;
          /**
           * Sets a new value for property {@link #getSort sort}.
           *
           * Indicates whether the data should be sorted. If set to `false` the data model's default sorting is applied.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setSort(
            /**
             * New value for property `sort`
             */
            bSort: boolean
          ): sap.suite.ui.commons.Timeline;
          /**
           * Sets a new value for property {@link #getSortOldestFirst sortOldestFirst}.
           *
           * Whether the oldest item will be displayed first.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setSortOldestFirst(
            /**
             * New value for property `sortOldestFirst`
             */
            bSortOldestFirst: boolean
          ): sap.suite.ui.commons.Timeline;
          /**
           * Sets a new value for property {@link #getTextHeight textHeight}.
           *
           * Height of the timeline posts. It can be set to either of the following types of values:
           * 	 -  Automatic – If set to `automatic`, the optimal post height is calculated automatically to
           * 			fit the timeline height specified by the height parameter. This option works only in horizontal timelines
           * 			and only when the timeline height is defined. In vertical timelines, this setting is ignored.
           * 	 -  Number – If set to a number, a corresponding number of text lines is displayed in every post.
           *
           * 	 -  Pixels – If set to a number followed by `px`, such as `50px`, the closest number in lines
           * 			is calculated and applied to the timeline posts, so that the post height corresponds to the specified
           * 			number of pixels and the text lines are not cut off in the middle of a line.
           * 	 -  Any other valid {@link sap.ui.core.CSSSize CSSSize} value that is inserted into the text wrapper
           * 			without being changed.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `empty string`.
           */
          setTextHeight(
            /**
             * New value for property `textHeight`
             */
            sTextHeight: string
          ): sap.suite.ui.commons.Timeline;
          /**
           * Sets a new value for property {@link #getWidth width}.
           *
           * Sets the width of the Timeline.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `100%`.
           */
          setWidth(
            /**
             * New value for property `width`
             */
            sWidth: sap.ui.core.CSSSize
          ): sap.suite.ui.commons.Timeline;
          /**
           * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
           *
           * Attaches event handler `fnFunction` to the {@link #event:addPost addPost} event of this `sap.suite.ui.commons.Timeline`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.Timeline` itself.
           *
           * This event is fired when a new post is added. As of version 1.46, replaced by {@link sap.collaboration.components.feed.Component}.
           */
          attachAddPost(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.Timeline` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.Timeline;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:customMessageClosed customMessageClosed} event
           * of this `sap.suite.ui.commons.Timeline`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.Timeline` itself.
           *
           * This event is fired when the user clicks the Close button on a message strip.
           */
          attachCustomMessageClosed(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.Timeline` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.Timeline;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:filterOpen filterOpen} event of this `sap.suite.ui.commons.Timeline`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.Timeline` itself.
           *
           * This event is fired when the user clicks the filter icon in the timeline toolbar and opens the filter.
           */
          attachFilterOpen(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.Timeline` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.Timeline;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:filterSelectionChange filterSelectionChange}
           * event of this `sap.suite.ui.commons.Timeline`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.Timeline` itself.
           *
           * This event is fired when filtering is applied to timeline posts or when a search term is entered into
           * the search field. This event can be fired only if the enableModelFilter property is set to `true`.
           */
          attachFilterSelectionChange(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.Timeline` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.Timeline;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:grow grow} event of this `sap.suite.ui.commons.Timeline`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.Timeline` itself.
           *
           * This event is fired when the "More" button is clicked.
           */
          attachGrow(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.Timeline` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.Timeline;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:itemFiltering itemFiltering} event of this `sap.suite.ui.commons.Timeline`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.Timeline` itself.
           *
           * This event is fired for every timeline post when data filtering is being applied. It indicates whether
           * this post is included in the filtering and why. Can be used only when the enableModelFilter property
           * is set to `false`.
           */
          attachItemFiltering(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.Timeline` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.Timeline;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:select select} event of this `sap.suite.ui.commons.Timeline`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.Timeline` itself.
           *
           * This event is fired when a timeline post is selected.
           */
          attachSelect(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.Timeline` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.Timeline;
          /**
           * @SINCE 1.26.1
           * @deprecated (since 1.46.0) - Replaced by {@link sap.collaboration.components.feed.Component}.
           *
           * Attaches event handler `fnFunction` to the {@link #event:suggest suggest} event of this `sap.suite.ui.commons.Timeline`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.Timeline` itself.
           *
           * This event is fired when the user enters text into the search field, in cases when the showSuggestion
           * property is set to `true`. Changing the suggestionItems aggregation will show the suggestions inside
           * a popup.
           */
          attachSuggest(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.Timeline` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.Timeline;
          /**
           * @SINCE 1.26.1
           * @deprecated (since 1.46.0) - Replaced by {@link sap.collaboration.components.feed.Component}.
           *
           * Attaches event handler `fnFunction` to the {@link #event:suggestionItemSelected suggestionItemSelected}
           * event of this `sap.suite.ui.commons.Timeline`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.Timeline` itself.
           *
           * This event is fired when a suggested post is selected in the suggestions popup list. This event is only
           * fired when the showSuggestion property is set to `true` and there is at least one post in the suggestions
           * popup list. See also the suggestionItems aggregation.
           */
          attachSuggestionItemSelected(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.Timeline` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.Timeline;
        }
        /**
         * Provides a filter criteria list for the items filter in the Timeline control.
         */
        class TimelineFilterListItem extends sap.ui.core.Control {
          /**
           * Constructor for a new TimelineFilterListItem.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: TimelineFilterListItemOpts
          );

          /**
           * Creates a new subclass of class sap.suite.ui.commons.TimelineFilterListItem with name `sClassName` and
           * enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets current value of property {@link #getKey key}.
           *
           * A key for a filter criterion. Each filter criterion must have a unique key.
           */
          getKey(): string;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.TimelineFilterListItem.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getText text}.
           *
           * A textual label for the filter criterion. This text is displayed in the filter criteria list in the UI.
           */
          getText(): string;
          /**
           * Sets a new value for property {@link #getKey key}.
           *
           * A key for a filter criterion. Each filter criterion must have a unique key.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setKey(
            /**
             * New value for property `key`
             */
            sKey: string
          ): sap.suite.ui.commons.TimelineFilterListItem;
          /**
           * Sets a new value for property {@link #getText text}.
           *
           * A textual label for the filter criterion. This text is displayed in the filter criteria list in the UI.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setText(
            /**
             * New value for property `text`
             */
            sText: string
          ): sap.suite.ui.commons.TimelineFilterListItem;
        }
        /**
         * An entry posted on the timeline.
         */
        class TimelineItem extends sap.ui.core.Control {
          /**
           * Constructor for a new TimelineItem.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: TimelineItemOpts
          );

          /**
           * Adds some customAction to the aggregation {@link #getCustomAction customAction}.
           */
          addCustomAction(
            /**
             * The customAction to add; if empty, nothing is inserted
             */
            oCustomAction: sap.ui.core.CustomData
          ): sap.suite.ui.commons.TimelineItem;
          /**
           * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
           *
           * Adds some suggestionItem to the aggregation {@link #getSuggestionItems suggestionItems}.
           */
          addSuggestionItem(
            /**
             * The suggestionItem to add; if empty, nothing is inserted
             */
            oSuggestionItem: sap.m.StandardListItem
          ): sap.suite.ui.commons.TimelineItem;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:customActionClicked customActionClicked} event
           * of this `sap.suite.ui.commons.TimelineItem`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.TimelineItem` itself.
           *
           * Fired when custom action link is clicked.
           */
          attachCustomActionClicked(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.TimelineItem` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.TimelineItem;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:replyListOpen replyListOpen} event of this `sap.suite.ui.commons.TimelineItem`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.TimelineItem` itself.
           *
           * This event is fired when the Reply link is clicked to open the reply dialog.
           */
          attachReplyListOpen(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.TimelineItem` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.TimelineItem;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:replyPost replyPost} event of this `sap.suite.ui.commons.TimelineItem`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.TimelineItem` itself.
           *
           * This event is fired when the Reply button is clicked in the links section of a timeline post.
           */
          attachReplyPost(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.TimelineItem` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.TimelineItem;
          /**
           * @SINCE 1.28.1
           * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
           *
           * Attaches event handler `fnFunction` to the {@link #event:suggest suggest} event of this `sap.suite.ui.commons.TimelineItem`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.TimelineItem` itself.
           *
           * This event is fired when the user types text into the search field and showSuggestion is set to true.
           * Changing the suggestItems aggregation will show the suggestions inside a popup.
           *  As of version 1.46, replaced by {@link sap.collaboration.components.feed.Component}.
           */
          attachSuggest(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.TimelineItem` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.TimelineItem;
          /**
           * @SINCE 1.28.1
           * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
           *
           * Attaches event handler `fnFunction` to the {@link #event:suggestionItemSelected suggestionItemSelected}
           * event of this `sap.suite.ui.commons.TimelineItem`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.TimelineItem` itself.
           *
           * This event is fired when a suggested post is selected in the search suggestions popup. This event is
           * fired only when the showSuggestion propery is set to `true` and there are suggested posts shown in the
           * suggestions popup.
           *  As of version 1.46, replaced by {@link sap.collaboration.components.feed.Component}.
           */
          attachSuggestionItemSelected(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.TimelineItem` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.TimelineItem;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:userNameClicked userNameClicked} event of this
           * `sap.suite.ui.commons.TimelineItem`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.TimelineItem` itself.
           *
           * This event is fired when a user name is clicked in the post's header section.
           */
          attachUserNameClicked(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.TimelineItem` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.TimelineItem;
          /**
           * Destroys all the customAction in the aggregation {@link #getCustomAction customAction}.
           */
          destroyCustomAction(): sap.suite.ui.commons.TimelineItem;
          /**
           * Destroys the customReply in the aggregation {@link #getCustomReply customReply}.
           */
          destroyCustomReply(): sap.suite.ui.commons.TimelineItem;
          /**
           * Destroys the embeddedControl in the aggregation {@link #getEmbeddedControl embeddedControl}.
           */
          destroyEmbeddedControl(): sap.suite.ui.commons.TimelineItem;
          /**
           * Destroys the replyList in the aggregation {@link #getReplyList replyList}.
           */
          destroyReplyList(): sap.suite.ui.commons.TimelineItem;
          /**
           * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
           *
           * Destroys all the suggestionItems in the aggregation {@link #getSuggestionItems suggestionItems}.
           */
          destroySuggestionItems(): sap.suite.ui.commons.TimelineItem;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:customActionClicked customActionClicked} event
           * of this `sap.suite.ui.commons.TimelineItem`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachCustomActionClicked(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.TimelineItem;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:replyListOpen replyListOpen} event of this
           * `sap.suite.ui.commons.TimelineItem`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachReplyListOpen(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.TimelineItem;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:replyPost replyPost} event of this `sap.suite.ui.commons.TimelineItem`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachReplyPost(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.TimelineItem;
          /**
           * @SINCE 1.28.1
           * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
           *
           * Detaches event handler `fnFunction` from the {@link #event:suggest suggest} event of this `sap.suite.ui.commons.TimelineItem`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachSuggest(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.TimelineItem;
          /**
           * @SINCE 1.28.1
           * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
           *
           * Detaches event handler `fnFunction` from the {@link #event:suggestionItemSelected suggestionItemSelected}
           * event of this `sap.suite.ui.commons.TimelineItem`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachSuggestionItemSelected(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.TimelineItem;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:userNameClicked userNameClicked} event of
           * this `sap.suite.ui.commons.TimelineItem`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachUserNameClicked(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.TimelineItem;
          /**
           * Creates a new subclass of class sap.suite.ui.commons.TimelineItem with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:customActionClicked customActionClicked} to attached listeners.
           */
          fireCustomActionClicked(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * Value of the custom action.
               */
              value?: string;
              /**
               * Key of the custom action.
               */
              key?: string;
              /**
               * Link on which the user clicked.
               */
              linkObj?: sap.m.Link;
            }
          ): sap.suite.ui.commons.TimelineItem;
          /**
           * Fires event {@link #event:replyListOpen replyListOpen} to attached listeners.
           */
          fireReplyListOpen(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.suite.ui.commons.TimelineItem;
          /**
           * Fires event {@link #event:replyPost replyPost} to attached listeners.
           */
          fireReplyPost(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * Content of the reply to the post.
               */
              value?: string;
            }
          ): sap.suite.ui.commons.TimelineItem;
          /**
           * @SINCE 1.28.1
           * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
           *
           * Fires event {@link #event:suggest suggest} to attached listeners.
           */
          fireSuggest(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * The current value that has been typed into the search field.
               */
              suggestValue?: string;
            }
          ): sap.suite.ui.commons.TimelineItem;
          /**
           * @SINCE 1.28.1
           * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
           *
           * Fires event {@link #event:suggestionItemSelected suggestionItemSelected} to attached listeners.
           */
          fireSuggestionItemSelected(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * The post selected in the suggestions popup.
               */
              selectedItem?: sap.ui.core.Item;
            }
          ): sap.suite.ui.commons.TimelineItem;
          /**
           * Fires event {@link #event:userNameClicked userNameClicked} to attached listeners.
           */
          fireUserNameClicked(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * A clickable UI element representing the user name.
               */
              uiElement?: sap.ui.core.Control;
            }
          ): sap.suite.ui.commons.TimelineItem;
          /**
           * Gets content of aggregation {@link #getCustomAction customAction}.
           *
           * Custom actions displayed as links in the links section of the post. The key must be unique for each link.
           * Values are used as labels for the link. When a user clicks the link, a customActionClicked event is fired.
           */
          getCustomAction(): sap.ui.core.CustomData[];
          /**
           * Gets content of aggregation {@link #getCustomReply customReply}.
           *
           * A UI5 control that acts as a custom reply dialog. It is used instead of the default reply dialog that
           * is displayed when the user clicks the Reply link. Supports UI5 controls that have an openBy method, for
           * example, the Popup control.
           */
          getCustomReply(): sap.ui.core.Control;
          /**
           * Gets current value of property {@link #getDateTime dateTime}.
           *
           * Date and time value of the timeline post. This value must be in one of the following formats:
           * 	 -  A valid instance of the `Date` object.
           * 	 -  An integer representing Unix time (also known as POSIX or Epoch time) in milliseconds.
           * 	 -  A string with an integer representing Unix time in milliseconds.
           * 	 -  A string that contains `Date([number])`, where `[number]` represents Unix time in milliseconds.
           * 			  If this property has any other format, the timeline will try to parse it using `Date.parse`. It
           * 			is not recommended to use this functionality, as different web browsers implement this function differently,
           * 			which may lead to unpredictable behavior.
           */
          getDateTime(): any;
          /**
           * Gets content of aggregation {@link #getEmbeddedControl embeddedControl}.
           *
           * A UI5 control that is displayed as a timeline post's content instead of the default content (text). Examples
           * of such a control include the Panel control and the List control.
           */
          getEmbeddedControl(): sap.ui.core.Control;
          /**
           * Gets current value of property {@link #getFilterValue filterValue}.
           *
           * Text for the items filter name. This text will be used as the name of the items filter in the filter
           * popover.
           */
          getFilterValue(): string;
          /**
           * Gets current value of property {@link #getIcon icon}.
           *
           * Icon on the timeline axis that corresponds to the point in time when the entry was posted. Posts can
           * be displayed in chronological or reverse chronological order.
           */
          getIcon(): string;
          /**
           * Gets current value of property {@link #getIconTooltip iconTooltip}.
           *
           * Tooltip for an icon displayed on the timeline axis.
           */
          getIconTooltip(): string;
          /**
           * Gets current value of property {@link #getMaxCharacters maxCharacters}.
           *
           * The expand and collapse feature is set by default and uses 300 characters on mobile devices and 500 characters
           * on desktop computers as limits. Based on these values, the text of the timeline post is collapsed once
           * it reaches these character limits. In this case, only the specified number of characters is displayed.
           * By clicking the More link, the entire text can be displayed. Clicking Less collapses the text. The application
           * can set the value according to its needs.
           */
          getMaxCharacters(): number;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.TimelineItem.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getReplyCount replyCount}.
           *
           * Number of replies to a timeline post.
           */
          getReplyCount(): number;
          /**
           * Gets content of aggregation {@link #getReplyList replyList}.
           *
           * A list of replies related to the post.
           */
          getReplyList(): sap.m.List;
          /**
           * Gets current value of property {@link #getStatus status}.
           *
           * Indicates the post status. The status affects the post's icon color. Supported values:
           * 	 -  `Information`
           * 	 -  `Success`
           * 	 -  `Warning`
           * 	 -  `Error`
           */
          getStatus(): string;
          /**
           * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
           *
           * Gets content of aggregation {@link #getSuggestionItems suggestionItems}.
           *
           * Suggested posts.
           *  As of version 1.46, replaced by {@link sap.collaboration.components.feed.Component}.
           */
          getSuggestionItems(): sap.m.StandardListItem[];
          /**
           * Gets current value of property {@link #getText text}.
           *
           * Text shown inside the timeline post.
           */
          getText(): string;
          /**
           * Gets current value of property {@link #getTitle title}.
           *
           * Text shown in the post title right after the user name.
           */
          getTitle(): string;
          /**
           * Gets current value of property {@link #getUseIconTooltip useIconTooltip}.
           *
           * Decides whether a default Icon tooltip should be used if no tooltip is set.
           *
           * Default value is `true`.
           */
          getUseIconTooltip(): boolean;
          /**
           * Gets current value of property {@link #getUserName userName}.
           *
           * User name shown in the post title.
           */
          getUserName(): string;
          /**
           * Gets current value of property {@link #getUserNameClickable userNameClickable}.
           *
           * Makes the user name clickable. Clicking the name fires a userNameClicked event.
           *
           * Default value is `false`.
           */
          getUserNameClickable(): boolean;
          /**
           * Gets current value of property {@link #getUserPicture userPicture}.
           *
           * Picture shown next to the user name.
           */
          getUserPicture(): sap.ui.core.URI;
          /**
           * Checks for the provided `sap.ui.core.CustomData` in the aggregation {@link #getCustomAction customAction}.
           * and returns its index if found or -1 otherwise.
           */
          indexOfCustomAction(
            /**
             * The customAction whose index is looked for
             */
            oCustomAction: sap.ui.core.CustomData
          ): number;
          /**
           * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
           *
           * Checks for the provided `sap.m.StandardListItem` in the aggregation {@link #getSuggestionItems suggestionItems}.
           * and returns its index if found or -1 otherwise.
           */
          indexOfSuggestionItem(
            /**
             * The suggestionItem whose index is looked for
             */
            oSuggestionItem: sap.m.StandardListItem
          ): number;
          /**
           * Inserts a customAction into the aggregation {@link #getCustomAction customAction}.
           */
          insertCustomAction(
            /**
             * The customAction to insert; if empty, nothing is inserted
             */
            oCustomAction: sap.ui.core.CustomData,
            /**
             * The `0`-based index the customAction should be inserted at; for a negative value of `iIndex`, the customAction
             * is inserted at position 0; for a value greater than the current size of the aggregation, the customAction
             * is inserted at the last position
             */
            iIndex: number
          ): sap.suite.ui.commons.TimelineItem;
          /**
           * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
           *
           * Inserts a suggestionItem into the aggregation {@link #getSuggestionItems suggestionItems}.
           */
          insertSuggestionItem(
            /**
             * The suggestionItem to insert; if empty, nothing is inserted
             */
            oSuggestionItem: sap.m.StandardListItem,
            /**
             * The `0`-based index the suggestionItem should be inserted at; for a negative value of `iIndex`, the suggestionItem
             * is inserted at position 0; for a value greater than the current size of the aggregation, the suggestionItem
             * is inserted at the last position
             */
            iIndex: number
          ): sap.suite.ui.commons.TimelineItem;
          /**
           * Removes all the controls from the aggregation {@link #getCustomAction customAction}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllCustomAction(): sap.ui.core.CustomData[];
          /**
           * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
           *
           * Removes all the controls from the aggregation {@link #getSuggestionItems suggestionItems}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllSuggestionItems(): sap.m.StandardListItem[];
          /**
           * Removes a customAction from the aggregation {@link #getCustomAction customAction}.
           */
          removeCustomAction(
            /**
             * The customAction to remove or its index or id
             */
            vCustomAction: number | string | sap.ui.core.CustomData
          ): sap.ui.core.CustomData;
          /**
           * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
           *
           * Removes a suggestionItem from the aggregation {@link #getSuggestionItems suggestionItems}.
           */
          removeSuggestionItem(
            /**
             * The suggestionItem to remove or its index or id
             */
            vSuggestionItem: number | string | sap.m.StandardListItem
          ): sap.m.StandardListItem;
          /**
           * Sets the aggregated {@link #getCustomReply customReply}.
           */
          setCustomReply(
            /**
             * The customReply to set
             */
            oCustomReply: sap.ui.core.Control
          ): sap.suite.ui.commons.TimelineItem;
          /**
           * Sets a new value for property {@link #getDateTime dateTime}.
           *
           * Date and time value of the timeline post. This value must be in one of the following formats:
           * 	 -  A valid instance of the `Date` object.
           * 	 -  An integer representing Unix time (also known as POSIX or Epoch time) in milliseconds.
           * 	 -  A string with an integer representing Unix time in milliseconds.
           * 	 -  A string that contains `Date([number])`, where `[number]` represents Unix time in milliseconds.
           * 			  If this property has any other format, the timeline will try to parse it using `Date.parse`. It
           * 			is not recommended to use this functionality, as different web browsers implement this function differently,
           * 			which may lead to unpredictable behavior.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setDateTime(
            /**
             * New value for property `dateTime`
             */
            oDateTime: any
          ): sap.suite.ui.commons.TimelineItem;
          /**
           * Sets the aggregated {@link #getEmbeddedControl embeddedControl}.
           */
          setEmbeddedControl(
            /**
             * The embeddedControl to set
             */
            oEmbeddedControl: sap.ui.core.Control
          ): sap.suite.ui.commons.TimelineItem;
          /**
           * Sets a new value for property {@link #getFilterValue filterValue}.
           *
           * Text for the items filter name. This text will be used as the name of the items filter in the filter
           * popover.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setFilterValue(
            /**
             * New value for property `filterValue`
             */
            sFilterValue: string
          ): sap.suite.ui.commons.TimelineItem;
          /**
           * Sets a new value for property {@link #getIcon icon}.
           *
           * Icon on the timeline axis that corresponds to the point in time when the entry was posted. Posts can
           * be displayed in chronological or reverse chronological order.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setIcon(
            /**
             * New value for property `icon`
             */
            sIcon: string
          ): sap.suite.ui.commons.TimelineItem;
          /**
           * Sets a new value for property {@link #getIconTooltip iconTooltip}.
           *
           * Tooltip for an icon displayed on the timeline axis.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setIconTooltip(
            /**
             * New value for property `iconTooltip`
             */
            sIconTooltip: string
          ): sap.suite.ui.commons.TimelineItem;
          /**
           * Sets a new value for property {@link #getMaxCharacters maxCharacters}.
           *
           * The expand and collapse feature is set by default and uses 300 characters on mobile devices and 500 characters
           * on desktop computers as limits. Based on these values, the text of the timeline post is collapsed once
           * it reaches these character limits. In this case, only the specified number of characters is displayed.
           * By clicking the More link, the entire text can be displayed. Clicking Less collapses the text. The application
           * can set the value according to its needs.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setMaxCharacters(
            /**
             * New value for property `maxCharacters`
             */
            iMaxCharacters: number
          ): sap.suite.ui.commons.TimelineItem;
          /**
           * Sets a new value for property {@link #getReplyCount replyCount}.
           *
           * Number of replies to a timeline post.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setReplyCount(
            /**
             * New value for property `replyCount`
             */
            iReplyCount: number
          ): sap.suite.ui.commons.TimelineItem;
          /**
           * Sets the aggregated {@link #getReplyList replyList}.
           */
          setReplyList(
            /**
             * The replyList to set
             */
            oReplyList: sap.m.List
          ): sap.suite.ui.commons.TimelineItem;
          /**
           * Sets a new value for property {@link #getStatus status}.
           *
           * Indicates the post status. The status affects the post's icon color. Supported values:
           * 	 -  `Information`
           * 	 -  `Success`
           * 	 -  `Warning`
           * 	 -  `Error`
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setStatus(
            /**
             * New value for property `status`
             */
            sStatus: string
          ): sap.suite.ui.commons.TimelineItem;
          /**
           * Sets a new value for property {@link #getText text}.
           *
           * Text shown inside the timeline post.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setText(
            /**
             * New value for property `text`
             */
            sText: string
          ): sap.suite.ui.commons.TimelineItem;
          /**
           * Sets a new value for property {@link #getTitle title}.
           *
           * Text shown in the post title right after the user name.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setTitle(
            /**
             * New value for property `title`
             */
            sTitle: string
          ): sap.suite.ui.commons.TimelineItem;
          /**
           * Sets a new value for property {@link #getUseIconTooltip useIconTooltip}.
           *
           * Decides whether a default Icon tooltip should be used if no tooltip is set.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setUseIconTooltip(
            /**
             * New value for property `useIconTooltip`
             */
            bUseIconTooltip: boolean
          ): sap.suite.ui.commons.TimelineItem;
          /**
           * Sets a new value for property {@link #getUserName userName}.
           *
           * User name shown in the post title.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setUserName(
            /**
             * New value for property `userName`
             */
            sUserName: string
          ): sap.suite.ui.commons.TimelineItem;
          /**
           * Sets a new value for property {@link #getUserNameClickable userNameClickable}.
           *
           * Makes the user name clickable. Clicking the name fires a userNameClicked event.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setUserNameClickable(
            /**
             * New value for property `userNameClickable`
             */
            bUserNameClickable: boolean
          ): sap.suite.ui.commons.TimelineItem;
          /**
           * Sets a new value for property {@link #getUserPicture userPicture}.
           *
           * Picture shown next to the user name.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setUserPicture(
            /**
             * New value for property `userPicture`
             */
            sUserPicture: sap.ui.core.URI
          ): sap.suite.ui.commons.TimelineItem;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:customActionClicked customActionClicked} event
           * of this `sap.suite.ui.commons.TimelineItem`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.TimelineItem` itself.
           *
           * Fired when custom action link is clicked.
           */
          attachCustomActionClicked(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.TimelineItem` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.TimelineItem;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:replyListOpen replyListOpen} event of this `sap.suite.ui.commons.TimelineItem`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.TimelineItem` itself.
           *
           * This event is fired when the Reply link is clicked to open the reply dialog.
           */
          attachReplyListOpen(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.TimelineItem` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.TimelineItem;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:replyPost replyPost} event of this `sap.suite.ui.commons.TimelineItem`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.TimelineItem` itself.
           *
           * This event is fired when the Reply button is clicked in the links section of a timeline post.
           */
          attachReplyPost(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.TimelineItem` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.TimelineItem;
          /**
           * @SINCE 1.28.1
           * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
           *
           * Attaches event handler `fnFunction` to the {@link #event:suggest suggest} event of this `sap.suite.ui.commons.TimelineItem`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.TimelineItem` itself.
           *
           * This event is fired when the user types text into the search field and showSuggestion is set to true.
           * Changing the suggestItems aggregation will show the suggestions inside a popup.
           *  As of version 1.46, replaced by {@link sap.collaboration.components.feed.Component}.
           */
          attachSuggest(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.TimelineItem` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.TimelineItem;
          /**
           * @SINCE 1.28.1
           * @deprecated (since 1.46.0) - Use the Group Feed Component instead.
           *
           * Attaches event handler `fnFunction` to the {@link #event:suggestionItemSelected suggestionItemSelected}
           * event of this `sap.suite.ui.commons.TimelineItem`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.TimelineItem` itself.
           *
           * This event is fired when a suggested post is selected in the search suggestions popup. This event is
           * fired only when the showSuggestion propery is set to `true` and there are suggested posts shown in the
           * suggestions popup.
           *  As of version 1.46, replaced by {@link sap.collaboration.components.feed.Component}.
           */
          attachSuggestionItemSelected(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.TimelineItem` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.TimelineItem;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:userNameClicked userNameClicked} event of this
           * `sap.suite.ui.commons.TimelineItem`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.TimelineItem` itself.
           *
           * This event is fired when a user name is clicked in the post's header section.
           */
          attachUserNameClicked(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.TimelineItem` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.TimelineItem;
        }
        /**
         * TimelineNavigator An extension of ItemNavigator for Timeline.
         */
        class TimelineNavigator extends sap.ui.core.delegate.ItemNavigation {
          /**
           * Creates an instance of TimelineNavigator.
           */
          constructor(
            /**
             * The root DOM reference that includes all items
             */
            oDomRef: Element,
            /**
             * Array of DOM references representing the items for the navigation
             */
            aItemDomRefs: Element[],
            /**
             * Whether the selected element should be in the tab chain or not
             */
            bNotInTabChain: boolean,
            /**
             * 2D array of navigation items to navigate in. If not defined navigation will fallback to aItemDomRefs.
             */
            aRows: Element[]
          );
          /**
           * Creates an instance of TimelineNavigator.
           */
          constructor(
            /**
             * The root DOM reference that includes all items
             */
            oDomRef: Element,
            /**
             * Array of DOM references representing the items for the navigation
             */
            aItemDomRefs: Element[],
            /**
             * 2D array of navigation items to navigate in. If not defined navigation will fallback to aItemDomRefs.
             */
            aRows: Element[]
          );

          /**
           * Creates a new subclass of class sap.suite.ui.commons.TimelineNavigator with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.delegate.ItemNavigation.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.TimelineNavigator.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Sets the item DOM references as an array for the items
           */
          // @ts-ignore
          setItemDomRefs(
            /**
             * Array of DOM references representing the items
             */
            aItemDomRefs: Element[]
          ): sap.ui.core.delegate.ItemNavigation;
          /**
           * Update references to navigation objects.
           */
          updateReferences(
            /**
             * The root DOM reference that includes all items
             */
            oDomRef: Element,
            /**
             * Array of DOM references representing the items for the navigation
             */
            aItemDomRefs: Element[],
            /**
             * 2D array of navigation items to navigate in. If not defined navigation will fallback to aItemDomRefs.
             */
            aRows: Element[]
          ): void;
        }
        /**
         * @deprecated (since 1.32) - Deprecated. Object page should be used instead.
         *
         * This control is used in UnifiedThingInspector to display the facet header information.
         */
        class UnifiedThingGroup extends sap.ui.core.Control {
          /**
           * Constructor for a new UnifiedThingGroup.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: UnifiedThingGroupOpts
          );

          /**
           * Destroys the content in the aggregation {@link #getContent content}.
           */
          destroyContent(): sap.suite.ui.commons.UnifiedThingGroup;
          /**
           * Creates a new subclass of class sap.suite.ui.commons.UnifiedThingGroup with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets content of aggregation {@link #getContent content}.
           *
           * The content of the group.
           */
          getContent(): sap.ui.core.Control;
          /**
           * Gets current value of property {@link #getDescription description}.
           *
           * The description of the group.
           */
          getDescription(): string;
          /**
           * Gets current value of property {@link #getDesign design}.
           *
           * Defines how the control is rendered.
           *
           * Default value is `ZeroIndent`.
           */
          getDesign(): sap.suite.ui.commons.ThingGroupDesign;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.UnifiedThingGroup.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getTitle title}.
           *
           * The title of the group.
           */
          getTitle(): string;
          /**
           * Sets the aggregated {@link #getContent content}.
           */
          setContent(
            /**
             * The content to set
             */
            oContent: sap.ui.core.Control
          ): sap.suite.ui.commons.UnifiedThingGroup;
          /**
           * Sets a new value for property {@link #getDescription description}.
           *
           * The description of the group.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setDescription(
            /**
             * New value for property `description`
             */
            sDescription: string
          ): sap.suite.ui.commons.UnifiedThingGroup;
          /**
           * Sets a new value for property {@link #getDesign design}.
           *
           * Defines how the control is rendered.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `ZeroIndent`.
           */
          setDesign(
            /**
             * New value for property `design`
             */
            sDesign: sap.suite.ui.commons.ThingGroupDesign
          ): sap.suite.ui.commons.UnifiedThingGroup;
          /**
           * Sets a new value for property {@link #getTitle title}.
           *
           * The title of the group.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setTitle(
            /**
             * New value for property `title`
             */
            sTitle: string
          ): sap.suite.ui.commons.UnifiedThingGroup;
        }
        /**
         * @deprecated (since 1.32) - Deprecated. Object page should be used instead.
         *
         * This control provides an ability to display a thing (for example, object factsheet) on the desktop, tablet,
         * and phone devices in a Fiori style.
         */
        class UnifiedThingInspector extends sap.ui.core.Control {
          /**
           * Constructor for a new UnifiedThingInspector.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: UnifiedThingInspectorOpts
          );

          /**
           * @deprecated (since 1.18.2) - Deprecated due to the incorrect work with data binding. Open the popup in
           * the actionsButtonPress event handler instead.
           *
           * Adds some action to the aggregation {@link #getActions actions}.
           */
          addAction(
            /**
             * The action to add; if empty, nothing is inserted
             */
            oAction: sap.m.Button
          ): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * Adds some facet to the aggregation {@link #getFacets facets}.
           */
          addFacet(
            /**
             * The facet to add; if empty, nothing is inserted
             */
            oFacet: sap.suite.ui.commons.FacetOverview
          ): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * Adds some facetContent to the aggregation {@link #getFacetContent facetContent}.
           */
          addFacetContent(
            /**
             * The facetContent to add; if empty, nothing is inserted
             */
            oFacetContent: sap.ui.core.Control
          ): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * Adds some kpi to the aggregation {@link #getKpis kpis}.
           */
          addKpi(
            /**
             * The kpi to add; if empty, nothing is inserted
             */
            oKpi: sap.suite.ui.commons.KpiTile
          ): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * Adds some page to the aggregation {@link #getPages pages}.
           */
          addPage(
            /**
             * The page to add; if empty, nothing is inserted
             */
            oPage: sap.ui.core.Control
          ): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * @deprecated (since 1.18.2) - Deprecated due to the incorrect work with data binding. Open the popup in
           * the transactionsButtonPress event handler instead.
           *
           * Adds some transaction to the aggregation {@link #getTransactions transactions}.
           */
          addTransaction(
            /**
             * The transaction to add; if empty, nothing is inserted
             */
            oTransaction: sap.ui.core.Control
          ): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:actionsButtonPress actionsButtonPress} event
           * of this `sap.suite.ui.commons.UnifiedThingInspector`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.UnifiedThingInspector` itself.
           *
           * The event is fired when the user chooses the Actions button.
           */
          attachActionsButtonPress(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.UnifiedThingInspector`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:afterNavigate afterNavigate} event of this `sap.suite.ui.commons.UnifiedThingInspector`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.UnifiedThingInspector` itself.
           *
           * The event is fired when navigation between two pages has completed. In case of animated transitions this
           * event is fired with some delay after the "navigate" event. This event is propogated from the inner NavContainer.
           * The event can also return internal Master and Detail pages.
           */
          attachAfterNavigate(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.UnifiedThingInspector`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:backAction backAction} event of this `sap.suite.ui.commons.UnifiedThingInspector`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.UnifiedThingInspector` itself.
           *
           * The event is fired when the user chooses the Back button.
           */
          attachBackAction(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.UnifiedThingInspector`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:configurationButtonPress configurationButtonPress}
           * event of this `sap.suite.ui.commons.UnifiedThingInspector`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.UnifiedThingInspector` itself.
           *
           * The event is fired when the user chooses the Configuration button.
           */
          attachConfigurationButtonPress(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.UnifiedThingInspector`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:navigate navigate} event of this `sap.suite.ui.commons.UnifiedThingInspector`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.UnifiedThingInspector` itself.
           *
           * The event is fired when navigation between two pages has been triggered. The transition (if any) to the
           * new page has not started yet. This event can be aborted by the application with preventDefault(), which
           * means that there will be no navigation. This event is propogated from the inner NavContainer. The event
           * can also return internal Master and Detail pages.
           */
          attachNavigate(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.UnifiedThingInspector`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:transactionsButtonPress transactionsButtonPress}
           * event of this `sap.suite.ui.commons.UnifiedThingInspector`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.UnifiedThingInspector` itself.
           *
           * The event is fired when the user chooses the Transactions button.
           */
          attachTransactionsButtonPress(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.UnifiedThingInspector`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * @deprecated (since 1.18.2) - Deprecated due to the incorrect work with data binding. Open the popup in
           * the actionsButtonPress event handler instead.
           *
           * Destroys all the actions in the aggregation {@link #getActions actions}.
           */
          destroyActions(): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * Destroys all the facetContent in the aggregation {@link #getFacetContent facetContent}.
           */
          destroyFacetContent(): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * Destroys all the facets in the aggregation {@link #getFacets facets}.
           */
          destroyFacets(): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * Destroys all the kpis in the aggregation {@link #getKpis kpis}.
           */
          destroyKpis(): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * Destroys all the pages in the aggregation {@link #getPages pages}.
           */
          destroyPages(): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * @deprecated (since 1.18.2) - Deprecated due to the incorrect work with data binding. Open the popup in
           * the transactionsButtonPress event handler instead.
           *
           * Destroys all the transactions in the aggregation {@link #getTransactions transactions}.
           */
          destroyTransactions(): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:actionsButtonPress actionsButtonPress} event
           * of this `sap.suite.ui.commons.UnifiedThingInspector`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachActionsButtonPress(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:afterNavigate afterNavigate} event of this
           * `sap.suite.ui.commons.UnifiedThingInspector`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachAfterNavigate(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:backAction backAction} event of this `sap.suite.ui.commons.UnifiedThingInspector`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachBackAction(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:configurationButtonPress configurationButtonPress}
           * event of this `sap.suite.ui.commons.UnifiedThingInspector`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachConfigurationButtonPress(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:navigate navigate} event of this `sap.suite.ui.commons.UnifiedThingInspector`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachNavigate(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:transactionsButtonPress transactionsButtonPress}
           * event of this `sap.suite.ui.commons.UnifiedThingInspector`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachTransactionsButtonPress(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * Creates a new subclass of class sap.suite.ui.commons.UnifiedThingInspector with name `sClassName` and
           * enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:actionsButtonPress actionsButtonPress} to attached listeners.
           *
           * Listeners may prevent the default action of this event by using the `preventDefault`-method on the event
           * object.
           */
          fireActionsButtonPress(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * The object that initiated the event.
               */
              caller?: object;
            }
          ): boolean;
          /**
           * Fires event {@link #event:afterNavigate afterNavigate} to attached listeners.
           */
          fireAfterNavigate(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * The page that had been shown before navigation.
               */
              from?: sap.ui.core.Control;
              /**
               * The ID of the page that had been shown before navigation.
               */
              fromId?: string;
              /**
               * The page that is now shown after navigation.
               */
              to?: sap.ui.core.Control;
              /**
               * The ID of the page that is now shown after navigation.
               */
              toId?: string;
              /**
               * Whether the "to" page (more precisely: a control with the ID of the page that has been navigated to)
               * had not been shown/navigated to before.
               */
              firstTime?: boolean;
              /**
               * Whether was a forward navigation, triggered by "to()".
               */
              isTo?: boolean;
              /**
               * Whether this was a back navigation, triggered by "back()".
               */
              isBack?: boolean;
              /**
               * Whether this was a navigation to the root page, triggered by "backToTop()".
               */
              isBackToTop?: boolean;
              /**
               * Whether this was a navigation to the root page, triggered by "backToTop()".
               */
              isBackToPage?: boolean;
              /**
               * How the navigation was triggered, possible values are: "to", "back", and "backToTop".
               */
              direction?: string;
            }
          ): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * Fires event {@link #event:backAction backAction} to attached listeners.
           */
          fireBackAction(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * Fires event {@link #event:configurationButtonPress configurationButtonPress} to attached listeners.
           */
          fireConfigurationButtonPress(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * The object that initiated the event.
               */
              caller?: object;
            }
          ): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * Fires event {@link #event:navigate navigate} to attached listeners.
           *
           * Listeners may prevent the default action of this event by using the `preventDefault`-method on the event
           * object.
           */
          fireNavigate(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * The page that was shown before the current navigation.
               */
              from?: sap.ui.core.Control;
              /**
               * The ID of the page that was shown before the current navigation.
               */
              fromId?: string;
              /**
               * The page that will be shown after the current navigation.
               */
              to?: sap.ui.core.Control;
              /**
               * The ID of the page that will be shown after the current navigation.
               */
              toId?: string;
              /**
               * Whether the "to" page (more precisely: a control with the ID of the page that is currently navigated
               * to) has not been shown/navigated to before.
               */
              firstTime?: boolean;
              /**
               * Whether this is a forward navigation, triggered by "to()".
               */
              isTo?: boolean;
              /**
               * Whether this is a back navigation, triggered by "back()".
               */
              isBack?: boolean;
              /**
               * Whether this is a navigation to the root page, triggered by "backToTop()".
               */
              isBackToTop?: boolean;
              /**
               * Whether this was a navigation to the root page, triggered by "backToTop()".
               */
              isBackToPage?: boolean;
              /**
               * How the navigation was triggered, possible values are: "to", "back", and "backToTop".
               */
              direction?: string;
            }
          ): boolean;
          /**
           * Fires event {@link #event:transactionsButtonPress transactionsButtonPress} to attached listeners.
           *
           * Listeners may prevent the default action of this event by using the `preventDefault`-method on the event
           * object.
           */
          fireTransactionsButtonPress(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * The object that initiated the event.
               */
              caller?: object;
            }
          ): boolean;
          /**
           * @deprecated (since 1.18.2) - Deprecated due to the incorrect work with data binding. Open the popup in
           * the actionsButtonPress event handler instead.
           *
           * Gets content of aggregation {@link #getActions actions}.
           *
           * Action sheet controls.
           */
          getActions(): sap.m.Button[];
          /**
           * Gets current value of property {@link #getActionsVisible actionsVisible}.
           *
           * If set to true, the Actions button appears.
           *
           * Default value is `false`.
           */
          getActionsVisible(): boolean;
          /**
           * Gets current value of property {@link #getConfigurationVisible configurationVisible}.
           *
           * If set to true, the Configuration button appears.
           *
           * Default value is `true`.
           */
          getConfigurationVisible(): boolean;
          /**
           * Gets current value of property {@link #getDescription description}.
           *
           * The description of the thing.
           */
          getDescription(): string;
          /**
           * Gets current value of property {@link #getDestroyPageOnBack destroyPageOnBack}.
           *
           * If set to true, destroys a page when the user chooses the Back button to leave this page.
           *
           * Default value is `true`.
           */
          getDestroyPageOnBack(): boolean;
          /**
           * Gets content of aggregation {@link #getFacetContent facetContent}.
           *
           * The content that appears on the detail page of the UnifiedThingInspector.
           */
          getFacetContent(): sap.ui.core.Control[];
          /**
           * Gets content of aggregation {@link #getFacets facets}.
           *
           * The list of the sap.suite.ui.commons.FacetOverview objects.
           */
          getFacets(): sap.suite.ui.commons.FacetOverview[];
          /**
           * Gets current value of property {@link #getHeight height}.
           *
           * The height of the control.
           *
           * Default value is `100%`.
           */
          getHeight(): sap.ui.core.CSSSize;
          /**
           * Gets current value of property {@link #getIcon icon}.
           *
           * The icon to be displayed as a graphical element within the header. This can be an image or an icon from
           * the icon font.
           */
          getIcon(): sap.ui.core.URI;
          /**
           * Gets content of aggregation {@link #getKpis kpis}.
           *
           * A set of the KPI tiles to be shown in the header. Currently only 3 tiles from the list are displayed
           * on the desktop and tablet. On the phone, all tiles are displayed in a swipeable container.
           */
          getKpis(): sap.suite.ui.commons.KpiTile[];
          /**
           * Returns a metadata object for class sap.suite.ui.commons.UnifiedThingInspector.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getName name}.
           *
           * The name of the thing.
           */
          getName(): string;
          /**
           * Gets content of aggregation {@link #getPages pages}.
           *
           * Contains pages except for Master and Detail.
           */
          getPages(): sap.ui.core.Control[];
          /**
           * Gets current value of property {@link #getTitle title}.
           *
           * The title of the thing.
           */
          getTitle(): string;
          /**
           * @deprecated (since 1.18.2) - Deprecated due to the incorrect work with data binding. Open the popup in
           * the transactionsButtonPress event handler instead.
           *
           * Gets content of aggregation {@link #getTransactions transactions}.
           *
           * Menu items for transaction popup.
           */
          getTransactions(): sap.ui.core.Control[];
          /**
           * Gets current value of property {@link #getTransactionsVisible transactionsVisible}.
           *
           * If set to true, the Transaction button appears.
           *
           * Default value is `false`.
           */
          getTransactionsVisible(): boolean;
          /**
           * @deprecated (since 1.18.2) - Deprecated due to the incorrect work with data binding. Open the popup in
           * the actionsButtonPress event handler instead.
           *
           * Checks for the provided `sap.m.Button` in the aggregation {@link #getActions actions}. and returns its
           * index if found or -1 otherwise.
           */
          indexOfAction(
            /**
             * The action whose index is looked for
             */
            oAction: sap.m.Button
          ): number;
          /**
           * Checks for the provided `sap.suite.ui.commons.FacetOverview` in the aggregation {@link #getFacets facets}.
           * and returns its index if found or -1 otherwise.
           */
          indexOfFacet(
            /**
             * The facet whose index is looked for
             */
            oFacet: sap.suite.ui.commons.FacetOverview
          ): number;
          /**
           * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getFacetContent facetContent}.
           * and returns its index if found or -1 otherwise.
           */
          indexOfFacetContent(
            /**
             * The facetContent whose index is looked for
             */
            oFacetContent: sap.ui.core.Control
          ): number;
          /**
           * Checks for the provided `sap.suite.ui.commons.KpiTile` in the aggregation {@link #getKpis kpis}. and
           * returns its index if found or -1 otherwise.
           */
          indexOfKpi(
            /**
             * The kpi whose index is looked for
             */
            oKpi: sap.suite.ui.commons.KpiTile
          ): number;
          /**
           * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getPages pages}. and returns
           * its index if found or -1 otherwise.
           */
          indexOfPage(
            /**
             * The page whose index is looked for
             */
            oPage: sap.ui.core.Control
          ): number;
          /**
           * @deprecated (since 1.18.2) - Deprecated due to the incorrect work with data binding. Open the popup in
           * the transactionsButtonPress event handler instead.
           *
           * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getTransactions transactions}.
           * and returns its index if found or -1 otherwise.
           */
          indexOfTransaction(
            /**
             * The transaction whose index is looked for
             */
            oTransaction: sap.ui.core.Control
          ): number;
          /**
           * @deprecated (since 1.18.2) - Deprecated due to the incorrect work with data binding. Open the popup in
           * the actionsButtonPress event handler instead.
           *
           * Inserts a action into the aggregation {@link #getActions actions}.
           */
          insertAction(
            /**
             * The action to insert; if empty, nothing is inserted
             */
            oAction: sap.m.Button,
            /**
             * The `0`-based index the action should be inserted at; for a negative value of `iIndex`, the action is
             * inserted at position 0; for a value greater than the current size of the aggregation, the action is inserted
             * at the last position
             */
            iIndex: number
          ): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * Inserts a facet into the aggregation {@link #getFacets facets}.
           */
          insertFacet(
            /**
             * The facet to insert; if empty, nothing is inserted
             */
            oFacet: sap.suite.ui.commons.FacetOverview,
            /**
             * The `0`-based index the facet should be inserted at; for a negative value of `iIndex`, the facet is inserted
             * at position 0; for a value greater than the current size of the aggregation, the facet is inserted at
             * the last position
             */
            iIndex: number
          ): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * Inserts a facetContent into the aggregation {@link #getFacetContent facetContent}.
           */
          insertFacetContent(
            /**
             * The facetContent to insert; if empty, nothing is inserted
             */
            oFacetContent: sap.ui.core.Control,
            /**
             * The `0`-based index the facetContent should be inserted at; for a negative value of `iIndex`, the facetContent
             * is inserted at position 0; for a value greater than the current size of the aggregation, the facetContent
             * is inserted at the last position
             */
            iIndex: number
          ): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * Inserts a kpi into the aggregation {@link #getKpis kpis}.
           */
          insertKpi(
            /**
             * The kpi to insert; if empty, nothing is inserted
             */
            oKpi: sap.suite.ui.commons.KpiTile,
            /**
             * The `0`-based index the kpi should be inserted at; for a negative value of `iIndex`, the kpi is inserted
             * at position 0; for a value greater than the current size of the aggregation, the kpi is inserted at the
             * last position
             */
            iIndex: number
          ): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * Inserts a page into the aggregation {@link #getPages pages}.
           */
          insertPage(
            /**
             * The page to insert; if empty, nothing is inserted
             */
            oPage: sap.ui.core.Control,
            /**
             * The `0`-based index the page should be inserted at; for a negative value of `iIndex`, the page is inserted
             * at position 0; for a value greater than the current size of the aggregation, the page is inserted at
             * the last position
             */
            iIndex: number
          ): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * @deprecated (since 1.18.2) - Deprecated due to the incorrect work with data binding. Open the popup in
           * the transactionsButtonPress event handler instead.
           *
           * Inserts a transaction into the aggregation {@link #getTransactions transactions}.
           */
          insertTransaction(
            /**
             * The transaction to insert; if empty, nothing is inserted
             */
            oTransaction: sap.ui.core.Control,
            /**
             * The `0`-based index the transaction should be inserted at; for a negative value of `iIndex`, the transaction
             * is inserted at position 0; for a value greater than the current size of the aggregation, the transaction
             * is inserted at the last position
             */
            iIndex: number
          ): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * @deprecated (since 1.18.2) - Deprecated due to the incorrect work with data binding. Open the popup in
           * the actionsButtonPress event handler instead.
           *
           * Removes a action from the aggregation {@link #getActions actions}.
           */
          removeAction(
            /**
             * The action to remove or its index or id
             */
            vAction: number | string | sap.m.Button
          ): sap.m.Button;
          /**
           * @deprecated (since 1.18.2) - Deprecated due to the incorrect work with data binding. Open the popup in
           * the actionsButtonPress event handler instead.
           *
           * Removes all the controls from the aggregation {@link #getActions actions}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllActions(): sap.m.Button[];
          /**
           * Removes all the controls from the aggregation {@link #getFacetContent facetContent}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllFacetContent(): sap.ui.core.Control[];
          /**
           * Removes all the controls from the aggregation {@link #getFacets facets}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllFacets(): sap.suite.ui.commons.FacetOverview[];
          /**
           * Removes all the controls from the aggregation {@link #getKpis kpis}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllKpis(): sap.suite.ui.commons.KpiTile[];
          /**
           * Removes all the controls from the aggregation {@link #getPages pages}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllPages(): sap.ui.core.Control[];
          /**
           * @deprecated (since 1.18.2) - Deprecated due to the incorrect work with data binding. Open the popup in
           * the transactionsButtonPress event handler instead.
           *
           * Removes all the controls from the aggregation {@link #getTransactions transactions}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllTransactions(): sap.ui.core.Control[];
          /**
           * Removes a facet from the aggregation {@link #getFacets facets}.
           */
          removeFacet(
            /**
             * The facet to remove or its index or id
             */
            vFacet: number | string | sap.suite.ui.commons.FacetOverview
          ): sap.suite.ui.commons.FacetOverview;
          /**
           * Removes a facetContent from the aggregation {@link #getFacetContent facetContent}.
           */
          removeFacetContent(
            /**
             * The facetContent to remove or its index or id
             */
            vFacetContent: number | string | sap.ui.core.Control
          ): sap.ui.core.Control;
          /**
           * Removes a kpi from the aggregation {@link #getKpis kpis}.
           */
          removeKpi(
            /**
             * The kpi to remove or its index or id
             */
            vKpi: number | string | sap.suite.ui.commons.KpiTile
          ): sap.suite.ui.commons.KpiTile;
          /**
           * Removes a page from the aggregation {@link #getPages pages}.
           */
          removePage(
            /**
             * The page to remove or its index or id
             */
            vPage: number | string | sap.ui.core.Control
          ): sap.ui.core.Control;
          /**
           * @deprecated (since 1.18.2) - Deprecated due to the incorrect work with data binding. Open the popup in
           * the transactionsButtonPress event handler instead.
           *
           * Removes a transaction from the aggregation {@link #getTransactions transactions}.
           */
          removeTransaction(
            /**
             * The transaction to remove or its index or id
             */
            vTransaction: number | string | sap.ui.core.Control
          ): sap.ui.core.Control;
          /**
           * Sets a new value for property {@link #getActionsVisible actionsVisible}.
           *
           * If set to true, the Actions button appears.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setActionsVisible(
            /**
             * New value for property `actionsVisible`
             */
            bActionsVisible: boolean
          ): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * Sets a new value for property {@link #getConfigurationVisible configurationVisible}.
           *
           * If set to true, the Configuration button appears.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setConfigurationVisible(
            /**
             * New value for property `configurationVisible`
             */
            bConfigurationVisible: boolean
          ): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * Sets a new value for property {@link #getDescription description}.
           *
           * The description of the thing.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setDescription(
            /**
             * New value for property `description`
             */
            sDescription: string
          ): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * Sets a new value for property {@link #getDestroyPageOnBack destroyPageOnBack}.
           *
           * If set to true, destroys a page when the user chooses the Back button to leave this page.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setDestroyPageOnBack(
            /**
             * New value for property `destroyPageOnBack`
             */
            bDestroyPageOnBack: boolean
          ): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * Sets a new value for property {@link #getHeight height}.
           *
           * The height of the control.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `100%`.
           */
          setHeight(
            /**
             * New value for property `height`
             */
            sHeight: sap.ui.core.CSSSize
          ): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * Sets a new value for property {@link #getIcon icon}.
           *
           * The icon to be displayed as a graphical element within the header. This can be an image or an icon from
           * the icon font.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setIcon(
            /**
             * New value for property `icon`
             */
            sIcon: sap.ui.core.URI
          ): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * Sets a new value for property {@link #getName name}.
           *
           * The name of the thing.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setName(
            /**
             * New value for property `name`
             */
            sName: string
          ): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * Sets a new value for property {@link #getTitle title}.
           *
           * The title of the thing.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setTitle(
            /**
             * New value for property `title`
             */
            sTitle: string
          ): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * Sets a new value for property {@link #getTransactionsVisible transactionsVisible}.
           *
           * If set to true, the Transaction button appears.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setTransactionsVisible(
            /**
             * New value for property `transactionsVisible`
             */
            bTransactionsVisible: boolean
          ): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:actionsButtonPress actionsButtonPress} event
           * of this `sap.suite.ui.commons.UnifiedThingInspector`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.UnifiedThingInspector` itself.
           *
           * The event is fired when the user chooses the Actions button.
           */
          attachActionsButtonPress(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.UnifiedThingInspector`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:afterNavigate afterNavigate} event of this `sap.suite.ui.commons.UnifiedThingInspector`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.UnifiedThingInspector` itself.
           *
           * The event is fired when navigation between two pages has completed. In case of animated transitions this
           * event is fired with some delay after the "navigate" event. This event is propogated from the inner NavContainer.
           * The event can also return internal Master and Detail pages.
           */
          attachAfterNavigate(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.UnifiedThingInspector`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:backAction backAction} event of this `sap.suite.ui.commons.UnifiedThingInspector`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.UnifiedThingInspector` itself.
           *
           * The event is fired when the user chooses the Back button.
           */
          attachBackAction(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.UnifiedThingInspector`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:configurationButtonPress configurationButtonPress}
           * event of this `sap.suite.ui.commons.UnifiedThingInspector`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.UnifiedThingInspector` itself.
           *
           * The event is fired when the user chooses the Configuration button.
           */
          attachConfigurationButtonPress(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.UnifiedThingInspector`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:navigate navigate} event of this `sap.suite.ui.commons.UnifiedThingInspector`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.UnifiedThingInspector` itself.
           *
           * The event is fired when navigation between two pages has been triggered. The transition (if any) to the
           * new page has not started yet. This event can be aborted by the application with preventDefault(), which
           * means that there will be no navigation. This event is propogated from the inner NavContainer. The event
           * can also return internal Master and Detail pages.
           */
          attachNavigate(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.UnifiedThingInspector`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.UnifiedThingInspector;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:transactionsButtonPress transactionsButtonPress}
           * event of this `sap.suite.ui.commons.UnifiedThingInspector`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.UnifiedThingInspector` itself.
           *
           * The event is fired when the user chooses the Transactions button.
           */
          attachTransactionsButtonPress(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.UnifiedThingInspector`
             * itself
             */
            oListener?: object
          ): sap.suite.ui.commons.UnifiedThingInspector;
        }
        /**
         * @deprecated (since 1.32) - Deprecated. sap.uxap.ObjectPageLayout should be used instead.
         *
         * This control extends the sap.ui.ux3.NavigationBar and allows you to display navigation items vertically.
         * The navigation list can contain sap.ui.ux3.NavigationItem or sap.suite.ui.commons.CountingNavigationItem
         * controls.
         */
        class VerticalNavigationBar extends sap.ui.ux3.NavigationBar {
          /**
           * Constructor for a new VerticalNavigationBar.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: VerticalNavigationBarOpts
          );

          /**
           * Creates a new subclass of class sap.suite.ui.commons.VerticalNavigationBar with name `sClassName` and
           * enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.ux3.NavigationBar.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.VerticalNavigationBar.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
        }
        /**
         * @deprecated (since 1.32) - Deprecated. Standard Fiori technology should be used.
         *
         * This control extends the sap.ui.commons.RowRepeater control providing an ability to change data representation
         * by switching between a number of views. The data can be displayed not only in rows but also in tiles
         * that are adjusted to fill the entire horizontal space in a row.
         */
        class ViewRepeater extends sap.ui.commons.RowRepeater {
          /**
           * Constructor for a new ViewRepeater.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: ViewRepeaterOpts
          );

          /**
           * Adds some view to the aggregation {@link #getViews views}.
           */
          addView(
            /**
             * The view to add; if empty, nothing is inserted
             */
            oView: sap.suite.ui.commons.RepeaterViewConfiguration
          ): sap.suite.ui.commons.ViewRepeater;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:changeView changeView} event of this `sap.suite.ui.commons.ViewRepeater`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.ViewRepeater` itself.
           *
           * This event is fired when a user switches between views.
           */
          attachChangeView(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ViewRepeater` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.ViewRepeater;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:search search} event of this `sap.suite.ui.commons.ViewRepeater`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.ViewRepeater` itself.
           *
           * This event is fired when the user performs a search.
           */
          attachSearch(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ViewRepeater` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.ViewRepeater;
          /**
           * Destroys all the views in the aggregation {@link #getViews views}.
           */
          destroyViews(): sap.suite.ui.commons.ViewRepeater;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:changeView changeView} event of this `sap.suite.ui.commons.ViewRepeater`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachChangeView(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.ViewRepeater;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:search search} event of this `sap.suite.ui.commons.ViewRepeater`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachSearch(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.suite.ui.commons.ViewRepeater;
          /**
           * Creates a new subclass of class sap.suite.ui.commons.ViewRepeater with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.commons.RowRepeater.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:changeView changeView} to attached listeners.
           */
          fireChangeView(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * Contains an index of the previous view in the Views aggregation.
               */
              oldViewIndex?: number;
              /**
               * Contains an index of the new view in the Views aggregation.
               */
              newViewIndex?: number;
              /**
               * Contains an ID of the filter in the Filters aggregation.
               */
              filterId?: string;
              /**
               * Contains an ID of the sorter in the Sorters aggregation.
               */
              sorterId?: string;
              /**
               * Contains a page number.
               */
              page?: number;
            }
          ): sap.suite.ui.commons.ViewRepeater;
          /**
           * Fires event {@link #event:search search} to attached listeners.
           */
          fireSearch(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * The search query.
               */
              query?: string;
            }
          ): sap.suite.ui.commons.ViewRepeater;
          /**
           * Gets current value of property {@link #getDefaultViewIndex defaultViewIndex}.
           *
           * The index of the default view starting from 0. The view is selected on the initial rendering of the control.
           * If the index is greater than the total quantity of the views, the last view is selected.
           *
           * Default value is `0`.
           */
          getDefaultViewIndex(): number;
          /**
           * Gets current value of property {@link #getExternal external}.
           *
           * Indicates if the external representation of the current view is rendered.
           *
           * Default value is `false`.
           */
          getExternal(): boolean;
          /**
           * ID of the element which is the current target of the association {@link #getExternalRepresentation externalRepresentation},
           * or `null`.
           */
          getExternalRepresentation(): sap.ui.core.ID;
          /**
           * Gets current value of property {@link #getHeight height}.
           *
           * The height of the control. Only applicable if the responsive property is set to true.
           *
           * Default value is `100%`.
           */
          getHeight(): sap.ui.core.CSSSize;
          /**
           * Gets current value of property {@link #getItemHeight itemHeight}.
           *
           * The height of the tile in the current view in pixels. Only applicable if the responsive property is set
           * to true. This value is used for calculating the number of tile rows.
           */
          getItemHeight(): number;
          /**
           * Gets current value of property {@link #getItemMinWidth itemMinWidth}.
           *
           * The minimal width of the tile for the current view. Only applicable if "responsive" property is set to
           * true.
           */
          getItemMinWidth(): number;
          /**
           * Returns a metadata object for class sap.suite.ui.commons.ViewRepeater.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getResponsive responsive}.
           *
           * This parameter indicates whether the content is shown in rows or tiles. If false, the content is shown
           * in rows just like in core sap.ui.commons.RowRepeater. If true, the content is shown in tiles (similar
           * to sap.ui.ux3.DataSet control) that have minimal width defined by the "itemMinWidth" property. The number
           * of columns depends on the parent control's width. If you resize the control, the number of columns may
           * change respectively so that the content tiles can fill the entire space of a row.
           *
           * Default value is `false`.
           */
          getResponsive(): boolean;
          /**
           * Gets current value of property {@link #getShowSearchField showSearchField}.
           *
           * Indicates if the search field panel is shown.
           *
           * Default value is `true`.
           */
          getShowSearchField(): boolean;
          /**
           * Gets current value of property {@link #getShowViews showViews}.
           *
           * Indicates if the view selector panel is shown.
           *
           * Default value is `true`.
           */
          getShowViews(): boolean;
          /**
           * Gets content of aggregation {@link #getViews views}.
           *
           * The list of views for the data representation.
           */
          getViews(): sap.suite.ui.commons.RepeaterViewConfiguration[];
          /**
           * Checks for the provided `sap.suite.ui.commons.RepeaterViewConfiguration` in the aggregation {@link #getViews
           * views}. and returns its index if found or -1 otherwise.
           */
          indexOfView(
            /**
             * The view whose index is looked for
             */
            oView: sap.suite.ui.commons.RepeaterViewConfiguration
          ): number;
          /**
           * Inserts a view into the aggregation {@link #getViews views}.
           */
          insertView(
            /**
             * The view to insert; if empty, nothing is inserted
             */
            oView: sap.suite.ui.commons.RepeaterViewConfiguration,
            /**
             * The `0`-based index the view should be inserted at; for a negative value of `iIndex`, the view is inserted
             * at position 0; for a value greater than the current size of the aggregation, the view is inserted at
             * the last position
             */
            iIndex: number
          ): sap.suite.ui.commons.ViewRepeater;
          /**
           * Removes all the controls from the aggregation {@link #getViews views}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllViews(): sap.suite.ui.commons.RepeaterViewConfiguration[];
          /**
           * Removes a view from the aggregation {@link #getViews views}.
           */
          removeView(
            /**
             * The view to remove or its index or id
             */
            vView:
              | number
              | string
              | sap.suite.ui.commons.RepeaterViewConfiguration
          ): sap.suite.ui.commons.RepeaterViewConfiguration;
          /**
           * Sets a new value for property {@link #getDefaultViewIndex defaultViewIndex}.
           *
           * The index of the default view starting from 0. The view is selected on the initial rendering of the control.
           * If the index is greater than the total quantity of the views, the last view is selected.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `0`.
           */
          setDefaultViewIndex(
            /**
             * New value for property `defaultViewIndex`
             */
            iDefaultViewIndex: number
          ): sap.suite.ui.commons.ViewRepeater;
          /**
           * Sets a new value for property {@link #getExternal external}.
           *
           * Indicates if the external representation of the current view is rendered.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setExternal(
            /**
             * New value for property `external`
             */
            bExternal: boolean
          ): sap.suite.ui.commons.ViewRepeater;
          /**
           * Sets the associated {@link #getExternalRepresentation externalRepresentation}.
           */
          setExternalRepresentation(
            /**
             * ID of an element which becomes the new target of this externalRepresentation association; alternatively,
             * an element instance may be given
             */
            oExternalRepresentation: sap.ui.core.ID | sap.ui.core.Control
          ): sap.suite.ui.commons.ViewRepeater;
          /**
           * Sets a new value for property {@link #getHeight height}.
           *
           * The height of the control. Only applicable if the responsive property is set to true.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `100%`.
           */
          setHeight(
            /**
             * New value for property `height`
             */
            sHeight: sap.ui.core.CSSSize
          ): sap.suite.ui.commons.ViewRepeater;
          /**
           * Sets a new value for property {@link #getItemHeight itemHeight}.
           *
           * The height of the tile in the current view in pixels. Only applicable if the responsive property is set
           * to true. This value is used for calculating the number of tile rows.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setItemHeight(
            /**
             * New value for property `itemHeight`
             */
            iItemHeight: number
          ): sap.suite.ui.commons.ViewRepeater;
          /**
           * Sets a new value for property {@link #getItemMinWidth itemMinWidth}.
           *
           * The minimal width of the tile for the current view. Only applicable if "responsive" property is set to
           * true.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setItemMinWidth(
            /**
             * New value for property `itemMinWidth`
             */
            iItemMinWidth: number
          ): sap.suite.ui.commons.ViewRepeater;
          /**
           * Sets a new value for property {@link #getResponsive responsive}.
           *
           * This parameter indicates whether the content is shown in rows or tiles. If false, the content is shown
           * in rows just like in core sap.ui.commons.RowRepeater. If true, the content is shown in tiles (similar
           * to sap.ui.ux3.DataSet control) that have minimal width defined by the "itemMinWidth" property. The number
           * of columns depends on the parent control's width. If you resize the control, the number of columns may
           * change respectively so that the content tiles can fill the entire space of a row.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setResponsive(
            /**
             * New value for property `responsive`
             */
            bResponsive: boolean
          ): sap.suite.ui.commons.ViewRepeater;
          /**
           * Sets a new value for property {@link #getShowSearchField showSearchField}.
           *
           * Indicates if the search field panel is shown.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setShowSearchField(
            /**
             * New value for property `showSearchField`
             */
            bShowSearchField: boolean
          ): sap.suite.ui.commons.ViewRepeater;
          /**
           * Sets a new value for property {@link #getShowViews showViews}.
           *
           * Indicates if the view selector panel is shown.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setShowViews(
            /**
             * New value for property `showViews`
             */
            bShowViews: boolean
          ): sap.suite.ui.commons.ViewRepeater;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:changeView changeView} event of this `sap.suite.ui.commons.ViewRepeater`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.ViewRepeater` itself.
           *
           * This event is fired when a user switches between views.
           */
          attachChangeView(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ViewRepeater` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.ViewRepeater;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:search search} event of this `sap.suite.ui.commons.ViewRepeater`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.suite.ui.commons.ViewRepeater` itself.
           *
           * This event is fired when the user performs a search.
           */
          attachSearch(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.suite.ui.commons.ViewRepeater` itself
             */
            oListener?: object
          ): sap.suite.ui.commons.ViewRepeater;
        }
        /**
         * @deprecated (since 1.34) - Deprecated. sap.suite.ui.microchart.BulletMicroChartModeType should be used.
         *
         * Enumeration of possible BulletChart display modes.
         */
        enum BulletChartMode {
          /**
           * Displays the Actual value.
           */
          Actual,
          /**
           * Displays delta between the Actual and Threshold values.
           */
          Delta
        }
        /**
         * Comparison operators supported by the calculation builder.
         */
        enum CalculationBuilderComparisonOperatorType {
          /**
           * Not equal to.
           */
          "!=",
          /**
           * Less than.
           */
          "<",
          /**
           * Less than or equal to.
           */
          "<=",
          /**
           * Equal to.
           */
          "=",
          /**
           * Greater than.
           */
          ">",
          /**
           * Greater than or equal to.
           */
          ">="
        }
        /**
         * Functions supported by the calculation builder.
         *  To add a custom function, use {@link sap.suite.ui.commons.CalculationBuilderFunction}.
         */
        enum CalculationBuilderFunctionType {
          /**
           * ABS.
           */
          ABS,
          /**
           * Case.
           */
          Case,
          /**
           * NDIV0.
           */
          NDIV0,
          /**
           * NODIM.
           */
          NODIM,
          /**
           * Round.
           */
          Round,
          /**
           * Round Down.
           */
          RoundDown,
          /**
           * Round Up.
           */
          RoundUp,
          /**
           * SQRT.
           */
          SQRT,
          /**
           * SUMCT.
           */
          SUMCT,
          /**
           * SUMGT.
           */
          SUMGT,
          /**
           * SUMRT.
           */
          SUMRT
        }
        /**
         * The types of items (operands) that can be used in a calculation builder expression.
         */
        enum CalculationBuilderItemType {
          /**
           * Constant.
           */
          Constant,
          /**
           * Custom Function.
           *  Custom functions can be defined using {@link sap.suite.ui.commons.CalculationBuilderFunction}.
           */
          CustomFunction,
          /**
           * Custom arithmetic operator defined by the application.
           * Custom operators are not validated by the {@link sap.suite.ui.commons.CalculationBuilder} control.
           */
          CustomOperator,
          /**
           * Function.
           *  Default functions are defined by {@link sap.suite.ui.commons.CalculationBuilderFunctionType}.
           */
          Function,
          /**
           * Operator.
           */
          Operator,
          /**
           * Variable.
           */
          Variable
        }
        /**
         * Layout of the calculation builder.
         */
        enum CalculationBuilderLayoutType {
          /**
           * Both the visual and text editors are displayed.
           */
          Default,
          /**
           * Only the text editor is displayed.
           */
          TextualOnly,
          /**
           * Only the visual editor is displayed.
           */
          VisualOnly,
          /**
           * Both the visual and text editors are displayed, but the text editor is read-only.
           */
          VisualTextualReadOnly
        }
        /**
         * Logical operators supported by the calculation builder.
         */
        enum CalculationBuilderLogicalOperatorType {
          /**
           * Logical conjunction.
           */
          AND,
          /**
           * Negation.
           */
          NOT,
          /**
           * Logical disjunction.
           */
          OR,
          /**
           * Exclusive disjunction.
           */
          XOR
        }
        /**
         * Arithmetic operators supported by the calculation builder.
         */
        enum CalculationBuilderOperatorType {
          /**
           * Left bracket.
           */
          "(",
          /**
           * Right bracket.
           */
          ")",
          /**
           * Multiplication.
           */
          "*",
          /**
           * Addition.
           */
          "+",
          /**
           * Comma.
           */
          ",",
          /**
           * Subtraction.
           */
          "-",
          /**
           * Division.
           */
          "/"
        }
        /**
         * Types of expression validation that define when the expression entered into the {@link sap.suite.ui.commons.CalculationBuilder}
         * is validated.
         */
        enum CalculationBuilderValidationMode {}
        /**
         * @deprecated (since 1.34) - Deprecated. Moved to sapui5.runtime.
         *
         * Enumeration of possible theme specific background colors.
         */
        enum CommonBackground {
          /**
           * Dark background color.
           */
          Dark,
          /**
           * The darkest background color.
           */
          Darkest,
          /**
           * Extra dark background color.
           */
          ExtraDark,
          /**
           * Extra light background color.
           */
          ExtraLight,
          /**
           * Light background color.
           */
          Light,
          /**
           * The lightest background color.
           */
          Lightest,
          /**
           * Medium background color.
           */
          Medium,
          /**
           * Medium light background color.
           */
          MediumLight
        }
        /**
         * @deprecated (since 1.34) - Deprecated. sap.suite.ui.microchart.ComparisonMicroChartViewType should be
         * used.
         *
         * The view of the ComparisonChart.
         */
        enum ComparisonChartView {
          /**
           * Titles and values are displayed above the bars.
           */
          Normal,
          /**
           * Titles and values are displayed in the same line with the bars.
           */
          Wide
        }
        /**
         * @deprecated (since 1.34) - Deprecated. Moved to sapui5.runtime.
         *
         * The marker for the deviation trend.
         */
        enum DeviationIndicator {
          /**
           * The actual value is less than the target value.
           */
          Down,
          /**
           * No value.
           */
          None,
          /**
           * The actual value is more than the target value.
           */
          Up
        }
        /**
         * @deprecated (since 1.32) - Deprecated. Object page should be used instead.
         *
         * Enumeration of possible FacetOverview height settings.
         */
        enum FacetOverviewHeight {
          /**
           * Content based height
           */
          Auto,
          /**
           * Large height
           */
          L,
          /**
           * Medium height
           */
          M,
          /**
           * No value. The height of the control is defined by depricated height property.
           */
          None,
          /**
           * Small height
           */
          S,
          /**
           * Extra Large height
           */
          XL,
          /**
           * Extra small height
           */
          XS,
          /**
           * Extra extra large height
           */
          XXL
        }
        /**
         * @deprecated (since 1.34) - Deprecated. Moved to openUI5.
         *
         * Enumeration of possible frame types.
         */
        enum FrameType {
          /**
           * The Auto frame type that adjusts the size of the control to the content.
           */
          Auto,
          /**
           * The 1x1 frame type.
           */
          OneByOne,
          /**
           * The 2x1 frame type.
           */
          TwoByOne,
          /**
           * The 2/3 frame type.
           */
          TwoThirds
        }
        /**
         * @deprecated (since 1.48) - This control is deprecated since 1.48. Please use the equivalent sap.ui.core.Orientation.
         *
         * The list of possible HeaderContainer views.
         */
        enum HeaderContainerView {
          /**
           * The horizontal orientation of the control.
           */
          Horizontal,
          /**
           * The vertical orientation of the control.
           */
          Vertical
        }
        /**
         * Action buttons for the {@link sap.suite.ui.commons.imageeditor.ImageEditorContainer}.
         */
        enum ImageEditorContainerButton {
          /**
           * Crop button.
           */
          Crop,
          /**
           * Filter button.
           */
          Filter,
          /**
           * Transform button.
           */
          Transform
        }
        /**
         * Mode types for {@link sap.suite.ui.commons.imageeditor.ImageEditorContainer}.
         */
        enum ImageEditorContainerMode {
          /**
           * Mode with rectangular and circular/oval crop options.
           */
          Crop,
          /**
           * Mode with filter options, including grayscale, sepia, brightness, contrast, saturation, and some other.
           */
          Filter,
          /**
           * Mode with resize, rotate, and flip options.
           */
          Transform
        }
        /**
         * Mode types for {@link sap.suite.ui.commons.imageeditor.ImageEditor}.
         */
        enum ImageEditorMode {
          /**
           * Image editor mode with custom shape crop area.
           */
          CropCustomShape,
          /**
           * Image editor mode with ellipse crop area.
           */
          CropEllipse,
          /**
           * Image editor mode with rectangle crop area.
           */
          CropRectangle,
          /**
           * Image editor mode that shows just the source image.
           * This mode is used by default.
           */
          Default,
          /**
           * Image editor mode with resize handlers.
           */
          Resize
        }
        /**
         * Image file format.
         */
        enum ImageFormat {
          /**
           * JPEG file format.
           */
          Jpeg,
          /**
           * PNG file format.
           */
          Png
        }
        /**
         * @deprecated (since 1.34) - Deprecated. sap.m.InfoTileSize should be used.
         *
         * Enumeration of possible PointTile size settings.
         */
        enum InfoTileSize {
          /**
           * The size of the tile depends on the device it is running on. It is large on desktop, medium on tablet
           * and small on phone.
           */
          Auto,
          /**
           * Large size.
           */
          L,
          /**
           * Medium size.
           */
          M,
          /**
           * Small size.
           */
          S,
          /**
           * Extra small size.
           */
          XS
        }
        /**
         * @deprecated (since 1.34) - Deprecated. sap.m.InfoTileTextColor should be used.
         *
         * Enumeration of possible InfoTile text color settings.
         */
        enum InfoTileTextColor {
          /**
           * Critical InfoTile text color.
           */
          Critical,
          /**
           * Negative InfoTile text color.
           */
          Negative,
          /**
           * Positive InfoTile text color.
           */
          Positive
        }
        /**
         * @deprecated (since 1.34) - Deprecated. sap.m.InfoTileValueColor should be used.
         *
         * Enumeration of possible InfoTile value color settings.
         */
        enum InfoTileValueColor {
          /**
           * Critical InfoTile value color.
           */
          Critical,
          /**
           * Error InfoTile value color.
           */
          Error,
          /**
           * Good InfoTile value color.
           */
          Good,
          /**
           * Neutral InfoTile value color.
           */
          Neutral
        }
        /**
         * @deprecated (since 1.34) - Deprecated. sap.m.LoadState should be used.
         *
         * Enumeration of possible load states for LoadableView.
         */
        enum LoadState {
          /**
           * LoadableView disabled to load the control.
           */
          Disabled,
          /**
           * LoadableView failed to load the control.
           */
          Failed,
          /**
           * LoadableView has loaded the control.
           */
          Loaded,
          /**
           * LoadableView is loading the control.
           */
          Loading
        }
        /**
         * @deprecated (since 1.34) - Deprecated. sap.suite.ui.microchart.AreaMicroChartViewType should be used.
         *
         * The list of possible MicroAreaChart views.
         */
        enum MicroAreaChartView {
          /**
           * The view with labels on the top and bottom.
           */
          Normal,
          /**
           * The view with labels on the left and right.
           */
          Wide
        }
        /**
         * Options that define how the micro process flow should be rendered inside its parent container.
         * These options can be useful when the width of the parent container does not allow for all nodes in the
         * micro process flow to be displayed on the same line.
         */
        enum MicroProcessFlowRenderType {
          /**
           * The micro process flow nodes are not wrapped inside the parent container.
           * The nodes that do not fit into the width of the parent container are not displayed.
           */
          NoWrap,
          /**
           * Two scrolling icons are added to the parent container, which allows navigation by scrolling through the
           * micro process flow.
           * Please note that the numbers displayed next to the scrolling icons are not recalculated dynamically when
           * you resize the browser window. If you want them to be recalculated, consider using the `ScrollingWithResizer`
           * render type instead.
           */
          Scrolling,
          /**
           * Two scrolling icons are added to the parent container, with the number indicators updated automatically
           * when you resize the browser window.
           * This option allows scrolling through the micro process flow, just as the `Scrolling` option does, but
           * may slightly affect the performance. If using this render type affects your application's performance,
           * consider using the `Scrolling` render type instead.
           */
          ScrollingWithResizer,
          /**
           * The micro process flow nodes are wrapped inside the parent container.
           */
          Wrap
        }
        /**
         * Describes the state of a connection label.
         */
        enum ProcessFlowConnectionLabelState {
          /**
           * Critical connection label.
           */
          Critical,
          /**
           * Negative connection label.
           */
          Negative,
          /**
           * Neutral connection label.
           */
          Neutral,
          /**
           * Positive connection label.
           */
          Positive
        }
        /**
         * Describes the state of a connection.
         */
        enum ProcessFlowConnectionState {
          /**
           * Dimmed connection.
           */
          Dimmed,
          /**
           * Highlighted connection.
           */
          Highlighted,
          /**
           * Regular connection.
           */
          Regular,
          /**
           * Selected connection.
           */
          Selected
        }
        /**
         * Describes the type of a connection.
         */
        enum ProcessFlowConnectionType {
          /**
           * Normal connection.
           */
          Normal,
          /**
           * Planned connection.
           */
          Planned
        }
        /**
         * The ProcessFlow calculates the ProcessFlowDisplayState based on the 'focused' and 'highlighted' properties
         * of each node.
         */
        enum ProcessFlowDisplayState {
          /**
           * The control is in the dimmed state
           */
          Dimmed,
          /**
           * The control is in the combination of dimmed and focused display state
           */
          DimmedFocused,
          /**
           * The control is in highlighted display state
           */
          Highlighted,
          /**
           * The control is in the combination of highlighted and focused display state
           */
          HighlightedFocused,
          /**
           * The control is in the regular display state
           */
          Regular,
          /**
           * The control is in the combination of regular and focused display state
           */
          RegularFocused,
          /**
           * The control is in the selected display state
           */
          Selected,
          /**
           * The control is in the combination of selected and focused display state
           */
          SelectedFocused,
          /**
           * The control is in the combination of selected and highlighted display state
           */
          SelectedHighlighted,
          /**
           * The control is in the combination of selected, highlighted and focused display state
           */
          SelectedHighlightedFocused
        }
        /**
         * This type is used in the 'state' property of the ProcessFlowLaneHeader. For example, app developers can
         * set the status of the lane header if lanes are displayed without documents. If the complete process flow
         * is displayed (that is, if the lane header is displayed with documents underneath), the given state values
         * of the lane header are ignored and will be calculated in the ProcessFlow according to the current state
         * of the documents.
         */
        enum ProcessFlowLaneState {
          /**
           * The 'state' property is associated with the given value. Possible states are: positive, negative, neutral,
           * and planned.
           */
          state,
          /**
           * In the 'state' array, the total amount of values needs to be 100%.
           */
          value
        }
        /**
         * Describes the state connected to the content it is representing in the Process Flow Node. The state is
         * also displayed in the Process Flow Lane Header as a color segment of the donut.
         */
        enum ProcessFlowNodeState {
          /**
           * @SINCE 1.42.0
           *
           * Critical status for a created document: with this document, a critical issue occurred, for example, the
           * business process can be interrupted.
           */
          Critical,
          /**
           * Negative status for a created document: with this document, an issue occurred.
           */
          Negative,
          /**
           * Neutral status for a created document: the document is in progress.
           */
          Neutral,
          /**
           * Planned status for a document: the document is planned to be started.
           */
          Planned,
          /**
           * Planned, but negative status for a document: the planned document has an issue but has not yet been started.
           */
          PlannedNegative,
          /**
           * Positive status for a created document: the document is done, finished, solved.
           */
          Positive
        }
        /**
         * Describes the type of a node. The type value could be single or aggregated. With this type, the application
         * can define if several nodes should be displayed as one aggregated node in a path per column to represent
         * a grouping of semantically equal nodes.
         */
        enum ProcessFlowNodeType {
          /**
           * Aggregated node - several nodes are illustrated as a stack of nodes in the same path and in one column.
           */
          Aggregated,
          /**
           * Single node - one node is illustrated in a column.
           */
          Single
        }
        /**
         * The zoom level defines level of details for the node and how much space the process flow requires.
         */
        enum ProcessFlowZoomLevel {
          /**
           * Zoom level for least details - only icon is displayed.
           */
          Four,
          /**
           * The full details with normal font size.
           */
          One,
          /**
           * The details are the icon, title text and no additional texts.
           */
          Three,
          /**
           * The full detail view of the node but with smaller font size.
           */
          Two
        }
        /**
         * @deprecated (since 1.48) - This Enumeration is deprecated as it is not used anywhere.
         *
         * SelectionState
         */
        enum SelectionState {
          /**
           * Not Selected
           */
          NotSelected,
          /**
           * Selected
           */
          Selected,
          /**
           * Semantic
           */
          Semantic
        }
        /**
         * @deprecated (since 1.32) - Deprecated. Object page should be used instead.
         *
         * Defines the way how UnifiedThingGroup control is rendered.
         */
        enum ThingGroupDesign {
          /**
           * In this design there is indentation between header and content of the group.
           */
          TopIndent,
          /**
           * In this design there is no indentation between header and content of the group.
           */
          ZeroIndent
        }
        /**
         * The alignment of timeline posts relative to the timeline axis.
         */
        enum TimelineAlignment {
          /**
           * Entries are displayed below the timeline axis.
           *  In a vertical timeline, entries are displayed to the right of the timeline axis. Synonym for Right.
           */
          Bottom,
          /**
           * Entries are displayed to the left of the timeline axis.
           *  In a horizontal timeline, entries are displayed above the timeline axis. Synonym for Top.
           */
          Left,
          /**
           * Entries are displayed to the right of the timeline axis.
           *  In a horizontal timeline, entries are displayed below the timeline axis. Synonym for Bottom.
           */
          Right,
          /**
           * Entries are displayed above the timeline axis.
           *  In a vertical timeline, entries are displayed to the left of the timeline axis. Synonym for Left.
           */
          Top
        }
        /**
         * Defines the orientation of the timeline axis.
         */
        enum TimelineAxisOrientation {
          /**
           * Horizontal timeline.
           */
          Horizontal,
          /**
           * Vertical timeline.
           */
          Vertical
        }
        /**
         * Filter type for the timeline.
         */
        enum TimelineFilterType {
          /**
           * Items filter based on data, defined by the {@link sap.suite.ui.commons.TimelineItem#getFilterValue filterValue}
           * property or by a custom value.
           */
          Data,
          /**
           * Search results filter.
           */
          Search,
          /**
           * Time range filter, defined by the start date (`from`) and end date (`to`) of the time range.
           */
          Time
        }
        /**
         * Type of grouping for timeline entries.
         */
        enum TimelineGroupType {
          /**
           * Data is grouped by day.
           */
          Day,
          /**
           * Data is grouped by month.
           */
          Month,
          /**
           * No grouping is used.
           */
          None,
          /**
           * Data is grouped by quarter.
           */
          Quarter,
          /**
           * Data is grouped by week.
           */
          Week,
          /**
           * Data is grouped by year.
           */
          Year
        }
        /**
         * @deprecated (since 1.54.0) - Not Fiori.
         *
         * Type of the fadeout effect applied to the upper and lower margins of the visible timeline area.
         */
        enum TimelineScrollingFadeout {
          /**
           * Timeline fades into the lower and upper margins of the visible area, but no scroll buttons are displayed.
           */
          Area,
          /**
           * Timeline fades into the lower and upper margins of the visible area, and scroll buttons are displayed.
           */
          AreaWithButtons,
          /**
           * Timeline does not fade out.
           */
          None
        }
        /**
         * @deprecated (since 1.32) - Deprecated. Numeric content or any other standard Fiori control should be
         * used instead.
         *
         * Marker for the key value status.
         */
        enum ValueStatus {
          /**
           * Bad value.
           */
          Bad,
          /**
           * Critical value.
           */
          Critical,
          /**
           * Good value.
           */
          Good,
          /**
           * Positive value.
           */
          Neutral
        }
      }
    }
  }

  interface IUI5DefineDependencyNames {
    "sap/suite/ui/commons/imageeditor/CropCustomShapeHistoryItem": undefined;

    "sap/suite/ui/commons/imageeditor/CropEllipseHistoryItem": undefined;

    "sap/suite/ui/commons/imageeditor/CropRectangleHistoryItem": undefined;

    "sap/suite/ui/commons/imageeditor/CustomSizeItem": undefined;

    "sap/suite/ui/commons/imageeditor/FilterHistoryItem": undefined;

    "sap/suite/ui/commons/imageeditor/FlipHistoryItem": undefined;

    "sap/suite/ui/commons/imageeditor/HistoryItem": undefined;

    "sap/suite/ui/commons/imageeditor/ImageEditor": undefined;

    "sap/suite/ui/commons/imageeditor/ImageEditorContainer": undefined;

    "sap/suite/ui/commons/imageeditor/ImageEditorResponsiveContainer": undefined;

    "sap/suite/ui/commons/imageeditor/ResizeHistoryItem": undefined;

    "sap/suite/ui/commons/imageeditor/RotateHistoryItem": undefined;

    "sap/suite/ui/commons/networkgraph/layout/ForceBasedLayout": undefined;

    "sap/suite/ui/commons/networkgraph/layout/ForceDirectedLayout": undefined;

    "sap/suite/ui/commons/networkgraph/layout/LayeredLayout": undefined;

    "sap/suite/ui/commons/networkgraph/layout/LayoutAlgorithm": undefined;

    "sap/suite/ui/commons/networkgraph/layout/LayoutTask": undefined;

    "sap/suite/ui/commons/networkgraph/layout/NoopLayout": undefined;

    "sap/suite/ui/commons/networkgraph/layout/SwimLaneChainLayout": undefined;

    "sap/suite/ui/commons/networkgraph/layout/TwoColumnsLayout": undefined;

    "sap/suite/ui/commons/networkgraph/util/Dijkstra": undefined;

    "sap/suite/ui/commons/networkgraph/ActionButton": undefined;

    "sap/suite/ui/commons/networkgraph/Coordinate": undefined;

    "sap/suite/ui/commons/networkgraph/ElementAttribute": undefined;

    "sap/suite/ui/commons/networkgraph/ElementBase": undefined;

    "sap/suite/ui/commons/networkgraph/Graph": undefined;

    "sap/suite/ui/commons/networkgraph/GraphMap": undefined;

    "sap/suite/ui/commons/networkgraph/Group": undefined;

    "sap/suite/ui/commons/networkgraph/Line": undefined;

    "sap/suite/ui/commons/networkgraph/Node": undefined;

    "sap/suite/ui/commons/networkgraph/NodeImage": undefined;

    "sap/suite/ui/commons/networkgraph/Status": undefined;

    "sap/suite/ui/commons/networkgraph/SvgBase": undefined;

    "sap/suite/ui/commons/statusindicator/Circle": undefined;

    "sap/suite/ui/commons/statusindicator/CustomShape": undefined;

    "sap/suite/ui/commons/statusindicator/DiscreteThreshold": undefined;

    "sap/suite/ui/commons/statusindicator/FillingOption": undefined;

    "sap/suite/ui/commons/statusindicator/LibraryShape": undefined;

    "sap/suite/ui/commons/statusindicator/Path": undefined;

    "sap/suite/ui/commons/statusindicator/PropertyThreshold": undefined;

    "sap/suite/ui/commons/statusindicator/Rectangle": undefined;

    "sap/suite/ui/commons/statusindicator/Shape": undefined;

    "sap/suite/ui/commons/statusindicator/ShapeGroup": undefined;

    "sap/suite/ui/commons/statusindicator/SimpleShape": undefined;

    "sap/suite/ui/commons/statusindicator/StatusIndicator": undefined;

    "sap/suite/ui/commons/taccount/TAccount": undefined;

    "sap/suite/ui/commons/taccount/TAccountGroup": undefined;

    "sap/suite/ui/commons/taccount/TAccountItem": undefined;

    "sap/suite/ui/commons/taccount/TAccountItemProperty": undefined;

    "sap/suite/ui/commons/taccount/TAccountPanel": undefined;

    "sap/suite/ui/commons/util/HtmlElement": undefined;

    "sap/suite/ui/commons/util/HtmlElementRenderer": undefined;

    "sap/suite/ui/commons/util/ManagedObjectRegister": undefined;

    "sap/suite/ui/commons/AriaProperties": undefined;

    "sap/suite/ui/commons/BulletChart": undefined;

    "sap/suite/ui/commons/BulletChartData": undefined;

    "sap/suite/ui/commons/BusinessCard": undefined;

    "sap/suite/ui/commons/CalculationBuilder": undefined;

    "sap/suite/ui/commons/CalculationBuilderFunction": undefined;

    "sap/suite/ui/commons/CalculationBuilderGroup": undefined;

    "sap/suite/ui/commons/CalculationBuilderItem": undefined;

    "sap/suite/ui/commons/CalculationBuilderValidationResult": undefined;

    "sap/suite/ui/commons/CalculationBuilderVariable": undefined;

    "sap/suite/ui/commons/ChartContainer": undefined;

    "sap/suite/ui/commons/ChartContainerContent": undefined;

    "sap/suite/ui/commons/ChartContainerToolbarPlaceholder": undefined;

    "sap/suite/ui/commons/ChartTile": undefined;

    "sap/suite/ui/commons/ColumnData": undefined;

    "sap/suite/ui/commons/ColumnMicroChart": undefined;

    "sap/suite/ui/commons/ColumnMicroChartLabel": undefined;

    "sap/suite/ui/commons/ComparisonChart": undefined;

    "sap/suite/ui/commons/ComparisonData": undefined;

    "sap/suite/ui/commons/DateRangeScroller": undefined;

    "sap/suite/ui/commons/DateRangeSlider": undefined;

    "sap/suite/ui/commons/DateRangeSliderInternal": undefined;

    "sap/suite/ui/commons/DeltaMicroChart": undefined;

    "sap/suite/ui/commons/DynamicContainer": undefined;

    "sap/suite/ui/commons/FacetOverview": undefined;

    "sap/suite/ui/commons/FeedItem": undefined;

    "sap/suite/ui/commons/FeedItemHeader": undefined;

    "sap/suite/ui/commons/FeedTile": undefined;

    "sap/suite/ui/commons/GenericTile": undefined;

    "sap/suite/ui/commons/GenericTile2X2": undefined;

    "sap/suite/ui/commons/HarveyBallMicroChart": undefined;

    "sap/suite/ui/commons/HarveyBallMicroChartItem": undefined;

    "sap/suite/ui/commons/HeaderCell": undefined;

    "sap/suite/ui/commons/HeaderCellItem": undefined;

    "sap/suite/ui/commons/HeaderContainer": undefined;

    "sap/suite/ui/commons/InfoTile": undefined;

    "sap/suite/ui/commons/JamContent": undefined;

    "sap/suite/ui/commons/KpiTile": undefined;

    "sap/suite/ui/commons/LaunchTile": undefined;

    "sap/suite/ui/commons/LinkActionSheet": undefined;

    "sap/suite/ui/commons/MicroAreaChart": undefined;

    "sap/suite/ui/commons/MicroAreaChartItem": undefined;

    "sap/suite/ui/commons/MicroAreaChartLabel": undefined;

    "sap/suite/ui/commons/MicroAreaChartPoint": undefined;

    "sap/suite/ui/commons/MicroProcessFlow": undefined;

    "sap/suite/ui/commons/MicroProcessFlowItem": undefined;

    "sap/suite/ui/commons/MonitoringContent": undefined;

    "sap/suite/ui/commons/MonitoringTile": undefined;

    "sap/suite/ui/commons/NewsContent": undefined;

    "sap/suite/ui/commons/NoteTaker": undefined;

    "sap/suite/ui/commons/NoteTakerCard": undefined;

    "sap/suite/ui/commons/NoteTakerFeeder": undefined;

    "sap/suite/ui/commons/NumericTile": undefined;

    "sap/suite/ui/commons/PictureZoomIn": undefined;

    "sap/suite/ui/commons/ProcessFlow": undefined;

    "sap/suite/ui/commons/ProcessFlowConnection": undefined;

    "sap/suite/ui/commons/ProcessFlowConnectionLabel": undefined;

    "sap/suite/ui/commons/ProcessFlowLaneHeader": undefined;

    "sap/suite/ui/commons/ProcessFlowNode": undefined;

    "sap/suite/ui/commons/RepeaterViewConfiguration": undefined;

    "sap/suite/ui/commons/SplitButton": undefined;

    "sap/suite/ui/commons/TargetFilter": undefined;

    "sap/suite/ui/commons/TargetFilterColumn": undefined;

    "sap/suite/ui/commons/TargetFilterMeasureColumn": undefined;

    "sap/suite/ui/commons/ThingCollection": undefined;

    "sap/suite/ui/commons/ThreePanelThingInspector": undefined;

    "sap/suite/ui/commons/ThreePanelThingViewer": undefined;

    "sap/suite/ui/commons/TileContent": undefined;

    "sap/suite/ui/commons/TileContent2X2": undefined;

    "sap/suite/ui/commons/Timeline": undefined;

    "sap/suite/ui/commons/TimelineFilterListItem": undefined;

    "sap/suite/ui/commons/TimelineItem": undefined;

    "sap/suite/ui/commons/TimelineNavigator": undefined;

    "sap/suite/ui/commons/UnifiedThingGroup": undefined;

    "sap/suite/ui/commons/UnifiedThingInspector": undefined;

    "sap/suite/ui/commons/VerticalNavigationBar": undefined;

    "sap/suite/ui/commons/ViewRepeater": undefined;
  }
}
