// For Library Version: 1.71.2

declare namespace sap {
  namespace ui {
    /**
     * SAPUI5 library with controls for displaying 3D models.
     */
    namespace vk {
      /**
       * @SINCE 1.50.0
       *
       * Retrieve the {@link sap.ui.vk.Core Core} instance for the current window.
       */
      function getCore(): any;

      namespace dvl {
        interface ViewportOpts extends sap.ui.vk.ViewportBaseOpts {
          /**
           * Enables or disables showing of all hotspots
           */
          showAllHotspots?: boolean;

          /**
           * Color used for highlighting Smart2D hotspots in the ABGR format
           */
          hotspotColorABGR?: number;

          /**
           * Color used for highlighting Smart2D hotspots in the CSS Color format
           */
          hotspotColor?: sap.ui.core.CSSColor;

          /**
           * Viewport background top color in the ABGR format
           */
          backgroundColorTopABGR?: number;

          /**
           * Viewport background bottom color in the ABGR format
           */
          backgroundColorBottomABGR?: number;

          pan?: Function;

          zoom?: Function;

          rotate?: Function;

          /**
           * This event will be fired when the frame rendering has finished.
           */
          frameRenderingFinished?: Function;
        }

        interface ViewStateManagerOpts
          extends sap.ui.vk.ViewStateManagerBaseOpts {}
        /**
         * Provides a simple, lightweight proxy object to a node in a node hierarchy.
         *
         * The objects of this class should not be created directly, and should only be created through the use
         * of the following methods:
         * 	 - {@link sap.ui.vk.NodeHierarchy#enumerateChildren sap.ui.vk.NodeHierarchy.enumerateChildren}
         * 	 - {@link sap.ui.vk.NodeHierarchy#enumerateAncestors sap.ui.vk.NodeHierarchy.enumerateAncestors}
         * 	 - {@link sap.ui.vk.ViewStateManager#enumerateSelection sap.ui.vk.ViewStateManager.enumerateSelection}
         */
        // @ts-ignore - Class 'BaseNodeProxy' incorrectly implements interface 'Poolable'. Type 'BaseNodeProxy' is missing the following properties from type 'Poolable': init, reset
        class BaseNodeProxy extends sap.ui.vk.BaseNodeProxy
          implements sap.ui.base.Poolable {
          /**
           * Constructor for a new BaseNodeProxy. The objects of this class should not be created directly, and should
           * only be created through the use of the following methods:
           * 	 - {@link sap.ui.vk.NodeHierarchy#enumerateChildren sap.ui.vk.NodeHierarchy.enumerateChildren}
           * 	 - {@link sap.ui.vk.NodeHierarchy#enumerateAncestors sap.ui.vk.NodeHierarchy.enumerateAncestors}
           * 	 - {@link sap.ui.vk.ViewStateManager#enumerateSelection sap.ui.vk.ViewStateManager.enumerateSelection}
           */
          constructor();

          /**
           * Creates a new subclass of class sap.ui.vk.dvl.BaseNodeProxy with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.BaseNodeProxy.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Indicates whether the node has child nodes.
           */
          // @ts-ignore
          getHasChildren(): boolean;
          /**
           * Returns a metadata object for class sap.ui.vk.dvl.BaseNodeProxy.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets the name of the node.
           */
          // @ts-ignore
          getName(): string;
          /**
           * Gets the ID of the node.
           */
          // @ts-ignore
          getNodeId(): string;
          /**
           * Gets the metadata of the node.
           */
          // @ts-ignore
          getNodeMetadata(): object;
          /**
           * Gets the reference object of the node.
           */
          // @ts-ignore
          getNodeRef(): string;
          /**
           * Gets the scene reference that this BaseNodeProxy object wraps.
           */
          // @ts-ignore
          getSceneRef(): any;
        }
        /**
         * @SINCE 1.50.0
         *
         * Provides a loader that uses the DVL library to load VDS and VDSL files.
         */
        class ContentManager extends sap.ui.vk.ContentManager {
          /**
           * Constructor for a new ContentManager.
           */
          constructor(
            /**
             * ID for the new ContentManager object. Generated automatically if no ID is given.
             */
            sId?: string,
            /**
             * Initial settings for the new ContentManager object.
             */
            mSettings?: object
          );

          /**
           * @SINCE 1.50.0
           *
           * Collects and destroys unused objects and resources.
           */
          // @ts-ignore
          collectGarbage(): sap.ui.vk.ContentManager;
          /**
           * @SINCE 1.50.0
           *
           * Destroys the content.
           */
          // @ts-ignore
          destroyContent(
            /**
             * The content to destroy.
             */
            content: any
          ): sap.ui.vk.ContentManager;
          /**
           * Creates a new subclass of class sap.ui.vk.dvl.ContentManager with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.ContentManager.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.ui.vk.dvl.ContentManager.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * @SINCE 1.50.0
           *
           * Gets optional Emscripten runtime module settings.
           */
          static getRuntimeSettings(): object;
          /**
           * @SINCE 1.50.0
           *
           * Gets optional WebGL context attributes.
           */
          static getWebGLContextAttributes(): object;
          /**
           * @SINCE 1.50.0
           *
           * Starts downloading and building or updating the content from the content resources.
           *
           * This method is asynchronous.
           */
          // @ts-ignore
          loadContent(
            /**
             * The current content to update. It can be `null` if this is an initial loading call.
             */
            content: any,
            /**
             * The content resources to load or update.
             */
            contentResources: sap.ui.vk.ContentResource[]
          ): sap.ui.vk.ContentManager;
          /**
           * @SINCE 1.50.0
           *
           * Sets optional Emscripten runtime module settings.
           *
           * Emscripten runtime module settings cannot be changed after the Emscripten module is initialized.
           */
          static setRuntimeSettings(
            /**
             * A JSON object with the following properties.
             */
            settings: {
              /**
               * The size of Emscripten module memory in bytes, default value: 512 MB.
               */
              totalMemory?: number;
              /**
               * ID of a textarea DOM element to write the log to.
               */
              logElementId?: string;
              /**
               * ID of a DOM element to write the status messages to.
               */
              statusElementId?: string;
            }
          ): void;
          /**
           * @SINCE 1.50.0
           *
           * Sets optional WebGL context attributes.
           */
          static setWebGLContextAttributes(
            /**
             * A JSON object with the following properties.
             */
            attributes: {
              /**
               * If set to `true`, the context will attempt to perform antialiased rendering if possible.
               */
              antialias?: boolean;
              /**
               * If set to `true`, the context will have an alpha (transparency) channel.
               */
              alpha?: boolean;
              /**
               * If set to `true`, the color channels in the framebuffer will be stored premultiplied by the alpha channel
               * to improve performance. Other {@link https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.2 WebGL
               * context attributes} are also supported. WebGL context attributes cannot be changed after the control
               * is fully initialized.
               */
              premultipliedAlpha?: boolean;
            }
          ): void;
        }
        /**
         * @SINCE 1.32.0
         *
         * Loads the DVL library, wraps it, and makes the wrapper available for the application.
         *
         * Example:
         *
         * ```javascript
         *    var oGraphicsCore = new GraphicsCore();```
         */
        class GraphicsCore extends sap.ui.base.EventProvider {
          /**
           * Constructor for a new GraphicsCore.
           */
          constructor(
            /**
             * The Emscripten runtime settings.
             */
            runtimeSettings: {
              /**
               * The size of Emscripten module memory in bytes.
               */
              totalMemory: number;
              /**
               * The ID of a textarea DOM element to write the log to.
               */
              logElementId: string;
              /**
               * The ID of a DOM element to write the status messages to.
               */
              statusElementId: string;
            },
            /**
             * The WebGL context attributes. See {@link https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.2
             * WebGL context attributes}.
             */
            webGLContextAttributes: object
          );

          /**
           * Builds a scene tree from the hierarchy of content resources. The content resources must be already downloaded.
           */
          buildSceneTree(
            /**
             * The array of content resources to build the scene from.
             */
            contentResources: sap.ui.vk.ContentResource[]
          ): sap.ui.vk.dvl.Scene;
          /**
           * Builds a scene tree from the hierarchy of content resources. The content resources must be already loaded.
           */
          buildSceneTreeAsync(
            /**
             * The array of content resources to build the scene from.
             */
            contentResources: sap.ui.vk.ContentResource[]
          ): any;
          /**
           * Collects and destroys unused objects and resources.
           */
          collectGarbage(): sap.ui.vk.dvl.GraphicsCore;
          /**
           * @deprecated (since 1.50.0)
           *
           * Creates a new ViewStateManager object.
           *
           * GraphicsCore owns the new ViewStateManager object. The object must be destroyed with the {@link #destroyViewStateManager
           * destroyViewStateManager} method;
           */
          createViewStateManager(
            /**
             * The NodeHierarchy object the view state manager is created for.
             */
            nodeHierarchy: sap.ui.vk.NodeHierarchy,
            /**
             * Flag set by the application to decide whether the {sap.ui.vk.ViewStateManager} should track the visibility
             * changes or not.
             */
            shouldTrackVisibilityChanges: boolean
          ): sap.ui.vk.ViewStateManager;
          /**
           * Destroys the scene object.
           */
          destroyScene(
            /**
             * The scene to destroy.
             */
            vkScene: sap.ui.vk.dvl.Scene
          ): sap.ui.vk.dvl.GraphicsCore;
          /**
           * @deprecated (since 1.50.0)
           *
           * Destroys the ViewStateManager object created with the {@link #createViewStateManager createViewStateManager}
           * method.
           */
          destroyViewStateManager(
            /**
             * The ViewStateManagerObject to destroy.
             */
            viewStateManager: sap.ui.vk.ViewStateManager
          ): sap.ui.vk.dvl.GraphicsCore;
          /**
           * Creates a new subclass of class sap.ui.vk.dvl.GraphicsCore with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets one of APIs supported by the DVL library.
           */
          getApi(
            /**
             * The API identifier.
             */
            apiId: any
          ): object;
          /**
           * Gets an object that decrypts content of encrypted models.
           */
          getDecryptionHandler(): sap.ui.vk.DecryptionHandler;
          /**
           * Returns a metadata object for class sap.ui.vk.dvl.GraphicsCore.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Loads content resources.
           *
           * Content resources can be downloaded from a URL or loaded from a local file.
           */
          loadContentResourcesAsync(
            /**
             * The content resources to build the scene from.
             */
            contentResources: sap.ui.vk.ContentResource[],
            /**
             * The callback function to call when all content resources are processed. The onComplete callback parameter
             * `sourcesFailedToLoad` takes an array of objects with the properties: source (The content resource that
             * failed to load), status (The VIT Message code i.e 'VIT22') and statusText (VIT Message Summary).
             */
            onComplete: Function,
            /**
             * The callback function to call to report the file loading progress.
             */
            onProgress: Function
          ): sap.ui.vk.dvl.GraphicsCore;
          /**
           * Sets an object that decrypts content of encrypted models.
           */
          setDecryptionHandler(
            /**
             * An object that decrypts content of encrypted models.
             */
            handler: sap.ui.vk.DecryptionHandler
          ): sap.ui.vk.dvl.GraphicsCore;
          /**
           * Shows or hides debug information in the viewports.
           */
          showDebugInfo(
            /**
             * `true` to show debug information, `false` to hide debug information.
             */
            enable: boolean
          ): sap.ui.vk.dvl.GraphicsCore;
          /**
           * Updates or rebuilds a scene tree from the hierarchy of content resources.
           *
           * The content resources must be already loaded. Some changes in the content resource hierarchy can lead
           * to rebuilding the scene completely. In this case a new scene is created.
           */
          updateSceneTree(
            /**
             * The scene to update or null to force to create a new one.
             */
            vkScene: sap.ui.vk.dvl.Scene,
            /**
             * The array of content resources to update or build the scene from.
             */
            contentResources: sap.ui.vk.ContentResource[],
            /**
             * The callback function to call when an error happens.
             */
            onError?: Function
          ): sap.ui.vk.dvl.Scene;
          /**
           * Updates or rebuilds a scene tree from the hierarchy of content resources.
           *
           * The content resources must be already loaded. Some changes in the content resource hierarchy can lead
           * to rebuilding the scene completely. In this case a new scene is created.
           */
          updateSceneTreeAsync(
            /**
             * The scene to update or null to force to create a new one.
             */
            vkScene: sap.ui.vk.dvl.Scene,
            /**
             * The array of content resources to update or build the scene from.
             */
            contentResources: sap.ui.vk.ContentResource[]
          ): any;
        }
        /**
         * Provides a proxy object to the layer in the node hierarchy.
         *
         * Layer is a list of nodes. One node hierarchy can have multiple layers. One node can be included in multiple
         * layers.
         *
         * Objects of this type should only be created with the {@link sap.ui.vk.NodeHierarchy#createLayerProxy
         * sap.ui.vk.NodeHierarchy.createLayerProxy} method and destroyed with the {@link sap.ui.vk.NodeHierarchy#destroyLayerProxy
         * sap.ui.vk.NodeHierarchy.destroyLayerProxy} method.
         */
        class LayerProxy extends sap.ui.vk.LayerProxy {
          /**
           * Constructor for a new LayerProxy.
           *
           * Objects of this type should only be created with the {@link sap.ui.vk.NodeHierarchy#createLayerProxy
           * sap.ui.vk.NodeHierarchy.createLayerProxy} method and destroyed with the {@link sap.ui.vk.NodeHierarchy#destroyLayerProxy
           * sap.ui.vk.NodeHierarchy.destroyLayerProxy} method.
           */
          constructor();

          /**
           * Creates a new subclass of class sap.ui.vk.dvl.LayerProxy with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.LayerProxy.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets the description of the layer.
           */
          // @ts-ignore
          getDescription(): string;
          /**
           * Gets the layer ID.
           */
          // @ts-ignore
          getLayerId(): string;
          /**
           * Gets the layer metadata.
           */
          // @ts-ignore
          getLayerMetadata(): object;
          /**
           * Returns a metadata object for class sap.ui.vk.dvl.LayerProxy.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets the name of the layer
           */
          // @ts-ignore
          getName(): string;
          /**
           * Gets an array of IDs of nodes belonging to the layer.
           */
          // @ts-ignore
          getNodes(): string[];
          /**
           * Gets the layer VE IDs.
           */
          // @ts-ignore
          getVeIds(): object[];
        }
        /**
         * @SINCE 1.32.0
         *
         * Provides the ability to explore a Scene object's node structure.
         *
         * The objects of this class should not be created directly, and should only be created via a call to {@link
         * sap.ui.vk.Scene#getDefaultNodeHierarchy sap.ui.vk.Scene.getDefaultNodeHierarchy}.
         */
        class NodeHierarchy extends sap.ui.vk.NodeHierarchy {
          /**
           * Constructor for a new NodeHierarchy.
           *
           * The objects of this class should not be created directly, and should only be created via a call to {@link
           * sap.ui.vk.Scene#getDefaultNodeHierarchy sap.ui.vk.Scene.getDefaultNodeHierarchy}.
           */
          constructor();

          /**
           * Creates a layer proxy object.
           *
           * The layer proxy object must be destroyed with the {@link #destroyLayerProxy destroyLayerProxy} method.
           */
          // @ts-ignore
          createLayerProxy(
            /**
             * The layer ID for which to create a proxy object.
             */
            layerId: string
          ): sap.ui.vk.LayerProxy;
          /**
           * @SINCE 1.48.0
           *
           * Creates a new node.
           */
          // @ts-ignore
          createNode(
            /**
             * The parent node reference where the created node is added to. If equals `null` the newly created node
             * is a top level node.
             */
            parentNode: any,
            /**
             * The name of the new node.
             */
            name: string,
            /**
             * The created node is added before this specified node. If equals `null` the newly created node is added
             * at the end of the parent's list of nodes.
             */
            insertBeforeNode: any
          ): any;
          /**
           * @SINCE 1.48.0
           *
           * Creates a copy of an existing node.
           */
          // @ts-ignore
          createNodeCopy(
            /**
             * The reference to the node to copy.
             */
            nodeToCopy: any,
            /**
             * The reference to the parent node where the created node is added to. If equals `null` the newly created
             * node is a top level node.
             */
            parentNode: any,
            /**
             * The name of the new node.
             */
            name: string,
            /**
             * The created node is added before this specified node. If equals `null` the newly created node is added
             * at the end of the parent's list of nodes.
             */
            insertBeforeNode: any
          ): any;
          /**
           * Creates a node proxy object.
           *
           * The node proxy object must be destroyed with the {@link #destroyNodeProxy destroyNodeProxy} method.
           */
          // @ts-ignore
          createNodeProxy(
            /**
             * The node reference for which to create a proxy object.
             */
            nodeRef: any
          ): sap.ui.vk.dvl.NodeProxy;
          /**
           * Destroys the layer proxy object.
           */
          // @ts-ignore
          destroyLayerProxy(
            /**
             * The layer proxy object.
             */
            layerProxy: sap.ui.vk.LayerProxy
          ): sap.ui.vk.LayerProxy;
          /**
           * Destroys the node proxy object.
           */
          // @ts-ignore
          destroyNodeProxy(
            /**
             * The node proxy object.
             */
            nodeProxy: sap.ui.vk.dvl.NodeProxy
          ): sap.ui.vk.dvl.NodeHierarchy;
          /**
           * Enumerates the ancestor nodes of a particular node in the Scene object.
           *
           * This method enumerates the ancestor nodes of a particular node, and then calls the `callback` function,
           * to which it passes the ancestor nodes to one by one.
           *  The BaseNodeProxy objects passed to `callback` are temporary objects, they are reset after each call
           * to the `callback` function.
           *  The ancestor nodes are enumerated starting from the top level node, and progresses down the node hierarchy.
           */
          // @ts-ignore
          enumerateAncestors(
            /**
             * The node reference whose ancestor nodes we want enumerated.
             */
            nodeRef: any,
            /**
             * A function to call when the ancestor nodes are enumerated. The function takes one parameter of type {@link
             * sap.ui.vk.dvl.BaseNodeProxy}, or string if parameter `passNodeRef` parameter is `true`.
             */
            callback: Function,
            /**
             * Indicates whether to pass the node references of the ancestor nodes, or the whole node proxy to the `callback`
             * function.
             *  If `true`, then only the node references of the ancestor nodes are passed to the `callback` function.
             *
             *  If `false`, then the node proxies of the ancestor nodes are passed to the `callback` function.
             */
            passNodeRef?: boolean
          ): sap.ui.vk.dvl.NodeHierarchy;
          /**
           * Enumerates the child nodes of a particular node in the Scene object.
           *
           * This method gets the child nodes of a particular node, and then calls the `callback` function to which
           * it passes the child nodes to one by one.
           *  The `BaseNodeProxy` objects passed to the `callback` fuction are temporary objects, which are reset
           * after each call to the `callback` function.
           */
          // @ts-ignore
          enumerateChildren(
            /**
             * The node reference whose child nodes we want enumerated.
             *  When `nodeRef` is specified, the child nodes of this node are enumerated.
             *  When no `nodeRef` is specified, only the top level nodes are enumerated.
             */
            nodeRef: any,
            /**
             * A function to call when the child nodes are enumerated. The function takes one parameter of type {@link
             * sap.ui.vk.dvl.BaseNodeProxy}, or string if parameter `passNodeRef` parameter is `true`.
             */
            callback: Function,
            /**
             * Indicates whether to enumerate the child nodes if the node is closed.
             *  If `true`, the children of that closed node will be enumerated
             *  If `false`, the children of that node will not be enumerated
             */
            stepIntoClosedNodes?: boolean,
            /**
             * Indicates whether to pass the node references of the child nodes, or the whole node proxy to the `callback`
             * function.
             *  If `true`, then only the node references of the child nodes are passed to the `callback` function.
             *  If `false`, then the node proxies created from the child node references are passed to the `callback`
             * function.
             */
            passNodeRef?: boolean
          ): sap.ui.vk.dvl.NodeHierarchy;
          /**
           * Creates a new subclass of class sap.ui.vk.dvl.NodeHierarchy with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.NodeHierarchy.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Finds nodes in a scene via node name.
           */
          // @ts-ignore
          findNodesByName(
            /**
             * JSON object containing the search parameters.
             *  The following example shows what the structure of the `query` object should look like:
             * ```javascript
             * query = {
             * 	value: string | string[],
             * 	predicate: "equals" | "contains" | "startsWith",
             * 	caseSensitive: true | false
             * }```
             *
             *
             * 	 -  **query.value**
             *  A string or an array of strings containing the name of a node or names of nodes. If no value is specified,
             * then all nodes in the scene will be returned.
             *  The following example shows a single string being passed in:
             * ```javascript
             * value: "Box #14"```
             *  The following example shows an array of strings being passed in:
             * ```javascript
             * value: ["Box #3", "box #4", "BOX #5"]```
             *
             * 	 -  **query.predicate**
             *  Represents a search mode. The available search modes are `"equals"`, `"contains"`, and `"startsWith"`.
             *
             *  Using `"equals"` will search for nodes with names that exactly match the provided string or array of
             * strings.
             *  Using `"contains"` will search for nodes with names containing all or part of the provided string or
             * array of strings.
             *  Using `"startsWith"` will search for nodes with names starting with the provided string or array of
             * strings.
             *  If no value is specified, the search mode will default to `"equals"`.
             *
             *
             * 	 -  **query.caseSensitive**
             *  Indicates whether the search should be case sensitive or not.
             *  If `true`, the search will be case sensitive, and `false` indicates otherwise.
             *  If no value is specified, `caseSensitive` will default to `false` (that is, the search will be a case-insensitive
             * search).
             */
            query: object
          ): string[];
          /**
           * Returns a list of IDs belonging to the ancestors of a particular node.
           */
          // @ts-ignore
          getAncestors(
            /**
             * The node reference of the node whose ancestors will be returned.
             */
            nodeRef: any
          ): string[];
          /**
           * Returns a list of IDs belonging to the children of a particular node.
           */
          // @ts-ignore
          getChildren(
            /**
             * The node reference of the node whose children will be returned. If `nodeRef` is not passed to the `getChildren`
             * function, the IDs of the root nodes will be returned.
             */
            nodeRef: any,
            /**
             * Indicates whether to return only the child nodes of a closed node or not. If `true`, then the
             * children of that closed node will be returned. If `false`, then the children of that closed node
             * will not be returned.
             */
            stepIntoClosedNodes?: boolean
          ): string[];
          /**
           * Gets the GraphicsCore object this Scene object belongs to.
           */
          getGraphicsCore(): sap.ui.vk.dvl.GraphicsCore;
          /**
           * Returns a list of hotspot IDs.
           */
          // @ts-ignore
          getHotspotNodeIds(): string[];
          /**
           * Returns a list of layer IDs.
           */
          // @ts-ignore
          getLayers(): string[];
          /**
           * Returns a metadata object for class sap.ui.vk.dvl.NodeHierarchy.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets the Scene object the node hierarchy belongs to.
           */
          // @ts-ignore
          getScene(): sap.ui.vk.Scene;
          /**
           * Gets the scene reference that this NodeHierarchy object wraps.
           */
          // @ts-ignore
          getSceneRef(): any;
          /**
           * @SINCE 1.48.0
           *
           * Deletes a node and destroys it.
           */
          // @ts-ignore
          removeNode(
            /**
             * The reference to a node or an array of nodes to destroy.
             */
            nodeRef: any
          ): sap.ui.vk.dvl.NodeHierarchy;
          /**
           * Enumerates the child nodes of a particular node in the Scene object.
           *
           * This method gets the child nodes of a particular node, and then calls the `callback` function to which
           * it passes the child nodes to one by one.
           *  The `BaseNodeProxy` objects passed to the `callback` fuction are temporary objects, which are reset
           * after each call to the `callback` function.
           */
          // @ts-ignore
          enumerateChildren(
            /**
             * A function to call when the child nodes are enumerated. The function takes one parameter of type {@link
             * sap.ui.vk.dvl.BaseNodeProxy}, or string if parameter `passNodeRef` parameter is `true`.
             */
            callback: Function,
            /**
             * Indicates whether to enumerate the child nodes if the node is closed.
             *  If `true`, the children of that closed node will be enumerated
             *  If `false`, the children of that node will not be enumerated
             */
            stepIntoClosedNodes?: boolean,
            /**
             * Indicates whether to pass the node references of the child nodes, or the whole node proxy to the `callback`
             * function.
             *  If `true`, then only the node references of the child nodes are passed to the `callback` function.
             *  If `false`, then the node proxies created from the child node references are passed to the `callback`
             * function.
             */
            passNodeRef?: boolean
          ): sap.ui.vk.dvl.NodeHierarchy;
        }
        /**
         * @SINCE 1.32.0
         *
         * Provides a proxy object to the node in the node hierarchy.
         *
         * Objects of this type should only be created with the {@link sap.ui.vk.NodeHierarchy#createNodeProxy sap.ui.vk.NodeHierarchy.createNodeProxy}
         * method. and destroyed with the {@link sap.ui.vk.NodeHierarchy#destroyNodeProxy sap.ui.vk.NodeHierarchy.destroyNodeProxy}
         * method.
         */
        class NodeProxy extends sap.ui.vk.NodeProxy {
          /**
           * Constructor for a new NodeProxy.
           */
          constructor();

          /**
           * Creates a new subclass of class sap.ui.vk.dvl.NodeProxy with name `sClassName` and enriches it with the
           * information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.NodeProxy.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.ui.vk.dvl.NodeProxy.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
        }
        /**
         * Provides the interface for the 3D model.
         *
         * The objects of this class should not be created directly. They should be created via {@link sap.ui.vk.ContentConnector
         * sap.ui.vk.ContentConnector}.
         */
        class Scene extends sap.ui.vk.Scene {
          /**
           * Constructor for a new Scene.
           *
           * The objects of this class should not be created directly. They should be created via {@link sap.ui.vk.ContentConnector
           * sap.ui.vk.ContentConnector}.
           */
          constructor();

          /**
           * Creates a new subclass of class sap.ui.vk.dvl.Scene with name `sClassName` and enriches it with the information
           * contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.Scene.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets the default node hierarchy in the Scene object.
           */
          // @ts-ignore
          getDefaultNodeHierarchy(): sap.ui.vk.NodeHierarchy;
          /**
           * Gets the GraphicsCore object this Scene object belongs to.
           */
          getGraphicsCore(): sap.ui.vk.dvl.GraphicsCore;
          /**
           * Gets the unique ID of the Scene object.
           */
          // @ts-ignore
          getId(): string;
          /**
           * Returns a metadata object for class sap.ui.vk.dvl.Scene.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets the DVL scene ID.
           */
          // @ts-ignore
          getSceneRef(): string;
        }
        /**
         * Provides a rendering canvas for the 3D elements of a loaded scene.
         */
        class Viewport extends sap.ui.vk.ViewportBase {
          /**
           * Constructor for a new Viewport.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new Viewport control. Generated automatically if no ID is given.
             */
            sId?: string,
            /**
             * Initial settings for the new Viewport control.
             */
            mSettings?: ViewportOpts
          );

          /**
           * Attaches event handler `fnFunction` to the {@link #event:frameRenderingFinished frameRenderingFinished}
           * event of this `sap.ui.vk.dvl.Viewport`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.dvl.Viewport` itself.
           *
           * This event will be fired when the frame rendering has finished.
           */
          attachFrameRenderingFinished(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.dvl.Viewport` itself
             */
            oListener?: object
          ): sap.ui.vk.dvl.Viewport;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:pan pan} event of this `sap.ui.vk.dvl.Viewport`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.dvl.Viewport` itself.
           */
          attachPan(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.dvl.Viewport` itself
             */
            oListener?: object
          ): sap.ui.vk.dvl.Viewport;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:rotate rotate} event of this `sap.ui.vk.dvl.Viewport`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.dvl.Viewport` itself.
           */
          attachRotate(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.dvl.Viewport` itself
             */
            oListener?: object
          ): sap.ui.vk.dvl.Viewport;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:zoom zoom} event of this `sap.ui.vk.dvl.Viewport`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.dvl.Viewport` itself.
           */
          attachZoom(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.dvl.Viewport` itself
             */
            oListener?: object
          ): sap.ui.vk.dvl.Viewport;
          /**
           * Marks the start of the current gesture operation.
           */
          beginGesture(
            /**
             * The x-coordinate of the gesture.
             */
            x: number,
            /**
             * The y-coordinate of the gesture.
             */
            y: number
          ): sap.ui.vk.Viewport;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:frameRenderingFinished frameRenderingFinished}
           * event of this `sap.ui.vk.dvl.Viewport`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachFrameRenderingFinished(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.vk.dvl.Viewport;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:pan pan} event of this `sap.ui.vk.dvl.Viewport`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachPan(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.vk.dvl.Viewport;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:rotate rotate} event of this `sap.ui.vk.dvl.Viewport`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachRotate(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.vk.dvl.Viewport;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:zoom zoom} event of this `sap.ui.vk.dvl.Viewport`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachZoom(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.vk.dvl.Viewport;
          /**
           * Marks the end of the current gesture operation.
           */
          endGesture(): sap.ui.vk.Viewport;
          /**
           * Creates a new subclass of class sap.ui.vk.dvl.Viewport with name `sClassName` and enriches it with the
           * information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.ViewportBase.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:frameRenderingFinished frameRenderingFinished} to attached listeners.
           */
          fireFrameRenderingFinished(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.ui.vk.dvl.Viewport;
          /**
           * Fires event {@link #event:pan pan} to attached listeners.
           */
          firePan(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              dx?: number;

              dy?: number;
            }
          ): sap.ui.vk.dvl.Viewport;
          /**
           * Fires event {@link #event:rotate rotate} to attached listeners.
           */
          fireRotate(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              dx?: number;

              dy?: number;
            }
          ): sap.ui.vk.dvl.Viewport;
          /**
           * Fires event {@link #event:zoom zoom} to attached listeners.
           */
          fireZoom(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              zoomFactor?: number;
            }
          ): sap.ui.vk.dvl.Viewport;
          /**
           * Gets current value of property {@link #getBackgroundColorBottomABGR backgroundColorBottomABGR}.
           *
           * Viewport background bottom color in the ABGR format
           *
           * Default value is `4294967295`.
           */
          getBackgroundColorBottomABGR(): number;
          /**
           * Gets current value of property {@link #getBackgroundColorTopABGR backgroundColorTopABGR}.
           *
           * Viewport background top color in the ABGR format
           *
           * Default value is `4278190080`.
           */
          getBackgroundColorTopABGR(): number;
          /**
           * @deprecated (since 1.50.0)
           *
           * Gets the {@link sap.ui.vk.dvl.GraphicsCore GraphicsCore} object the Viewport is attached to.
           */
          getGraphicsCore(): sap.ui.vk.dvl.GraphicsCore;
          /**
           * Gets current value of property {@link #getHotspotColor hotspotColor}.
           *
           * Color used for highlighting Smart2D hotspots in the CSS Color format
           *
           * Default value is `rgba(255, 0, 0, 0.7529411764705882)`.
           */
          getHotspotColor(): sap.ui.core.CSSColor;
          /**
           * Gets current value of property {@link #getHotspotColorABGR hotspotColorABGR}.
           *
           * Color used for highlighting Smart2D hotspots in the ABGR format
           *
           * Default value is `3221225727`.
           */
          getHotspotColorABGR(): number;
          /**/
          getIsolatedNode(): string;
          /**
           * Returns a metadata object for class sap.ui.vk.dvl.Viewport.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets position and size of the viewport square. The information can be used for making calculations when
           * restoring Redlining elements.
           */
          getOutputSize(): object;
          /**
           * Gets current value of property {@link #getShowAllHotspots showAllHotspots}.
           *
           * Enables or disables showing of all hotspots
           *
           * Default value is `false`.
           */
          getShowAllHotspots(): boolean;
          /**
           * Retrieves information about the current camera view in the scene, and saves the information in a JSON-like
           * object. The information can then be used at a later time to restore the scene to the same camera view
           * using the {@link sap.ui.vk.Viewport#setViewInfo setViewInfo} method.
           */
          getViewInfo(
            /**
             * Query object which indicates what information to be retrieved.
             */
            query?: {
              /**
               * Indicator to retrieve camera information.
               */
              camera?: {
                /**
                 * Indicator to retrieve camera view and projection matrices.
                 */
                matrices?: boolean;
                /**
                 * Indicator to retrieve the transition camera properties instead of regular one's.
                 */
                useTransitionCamera?: boolean;
              };

              /**
               * Indicator to retrieve animation information.
               */
              animation?: boolean;
              /**
               * Indicator to retrieve visibility information.
               */
              visibility?: {
                /**
                 * Indicator to retrieve the complete visibility definition or just the difference.
                 */
                mode?: any;
              };
            }
          ): object;
          /**
           * Performs a `pan` gesture to pan across the Viewport.
           */
          // @ts-ignore
          pan(
            /**
             * The change in distance along the x-coordinate.
             */
            dx: number,
            /**
             * The change in distance along the y-coordinate.
             */
            dy: number
          ): sap.ui.vk.Viewport;
          /**
           * Queues a command for execution during the rendering cycle. All gesture operations should be called using
           * this method.
           */
          queueCommand(
            /**
             * The command to be executed.
             */
            command: Function
          ): sap.ui.vk.Viewport;
          /**
           * Executes a rectangular selection.
           */
          rectSelect(
            /**
             * The x-coordinate of starting vertex of selection rectangle.
             */
            x1: number,
            /**
             * The y-coordinate of starting vertex of selection rectangle.
             */
            y1: number,
            /**
             * The x-coordinate of ending vertex of selection rectangle.
             */
            x2: number,
            /**
             * The y-coordinate of ending vertex of selection rectangle.
             */
            y2: number
          ): any[];
          /**
           * Rotates the content resource displayed on the Viewport.
           */
          // @ts-ignore
          rotate(
            /**
             * The change in x-coordinate used to define the desired rotation.
             */
            dx: number,
            /**
             * The change in y-coordinate used to define the desired rotation.
             */
            dy: number
          ): sap.ui.vk.Viewport;
          /**
           * Sets the background color for the bottom area of the Viewport.
           */
          setBackgroundColorBottomABGR(
            /**
             * Takes an integer value as parameter. For example: 0xffffffff as hexadecimal value (0x prefix, FF alpha,
             * FF blue, FF green, FF red)
             */
            integerColor: number
          ): sap.ui.vk.Viewport;
          /**
           * Sets the background color for the top area of the Viewport.
           */
          setBackgroundColorTopABGR(
            /**
             * Takes an integer value as parameter. For example: 0xffffffff as hexadecimal value (0x prefix, FF alpha,
             * FF blue, FF green, FF red)
             */
            integerColor: number
          ): sap.ui.vk.Viewport;
          /**
           * @deprecated (since 1.50.0)
           *
           * Attaches or detaches the Viewport to the {@link sap.ui.vk.dvl.GraphicsCore GraphicsCore} object.
           */
          setGraphicsCore(
            /**
             * The {@link sap.ui.vk.dvl.GraphicsCore GraphicsCore} object or `null`. If the `graphicsCore` parameter
             * is not `null`, a rendering object corresponding to the Viewport is created. If the `graphicsCore` parameter
             * is `null`, the rendering object corresponding to the Viewport is destroyed.
             */
            graphicsCore: sap.ui.vk.dvl.GraphicsCore
          ): sap.ui.vk.Viewport;
          /**
           * Sets a new value for property {@link #getHotspotColor hotspotColor}.
           *
           * Color used for highlighting Smart2D hotspots in the CSS Color format
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `rgba(255, 0, 0, 0.7529411764705882)`.
           */
          setHotspotColor(
            /**
             * New value for property `hotspotColor`
             */
            sHotspotColor: sap.ui.core.CSSColor
          ): sap.ui.vk.dvl.Viewport;
          /**
           * Sets a new value for property {@link #getHotspotColorABGR hotspotColorABGR}.
           *
           * Color used for highlighting Smart2D hotspots in the ABGR format
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `3221225727`.
           */
          setHotspotColorABGR(
            /**
             * New value for property `hotspotColorABGR`
             */
            iHotspotColorABGR: number
          ): sap.ui.vk.dvl.Viewport;
          /**
           * @deprecated (since 1.50.0)
           *
           * Attaches the scene to the Viewport for rendering.
           */
          setScene(
            /**
             * The scene to attach to the Viewport.
             */
            scene: sap.ui.vk.Scene
          ): sap.ui.vk.Viewport;
          /**
           * Set selection rectangle for rendering
           */
          setSelectionRect(
            /**
             * coordinates of selection rectangle
             */
            rect: object
          ): void;
          /**/
          setShouldRenderFrame(): sap.ui.vk.Viewport;
          /**
           * Sets a new value for property {@link #getShowAllHotspots showAllHotspots}.
           *
           * Enables or disables showing of all hotspots
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setShowAllHotspots(
            /**
             * New value for property `showAllHotspots`
             */
            bShowAllHotspots: boolean
          ): sap.ui.vk.dvl.Viewport;
          /**
           * Sets the current scene to use the camera view information acquired from the {@link sap.ui.vk.Viewport#getViewInfo
           * getViewInfo} method.
           *  Internally, the `setViewInfo` method activates certain steps at certain animation times, and then changes
           * the camera position, rotation and field of view (FOV) / zoom factor.
           */
          setViewInfo(
            /**
             * A JSON-like object containing view information acquired using the {@link sap.ui.vk.Viewport#getViewInfo
             * getViewInfo} method.
             */
            viewInfo: {
              /**
               * A JSON-like object containing the camera information.
               */
              camera?: {
                /**
                 * Rotation defined in {@link https://en.wikipedia.org/wiki/Aircraft_principal_axes Aircraft principal axes}.
                 */
                rotation: {
                  /**
                   * Angle around the vertical axis in degrees.
                   */
                  yaw: number;
                  /**
                   * Angle around the lateral axis in degrees.
                   */
                  pitch: number;
                  /**
                   * Angle around the longitudinal axis in degrees.
                   */
                  roll: number;
                };

                /**
                 * Position defined in 3-dimensional space.
                 */
                position: {
                  /**
                   * X coordinate.
                   */
                  x: number;
                  /**
                   * Y coordinate.
                   */
                  y: number;
                  /**
                   * Z coordinate.
                   */
                  z: number;
                };

                /**
                 * Camera field of view binding type.
                 */
                bindingType: any;
                /**
                 * Camera projection type.
                 */
                projectionType: any;
                /**
                 * Camera field of view in degrees. Applicable only to perspective cameras.
                 */
                fieldOfView: number;
                /**
                 * Camera zoom factor. Applicable only to orthographic cameras.
                 */
                zoomFactor: number;
              };

              /**
               * A JSON-like object containing the animation information.
               */
              animation?: {
                /**
                 * Step VE ID. If it is omitted then procedure and step indices are used.
                 */
                stepVeId?: string;
                /**
                 * Procedure index in the list of procedures.
                 */
                procedureIndex?: number;
                /**
                 * Step index in the list of steps in the procedure.
                 */
                stepIndex?: number;
                /**
                 * Time at which to activate the step.
                 */
                animationTime?: number;
              };

              /**
               * A JSON-like object containing the visibility information.
               */
              visibility?: {
                /**
                 * If the mode equals to {@link sap.ui.vk.VisibilityMode.Complete complete} then the visible and hidden
                 * fields are defined. If the mode equals {@link sap.ui.vk.VisibilityMode.Differences differences} then
                 * the changes field is defined.
                 */
                mode: any;
                /**
                 * List of Ids of visible nodes.
                 */
                visible: string[];
                /**
                 * List of Ids of hidden nodes.
                 */
                hidden: string[];
                /**
                 * List of Ids of nodes with inverted visibility.
                 */
                changes: string[];
              };
            },
            /**
             * Fly-to animation duration in seconds.
             */
            flyToDuration?: number
          ): sap.ui.vk.Viewport;
          /**/
          showHotspots(
            /**
             * The node reference or the array of node references that we want to tint.
             */
            nodeRefs: any | any[],
            /**
             * Whether to highlight the nodes or remove the highlight.
             */
            show: boolean,
            /**
             * The color to use for highlighting the nodes passed as argument.
             */
            color: number | any
          ): sap.ui.vk.Viewport;
          /**
           * Executes a click or tap gesture.
           */
          tap(
            /**
             * The tap gesture's x-coordinate.
             */
            x: number,
            /**
             * The tap gesture's y-coordinate.
             */
            y: number,
            /**
             * Indicates whether the tap gesture should be interpreted as a double-click. A value of `true` indicates
             * a double-click gesture, and `false` indicates a single click gesture.
             */
            isDoubleClick: boolean
          ): sap.ui.vk.dvl.Viewport;
          /**
           * Performs a `zoom` gesture to zoom in or out on the beginGesture coordinate.
           */
          // @ts-ignore
          zoom(
            /**
             * Zoom factor. A scale factor that specifies how much to zoom in or out by.
             */
            dy: number
          ): sap.ui.vk.Viewport;
          /**
           * Zooms the scene to a bounding box created from a particular set of nodes.
           */
          zoomTo(
            /**
             * What set of nodes to zoom to.
             */
            what: any | any,
            /**
             * Is only used if what == sap.ui.vk.ZoomTo.Node.
             */
            nodeRef: any,
            /**
             * Time to perform the "fly to" animation. Set to 0 to do this immediately.
             */
            crossFadeSeconds: number,
            /**
             * Margin. Set to 0 to zoom to the entire screen.
             */
            margin: number
          ): sap.ui.vk.Viewport;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:frameRenderingFinished frameRenderingFinished}
           * event of this `sap.ui.vk.dvl.Viewport`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.dvl.Viewport` itself.
           *
           * This event will be fired when the frame rendering has finished.
           */
          attachFrameRenderingFinished(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.dvl.Viewport` itself
             */
            oListener?: object
          ): sap.ui.vk.dvl.Viewport;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:pan pan} event of this `sap.ui.vk.dvl.Viewport`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.dvl.Viewport` itself.
           */
          attachPan(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.dvl.Viewport` itself
             */
            oListener?: object
          ): sap.ui.vk.dvl.Viewport;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:rotate rotate} event of this `sap.ui.vk.dvl.Viewport`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.dvl.Viewport` itself.
           */
          attachRotate(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.dvl.Viewport` itself
             */
            oListener?: object
          ): sap.ui.vk.dvl.Viewport;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:zoom zoom} event of this `sap.ui.vk.dvl.Viewport`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.dvl.Viewport` itself.
           */
          attachZoom(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.dvl.Viewport` itself
             */
            oListener?: object
          ): sap.ui.vk.dvl.Viewport;
        }
        /**
         * Manages the visibility and selection states of nodes in the scene.
         */
        class ViewStateManager extends sap.ui.vk.ViewStateManagerBase {
          /**
           * Constructor for a new ViewStateManager.
           */
          constructor(
            /**
             * ID for the new ViewStateManager object. Generated automatically if no ID is given.
             */
            sId?: string,
            /**
             * Initial settings for the new ViewStateManager object.
             */
            mSettings?: ViewStateManagerOpts
          );

          /**
           * Enumerates IDs of the selected nodes.
           */
          // @ts-ignore
          enumerateSelection(
            /**
             * A function to call when the selected nodes are enumerated. The function takes one parameter of type `string`.
             */
            callback: Function
          ): sap.ui.vk.ViewStateManager;
          /**
           * Creates a new subclass of class sap.ui.vk.dvl.ViewStateManager with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.ViewStateManagerBase.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.ui.vk.dvl.ViewStateManager.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets the NodeHierarchy object associated with this ViewStateManager object.
           */
          // @ts-ignore
          getNodeHierarchy(): sap.ui.vk.NodeHierarchy;
          /**
           * Gets the opacity of the node.
           *
           * If a single node reference is passed to the method then a single value is returned.
           *  If an array of node references is passed to the method then an array of values is returned.
           */
          // @ts-ignore
          getOpacity(
            /**
             * The node reference or the array of node references.
             */
            nodeRefs: any | any[]
          ): number | number[];
          /**
           * Gets the selection state of the node.
           *
           * If a single node reference is passed to the method then a single selection state is returned.
           *  If an array of node references is passed to the method then an array of selection states is returned.
           */
          // @ts-ignore
          getSelectionState(
            /**
             * The node reference or the array of node references.
             */
            nodeRefs: any | any[]
          ): boolean | boolean[];
          /**
           * Gets the tint color of the node.
           *
           * If a single node reference is passed to the method then a single value is returned.
           *  If an array of node references is passed to the method then an array of values is returned.
           */
          // @ts-ignore
          getTintColor(
            /**
             * The node reference or the array of node references.
             */
            nodeRefs: any | any[],
            /**
             * This flag indicates to return the tint color in the ABGR format, if it equals `false` then the color
             * is returned in the CSS color format.
             */
            inABGRFormat?: boolean
          ): sap.ui.core.CSSColor | sap.ui.core.CSSColor[] | number | number[];
          /**
           * Gets the visibility changes in the current ViewStateManager object.
           */
          // @ts-ignore
          getVisibilityChanges(): string[];
          /**
           * Gets the visibility state of nodes.
           *
           * If a single node reference is passed to the method then a single visibility state is returned.
           *  If an array of node references is passed to the method then an array of visibility states is returned.
           */
          // @ts-ignore
          getVisibilityState(
            /**
             * The node reference or the array of node references.
             */
            nodeRefs: any | any[]
          ): boolean | boolean[];
          /**
           * Sets the opacity of the nodes.
           */
          // @ts-ignore
          setOpacity(
            /**
             * The node reference or the array of node references.
             */
            nodeRefs: any | any[],
            /**
             * The new opacity of the nodes. If `null` is passed then the opacity is reset and the node's own opacity
             * should be used.
             */
            opacity: number | null,
            /**
             * The flags indicates if the change needs to propagate recursively to child nodes.
             */
            recursive?: boolean
          ): sap.ui.vk.ViewStateManager;
          /**
           * @deprecated (since 1.56.3)
           *
           * Sets the selection state of the nodes.
           */
          // @ts-ignore
          setSelectionState(
            /**
             * The node reference or the array of node references.
             */
            nodeRefs: any | any[],
            /**
             * The new selection state of the nodes.
             */
            selected: boolean,
            /**
             * The flags indicates if the change needs to propagate recursively to child nodes.
             */
            recursive: boolean,
            /**
             * The flag to suppres selectionChanged event.
             */
            blockNotification: boolean
          ): sap.ui.vk.ViewStateManager;
          /**
           * Sets or resets the selection state of the nodes.
           */
          // @ts-ignore
          setSelectionStates(
            /**
             * The node reference or the array of node references of selected nodes.
             */
            selectedNodeRefs: any | any[],
            /**
             * The node reference or the array of node references of unselected nodes.
             */
            unselectedNodeRefs: any | any[],
            /**
             * The flags indicates if the change needs to propagate recursively to child nodes.
             */
            recursive: boolean,
            /**
             * The flag to suppres selectionChanged event.
             */
            blockNotification: boolean
          ): sap.ui.vk.ViewStateManager;
          /**
           * Sets the tint color of the nodes.
           */
          // @ts-ignore
          setTintColor(
            /**
             * The node reference or the array of node references.
             */
            nodeRefs: any | any[],
            /**
             * The new tint color of the nodes. The value can be defined as a string in the CSS color format or as an
             * integer in the ABGR format. If `null` is passed then the tint color is reset and the node's own tint
             * color should be used.
             */
            tintColor: any | number | null,
            /**
             * This flag indicates if the change needs to propagate recursively to child nodes.
             */
            recursive?: boolean
          ): sap.ui.vk.ViewStateManager;
          /**
           * Sets the visibility state of the nodes.
           */
          // @ts-ignore
          setVisibilityState(
            /**
             * The node reference or the array of node references.
             */
            nodeRefs: any | any[],
            /**
             * The new visibility state of the nodes.
             */
            visible: boolean,
            /**
             * The flags indicates if the change needs to propagate recursively to child nodes.
             */
            recursive: boolean
          ): sap.ui.vk.ViewStateManager;
        }
      }

      namespace threejs {
        interface ViewStateManagerOpts
          extends sap.ui.vk.ViewStateManagerBaseOpts {}
        /**
         * @EXPERIMENTAL (since 1.67.0)
         *
         * Provides the definition for animation sequence
         */
        class AnimationSequence extends sap.ui.vk.AnimationSequence {
          /**
           * Constructor for an animation sequence.
           */
          constructor(name: string);

          /**
           * Creates a new subclass of class sap.ui.vk.threejs.AnimationSequence with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.AnimationSequence.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.ui.vk.threejs.AnimationSequence.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
        }
        /**
         * Provides a simple, lightweight proxy object to a node in a node hierarchy.
         *
         * The objects of this class should not be created directly, and should only be created through the use
         * of the following methods:
         * 	 - {@link sap.ui.vk.NodeHierarchy#enumerateChildren sap.ui.vk.NodeHierarchy.enumerateChildren}
         * 	 - {@link sap.ui.vk.NodeHierarchy#enumerateAncestors sap.ui.vk.NodeHierarchy.enumerateAncestors}
         * 	 - {@link sap.ui.vk.ViewStateManager#enumerateSelection sap.ui.vk.ViewStateManager.enumerateSelection}
         */
        // @ts-ignore - Class 'BaseNodeProxy' incorrectly implements interface 'Poolable'. Type 'BaseNodeProxy' is missing the following properties from type 'Poolable': init, reset
        class BaseNodeProxy extends sap.ui.vk.BaseNodeProxy
          implements sap.ui.base.Poolable {
          /**
           * Constructor for a new BaseNodeProxy. The objects of this class should not be created directly, and should
           * only be created through the use of the following methods:
           * 	 - {@link sap.ui.vk.NodeHierarchy#enumerateChildren sap.ui.vk.NodeHierarchy.enumerateChildren}
           * 	 - {@link sap.ui.vk.NodeHierarchy#enumerateAncestors sap.ui.vk.NodeHierarchy.enumerateAncestors}
           * 	 - {@link sap.ui.vk.ViewStateManager#enumerateSelection sap.ui.vk.ViewStateManager.enumerateSelection}
           */
          constructor();

          /**
           * Creates a new subclass of class sap.ui.vk.threejs.BaseNodeProxy with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.BaseNodeProxy.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Indicates whether the node has child nodes.
           */
          // @ts-ignore
          getHasChildren(): boolean;
          /**
           * Returns a metadata object for class sap.ui.vk.threejs.BaseNodeProxy.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets the name of the node.
           */
          // @ts-ignore
          getName(): string;
          /**
           * Gets the node reference.
           */
          // @ts-ignore
          getNodeId(): any;
          /**
           * Gets the metadata of the node.
           */
          // @ts-ignore
          getNodeMetadata(): object;
          /**
           * Gets the reference object of the node.
           */
          // @ts-ignore
          getNodeRef(): object;
          /**
           * Gets the scene reference that this BaseNodeProxy object wraps.
           */
          // @ts-ignore
          getSceneRef(): any;
        }

        // @ts-ignore - static 'getMetadata' inheritance issue
        class Billboard extends sap.ui.base.ManagedObject {
          /**
           * Constructor for a new Billboard.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor();

          /**
           * Creates a new subclass of class sap.ui.vk.threejs.Billboard with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets current value of property {@link #getBackgroundColor backgroundColor}.
           *
           * Default value is `#fff`.
           */
          getBackgroundColor(): sap.ui.core.CSSColor;
          /**
           * Gets current value of property {@link #getBackgroundOpacity backgroundOpacity}.
           *
           * Default value is `0.5`.
           */
          getBackgroundOpacity(): number;
          /**
           * Gets current value of property {@link #getBorderColor borderColor}.
           *
           * Default value is `#fff`.
           */
          getBorderColor(): sap.ui.core.CSSColor;
          /**
           * Gets current value of property {@link #getBorderLineStyle borderLineStyle}.
           *
           * Default value is `Solid`.
           */
          getBorderLineStyle(): any;
          /**
           * Gets current value of property {@link #getBorderOpacity borderOpacity}.
           *
           * Default value is `1`.
           */
          getBorderOpacity(): number;
          /**
           * Gets current value of property {@link #getBorderWidth borderWidth}.
           *
           * Default value is `2`.
           */
          getBorderWidth(): number;
          /**
           * Gets current value of property {@link #getCoordinateSpace coordinateSpace}.
           *
           * Default value is `Viewport`.
           */
          getCoordinateSpace(): any;
          /**
           * Gets current value of property {@link #getEncoding encoding}.
           *
           * Default value is `PlainText`.
           */
          getEncoding(): any;
          /**
           * Gets current value of property {@link #getFont font}.
           *
           * Default value is `empty string`.
           */
          getFont(): string;
          /**
           * Gets current value of property {@link #getFontItalic fontItalic}.
           *
           * Default value is `false`.
           */
          getFontItalic(): boolean;
          /**
           * Gets current value of property {@link #getFontSize fontSize}.
           *
           * Default value is `20`.
           */
          getFontSize(): number;
          /**
           * Gets current value of property {@link #getFontWeight fontWeight}.
           *
           * Default value is `normal`.
           */
          getFontWeight(): string;
          /**
           * Gets current value of property {@link #getHeight height}.
           *
           * Default value is `100`.
           */
          getHeight(): number;
          /**
           * Gets current value of property {@link #getHorizontalAlignment horizontalAlignment}.
           *
           * Default value is `Left`.
           */
          getHorizontalAlignment(): any;
          /**
           * Gets current value of property {@link #getLink link}.
           *
           * Default value is `empty string`.
           */
          getLink(): string;
          /**
           * Gets current value of property {@link #getMaterial material}.
           */
          getMaterial(): any;
          /**
           * Returns a metadata object for class sap.ui.vk.threejs.Billboard.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getNode node}.
           *
           * Default value is `new THREE.Group()`.
           */
          getNode(): any;
          /**
           * Gets current value of property {@link #getPosition position}.
           *
           * Default value is `new THREE.Vector3(0, 0, 0)`.
           */
          getPosition(): any;
          /**
           * Gets current value of property {@link #getRenderOrder renderOrder}.
           *
           * Default value is `0`.
           */
          getRenderOrder(): number;
          /**
           * Gets current value of property {@link #getStyle style}.
           *
           * Default value is `None`.
           */
          getStyle(): any;
          /**
           * Gets current value of property {@link #getText text}.
           *
           * Default value is `empty string`.
           */
          getText(): string;
          /**
           * Gets current value of property {@link #getTextColor textColor}.
           *
           * Default value is `#fff`.
           */
          getTextColor(): sap.ui.core.CSSColor;
          /**
           * Gets current value of property {@link #getTexture texture}.
           */
          getTexture(): any;
          /**
           * Gets current value of property {@link #getWidth width}.
           *
           * Default value is `100`.
           */
          getWidth(): number;
          /**
           * Sets a new value for property {@link #getBackgroundColor backgroundColor}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `#fff`.
           */
          setBackgroundColor(
            /**
             * New value for property `backgroundColor`
             */
            sBackgroundColor: sap.ui.core.CSSColor
          ): sap.ui.vk.threejs.Billboard;
          /**
           * Sets a new value for property {@link #getBackgroundOpacity backgroundOpacity}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `0.5`.
           */
          setBackgroundOpacity(
            /**
             * New value for property `backgroundOpacity`
             */
            fBackgroundOpacity: number
          ): sap.ui.vk.threejs.Billboard;
          /**
           * Sets a new value for property {@link #getBorderColor borderColor}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `#fff`.
           */
          setBorderColor(
            /**
             * New value for property `borderColor`
             */
            sBorderColor: sap.ui.core.CSSColor
          ): sap.ui.vk.threejs.Billboard;
          /**
           * Sets a new value for property {@link #getBorderLineStyle borderLineStyle}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `Solid`.
           */
          setBorderLineStyle(
            /**
             * New value for property `borderLineStyle`
             */
            sBorderLineStyle: any
          ): sap.ui.vk.threejs.Billboard;
          /**
           * Sets a new value for property {@link #getBorderOpacity borderOpacity}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `1`.
           */
          setBorderOpacity(
            /**
             * New value for property `borderOpacity`
             */
            fBorderOpacity: number
          ): sap.ui.vk.threejs.Billboard;
          /**
           * Sets a new value for property {@link #getBorderWidth borderWidth}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `2`.
           */
          setBorderWidth(
            /**
             * New value for property `borderWidth`
             */
            fBorderWidth: number
          ): sap.ui.vk.threejs.Billboard;
          /**
           * Sets a new value for property {@link #getCoordinateSpace coordinateSpace}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `Viewport`.
           */
          setCoordinateSpace(
            /**
             * New value for property `coordinateSpace`
             */
            sCoordinateSpace: any
          ): sap.ui.vk.threejs.Billboard;
          /**
           * Sets a new value for property {@link #getEncoding encoding}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `PlainText`.
           */
          setEncoding(
            /**
             * New value for property `encoding`
             */
            sEncoding: any
          ): sap.ui.vk.threejs.Billboard;
          /**
           * Sets a new value for property {@link #getFont font}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `empty string`.
           */
          setFont(
            /**
             * New value for property `font`
             */
            sFont: string
          ): sap.ui.vk.threejs.Billboard;
          /**
           * Sets a new value for property {@link #getFontItalic fontItalic}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setFontItalic(
            /**
             * New value for property `fontItalic`
             */
            bFontItalic: boolean
          ): sap.ui.vk.threejs.Billboard;
          /**
           * Sets a new value for property {@link #getFontSize fontSize}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `20`.
           */
          setFontSize(
            /**
             * New value for property `fontSize`
             */
            fFontSize: number
          ): sap.ui.vk.threejs.Billboard;
          /**
           * Sets a new value for property {@link #getFontWeight fontWeight}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `normal`.
           */
          setFontWeight(
            /**
             * New value for property `fontWeight`
             */
            sFontWeight: string
          ): sap.ui.vk.threejs.Billboard;
          /**
           * Sets a new value for property {@link #getHeight height}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `100`.
           */
          setHeight(
            /**
             * New value for property `height`
             */
            fHeight: number
          ): sap.ui.vk.threejs.Billboard;
          /**
           * Sets a new value for property {@link #getHorizontalAlignment horizontalAlignment}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `Left`.
           */
          setHorizontalAlignment(
            /**
             * New value for property `horizontalAlignment`
             */
            sHorizontalAlignment: any
          ): sap.ui.vk.threejs.Billboard;
          /**
           * Sets a new value for property {@link #getLink link}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `empty string`.
           */
          setLink(
            /**
             * New value for property `link`
             */
            sLink: string
          ): sap.ui.vk.threejs.Billboard;
          /**
           * Sets a new value for property {@link #getMaterial material}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setMaterial(
            /**
             * New value for property `material`
             */
            oMaterial: any
          ): sap.ui.vk.threejs.Billboard;
          /**
           * Sets a new value for property {@link #getNode node}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `new THREE.Group()`.
           */
          setNode(
            /**
             * New value for property `node`
             */
            oNode: any
          ): sap.ui.vk.threejs.Billboard;
          /**
           * Sets a new value for property {@link #getPosition position}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `new THREE.Vector3(0, 0, 0)`.
           */
          setPosition(
            /**
             * New value for property `position`
             */
            oPosition: any
          ): sap.ui.vk.threejs.Billboard;
          /**
           * Sets a new value for property {@link #getRenderOrder renderOrder}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `0`.
           */
          setRenderOrder(
            /**
             * New value for property `renderOrder`
             */
            iRenderOrder: number
          ): sap.ui.vk.threejs.Billboard;
          /**
           * Sets a new value for property {@link #getStyle style}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `None`.
           */
          setStyle(
            /**
             * New value for property `style`
             */
            sStyle: any
          ): sap.ui.vk.threejs.Billboard;
          /**
           * Sets a new value for property {@link #getText text}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `empty string`.
           */
          setText(
            /**
             * New value for property `text`
             */
            sText: string
          ): sap.ui.vk.threejs.Billboard;
          /**
           * Sets a new value for property {@link #getTextColor textColor}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `#fff`.
           */
          setTextColor(
            /**
             * New value for property `textColor`
             */
            sTextColor: sap.ui.core.CSSColor
          ): sap.ui.vk.threejs.Billboard;
          /**
           * Sets a new value for property {@link #getTexture texture}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setTexture(
            /**
             * New value for property `texture`
             */
            oTexture: any
          ): sap.ui.vk.threejs.Billboard;
          /**
           * Sets a new value for property {@link #getWidth width}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `100`.
           */
          setWidth(
            /**
             * New value for property `width`
             */
            fWidth: number
          ): sap.ui.vk.threejs.Billboard;
        }

        class Callout extends sap.ui.vk.threejs.Billboard {
          /**
           * Constructor for a new Callout.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor();

          /**
           * Adds leader line to the callout.
           */
          addLeaderLine(
            /**
             * The array of vertices.
             */
            vertices: any,
            /**
             * The leader line target node.
             */
            targetNode: any,
            /**
             * The leader line material.
             */
            material: any,
            /**
             * The mark style of the start point.
             */
            startPointStyle: any,
            /**
             * The mark style of the end point.
             */
            endPointStyle: any,

            styleConstant: undefined,
            /**
             * The leader line extension length.
             */
            extensionLength: number
          ): any;
          /**
           * Creates a new subclass of class sap.ui.vk.threejs.Callout with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.threejs.Billboard.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets current value of property {@link #getAnchorNode anchorNode}.
           */
          getAnchorNode(): any;
          /**
           * Gets current value of property {@link #getDepthTest depthTest}.
           *
           * Default value is `true`.
           */
          getDepthTest(): boolean;
          /**
           * Returns a metadata object for class sap.ui.vk.threejs.Callout.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Sets a new value for property {@link #getAnchorNode anchorNode}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setAnchorNode(
            /**
             * New value for property `anchorNode`
             */
            oAnchorNode: any
          ): sap.ui.vk.threejs.Callout;
          /**
           * Sets a new value for property {@link #getDepthTest depthTest}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setDepthTest(
            /**
             * New value for property `depthTest`
             */
            bDepthTest: boolean
          ): sap.ui.vk.threejs.Callout;
        }
        /**
         * @SINCE 1.50.0
         *
         * Provides a content manager object that uses the three.js library to load 3D files.
         *
         * When registering a content manager resolver with {@link sap.ui.vk.ContentConnector.addContentManagerResolver
         * sap.ui.vk.ContentConnector.addContentManagerResolver} you can pass a function that will load a model
         * and merge it into the three.js scene.
         *
         * The loader function takes two parameters:
         * 	 - parentNode - {@link https://threejs.org/docs/index.html#api/objects/Group THREE.Group} - a grouping
         * 			node to merge the content into
         * 	 - contentResource - {@link sap.ui.vk.ContentResource sap.ui.vk.ContentResource} - a content resource
         * 			to load  The loader function returns a {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise
         * 			Promise} object. If the loading the model succeeds the promise object resolves with a value with the
         * 			following structure:
         * 	 - node - {@link https://threejs.org/docs/index.html#api/objects/Group THREE.Group} - the grouping node
         * 			to which the content is merged into. It should be the `parentNode` parameter that was passed to the loader
         * 			function.
         * 	 - contentResource - {@link sap.ui.vk.ContentResource sap.ui.vk.ContentResource} - the content resource
         * 			that was loaded.
         */
        class ContentManager extends sap.ui.vk.ContentManager {
          /**
           * Constructor for a new ContentManager.
           * See:
           * 	{@link sap.ui.vk.ContentConnector.addContentManagerResolver sap.ui.vk.ContentConnector.addContentManagerResolver}
           * for an example.
           */
          constructor(
            /**
             * ID for the new ContentManager object. Generated automatically if no ID is given.
             */
            sId?: string,
            /**
             * Initial settings for the new ContentManager object.
             */
            mSettings?: object
          );

          /**
           * @SINCE 1.50.0
           *
           * Collects and destroys unused objects and resources.
           */
          // @ts-ignore
          collectGarbage(): sap.ui.vk.ContentManager;
          /**
           * @SINCE 1.52.0
           *
           * Creates an Orthographic camera
           */
          // @ts-ignore
          createOrthographicCamera(): sap.ui.vk.OrthographicCamera;
          /**
           * @SINCE 1.52.0
           *
           * Creates a Perspective camera
           */
          // @ts-ignore
          createPerspectiveCamera(): sap.ui.vk.PerspectiveCamera;
          /**
           * @SINCE 1.50.0
           *
           * Destroys the content.
           */
          // @ts-ignore
          destroyContent(
            /**
             * The content to destroy.
             */
            content: any
          ): sap.ui.vk.ContentManager;
          /**
           * Creates a new subclass of class sap.ui.vk.threejs.ContentManager with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.ContentManager.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.ui.vk.threejs.ContentManager.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * @SINCE 1.50.0
           *
           * Starts downloading and building or updating the content from the content resources.
           *
           * This method is asynchronous.
           */
          // @ts-ignore
          loadContent(
            /**
             * The current content to update. It can be `null` if this is an initial loading call.
             */
            content: any,
            /**
             * The content resources to load or update.
             */
            contentResources: sap.ui.vk.ContentResource[]
          ): sap.ui.vk.ContentManager;
        }

        // @ts-ignore - static 'getMetadata' inheritance issue
        class DetailView extends sap.ui.base.ManagedObject {
          /**
           * Constructor for a new DetailView.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor();

          /**
           * Creates a new subclass of class sap.ui.vk.threejs.DetailView with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets current value of property {@link #getAttachmentPoint attachmentPoint}.
           */
          getAttachmentPoint(): any;
          /**
           * Gets current value of property {@link #getBackgroundColor backgroundColor}.
           *
           * Default value is `#fff`.
           */
          getBackgroundColor(): sap.ui.core.CSSColor;
          /**
           * Gets current value of property {@link #getBorderColor borderColor}.
           *
           * Default value is `#000`.
           */
          getBorderColor(): sap.ui.core.CSSColor;
          /**
           * Gets current value of property {@link #getBorderWidth borderWidth}.
           *
           * Default value is `2`.
           */
          getBorderWidth(): number;
          /**
           * Gets current value of property {@link #getCamera camera}.
           */
          getCamera(): any;
          /**
           * Gets current value of property {@link #getMetadata metadata}.
           *
           * Default value is `[object Object]`.
           */
          // @ts-ignore
          getMetadata(): any;
          /**
           * Returns a metadata object for class sap.ui.vk.threejs.DetailView.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getName name}.
           *
           * Default value is `empty string`.
           */
          getName(): string;
          /**
           * Gets current value of property {@link #getOrigin origin}.
           *
           * Default value is `new THREE.Vector3(0, 0)`.
           */
          getOrigin(): any;
          /**
           * Gets current value of property {@link #getShape shape}.
           *
           * Default value is `Box`.
           */
          getShape(): any;
          /**
           * Gets current value of property {@link #getSize size}.
           *
           * Default value is `new THREE.Vector3(0.5, 0.5)`.
           */
          getSize(): any;
          /**
           * Gets current value of property {@link #getType type}.
           *
           * Default value is `DetailView`.
           */
          getType(): any;
          /**
           * Gets current value of property {@link #getVeId veId}.
           *
           * Default value is `[object Object]`.
           */
          getVeId(): any;
          /**
           * Sets a new value for property {@link #getAttachmentPoint attachmentPoint}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setAttachmentPoint(
            /**
             * New value for property `attachmentPoint`
             */
            oAttachmentPoint: any
          ): sap.ui.vk.threejs.DetailView;
          /**
           * Sets a new value for property {@link #getBackgroundColor backgroundColor}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `#fff`.
           */
          setBackgroundColor(
            /**
             * New value for property `backgroundColor`
             */
            sBackgroundColor: sap.ui.core.CSSColor
          ): sap.ui.vk.threejs.DetailView;
          /**
           * Sets a new value for property {@link #getBorderColor borderColor}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `#000`.
           */
          setBorderColor(
            /**
             * New value for property `borderColor`
             */
            sBorderColor: sap.ui.core.CSSColor
          ): sap.ui.vk.threejs.DetailView;
          /**
           * Sets a new value for property {@link #getBorderWidth borderWidth}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `2`.
           */
          setBorderWidth(
            /**
             * New value for property `borderWidth`
             */
            fBorderWidth: number
          ): sap.ui.vk.threejs.DetailView;
          /**
           * Sets a new value for property {@link #getCamera camera}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setCamera(
            /**
             * New value for property `camera`
             */
            oCamera: any
          ): sap.ui.vk.threejs.DetailView;
          /**
           * Sets a new value for property {@link #getMetadata metadata}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `[object Object]`.
           */
          setMetadata(
            /**
             * New value for property `metadata`
             */
            oMetadata: any
          ): sap.ui.vk.threejs.DetailView;
          /**
           * Sets a new value for property {@link #getName name}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `empty string`.
           */
          setName(
            /**
             * New value for property `name`
             */
            sName: string
          ): sap.ui.vk.threejs.DetailView;
          /**
           * Sets a new value for property {@link #getOrigin origin}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `new THREE.Vector3(0, 0)`.
           */
          setOrigin(
            /**
             * New value for property `origin`
             */
            oOrigin: any
          ): sap.ui.vk.threejs.DetailView;
          /**
           * Sets a new value for property {@link #getShape shape}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `Box`.
           */
          setShape(
            /**
             * New value for property `shape`
             */
            sShape: any
          ): sap.ui.vk.threejs.DetailView;
          /**
           * Sets a new value for property {@link #getSize size}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `new THREE.Vector3(0.5, 0.5)`.
           */
          setSize(
            /**
             * New value for property `size`
             */
            oSize: any
          ): sap.ui.vk.threejs.DetailView;
          /**
           * Sets a new value for property {@link #getType type}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `DetailView`.
           */
          setType(
            /**
             * New value for property `type`
             */
            sType: any
          ): sap.ui.vk.threejs.DetailView;
          /**
           * Sets a new value for property {@link #getVeId veId}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `[object Object]`.
           */
          setVeId(
            /**
             * New value for property `veId`
             */
            oVeId: any
          ): sap.ui.vk.threejs.DetailView;
        }
        /**
         * @EXPERIMENTAL (since 1.60.0)
         *
         * Provides the interface for the material.
         */
        class Material extends sap.ui.vk.Material {
          /**
           * Constructor for a new Material.
           */
          constructor();

          /**
           * Creates a new subclass of class sap.ui.vk.threejs.Material with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.Material.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.ui.vk.threejs.Material.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
        }
        /**
         * Provides the ability to explore a Scene object's node structure.
         *
         * The objects of this class should not be created directly, and should only be created via a call to {@link
         * sap.ui.vk.Scene#getDefaultNodeHierarchy sap.ui.vk.Scene#getDefaultNodeHierarchy}.
         */
        class NodeHierarchy extends sap.ui.vk.NodeHierarchy {
          /**
           * Constructor for a new NodeHierarchy.
           */
          constructor();

          /**
           * Creates a layer proxy object.
           *
           * The layer proxy object must be destroyed with the {@link #destroyLayerProxy destroyLayerProxy} method.
           */
          // @ts-ignore
          createLayerProxy(
            /**
             * The layer ID for which to create a proxy object.
             */
            layerId: string
          ): sap.ui.vk.LayerProxy;
          /**
           * @SINCE 1.48.0
           *
           * Creates a new node.
           */
          // @ts-ignore
          createNode(
            /**
             * The reference object of the parent node where the created node is added to. If equals `null` the newly
             * created node is a top level node.
             */
            parentNode: any,
            /**
             * The name of the new node.
             */
            name: string,
            /**
             * The created node is added before this specified node. If equals `null` the newly created node is added
             * at the end of the parent's list of nodes.
             */
            insertBeforeNode: any
          ): any;
          /**
           * @SINCE 1.48.0
           *
           * Creates a copy of an existing node.
           */
          // @ts-ignore
          createNodeCopy(
            /**
             * The reference object of the node to copy.
             */
            nodeToCopy: any,
            /**
             * The reference object of the parent node where the created node is added to. If equals `null` the newly
             * created node is a top level node.
             */
            parentNode: any,
            /**
             * The name of the new node.
             */
            name: string,
            /**
             * The created node is added before this specified node. If equals `null` the newly created node is added
             * at the end of the parent's list of nodes.
             */
            insertBeforeNode: any
          ): any;
          /**
           * Creates a node proxy object.
           *
           * The node proxy object must be destroyed with the {@link #destroyNodeProxy destroyNodeProxy} method.
           */
          // @ts-ignore
          createNodeProxy(
            /**
             * The reference object for which to create a proxy object.
             */
            nodeRef: any
          ): sap.ui.vk.NodeProxy;
          /**
           * Destroys the layer proxy object.
           */
          // @ts-ignore
          destroyLayerProxy(
            /**
             * The layer proxy object.
             */
            layerProxy: sap.ui.vk.LayerProxy
          ): any;
          /**
           * Destroys the node proxy object.
           */
          // @ts-ignore
          destroyNodeProxy(
            /**
             * The node proxy object.
             */
            nodeProxy: sap.ui.vk.NodeProxy
          ): sap.ui.vk.NodeHierarchy;
          /**
           * Enumerates the ancestor nodes of a particular node in the Scene object.
           *
           * This method enumerates the ancestor nodes of a particular node, and then calls the `callback` function,
           * to which it passes the ancestor nodes to one by one.
           *  The BaseNodeProxy objects passed to `callback` are temporary objects, they are reset after each call
           * to the `callback` function.
           *  The ancestor nodes are enumerated starting from the top level node, and progresses down the node hierarchy.
           */
          // @ts-ignore
          enumerateAncestors(
            /**
             * The reference object of a node whose ancestore nodes we want enumerated.
             */
            nodeRef: any,
            /**
             * A function to call when the ancestor nodes are enumerated. The function takes one parameter of type {@link
             * sap.ui.vk.BaseNodeProxy}, or string if parameter `passNodeRef` parameter is `true`.
             */
            callback: Function,
            /**
             * Indicates whether to pass the node references of the ancestore nodes, or the whole node proxy to the
             * `callback` function.
             *  If `true`, then only the node references of the ancestor nodes are passed to the `callback` function.
             *
             *  If `false`, then the node proxies of the ancestor nodes are passed to the `callback` function.
             */
            passNodeRef?: boolean
          ): sap.ui.vk.NodeHierarchy;
          /**
           * Enumerates the child nodes of a particular node in the Scene object.
           *
           * This method gets the child nodes of a particular node, and then calls the `callback` function to which
           * it passes the child nodes to one by one.
           *  The `BaseNodeProxy` objects passed to the `callback` fuction are temporary objects, which are reset
           * after each call to the `callback` function.
           */
          // @ts-ignore
          enumerateChildren(
            /**
             * The reference object of a node whose child nodes we want enumerated.
             *  When `nodeRef` is specified, the child nodes of this node are enumerated.
             *  When no `nodeRef` is specified, only the top level nodes are enumerated.
             */
            nodeRef: any,
            /**
             * A function to call when the child nodes are enumerated. The function takes one parameter of type {@link
             * sap.ui.vk.BaseNodeProxy}, or string if parameter `passNodeRef` parameter is `true`.
             */
            callback: Function,
            /**
             * Indicates whether to enumerate the child nodes if the node is closed.
             *  If `true`, the children of that closed node will be enumerated
             *  If `false`, the children of that node will not be enumerated
             */
            stepIntoClosedNodes?: boolean,
            /**
             * Indicates whether to pass the node references of the child nodes, or the whole node proxy to the `callback`
             * function.
             *  If `true`, then only the node references of the child nodes are passed to the `callback` function.
             *  If `false`, then the node proxies created from the child node references are passed to the `callback`
             * function.
             */
            passNodeRef?: boolean
          ): sap.ui.vk.NodeHierarchy;
          /**
           * Creates a new subclass of class sap.ui.vk.threejs.NodeHierarchy with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.NodeHierarchy.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Finds nodes in a scene via node name.
           */
          // @ts-ignore
          findNodesByName(
            /**
             * JSON object containing the search parameters.
             *  The following example shows what the structure of the `query` object should look like:
             * ```javascript
             * query = {
             * 	value: string | string[],
             * 	predicate: "equals" | "contains" | "startsWith",
             * 	caseSensitive: true | false
             * }```
             *
             *
             * 	 -  **query.value**
             *  A string or an array of strings containing the name of a node or names of nodes. If no value is specified,
             * then all nodes in the scene will be returned.
             *  The following example shows a single string being passed in:
             * ```javascript
             * value: "Box #14"```
             *  The following example shows an array of strings being passed in:
             * ```javascript
             * value: ["Box #3", "box #4", "BOX #5"]```
             *
             * 	 -  **query.predicate**
             *  Represents a search mode. The available search modes are `"equals"`, `"contains"`, and `"startsWith"`.
             *
             *  Using `"equals"` will search for nodes with names that exactly match the provided string or array of
             * strings.
             *  Using `"contains"` will search for nodes with names containing all or part of the provided string or
             * array of strings.
             *  Using `"startsWith"` will search for nodes with names starting with the provided string or array of
             * strings.
             *  If no value is specified, the search mode will default to `"equals"`.
             *
             *
             * 	 -  **query.caseSensitive**
             *  Indicates whether the search should be case sensitive or not.
             *  If `true`, the search will be case sensitive, and `false` indicates otherwise.
             *  If no value is specified, `caseSensitive` will default to `false` (that is, the search will be a case-insensitive
             * search).
             */
            query: object
          ): any;
          /**
           * Returns a list of reference objects belonging to the ancestors of a particular node.
           */
          // @ts-ignore
          getAncestors(
            /**
             * The reference object of the node whose ancestors will be returned.
             */
            nodeRef: any
          ): any[];
          /**
           * Returns a list of reference objects belonging to the children of a particular node.
           */
          // @ts-ignore
          getChildren(
            /**
             * The reference object of the node whose children will be returned. If `nodeRef` is not passed to the `getChildren`
             * function, the reference objects of the root nodes will be returned.
             */
            nodeRef: any,
            /**
             * Indicates whether to return only the child nodes of a closed node or not. If `true`, then the
             * children of that closed node will be returned. If `false`, then the children of that closed node
             * will not be returned.
             */
            stepIntoClosedNodes?: boolean
          ): any[];
          /**
           * Returns a list of hotspot IDs.
           */
          // @ts-ignore
          getHotspotNodeIds(): string[];
          /**
           * Returns a list of layer IDs.
           */
          // @ts-ignore
          getLayers(): string[];
          /**
           * Returns a metadata object for class sap.ui.vk.threejs.NodeHierarchy.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets the Scene object the node hierarchy belongs to.
           */
          // @ts-ignore
          getScene(): sap.ui.vk.Scene;
          /**
           * Gets the scene reference that this NodeHierarchy object wraps.
           */
          // @ts-ignore
          getSceneRef(): any;
          /**
           * @SINCE 1.48.0
           *
           * Deletes a node and destroys it.
           */
          // @ts-ignore
          removeNode(
            /**
             * The reference object of a node or an array of nodes to destroy.
             */
            nodeRef: any
          ): sap.ui.vk.NodeHierarchy;
        }
        /**
         * Provides a proxy object to the node in the node hierarchy.
         *
         * Objects of this type should only be created with the {@link sap.ui.vk.NodeHierarchy#createNodeProxy sap.ui.vk.NodeHierarchy.createNodeProxy}
         * method. and destroyed with the {@link sap.ui.vk.NodeHierarchy#destroyNodeProxy sap.ui.vk.NodeHierarchy.destroyNodeProxy}
         * method.
         */
        class NodeProxy extends sap.ui.vk.NodeProxy {
          /**
           * Constructor for a new NodeProxy.
           */
          constructor();

          /**
           * Assign material to all mesh nodes contained in the current node
           */
          assignMaterial(
            /**
             * Material to be assigned.
             */
            value: sap.ui.vk.Material
          ): sap.ui.vk.NodeHierarchy;
          /**
           * Retrieve all materials defined in the current node
           */
          enumerateMaterials(
            /**
             * If `true` then include materials defined in all child nodes
             */
            recursive: boolean
          ): sap.ui.vk.Material[];
          /**
           * Creates a new subclass of class sap.ui.vk.threejs.NodeProxy with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.NodeProxy.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * get local rotation represented by axis and angle
           */
          // @ts-ignore
          getLocalRotationInAngleAxis(): number[];
          /**
           * get local rotation in Euler form
           */
          // @ts-ignore
          getLocalRotationInEuler(): number[];
          /**
           * get local rotation represented by quaternion
           */
          // @ts-ignore
          getLocalRotationInQuaternion(): number[];
          /**
           * get local scale vector
           */
          // @ts-ignore
          getLocalScale(): number[];
          /**
           * get local translate vector
           */
          // @ts-ignore
          getLocalTranslate(): number[];
          /**
           * Returns a metadata object for class sap.ui.vk.threejs.NodeProxy.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Replace material with another material
           */
          replaceMaterial(
            /**
             * Material to be replaced.
             */
            materialToReplace: sap.ui.vk.Material,
            /**
             * Material replacement.
             */
            material: sap.ui.vk.Material
          ): sap.ui.vk.NodeHierarchy;
        }
        /**
         * @SINCE 1.52.0
         *
         * Provides the interface for the camera.
         */
        class OrthographicCamera extends sap.ui.vk.OrthographicCamera {
          /**
           * Constructor for a new OrthographicCamera.
           */
          constructor();

          /**
           * Adjust the camera near and far clipping planes to include the entire specified bounding box
           */
          adjustClipPlanes(
            /**
             * Bounding box
             */
            boundingBox: any
          ): sap.ui.vk.threejs.OrthographicCamera;
          /**
           * Adjust the camera zoom to include the entire specified bounding box
           */
          adjustZoom(
            /**
             * Bounding box
             */
            boundingBox: any
          ): sap.ui.vk.threejs.OrthographicCamera;
          /**
           * Creates a new subclass of class sap.ui.vk.threejs.OrthographicCamera with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.OrthographicCamera.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.ui.vk.threejs.OrthographicCamera.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Updates the camera properties with width and height of viewport
           */
          update(
            /**
             * width of the viewport
             */
            width: number,
            /**
             * height of the viewport
             */
            height: number
          ): void;
        }
        /**
         * @SINCE 1.52.0
         *
         * Provides the interface for the camera.
         */
        class PerspectiveCamera extends sap.ui.vk.PerspectiveCamera {
          /**
           * Constructor for a new PerspectiveCamera.
           */
          constructor();

          /**
           * Adjust the camera near and far clipping planes to include the entire specified bounding box
           */
          adjustClipPlanes(
            /**
             * Bounding box
             */
            boundingBox: any
          ): sap.ui.vk.threejs.PerspectiveCamera;
          /**
           * Creates a new subclass of class sap.ui.vk.threejs.PerspectiveCamera with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.PerspectiveCamera.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.ui.vk.threejs.PerspectiveCamera.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Updates the camera properties with width and height of viewport
           */
          update(
            /**
             * width of the viewport
             */
            width: number,
            /**
             * height of the viewport
             */
            height: number
          ): void;
        }
        /**
         * Provides the interface for the 3D model.
         *
         * The objects of this class should not be created directly.
         */
        class Scene extends sap.ui.vk.Scene {
          /**
           * Constructor for a new Scene.
           */
          constructor(
            /**
             * The three.js scene object.
             */
            scene: any
          );

          /**
           * Gets all materials defined in scene nodes
           */
          enumerateMaterials(): sap.ui.vk.Material[];
          /**
           * Creates a new subclass of class sap.ui.vk.threejs.Scene with name `sClassName` and enriches it with the
           * information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.Scene.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets the default node hierarchy in the Scene object.
           */
          // @ts-ignore
          getDefaultNodeHierarchy(): sap.ui.vk.NodeHierarchy;
          /**
           * Gets the unique ID of the Scene object.
           */
          // @ts-ignore
          getId(): string;
          /**
           * Returns a metadata object for class sap.ui.vk.threejs.Scene.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets the scene reference for the Scene object.
           */
          // @ts-ignore
          getSceneRef(): any;
          /**
           * Gets the persistent ID from node reference.
           */
          nodeRefToPersistentId(
            /**
             * The reference to the node or the array of references to the nodes.
             */
            nodeRefs: any | any
          ): string | string[];
          /**
           * Gets the node reference from persistent ID.
           */
          persistentIdToNodeRef(
            /**
             * The persistent ID or the array of the persistent IDs.
             */
            pIDs: string | string[]
          ): any | any;
        }
        /**
         * @EXPERIMENTAL (since 1.60.0)
         *
         * Provides the interface for the material.
         */
        class Texture extends sap.ui.vk.Texture {
          /**
           * Constructor for a new Material.
           */
          constructor();

          /**
           * Creates a new subclass of class sap.ui.vk.threejs.Texture with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.Texture.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.ui.vk.threejs.Texture.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
        }

        // @ts-ignore - static 'getMetadata' inheritance issue
        class Thrustline extends sap.ui.base.ManagedObject {
          /**
           * Constructor for a new Thrustline.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor();

          /**
           * Creates a new subclass of class sap.ui.vk.threejs.Thrustline with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets current value of property {@link #getDepthTest depthTest}.
           *
           * Default value is `true`.
           */
          getDepthTest(): boolean;
          /**
           * Gets current value of property {@link #getItems items}.
           */
          getItems(): object[];
          /**
           * Gets current value of property {@link #getMaterial material}.
           */
          getMaterial(): object;
          /**
           * Returns a metadata object for class sap.ui.vk.threejs.Thrustline.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getNode node}.
           */
          getNode(): object;
          /**
           * Gets current value of property {@link #getPrincipleAxis principleAxis}.
           *
           * Default value is `new THREE.Vector3(0, 0, 0)`.
           */
          getPrincipleAxis(): object;
          /**
           * Gets current value of property {@link #getRenderOrder renderOrder}.
           *
           * Default value is `0`.
           */
          getRenderOrder(): number;
          /**
           * Gets current value of property {@link #getSegments segments}.
           */
          getSegments(): object[];
          /**
           * Sets a new value for property {@link #getDepthTest depthTest}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setDepthTest(
            /**
             * New value for property `depthTest`
             */
            bDepthTest: boolean
          ): sap.ui.vk.threejs.Thrustline;
          /**
           * Sets a new value for property {@link #getItems items}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setItems(
            /**
             * New value for property `items`
             */
            sItems: object[]
          ): sap.ui.vk.threejs.Thrustline;
          /**
           * Sets a new value for property {@link #getMaterial material}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setMaterial(
            /**
             * New value for property `material`
             */
            oMaterial: object
          ): sap.ui.vk.threejs.Thrustline;
          /**
           * Sets a new value for property {@link #getNode node}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setNode(
            /**
             * New value for property `node`
             */
            oNode: object
          ): sap.ui.vk.threejs.Thrustline;
          /**
           * Sets a new value for property {@link #getPrincipleAxis principleAxis}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `new THREE.Vector3(0, 0, 0)`.
           */
          setPrincipleAxis(
            /**
             * New value for property `principleAxis`
             */
            oPrincipleAxis: object
          ): sap.ui.vk.threejs.Thrustline;
          /**
           * Sets a new value for property {@link #getRenderOrder renderOrder}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `0`.
           */
          setRenderOrder(
            /**
             * New value for property `renderOrder`
             */
            iRenderOrder: number
          ): sap.ui.vk.threejs.Thrustline;
          /**
           * Sets a new value for property {@link #getSegments segments}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setSegments(
            /**
             * New value for property `segments`
             */
            sSegments: object[]
          ): sap.ui.vk.threejs.Thrustline;
        }
        /**
         * Provides a base class control for three js canvas.
         */
        class Viewport extends sap.ui.vk.ViewportBase {
          /**
           * Constructor for a ThreeJs viewport.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor();

          /**
           * @SINCE 1.52.0
           *
           * Activates the view based on view object passed
           */
          // @ts-ignore
          activateView(
            /**
             * View object definition
             */
            view: sap.ui.vk.View,
            /**
             * Whether or not to play animations
             */
            notPlayingAnimations: boolean
          ): sap.ui.vk.threejs.Viewport;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:cameraChanged cameraChanged} event of this `sap.ui.vk.threejs.Viewport`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.threejs.Viewport` itself.
           */
          attachCameraChanged(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.threejs.Viewport` itself
             */
            oListener?: object
          ): sap.ui.vk.threejs.Viewport;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:frameRenderingFinished frameRenderingFinished}
           * event of this `sap.ui.vk.threejs.Viewport`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.threejs.Viewport` itself.
           */
          attachFrameRenderingFinished(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.threejs.Viewport` itself
             */
            oListener?: object
          ): sap.ui.vk.threejs.Viewport;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:cameraChanged cameraChanged} event of this
           * `sap.ui.vk.threejs.Viewport`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachCameraChanged(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.vk.threejs.Viewport;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:frameRenderingFinished frameRenderingFinished}
           * event of this `sap.ui.vk.threejs.Viewport`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachFrameRenderingFinished(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.vk.threejs.Viewport;
          /**
           * Creates a new subclass of class sap.ui.vk.threejs.Viewport with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.ViewportBase.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:cameraChanged cameraChanged} to attached listeners.
           */
          fireCameraChanged(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * Returns a new camera position.
               */
              position?: number[];
              /**
               * Returns a new camera rotation quaternion.
               */
              quaternion?: number[];
              /**
               * Returns a new camera orthographic zoom factor.
               */
              zoom?: number;
            }
          ): sap.ui.vk.threejs.Viewport;
          /**
           * Fires event {@link #event:frameRenderingFinished frameRenderingFinished} to attached listeners.
           */
          fireFrameRenderingFinished(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.ui.vk.threejs.Viewport;
          /**
           * Get current view - remembered when activateView function is called
           */
          getCurrentView(): sap.ui.vk.View;
          /**
           * Returns viewport content as an image of desired size.
           */
          getImage(
            /**
             * Requested image width in pixels. Allowed values are 8 to 2048, default is 16
             */
            width: number,
            /**
             * Requested image height in pixels. Allowed values are 8 to 2048, default is 16
             */
            height: number,
            /**
             * The sap.ui.core.CSSColor to be used for top background color
             */
            topColor: string,
            /**
             * The sap.ui.core.CSSColor to be used for bottom background color
             */
            bottomColor: string,
            /**
             * Include selected nodes
             */
            includeSelection: boolean
          ): string;
          /**
           * Returns a metadata object for class sap.ui.vk.threejs.Viewport.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets position and size of the viewport square. The information can be used for making calculations when
           * restoring Redlining elements.
           */
          getOutputSize(): object;
          /**
           * Gets the Viewport Scene
           */
          getScene(): sap.ui.vk.threejs.Scene;
          /**
           * Retrieves information about the current camera view in the scene, and saves the information in a JSON-like
           * object. The information can then be used at a later time to restore the scene to the same camera view
           * using the {@link sap.ui.vk.Viewport#setViewInfo setViewInfo} method.
           */
          getViewInfo(
            /**
             * Query object which indicates what information to be retrieved.
             */
            query?: {
              /**
               * Indicator to retrieve camera information.
               */
              camera?: {
                /**
                 * Indicator to retrieve camera view and projection matrices.
                 */
                matrices?: boolean;
                /**
                 * Indicator to retrieve the transition camera properties instead of regular one's.
                 */
                useTransitionCamera?: boolean;
              };

              /**
               * Indicator to retrieve visibility information.
               */
              visibility?: {
                /**
                 * Indicator to retrieve the complete visibility definition or just the difference.
                 */
                mode?: any;
              };
            }
          ): object;
          /**
           * Queues a command for execution during the rendering cycle. All gesture operations should be called using
           * this method.
           */
          queueCommand(
            /**
             * The command to be executed.
             */
            command: Function
          ): sap.ui.vk.threejs.Viewport;
          /**
           * Sets the camera for the Viewport
           */
          // @ts-ignore
          setCamera(
            /**
             * parameter
             */
            camera: sap.ui.vk.Camera
          ): sap.ui.vk.threejs.Viewport;
          /**
           * @deprecated (since 1.50.0)
           *
           * Attaches the scene to the Viewport for rendering.
           */
          setScene(
            /**
             * The scene to attach to the Viewport.
             */
            scene: sap.ui.vk.threejs.Scene
          ): sap.ui.vk.threejs.Viewport;
          /**/
          setShouldRenderFrame(): sap.ui.vk.threejs.Viewport;
          /**
           * Sets the current scene to use the camera view information acquired from the {@link sap.ui.vk.Viewport#getViewInfo
           * getViewInfo} method.
           *  Internally, the `setViewInfo` method activates certain steps at certain animation times, and then changes
           * the camera position, rotation and field of view (FOV) / zoom factor.
           */
          setViewInfo(
            /**
             * A JSON-like object containing view information acquired using the {@link sap.ui.vk.Viewport#getViewInfo
             * getViewInfo} method.
             */
            viewInfo: {
              /**
               * A JSON-like object containing the camera information.
               */
              camera?: {
                /**
                 * Rotation defined in {@link https://en.wikipedia.org/wiki/Aircraft_principal_axes Aircraft principal axes}.
                 */
                rotation: {
                  /**
                   * Angle around the vertical axis in degrees.
                   */
                  yaw: number;
                  /**
                   * Angle around the lateral axis in degrees.
                   */
                  pitch: number;
                  /**
                   * Angle around the longitudinal axis in degrees.
                   */
                  roll: number;
                };

                /**
                 * Position defined in 3-dimensional space.
                 */
                position: {
                  /**
                   * X coordinate.
                   */
                  x: number;
                  /**
                   * Y coordinate.
                   */
                  y: number;
                  /**
                   * Z coordinate.
                   */
                  z: number;
                };

                /**
                 * Camera field of view binding type.
                 */
                bindingType: any;
                /**
                 * Camera projection type.
                 */
                projectionType: any;
                /**
                 * Camera field of view in degrees. Applicable only to perspective cameras.
                 */
                fieldOfView: number;
                /**
                 * Camera zoom factor. Applicable only to orthographic cameras.
                 */
                zoomFactor: number;
              };

              /**
               * A JSON-like object containing the animation information.
               */
              animation?: {
                /**
                 * Step VE ID. If it is omitted then procedure and step indices are used.
                 */
                stepVeId?: string;
                /**
                 * Procedure index in the list of procedures.
                 */
                procedureIndex?: number;
                /**
                 * Step index in the list of steps in the procedure.
                 */
                stepIndex?: number;
                /**
                 * Time at which to activate the step.
                 */
                animationTime?: number;
              };

              /**
               * A JSON-like object containing the visibility information.
               */
              visibility?: {
                /**
                 * If the mode equals to {@link sap.ui.vk.VisibilityMode.Complete complete} then the visible and hidden
                 * fields are defined. If the mode equals {@link sap.ui.vk.VisibilityMode.Differences differences} then
                 * the changes field is defined.
                 */
                mode: any;
                /**
                 * List of Ids of visible nodes.
                 */
                visible: string[];
                /**
                 * List of Ids of hidden nodes.
                 */
                hidden: string[];
                /**
                 * List of Ids of nodes with inverted visibility.
                 */
                changes: string[];
              };
            },
            /**
             * Fly-to animation duration in seconds.
             */
            flyToDuration?: number
          ): sap.ui.vk.Viewport;
          /**
           * Zooms the scene to a bounding box created from a particular set of nodes.
           */
          zoomTo(
            /**
             * What set of nodes to zoom to.
             */
            what: any | any,
            /**
             * Is used if what == (sap.ui.vk.ZoomTo.Node || ZoomTo.NodeSetIsolation)
             */
            nodeRef: any,
            /**
             * Time to perform the "fly to" animation. Set to 0 to do this immediately.
             */
            crossFadeSeconds: number,
            /**
             * Margin. Set to 0 to zoom to the entire screen.
             */
            margin: number
          ): sap.ui.vk.Viewport;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:cameraChanged cameraChanged} event of this `sap.ui.vk.threejs.Viewport`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.threejs.Viewport` itself.
           */
          attachCameraChanged(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.threejs.Viewport` itself
             */
            oListener?: object
          ): sap.ui.vk.threejs.Viewport;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:frameRenderingFinished frameRenderingFinished}
           * event of this `sap.ui.vk.threejs.Viewport`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.threejs.Viewport` itself.
           */
          attachFrameRenderingFinished(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.threejs.Viewport` itself
             */
            oListener?: object
          ): sap.ui.vk.threejs.Viewport;
        }
        /**
         * @SINCE 1.32.0
         *
         * Manages the visibility and selection states of nodes in the scene.
         */
        class ViewStateManager extends sap.ui.vk.ViewStateManagerBase {
          /**
           * Constructor for a new ViewStateManager.
           */
          constructor(
            /**
             * ID for the new ViewStateManager object. Generated automatically if no ID is given.
             */
            sId?: string,
            /**
             * Initial settings for the new ViewStateManager object.
             */
            mSettings?: ViewStateManagerOpts
          );

          /**
           * Enumerates IDs of the selected nodes.
           */
          // @ts-ignore
          enumerateSelection(
            /**
             * A function to call when the selected nodes are enumerated. The function takes one parameter of type `string`.
             */
            callback: Function
          ): sap.ui.vk.ViewStateManager;
          /**
           * Creates a new subclass of class sap.ui.vk.threejs.ViewStateManager with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.ViewStateManagerBase.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets the default highlighting color
           */
          getHighlightColor(
            /**
             * This flag indicates to return the highlighting color in the ABGR format, if it equals `false` then the
             * color is returned in the CSS color format.
             */
            inABGRFormat?: boolean
          ): sap.ui.core.CSSColor | string | number;
          /**
           * Returns a metadata object for class sap.ui.vk.threejs.ViewStateManager.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets the NodeHierarchy object associated with this ViewStateManager object.
           */
          // @ts-ignore
          getNodeHierarchy(): sap.ui.vk.NodeHierarchy;
          /**
           * Gets the opacity of the node.
           *
           * If a single node is passed to the method then a single value is returned.
           *  If an array of nodes is passed to the method then an array of values is returned.
           */
          // @ts-ignore
          getOpacity(
            /**
             * The node reference or the array of node references.
             */
            nodeRefs: any | any[]
          ): number | number[];
          /**
           * Gets the selection state of the node.
           *
           * If a single node reference is passed to the method then a single selection state is returned.
           *  If an array of node references is passed to the method then an array of selection states is returned.
           */
          // @ts-ignore
          getSelectionState(
            /**
             * The node reference or the array of node references.
             */
            nodeRefs: any | any[]
          ): boolean | boolean[];
          /**
           * Gets if showing the bounding box when nodes are selected
           */
          getShowSelectionBoundingBox(): boolean;
          /**
           * Gets the tint color of the node.
           *
           * If a single node reference is passed to the method then a single value is returned.
           *  If an array of node references is passed to the method then an array of values is returned.
           */
          // @ts-ignore
          getTintColor(
            /**
             * The node reference or the array of node references.
             */
            nodeRefs: any | any[],
            /**
             * This flag indicates to return the tint color in the ABGR format, if it equals `false` then the color
             * is returned in the CSS color format.
             */
            inABGRFormat?: boolean
          ): sap.ui.core.CSSColor | sap.ui.core.CSSColor[] | number | number[];
          /**
           * Gets the visibility changes in the current ViewStateManager object.
           */
          // @ts-ignore
          getVisibilityChanges(): string[];
          /**
           * Gets the visibility state of nodes.
           *
           * If a single node is passed to the method then a single visibility state is returned.
           *  If an array of nodes is passed to the method then an array of visibility states is returned.
           */
          // @ts-ignore
          getVisibilityState(
            /**
             * The node reference or the array of node references.
             */
            nodeRefs: any | any[]
          ): boolean | boolean[];
          /**
           * Sets the default highlighting color
           */
          setHighlightColor(
            /**
             * The new highlighting color. The value can be defined as a string in the CSS color format or as an integer
             * in the ABGR format. If `null` is passed then the tint color is reset and the node's own tint color should
             * be used.
             */
            color: any | string | number
          ): sap.ui.vk.ViewStateManager;
          /**
           * Sets the opacity of the nodes.
           */
          // @ts-ignore
          setOpacity(
            /**
             * The node reference or the array of node references.
             */
            nodeRefs: any | any[],
            /**
             * The new opacity of the nodes. If `null` is passed then the opacity is reset and the node's own opacity
             * should be used.
             */
            opacity: number | null,
            /**
             * The flags indicates if the change needs to propagate recursively to child nodes.
             */
            recursive?: boolean
          ): sap.ui.vk.ViewStateManager;
          /**
           * @deprecated (since 1.56.3)
           *
           * Sets the selection state of the nodes.
           */
          // @ts-ignore
          setSelectionState(
            /**
             * The node reference or the array of node references.
             */
            nodeRefs: any | any[],
            /**
             * The new selection state of the nodes.
             */
            selected: boolean,
            /**
             * The flags indicates if the change needs to propagate recursively to child nodes.
             */
            recursive: boolean,
            /**
             * The flag to suppres selectionChanged event.
             */
            blockNotification: boolean
          ): sap.ui.vk.ViewStateManager;
          /**
           * Sets or resets the selection state of the nodes.
           */
          // @ts-ignore
          setSelectionStates(
            /**
             * The node reference or the array of node references of selected nodes.
             */
            selectedNodeRefs: any | any[],
            /**
             * The node reference or the array of node references of unselected nodes.
             */
            unselectedNodeRefs: any | any[],
            /**
             * The flags indicates if the change needs to propagate recursively to child nodes.
             */
            recursive: boolean,
            /**
             * The flag to suppres selectionChanged event.
             */
            blockNotification: boolean
          ): sap.ui.vk.ViewStateManager;
          /**
           * Sets if showing the bounding box when nodes are selected
           */
          setShowSelectionBoundingBox(
            /**
             * `true` if bounding boxes of selected nodes are shown, `false` otherwise.
             */
            val: boolean
          ): void;
          /**
           * Sets the tint color of the nodes.
           */
          // @ts-ignore
          setTintColor(
            /**
             * The node reference or the array of node references.
             */
            nodeRefs: any | any[],
            /**
             * The new tint color of the nodes. The value can be defined as a string in the CSS color format or as an
             * integer in the ABGR format. If `null` is passed then the tint color is reset and the node's own tint
             * color should be used.
             */
            tintColor: any | number | null,
            /**
             * This flag indicates if the change needs to propagate recursively to child nodes.
             */
            recursive?: boolean
          ): sap.ui.vk.ViewStateManager;
          /**
           * Sets the visibility state of the nodes.
           */
          // @ts-ignore
          setVisibilityState(
            /**
             * The node reference or the array of node references.
             */
            nodeRefs: any | any[],
            /**
             * The new visibility state of the nodes.
             */
            visible: boolean,
            /**
             * The flags indicates if the change needs to propagate recursively to child nodes.
             */
            recursive: boolean
          ): sap.ui.vk.ViewStateManager;
        }
      }

      namespace tools {
        interface AnchorPointToolOpts extends sap.ui.vk.tools.ToolOpts {
          /**
           * If set to true values will change in round number increments instead of continual change
           */
          enableStepping?: boolean;

          /**
           * Display text box with current value, which can also be used to directly modify the value
           */
          showEditingUI?: boolean;

          /**
           * If set to true then rotation of anchor point will be enabled
           */
          enableRotation?: boolean;

          /**
           * This event will be fired when movement occurs.
           */
          moving?: Function;

          /**
           * This event will be fired when movement finished.
           */
          moved?: Function;

          /**
           * This event will be fired when rotation occurs.
           */
          rotating?: Function;

          /**
           * This event will be fired when rotation finished.
           */
          rotated?: Function;
        }

        interface AnchorPointToolGizmoOpts extends sap.ui.vk.tools.GizmoOpts {}

        interface CrossSectionToolOpts extends sap.ui.vk.tools.ToolOpts {
          /**
           * Display text box with current value, which can also be used to directly modify the value
           */
          showEditingUI?: boolean;
        }

        interface CrossSectionToolGizmoOpts extends sap.ui.vk.tools.GizmoOpts {}

        interface GizmoOpts extends sap.ui.core.ControlOpts {}

        interface HitTestToolOpts extends sap.ui.vk.tools.ToolOpts {
          /**
           * Indicates what schema the tool should use to extract IDs from hit objects
           */
          IdMode?: any;

          /**
           * This event will be fired when 3D object is detected under hit position.
           */
          hit?: Function;
        }

        interface MoveToolOpts extends sap.ui.vk.tools.ToolOpts {
          /**
           * Select coordinate system in which this tool operates. Can be Local, World, Screen or Custom
           */
          coordinateSystem?: any;

          /**
           * If set to true values will change in round number increments instead of continual change
           */
          enableStepping?: boolean;

          /**
           * Display text box with current value, which can also be used to directly modify the value
           */
          showEditingUI?: boolean;

          /**
           * This event will be fired when movement occurs.
           */
          moving?: Function;

          /**
           * This event will be fired when movement finished.
           */
          moved?: Function;

          /**
           * This event will be fired when the coordinate system changes.
           */
          coordinateSystemChanged?: Function;
        }

        interface MoveToolGizmoOpts extends sap.ui.vk.tools.GizmoOpts {}

        interface RectSelectToolOpts extends sap.ui.vk.tools.ToolOpts {
          /**
           * If set to true then this tool will remove selected nodes from the selection set. Default is to always
           * add them to the selection
           */
          subtractMode?: boolean;
        }

        interface RotateOrbitToolOpts extends sap.ui.vk.tools.ToolOpts {
          /**
           * This event will be fired when rotation occurs.
           */
          rotate?: Function;
        }

        interface RotateToolOpts extends sap.ui.vk.tools.ToolOpts {
          /**
           * Select coordinate system in which this tool operates. Can be Local, World, Screen or Custom
           */
          coordinateSystem?: any;

          /**
           * If set to true values will change in round number increments instead of continual change
           */
          enableStepping?: boolean;

          /**
           * Display text box with current value, which can also be used to directly modify the value
           */
          showEditingUI?: boolean;

          /**
           * This event will be fired when rotation occurs.
           */
          rotating?: Function;

          /**
           * This event will be fired when rotation finished.
           */
          rotated?: Function;

          /**
           * This event will be fired when the coordinate system changes.
           */
          coordinateSystemChanged?: Function;
        }

        interface RotateToolGizmoOpts extends sap.ui.vk.tools.GizmoOpts {}

        interface RotateTurntableToolOpts extends sap.ui.vk.tools.ToolOpts {
          /**
           * This event will be fired when rotation occurs.
           */
          rotate?: Function;
        }

        interface ScaleToolOpts extends sap.ui.vk.tools.ToolOpts {
          /**
           * Select coordinate system in which this tool operates. Can be Local, World, Screen or Custom
           */
          coordinateSystem?: any;

          /**
           * If set to true then this tool will enable scaling along a single axis, otherwise it will
           * scale objects along all three axes proportionaly
           */
          nonUniformScaleEnabled?: boolean;

          /**
           * If set to true values will change in round number increments instead of continual change
           */
          enableStepping?: boolean;

          /**
           * Display text box with current value, which can also be used to directly modify the value
           */
          showEditingUI?: boolean;

          /**
           * This event will be fired when scaling occurs.
           */
          scaling?: Function;

          /**
           * This event will be fired when scaling finished.
           */
          scaled?: Function;

          /**
           * This event will be fired when the coordinate system changes.
           */
          coordinateSystemChanged?: Function;
        }

        interface ScaleToolGizmoOpts extends sap.ui.vk.tools.GizmoOpts {}

        interface SceneOrientationToolOpts extends sap.ui.vk.tools.ToolOpts {
          enablePredefinedViews?: boolean;

          enableInitialView?: boolean;
        }

        interface SceneOrientationToolGizmoOpts
          extends sap.ui.vk.tools.GizmoOpts {}

        interface ToolOpts extends sap.ui.core.ElementOpts {
          targetViewportType?: any;

          /**
           * GUID identifier for the tool to prevent naming conflicts.
           */
          toolid?: string;

          /**
           * Used to control the tool rendering and interaction pipeline.
           */
          active?: boolean;

          /**
           * Used to decide whether this tool should be enabled for the target viewport.
           */
          footprint?: string[];

          enabled?: Function;

          /**
           * sap.ui.vk.tools.Gizmo owned by this control and used for rendering floating UI
           */
          gizmo?: sap.ui.vk.tools.Gizmo;

          /**
           * Control into which the gizmo is intended to render .
           */
          gizmoContainer?: sap.ui.core.Control | string;
        }

        interface TooltipToolOpts extends sap.ui.vk.tools.ToolOpts {
          /**
           * This event will be fired when mouse hover occurs.
           */
          hover?: Function;
        }

        interface TooltipToolGizmoOpts extends sap.ui.vk.tools.GizmoOpts {}
        /**
         * Tool used to define an anchor point and orientation in 3D space which can be used to rotate, move or
         * scale one or more selected objects
         */
        class AnchorPointTool extends sap.ui.vk.tools.Tool {
          /**
           * Constructor for an AnchorPointTool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new tool instance. `sId`is generated automatically if no non-empty ID is given. Note: this
             * can be omitted, regardless of whether `mSettings` will be provided or not.
             */
            sId?: string,
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: AnchorPointToolOpts
          );

          /**
           * Attaches event handler `fnFunction` to the {@link #event:moved moved} event of this `sap.ui.vk.tools.AnchorPointTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.AnchorPointTool` itself.
           *
           * This event will be fired when movement finished.
           */
          attachMoved(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.AnchorPointTool` itself
             */
            oListener?: object
          ): sap.ui.vk.tools.AnchorPointTool;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:moving moving} event of this `sap.ui.vk.tools.AnchorPointTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.AnchorPointTool` itself.
           *
           * This event will be fired when movement occurs.
           */
          attachMoving(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.AnchorPointTool` itself
             */
            oListener?: object
          ): sap.ui.vk.tools.AnchorPointTool;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:rotated rotated} event of this `sap.ui.vk.tools.AnchorPointTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.AnchorPointTool` itself.
           *
           * This event will be fired when rotation finished.
           */
          attachRotated(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.AnchorPointTool` itself
             */
            oListener?: object
          ): sap.ui.vk.tools.AnchorPointTool;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:rotating rotating} event of this `sap.ui.vk.tools.AnchorPointTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.AnchorPointTool` itself.
           *
           * This event will be fired when rotation occurs.
           */
          attachRotating(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.AnchorPointTool` itself
             */
            oListener?: object
          ): sap.ui.vk.tools.AnchorPointTool;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:moved moved} event of this `sap.ui.vk.tools.AnchorPointTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachMoved(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.vk.tools.AnchorPointTool;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:moving moving} event of this `sap.ui.vk.tools.AnchorPointTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachMoving(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.vk.tools.AnchorPointTool;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:rotated rotated} event of this `sap.ui.vk.tools.AnchorPointTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachRotated(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.vk.tools.AnchorPointTool;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:rotating rotating} event of this `sap.ui.vk.tools.AnchorPointTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachRotating(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.vk.tools.AnchorPointTool;
          /**
           * Creates a new subclass of class sap.ui.vk.tools.AnchorPointTool with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.tools.Tool.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:moved moved} to attached listeners.
           */
          fireMoved(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              x?: number;

              y?: number;

              z?: number;
            }
          ): sap.ui.vk.tools.AnchorPointTool;
          /**
           * Fires event {@link #event:moving moving} to attached listeners.
           */
          fireMoving(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              x?: number;

              y?: number;

              z?: number;
            }
          ): sap.ui.vk.tools.AnchorPointTool;
          /**
           * Fires event {@link #event:rotated rotated} to attached listeners.
           */
          fireRotated(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              x?: number;

              y?: number;

              z?: number;
            }
          ): sap.ui.vk.tools.AnchorPointTool;
          /**
           * Fires event {@link #event:rotating rotating} to attached listeners.
           */
          fireRotating(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              x?: number;

              y?: number;

              z?: number;
            }
          ): sap.ui.vk.tools.AnchorPointTool;
          /**
           * Gets current value of property {@link #getEnableRotation enableRotation}.
           *
           * If set to true then rotation of anchor point will be enabled
           *
           * Default value is `false`.
           */
          getEnableRotation(): boolean;
          /**
           * Gets current value of property {@link #getEnableStepping enableStepping}.
           *
           * If set to true values will change in round number increments instead of continual change
           *
           * Default value is `false`.
           */
          getEnableStepping(): boolean;
          /**
           * Returns a metadata object for class sap.ui.vk.tools.AnchorPointTool.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getShowEditingUI showEditingUI}.
           *
           * Display text box with current value, which can also be used to directly modify the value
           *
           * Default value is `false`.
           */
          getShowEditingUI(): boolean;
          /**
           * Performs movement of the anchor point.
           */
          move(
            /**
             * Movement offset along x axis.
             */
            x?: number,
            /**
             * Movement offset along y axis.
             */
            y?: number,
            /**
             * Movement offset along z axis.
             */
            z?: number
          ): sap.ui.vk.tools.AnchorPointTool;
          /**
           * MOVE TO BASE Queues a command for execution during the rendering cycle. All gesture operations should
           * be called using this method.
           */
          queueCommand(
            /**
             * The command to be executed.
             */
            command: Function
          ): sap.ui.vk.tools.AnchorPointTool;
          /**
           * Performs rotation of the anchor point.
           */
          rotate(
            /**
             * Rotation angle around x axis in degrees.
             */
            x?: number,
            /**
             * Rotation angle around y axis in degrees.
             */
            y?: number,
            /**
             * Rotation angle around z axis in degrees.
             */
            z?: number
          ): sap.ui.vk.tools.AnchorPointTool;
          /**
           * Sets a new value for property {@link #getEnableRotation enableRotation}.
           *
           * If set to true then rotation of anchor point will be enabled
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setEnableRotation(
            /**
             * New value for property `enableRotation`
             */
            bEnableRotation: boolean
          ): sap.ui.vk.tools.AnchorPointTool;
          /**
           * Sets a new value for property {@link #getEnableStepping enableStepping}.
           *
           * If set to true values will change in round number increments instead of continual change
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setEnableStepping(
            /**
             * New value for property `enableStepping`
             */
            bEnableStepping: boolean
          ): sap.ui.vk.tools.AnchorPointTool;
          /**
           * Sets a new value for property {@link #getShowEditingUI showEditingUI}.
           *
           * Display text box with current value, which can also be used to directly modify the value
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setShowEditingUI(
            /**
             * New value for property `showEditingUI`
             */
            bShowEditingUI: boolean
          ): sap.ui.vk.tools.AnchorPointTool;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:moved moved} event of this `sap.ui.vk.tools.AnchorPointTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.AnchorPointTool` itself.
           *
           * This event will be fired when movement finished.
           */
          attachMoved(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.AnchorPointTool` itself
             */
            oListener?: object
          ): sap.ui.vk.tools.AnchorPointTool;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:moving moving} event of this `sap.ui.vk.tools.AnchorPointTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.AnchorPointTool` itself.
           *
           * This event will be fired when movement occurs.
           */
          attachMoving(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.AnchorPointTool` itself
             */
            oListener?: object
          ): sap.ui.vk.tools.AnchorPointTool;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:rotated rotated} event of this `sap.ui.vk.tools.AnchorPointTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.AnchorPointTool` itself.
           *
           * This event will be fired when rotation finished.
           */
          attachRotated(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.AnchorPointTool` itself
             */
            oListener?: object
          ): sap.ui.vk.tools.AnchorPointTool;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:rotating rotating} event of this `sap.ui.vk.tools.AnchorPointTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.AnchorPointTool` itself.
           *
           * This event will be fired when rotation occurs.
           */
          attachRotating(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.AnchorPointTool` itself
             */
            oListener?: object
          ): sap.ui.vk.tools.AnchorPointTool;
        }
        /**
         * Provides handles for move objects tool
         */
        class AnchorPointToolGizmo extends sap.ui.vk.tools.Gizmo {
          /**
           * Constructor for an AnchorPointToolGizmo.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: AnchorPointToolGizmoOpts
          );

          /**
           * Creates a new subclass of class sap.ui.vk.tools.AnchorPointToolGizmo with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.tools.Gizmo.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.ui.vk.tools.AnchorPointToolGizmo.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
        }
        /**
         * The CrossSection tool can be used to cut all 3D objects along one of three spatial axis to expose their
         * internal structures.
         */
        class CrossSectionTool extends sap.ui.vk.tools.Tool {
          /**
           * Constructor for a new CrossSectionTool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new tool instance. `sId`is generated automatically if no non-empty ID is given. Note: this
             * can be omitted, regardless of whether `mSettings` will be provided or not.
             */
            sId?: string,
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: CrossSectionToolOpts
          );

          /**
           * Creates a new subclass of class sap.ui.vk.tools.CrossSectionTool with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.tools.Tool.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.ui.vk.tools.CrossSectionTool.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getShowEditingUI showEditingUI}.
           *
           * Display text box with current value, which can also be used to directly modify the value
           *
           * Default value is `false`.
           */
          getShowEditingUI(): boolean;
          /**
           * MOVE TO BASE Queues a command for execution during the rendering cycle. All gesture operations should
           * be called using this method.
           */
          queueCommand(
            /**
             * The command to be executed.
             */
            command: Function
          ): sap.ui.vk.Viewport;
          /**
           * Sets the clipping plane axis.
           */
          setAxis(
            /**
             * Axis index from 0 to 2: 0 - X, 1 - Y, 2 - Z.
             */
            index?: number
          ): sap.ui.vk.tools.CrossSectionTool;
          /**
           * Flips the clipping plane.
           */
          setFlip(
            /**
             * If set to `true`, the clipping plane will be flipped.
             */
            flip?: boolean
          ): sap.ui.vk.tools.CrossSectionTool;
          /**
           * Sets a new value for property {@link #getShowEditingUI showEditingUI}.
           *
           * Display text box with current value, which can also be used to directly modify the value
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setShowEditingUI(
            /**
             * New value for property `showEditingUI`
             */
            bShowEditingUI: boolean
          ): sap.ui.vk.tools.CrossSectionTool;
        }
        /**
         * Provides handles for moving cross section tool
         */
        class CrossSectionToolGizmo extends sap.ui.vk.tools.Gizmo {
          /**
           * Constructor for a new CrossSectionToolGizmo.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: CrossSectionToolGizmoOpts
          );

          /**
           * Creates a new subclass of class sap.ui.vk.tools.CrossSectionToolGizmo with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.tools.Gizmo.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.ui.vk.tools.CrossSectionToolGizmo.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
        }
        /**
         * Provides buttons to hide or show certain sap.ui.vk controls.
         */
        class Gizmo extends sap.ui.core.Control {
          /**
           * Constructor for base of all Gizmo Controls.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           *
           * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.core.Control#constructor
           * sap.ui.core.Control} can be used.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: GizmoOpts
          );

          /**
           * Creates a new subclass of class sap.ui.vk.tools.Gizmo with name `sClassName` and enriches it with the
           * information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.ui.vk.tools.Gizmo.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
        }
        /**
         * When user clicks/taps inside of 3D Viewport this tool can be used to find if there is an object at this
         * point
         */
        class HitTestTool extends sap.ui.vk.tools.Tool {
          /**
           * Constructor for a new HitTestTool tool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new tool instance. `sId`is generated automatically if no non-empty ID is given. Note: this
             * can be omitted, regardless of whether `mSettings` will be provided or not.
             */
            sId?: string,
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: HitTestToolOpts
          );

          /**
           * Attaches event handler `fnFunction` to the {@link #event:hit hit} event of this `sap.ui.vk.tools.HitTestTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.HitTestTool` itself.
           *
           * This event will be fired when 3D object is detected under hit position.
           */
          attachHit(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.HitTestTool` itself
             */
            oListener?: object
          ): sap.ui.vk.tools.HitTestTool;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:hit hit} event of this `sap.ui.vk.tools.HitTestTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachHit(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.vk.tools.HitTestTool;
          /**
           * Creates a new subclass of class sap.ui.vk.tools.HitTestTool with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.tools.Tool.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:hit hit} to attached listeners.
           */
          fireHit(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              id?: any;

              object?: any;

              point?: any;

              clickType?: any;
            }
          ): sap.ui.vk.tools.HitTestTool;
          /**
           * Gets current value of property {@link #getIdMode IdMode}.
           *
           * Indicates what schema the tool should use to extract IDs from hit objects
           *
           * Default value is `ThreeJS`.
           */
          getIdMode(): any;
          /**
           * Returns a metadata object for class sap.ui.vk.tools.HitTestTool.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Figure out which helper is needed and execute hit test
           */
          hitTest(
            /**
             * The tap gesture's x-coordinate.
             */
            x: number,
            /**
             * The tap gesture's y-coordinate.
             */
            y: number,
            /**
             * Scene object used in current viewport.
             */
            scene: sap.ui.vk.Scene,
            /**
             * Current viewport's camera.
             */
            camera: sap.ui.vk.Camera,
            /**
             * One of predefined click types, this is passed to the hit event
             */
            clicktype: any
          ): any;
          /**
           * Queues a command for execution during the rendering cycle. All gesture operations should be called using
           * this method.
           */
          queueCommand(
            /**
             * The command to be executed.
             */
            command: Function
          ): sap.ui.vk.Viewport;
          /**
           * Sets a new value for property {@link #getIdMode IdMode}.
           *
           * Indicates what schema the tool should use to extract IDs from hit objects
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `ThreeJS`.
           */
          setIdMode(
            /**
             * New value for property `IdMode`
             */
            sIdMode: any
          ): sap.ui.vk.tools.HitTestTool;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:hit hit} event of this `sap.ui.vk.tools.HitTestTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.HitTestTool` itself.
           *
           * This event will be fired when 3D object is detected under hit position.
           */
          attachHit(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.HitTestTool` itself
             */
            oListener?: object
          ): sap.ui.vk.tools.HitTestTool;
        }
        /**
         * Tool used to move objects in 3D space
         */
        class MoveTool extends sap.ui.vk.tools.Tool {
          /**
           * Constructor for a new MoveTool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new tool instance. `sId`is generated automatically if no non-empty ID is given. Note: this
             * can be omitted, regardless of whether `mSettings` will be provided or not.
             */
            sId?: string,
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: MoveToolOpts
          );

          /**
           * Attaches event handler `fnFunction` to the {@link #event:coordinateSystemChanged coordinateSystemChanged}
           * event of this `sap.ui.vk.tools.MoveTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.MoveTool` itself.
           *
           * This event will be fired when the coordinate system changes.
           */
          attachCoordinateSystemChanged(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.MoveTool` itself
             */
            oListener?: object
          ): sap.ui.vk.tools.MoveTool;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:moved moved} event of this `sap.ui.vk.tools.MoveTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.MoveTool` itself.
           *
           * This event will be fired when movement finished.
           */
          attachMoved(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.MoveTool` itself
             */
            oListener?: object
          ): sap.ui.vk.tools.MoveTool;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:moving moving} event of this `sap.ui.vk.tools.MoveTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.MoveTool` itself.
           *
           * This event will be fired when movement occurs.
           */
          attachMoving(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.MoveTool` itself
             */
            oListener?: object
          ): sap.ui.vk.tools.MoveTool;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:coordinateSystemChanged coordinateSystemChanged}
           * event of this `sap.ui.vk.tools.MoveTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachCoordinateSystemChanged(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.vk.tools.MoveTool;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:moved moved} event of this `sap.ui.vk.tools.MoveTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachMoved(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.vk.tools.MoveTool;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:moving moving} event of this `sap.ui.vk.tools.MoveTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachMoving(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.vk.tools.MoveTool;
          /**
           * Creates a new subclass of class sap.ui.vk.tools.MoveTool with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.tools.Tool.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:coordinateSystemChanged coordinateSystemChanged} to attached listeners.
           */
          fireCoordinateSystemChanged(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              coordinateSystem?: any;
            }
          ): sap.ui.vk.tools.MoveTool;
          /**
           * Fires event {@link #event:moved moved} to attached listeners.
           */
          fireMoved(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              x?: number;

              y?: number;

              z?: number;
            }
          ): sap.ui.vk.tools.MoveTool;
          /**
           * Fires event {@link #event:moving moving} to attached listeners.
           */
          fireMoving(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              x?: number;

              y?: number;

              z?: number;
            }
          ): sap.ui.vk.tools.MoveTool;
          /**
           * Gets current value of property {@link #getCoordinateSystem coordinateSystem}.
           *
           * Select coordinate system in which this tool operates. Can be Local, World, Screen or Custom
           *
           * Default value is `World`.
           */
          getCoordinateSystem(): any;
          /**
           * Gets current value of property {@link #getEnableStepping enableStepping}.
           *
           * If set to true values will change in round number increments instead of continual change
           *
           * Default value is `false`.
           */
          getEnableStepping(): boolean;
          /**
           * Returns a metadata object for class sap.ui.vk.tools.MoveTool.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getShowEditingUI showEditingUI}.
           *
           * Display text box with current value, which can also be used to directly modify the value
           *
           * Default value is `false`.
           */
          getShowEditingUI(): boolean;
          /**
           * Performs movement of selected objects.
           */
          move(
            /**
             * Movement offset of x component in currently selected coordinate system.
             */
            x?: number,
            /**
             * Movement offset of y component in currently selected coordinate system.
             */
            y?: number,
            /**
             * Movement offset of z component in currently selected coordinate system.
             */
            z?: number
          ): sap.ui.vk.tools.MoveTool;
          /**
           * MOVE TO BASE Queues a command for execution during the rendering cycle. All gesture operations should
           * be called using this method.
           */
          queueCommand(
            /**
             * The command to be executed.
             */
            command: Function
          ): sap.ui.vk.tools.MoveTool;
          /**
           * Sets a new value for property {@link #getCoordinateSystem coordinateSystem}.
           *
           * Select coordinate system in which this tool operates. Can be Local, World, Screen or Custom
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `World`.
           */
          setCoordinateSystem(
            /**
             * New value for property `coordinateSystem`
             */
            sCoordinateSystem: any
          ): sap.ui.vk.tools.MoveTool;
          /**
           * Sets a new value for property {@link #getEnableStepping enableStepping}.
           *
           * If set to true values will change in round number increments instead of continual change
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setEnableStepping(
            /**
             * New value for property `enableStepping`
             */
            bEnableStepping: boolean
          ): sap.ui.vk.tools.MoveTool;
          /**
           * Sets a new value for property {@link #getShowEditingUI showEditingUI}.
           *
           * Display text box with current value, which can also be used to directly modify the value
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setShowEditingUI(
            /**
             * New value for property `showEditingUI`
             */
            bShowEditingUI: boolean
          ): sap.ui.vk.tools.MoveTool;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:coordinateSystemChanged coordinateSystemChanged}
           * event of this `sap.ui.vk.tools.MoveTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.MoveTool` itself.
           *
           * This event will be fired when the coordinate system changes.
           */
          attachCoordinateSystemChanged(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.MoveTool` itself
             */
            oListener?: object
          ): sap.ui.vk.tools.MoveTool;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:moved moved} event of this `sap.ui.vk.tools.MoveTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.MoveTool` itself.
           *
           * This event will be fired when movement finished.
           */
          attachMoved(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.MoveTool` itself
             */
            oListener?: object
          ): sap.ui.vk.tools.MoveTool;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:moving moving} event of this `sap.ui.vk.tools.MoveTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.MoveTool` itself.
           *
           * This event will be fired when movement occurs.
           */
          attachMoving(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.MoveTool` itself
             */
            oListener?: object
          ): sap.ui.vk.tools.MoveTool;
        }
        /**
         * Provides handles for move objects tool
         */
        class MoveToolGizmo extends sap.ui.vk.tools.Gizmo {
          /**
           * Constructor for a new MoveToolGizmo.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: MoveToolGizmoOpts
          );

          /**
           * Creates a new subclass of class sap.ui.vk.tools.MoveToolGizmo with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.tools.Gizmo.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.ui.vk.tools.MoveToolGizmo.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
        }
        /**
         * This tool provides rectangular selection
         */
        class RectSelectTool extends sap.ui.vk.tools.Tool {
          /**
           * Constructor for a new RectSelectTool tool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new tool instance. `sId`is generated automatically if no non-empty ID is given. Note: this
             * can be omitted, regardless of whether `mSettings` will be provided or not.
             */
            sId?: string,
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: RectSelectToolOpts
          );

          /**
           * Creates a new subclass of class sap.ui.vk.tools.RectSelectTool with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.tools.Tool.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.ui.vk.tools.RectSelectTool.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getSubtractMode subtractMode}.
           *
           * If set to true then this tool will remove selected nodes from the selection set. Default is to always
           * add them to the selection
           *
           * Default value is `false`.
           */
          getSubtractMode(): boolean;
          /**
           * Find all objects fully contained inside of specified rectangle
           */
          select(
            /**
             * x coordinate of top-left/bottom-right corner of selection rectangle.
             */
            x1: number,
            /**
             * y coordinate of top-left/bottom-right corner of selection rectangle.
             */
            y1: number,
            /**
             * x coordinate of bottom-right/top-left corner of selection rectangle.
             */
            x2: number,
            /**
             * y coordinate of bottom-right/top-left corner of selection rectangle.
             */
            y2: number,
            /**
             * Scene object used in current viewport.
             */
            scene: sap.ui.vk.Scene,
            /**
             * Current viewport's camera.
             */
            camera: sap.ui.vk.Camera
          ): any[];
          /**
           * Sets a new value for property {@link #getSubtractMode subtractMode}.
           *
           * If set to true then this tool will remove selected nodes from the selection set. Default is to always
           * add them to the selection
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setSubtractMode(
            /**
             * New value for property `subtractMode`
             */
            bSubtractMode: boolean
          ): sap.ui.vk.tools.RectSelectTool;
        }
        /**
         * Tool to rotate scene in orbit mode
         */
        class RotateOrbitTool extends sap.ui.vk.tools.Tool {
          /**
           * Constructor for a new RotateOrbitTool tool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new content resource. `sId`is generated automatically if no non-empty ID is given. Note: this
             * can be omitted, regardless of whether `mSettings` will be provided or not.
             */
            sId?: string,
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: RotateOrbitToolOpts
          );

          /**
           * Attaches event handler `fnFunction` to the {@link #event:rotate rotate} event of this `sap.ui.vk.tools.RotateOrbitTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.RotateOrbitTool` itself.
           *
           * This event will be fired when rotation occurs.
           */
          attachRotate(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.RotateOrbitTool` itself
             */
            oListener?: object
          ): sap.ui.vk.tools.RotateOrbitTool;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:rotate rotate} event of this `sap.ui.vk.tools.RotateOrbitTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachRotate(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.vk.tools.RotateOrbitTool;
          /**
           * Creates a new subclass of class sap.ui.vk.tools.RotateOrbitTool with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.tools.Tool.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:rotate rotate} to attached listeners.
           */
          fireRotate(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              dx?: number;

              dy?: number;
            }
          ): sap.ui.vk.tools.RotateOrbitTool;
          /**
           * Returns a metadata object for class sap.ui.vk.tools.RotateOrbitTool.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Executes Orbit rotation for the target Viewport.
           */
          rotate(
            /**
             * The change in x-coordinate used to define the desired rotation.
             */
            dx: number,
            /**
             * The change in y-coordinate used to define the desired rotation.
             */
            dy: number
          ): void;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:rotate rotate} event of this `sap.ui.vk.tools.RotateOrbitTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.RotateOrbitTool` itself.
           *
           * This event will be fired when rotation occurs.
           */
          attachRotate(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.RotateOrbitTool` itself
             */
            oListener?: object
          ): sap.ui.vk.tools.RotateOrbitTool;
        }
        /**
         * Tool to rotate 3D objects in space
         */
        class RotateTool extends sap.ui.vk.tools.Tool {
          /**
           * Constructor for a new RotateTool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new tool instance. `sId`is generated automatically if no non-empty ID is given. Note: this
             * can be omitted, regardless of whether `mSettings` will be provided or not.
             */
            sId?: string,
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: RotateToolOpts
          );

          /**
           * Attaches event handler `fnFunction` to the {@link #event:coordinateSystemChanged coordinateSystemChanged}
           * event of this `sap.ui.vk.tools.RotateTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.RotateTool` itself.
           *
           * This event will be fired when the coordinate system changes.
           */
          attachCoordinateSystemChanged(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.RotateTool` itself
             */
            oListener?: object
          ): sap.ui.vk.tools.RotateTool;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:rotated rotated} event of this `sap.ui.vk.tools.RotateTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.RotateTool` itself.
           *
           * This event will be fired when rotation finished.
           */
          attachRotated(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.RotateTool` itself
             */
            oListener?: object
          ): sap.ui.vk.tools.RotateTool;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:rotating rotating} event of this `sap.ui.vk.tools.RotateTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.RotateTool` itself.
           *
           * This event will be fired when rotation occurs.
           */
          attachRotating(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.RotateTool` itself
             */
            oListener?: object
          ): sap.ui.vk.tools.RotateTool;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:coordinateSystemChanged coordinateSystemChanged}
           * event of this `sap.ui.vk.tools.RotateTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachCoordinateSystemChanged(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.vk.tools.RotateTool;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:rotated rotated} event of this `sap.ui.vk.tools.RotateTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachRotated(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.vk.tools.RotateTool;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:rotating rotating} event of this `sap.ui.vk.tools.RotateTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachRotating(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.vk.tools.RotateTool;
          /**
           * Creates a new subclass of class sap.ui.vk.tools.RotateTool with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.tools.Tool.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:coordinateSystemChanged coordinateSystemChanged} to attached listeners.
           */
          fireCoordinateSystemChanged(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              coordinateSystem?: any;
            }
          ): sap.ui.vk.tools.RotateTool;
          /**
           * Fires event {@link #event:rotated rotated} to attached listeners.
           */
          fireRotated(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              x?: number;

              y?: number;

              z?: number;
            }
          ): sap.ui.vk.tools.RotateTool;
          /**
           * Fires event {@link #event:rotating rotating} to attached listeners.
           */
          fireRotating(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              x?: number;

              y?: number;

              z?: number;
            }
          ): sap.ui.vk.tools.RotateTool;
          /**
           * Gets current value of property {@link #getCoordinateSystem coordinateSystem}.
           *
           * Select coordinate system in which this tool operates. Can be Local, World, Screen or Custom
           *
           * Default value is `World`.
           */
          getCoordinateSystem(): any;
          /**
           * Gets current value of property {@link #getEnableStepping enableStepping}.
           *
           * If set to true values will change in round number increments instead of continual change
           *
           * Default value is `false`.
           */
          getEnableStepping(): boolean;
          /**
           * Returns a metadata object for class sap.ui.vk.tools.RotateTool.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getShowEditingUI showEditingUI}.
           *
           * Display text box with current value, which can also be used to directly modify the value
           *
           * Default value is `false`.
           */
          getShowEditingUI(): boolean;
          /**
           * MOVE TO BASE Queues a command for execution during the rendering cycle. All gesture operations should
           * be called using this method.
           */
          queueCommand(
            /**
             * The command to be executed.
             */
            command: Function
          ): sap.ui.vk.tools.RotateTool;
          /**
           * Performs rotation of selected objects.
           */
          rotate(
            /**
             * Euler rotation x axis angle in degrees.
             */
            x?: number,
            /**
             * Euler rotation y axis angle in degrees.
             */
            y?: number,
            /**
             * Euler rotation z axis angle in degrees.
             */
            z?: number
          ): sap.ui.vk.tools.RotateTool;
          /**
           * Sets a new value for property {@link #getCoordinateSystem coordinateSystem}.
           *
           * Select coordinate system in which this tool operates. Can be Local, World, Screen or Custom
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `World`.
           */
          setCoordinateSystem(
            /**
             * New value for property `coordinateSystem`
             */
            sCoordinateSystem: any
          ): sap.ui.vk.tools.RotateTool;
          /**
           * Sets a new value for property {@link #getEnableStepping enableStepping}.
           *
           * If set to true values will change in round number increments instead of continual change
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setEnableStepping(
            /**
             * New value for property `enableStepping`
             */
            bEnableStepping: boolean
          ): sap.ui.vk.tools.RotateTool;
          /**
           * Sets a new value for property {@link #getShowEditingUI showEditingUI}.
           *
           * Display text box with current value, which can also be used to directly modify the value
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setShowEditingUI(
            /**
             * New value for property `showEditingUI`
             */
            bShowEditingUI: boolean
          ): sap.ui.vk.tools.RotateTool;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:coordinateSystemChanged coordinateSystemChanged}
           * event of this `sap.ui.vk.tools.RotateTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.RotateTool` itself.
           *
           * This event will be fired when the coordinate system changes.
           */
          attachCoordinateSystemChanged(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.RotateTool` itself
             */
            oListener?: object
          ): sap.ui.vk.tools.RotateTool;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:rotated rotated} event of this `sap.ui.vk.tools.RotateTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.RotateTool` itself.
           *
           * This event will be fired when rotation finished.
           */
          attachRotated(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.RotateTool` itself
             */
            oListener?: object
          ): sap.ui.vk.tools.RotateTool;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:rotating rotating} event of this `sap.ui.vk.tools.RotateTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.RotateTool` itself.
           *
           * This event will be fired when rotation occurs.
           */
          attachRotating(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.RotateTool` itself
             */
            oListener?: object
          ): sap.ui.vk.tools.RotateTool;
        }
        /**
         * Provides handles for object rotation tool
         */
        class RotateToolGizmo extends sap.ui.vk.tools.Gizmo {
          /**
           * Constructor for a new RotateToolGizmo.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: RotateToolGizmoOpts
          );

          /**
           * Creates a new subclass of class sap.ui.vk.tools.RotateToolGizmo with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.tools.Gizmo.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.ui.vk.tools.RotateToolGizmo.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
        }
        /**
         * Tool to rotate scene in turntable mode
         */
        class RotateTurntableTool extends sap.ui.vk.tools.Tool {
          /**
           * Constructor for a new RotateTurntableTool tool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new tool instance. `sId`is generated automatically if no non-empty ID is given. Note: this
             * can be omitted, regardless of whether `mSettings` will be provided or not.
             */
            sId?: string,
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: RotateTurntableToolOpts
          );

          /**
           * Attaches event handler `fnFunction` to the {@link #event:rotate rotate} event of this `sap.ui.vk.tools.RotateTurntableTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.RotateTurntableTool` itself.
           *
           * This event will be fired when rotation occurs.
           */
          attachRotate(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.RotateTurntableTool`
             * itself
             */
            oListener?: object
          ): sap.ui.vk.tools.RotateTurntableTool;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:rotate rotate} event of this `sap.ui.vk.tools.RotateTurntableTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachRotate(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.vk.tools.RotateTurntableTool;
          /**
           * Creates a new subclass of class sap.ui.vk.tools.RotateTurntableTool with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.tools.Tool.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:rotate rotate} to attached listeners.
           */
          fireRotate(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              dx?: number;

              dy?: number;
            }
          ): sap.ui.vk.tools.RotateTurntableTool;
          /**
           * Returns a metadata object for class sap.ui.vk.tools.RotateTurntableTool.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Executes Turntable rotation for the target Viewport.
           */
          rotate(
            /**
             * The change in x-coordinate used to define the desired rotation.
             */
            dx: number,
            /**
             * The change in y-coordinate used to define the desired rotation.
             */
            dy: number
          ): void;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:rotate rotate} event of this `sap.ui.vk.tools.RotateTurntableTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.RotateTurntableTool` itself.
           *
           * This event will be fired when rotation occurs.
           */
          attachRotate(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.RotateTurntableTool`
             * itself
             */
            oListener?: object
          ): sap.ui.vk.tools.RotateTurntableTool;
        }
        /**
         * Tool to scale 3D objects
         */
        class ScaleTool extends sap.ui.vk.tools.Tool {
          /**
           * Constructor for a new ScaleTool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new content resource. `sId`is generated automatically if no non-empty ID is given. Note: this
             * can be omitted, regardless of whether `mSettings` will be provided or not.
             */
            sId?: string,
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: ScaleToolOpts
          );

          /**
           * Attaches event handler `fnFunction` to the {@link #event:coordinateSystemChanged coordinateSystemChanged}
           * event of this `sap.ui.vk.tools.ScaleTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.ScaleTool` itself.
           *
           * This event will be fired when the coordinate system changes.
           */
          attachCoordinateSystemChanged(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.ScaleTool` itself
             */
            oListener?: object
          ): sap.ui.vk.tools.ScaleTool;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:scaled scaled} event of this `sap.ui.vk.tools.ScaleTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.ScaleTool` itself.
           *
           * This event will be fired when scaling finished.
           */
          attachScaled(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.ScaleTool` itself
             */
            oListener?: object
          ): sap.ui.vk.tools.ScaleTool;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:scaling scaling} event of this `sap.ui.vk.tools.ScaleTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.ScaleTool` itself.
           *
           * This event will be fired when scaling occurs.
           */
          attachScaling(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.ScaleTool` itself
             */
            oListener?: object
          ): sap.ui.vk.tools.ScaleTool;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:coordinateSystemChanged coordinateSystemChanged}
           * event of this `sap.ui.vk.tools.ScaleTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachCoordinateSystemChanged(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.vk.tools.ScaleTool;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:scaled scaled} event of this `sap.ui.vk.tools.ScaleTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachScaled(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.vk.tools.ScaleTool;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:scaling scaling} event of this `sap.ui.vk.tools.ScaleTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachScaling(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.vk.tools.ScaleTool;
          /**
           * Creates a new subclass of class sap.ui.vk.tools.ScaleTool with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.tools.Tool.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:coordinateSystemChanged coordinateSystemChanged} to attached listeners.
           */
          fireCoordinateSystemChanged(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              coordinateSystem?: any;
            }
          ): sap.ui.vk.tools.ScaleTool;
          /**
           * Fires event {@link #event:scaled scaled} to attached listeners.
           */
          fireScaled(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              x?: number;

              y?: number;

              z?: number;
            }
          ): sap.ui.vk.tools.ScaleTool;
          /**
           * Fires event {@link #event:scaling scaling} to attached listeners.
           */
          fireScaling(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              x?: number;

              y?: number;

              z?: number;
            }
          ): sap.ui.vk.tools.ScaleTool;
          /**
           * Gets current value of property {@link #getCoordinateSystem coordinateSystem}.
           *
           * Select coordinate system in which this tool operates. Can be Local, World, Screen or Custom
           *
           * Default value is `World`.
           */
          getCoordinateSystem(): any;
          /**
           * Gets current value of property {@link #getEnableStepping enableStepping}.
           *
           * If set to true values will change in round number increments instead of continual change
           *
           * Default value is `false`.
           */
          getEnableStepping(): boolean;
          /**
           * Returns a metadata object for class sap.ui.vk.tools.ScaleTool.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getNonUniformScaleEnabled nonUniformScaleEnabled}.
           *
           * If set to true then this tool will enable scaling along a single axis, otherwise it will
           * scale objects along all three axes proportionaly
           *
           * Default value is `false`.
           */
          getNonUniformScaleEnabled(): boolean;
          /**
           * Gets current value of property {@link #getShowEditingUI showEditingUI}.
           *
           * Display text box with current value, which can also be used to directly modify the value
           *
           * Default value is `false`.
           */
          getShowEditingUI(): boolean;
          /**
           * MOVE TO BASE Queues a command for execution during the rendering cycle. All gesture operations should
           * be called using this method.
           */
          queueCommand(
            /**
             * The command to be executed.
             */
            command: Function
          ): sap.ui.vk.tools.ScaleTool;
          /**
           * Performs scaling of selected objects.
           */
          scale(
            /**
             * Scaling value for x axis.
             */
            x?: number,
            /**
             * Scaling value for y axis.
             */
            y?: number,
            /**
             * Scaling value for z axis.
             */
            z?: number
          ): sap.ui.vk.tools.ScaleTool;
          /**
           * Sets a new value for property {@link #getCoordinateSystem coordinateSystem}.
           *
           * Select coordinate system in which this tool operates. Can be Local, World, Screen or Custom
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `World`.
           */
          setCoordinateSystem(
            /**
             * New value for property `coordinateSystem`
             */
            sCoordinateSystem: any
          ): sap.ui.vk.tools.ScaleTool;
          /**
           * Sets a new value for property {@link #getEnableStepping enableStepping}.
           *
           * If set to true values will change in round number increments instead of continual change
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setEnableStepping(
            /**
             * New value for property `enableStepping`
             */
            bEnableStepping: boolean
          ): sap.ui.vk.tools.ScaleTool;
          /**
           * Sets a new value for property {@link #getNonUniformScaleEnabled nonUniformScaleEnabled}.
           *
           * If set to true then this tool will enable scaling along a single axis, otherwise it will
           * scale objects along all three axes proportionaly
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setNonUniformScaleEnabled(
            /**
             * New value for property `nonUniformScaleEnabled`
             */
            bNonUniformScaleEnabled: boolean
          ): sap.ui.vk.tools.ScaleTool;
          /**
           * Sets a new value for property {@link #getShowEditingUI showEditingUI}.
           *
           * Display text box with current value, which can also be used to directly modify the value
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setShowEditingUI(
            /**
             * New value for property `showEditingUI`
             */
            bShowEditingUI: boolean
          ): sap.ui.vk.tools.ScaleTool;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:coordinateSystemChanged coordinateSystemChanged}
           * event of this `sap.ui.vk.tools.ScaleTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.ScaleTool` itself.
           *
           * This event will be fired when the coordinate system changes.
           */
          attachCoordinateSystemChanged(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.ScaleTool` itself
             */
            oListener?: object
          ): sap.ui.vk.tools.ScaleTool;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:scaled scaled} event of this `sap.ui.vk.tools.ScaleTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.ScaleTool` itself.
           *
           * This event will be fired when scaling finished.
           */
          attachScaled(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.ScaleTool` itself
             */
            oListener?: object
          ): sap.ui.vk.tools.ScaleTool;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:scaling scaling} event of this `sap.ui.vk.tools.ScaleTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.ScaleTool` itself.
           *
           * This event will be fired when scaling occurs.
           */
          attachScaling(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.ScaleTool` itself
             */
            oListener?: object
          ): sap.ui.vk.tools.ScaleTool;
        }
        /**
         * Provides handles to scale objects
         */
        class ScaleToolGizmo extends sap.ui.vk.tools.Gizmo {
          /**
           * Constructor for a new ScaleToolGizmo.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: ScaleToolGizmoOpts
          );

          /**
           * Creates a new subclass of class sap.ui.vk.tools.ScaleToolGizmo with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.tools.Gizmo.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.ui.vk.tools.ScaleToolGizmo.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
        }
        /**
         * Tool to display current scene orientation and to provide pre-defined camera positions
         */
        class SceneOrientationTool extends sap.ui.vk.tools.Tool {
          /**
           * Constructor for a new SceneOrientationTool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new tool instance. `sId`is generated automatically if no non-empty ID is given. Note: this
             * can be omitted, regardless of whether `mSettings` will be provided or not.
             */
            sId?: string,
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: SceneOrientationToolOpts
          );

          /**
           * Creates a new subclass of class sap.ui.vk.tools.SceneOrientationTool with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.tools.Tool.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets current value of property {@link #getEnableInitialView enableInitialView}.
           *
           * Default value is `true`.
           */
          getEnableInitialView(): boolean;
          /**
           * Gets current value of property {@link #getEnablePredefinedViews enablePredefinedViews}.
           *
           * Default value is `true`.
           */
          getEnablePredefinedViews(): boolean;
          /**
           * Returns a metadata object for class sap.ui.vk.tools.SceneOrientationTool.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * MOVE TO BASE Queues a command for execution during the rendering cycle. All gesture operations should
           * be called using this method.
           */
          queueCommand(
            /**
             * The command to be executed.
             */
            command: Function
          ): sap.ui.vk.tools.SceneOrientationTool;
          /**
           * Sets a new value for property {@link #getEnableInitialView enableInitialView}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setEnableInitialView(
            /**
             * New value for property `enableInitialView`
             */
            bEnableInitialView: boolean
          ): sap.ui.vk.tools.SceneOrientationTool;
          /**
           * Sets a new value for property {@link #getEnablePredefinedViews enablePredefinedViews}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setEnablePredefinedViews(
            /**
             * New value for property `enablePredefinedViews`
             */
            bEnablePredefinedViews: boolean
          ): sap.ui.vk.tools.SceneOrientationTool;
          /**
           * Performs camera "fly to" animation to the predefined view.
           */
          setView(
            /**
             * Predefined view.
             */
            view?: any,
            /**
             * Time to perform the "fly to" animation.
             */
            milliseconds?: number
          ): sap.ui.vk.tools.SceneOrientationTool;
        }
        /**
         * Provides drop-down list of predefined camera positions
         */
        class SceneOrientationToolGizmo extends sap.ui.vk.tools.Gizmo {
          /**
           * Constructor for a new SceneOrientationToolGizmo.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: SceneOrientationToolGizmoOpts
          );

          /**
           * Creates a new subclass of class sap.ui.vk.tools.SceneOrientationToolGizmo with name `sClassName` and
           * enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.tools.Gizmo.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.ui.vk.tools.SceneOrientationToolGizmo.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
        }
        /**
         * Specifies base for all tools to extend
         */
        class Tool extends sap.ui.core.Element {
          /**
           * Base for all tool controls.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new tool instance. `sId`is generated automatically if no non-empty ID is given. Note: this
             * can be omitted, regardless of whether `mSettings` will be provided or not.
             */
            sId?: string,
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: ToolOpts
          );

          /**
           * Attaches event handler `fnFunction` to the {@link #event:enabled enabled} event of this `sap.ui.vk.tools.Tool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.Tool` itself.
           */
          attachEnabled(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.Tool` itself
             */
            oListener?: object
          ): sap.ui.vk.tools.Tool;
          /**
           * Destroys the gizmo in the aggregation {@link #getGizmo gizmo}.
           */
          destroyGizmo(): sap.ui.vk.tools.Tool;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:enabled enabled} event of this `sap.ui.vk.tools.Tool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachEnabled(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.vk.tools.Tool;
          /**
           * Creates a new subclass of class sap.ui.vk.tools.Tool with name `sClassName` and enriches it with the
           * information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:enabled enabled} to attached listeners.
           */
          fireEnabled(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * Returns the true or false to indicated that the tool is enabled or not. This event is fired by the tool
               * under various conditions, including an attempt to set an activeViewport that is incompatibe with the
               * tool. use getActive / setActive to turn the tool on or off
               */
              enabled?: boolean;

              reason?: string;
            }
          ): sap.ui.vk.tools.Tool;
          /**
           * Gets current value of property {@link #getActive active}.
           *
           * Used to control the tool rendering and interaction pipeline.
           *
           * Default value is `false`.
           */
          getActive(): boolean;
          /**
           * Gets current value of property {@link #getFootprint footprint}.
           *
           * Used to decide whether this tool should be enabled for the target viewport.
           */
          getFootprint(): string[];
          /**
           * Gets content of aggregation {@link #getGizmo gizmo}.
           *
           * sap.ui.vk.tools.Gizmo owned by this control and used for rendering floating UI
           */
          getGizmo(): sap.ui.vk.tools.Gizmo;
          /**
           * ID of the element which is the current target of the association {@link #getGizmoContainer gizmoContainer},
           * or `null`.
           */
          getGizmoContainer(): sap.ui.core.ID;
          /**
           * Returns a metadata object for class sap.ui.vk.tools.Tool.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getTargetViewportType targetViewportType}.
           */
          getTargetViewportType(): any;
          /**
           * Gets current value of property {@link #getToolid toolid}.
           *
           * GUID identifier for the tool to prevent naming conflicts.
           */
          getToolid(): string;
          /**
           * Manages the 'active' flag for this tool and any other internals required
           */
          setActive(
            /**
             * indicates whether this tools is active or not
             */
            value?: boolean,
            /**
             * the tool target is used by the tool to carry out its operations
             */
            activeTarget?: object,
            /**
             * used to evaluate whether a tool should be rendered as part of the activeTarget
             */
            gizmoContainer?: object
          ): void;
          /**
           * Sets a new value for property {@link #getFootprint footprint}.
           *
           * Used to decide whether this tool should be enabled for the target viewport.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setFootprint(
            /**
             * New value for property `footprint`
             */
            sFootprint: string[]
          ): sap.ui.vk.tools.Tool;
          /**
           * Sets the aggregated {@link #getGizmo gizmo}.
           */
          setGizmo(
            /**
             * The gizmo to set
             */
            oGizmo: sap.ui.vk.tools.Gizmo
          ): sap.ui.vk.tools.Tool;
          /**
           * Sets the associated {@link #getGizmoContainer gizmoContainer}.
           */
          setGizmoContainer(
            /**
             * ID of an element which becomes the new target of this gizmoContainer association; alternatively, an element
             * instance may be given
             */
            oGizmoContainer: sap.ui.core.ID | sap.ui.core.Control
          ): sap.ui.vk.tools.Tool;
          /**
           * Sets a new value for property {@link #getTargetViewportType targetViewportType}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setTargetViewportType(
            /**
             * New value for property `targetViewportType`
             */
            oTargetViewportType: any
          ): sap.ui.vk.tools.Tool;
          /**
           * Sets a new value for property {@link #getToolid toolid}.
           *
           * GUID identifier for the tool to prevent naming conflicts.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setToolid(
            /**
             * New value for property `toolid`
             */
            sToolid: string
          ): sap.ui.vk.tools.Tool;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:enabled enabled} event of this `sap.ui.vk.tools.Tool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.Tool` itself.
           */
          attachEnabled(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.Tool` itself
             */
            oListener?: object
          ): sap.ui.vk.tools.Tool;
        }
        /**
         * The TooltipTool allowes applications to display custom tooltip text on top of 3D object over which pointer
         * is hovering
         */
        class TooltipTool extends sap.ui.vk.tools.Tool {
          /**
           * Constructor for a new TooltipTool.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new tool instance. `sId`is generated automatically if no non-empty ID is given. Note: this
             * can be omitted, regardless of whether `mSettings` will be provided or not.
             */
            sId?: string,
            /**
             * An optional map/JSON object with initial property values, aggregated objects etc. for the new tool instance.
             */
            mSettings?: TooltipToolOpts
          );

          /**
           * Attaches event handler `fnFunction` to the {@link #event:hover hover} event of this `sap.ui.vk.tools.TooltipTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.TooltipTool` itself.
           *
           * This event will be fired when mouse hover occurs.
           */
          attachHover(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.TooltipTool` itself
             */
            oListener?: object
          ): sap.ui.vk.tools.TooltipTool;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:hover hover} event of this `sap.ui.vk.tools.TooltipTool`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachHover(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.vk.tools.TooltipTool;
          /**
           * Creates a new subclass of class sap.ui.vk.tools.TooltipTool with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.tools.Tool.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:hover hover} to attached listeners.
           */
          fireHover(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              x?: number;

              y?: number;

              nodeRef?: any;
            }
          ): sap.ui.vk.tools.TooltipTool;
          /**
           * Returns a metadata object for class sap.ui.vk.tools.TooltipTool.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * MOVE TO BASE Queues a command for execution during the rendering cycle. All gesture operations should
           * be called using this method.
           */
          queueCommand(
            /**
             * The command to be executed.
             */
            command: Function
          ): sap.ui.vk.tools.TooltipTool;
          /**
           * Sets the tooltip title
           */
          setTitle(
            /**
             * Title
             */
            title?: string
          ): sap.ui.vk.tools.TooltipTool;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:hover hover} event of this `sap.ui.vk.tools.TooltipTool`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.vk.tools.TooltipTool` itself.
           *
           * This event will be fired when mouse hover occurs.
           */
          attachHover(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.vk.tools.TooltipTool` itself
             */
            oListener?: object
          ): sap.ui.vk.tools.TooltipTool;
        }
        /**
         * Provides UI to display tooltips
         */
        class TooltipToolGizmo extends sap.ui.vk.tools.Gizmo {
          /**
           * Constructor for a new TooltipToolGizmo.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: TooltipToolGizmoOpts
          );

          /**
           * Creates a new subclass of class sap.ui.vk.tools.TooltipToolGizmo with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.tools.Gizmo.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.ui.vk.tools.TooltipToolGizmo.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
        }
      }
      /**
       * @SINCE 1.60.0
       *
       * Contract for authorization callback function
       *
       * A callback function which can be implemented by an application to provide an authorization token. Such
       * function receives single parameter which is connection URL and must return a promise which will be resolved
       * when authorization token is obtained.
       *
       * A sample implementation of authorization handler::
       * ```javascript
       *
       * ...
       * var viewer = new sap.ui.vk.Viewer();
       * viewer.setAuthorizationHandler(function(url) {
       *     var headers = new Headers();
       *     headers.append("Content-Type", "application/x-www-form-urlencoded");
       *     headers.append("Authorization", "Basic " + basicAuth);
       *
       *     return fetch(accessTokenUrl, {
       *             method: "POST",
       *             body: "grant_type=client_credentials",
       *             headers: headers
       *         }).then(response => response.json())
       * });
       * ...
       * ```
       */
      interface AuthorizationHandler {}
      /**
       * @SINCE 1.38.0
       *
       * Contract for objects that implement decryption.
       *
       * An interface for an object provided by an application to decrypt content of encrypted models.
       *
       * Content is encrypted with the {@link https://en.wikipedia.org/wiki/Advanced_Encryption_Standard AES128}
       * algorithm in the {@link https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_.28CBC.29
       * CBC} mode.
       *
       * A key is derived with the {@link https://en.wikipedia.org/wiki/PBKDF2 PBKDF2} algorithm by applying the
       * {@link https://en.wikipedia.org/wiki/Hash-based_message_authentication_code HMAC}-{@link https://en.wikipedia.org/wiki/SHA-2
       * SHA256} function 10,000 times.
       *
       * A sample implementation and usage of the sap.ui.vk.DecryptionHandler interface with the {@link https://cdnjs.cloudflare.com/ajax/libs/asmCrypto/0.16.4/asmcrypto.js
       * asmCrypto} library::
       * ```javascript
       *
       * ...
       * <script src="https://cdnjs.cloudflare.com/ajax/libs/asmCrypto/0.16.4/asmcrypto.js"></script>
       * ...
       * var decryptionHandler = {
       *     deriveKey: function(salt, password) {
       *         try {
       *             return asmCrypto.PBKDF2_HMAC_SHA256.bytes(password, salt, 10000, 16);
       *         } catch (ex) {
       *             return null;
       *         }
       *     },
       *     decrypt: function(key, iv, input) {
       *         try {
       *             return asmCrypto.AES_CBC.decrypt(input, key, true, iv);
       *         } catch (ex) {
       *             return null;
       *         }
       *     }
       * };
       * ...
       * var viewer = new sap.ui.vk.Viewer();
       * viewer.setDecryptionHandler(decryptionHandler);
       * var contentResource = new sap.ui.vk.ContentResource({
       *     source: "http://my-web-server.com/my-encrypted-model.vds",
       *     sourceType: "vds",
       *     sourceId: "abc",
       *     password: "abracadabra"
       * });
       * viewer.addContentResource(contentResource);
       * ```
       */
      interface DecryptionHandler {
        /**
         * Decrypts the input buffer with the {@link https://en.wikipedia.org/wiki/Advanced_Encryption_Standard
         * AES128} algorithm in the {@link https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_.28CBC.29
         * CBC} mode.
         */
        decrypt(
          /**
           * The derived key generated by the previous call to {@link sap.ui.vk.DecryptionHandler#deriveKey sap.ui.vk.DecryptionHandler.deriveKey}.
           */
          key: object,
          /**
           * The 128-bit {@link https://en.wikipedia.org/wiki/Initialization_vector initialization vector}.
           */
          iv: Uint8Array,
          /**
           * The encrypted buffer.
           */
          encryptedData: Uint8Array
        ): Uint8Array;
        /**
         * Generates a cryptographic session key derived from a base data value.
         *
         * The key must be derived with the {@link https://en.wikipedia.org/wiki/PBKDF2 PBKDF2} algorithm by applying
         * the {@link https://en.wikipedia.org/wiki/Hash-based_message_authentication_code HMAC}-{@link https://en.wikipedia.org/wiki/SHA-2
         * SHA256} function 10,000 times.
         *
         * The resulting 128-bit key should be passed to subseqeunt calls to {@link sap.ui.vk.DecryptionHandler#decrypt
         * sap.ui.vk.DecryptionHandler.decrypt}.
         */
        deriveKey(
          /**
           * Random data that is used as an additional input to a one-way function that "hashes" a password or passphrase.
           */
          salt: Uint8Array,
          /**
           * A password used for encryption/decryption.
           */
          password: Uint8Array
        ): object;
      }

      interface ContainerBaseOpts extends sap.ui.core.ControlOpts {
        /**
         * Show fullscreen toggle button in toolbar
         */
        showFullScreen?: boolean;

        /**
         * Show settings button in toolbar
         */
        showSettings?: boolean;

        /**
         * Show selection button in toolbar
         */
        showSelection?: boolean;

        /**
         * Controls whether the control is show fullscreen or embedded
         */
        fullScreen?: boolean;

        /**
         * Title to show in toolbar
         */
        title?: string;

        autoAdjustHeight?: boolean;

        contentChange?: Function;

        settingsPressed?: Function;

        /**
         * Content Aggregation.
         */
        content?: sap.ui.vk.ContainerContent[] | sap.ui.vk.ContainerContent;
      }

      interface ContainerContentOpts extends sap.ui.core.ControlOpts {
        /**
         * Icon to show up in the toolbar
         */
        icon?: string;

        /**
         * Title for the icon in the toolbar
         */
        title?: string;

        content?: sap.ui.core.Control;
      }

      interface ContentConnectorOpts extends sap.ui.core.ElementOpts {
        /**
         * This event will be fired when content resource changes are about to be processed.
         */
        contentChangesStarted?: Function;

        /**
         * This event will be fired when any content resource or the contentResources aggregation has been changed
         * and processed.
         */
        contentChangesFinished?: Function;

        /**
         * This event will be fired to report the progress of content changes.
         */
        contentChangesProgress?: Function;

        /**
         * This event will be fired when the current content is completely rebuilt or destroyed as a result of changes
         * in content resources.
         */
        contentReplaced?: Function;

        /**
         * This event will be fired when the current content is about to be destroyed.
         */
        contentDestroying?: Function;

        /**
         * Content resources to load and display.
         */
        contentResources?:
          | sap.ui.vk.ContentResource[]
          | sap.ui.vk.ContentResource;

        /**
         * View state managers.
         */
        viewStateManagers?:
          | sap.ui.vk.ViewStateManager[]
          | sap.ui.vk.ViewStateManager;
      }

      interface DrawerToolbarOpts extends sap.ui.core.ControlOpts {
        /**
         * Indicates whether the DrawerToolbar is expanded or collapsed.
         */
        expanded?: Function;

        /**
         * Determines the content of the DrawerToolbar. See {@link sap.m.OverflowToolbar} for list of allowed controls.
         * The content visible when the DrawerToolbar is expanded.
         */
        content?: sap.ui.core.Control[] | sap.ui.core.Control;

        viewport?: sap.ui.vk.Viewport | string;
      }

      interface FlexibleControlOpts extends sap.ui.core.ControlOpts {
        /**
         * CSS width of the vertical layout.
         */
        width?: sap.ui.core.CSSSize;

        height?: sap.ui.core.CSSSize;

        layout?: string;

        /**
         * If not enabled all controls inside are not enabled automatically.
         */
        enabled?: boolean;

        /**
         * Child Controls within the layout.
         */
        content?: sap.ui.core.Control[] | sap.ui.core.Control;
      }

      interface FlexibleControlLayoutDataOpts
        extends sap.ui.core.LayoutDataOpts {
        /**
         * Sets the size of the content.
         */
        size?: sap.ui.core.CSSSize;

        /**
         * Sets the minimum size of the content in px.
         */
        minSize?: sap.ui.core.CSSSize;

        /**
         * Sets the margin-bottom of the content in px.
         */
        marginTop?: sap.ui.core.CSSSize;

        marginBottom?: sap.ui.core.CSSSize;
      }

      interface LegendItemOpts extends sap.m.StandardListItemOpts {
        /**
         * show color square
         */
        color?: sap.ui.core.CSSColor;

        /**
         * The semantic spot type for the legend marker.
         */
        semanticSpotType?: sap.ui.vbm.SemanticType;
      }

      interface ListPanelOpts extends sap.ui.core.ControlOpts {
        /**
         * Header text
         */
        headerText?: string;

        /**
         * Header icon
         */
        headerIcon?: sap.ui.core.URI;

        /**
         * Expansion state
         */
        expanded?: boolean;

        /**
         * Expand animation
         */
        expandAnimation?: boolean;

        /**
         * Selection Mode
         */
        selectionMode?: sap.m.ListMode;

        /**
         * Event is fired if the header icon is pressed
         */
        headerIconPress?: Function;

        /**
         * Event is fired if the panel is expanded of collapsed
         */
        expand?: Function;

        /**
         * Event is fired when selection is changed via user interaction inside the control.
         */
        selectionChange?: Function;

        /**
         * Event is fired when an item is pressed unless the item's `type` property is `Inactive`.
         */
        itemPress?: Function;

        /**
         * Item aggregation
         */
        items?: sap.m.ListItemBase[] | sap.m.ListItemBase;
      }

      interface ListPanelStackOpts extends sap.ui.core.ControlOpts {
        /**
         * Control width
         */
        width?: sap.ui.core.CSSSize;

        /**
         * Expansion state
         */
        expanded?: boolean;

        /**
         * Expand animation
         */
        expandAnimation?: boolean;

        /**
         * Ability to collapse
         */
        collapsible?: boolean;

        content?: sap.ui.vk.ListPanel[] | sap.ui.vk.ListPanel;
      }

      interface MapContainerOpts extends sap.ui.vk.ContainerBaseOpts {
        /**
         * Show navbar
         */
        showNavbar?: boolean;

        /**
         * Controls the visibility of the home button
         */
        showHome?: boolean;

        /**
         * Controls the visibility of the Map Layer Select
         */
        showMapLayer?: boolean;

        /**
         * Controls the visibility of the rectangular zoom button
         */
        showRectangularZoom?: boolean;

        /**
         * Controls the visibility of the zoom buttons
         */
        showZoom?: boolean;

        /**
         * List Panel aggregation
         */
        listPanelStack?: sap.ui.vk.ListPanelStack;
      }

      interface NativeViewportOpts extends sap.ui.core.ControlOpts {
        /**
         * Limit the abbility to zoom out. If enabled the zoom out stops if the image size reaches 25% of the full
         * view (best fit).
         */
        limitZoomOut?: boolean;

        /**
         * Raised when the display size of the image in the Native Viewport changes.
         */
        resize?: Function;

        /**
         * Raised when the display position or magnification of the image in the Native Viewport changes.
         */
        move?: Function;

        /**
         * An association to the `ContentConnector` instance that manages content resources.
         */
        contentConnector?: sap.ui.vk.ContentConnector | string;
      }

      interface NotificationsOpts extends sap.ui.core.ControlOpts {
        /**
         * This event will be fired when all messages in the log are deleted.
         */
        allMessagesCleared?: Function;

        /**
         * This event will be fired when a new log message is added.
         */
        messageAdded?: Function;
      }

      interface OverlayOpts extends sap.ui.core.ControlOpts {
        zoomOnResize?: boolean;

        /**
         * Raised when the Control is clicked.
         */
        click?: Function;

        /**
         * Raised when the Control is right clicked/longPress(tap and hold).
         */
        contextMenu?: Function;

        /**
         * Aggregation of Highlight Areas.
         */
        areas?: sap.ui.vk.OverlayArea[] | sap.ui.vk.OverlayArea;

        /**
         * Aggregation of Highlight Areas.
         */
        target?: sap.ui.core.Control | string;
      }

      interface OverlayAreaOpts extends sap.ui.core.ElementOpts {
        /**
         * Unique identifier for the object. This is optional. If not provided the default identifier sId is used.
         * However, sId is generated if template binding is used and thus it is not stable. Provide the key if the
         * object really needs a unique and stable identifier.
         */
        key?: string;

        /**
         * The position array for the OverlayArea. The format is "x0;y0;0;...;xN,yN,0".
         */
        position?: string;

        /**
         * The fill color of the OverlayArea.
         */
        color?: sap.ui.core.CSSColor;

        /**
         * The border color of the OverlayArea.
         */
        colorBorder?: sap.ui.core.CSSColor;

        /**
         * The select color of the OverlayArea in case selection highligthing is desired.
         */
        colorSelect?: string;

        /**
         * The non-select color of the OverlayArea in case non-selection de-highligthing is desired.
         */
        colorNonSelect?: string;

        /**
         * Color or color delta when object is hovered. Color deltas can be declared in the format RHLSA(;;;)
         */
        deltaColorHot?: string;

        /**
         * set to true if the element is selected
         */
        select?: boolean;

        /**
         * Set to true if OverlayArea is changeable.
         */
        changeable?: boolean;

        /**
         * The event is raised when there is a click action on an OverlayArea.
         */
        click?: Function;

        /**
         * The event is raised when there is a right click or a tap and hold action on an OverlayArea.
         */
        contextMenu?: Function;

        /**
         * This event is raised when the edge of an OverlayArea is clicked.
         */
        edgeClick?: Function;

        /**
         * This event is raised when the edge of an OverlayArea is right clicked.
         */
        edgeContextMenu?: Function;

        /**
         * This event is raised when the design handle of a changable OverlayArea is moved.
         */
        handleMoved?: Function;

        /**
         * This event is raised when the design handle of a changable OverlayArea is right clicked.
         */
        handleContextMenu?: Function;

        /**
         * This event is raised when the design handle of a changable OverlayArea is clicked.
         */
        handleClick?: Function;
      }

      interface ProgressIndicatorOpts extends sap.m.ProgressIndicatorOpts {}

      interface SceneTreeOpts extends sap.ui.core.ControlOpts {
        title?: string;

        showTitle?: boolean;

        showSearchField?: boolean;

        /**
         * This event will be fired when a scene tree content is replaced.
         */
        contentChanged?: Function;

        treeTable?: sap.ui.table.TreeTable;

        /**
         * An association to the `ContentConnector` instance that manages content resources.
         */
        contentConnector?: sap.ui.vk.ContentConnector | string;

        /**
         * An association to the `ViewStateManager` instance.
         */
        viewStateManager?: sap.ui.vk.ViewStateManager | string;
      }

      interface StepNavigationOpts extends sap.ui.core.ControlOpts {
        /**
         * Managed settings and properties for Step Navigation events.
         */
        settings?: object;

        /**
         * Width of the Step Navigation control.
         */
        width?: sap.ui.core.CSSSize;

        /**
         * Height of the Step Navigation control.
         */
        height?: sap.ui.core.CSSSize;

        /**
         * Indicates that the Step Navigation control should display thumbnails. If set to `true`, then thumbnails
         * are rendered. If set to `false`, then thumbnails are hidden.
         */
        showThumbnails?: boolean;

        /**
         * Indicates that the Step Navigation control should display a toolbar. If set to `true`, then the toolbar
         * is rendered. If set to `false`, then the toolbar is hidden.
         */
        showToolbar?: boolean;

        /**
         * Indicates that the Step Navigation control should display a popup containing information around the step
         * that is playing. If set to `true`, then the popup is rendered. If set to `false`, the popup is hidden.
         */
        showStepInfo?: boolean;

        resize?: Function;

        /**
         * Raised each time a step starts, changes, or finishes.
         */
        stepChanged?: Function;

        /**
         * Template control for Procedure items.
         */
        procedureItemTemplate?: sap.ui.core.Item;

        /**
         * sap.ui.core.Popup used to render step information in a popup.
         */
        stepInfoPopup?: sap.ui.core.Control;

        /**
         * sap.m.Toolbar used to render the entire Step Navigation control's content.
         */
        layout?: sap.m.Toolbar;

        /**
         * sap.m.ScrollContainer used to render a list of thumbnails for the available steps.
         */
        thumbnailsContainer?: sap.m.ScrollContainer;

        contentConnector?: sap.ui.vk.ContentConnector | string;
      }

      interface ToolbarOpts extends sap.ui.core.ControlOpts {
        /**
         * Used to set the title of the Toolbar
         */
        title?: string;

        /**
         * Toolbar content, this can be used to add/remove buttons and other SAP UI5 controls to the toolbar
         */
        content?: sap.ui.core.Control[] | sap.ui.core.Control;

        /**
         * A toolbar instance is associated with an instance of the Viewer
         */
        viewer?: sap.ui.vk.Viewer | string;
      }

      interface ViewerOpts extends sap.ui.core.ControlOpts {
        /**
         * Enables or disables the Overlay control
         */
        enableOverlay?: boolean;

        /**
         * Disables the scene tree control Button on the menu
         */
        enableSceneTree?: boolean;

        /**
         * Shows or hides the scene tree control
         */
        showSceneTree?: boolean;

        /**
         * Disables the Step Navigation Control Button on the menu
         */
        enableStepNavigation?: boolean;

        /**
         * Disables the Message Popover Control
         */
        enableNotifications?: boolean;

        /**
         * Shows or hides the Step Navigation Control
         */
        showStepNavigation?: boolean;

        /**
         * Shows or hides the Step Navigation thumbnails
         */
        showStepNavigationThumbnails?: boolean;

        /**
         * If enabled the Step Navigation will be overlayed on top of the viewport. Only set this during initialization.
         * Will not work when set at runtime.
         */
        overlayStepNavigation?: boolean;

        /**
         * Shows or hides Toolbar control
         */
        enableToolbar?: boolean;

        /**
         * Enable / disable progress indicator for downloading and rendering VDS files
         */
        enableProgressIndicator?: boolean;

        /**
         * Width of the Viewer control
         */
        width?: sap.ui.core.CSSSize;

        /**
         * Height of the Viewer control
         */
        height?: sap.ui.core.CSSSize;

        /**
         * The toolbar title
         */
        toolbarTitle?: string;

        /**
         * Whether or not we want ViewStateManager to keep track of visibility changes.
         */
        shouldTrackVisibilityChanges?: boolean;

        /**
         * Whether or not we want ViewStateManager to have recursive selection.
         */
        recursiveSelection?: boolean;

        /**
         * Optional Emscripten runtime module settings. A JSON object with the following properties:
         * 	 - totalMemory {int} size of Emscripten module memory in bytes, default value: 512 MB.
         * 	 - logElementId {string} ID of a textarea DOM element to write the log to.
         * 	 - statusElementId {string} ID of a DOM element to write the status messages to.  Emscripten runtime
         * 			module settings cannot be changed after the control is fully initialized.
         */
        runtimeSettings?: object;

        /**
         * Optional WebGL context attributes. A JSON object with the following boolean properties:
         * 	 - antialias {boolean} default value `true`. If set to `true`, the context will attempt to perform antialiased
         * 			rendering if possible.
         * 	 - alpha {boolean} default value `true`. If set to `true`, the context will have an alpha (transparency)
         * 			channel.
         * 	 - premultipliedAlpha {boolean} default value `false`. If set to `true`, the color channels in the framebuffer
         * 			will be stored premultiplied by the alpha channel to improve performance.  Other {@link https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.2
         * 			WebGL context attributes} are also supported. WebGL context attributes cannot be changed after the control
         * 			is fully initialized.
         */
        webGLContextAttributes?: object;

        /**
         * Enables or disables showing of all hotspots
         */
        showAllHotspots?: boolean;

        /**
         * Color used for highlighting Smart2D hotspots in the ABGR format.
         */
        hotspotColorABGR?: number;

        /**
         * Color used for highlighting Smart2D hotspots in the CSS Color format.
         */
        hotspotColor?: sap.ui.core.CSSColor;

        /**
         * This event will be fired when any content resource or the contentResources aggregation has been changed
         * and processed.
         */
        contentResourceChangesProcessed?: Function;

        /**
         * This event will be fired when a scene / image has been loaded into the Viewer.
         */
        sceneLoadingSucceeded?: Function;

        /**
         * This event will be fired when a critical error occurs during scene / image loading.
         */
        sceneLoadingFailed?: Function;

        /**
         * This event will be fired when scene / image loaded in Viewer is about to be destroyed.
         */
        sceneDestroying?: Function;

        /**
         * This event is fired when the nodes are selected/unselected.
         */
        selectionChanged?: Function;

        /**
         * This event is fired when viewer enters/exits full screen mode.
         */
        fullScreen?: Function;

        /**
         * This event will be fired when a URL in a note is clicked.
         */
        urlClicked?: Function;

        /**
         * This event will be fired when a node is clicked.
         */
        nodeClicked?: Function;

        /**
         * Content resources to load and display in the Viewer control.
         */
        contentResources?:
          | sap.ui.vk.ContentResource[]
          | sap.ui.vk.ContentResource;

        overlay?: sap.ui.vk.Overlay;
      }

      interface ViewGalleryOpts extends sap.ui.core.ControlOpts {
        /**
         * Indicates that the View Gallery control should display animation slider showing time of animation in
         * current view.
         */
        showAnimationTimeSlider?: boolean;

        /**
         * Indicates that the View Gallery control should display toolbar
         */
        showToolbar?: boolean;

        /**
         * Indicates that the View Gallery control should display thumbnails
         */
        showThumbnailContainer?: boolean;

        /**
         * Index of selected view
         */
        selectedViewIndex?: number;

        /**
         * Index of selected view group
         */
        selectedViewGroupIndex?: number;

        /**
         * Indicates that the View Gallery control should allow view reordering
         */
        enableViewReordering?: boolean;

        /**
         * Fires when selection is changed via user interaction inside the control.
         */
        selectionChange?: Function;

        /**
         * Fires when views are reordered
         */
        viewOrderChange?: Function;

        viewport?: sap.ui.vk.Viewport | string;

        contentConnector?: sap.ui.vk.ContentConnector | string;
      }

      interface ViewportOpts extends sap.ui.vk.ViewportBaseOpts {}

      interface ViewportBaseOpts extends sap.ui.core.ControlOpts {
        /**
         * Shows or hides the debug info.
         */
        showDebugInfo?: boolean;

        /**
         * Viewport background top color in the CSS Color format
         */
        backgroundColorTop?: sap.ui.core.CSSColor;

        /**
         * Viewport background bottom color in the CSS Color format
         */
        backgroundColorBottom?: sap.ui.core.CSSColor;

        /**
         * Viewport width
         */
        width?: sap.ui.core.CSSSize;

        /**
         * Viewport height
         */
        height?: sap.ui.core.CSSSize;

        /**
         * Selection mode
         */
        selectionMode?: any;

        /**
         * Freeze camera
         */
        freezeCamera?: boolean;

        /**
         * Viewport render mode
         */
        renderMode?: any;

        /**
         * This event is fired when a URL in a note is clicked.
         */
        urlClicked?: Function;

        /**
         * This event will be fired when a node is clicked.
         */
        nodeClicked?: Function;

        /**
         * This event is fired when viewport size is changed.
         */
        resize?: Function;

        /**
         * This event is fired when nodes in the scene are picked by user action. If application requires different
         * selection behaviour then it can handle this event and implement its own selection method. In this case
         * {@link sap.ui.vk.Viewport#selectionMode selectionMode} property should be set to `sap.ui.vk.SelectionMode.None`
         * Application can modify list of picked node references to alter selection behaviour.
         */
        nodesPicked?: Function;

        /**
         * This event is fired when a node in the scene is zoomed in/out by double-clicking.
         */
        nodeZoomed?: Function;

        /**
         * This event is fired when a view in the viewport is activated
         */
        viewActivated?: Function;

        /**
         * This event is fired when the current procedure is done playing
         */
        procedureFinished?: Function;

        /**
         * This event is fired when the current view is done playing
         */
        viewFinished?: Function;

        /**
         * This event is fired when a set of playbacks in a view start
         */
        animationStarted?: Function;

        /**
         * This event is fired when a set of playbacks in a view end
         */
        animationFinished?: Function;

        /**
         * This event is fired when animation tracks are updated by animation mixer
         */
        animationUpdated?: Function;

        /**
         * The controls inside the viewport.
         */
        content?: sap.ui.core.Control[] | sap.ui.core.Control;

        /**
         * An association to the `ContentConnector` instance that manages content resources.
         */
        contentConnector?: sap.ui.vk.ContentConnector | string;

        /**
         * An association to the `ViewStateManager` instance.
         */
        viewStateManager?: sap.ui.vk.ViewStateManager | string;

        /**
         * The tools of this viewport.
         */
        tools?: sap.ui.vk.tools.Tool[] | string[];
      }

      interface ViewStateManagerOpts
        extends sap.ui.vk.ViewStateManagerBaseOpts {}

      interface ViewStateManagerBaseOpts extends sap.ui.core.ElementOpts {
        shouldTrackVisibilityChanges?: boolean;

        recursiveSelection?: boolean;

        /**
         * This event is fired when the visibility of the node changes.
         */
        visibilityChanged?: Function;

        /**
         * This event is fired when the nodes are selected/unselected.
         */
        selectionChanged?: Function;

        /**
         * This event is fired when opacity of the nodes is changed.
         */
        opacityChanged?: Function;

        /**
         * This event is fired when tint color of the nodes is changed.
         */
        tintColorChanged?: Function;

        /**
         * This event is fired when the node hierarchy is replaced.
         */
        nodeHierarchyReplaced?: Function;

        /**
         * This event is fired when highlighting color is changed.
         */
        highlightColorChanged?: Function;

        contentConnector?: sap.ui.vk.ContentConnector | string;
      }
      /**
       * @EXPERIMENTAL (since 1.67.0)
       *
       * Provides definition for an animation playback
       */
      // @ts-ignore - static 'getMetadata' inheritance issue
      class AnimationPlayback extends sap.ui.base.ManagedObject {
        /**
         * Constructor for a new Playback.
         *
         * The objects of this class contain neccessary information to define how an animation sequence is played
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Creates a new subclass of class sap.ui.vk.AnimationPlayback with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getInfinite infinite}.
         *
         * if playback is repeated infinitely
         *
         * Default value is `false`.
         */
        getInfinite(): boolean;
        /**
         * Returns a metadata object for class sap.ui.vk.AnimationPlayback.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getPid pid}.
         *
         * pid
         */
        getPid(): string;
        /**
         * Gets current value of property {@link #getPostDelay postDelay}.
         *
         * delay time in second after playback ends
         *
         * Default value is `0`.
         */
        getPostDelay(): number;
        /**
         * Gets current value of property {@link #getPreDelay preDelay}.
         *
         * delay time in second before playback starts
         *
         * Default value is `0`.
         */
        getPreDelay(): number;
        /**
         * Gets current value of property {@link #getRepeat repeat}.
         *
         * number of repeats playback plays
         *
         * Default value is `1`.
         */
        getRepeat(): number;
        /**
         * Gets current value of property {@link #getReversed reversed}.
         *
         * if playback is reversed
         *
         * Default value is `false`.
         */
        getReversed(): boolean;
        /**
         * Gets current value of property {@link #getSequenceId sequenceId}.
         *
         * sequence id
         */
        getSequenceId(): string;
        /**
         * Gets current value of property {@link #getStartTime startTime}.
         *
         * start time of playback
         *
         * Default value is `0`.
         */
        getStartTime(): number;
        /**
         * Gets current value of property {@link #getTimeScale timeScale}.
         *
         * time scale
         *
         * Default value is `1`.
         */
        getTimeScale(): number;
        /**
         * Sets a new value for property {@link #getInfinite infinite}.
         *
         * if playback is repeated infinitely
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setInfinite(
          /**
           * New value for property `infinite`
           */
          bInfinite: boolean
        ): sap.ui.vk.AnimationPlayback;
        /**
         * Sets a new value for property {@link #getPid pid}.
         *
         * pid
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setPid(
          /**
           * New value for property `pid`
           */
          sPid: string
        ): sap.ui.vk.AnimationPlayback;
        /**
         * Sets a new value for property {@link #getPostDelay postDelay}.
         *
         * delay time in second after playback ends
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setPostDelay(
          /**
           * New value for property `postDelay`
           */
          fPostDelay: number
        ): sap.ui.vk.AnimationPlayback;
        /**
         * Sets a new value for property {@link #getPreDelay preDelay}.
         *
         * delay time in second before playback starts
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setPreDelay(
          /**
           * New value for property `preDelay`
           */
          fPreDelay: number
        ): sap.ui.vk.AnimationPlayback;
        /**
         * Sets a new value for property {@link #getRepeat repeat}.
         *
         * number of repeats playback plays
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `1`.
         */
        setRepeat(
          /**
           * New value for property `repeat`
           */
          iRepeat: number
        ): sap.ui.vk.AnimationPlayback;
        /**
         * Sets a new value for property {@link #getReversed reversed}.
         *
         * if playback is reversed
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setReversed(
          /**
           * New value for property `reversed`
           */
          bReversed: boolean
        ): sap.ui.vk.AnimationPlayback;
        /**
         * Sets a new value for property {@link #getSequenceId sequenceId}.
         *
         * sequence id
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setSequenceId(
          /**
           * New value for property `sequenceId`
           */
          sSequenceId: string
        ): sap.ui.vk.AnimationPlayback;
        /**
         * Sets a new value for property {@link #getStartTime startTime}.
         *
         * start time of playback
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setStartTime(
          /**
           * New value for property `startTime`
           */
          fStartTime: number
        ): sap.ui.vk.AnimationPlayback;
        /**
         * Sets a new value for property {@link #getTimeScale timeScale}.
         *
         * time scale
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `1`.
         */
        setTimeScale(
          /**
           * New value for property `timeScale`
           */
          fTimeScale: number
        ): sap.ui.vk.AnimationPlayback;
      }
      /**
       * @EXPERIMENTAL (since 1.67.0)
       *
       * Provides the interface for animation sequence
       */
      class AnimationSequence extends sap.ui.base.ManagedObject {
        /**
         * Constructor for an animation sequence.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * add a key frame using current node property
         */
        addKeyFrameByNodeProperty(
          /**
           * scene node reference
           */
          target: object,
          /**
           * rotate, translate, scale, opacity, or color
           */
          trackType: any,
          /**
           * of the key frame
           */
          time: number,
          /**
           * optional if fire keyFrameAdded event
           */
          notFireEvent: boolean
        ): number[];
        /**
         * Attaches event handler `fnFunction` to the {@link #event:keyFrameAdded keyFrameAdded} event of this `sap.ui.vk.AnimationSequence`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.AnimationSequence` itself.
         */
        attachKeyFrameAdded(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.AnimationSequence` itself
           */
          oListener?: object
        ): sap.ui.vk.AnimationSequence;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:keyFrameDeleted keyFrameDeleted} event of this
         * `sap.ui.vk.AnimationSequence`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.AnimationSequence` itself.
         */
        attachKeyFrameDeleted(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.AnimationSequence` itself
           */
          oListener?: object
        ): sap.ui.vk.AnimationSequence;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:keyFrameUpdated keyFrameUpdated} event of this
         * `sap.ui.vk.AnimationSequence`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.AnimationSequence` itself.
         */
        attachKeyFrameUpdated(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.AnimationSequence` itself
           */
          oListener?: object
        ): sap.ui.vk.AnimationSequence;
        /**
         * clone from another sequence
         */
        // @ts-ignore
        clone(
          /**
           * animation sequence to be cloned
           */
          sequence: sap.ui.vk.AnimationSequence,
          /**
           * optional if cloning the tracks representing highlights
           */
          includeHighlight: boolean
        ): void;
        /**
         * delete a key frame
         */
        deleteKeyFrame(
          /**
           * scene node reference
           */
          target: object,
          /**
           * rotate, translate, scale, opacity, or color
           */
          trackType: any,
          /**
           * index of key frame
           */
          index: number,
          /**
           * optional if fire keyFrameDeleted event
           */
          notFireEvent: boolean
        ): void;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:keyFrameAdded keyFrameAdded} event of this
         * `sap.ui.vk.AnimationSequence`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachKeyFrameAdded(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.AnimationSequence;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:keyFrameDeleted keyFrameDeleted} event of
         * this `sap.ui.vk.AnimationSequence`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachKeyFrameDeleted(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.AnimationSequence;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:keyFrameUpdated keyFrameUpdated} event of
         * this `sap.ui.vk.AnimationSequence`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachKeyFrameUpdated(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.AnimationSequence;
        /**
         * Creates a new subclass of class sap.ui.vk.AnimationSequence with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:keyFrameAdded keyFrameAdded} to attached listeners.
         */
        fireKeyFrameAdded(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * id of current sequence.
             */
            sequenceId?: string;
            /**
             * reference of target node.
             */
            targetNodeRef?: object;
            /**
             * track type.
             */
            trackType?: any;
            /**
             * key frame value, for rotate type, the value is in quaternion form
             */
            keyFrameValue?: number[];
            /**
             * key frame time.
             */
            keyFrameTime?: number;
          }
        ): sap.ui.vk.AnimationSequence;
        /**
         * Fires event {@link #event:keyFrameDeleted keyFrameDeleted} to attached listeners.
         */
        fireKeyFrameDeleted(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * id of current sequence.
             */
            sequenceId?: string;
            /**
             * reference of target node.
             */
            targetNodeRef?: object;
            /**
             * track type.
             */
            trackType?: any;
            /**
             * key frame value, for rotate type, the value is in quaternion form.
             */
            keyFrameValue?: number[];
            /**
             * key frame time.
             */
            keyFrameTime?: number;
            /**
             * key frame index.
             */
            keyFrameIndex?: number;
            /**
             * if the key frame is last, true - the track does not exist any more
             */
            lastKeyFrame?: boolean;
          }
        ): sap.ui.vk.AnimationSequence;
        /**
         * Fires event {@link #event:keyFrameUpdated keyFrameUpdated} to attached listeners.
         */
        fireKeyFrameUpdated(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * id of current sequence.
             */
            sequenceId?: string;
            /**
             * reference of target node.
             */
            targetNodeRef?: object;
            /**
             * track type.
             */
            trackType?: any;
            /**
             * key frame value, for rotate type, the value is in quaternion form.
             */
            keyFrameValue?: number[];
            /**
             * key frame time.
             */
            keyFrameTime?: number;
            /**
             * key frame index.
             */
            keyFrameIndex?: number;
          }
        ): sap.ui.vk.AnimationSequence;
        /**
         * Get duration of animation sequence
         */
        getDuration(): number;
        /**
         * Get interpolation type
         */
        getInterpolation(
          /**
           * scene node reference
           */
          target: object,
          /**
           * rotate, translate, scale, opacity, or color
           */
          trackType: any
        ): any;
        /**
         * Returns a metadata object for class sap.ui.vk.AnimationSequence.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getName name}.
         *
         * string name (optional)
         */
        getName(): string;
        /**
         * Get native animation clip
         */
        getNativeAnimationClip(): object;
        /**
         * Get the key frame whose time is nearest to the parameter
         */
        getNearestKeyFrame(
          /**
           * scene node reference
           */
          target: object,
          /**
           * rotate, translate, scale, opacity, or color
           */
          trackType: any,
          /**
           * The time
           */
          time: number,
          /**
           * if set, the nearest key frame must be between time - threshold and time + threshold, otherwise return
           * value is undefined
           */
          threshold: number
        ): object;
        /**
         * Get values of node properties at the end of animation sequence
         */
        getNodesEndValues(): any;
        /**
         * Get values of node properties at the start of animation sequence
         */
        getNodesStartValues(): any;
        /**
         * Get track pivot point
         */
        getPivot(
          /**
           * scene node reference
           */
          target: object
        ): number[];
        /**
         * Gets current value of property {@link #getSequenceId sequenceId}.
         *
         * sequence id
         */
        getSequenceId(): string;
        /**
         * Get track
         */
        getTrack(
          /**
           * scene node reference
           */
          target: object,
          /**
           * rotate, translate, scale, opacity, or color
           */
          trackType: any
        ): object;
        /**
         * Check if the animation sequence contains any track representing highlight
         */
        hasHighlight(): boolean;
        /**
         * Set original position, quaternion, and scale which are used to calculate rotate, translate, and scale
         * tracks when no keyframe is specified
         */
        resetOriginalPosition(
          /**
           * scene node reference
           */
          target: object,
          /**
           * for rotation
           */
          quaternion: number[],
          /**
           * for translation
           */
          position: number[],
          /**
           * for scale
           */
          scale: number[]
        ): void;
        /**
         * Set color track
         */
        setColorTrack(
          /**
           * scene node reference
           */
          target: object,
          /**
           * array of times
           */
          times: number[],
          /**
           * array of color values, three values for each color vector
           */
          values: number[],
          /**
           * (optional) lieanr, cubic, or discrete, default is linear
           */
          interpolation: any,
          /**
           * (optional) if true, the track is used for highlighting
           */
          isHighlight: boolean,
          /**
           * (optional) contain two boolean members cyclicStart and cyclicEnd cyclicStart - if true the key frames
           * will to be extended cyclically to start of animation sequence (time 0) cyclicEnd - if true the key frames
           * will to be extended cyclically to end of animation sequence (time sequence duration)
           */
          cyclicInfo: object
        ): void;
        /**
         * Set duration of animation sequence, the key frames outside duration are not used for animation Should
         * be called before adding key frame data
         */
        setDuration(
          /**
           * of animation sequence
           */
          duration: number
        ): void;
        /**
         * Set the animation sequence contains any track representing highlight
         */
        setHasHighlight(
          /**
           * true if the animation sequence contains track representing highlight
           */
          hasHighlight: boolean
        ): void;
        /**
         * Set the values of animated properties between the start time of sequence and the start times of corresponding
         * tracks to the values of target nodes' properties
         */
        setInitialStatusToTargetNodesValues(): void;
        /**
         * set interpolation type
         */
        setInterpolation(
          /**
           * scene node reference
           */
          target: object,
          /**
           * rotate, translate, scale, opacity, or color
           */
          trackType: any,
          /**
           * (optional) lieanr, cubic, or discrete
           */
          interpolation: any
        ): void;
        /**
         * Sets a new value for property {@link #getName name}.
         *
         * string name (optional)
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setName(
          /**
           * New value for property `name`
           */
          sName: string
        ): sap.ui.vk.AnimationSequence;
        /**
         * Set opacity track
         */
        setOpacityTrack(
          /**
           * scene node reference
           */
          target: object,
          /**
           * array of times
           */
          times: number[],
          /**
           * array of opacity values
           */
          values: number[],
          /**
           * (optional) lieanr, cubic, or discrete, default is linear
           */
          interpolation: any,
          /**
           * (optional) if true, the track is used for highlighting
           */
          isHighlight: boolean,
          /**
           * (optional) contain two boolean members cyclicStart and cyclicEnd cyclicStart - if true the key frames
           * will to be extended cyclically to start of animation sequence (time 0) cyclicEnd - if true the key frames
           * will to be extended cyclically to end of animation sequence (time sequence duration)
           */
          cyclicInfo: object
        ): void;
        /**
         * Set track pivot point, and recalculate corresponding key frames if positional tracks exist
         */
        setPivot(
          /**
           * scene node reference
           */
          target: object,
          /**
           * point coordinates
           */
          pivot: number[]
        ): void;
        /**
         * Set position tracks
         */
        setPositionTracks(
          /**
           * scene node reference
           */
          target: object,
          /**
           * array of times for rotate track
           */
          timesForRotate: number[],
          /**
           * array of times for translate track
           */
          timesForTranslate: number[],
          /**
           * array of times for scale track
           */
          timesForScale: number[],
          /**
           * angleAxis, euler, or quaternion
           */
          rotateType: any,
          /**
           * values for node rotation vectors, every four values for one rotation vector
           */
          rotateValues: number[],
          /**
           * values for node translation vectors, every three values for one position vector
           */
          translateValues: number[],
          /**
           * values for node scale vectors, every three values for one scale vector
           */
          scaleValues: number[],
          /**
           * coordinate vector (optional)
           */
          pivot: number[],
          /**
           * (optional) lieanr, cubic, or discrete, default is linear
           */
          interpolationForRotate: any,
          /**
           * (optional) lieanr, cubic, or discrete, default is linear
           */
          interpolationForTranslate: any,
          /**
           * (optional) lieanr, cubic, or discrete, default is linear
           */
          interpolationForScale: any,
          /**
           * (optional) contain two boolean members cyclicStart and cyclicEnd cyclicStart - if true the key frames
           * will to be extended cyclically to start of animation sequence (time 0) cyclicEnd - if true the key frames
           * will to be extended cyclically to end of animation sequence (time sequence duration)
           */
          cyclicInfoForRotate: object,
          /**
           * (optional) contain two boolean members cyclicStart and cyclicEnd
           */
          cyclicInfoForTranslate: object,
          /**
           * (optional) contain two boolean members cyclicStart and cyclicEnd
           */
          cyclicInfoForScale: object
        ): void;
        /**
         * Sets a new value for property {@link #getSequenceId sequenceId}.
         *
         * sequence id
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setSequenceId(
          /**
           * New value for property `sequenceId`
           */
          sSequenceId: string
        ): sap.ui.vk.AnimationSequence;
        /**
         * set track cyclic style
         */
        setTrackCyclicStyle(
          /**
           * scene node reference
           */
          target: object,
          /**
           * rotate, translate, scale, opacity, or color
           */
          trackType: any,
          /**
           * if true, extend track to the start of sequence cyclically
           */
          cyclicStart: boolean,
          /**
           * if true, extend track to the end of sequence cyclically
           */
          cyclicEnd: boolean
        ): void;
        /**
         * Update a key frame
         */
        updateKeyFrame(
          /**
           * scene node reference
           */
          target: object,
          /**
           * rotate, translate, scale, opacity, or color
           */
          trackType: any,
          /**
           * index of postion Key frames
           */
          index: number,
          /**
           * of key frame
           */
          time: number,
          /**
           * property
           */
          value: number[],
          /**
           * angleAxis, euler, or quaternion, only for "rotate" track
           */
          rotateType: any,
          /**
           * optional if fire keyFrameUpdated event
           */
          notFireEvent: boolean
        ): void;
        /**
         * update a key frame using current node property
         */
        updateKeyFrameByNodeProperty(
          /**
           * scene node reference
           */
          target: object,
          /**
           * rotate, translate, scale, opacity, or color
           */
          trackType: any,
          /**
           * of key frame
           */
          time: number,
          /**
           * Index of key frame to be updated
           */
          index: number,
          /**
           * optional if fire keyFrameUpdated event
           */
          notFireEvent: boolean
        ): void;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:keyFrameAdded keyFrameAdded} event of this `sap.ui.vk.AnimationSequence`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.AnimationSequence` itself.
         */
        attachKeyFrameAdded(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.AnimationSequence` itself
           */
          oListener?: object
        ): sap.ui.vk.AnimationSequence;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:keyFrameDeleted keyFrameDeleted} event of this
         * `sap.ui.vk.AnimationSequence`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.AnimationSequence` itself.
         */
        attachKeyFrameDeleted(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.AnimationSequence` itself
           */
          oListener?: object
        ): sap.ui.vk.AnimationSequence;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:keyFrameUpdated keyFrameUpdated} event of this
         * `sap.ui.vk.AnimationSequence`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.AnimationSequence` itself.
         */
        attachKeyFrameUpdated(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.AnimationSequence` itself
           */
          oListener?: object
        ): sap.ui.vk.AnimationSequence;
      }
      /**
       * Provides a simple, lightweight proxy object to a node in a node hierarchy.
       *
       * The objects of this class should not be created directly, and should only be created through the use
       * of the following methods:
       * 	 - {@link sap.ui.vk.NodeHierarchy#enumerateChildren sap.ui.vk.NodeHierarchy.enumerateChildren}
       * 	 - {@link sap.ui.vk.NodeHierarchy#enumerateAncestors sap.ui.vk.NodeHierarchy.enumerateAncestors}
       * 	 - {@link sap.ui.vk.ViewStateManager#enumerateSelection sap.ui.vk.ViewStateManager.enumerateSelection}
       */
      // @ts-ignore - Class 'BaseNodeProxy' incorrectly implements interface 'Poolable'. Type 'BaseNodeProxy' is missing the following properties from type 'Poolable': init, reset
      class BaseNodeProxy extends sap.ui.base.Object
        implements sap.ui.base.Poolable, sap.ui.vk.BaseNodeProxy {
        /**
         * Constructor for a new BaseNodeProxy. The objects of this class should not be created directly, and should
         * only be created through the use of the following methods:
         * 	 - {@link sap.ui.vk.NodeHierarchy#enumerateChildren sap.ui.vk.NodeHierarchy.enumerateChildren}
         * 	 - {@link sap.ui.vk.NodeHierarchy#enumerateAncestors sap.ui.vk.NodeHierarchy.enumerateAncestors}
         * 	 - {@link sap.ui.vk.ViewStateManager#enumerateSelection sap.ui.vk.ViewStateManager.enumerateSelection}
         */
        constructor();

        /**
         * Creates a new subclass of class sap.ui.vk.BaseNodeProxy with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Indicates whether the node has child nodes.
         */
        getHasChildren(): boolean;
        /**
         * Returns a metadata object for class sap.ui.vk.BaseNodeProxy.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets the name of the node.
         */
        getName(): string;
        /**
         * Gets the ID of the node.
         */
        getNodeId(): string;
        /**
         * Gets the metadata of the node.
         */
        getNodeMetadata(): object;
        /**
         * Gets the reference object of the node.
         */
        getNodeRef(): any;
        /**
         * Gets the scene reference that this BaseNodeProxy object wraps.
         */
        getSceneRef(): any;
      }
      /**
       * @SINCE 1.52.0
       *
       * Provides the base interface for the camera.
       *
       * The objects of this class should not be created directly. Use PerspectiveCamera or OrthographicCamera
       * instead.
       */
      // @ts-ignore - static 'getMetadata' inheritance issue
      class Camera extends sap.ui.base.ManagedObject {
        /**
         * Constructor for a new Camera.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Creates a new subclass of class sap.ui.vk.Camera with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**/
        getCameraRef(): any;
        /**
         * Gets current value of property {@link #getFarClipPlane farClipPlane}.
         *
         * Far clipping plane distance
         */
        getFarClipPlane(): number;
        /**/
        getIsModified(): boolean;
        /**
         * Returns a metadata object for class sap.ui.vk.Camera.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getNearClipPlane nearClipPlane}.
         *
         * Near clipping plane distance
         */
        getNearClipPlane(): number;
        /**
         * Gets current value of property {@link #getPosition position}.
         *
         * Camera position in global space (x, y, z coordinates)
         */
        getPosition(): number[];
        /**
         * Gets current value of property {@link #getTargetDirection targetDirection}.
         *
         * Camera direction vector in global space (normalized x, y, z vector values)
         */
        getTargetDirection(): number[];
        /**
         * Gets current value of property {@link #getUpDirection upDirection}.
         *
         * Camera up vector in global space (normalized x, y, z vector values)
         */
        getUpDirection(): number[];
        /**
         * Sets a new value for property {@link #getFarClipPlane farClipPlane}.
         *
         * Far clipping plane distance
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setFarClipPlane(
          /**
           * New value for property `farClipPlane`
           */
          fFarClipPlane: number
        ): sap.ui.vk.Camera;
        /**/
        setIsModified(
          /**
           * Set or reset flag to indicate if this object is modified
           */
          val: boolean
        ): void;
        /**
         * Sets a new value for property {@link #getNearClipPlane nearClipPlane}.
         *
         * Near clipping plane distance
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setNearClipPlane(
          /**
           * New value for property `nearClipPlane`
           */
          fNearClipPlane: number
        ): sap.ui.vk.Camera;
        /**
         * Sets a new value for property {@link #getPosition position}.
         *
         * Camera position in global space (x, y, z coordinates)
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setPosition(
          /**
           * New value for property `position`
           */
          sPosition: number[]
        ): sap.ui.vk.Camera;
        /**
         * Sets a new value for property {@link #getTargetDirection targetDirection}.
         *
         * Camera direction vector in global space (normalized x, y, z vector values)
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setTargetDirection(
          /**
           * New value for property `targetDirection`
           */
          sTargetDirection: number[]
        ): sap.ui.vk.Camera;
        /**
         * Sets a new value for property {@link #getUpDirection upDirection}.
         *
         * Camera up vector in global space (normalized x, y, z vector values)
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setUpDirection(
          /**
           * New value for property `upDirection`
           */
          sUpDirection: number[]
        ): sap.ui.vk.Camera;
      }
      /**
       * @SINCE 1.38.0
       *
       * Abstract Constructor for a new Container.
       */
      class ContainerBase extends sap.ui.core.Control {
        /**
         * Abstract Constructor for a new Container.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: ContainerBaseOpts
        );

        /**
         * adjusts customizable buttons of overflow toolbar, displays content buttons
         */
        _addToolbarContent(): void;
        /**
         * add container content - map, table..
         */
        addContent(
          /**
           * content object to add
           */
          oObject: sap.ui.vk.ContainerContent
        ): void;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentChange contentChange} event of this `sap.ui.vk.ContainerBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ContainerBase` itself.
         */
        attachContentChange(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ContainerBase` itself
           */
          oListener?: object
        ): sap.ui.vk.ContainerBase;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:settingsPressed settingsPressed} event of this
         * `sap.ui.vk.ContainerBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ContainerBase` itself.
         */
        attachSettingsPressed(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ContainerBase` itself
           */
          oListener?: object
        ): sap.ui.vk.ContainerBase;
        /**
         * Destroys all the content in the aggregation {@link #getContent content}.
         */
        destroyContent(): sap.ui.vk.ContainerBase;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:contentChange contentChange} event of this
         * `sap.ui.vk.ContainerBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachContentChange(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.ContainerBase;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:settingsPressed settingsPressed} event of
         * this `sap.ui.vk.ContainerBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachSettingsPressed(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.ContainerBase;
        /**
         * Creates a new subclass of class sap.ui.vk.ContainerBase with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:contentChange contentChange} to attached listeners.
         */
        fireContentChange(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            selectedItemId?: string;
          }
        ): sap.ui.vk.ContainerBase;
        /**
         * Fires event {@link #event:settingsPressed settingsPressed} to attached listeners.
         */
        fireSettingsPressed(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): sap.ui.vk.ContainerBase;
        /**
         * Gets current value of property {@link #getAutoAdjustHeight autoAdjustHeight}.
         *
         * Default value is `false`.
         */
        getAutoAdjustHeight(): boolean;
        /**
         * Gets content of aggregation {@link #getContent content}.
         *
         * Content Aggregation.
         */
        getContent(): sap.ui.vk.ContainerContent[];
        /**
         * Gets current value of property {@link #getFullScreen fullScreen}.
         *
         * Controls whether the control is show fullscreen or embedded
         *
         * Default value is `false`.
         */
        getFullScreen(): boolean;
        /**
         * Returns a metadata object for class sap.ui.vk.ContainerBase.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * get selected content
         */
        getSelectedContent(): sap.ui.vk.ContainerContent;
        /**
         * Gets current value of property {@link #getShowFullScreen showFullScreen}.
         *
         * Show fullscreen toggle button in toolbar
         *
         * Default value is `true`.
         */
        getShowFullScreen(): boolean;
        /**
         * Gets current value of property {@link #getShowSelection showSelection}.
         *
         * Show selection button in toolbar
         *
         * Default value is `true`.
         */
        getShowSelection(): boolean;
        /**
         * Gets current value of property {@link #getShowSettings showSettings}.
         *
         * Show settings button in toolbar
         *
         * Default value is `true`.
         */
        getShowSettings(): boolean;
        /**
         * Gets current value of property {@link #getTitle title}.
         *
         * Title to show in toolbar
         *
         * Default value is `empty string`.
         */
        getTitle(): string;
        /**
         * Checks for the provided `sap.ui.vk.ContainerContent` in the aggregation {@link #getContent content}.
         * and returns its index if found or -1 otherwise.
         */
        indexOfContent(
          /**
           * The content whose index is looked for
           */
          oContent: sap.ui.vk.ContainerContent
        ): number;
        /**
         * insert container content - map, table..
         */
        insertContent(
          /**
           * content object to insert
           */
          oObject: sap.ui.vk.ContainerContent,
          /**
           * index in the content aggregation where to insert the new content object
           */
          iIndex: number
        ): void;
        /**
         * Removes all the controls from the aggregation {@link #getContent content}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllContent(): sap.ui.vk.ContainerContent[];
        /**
         * Removes a content from the aggregation {@link #getContent content}.
         */
        removeContent(
          /**
           * The content to remove or its index or id
           */
          vContent: number | string | sap.ui.vk.ContainerContent
        ): sap.ui.vk.ContainerContent;
        /**
         * Sets a new value for property {@link #getAutoAdjustHeight autoAdjustHeight}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setAutoAdjustHeight(
          /**
           * New value for property `autoAdjustHeight`
           */
          bAutoAdjustHeight: boolean
        ): sap.ui.vk.ContainerBase;
        /**
         * set FullScreen - default is normal mode, but app can call this method to set the default to full screen
         */
        setFullScreen(
          /**
           * Fullscreen mode on or off
           */
          bFullScreen: boolean
        ): void;
        /**
         * set selected content
         */
        setSelectedContent(
          /**
           * the selected content; involves no re-rendering
           */
          oContent: sap.ui.vk.ContainerContent
        ): void;
        /**
         * Sets a new value for property {@link #getShowFullScreen showFullScreen}.
         *
         * Show fullscreen toggle button in toolbar
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setShowFullScreen(
          /**
           * New value for property `showFullScreen`
           */
          bShowFullScreen: boolean
        ): sap.ui.vk.ContainerBase;
        /**
         * Sets a new value for property {@link #getShowSelection showSelection}.
         *
         * Show selection button in toolbar
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setShowSelection(
          /**
           * New value for property `showSelection`
           */
          bShowSelection: boolean
        ): sap.ui.vk.ContainerBase;
        /**
         * Sets a new value for property {@link #getShowSettings showSettings}.
         *
         * Show settings button in toolbar
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setShowSettings(
          /**
           * New value for property `showSettings`
           */
          bShowSettings: boolean
        ): sap.ui.vk.ContainerBase;
        /**
         * Display title
         */
        setTitle(
          /**
           * the title
           */
          sValue: string
        ): void;
        /**
         * default Content could be defined in application
         */
        switchContent(
          /**
           * the content to be visible; involves re-rendering
           */
          oContent: sap.ui.vk.ContainerContent
        ): void;
        /**
         * update container to allow dynamic change button layout
         */
        updateContainer(): void;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentChange contentChange} event of this `sap.ui.vk.ContainerBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ContainerBase` itself.
         */
        attachContentChange(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ContainerBase` itself
           */
          oListener?: object
        ): sap.ui.vk.ContainerBase;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:settingsPressed settingsPressed} event of this
         * `sap.ui.vk.ContainerBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ContainerBase` itself.
         */
        attachSettingsPressed(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ContainerBase` itself
           */
          oListener?: object
        ): sap.ui.vk.ContainerBase;
      }
      /**
       * @SINCE 1.38.0
       *
       * Aggregation element for the Container Base
       */
      class ContainerContent extends sap.ui.core.Control {
        /**
         * Constructor for a new ContainerContent.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: ContainerContentOpts
        );

        /**
         * Destroys the content in the aggregation {@link #getContent content}.
         */
        destroyContent(): sap.ui.vk.ContainerContent;
        /**
         * Creates a new subclass of class sap.ui.vk.ContainerContent with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets content of aggregation {@link #getContent content}.
         */
        getContent(): sap.ui.core.Control;
        /**
         * Gets current value of property {@link #getIcon icon}.
         *
         * Icon to show up in the toolbar
         */
        getIcon(): string;
        /**
         * Returns a metadata object for class sap.ui.vk.ContainerContent.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getTitle title}.
         *
         * Title for the icon in the toolbar
         */
        getTitle(): string;
        /**
         * Sets the aggregated {@link #getContent content}.
         */
        setContent(
          /**
           * The content to set
           */
          oContent: sap.ui.core.Control
        ): sap.ui.vk.ContainerContent;
        /**
         * Sets a new value for property {@link #getIcon icon}.
         *
         * Icon to show up in the toolbar
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setIcon(
          /**
           * New value for property `icon`
           */
          sIcon: string
        ): sap.ui.vk.ContainerContent;
        /**
         * Sets a new value for property {@link #getTitle title}.
         *
         * Title for the icon in the toolbar
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setTitle(
          /**
           * New value for property `title`
           */
          sTitle: string
        ): sap.ui.vk.ContainerContent;
      }
      /**
       * Provides an object that owns content resources, tracks their changes and loads and destroys the content
       * built from the content resources.
       */
      class ContentConnector extends sap.ui.core.Element {
        /**
         * Constructor for a new ContentConnector.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new ContentConnector object. Generated automatically if no ID is given.
           */
          sId?: string,
          /**
           * Initial settings for the new ContentConnector object.
           */
          mSettings?: ContentConnectorOpts
        );

        /**
         * @SINCE 1.50.0
         *
         * Adds a new content manager resolver.
         *
         * The last added resolver will be executed the first.
         *
         * Content manager resolver analyzes the content resource definition and returns the type of the content
         * manager to use for loading the content resource.
         *
         * The simplest resolver tests the content resource source type. The test can be either a string comparison
         * or a regular expression.
         *
         * A more sofisticated resolver is a function that can use the full content resource definition to find
         * a proper content manager dynamically, e.g. the resolver can use the 'HEAD' HTTP request to get the 'Content-Type'
         * header to find out the type of the content resource.
         */
        static addContentManagerResolver(
          /**
           * Object that defines how to find out the content manager class name.
           *  If `resolver` is a function then this function takes one parameter of type {@link sap.ui.vk.ContentResource
           * sap.ui.vk.ContentResource} and returns a {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise
           * Promise} that resolves with an object with the following properties:
           * 	 - `dimension` - int - Dimension of the model. E.g. 2 or 3.
           * 	 - `contentManagerClassName` - string - Name of content manager class to use for loading the content
           * 			resource.
           * 	 - `settings` - object - Optional settings specific to the content manager.
           *  See {@link sap.ui.vk.threejs.ContentManager sap.ui.vk.threejs.ContentManager}.  If `resolver` is
           * an object then it has the following properties.
           */
          resolver: {
            /**
             * The pattern the {@link sap.ui.vk.ContentResource#getSourceType sourceType} property of the content resource
             * is compared with.
             */
            pattern?: string | RegExp;
            /**
             * Dimension of models of this source type. E.g. 2 or 3.
             */
            dimension?: number;
            /**
             * Name of the content manager class to use for loading content resources of this type. E.g. sap.ui.vk.dvl.ContentManager,
             * sap.ui.vk.threejs.ContentManager, sap.ui.vk.ImageContentManager.
             */
            contentManagerClassName?: string;
            /**
             * Optional settings specific to the content manager class.
             */
            settings?: object;
          }
        ): Function;
        /**
         * Adds some contentResource to the aggregation {@link #getContentResources contentResources}.
         */
        addContentResource(
          /**
           * The contentResource to add; if empty, nothing is inserted
           */
          oContentResource: sap.ui.vk.ContentResource
        ): sap.ui.vk.ContentConnector;
        /**
         * Adds some viewStateManager to the aggregation {@link #getViewStateManagers viewStateManagers}.
         */
        addViewStateManager(
          /**
           * The viewStateManager to add; if empty, nothing is inserted
           */
          oViewStateManager: sap.ui.vk.ViewStateManager
        ): sap.ui.vk.ContentConnector;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentChangesFinished contentChangesFinished}
         * event of this `sap.ui.vk.ContentConnector`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ContentConnector` itself.
         *
         * This event will be fired when any content resource or the contentResources aggregation has been changed
         * and processed.
         */
        attachContentChangesFinished(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ContentConnector` itself
           */
          oListener?: object
        ): sap.ui.vk.ContentConnector;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentChangesProgress contentChangesProgress}
         * event of this `sap.ui.vk.ContentConnector`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ContentConnector` itself.
         *
         * This event will be fired to report the progress of content changes.
         */
        attachContentChangesProgress(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ContentConnector` itself
           */
          oListener?: object
        ): sap.ui.vk.ContentConnector;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentChangesStarted contentChangesStarted}
         * event of this `sap.ui.vk.ContentConnector`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ContentConnector` itself.
         *
         * This event will be fired when content resource changes are about to be processed.
         */
        attachContentChangesStarted(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ContentConnector` itself
           */
          oListener?: object
        ): sap.ui.vk.ContentConnector;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentDestroying contentDestroying} event of
         * this `sap.ui.vk.ContentConnector`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ContentConnector` itself.
         *
         * This event will be fired when the current content is about to be destroyed.
         */
        attachContentDestroying(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ContentConnector` itself
           */
          oListener?: object
        ): sap.ui.vk.ContentConnector;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentReplaced contentReplaced} event of this
         * `sap.ui.vk.ContentConnector`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ContentConnector` itself.
         *
         * This event will be fired when the current content is completely rebuilt or destroyed as a result of changes
         * in content resources.
         */
        attachContentReplaced(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ContentConnector` itself
           */
          oListener?: object
        ): sap.ui.vk.ContentConnector;
        /**
         * Binds aggregation {@link #getContentResources contentResources} to model data.
         *
         * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
         * of the possible properties of `oBindingInfo`.
         */
        bindContentResources(
          /**
           * The binding information
           */
          oBindingInfo: object
        ): sap.ui.vk.ContentConnector;
        /**
         * Destroys all the contentResources in the aggregation {@link #getContentResources contentResources}.
         */
        destroyContentResources(): sap.ui.vk.ContentConnector;
        /**
         * Destroys all the viewStateManagers in the aggregation {@link #getViewStateManagers viewStateManagers}.
         */
        destroyViewStateManagers(): sap.ui.vk.ContentConnector;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:contentChangesFinished contentChangesFinished}
         * event of this `sap.ui.vk.ContentConnector`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachContentChangesFinished(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.ContentConnector;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:contentChangesProgress contentChangesProgress}
         * event of this `sap.ui.vk.ContentConnector`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachContentChangesProgress(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.ContentConnector;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:contentChangesStarted contentChangesStarted}
         * event of this `sap.ui.vk.ContentConnector`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachContentChangesStarted(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.ContentConnector;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:contentDestroying contentDestroying} event
         * of this `sap.ui.vk.ContentConnector`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachContentDestroying(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.ContentConnector;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:contentReplaced contentReplaced} event of
         * this `sap.ui.vk.ContentConnector`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachContentReplaced(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.ContentConnector;
        /**
         * Creates a new subclass of class sap.ui.vk.ContentConnector with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:contentChangesFinished contentChangesFinished} to attached listeners.
         */
        fireContentChangesFinished(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * The content created or updated.
             *
             * The content can be of type HTMLImageElement, sap.ui.vk.Scene etc.
             */
            content?: any;
            /**
             * The failure reason if any.
             *  An single element or an array of elements with the following structure:
             * 	error - An object with details of the error. contentResource - A {@link sap.ui.vk.ContentResource
             * sap.ui.vk.ContentResource} object when it is possible to match the Error object to a {@link sap.ui.vk.ContentResource
             * sap.ui.vk.ContentResource} object.
             */
            failureReason?: any;
          }
        ): sap.ui.vk.ContentConnector;
        /**
         * Fires event {@link #event:contentChangesProgress contentChangesProgress} to attached listeners.
         */
        fireContentChangesProgress(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * The name of the loading phase. It can be e.g. 'downloading', 'building the scene' etc. It might be null
             * if reporting this parameter does not make sense.
             */
            phase?: string;
            /**
             * The overall percentage of the loading process.
             */
            percentage?: number;
            /**
             * The content resource currently being loaded. It might be null if reporting this parameter does not make
             * sense.
             */
            source?: any;
          }
        ): sap.ui.vk.ContentConnector;
        /**
         * Fires event {@link #event:contentChangesStarted contentChangesStarted} to attached listeners.
         */
        fireContentChangesStarted(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): sap.ui.vk.ContentConnector;
        /**
         * Fires event {@link #event:contentDestroying contentDestroying} to attached listeners.
         */
        fireContentDestroying(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * The content to be destroyed.
             *
             * The content can be of type HTMLImageElement, sap.ui.vk.Scene etc.
             */
            content?: any;
            /**
             * Returns a `function(prevent: boolean)` with one boolean parameter. To prevent garbage collection after
             * the content is destroyed call this function passing `true` as a parameter.
             */
            preventGarbageCollection?: Function;
          }
        ): sap.ui.vk.ContentConnector;
        /**
         * Fires event {@link #event:contentReplaced contentReplaced} to attached listeners.
         */
        fireContentReplaced(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * New content.
             *
             * The content can be of type HTMLImageElement, sap.ui.vk.Scene etc.
             */
            newContent?: any;
            /**
             * Old content.
             *
             * The content can be of type HTMLImageElement, sap.ui.vk.Scene etc.
             */
            oldContent?: any;
          }
        ): sap.ui.vk.ContentConnector;
        /**
         * @SINCE 1.50.0
         *
         * Gets the content currently loaded.
         */
        getContent(): any;
        /**
         * @SINCE 1.50.0
         *
         * Gets the content manager used to load the current content.
         */
        getContentManager(): sap.ui.vk.ContentManager;
        /**
         * Gets content of aggregation {@link #getContentResources contentResources}.
         *
         * Content resources to load and display.
         */
        getContentResources(): sap.ui.vk.ContentResource[];
        /**
         * Returns a metadata object for class sap.ui.vk.ContentConnector.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets content of aggregation {@link #getViewStateManagers viewStateManagers}.
         *
         * View state managers.
         */
        getViewStateManagers(): sap.ui.vk.ViewStateManager[];
        /**
         * Checks for the provided `sap.ui.vk.ContentResource` in the aggregation {@link #getContentResources contentResources}.
         * and returns its index if found or -1 otherwise.
         */
        indexOfContentResource(
          /**
           * The contentResource whose index is looked for
           */
          oContentResource: sap.ui.vk.ContentResource
        ): number;
        /**
         * Checks for the provided `sap.ui.vk.ViewStateManager` in the aggregation {@link #getViewStateManagers
         * viewStateManagers}. and returns its index if found or -1 otherwise.
         */
        indexOfViewStateManager(
          /**
           * The viewStateManager whose index is looked for
           */
          oViewStateManager: sap.ui.vk.ViewStateManager
        ): number;
        /**
         * Inserts a contentResource into the aggregation {@link #getContentResources contentResources}.
         */
        insertContentResource(
          /**
           * The contentResource to insert; if empty, nothing is inserted
           */
          oContentResource: sap.ui.vk.ContentResource,
          /**
           * The `0`-based index the contentResource should be inserted at; for a negative value of `iIndex`, the
           * contentResource is inserted at position 0; for a value greater than the current size of the aggregation,
           * the contentResource is inserted at the last position
           */
          iIndex: number
        ): sap.ui.vk.ContentConnector;
        /**
         * Inserts a viewStateManager into the aggregation {@link #getViewStateManagers viewStateManagers}.
         */
        insertViewStateManager(
          /**
           * The viewStateManager to insert; if empty, nothing is inserted
           */
          oViewStateManager: sap.ui.vk.ViewStateManager,
          /**
           * The `0`-based index the viewStateManager should be inserted at; for a negative value of `iIndex`, the
           * viewStateManager is inserted at position 0; for a value greater than the current size of the aggregation,
           * the viewStateManager is inserted at the last position
           */
          iIndex: number
        ): sap.ui.vk.ContentConnector;
        /**
         * @SINCE 1.50.0
         *
         * Removes all content manager resolvers.
         */
        static removeAllContentManagerResolvers(): Function;
        /**
         * Removes all the controls from the aggregation {@link #getContentResources contentResources}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllContentResources(): sap.ui.vk.ContentResource[];
        /**
         * Removes all the controls from the aggregation {@link #getViewStateManagers viewStateManagers}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllViewStateManagers(): sap.ui.vk.ViewStateManager[];
        /**
         * @SINCE 1.50.0
         *
         * Removes a content manager resolver.
         *
         * If there are more than one content manager resolver matching the `resolver` the last added is removed.
         */
        static removeContentManagerResolver(
          /**
           * Object that defines how to find out the content manager class name.
           */
          resolver: Function | string | RegExp
        ): boolean;
        /**
         * Removes a contentResource from the aggregation {@link #getContentResources contentResources}.
         */
        removeContentResource(
          /**
           * The contentResource to remove or its index or id
           */
          vContentResource: number | string | sap.ui.vk.ContentResource
        ): sap.ui.vk.ContentResource;
        /**
         * Removes a viewStateManager from the aggregation {@link #getViewStateManagers viewStateManagers}.
         */
        removeViewStateManager(
          /**
           * The viewStateManager to remove or its index or id
           */
          vViewStateManager: number | string | sap.ui.vk.ViewStateManager
        ): sap.ui.vk.ViewStateManager;
        /**
         * @SINCE 1.60.0
         *
         * Sets a callback function which will be used to obtain authorizatio token when connected to remote server.
         */
        setAuthorizationHandler(
          /**
           * An application defined callback function that can provide authorization token.
           */
          handler: sap.ui.vk.AuthorizationHandler
        ): sap.ui.vk.ContentConnector;
        /**
         * @SINCE 1.60.0
         *
         * Sets an object that decrypts content of encrypted models.
         */
        setDecryptionHandler(
          /**
           * An object that decrypts content of encrypted models.
           */
          handler: sap.ui.vk.DecryptionHandler
        ): sap.ui.vk.ContentConnector;
        /**
         * Unbinds aggregation {@link #getContentResources contentResources} from model data.
         */
        unbindContentResources(): sap.ui.vk.ContentConnector;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentChangesFinished contentChangesFinished}
         * event of this `sap.ui.vk.ContentConnector`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ContentConnector` itself.
         *
         * This event will be fired when any content resource or the contentResources aggregation has been changed
         * and processed.
         */
        attachContentChangesFinished(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ContentConnector` itself
           */
          oListener?: object
        ): sap.ui.vk.ContentConnector;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentChangesProgress contentChangesProgress}
         * event of this `sap.ui.vk.ContentConnector`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ContentConnector` itself.
         *
         * This event will be fired to report the progress of content changes.
         */
        attachContentChangesProgress(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ContentConnector` itself
           */
          oListener?: object
        ): sap.ui.vk.ContentConnector;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentChangesStarted contentChangesStarted}
         * event of this `sap.ui.vk.ContentConnector`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ContentConnector` itself.
         *
         * This event will be fired when content resource changes are about to be processed.
         */
        attachContentChangesStarted(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ContentConnector` itself
           */
          oListener?: object
        ): sap.ui.vk.ContentConnector;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentDestroying contentDestroying} event of
         * this `sap.ui.vk.ContentConnector`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ContentConnector` itself.
         *
         * This event will be fired when the current content is about to be destroyed.
         */
        attachContentDestroying(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ContentConnector` itself
           */
          oListener?: object
        ): sap.ui.vk.ContentConnector;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentReplaced contentReplaced} event of this
         * `sap.ui.vk.ContentConnector`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ContentConnector` itself.
         *
         * This event will be fired when the current content is completely rebuilt or destroyed as a result of changes
         * in content resources.
         */
        attachContentReplaced(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ContentConnector` itself
           */
          oListener?: object
        ): sap.ui.vk.ContentConnector;
      }
      /**
       * @SINCE 1.50.0
       *
       * Provides a base loader interface.
       *
       * To load content a concrete loader class is to be used.
       */
      // @ts-ignore - static 'getMetadata' inheritance issue
      class ContentManager extends sap.ui.base.ManagedObject {
        /**
         * Constructor for a new ContentManager.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new ContentManager object. Generated automatically if no ID is given.
           */
          sId?: string,
          /**
           * Initial settings for the new ContentManager object.
           */
          mSettings?: object
        );

        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentChangesFinished contentChangesFinished}
         * event of this `sap.ui.vk.ContentManager`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ContentManager` itself.
         *
         * This event will be fired when content resources have been loaded successfully or with a failure.
         */
        attachContentChangesFinished(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ContentManager` itself
           */
          oListener?: object
        ): sap.ui.vk.ContentManager;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentChangesProgress contentChangesProgress}
         * event of this `sap.ui.vk.ContentManager`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ContentManager` itself.
         *
         * This event will be fired to report the progress of content changes.
         */
        attachContentChangesProgress(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ContentManager` itself
           */
          oListener?: object
        ): sap.ui.vk.ContentManager;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentChangesStarted contentChangesStarted}
         * event of this `sap.ui.vk.ContentManager`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ContentManager` itself.
         *
         * This event will be fired when content resources are about to be loaded.
         */
        attachContentChangesStarted(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ContentManager` itself
           */
          oListener?: object
        ): sap.ui.vk.ContentManager;
        /**
         * @SINCE 1.50.0
         *
         * Collects and destroys unused objects and resources.
         */
        collectGarbage(): sap.ui.vk.ContentManager;
        /**
         * @SINCE 1.52.0
         *
         * Creates a Perspective camera
         */
        createOrthographicCamera(): sap.ui.vk.OrthographicCamera;
        /**
         * @SINCE 1.52.0
         *
         * Creates a Orthographic camera
         */
        createPerspectiveCamera(): sap.ui.vk.PerspectiveCamera;
        /**
         * @SINCE 1.52.0
         *
         * Destroys a camera for the content type
         */
        destroyCamera(
          /**
           * The camera to destroy.
           */
          camera: any
        ): sap.ui.vk.ContentManager;
        /**
         * @SINCE 1.50.0
         *
         * Destroys the content.
         */
        destroyContent(
          /**
           * The content to destroy.
           */
          content: any
        ): sap.ui.vk.ContentManager;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:contentChangesFinished contentChangesFinished}
         * event of this `sap.ui.vk.ContentManager`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachContentChangesFinished(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.ContentManager;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:contentChangesProgress contentChangesProgress}
         * event of this `sap.ui.vk.ContentManager`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachContentChangesProgress(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.ContentManager;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:contentChangesStarted contentChangesStarted}
         * event of this `sap.ui.vk.ContentManager`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachContentChangesStarted(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.ContentManager;
        /**
         * Creates a new subclass of class sap.ui.vk.ContentManager with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:contentChangesFinished contentChangesFinished} to attached listeners.
         */
        fireContentChangesFinished(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * The content created or updated.
             */
            content?: any;
            /**
             * The failure reason if any.
             *  An single element or an array of elements with the following structure:
             * 	error - An object with details of the error. contentResource - A {@link sap.ui.vk.ContentResource
             * sap.ui.vk.ContentResource} object when it is possible to match `error` to a {@link sap.ui.vk.ContentResource
             * sap.ui.vk.ContentResource} object.
             */
            failureReason?: object;
          }
        ): sap.ui.vk.ContentManager;
        /**
         * Fires event {@link #event:contentChangesProgress contentChangesProgress} to attached listeners.
         */
        fireContentChangesProgress(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * The name of the loading phase. It can be e.g. 'downloading', 'building the scene' etc. It might be null
             * if reporting this parameter does not make sense.
             */
            phase?: string;
            /**
             * The overall percentage of the loading process.
             */
            percentage?: number;
            /**
             * The content resource currently being loaded. It might be null if reporting this parameter does not make
             * sense.
             */
            source?: any;
          }
        ): sap.ui.vk.ContentManager;
        /**
         * Fires event {@link #event:contentChangesStarted contentChangesStarted} to attached listeners.
         */
        fireContentChangesStarted(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): sap.ui.vk.ContentManager;
        /**
         * Returns a metadata object for class sap.ui.vk.ContentManager.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * @SINCE 1.50.0
         *
         * Starts downloading and building or updating the content from the content resources.
         *
         * This method is asynchronous.
         */
        loadContent(
          /**
           * The current content to update. It can be `null` if this is an initial loading call.
           */
          content: any,
          /**
           * The content resources to load or update.
           */
          contentResources: sap.ui.vk.ContentResource[]
        ): sap.ui.vk.ContentManager;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentChangesFinished contentChangesFinished}
         * event of this `sap.ui.vk.ContentManager`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ContentManager` itself.
         *
         * This event will be fired when content resources have been loaded successfully or with a failure.
         */
        attachContentChangesFinished(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ContentManager` itself
           */
          oListener?: object
        ): sap.ui.vk.ContentManager;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentChangesProgress contentChangesProgress}
         * event of this `sap.ui.vk.ContentManager`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ContentManager` itself.
         *
         * This event will be fired to report the progress of content changes.
         */
        attachContentChangesProgress(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ContentManager` itself
           */
          oListener?: object
        ): sap.ui.vk.ContentManager;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentChangesStarted contentChangesStarted}
         * event of this `sap.ui.vk.ContentManager`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ContentManager` itself.
         *
         * This event will be fired when content resources are about to be loaded.
         */
        attachContentChangesStarted(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ContentManager` itself
           */
          oListener?: object
        ): sap.ui.vk.ContentManager;
      }
      /**
       * Specifies a resource to load.
       */
      // @ts-ignore - static 'getMetadata' inheritance issue
      class ContentResource extends sap.ui.base.ManagedObject {
        /**
         * Constructor for a new ContentResource.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID of the new content resource. `sId`is generated automatically if no non-empty ID is given. Note: this
           * can be omitted, regardless of whether `mSettings` will be provided or not.
           */
          sId?: string,
          /**
           * An optional map/JSON object with initial property values, aggregated objects etc. for the new content
           * resource.
           */
          mSettings?: object,
          /**
           * scope An object for resolving string-based type and formatter references in bindings.
           */
          oScope?: object
        );

        /**
         * Adds some contentResource to the aggregation {@link #getContentResources contentResources}.
         */
        addContentResource(
          /**
           * The contentResource to add; if empty, nothing is inserted
           */
          oContentResource: sap.ui.vk.ContentResource
        ): sap.ui.vk.ContentResource;
        /**
         * @deprecated (since 1.50.0)
         *
         * Collects content resource categories. The result is tested if the content resource hierarchy has the
         * same category - 2D or 3D.
         */
        static collectCategories(
          /**
           * The array of content resources.
           */
          resources: sap.ui.vk.ContentResource[]
        ): any;
        /**
         * Destroys all the contentResources in the aggregation {@link #getContentResources contentResources}.
         */
        destroyContentResources(): sap.ui.vk.ContentResource;
        /**
         * Creates a new subclass of class sap.ui.vk.ContentResource with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getActivateView activateView}.
         *
         * Optional parameter with view id which shall be activated when scene is loaded.
         */
        getActivateView(): string;
        /**
         * Gets content of aggregation {@link #getContentResources contentResources}.
         *
         * Child content resources.
         */
        getContentResources(): sap.ui.vk.ContentResource[];
        /**
         * Gets current value of property {@link #getEnableLogger enableLogger}.
         *
         * Optional boolean parameter to enable detailed logging. Can be used to track performance issues during
         * data streaming from SAP 3D Visualisation Service.
         */
        getEnableLogger(): boolean;
        /**
         * Gets current value of property {@link #getIncludeAnimation includeAnimation}.
         *
         * Send structural data for animation objects, if false they will be omitted, reducing data size. Default:
         * true.
         */
        getIncludeAnimation(): boolean;
        /**
         * Gets current value of property {@link #getIncludeHidden includeHidden}.
         *
         * Send structural data for hidden objects, if false they will be omitted, reducing data size. Default:
         * true.
         */
        getIncludeHidden(): boolean;
        /**
         * Gets current value of property {@link #getLocalMatrix localMatrix}.
         *
         * The local transformation matrix of the node created for this content resource.
         */
        getLocalMatrix(): sap.ui.vk.TransformationMatrix;
        /**
         * Returns a metadata object for class sap.ui.vk.ContentResource.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getMetadataFilter metadataFilter}.
         *
         * Optional metadata filter that can trim the tree before sending to the client only keeping nodes that
         * passed the filter and their parents. Default: null. Format: Comma-separated list of meta.category1.tag1.value1,
         * meta.category2.tag2.value2. "meta." is the prefix and all metadata filters must start with it. Multiple
         * filters are supported, they are combined using `OR` operator. Includes parent nodes of matching nodes
         * (e.g. breadcrumb) even if they dont pass the filter.
         */
        getMetadataFilter(): string;
        /**
         * Gets current value of property {@link #getName name}.
         *
         * The name of the node created for this content resource.
         */
        getName(): string;
        /**
         * Gets the {@link sap.ui.vk.NodeProxy NodeProxy} object created for this content resource.
         *
         * If this is the only top level content resource, the {@link sap.ui.vk.NodeProxy NodeProxy} object is not
         * set since the grouping node is not created, which means that there may be multiple top level nodes.
         */
        getNodeProxy(): sap.ui.vk.NodeProxy;
        /**
         * Gets current value of property {@link #getPassword password}.
         *
         * The password to use when opening the resource.
         */
        getPassword(): string;
        /**
         * Gets current value of property {@link #getPushPMI pushPMI}.
         *
         * If set to true, elements for PMI rendering content will be returned. Default: false.
         */
        getPushPMI(): boolean;
        /**
         * Gets current value of property {@link #getPushViewGroups pushViewGroups}.
         *
         * If set to true, infomation of view groups will be returned. Default: true.
         */
        getPushViewGroups(): boolean;
        /**
         * Gets current value of property {@link #getSource source}.
         *
         * The source URL or the {@link https://developer.mozilla.org/en-US/docs/Web/API/File File} object of the
         * content resource/file to load from. The source may be omitted if a grouping node is needed.
         */
        getSource(): any;
        /**
         * Gets current value of property {@link #getSourceId sourceId}.
         *
         * The unique ID of the content resource.
         */
        getSourceId(): string;
        /**
         * Gets content resource source properties.
         *
         * The content resource source properties depend on the content resource source type. They are different
         * for VDS and PNG for example. The list of possible source properties:
         * 	 - version - object
         * 	major - number
         * 	 - minor - number
         * 	 - compressed - boolean
         * 	 - encrypted - boolean  The source properties are optional and the list might be extended in future
         * 			versions.
         */
        getSourceProperties(): object;
        /**
         * Gets current value of property {@link #getSourceType sourceType}.
         *
         * The source type of the content resource. Valid types:
         * 	 - vds
         * 	 - svg
         * 	 - png
         * 	 - jpg
         * 	 - jpeg
         * 	 - gif
         * 	 - bmp
         * 	 - tif
         * 	 - tiff
         * 	 - stream  The source type may be omitted if this is a grouping content node.
         */
        getSourceType(): string;
        /**
         * Gets current value of property {@link #getUseSecureConnection useSecureConnection}.
         *
         * If set to false, unsecure connections will be used. Default: true.
         *
         * Default value is `true`.
         */
        getUseSecureConnection(): boolean;
        /**
         * Gets current value of property {@link #getVeid veid}.
         *
         * Id of scene to retrieve tree for. Mandatory for the stream source type.
         */
        getVeid(): string;
        /**
         * Checks for the provided `sap.ui.vk.ContentResource` in the aggregation {@link #getContentResources contentResources}.
         * and returns its index if found or -1 otherwise.
         */
        indexOfContentResource(
          /**
           * The contentResource whose index is looked for
           */
          oContentResource: sap.ui.vk.ContentResource
        ): number;
        /**
         * Inserts a contentResource into the aggregation {@link #getContentResources contentResources}.
         */
        insertContentResource(
          /**
           * The contentResource to insert; if empty, nothing is inserted
           */
          oContentResource: sap.ui.vk.ContentResource,
          /**
           * The `0`-based index the contentResource should be inserted at; for a negative value of `iIndex`, the
           * contentResource is inserted at position 0; for a value greater than the current size of the aggregation,
           * the contentResource is inserted at the last position
           */
          iIndex: number
        ): sap.ui.vk.ContentResource;
        /**
         * Removes all the controls from the aggregation {@link #getContentResources contentResources}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllContentResources(): sap.ui.vk.ContentResource[];
        /**
         * Removes a contentResource from the aggregation {@link #getContentResources contentResources}.
         */
        removeContentResource(
          /**
           * The contentResource to remove or its index or id
           */
          vContentResource: number | string | sap.ui.vk.ContentResource
        ): sap.ui.vk.ContentResource;
        /**
         * Sets a new value for property {@link #getActivateView activateView}.
         *
         * Optional parameter with view id which shall be activated when scene is loaded.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setActivateView(
          /**
           * New value for property `activateView`
           */
          sActivateView: string
        ): sap.ui.vk.ContentResource;
        /**
         * Sets a new value for property {@link #getEnableLogger enableLogger}.
         *
         * Optional boolean parameter to enable detailed logging. Can be used to track performance issues during
         * data streaming from SAP 3D Visualisation Service.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setEnableLogger(
          /**
           * New value for property `enableLogger`
           */
          bEnableLogger: boolean
        ): sap.ui.vk.ContentResource;
        /**
         * Sets a new value for property {@link #getIncludeAnimation includeAnimation}.
         *
         * Send structural data for animation objects, if false they will be omitted, reducing data size. Default:
         * true.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setIncludeAnimation(
          /**
           * New value for property `includeAnimation`
           */
          bIncludeAnimation: boolean
        ): sap.ui.vk.ContentResource;
        /**
         * Sets a new value for property {@link #getIncludeHidden includeHidden}.
         *
         * Send structural data for hidden objects, if false they will be omitted, reducing data size. Default:
         * true.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setIncludeHidden(
          /**
           * New value for property `includeHidden`
           */
          bIncludeHidden: boolean
        ): sap.ui.vk.ContentResource;
        /**
         * Sets a new value for property {@link #getLocalMatrix localMatrix}.
         *
         * The local transformation matrix of the node created for this content resource.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setLocalMatrix(
          /**
           * New value for property `localMatrix`
           */
          sLocalMatrix: sap.ui.vk.TransformationMatrix
        ): sap.ui.vk.ContentResource;
        /**
         * Sets a new value for property {@link #getMetadataFilter metadataFilter}.
         *
         * Optional metadata filter that can trim the tree before sending to the client only keeping nodes that
         * passed the filter and their parents. Default: null. Format: Comma-separated list of meta.category1.tag1.value1,
         * meta.category2.tag2.value2. "meta." is the prefix and all metadata filters must start with it. Multiple
         * filters are supported, they are combined using `OR` operator. Includes parent nodes of matching nodes
         * (e.g. breadcrumb) even if they dont pass the filter.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setMetadataFilter(
          /**
           * New value for property `metadataFilter`
           */
          sMetadataFilter: string
        ): sap.ui.vk.ContentResource;
        /**
         * Sets a new value for property {@link #getName name}.
         *
         * The name of the node created for this content resource.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setName(
          /**
           * New value for property `name`
           */
          sName: string
        ): sap.ui.vk.ContentResource;
        /**
         * Sets a new value for property {@link #getPassword password}.
         *
         * The password to use when opening the resource.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setPassword(
          /**
           * New value for property `password`
           */
          sPassword: string
        ): sap.ui.vk.ContentResource;
        /**
         * Sets a new value for property {@link #getPushPMI pushPMI}.
         *
         * If set to true, elements for PMI rendering content will be returned. Default: false.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setPushPMI(
          /**
           * New value for property `pushPMI`
           */
          bPushPMI: boolean
        ): sap.ui.vk.ContentResource;
        /**
         * Sets a new value for property {@link #getPushViewGroups pushViewGroups}.
         *
         * If set to true, infomation of view groups will be returned. Default: true.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setPushViewGroups(
          /**
           * New value for property `pushViewGroups`
           */
          bPushViewGroups: boolean
        ): sap.ui.vk.ContentResource;
        /**
         * Sets a new value for property {@link #getSource source}.
         *
         * The source URL or the {@link https://developer.mozilla.org/en-US/docs/Web/API/File File} object of the
         * content resource/file to load from. The source may be omitted if a grouping node is needed.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setSource(
          /**
           * New value for property `source`
           */
          oSource: any
        ): sap.ui.vk.ContentResource;
        /**
         * Sets a new value for property {@link #getSourceId sourceId}.
         *
         * The unique ID of the content resource.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setSourceId(
          /**
           * New value for property `sourceId`
           */
          sSourceId: string
        ): sap.ui.vk.ContentResource;
        /**
         * Sets a new value for property {@link #getSourceType sourceType}.
         *
         * The source type of the content resource. Valid types:
         * 	 - vds
         * 	 - svg
         * 	 - png
         * 	 - jpg
         * 	 - jpeg
         * 	 - gif
         * 	 - bmp
         * 	 - tif
         * 	 - tiff
         * 	 - stream  The source type may be omitted if this is a grouping content node.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setSourceType(
          /**
           * New value for property `sourceType`
           */
          sSourceType: string
        ): sap.ui.vk.ContentResource;
        /**
         * Sets a new value for property {@link #getUseSecureConnection useSecureConnection}.
         *
         * If set to false, unsecure connections will be used. Default: true.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setUseSecureConnection(
          /**
           * New value for property `useSecureConnection`
           */
          bUseSecureConnection: boolean
        ): sap.ui.vk.ContentResource;
        /**
         * Sets a new value for property {@link #getVeid veid}.
         *
         * Id of scene to retrieve tree for. Mandatory for the stream source type.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setVeid(
          /**
           * New value for property `veid`
           */
          sVeid: string
        ): sap.ui.vk.ContentResource;
      }
      /**
       * Overflow toolbar that can be collapsed.
       */
      class DrawerToolbar extends sap.ui.core.Control {
        /**
         * Constructor for a new DrawerToolbar control.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: DrawerToolbarOpts
        );

        /**
         * Adds some content to the aggregation {@link #getContent content}.
         */
        addContent(
          /**
           * The content to add; if empty, nothing is inserted
           */
          oContent: sap.ui.core.Control
        ): sap.ui.vk.DrawerToolbar;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:expanded expanded} event of this `sap.ui.vk.DrawerToolbar`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.DrawerToolbar` itself.
         *
         * Indicates whether the DrawerToolbar is expanded or collapsed.
         */
        attachExpanded(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.DrawerToolbar` itself
           */
          oListener?: object
        ): sap.ui.vk.DrawerToolbar;
        /**
         * Destroys all the content in the aggregation {@link #getContent content}.
         */
        destroyContent(): sap.ui.vk.DrawerToolbar;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:expanded expanded} event of this `sap.ui.vk.DrawerToolbar`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachExpanded(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.DrawerToolbar;
        /**
         * Creates a new subclass of class sap.ui.vk.DrawerToolbar with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:expanded expanded} to attached listeners.
         */
        fireExpanded(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * If the DrawerToolbar is expanded, this is true. If the DrawerToolbar is collapsed, this is false.
             */
            expand?: boolean;
          }
        ): sap.ui.vk.DrawerToolbar;
        /**
         * Gets content of aggregation {@link #getContent content}.
         *
         * Determines the content of the DrawerToolbar. See {@link sap.m.OverflowToolbar} for list of allowed controls.
         * The content visible when the DrawerToolbar is expanded.
         */
        getContent(): sap.ui.core.Control[];
        /**
         * Gets current value of property {@link #getExpanded expanded}.
         *
         * Indicates whether the DrawerToolbar is expanded or not. If expanded is set to true, then both the toolbar
         * and 'Close' icon are rendered. If expanded is set to false, then only the 'Open' icon is rendered.
         *
         * Default value is `true`.
         */
        getExpanded(): boolean;
        /**
         * Returns a metadata object for class sap.ui.vk.DrawerToolbar.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * ID of the element which is the current target of the association {@link #getViewport viewport}, or `null`.
         */
        getViewport(): sap.ui.core.ID;
        /**
         * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getContent content}. and returns
         * its index if found or -1 otherwise.
         */
        indexOfContent(
          /**
           * The content whose index is looked for
           */
          oContent: sap.ui.core.Control
        ): number;
        /**
         * Inserts a content into the aggregation {@link #getContent content}.
         */
        insertContent(
          /**
           * The content to insert; if empty, nothing is inserted
           */
          oContent: sap.ui.core.Control,
          /**
           * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
           * is inserted at position 0; for a value greater than the current size of the aggregation, the content
           * is inserted at the last position
           */
          iIndex: number
        ): sap.ui.vk.DrawerToolbar;
        /**
         * Removes all the controls from the aggregation {@link #getContent content}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllContent(): sap.ui.core.Control[];
        /**
         * Removes a content from the aggregation {@link #getContent content}.
         */
        removeContent(
          /**
           * The content to remove or its index or id
           */
          vContent: number | string | sap.ui.core.Control
        ): sap.ui.core.Control;
        /**
         * Sets the expanded property of the control.
         */
        setExpanded(
          /**
           * Defines whether control is expanded or not.
           */
          bExpanded: boolean
        ): sap.ui.vk.DrawerToolbar;
        /**
         * Sets the associated {@link #getViewport viewport}.
         */
        setViewport(
          /**
           * ID of an element which becomes the new target of this viewport association; alternatively, an element
           * instance may be given
           */
          oViewport: sap.ui.core.ID | sap.ui.vk.Viewport
        ): sap.ui.vk.DrawerToolbar;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:expanded expanded} event of this `sap.ui.vk.DrawerToolbar`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.DrawerToolbar` itself.
         *
         * Indicates whether the DrawerToolbar is expanded or collapsed.
         */
        attachExpanded(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.DrawerToolbar` itself
           */
          oListener?: object
        ): sap.ui.vk.DrawerToolbar;
      }
      /**
       * @SINCE 1.16.0
       * @EXPERIMENTAL (since 1.32.0)
       *
       * Holds layout data for the FlexibleControl contents.
       */
      class FlexibleControl extends sap.ui.core.Control {
        /**
         * Constructor for a new FlexibleControl.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: FlexibleControlOpts
        );

        /**
         * Adds some content to the aggregation {@link #getContent content}.
         */
        addContent(
          /**
           * The content to add; if empty, nothing is inserted
           */
          oContent: sap.ui.core.Control
        ): sap.ui.vk.FlexibleControl;
        /**
         * Destroys all the content in the aggregation {@link #getContent content}.
         */
        destroyContent(): sap.ui.vk.FlexibleControl;
        /**
         * Creates a new subclass of class sap.ui.vk.FlexibleControl with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets content of aggregation {@link #getContent content}.
         *
         * Child Controls within the layout.
         */
        getContent(): sap.ui.core.Control[];
        /**
         * Gets current value of property {@link #getEnabled enabled}.
         *
         * If not enabled all controls inside are not enabled automatically.
         *
         * Default value is `true`.
         */
        getEnabled(): boolean;
        /**
         * Gets current value of property {@link #getHeight height}.
         */
        getHeight(): sap.ui.core.CSSSize;
        /**
         * Gets current value of property {@link #getLayout layout}.
         *
         * Default value is `Stacked`.
         */
        getLayout(): string;
        /**
         * Returns a metadata object for class sap.ui.vk.FlexibleControl.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getWidth width}.
         *
         * CSS width of the vertical layout.
         */
        getWidth(): sap.ui.core.CSSSize;
        /**
         * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getContent content}. and returns
         * its index if found or -1 otherwise.
         */
        indexOfContent(
          /**
           * The content whose index is looked for
           */
          oContent: sap.ui.core.Control
        ): number;
        /**
         * Inserts a content into the aggregation {@link #getContent content}.
         */
        insertContent(
          /**
           * The content to insert; if empty, nothing is inserted
           */
          oContent: sap.ui.core.Control,
          /**
           * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
           * is inserted at position 0; for a value greater than the current size of the aggregation, the content
           * is inserted at the last position
           */
          iIndex: number
        ): sap.ui.vk.FlexibleControl;
        /**
         * Removes all the controls from the aggregation {@link #getContent content}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllContent(): sap.ui.core.Control[];
        /**
         * Removes a content from the aggregation {@link #getContent content}.
         */
        removeContent(
          /**
           * The content to remove or its index or id
           */
          vContent: number | string | sap.ui.core.Control
        ): sap.ui.core.Control;
        /**
         * Sets a new value for property {@link #getEnabled enabled}.
         *
         * If not enabled all controls inside are not enabled automatically.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setEnabled(
          /**
           * New value for property `enabled`
           */
          bEnabled: boolean
        ): sap.ui.vk.FlexibleControl;
        /**
         * Sets a new value for property {@link #getHeight height}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setHeight(
          /**
           * New value for property `height`
           */
          sHeight: sap.ui.core.CSSSize
        ): sap.ui.vk.FlexibleControl;
        /**
         * Sets a new value for property {@link #getLayout layout}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `Stacked`.
         */
        setLayout(
          /**
           * New value for property `layout`
           */
          sLayout: string
        ): sap.ui.vk.FlexibleControl;
        /**
         * Sets a new value for property {@link #getWidth width}.
         *
         * CSS width of the vertical layout.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setWidth(
          /**
           * New value for property `width`
           */
          sWidth: sap.ui.core.CSSSize
        ): sap.ui.vk.FlexibleControl;
      }
      /**
       * @SINCE 1.22.0
       * @EXPERIMENTAL (since 1.32.0)
       *
       * Holds layout data for the FlexibleControl contents. Allowed size values are numeric values ending in
       * "px" and "%" and the special case "auto". (The CSS value "auto" is used internally to recalculate the
       * size of the content dynamically and is not directly set as style property.)
       */
      class FlexibleControlLayoutData extends sap.ui.core.LayoutData {
        /**
         * Constructor for a new FlexibleControlLayoutData.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: FlexibleControlLayoutDataOpts
        );

        /**
         * Creates a new subclass of class sap.ui.vk.FlexibleControlLayoutData with name `sClassName` and enriches
         * it with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getMarginBottom marginBottom}.
         *
         * Default value is `0px`.
         */
        getMarginBottom(): sap.ui.core.CSSSize;
        /**
         * Gets current value of property {@link #getMarginTop marginTop}.
         *
         * Sets the margin-bottom of the content in px.
         *
         * Default value is `0px`.
         */
        getMarginTop(): sap.ui.core.CSSSize;
        /**
         * Returns a metadata object for class sap.ui.vk.FlexibleControlLayoutData.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getMinSize minSize}.
         *
         * Sets the minimum size of the content in px.
         *
         * Default value is `0px`.
         */
        getMinSize(): sap.ui.core.CSSSize;
        /**
         * Gets current value of property {@link #getSize size}.
         *
         * Sets the size of the content.
         *
         * Default value is `auto`.
         */
        getSize(): sap.ui.core.CSSSize;
        /**
         * Sets a new value for property {@link #getMarginBottom marginBottom}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0px`.
         */
        setMarginBottom(
          /**
           * New value for property `marginBottom`
           */
          sMarginBottom: sap.ui.core.CSSSize
        ): sap.ui.vk.FlexibleControlLayoutData;
        /**
         * Sets a new value for property {@link #getMarginTop marginTop}.
         *
         * Sets the margin-bottom of the content in px.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0px`.
         */
        setMarginTop(
          /**
           * New value for property `marginTop`
           */
          sMarginTop: sap.ui.core.CSSSize
        ): sap.ui.vk.FlexibleControlLayoutData;
        /**
         * Sets a new value for property {@link #getMinSize minSize}.
         *
         * Sets the minimum size of the content in px.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0px`.
         */
        setMinSize(
          /**
           * New value for property `minSize`
           */
          sMinSize: sap.ui.core.CSSSize
        ): sap.ui.vk.FlexibleControlLayoutData;
        /**
         * Sets a new value for property {@link #getSize size}.
         *
         * Sets the size of the content.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `auto`.
         */
        setSize(
          /**
           * New value for property `size`
           */
          sSize: sap.ui.core.CSSSize
        ): sap.ui.vk.FlexibleControlLayoutData;
      }
      /**
       * @SINCE 1.50.0
       *
       * Provides a loader that loads a 2D raster or vector image into an HTMLImageElement or HTMLObjectElement
       * object.
       */
      class ImageContentManager extends sap.ui.vk.ContentManager {
        /**
         * Constructor for a new ImageContentManager.
         */
        constructor(
          /**
           * ID for the new ImageContentManager object. Generated automatically if no ID is given.
           */
          sId?: string,
          /**
           * Initial settings for the new ImageContentManager object.
           */
          mSettings?: object
        );

        /**
         * Creates a new subclass of class sap.ui.vk.ImageContentManager with name `sClassName` and enriches it
         * with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.ContentManager.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.ui.vk.ImageContentManager.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
      }
      /**
       * Provides a proxy object to the layer in the node hierarchy.
       *
       * Layer is a list of nodes. One node hierarchy can have multiple layers. One node can be included in multiple
       * layers.
       *
       * Objects of this type should only be created with the {@link sap.ui.vk.NodeHierarchy#createLayerProxy
       * sap.ui.vk.NodeHierarchy.createLayerProxy} method and destroyed with the {@link sap.ui.vk.NodeHierarchy#destroyLayerProxy
       * sap.ui.vk.NodeHierarchy.destroyLayerProxy} method.
       */
      class LayerProxy extends sap.ui.base.Object {
        /**
         * Constructor for a new LayerProxy.
         *
         * Objects of this type should only be created with the {@link sap.ui.vk.NodeHierarchy#createLayerProxy
         * sap.ui.vk.NodeHierarchy.createLayerProxy} method and destroyed with the {@link sap.ui.vk.NodeHierarchy#destroyLayerProxy
         * sap.ui.vk.NodeHierarchy.destroyLayerProxy} method.
         */
        constructor();

        /**
         * Creates a new subclass of class sap.ui.vk.LayerProxy with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets the description of the layer.
         */
        getDescription(): string;
        /**
         * Gets the layer ID.
         */
        getLayerId(): string;
        /**
         * Gets the layer metadata.
         */
        getLayerMetadata(): object;
        /**
         * Returns a metadata object for class sap.ui.vk.LayerProxy.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets the name of the layer
         */
        getName(): string;
        /**
         * Gets an array of IDs of nodes belonging to the layer.
         */
        getNodes(): string[];
        /**
         * Gets the layer VE IDs.
         */
        getVeIds(): object[];
      }
      /**
       * @EXPERIMENTAL (since 1.38.0)
       *
       * Legend item control
       */
      class LegendItem extends sap.m.StandardListItem {
        /**
         * Constructor for a new LegendItem.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: LegendItemOpts
        );

        /**
         * Creates a new subclass of class sap.ui.vk.LegendItem with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.m.StandardListItem.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getColor color}.
         *
         * show color square
         */
        getColor(): sap.ui.core.CSSColor;
        /**
         * Returns a metadata object for class sap.ui.vk.LegendItem.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getSemanticSpotType semanticSpotType}.
         *
         * The semantic spot type for the legend marker.
         */
        getSemanticSpotType(): sap.ui.vbm.SemanticType;
        /**
         * Sets a new value for property {@link #getColor color}.
         *
         * show color square
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setColor(
          /**
           * New value for property `color`
           */
          sColor: sap.ui.core.CSSColor
        ): sap.ui.vk.LegendItem;
        /**
         * Sets a new value for property {@link #getSemanticSpotType semanticSpotType}.
         *
         * The semantic spot type for the legend marker.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setSemanticSpotType(
          /**
           * New value for property `semanticSpotType`
           */
          sSemanticSpotType: sap.ui.vbm.SemanticType
        ): sap.ui.vk.LegendItem;
      }
      /**
       * @EXPERIMENTAL (since 1.38.0)
       *
       * Aggregation control for the Legend
       */
      class ListPanel extends sap.ui.core.Control {
        /**
         * Constructor for a new ListPanel.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: ListPanelOpts
        );

        /**
         * Adds some item to the aggregation {@link #getItems items}.
         */
        addItem(
          /**
           * The item to add; if empty, nothing is inserted
           */
          oItem: sap.m.ListItemBase
        ): sap.ui.vk.ListPanel;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:expand expand} event of this `sap.ui.vk.ListPanel`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ListPanel` itself.
         *
         * Event is fired if the panel is expanded of collapsed
         */
        attachExpand(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ListPanel` itself
           */
          oListener?: object
        ): sap.ui.vk.ListPanel;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:headerIconPress headerIconPress} event of this
         * `sap.ui.vk.ListPanel`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ListPanel` itself.
         *
         * Event is fired if the header icon is pressed
         */
        attachHeaderIconPress(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ListPanel` itself
           */
          oListener?: object
        ): sap.ui.vk.ListPanel;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:itemPress itemPress} event of this `sap.ui.vk.ListPanel`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ListPanel` itself.
         *
         * Event is fired when an item is pressed unless the item's `type` property is `Inactive`.
         */
        attachItemPress(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ListPanel` itself
           */
          oListener?: object
        ): sap.ui.vk.ListPanel;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
         * `sap.ui.vk.ListPanel`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ListPanel` itself.
         *
         * Event is fired when selection is changed via user interaction inside the control.
         */
        attachSelectionChange(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ListPanel` itself
           */
          oListener?: object
        ): sap.ui.vk.ListPanel;
        /**
         * Destroys all the items in the aggregation {@link #getItems items}.
         */
        destroyItems(): sap.ui.vk.ListPanel;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:expand expand} event of this `sap.ui.vk.ListPanel`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachExpand(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.ListPanel;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:headerIconPress headerIconPress} event of
         * this `sap.ui.vk.ListPanel`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachHeaderIconPress(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.ListPanel;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:itemPress itemPress} event of this `sap.ui.vk.ListPanel`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachItemPress(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.ListPanel;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:selectionChange selectionChange} event of
         * this `sap.ui.vk.ListPanel`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachSelectionChange(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.ListPanel;
        /**
         * Creates a new subclass of class sap.ui.vk.ListPanel with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:expand expand} to attached listeners.
         */
        fireExpand(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): sap.ui.vk.ListPanel;
        /**
         * Fires event {@link #event:headerIconPress headerIconPress} to attached listeners.
         */
        fireHeaderIconPress(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): sap.ui.vk.ListPanel;
        /**
         * Fires event {@link #event:itemPress itemPress} to attached listeners.
         */
        fireItemPress(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * The item which fired the pressed event.
             */
            listItem?: sap.m.ListItemBase;
            /**
             * The control which caused the press event within the container.
             */
            srcControl?: sap.ui.core.Control;
          }
        ): sap.ui.vk.ListPanel;
        /**
         * Fires event {@link #event:selectionChange selectionChange} to attached listeners.
         */
        fireSelectionChange(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * The item whose selection has changed. In `MultiSelect` mode, only the up-most selected item is returned.
             * This parameter can be used for single-selection modes.
             */
            listItem?: sap.m.ListItemBase;
            /**
             * Array of items whose selection has changed. This parameter can be used for `MultiSelect` mode.
             */
            listItems?: sap.m.ListItemBase[];
            /**
             * Indicates whether the `listItem` parameter is selected or not.
             */
            selected?: boolean;
          }
        ): sap.ui.vk.ListPanel;
        /**
         * Gets current value of property {@link #getExpandAnimation expandAnimation}.
         *
         * Expand animation
         *
         * Default value is `true`.
         */
        getExpandAnimation(): boolean;
        /**
         * Gets current value of property {@link #getExpanded expanded}.
         *
         * Expansion state
         *
         * Default value is `true`.
         */
        getExpanded(): boolean;
        /**
         * Gets current value of property {@link #getHeaderIcon headerIcon}.
         *
         * Header icon
         */
        getHeaderIcon(): sap.ui.core.URI;
        /**
         * Gets current value of property {@link #getHeaderText headerText}.
         *
         * Header text
         */
        getHeaderText(): string;
        /**
         * Gets content of aggregation {@link #getItems items}.
         *
         * Item aggregation
         */
        getItems(): sap.m.ListItemBase[];
        /**
         * Returns a metadata object for class sap.ui.vk.ListPanel.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Returns selected list item. When no item is selected, "null" is returned. When "multi-selection" is enabled
         * and multiple items are selected, only the up-most selected item is returned.
         */
        getSelectedItem(): sap.m.ListItemBase;
        /**
         * Returns an array containing the selected list items. If no items are selected, an empty array is returned.
         */
        getSelectedItems(): sap.m.ListItemBase[];
        /**
         * Gets current value of property {@link #getSelectionMode selectionMode}.
         *
         * Selection Mode
         *
         * Default value is `MultiSelect`.
         */
        getSelectionMode(): sap.m.ListMode;
        /**
         * Checks for the provided `sap.m.ListItemBase` in the aggregation {@link #getItems items}. and returns
         * its index if found or -1 otherwise.
         */
        indexOfItem(
          /**
           * The item whose index is looked for
           */
          oItem: sap.m.ListItemBase
        ): number;
        /**
         * Inserts a item into the aggregation {@link #getItems items}.
         */
        insertItem(
          /**
           * The item to insert; if empty, nothing is inserted
           */
          oItem: sap.m.ListItemBase,
          /**
           * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
           * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
           * the last position
           */
          iIndex: number
        ): sap.ui.vk.ListPanel;
        /**
         * Removes all the controls from the aggregation {@link #getItems items}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllItems(): sap.m.ListItemBase[];
        /**
         * Removes a item from the aggregation {@link #getItems items}.
         */
        removeItem(
          /**
           * The item to remove or its index or id
           */
          vItem: number | string | sap.m.ListItemBase
        ): sap.m.ListItemBase;
        /**
         * Sets a new value for property {@link #getExpandAnimation expandAnimation}.
         *
         * Expand animation
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setExpandAnimation(
          /**
           * New value for property `expandAnimation`
           */
          bExpandAnimation: boolean
        ): sap.ui.vk.ListPanel;
        /**
         * Sets a new value for property {@link #getExpanded expanded}.
         *
         * Expansion state
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setExpanded(
          /**
           * New value for property `expanded`
           */
          bExpanded: boolean
        ): sap.ui.vk.ListPanel;
        /**
         * Sets a new value for property {@link #getHeaderIcon headerIcon}.
         *
         * Header icon
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setHeaderIcon(
          /**
           * New value for property `headerIcon`
           */
          sHeaderIcon: sap.ui.core.URI
        ): sap.ui.vk.ListPanel;
        /**
         * Sets a new value for property {@link #getHeaderText headerText}.
         *
         * Header text
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setHeaderText(
          /**
           * New value for property `headerText`
           */
          sHeaderText: string
        ): sap.ui.vk.ListPanel;
        /**
         * Selects or deselects the given list item.
         */
        setSelectedItem(
          /**
           * The list item whose selection to be changed. This parameter is mandatory.
           */
          oListItem: sap.m.ListItemBase,
          /**
           * Sets selected status of the list item. Default value is true.
           */
          bSelect: boolean,
          /**
           * Whether to fire the event or not.
           */
          bFireEvent: boolean
        ): void;
        /**
         * Sets a new value for property {@link #getSelectionMode selectionMode}.
         *
         * Selection Mode
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `MultiSelect`.
         */
        setSelectionMode(
          /**
           * New value for property `selectionMode`
           */
          sSelectionMode: sap.m.ListMode
        ): sap.ui.vk.ListPanel;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:expand expand} event of this `sap.ui.vk.ListPanel`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ListPanel` itself.
         *
         * Event is fired if the panel is expanded of collapsed
         */
        attachExpand(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ListPanel` itself
           */
          oListener?: object
        ): sap.ui.vk.ListPanel;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:headerIconPress headerIconPress} event of this
         * `sap.ui.vk.ListPanel`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ListPanel` itself.
         *
         * Event is fired if the header icon is pressed
         */
        attachHeaderIconPress(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ListPanel` itself
           */
          oListener?: object
        ): sap.ui.vk.ListPanel;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:itemPress itemPress} event of this `sap.ui.vk.ListPanel`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ListPanel` itself.
         *
         * Event is fired when an item is pressed unless the item's `type` property is `Inactive`.
         */
        attachItemPress(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ListPanel` itself
           */
          oListener?: object
        ): sap.ui.vk.ListPanel;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
         * `sap.ui.vk.ListPanel`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ListPanel` itself.
         *
         * Event is fired when selection is changed via user interaction inside the control.
         */
        attachSelectionChange(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ListPanel` itself
           */
          oListener?: object
        ): sap.ui.vk.ListPanel;
      }
      /**
       * @EXPERIMENTAL (since 1.38.0)
       *
       * ListPanelStack control
       */
      class ListPanelStack extends sap.ui.core.Control {
        /**
         * Constructor for a new ListPanelStack.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: ListPanelStackOpts
        );

        /**
         * Adds some content to the aggregation {@link #getContent content}.
         */
        addContent(
          /**
           * The content to add; if empty, nothing is inserted
           */
          oContent: sap.ui.vk.ListPanel
        ): sap.ui.vk.ListPanelStack;
        /**
         * Destroys all the content in the aggregation {@link #getContent content}.
         */
        destroyContent(): sap.ui.vk.ListPanelStack;
        /**
         * Creates a new subclass of class sap.ui.vk.ListPanelStack with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getCollapsible collapsible}.
         *
         * Ability to collapse
         *
         * Default value is `true`.
         */
        getCollapsible(): boolean;
        /**
         * Gets content of aggregation {@link #getContent content}.
         */
        getContent(): sap.ui.vk.ListPanel[];
        /**
         * Gets current value of property {@link #getExpandAnimation expandAnimation}.
         *
         * Expand animation
         *
         * Default value is `true`.
         */
        getExpandAnimation(): boolean;
        /**
         * Gets current value of property {@link #getExpanded expanded}.
         *
         * Expansion state
         *
         * Default value is `true`.
         */
        getExpanded(): boolean;
        /**
         * Returns a metadata object for class sap.ui.vk.ListPanelStack.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getWidth width}.
         *
         * Control width
         *
         * Default value is `100%`.
         */
        getWidth(): sap.ui.core.CSSSize;
        /**
         * Checks for the provided `sap.ui.vk.ListPanel` in the aggregation {@link #getContent content}. and returns
         * its index if found or -1 otherwise.
         */
        indexOfContent(
          /**
           * The content whose index is looked for
           */
          oContent: sap.ui.vk.ListPanel
        ): number;
        /**
         * Inserts a content into the aggregation {@link #getContent content}.
         */
        insertContent(
          /**
           * The content to insert; if empty, nothing is inserted
           */
          oContent: sap.ui.vk.ListPanel,
          /**
           * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
           * is inserted at position 0; for a value greater than the current size of the aggregation, the content
           * is inserted at the last position
           */
          iIndex: number
        ): sap.ui.vk.ListPanelStack;
        /**
         * Removes all the controls from the aggregation {@link #getContent content}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllContent(): sap.ui.vk.ListPanel[];
        /**
         * Removes a content from the aggregation {@link #getContent content}.
         */
        removeContent(
          /**
           * The content to remove or its index or id
           */
          vContent: number | string | sap.ui.vk.ListPanel
        ): sap.ui.vk.ListPanel;
        /**
         * Sets a new value for property {@link #getCollapsible collapsible}.
         *
         * Ability to collapse
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setCollapsible(
          /**
           * New value for property `collapsible`
           */
          bCollapsible: boolean
        ): sap.ui.vk.ListPanelStack;
        /**
         * Sets a new value for property {@link #getExpandAnimation expandAnimation}.
         *
         * Expand animation
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setExpandAnimation(
          /**
           * New value for property `expandAnimation`
           */
          bExpandAnimation: boolean
        ): sap.ui.vk.ListPanelStack;
        /**
         * Sets a new value for property {@link #getExpanded expanded}.
         *
         * Expansion state
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setExpanded(
          /**
           * New value for property `expanded`
           */
          bExpanded: boolean
        ): sap.ui.vk.ListPanelStack;
        /**
         * Sets a new value for property {@link #getWidth width}.
         *
         * Control width
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `100%`.
         */
        setWidth(
          /**
           * New value for property `width`
           */
          sWidth: sap.ui.core.CSSSize
        ): sap.ui.vk.ListPanelStack;
      }
      /**
       * @SINCE 1.32.0
       *
       * Intercepts input event data for a SAPUI5 target, and interprets the data based on a supported set of
       * gestures.
       */
      class Loco extends sap.ui.base.EventProvider {
        /**
         * Constructor for a new Loco.
         */
        constructor();

        /**
         * Adds a viewport event handler to the Loco.
         */
        addHandler(
          /**
           * The event handler to be added.
           */
          handler: Object,
          /**
           * The priority of the handler.
           */
          priority: number
        ): void;
        /**
         * Cleans up, removes all handlers.
         */
        // @ts-ignore
        destroy(): void;
        /**
         * Creates a new subclass of class sap.ui.vk.Loco with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.ui.vk.Loco.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Removes a viewport event handler from Loco.
         */
        removeHandler(
          /**
           * to be removed.
           */
          handler: Object
        ): void;
      }
      /**
       * Abstract Constructor for a new Container.
       */
      class MapContainer extends sap.ui.vk.ContainerBase {
        /**
         * Constructor for a new MapContainer.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: MapContainerOpts
        );

        /**
         * Destroys the listPanelStack in the aggregation {@link #getListPanelStack listPanelStack}.
         */
        destroyListPanelStack(): sap.ui.vk.MapContainer;
        /**
         * Creates a new subclass of class sap.ui.vk.MapContainer with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.ContainerBase.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets content of aggregation {@link #getListPanelStack listPanelStack}.
         *
         * List Panel aggregation
         */
        getListPanelStack(): sap.ui.vk.ListPanelStack;
        /**
         * Returns a metadata object for class sap.ui.vk.MapContainer.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getShowHome showHome}.
         *
         * Controls the visibility of the home button
         *
         * Default value is `true`.
         */
        getShowHome(): boolean;
        /**
         * Gets current value of property {@link #getShowMapLayer showMapLayer}.
         *
         * Controls the visibility of the Map Layer Select
         *
         * Default value is `true`.
         */
        getShowMapLayer(): boolean;
        /**
         * Gets current value of property {@link #getShowNavbar showNavbar}.
         *
         * Show navbar
         *
         * Default value is `true`.
         */
        getShowNavbar(): boolean;
        /**
         * Gets current value of property {@link #getShowRectangularZoom showRectangularZoom}.
         *
         * Controls the visibility of the rectangular zoom button
         *
         * Default value is `true`.
         */
        getShowRectangularZoom(): boolean;
        /**
         * Gets current value of property {@link #getShowZoom showZoom}.
         *
         * Controls the visibility of the zoom buttons
         *
         * Default value is `true`.
         */
        getShowZoom(): boolean;
        /**
         * Sets the aggregated {@link #getListPanelStack listPanelStack}.
         */
        setListPanelStack(
          /**
           * The listPanelStack to set
           */
          oListPanelStack: sap.ui.vk.ListPanelStack
        ): sap.ui.vk.MapContainer;
        /**
         * Sets a new value for property {@link #getShowHome showHome}.
         *
         * Controls the visibility of the home button
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setShowHome(
          /**
           * New value for property `showHome`
           */
          bShowHome: boolean
        ): sap.ui.vk.MapContainer;
        /**
         * Sets a new value for property {@link #getShowMapLayer showMapLayer}.
         *
         * Controls the visibility of the Map Layer Select
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setShowMapLayer(
          /**
           * New value for property `showMapLayer`
           */
          bShowMapLayer: boolean
        ): sap.ui.vk.MapContainer;
        /**
         * Sets a new value for property {@link #getShowNavbar showNavbar}.
         *
         * Show navbar
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setShowNavbar(
          /**
           * New value for property `showNavbar`
           */
          bShowNavbar: boolean
        ): sap.ui.vk.MapContainer;
        /**
         * Sets a new value for property {@link #getShowRectangularZoom showRectangularZoom}.
         *
         * Controls the visibility of the rectangular zoom button
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setShowRectangularZoom(
          /**
           * New value for property `showRectangularZoom`
           */
          bShowRectangularZoom: boolean
        ): sap.ui.vk.MapContainer;
        /**
         * Sets a new value for property {@link #getShowZoom showZoom}.
         *
         * Controls the visibility of the zoom buttons
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setShowZoom(
          /**
           * New value for property `showZoom`
           */
          bShowZoom: boolean
        ): sap.ui.vk.MapContainer;
        /**
         * Set custom item on the MapContainer toolbar. All custom items added between selection segment button
         * and setting button.
         */
        setToolbarItem(
          /**
           * Item configuration object.
           */
          item: {
            /**
             * Id of the item for future references.
             */
            id: string;
            /**
             * Relative index of an item across all custom items.
             */
            index: number;
            /**
             * Visibility of an item.
             */
            visible: boolean;
            /**
             * Active item or not.
             */
            active: boolean;
            /**
             * Text of an item.
             */
            text: string;
            /**
             * Tooltip of an item.
             */
            tooltip: string;
            /**
             * If true create Overflow button or standard if false.
             */
            overflow: boolean;
            /**
             * Icon of an item.
             */
            icon: sap.ui.core.URI;
            /**
             * Alternative icon of an item, see {@link sap.m.Button} for details.
             */
            activeIcon: sap.ui.core.URI;
            /**
             * The {@link sap.ui.vk.MapContainerButtonType} enum.
             */
            type: string;
            /**
             * Callback function which is called when item gets pressed.
             */
            press: Function;
            /**
             * sets the initial pressed state for a {@link sap.ui.vk.MapContainerButtonType} Toggle button. This does
             * not fire the pressed event handler. It should be used if pressed logic is activated by application code
             * on first load.
             */
            toggled: boolean;
          }
        ): object;
      }
      /**
       * @EXPERIMENTAL (since 1.60.0)
       *
       * Provides the interface for the material.
       *
       * The objects of this class should not be created directly.
       */
      // @ts-ignore - static 'getMetadata' inheritance issue
      class Material extends sap.ui.base.ManagedObject {
        /**
         * Constructor for a new Material.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Creates a new subclass of class sap.ui.vk.Material with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getAmbientColour ambientColour}.
         *
         * Ambient colour (optional) - red, green, blue, and alhpa
         *
         * Default value is `rgba(0, 0, 0, 1)`.
         */
        getAmbientColour(): sap.ui.core.CSSColor;
        /**
         * Gets current value of property {@link #getDiffuseColour diffuseColour}.
         *
         * Diffuse colour (optional) - red, green, blue, and alhpa
         *
         * Default value is `rgba(0, 0, 0, 1)`.
         */
        getDiffuseColour(): sap.ui.core.CSSColor;
        /**
         * Gets current value of property {@link #getEmissiveColour emissiveColour}.
         *
         * Emissive colour (optional) - red, green, blue, and alhpa
         *
         * Default value is `rgba(0, 0, 0, 1)`.
         */
        getEmissiveColour(): sap.ui.core.CSSColor;
        /**
         * Gets current value of property {@link #getGlossiness glossiness}.
         *
         * Glossiness (optional)
         *
         * Default value is `0`.
         */
        getGlossiness(): number;
        /**
         * Gets current value of property {@link #getId id}.
         *
         * Material id
         */
        // @ts-ignore
        getId(): string;
        /**
         * Gets current value of property {@link #getLineColour lineColour}.
         *
         * Line colour (optional) - red, green, blue, and alhpa
         *
         * Default value is `rgba(0, 0, 0, 1)`.
         */
        getLineColour(): sap.ui.core.CSSColor;
        /**
         * Gets current value of property {@link #getLineWidth lineWidth}.
         *
         * Line width (optional)
         *
         * Default value is `0`.
         */
        getLineWidth(): number;
        /**/
        getMaterialRef(): any;
        /**
         * Returns a metadata object for class sap.ui.vk.Material.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getName name}.
         *
         * Material name
         */
        getName(): string;
        /**
         * Gets current value of property {@link #getOpacity opacity}.
         *
         * Opacity (optional)
         *
         * Default value is `1`.
         */
        getOpacity(): number;
        /**
         * Gets current value of property {@link #getSpecularColour specularColour}.
         *
         * Specular colour (optional) - red, green, blue, and alhpa
         *
         * Default value is `rgba(0, 0, 0, 1)`.
         */
        getSpecularColour(): sap.ui.core.CSSColor;
        /**
         * Gets current value of property {@link #getTextureAmbientOcclusion textureAmbientOcclusion}.
         *
         * Ambient occlusion texture (optional)
         */
        getTextureAmbientOcclusion(): sap.ui.vk.Texture;
        /**
         * Gets current value of property {@link #getTextureBump textureBump}.
         *
         * Bump texture (optional)
         */
        getTextureBump(): sap.ui.vk.Texture;
        /**
         * Gets current value of property {@link #getTextureDiffuse textureDiffuse}.
         *
         * Diffuse texture (optional)
         */
        getTextureDiffuse(): sap.ui.vk.Texture;
        /**
         * Gets current value of property {@link #getTextureEmissive textureEmissive}.
         *
         * Emissive texture (optional)
         */
        getTextureEmissive(): sap.ui.vk.Texture;
        /**
         * Gets current value of property {@link #getTextureOpacity textureOpacity}.
         *
         * Opacity texture (optional)
         */
        getTextureOpacity(): sap.ui.vk.Texture;
        /**
         * Gets current value of property {@link #getTextureReflection textureReflection}.
         *
         * Reflection texture (optional)
         */
        getTextureReflection(): sap.ui.vk.Texture;
        /**
         * Sets a new value for property {@link #getAmbientColour ambientColour}.
         *
         * Ambient colour (optional) - red, green, blue, and alhpa
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `rgba(0, 0, 0, 1)`.
         */
        setAmbientColour(
          /**
           * New value for property `ambientColour`
           */
          sAmbientColour: sap.ui.core.CSSColor
        ): sap.ui.vk.Material;
        /**
         * Sets a new value for property {@link #getDiffuseColour diffuseColour}.
         *
         * Diffuse colour (optional) - red, green, blue, and alhpa
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `rgba(0, 0, 0, 1)`.
         */
        setDiffuseColour(
          /**
           * New value for property `diffuseColour`
           */
          sDiffuseColour: sap.ui.core.CSSColor
        ): sap.ui.vk.Material;
        /**
         * Sets a new value for property {@link #getEmissiveColour emissiveColour}.
         *
         * Emissive colour (optional) - red, green, blue, and alhpa
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `rgba(0, 0, 0, 1)`.
         */
        setEmissiveColour(
          /**
           * New value for property `emissiveColour`
           */
          sEmissiveColour: sap.ui.core.CSSColor
        ): sap.ui.vk.Material;
        /**
         * Sets a new value for property {@link #getGlossiness glossiness}.
         *
         * Glossiness (optional)
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setGlossiness(
          /**
           * New value for property `glossiness`
           */
          fGlossiness: number
        ): sap.ui.vk.Material;
        /**
         * Sets a new value for property {@link #getId id}.
         *
         * Material id
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setId(
          /**
           * New value for property `id`
           */
          sId: string
        ): sap.ui.vk.Material;
        /**
         * Sets a new value for property {@link #getLineColour lineColour}.
         *
         * Line colour (optional) - red, green, blue, and alhpa
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `rgba(0, 0, 0, 1)`.
         */
        setLineColour(
          /**
           * New value for property `lineColour`
           */
          sLineColour: sap.ui.core.CSSColor
        ): sap.ui.vk.Material;
        /**
         * Sets a new value for property {@link #getLineWidth lineWidth}.
         *
         * Line width (optional)
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setLineWidth(
          /**
           * New value for property `lineWidth`
           */
          fLineWidth: number
        ): sap.ui.vk.Material;
        /**
         * Sets a new value for property {@link #getName name}.
         *
         * Material name
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setName(
          /**
           * New value for property `name`
           */
          sName: string
        ): sap.ui.vk.Material;
        /**
         * Sets a new value for property {@link #getOpacity opacity}.
         *
         * Opacity (optional)
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `1`.
         */
        setOpacity(
          /**
           * New value for property `opacity`
           */
          fOpacity: number
        ): sap.ui.vk.Material;
        /**
         * Sets a new value for property {@link #getSpecularColour specularColour}.
         *
         * Specular colour (optional) - red, green, blue, and alhpa
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `rgba(0, 0, 0, 1)`.
         */
        setSpecularColour(
          /**
           * New value for property `specularColour`
           */
          sSpecularColour: sap.ui.core.CSSColor
        ): sap.ui.vk.Material;
        /**
         * Sets a new value for property {@link #getTextureAmbientOcclusion textureAmbientOcclusion}.
         *
         * Ambient occlusion texture (optional)
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setTextureAmbientOcclusion(
          /**
           * New value for property `textureAmbientOcclusion`
           */
          sTextureAmbientOcclusion: sap.ui.vk.Texture
        ): sap.ui.vk.Material;
        /**
         * Sets a new value for property {@link #getTextureBump textureBump}.
         *
         * Bump texture (optional)
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setTextureBump(
          /**
           * New value for property `textureBump`
           */
          sTextureBump: sap.ui.vk.Texture
        ): sap.ui.vk.Material;
        /**
         * Sets a new value for property {@link #getTextureDiffuse textureDiffuse}.
         *
         * Diffuse texture (optional)
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setTextureDiffuse(
          /**
           * New value for property `textureDiffuse`
           */
          sTextureDiffuse: sap.ui.vk.Texture
        ): sap.ui.vk.Material;
        /**
         * Sets a new value for property {@link #getTextureEmissive textureEmissive}.
         *
         * Emissive texture (optional)
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setTextureEmissive(
          /**
           * New value for property `textureEmissive`
           */
          sTextureEmissive: sap.ui.vk.Texture
        ): sap.ui.vk.Material;
        /**
         * Sets a new value for property {@link #getTextureOpacity textureOpacity}.
         *
         * Opacity texture (optional)
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setTextureOpacity(
          /**
           * New value for property `textureOpacity`
           */
          sTextureOpacity: sap.ui.vk.Texture
        ): sap.ui.vk.Material;
        /**
         * Sets a new value for property {@link #getTextureReflection textureReflection}.
         *
         * Reflection texture (optional)
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setTextureReflection(
          /**
           * New value for property `textureReflection`
           */
          sTextureReflection: sap.ui.vk.Texture
        ): sap.ui.vk.Material;
      }
      /**
       * @SINCE 1.32.0
       *
       * Enables loading, pan, zoom and overlay capabilities for a subset of file formats capable of being loaded
       * into a browser natively.
       *
       *
       * ```javascript
       *
       * viewer.loadContent("https://www.google.co.nz/images/srpr/logo11w.png", "png", true);
       * ```
       */
      class NativeViewport extends sap.ui.core.Control {
        /**
         * Constructor for a new NativeViewport.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new Native Viewport control, generated automatically if no ID is given.
           */
          sId?: string,
          /**
           * Initial settings for the new Native Viewport control.
           */
          mSettings?: NativeViewportOpts
        );

        /**
         * Attaches event handler `fnFunction` to the {@link #event:move move} event of this `sap.ui.vk.NativeViewport`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.NativeViewport` itself.
         *
         * Raised when the display position or magnification of the image in the Native Viewport changes.
         */
        attachMove(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.NativeViewport` itself
           */
          oListener?: object
        ): sap.ui.vk.NativeViewport;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:resize resize} event of this `sap.ui.vk.NativeViewport`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.NativeViewport` itself.
         *
         * Raised when the display size of the image in the Native Viewport changes.
         */
        attachResize(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.NativeViewport` itself
           */
          oListener?: object
        ): sap.ui.vk.NativeViewport;
        /**
         * Marks the start of the current gesture operation.
         */
        beginGesture(
          /**
           * x-coordinate in screen space.
           */
          x: number,
          /**
           * y-coordinate in screen space.
           */
          y: number
        ): sap.ui.vk.NativeViewport;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:move move} event of this `sap.ui.vk.NativeViewport`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachMove(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.NativeViewport;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:resize resize} event of this `sap.ui.vk.NativeViewport`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachResize(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.NativeViewport;
        /**
         * Marks the end of the current gesture operation.
         */
        endGesture(): sap.ui.vk.NativeViewport;
        /**
         * Creates a new subclass of class sap.ui.vk.NativeViewport with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:move move} to attached listeners.
         */
        fireMove(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            pan?: object;

            zoom?: number;
          }
        ): sap.ui.vk.NativeViewport;
        /**
         * Fires event {@link #event:resize resize} to attached listeners.
         */
        fireResize(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            oldSize?: object;

            size?: object;
          }
        ): sap.ui.vk.NativeViewport;
        /**
         * ID of the element which is the current target of the association {@link #getContentConnector contentConnector},
         * or `null`.
         */
        getContentConnector(): sap.ui.core.ID;
        /**
         * Gets current value of property {@link #getLimitZoomOut limitZoomOut}.
         *
         * Limit the abbility to zoom out. If enabled the zoom out stops if the image size reaches 25% of the full
         * view (best fit).
         *
         * Default value is `false`.
         */
        getLimitZoomOut(): boolean;
        /**
         * Returns a metadata object for class sap.ui.vk.NativeViewport.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * It retrieves information about the current virtual native viewport. The information can used for making
         * calculations when restoring Redlining elements.
         */
        getOutputSize(): object;
        /**
         * Gets information about the Viewport's attributes; for example, camera.
         */
        getViewInfo(): object;
        /**
         * @deprecated (since 1.50.0)
         *
         * Loads a image URL into Viewport.
         */
        loadUrl(
          /**
           * The URL of the resource.
           */
          url: string,
          /**
           * onload callback, called when the resource is loaded successfully.
           */
          onload: Function,
          /**
           * onerror callback, called when an error occurs during the loading process.
           */
          onerror: Function,
          /**
           * onprogress callback, called during the loading process.
           */
          onprogress: Function,
          /**
           * an array of type of resources to load.
           */
          resourceType: any[]
        ): sap.ui.vk.NativeViewport;
        /**
         * Performs a `pan` gesture to pan across the Viewport.
         */
        pan(
          /**
           * The change in distance along the x-coordinate.
           */
          dx: number,
          /**
           * The change in distance along the y-coordinate.
           */
          dy: number
        ): sap.ui.vk.NativeViewport;
        /**
         * Queues a command for execution during the rendering cycle. All gesture operations should be called using
         * this method.
         */
        queueCommand(
          /**
           * The function to be executed.
           */
          command: Function
        ): sap.ui.vk.NativeViewport;
        /**
         * Rotates the content of the Viewport.
         */
        rotate(
          /**
           * The change in x-coordinate used to define the desired rotation.
           */
          dx: number,
          /**
           * The change in y-coordinate used to define the desired rotation.
           */
          dy: number
        ): sap.ui.vk.NativeViewport;
        /**
         * Sets the associated {@link #getContentConnector contentConnector}.
         */
        setContentConnector(
          /**
           * ID of an element which becomes the new target of this contentConnector association; alternatively, an
           * element instance may be given
           */
          oContentConnector: sap.ui.core.ID | sap.ui.vk.ContentConnector
        ): sap.ui.vk.NativeViewport;
        /**
         * Sets a new value for property {@link #getLimitZoomOut limitZoomOut}.
         *
         * Limit the abbility to zoom out. If enabled the zoom out stops if the image size reaches 25% of the full
         * view (best fit).
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setLimitZoomOut(
          /**
           * New value for property `limitZoomOut`
           */
          bLimitZoomOut: boolean
        ): sap.ui.vk.NativeViewport;
        /**
         * Sets information about the Viewport's attributes; for example, camera.
         */
        setViewInfo(
          /**
           * ViewInfo object.
           */
          viewInfo: object
        ): sap.ui.vk.NativeViewport;
        /**
         * Executes a click or tap gesture.
         */
        tap(
          /**
           * The tap gesture's x-coordinate.
           */
          x: number,
          /**
           * The tap gesture's y-coordinate.
           */
          y: number,
          /**
           * Indicates whether the tap gesture should be interpreted as a double-click. A value of `true` indicates
           * a double-click gesture, and `false` indicates a single click gesture.
           */
          isDoubleClick: boolean
        ): sap.ui.vk.NativeViewport;
        /**
         * Performs a `zoom` gesture to zoom in or out on the beginGesture coordinate.
         */
        zoom(
          /**
           * Zoom factor. A scale factor that specifies how much to zoom in or out by.
           */
          z: number
        ): sap.ui.vk.NativeViewport;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:move move} event of this `sap.ui.vk.NativeViewport`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.NativeViewport` itself.
         *
         * Raised when the display position or magnification of the image in the Native Viewport changes.
         */
        attachMove(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.NativeViewport` itself
           */
          oListener?: object
        ): sap.ui.vk.NativeViewport;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:resize resize} event of this `sap.ui.vk.NativeViewport`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.NativeViewport` itself.
         *
         * Raised when the display size of the image in the Native Viewport changes.
         */
        attachResize(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.NativeViewport` itself
           */
          oListener?: object
        ): sap.ui.vk.NativeViewport;
      }
      /**
       * Provides the ability to explore a Scene object's node structure.
       *
       * The objects of this class should not be created directly, and should only be created via a call to {@link
       * sap.ui.vk.Scene#getDefaultNodeHierarchy sap.ui.vk.Scene.getDefaultNodeHierarchy}.
       */
      // @ts-ignore - static 'getMetadata' inheritance issue
      class NodeHierarchy extends sap.ui.base.ManagedObject {
        /**
         * Constructor for a new NodeHierarchy.
         *
         * The objects of this class should not be created directly, and should only be created via a call to {@link
         * sap.ui.vk.Scene#getDefaultNodeHierarchy sap.ui.vk.Scene.getDefaultNodeHierarchy}.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Attaches event handler `fnFunction` to the {@link #event:changed changed} event of this `sap.ui.vk.NodeHierarchy`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.NodeHierarchy` itself.
         *
         * This event will be fired when the node hierarchy changes, e.g. a node is added or removed.
         */
        attachChanged(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.NodeHierarchy` itself
           */
          oListener?: object
        ): sap.ui.vk.NodeHierarchy;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:nodeCreated nodeCreated} event of this `sap.ui.vk.NodeHierarchy`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.NodeHierarchy` itself.
         *
         * This event will be fired when a new node is created.
         */
        attachNodeCreated(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.NodeHierarchy` itself
           */
          oListener?: object
        ): sap.ui.vk.NodeHierarchy;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:nodeRemoving nodeRemoving} event of this `sap.ui.vk.NodeHierarchy`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.NodeHierarchy` itself.
         *
         * This event will be fired when a node is about to be removed.
         */
        attachNodeRemoving(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.NodeHierarchy` itself
           */
          oListener?: object
        ): sap.ui.vk.NodeHierarchy;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:nodeReplaced nodeReplaced} event of this `sap.ui.vk.NodeHierarchy`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.NodeHierarchy` itself.
         */
        attachNodeReplaced(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.NodeHierarchy` itself
           */
          oListener?: object
        ): sap.ui.vk.NodeHierarchy;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:nodeUpdated nodeUpdated} event of this `sap.ui.vk.NodeHierarchy`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.NodeHierarchy` itself.
         */
        attachNodeUpdated(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.NodeHierarchy` itself
           */
          oListener?: object
        ): sap.ui.vk.NodeHierarchy;
        /**
         * @SINCE 1.50.0
         *
         * Creates a layer proxy object.
         *
         * The layer proxy object must be destroyed with the {@link #destroyLayerProxy destroyLayerProxy} method.
         */
        createLayerProxy(
          /**
           * The layer ID for which to create a proxy object.
           */
          layerId: string
        ): sap.ui.vk.LayerProxy;
        /**
         * @SINCE 1.50.0
         *
         * Creates a new node.
         */
        createNode(
          /**
           * The reference object of the parent node where the created node is added to. If equals `null` the newly
           * created node is a top level node.
           */
          parentNode: any,
          /**
           * The name of the new node.
           */
          name: string,
          /**
           * The created node is added before this specified node. If equals `null` the newly created node is added
           * at the end of the parent's list of nodes.
           */
          insertBeforeNode: any
        ): any;
        /**
         * @SINCE 1.50.0
         *
         * Creates a copy of an existing node.
         */
        createNodeCopy(
          /**
           * The reference object of the node to copy.
           */
          nodeToCopy: any,
          /**
           * The reference object of the parent node where the created node is added to. If equals `null` the newly
           * created node is a top level node.
           */
          parentNode: any,
          /**
           * The name of the new node.
           */
          name: string,
          /**
           * The created node is added before this specified node. If equals `null` the newly created node is added
           * at the end of the parent's list of nodes.
           */
          insertBeforeNode: any
        ): any;
        /**
         * @SINCE 1.50.0
         *
         * Creates a node proxy object.
         *
         * The node proxy object must be destroyed with the {@link #destroyNodeProxy destroyNodeProxy} method.
         */
        createNodeProxy(
          /**
           * The reference object for which to create a proxy object.
           */
          nodeRef: any
        ): sap.ui.vk.NodeProxy;
        /**
         * @SINCE 1.50.0
         *
         * Destroys the layer proxy object.
         */
        destroyLayerProxy(
          /**
           * The layer proxy object.
           */
          layerProxy: sap.ui.vk.LayerProxy
        ): sap.ui.vk.LayerProxy;
        /**
         * @SINCE 1.50.0
         *
         * Destroys the node proxy object.
         */
        destroyNodeProxy(
          /**
           * The node proxy object.
           */
          nodeProxy: sap.ui.vk.NodeProxy
        ): sap.ui.vk.NodeHierarchy;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:changed changed} event of this `sap.ui.vk.NodeHierarchy`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachChanged(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.NodeHierarchy;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:nodeCreated nodeCreated} event of this `sap.ui.vk.NodeHierarchy`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachNodeCreated(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.NodeHierarchy;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:nodeRemoving nodeRemoving} event of this `sap.ui.vk.NodeHierarchy`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachNodeRemoving(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.NodeHierarchy;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:nodeReplaced nodeReplaced} event of this `sap.ui.vk.NodeHierarchy`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachNodeReplaced(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.NodeHierarchy;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:nodeUpdated nodeUpdated} event of this `sap.ui.vk.NodeHierarchy`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachNodeUpdated(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.NodeHierarchy;
        /**
         * @SINCE 1.50.0
         *
         * Enumerates the ancestor nodes of a particular node in the Scene object.
         *
         * This method enumerates the ancestor nodes of a particular node, and then calls the `callback` function,
         * to which it passes the ancestor nodes to one by one.
         *  The BaseNodeProxy objects passed to `callback` are temporary objects, they are reset after each call
         * to the `callback` function.
         *  The ancestor nodes are enumerated starting from the top level node, and progresses down the node hierarchy.
         */
        enumerateAncestors(
          /**
           * The reference object of a node whose ancestor nodes we want enumerated.
           */
          nodeRef: any,
          /**
           * A function to call when the ancestor nodes are enumerated. The function takes one parameter of type {@link
           * sap.ui.vk.BaseNodeProxy}, or string if parameter `passNodeRef` parameter is `true`.
           */
          callback: Function,
          /**
           * Indicates whether to pass the reference objects of the ancestor nodes, or the whole node proxy to the
           * `callback` function.
           *  If `true`, then only the reference objects of the ancestor nodes are passed to the `callback` function.
           *
           *  If `false`, then the node proxies of the ancestor nodes are passed to the `callback` function.
           */
          passNodeRef?: boolean
        ): sap.ui.vk.NodeHierarchy;
        /**
         * @SINCE 1.50.0
         *
         * Enumerates the child nodes of a particular node in the Scene object.
         *
         * This method gets the child nodes of a particular node, and then calls the `callback` function to which
         * it passes the child nodes to one by one.
         *  The `BaseNodeProxy` objects passed to the `callback` fuction are temporary objects, which are reset
         * after each call to the `callback` function.
         */
        enumerateChildren(
          /**
           * The reference object of a node whose child nodes we want enumerated.
           *  When `nodeRef` is specified, the child nodes of this node are enumerated.
           *  When no `nodeRef` is specified, only the top level nodes are enumerated.
           */
          nodeRef: any,
          /**
           * A function to call when the child nodes are enumerated. The function takes one parameter of type {@link
           * sap.ui.vk.BaseNodeProxy}, or string if parameter `passNodeRef` parameter is `true`.
           */
          callback: Function,
          /**
           * Indicates whether to enumerate the child nodes if the node is closed.
           *  If `true`, the children of that closed node will be enumerated
           *  If `false`, the children of that node will not be enumerated
           */
          stepIntoClosedNodes?: boolean,
          /**
           * Indicates whether to pass the reference objects of the child nodes, or the whole node proxy to the `callback`
           * function.
           *  If `true`, then only the reference objects of the child nodes are passed to the `callback` function.
           *
           *  If `false`, then the node proxies created from the child reference objects are passed to the `callback`
           * function.
           */
          passNodeRef?: boolean
        ): sap.ui.vk.NodeHierarchy;
        /**
         * Creates a new subclass of class sap.ui.vk.NodeHierarchy with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * @SINCE 1.50.0
         *
         * Searches for VE IDs, and returns a list of reference objects of nodes with VE IDs matching the search.
         * The query is run specifically against VE ID structures, which are strictly related to VDS4 models.
         */
        findNodesById(
          /**
           * JSON object containing the search parameters.
           *  The following example shows what the structure of the `query` object should look like:
           * ```javascript
           * query = {
           * 	source: string (if not specified, the query returns an empty array),
           *
           * 	type: string (if not specified, the query returns an empty array),
           *
           * 	fields: field[]
           * 	}```
           *
           *
           * 	 -  **field.name**
           *  A string containing the name of the VE ID. If no value is specified, then the query will return an empty
           * array.
           *
           * 	 -  **field.value**
           *  A string representing the search keyword. If no value is specified, it defaults to empty string.
           *  The following example shows a string being passed in:
           * ```javascript
           * value: "Box #14"```
           *
           * 	 -  **field.predicate**
           *  Represents a search mode. The available search modes are `"equals"`, `"contains"`, and `"startsWith"`.
           *
           *  Using `"equals"` will search for IDs with names that exactly match the provided string.
           *  Using `"contains"` will search for IDs with names containing the provided string.
           *  Using `"startsWith"` will search for IDs with names starting with the provided string.
           *  If no value is specified, the search mode will default to `"equals"`.
           *
           *
           * 	 -  **field.caseSensitive**
           *  Indicates whether the search should be case sensitive or not.
           *  If `true`, the search will be case sensitive, and `false` indicates otherwise.
           *  If no value is specified, `caseSensitive` will default to `false` (that is, the search will be a case-insensitive
           * search).
           */
          query: object
        ): any[];
        /**
         * @SINCE 1.50.0
         *
         * Finds nodes in a scene via metadata information.
         */
        findNodesByMetadata(
          /**
           * JSON object containing the search parameters.
           *  The following example shows what the structure of the `query` object should look like:
           * ```javascript
           * query = {
           *   category: string,
           *   key: string,
           *   value: string | string[],
           *   predicate: "equals" | "contains" | "startsWith",
           *   caseSensitive: true | false
           * }```
           *
           *  NOTE: `query.predicate` and `query.caseSensitive` refer to `query.value`.
           *
           * 	 -  **query.category**
           *  A string indicating the name of the metadata category.
           *  If no value is specified for `query.category`, all nodes in the scene will be returned in the search.
           *
           *
           * 	 -  **query.key**
           *  A string indicating the key which belongs to the metadata category specified in `query.category`. You
           * can only use `query.key` if `query.category` has been specified.
           *  If no value is specified for `query.key`, then all nodes grouped under the specified category will be
           * returned in the search.
           *
           *
           * 	 -  **query.value**
           *  A string or an array of strings containing the value or values associated with `query.key`. You can
           * only use `query.value` in the search if `query.key` has been specified.
           *  If no value is specified for `query.value`, then all nodes containing the specified key will be returned,
           * regardless of what the value of the key is.
           *  The following example shows a single string being passed in:
           * ```javascript
           * value: "Box #14"```
           *  The following example shows an array of strings being passed in:
           * ```javascript
           * value: ["Box #3", "box #4", "BOX #5"]```
           *
           * 	 -  **query.predicate**
           *  Represents a search mode. The available search modes are `"equals"`, `"contains"`, and `"startsWith"`.
           *
           *  Using `"equals"` will search for key values that exactly match the provided string or array of strings.
           *
           *  Using `"contains"` will search for key values containing all or part of the provided string or array
           * of strings.
           *  Using `"startsWith"` will search key values starting with the provided string or array of strings.
           *  If no value is specified, the search mode will default to `"equals"`.
           *
           *
           * 	 -  **query.caseSensitive**
           *  Indicates whether the search should be case sensitive or not.
           *  If `true`, the search will be case sensitive, and `false` indicates otherwise.
           *  If no value is specified, `caseSensitive` will default to `false` (that is, the search will be a case-insensitive
           * search).
           */
          query: object
        ): any[];
        /**
         * @SINCE 1.50.0
         *
         * Finds nodes in a scene via node name.
         */
        findNodesByName(
          /**
           * JSON object containing the search parameters.
           *  The following example shows what the structure of the `query` object should look like:
           * ```javascript
           * query = {
           * 	value: string | string[],
           * 	predicate: "equals" | "contains" | "startsWith",
           * 	caseSensitive: true | false
           * }```
           *
           *
           * 	 -  **query.value**
           *  A string or an array of strings containing the name of a node or names of nodes. If no value is specified,
           * then all nodes in the scene will be returned.
           *  The following example shows a single string being passed in:
           * ```javascript
           * value: "Box #14"```
           *  The following example shows an array of strings being passed in:
           * ```javascript
           * value: ["Box #3", "box #4", "BOX #5"]```
           *
           * 	 -  **query.predicate**
           *  Represents a search mode. The available search modes are `"equals"`, `"contains"`, and `"startsWith"`.
           *
           *  Using `"equals"` will search for nodes with names that exactly match the provided string or array of
           * strings.
           *  Using `"contains"` will search for nodes with names containing all or part of the provided string or
           * array of strings.
           *  Using `"startsWith"` will search for nodes with names starting with the provided string or array of
           * strings.
           *  If no value is specified, the search mode will default to `"equals"`.
           *
           *
           * 	 -  **query.caseSensitive**
           *  Indicates whether the search should be case sensitive or not.
           *  If `true`, the search will be case sensitive, and `false` indicates otherwise.
           *  If no value is specified, `caseSensitive` will default to `false` (that is, the search will be a case-insensitive
           * search).
           */
          query: object
        ): any[];
        /**
         * Fires event {@link #event:changed changed} to attached listeners.
         */
        fireChanged(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): sap.ui.vk.NodeHierarchy;
        /**
         * Fires event {@link #event:nodeCreated nodeCreated} to attached listeners.
         */
        fireNodeCreated(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            nodeRef?: any;

            nodeId?: string;
          }
        ): sap.ui.vk.NodeHierarchy;
        /**
         * Fires event {@link #event:nodeRemoving nodeRemoving} to attached listeners.
         */
        fireNodeRemoving(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            nodeRef?: any;

            nodeId?: string;
          }
        ): sap.ui.vk.NodeHierarchy;
        /**
         * Fires event {@link #event:nodeReplaced nodeReplaced} to attached listeners.
         */
        fireNodeReplaced(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            ReplacedNodeRef?: any;

            ReplacementNodeRef?: any;

            ReplacedNodeId?: string;

            ReplacementNodeId?: string;
          }
        ): sap.ui.vk.NodeHierarchy;
        /**
         * Fires event {@link #event:nodeUpdated nodeUpdated} to attached listeners.
         */
        fireNodeUpdated(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            nodeRef?: any;

            nodeId?: string;
          }
        ): sap.ui.vk.NodeHierarchy;
        /**
         * @SINCE 1.50.0
         *
         * Returns a list of reference objects belonging to the ancestors of a particular node.
         */
        getAncestors(
          /**
           * The reference object of the node whose ancestors will be returned.
           */
          nodeRef: any
        ): any[];
        /**
         * @SINCE 1.50.0
         *
         * Returns a list of reference objects belonging to the children of a particular node.
         */
        getChildren(
          /**
           * The reference object of the node whose children will be returned. If `nodeRef` is not passed to the `getChildren`
           * function, the reference objects of the root nodes will be returned.
           */
          nodeRef: any,
          /**
           * Indicates whether to return only the child nodes of a closed node or not. If `true`, then the
           * children of that closed node will be returned. If `false`, then the children of that closed node
           * will not be returned.
           */
          stepIntoClosedNodes?: boolean
        ): any[];
        /**
         * @SINCE 1.50.0
         *
         * Returns a list of hotspot IDs.
         */
        getHotspotNodeIds(): string[];
        /**
         * @SINCE 1.50.0
         *
         * Returns a list of layer IDs.
         */
        getLayers(): string[];
        /**
         * Returns a metadata object for class sap.ui.vk.NodeHierarchy.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * @SINCE 1.50.0
         *
         * Gets the Scene object the node hierarchy belongs to.
         */
        getScene(): sap.ui.vk.Scene;
        /**
         * Gets the scene reference that this NodeHierarchy object wraps.
         */
        getSceneRef(): any;
        /**
         * @SINCE 1.50.0
         *
         * Deletes a node and destroys it.
         */
        removeNode(
          /**
           * The reference object of the node to destroy.
           */
          nodeRef: any
        ): sap.ui.vk.NodeHierarchy;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:changed changed} event of this `sap.ui.vk.NodeHierarchy`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.NodeHierarchy` itself.
         *
         * This event will be fired when the node hierarchy changes, e.g. a node is added or removed.
         */
        attachChanged(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.NodeHierarchy` itself
           */
          oListener?: object
        ): sap.ui.vk.NodeHierarchy;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:nodeCreated nodeCreated} event of this `sap.ui.vk.NodeHierarchy`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.NodeHierarchy` itself.
         *
         * This event will be fired when a new node is created.
         */
        attachNodeCreated(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.NodeHierarchy` itself
           */
          oListener?: object
        ): sap.ui.vk.NodeHierarchy;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:nodeRemoving nodeRemoving} event of this `sap.ui.vk.NodeHierarchy`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.NodeHierarchy` itself.
         *
         * This event will be fired when a node is about to be removed.
         */
        attachNodeRemoving(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.NodeHierarchy` itself
           */
          oListener?: object
        ): sap.ui.vk.NodeHierarchy;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:nodeReplaced nodeReplaced} event of this `sap.ui.vk.NodeHierarchy`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.NodeHierarchy` itself.
         */
        attachNodeReplaced(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.NodeHierarchy` itself
           */
          oListener?: object
        ): sap.ui.vk.NodeHierarchy;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:nodeUpdated nodeUpdated} event of this `sap.ui.vk.NodeHierarchy`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.NodeHierarchy` itself.
         */
        attachNodeUpdated(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.NodeHierarchy` itself
           */
          oListener?: object
        ): sap.ui.vk.NodeHierarchy;
        /**
         * @SINCE 1.50.0
         *
         * Enumerates the child nodes of a particular node in the Scene object.
         *
         * This method gets the child nodes of a particular node, and then calls the `callback` function to which
         * it passes the child nodes to one by one.
         *  The `BaseNodeProxy` objects passed to the `callback` fuction are temporary objects, which are reset
         * after each call to the `callback` function.
         */
        enumerateChildren(
          /**
           * A function to call when the child nodes are enumerated. The function takes one parameter of type {@link
           * sap.ui.vk.BaseNodeProxy}, or string if parameter `passNodeRef` parameter is `true`.
           */
          callback: Function,
          /**
           * Indicates whether to enumerate the child nodes if the node is closed.
           *  If `true`, the children of that closed node will be enumerated
           *  If `false`, the children of that node will not be enumerated
           */
          stepIntoClosedNodes?: boolean,
          /**
           * Indicates whether to pass the reference objects of the child nodes, or the whole node proxy to the `callback`
           * function.
           *  If `true`, then only the reference objects of the child nodes are passed to the `callback` function.
           *
           *  If `false`, then the node proxies created from the child reference objects are passed to the `callback`
           * function.
           */
          passNodeRef?: boolean
        ): sap.ui.vk.NodeHierarchy;
      }
      /**
       * @SINCE 1.32.0
       *
       * Provides a proxy object to the node in the node hierarchy.
       *
       * Objects of this type should only be created with the {@link sap.ui.vk.NodeHierarchy#createNodeProxy sap.ui.vk.NodeHierarchy.createNodeProxy}
       * method. and destroyed with the {@link sap.ui.vk.NodeHierarchy#destroyNodeProxy sap.ui.vk.NodeHierarchy.destroyNodeProxy}
       * method.
       */
      // @ts-ignore - static 'getMetadata' inheritance issue
      class NodeProxy extends sap.ui.base.ManagedObject {
        /**
         * Constructor for a new NodeProxy.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Binds property {@link #getLocalMatrix localMatrix} to model data.
         *
         * See {@link sap.ui.base.ManagedObject#bindProperty ManagedObject.bindProperty} for a detailed description
         * of the possible properties of `oBindingInfo`
         */
        bindLocalMatrix(
          /**
           * The binding information
           */
          oBindingInfo: object
        ): sap.ui.vk.NodeProxy;
        /**
         * Binds property {@link #getOpacity opacity} to model data.
         *
         * See {@link sap.ui.base.ManagedObject#bindProperty ManagedObject.bindProperty} for a detailed description
         * of the possible properties of `oBindingInfo`
         */
        bindOpacity(
          /**
           * The binding information
           */
          oBindingInfo: object
        ): sap.ui.vk.NodeProxy;
        /**
         * Binds property {@link #getTintColor tintColor} to model data.
         *
         * See {@link sap.ui.base.ManagedObject#bindProperty ManagedObject.bindProperty} for a detailed description
         * of the possible properties of `oBindingInfo`
         */
        bindTintColor(
          /**
           * The binding information
           */
          oBindingInfo: object
        ): sap.ui.vk.NodeProxy;
        /**
         * Binds property {@link #getTintColorABGR tintColorABGR} to model data.
         *
         * See {@link sap.ui.base.ManagedObject#bindProperty ManagedObject.bindProperty} for a detailed description
         * of the possible properties of `oBindingInfo`
         */
        bindTintColorABGR(
          /**
           * The binding information
           */
          oBindingInfo: object
        ): sap.ui.vk.NodeProxy;
        /**
         * Binds property {@link #getWorldMatrix worldMatrix} to model data.
         *
         * See {@link sap.ui.base.ManagedObject#bindProperty ManagedObject.bindProperty} for a detailed description
         * of the possible properties of `oBindingInfo`
         */
        bindWorldMatrix(
          /**
           * The binding information
           */
          oBindingInfo: object
        ): sap.ui.vk.NodeProxy;
        /**
         * Creates a new subclass of class sap.ui.vk.NodeProxy with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getClosed closed}.
         *
         * The indicator showing if the node is closed. This property is read-only.
         */
        getClosed(): boolean;
        /**
         * Gets current value of property {@link #getHasChildren hasChildren}.
         *
         * The indicator showing if the node has child nodes. This property is read-only.
         */
        getHasChildren(): boolean;
        /**
         * Gets current value of property {@link #getLocalMatrix localMatrix}.
         *
         * The local transformation matrix of the node.
         */
        getLocalMatrix(): sap.ui.vk.TransformationMatrix;
        /**
         * get local rotation represented by axis and angle
         */
        getLocalRotationInAngleAxis(): number[];
        /**
         * get local rotation in Euler form
         */
        getLocalRotationInEuler(): number[];
        /**
         * get local rotation represented by quaternion
         */
        getLocalRotationInQuaternion(): number[];
        /**
         * get local scale vector
         */
        getLocalScale(): number[];
        /**
         * get local translate vector
         */
        getLocalTranslate(): number[];
        /**
         * Gets current value of property {@link #getMaterial material}.
         *
         * The material of the node (optional).
         */
        getMaterial(): sap.ui.vk.Material;
        /**
         * Returns a metadata object for class sap.ui.vk.NodeProxy.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getName name}.
         *
         * The name of the node. This property is read-only.
         */
        getName(): string;
        /**
         * Gets current value of property {@link #getNodeMetadata nodeMetadata}.
         *
         * The node metadata. This property is read-only.
         */
        getNodeMetadata(): object;
        /**
         * Gets current value of property {@link #getNodeRef nodeRef}.
         *
         * The node reference. This property is read-only.
         */
        getNodeRef(): any;
        /**
         * Gets current value of property {@link #getOpacity opacity}.
         *
         * The node opacity.
         */
        getOpacity(): number;
        /**
         * Gets the scene reference that this NodeProxy object wraps.
         */
        getSceneRef(): any;
        /**
         * Gets current value of property {@link #getTintColor tintColor}.
         *
         * The tint color.
         */
        getTintColor(): sap.ui.core.CSSColor;
        /**
         * Gets current value of property {@link #getTintColorABGR tintColorABGR}.
         *
         * The tint color.
         *
         *
         * The tint color is a 32-bit integer in the ABGR notation, where A is amount of blending between material
         * color and tint color.
         */
        getTintColorABGR(): number;
        /**
         * Gets current value of property {@link #getVeIds veIds}.
         *
         * The node VE IDs. This property is read-only.
         */
        getVeIds(): object[];
        /**
         * Gets current value of property {@link #getWorldMatrix worldMatrix}.
         *
         * The world transformation matrix of the node.
         */
        getWorldMatrix(): sap.ui.vk.TransformationMatrix;
        /**
         * Sets a new value for property {@link #getClosed closed}.
         *
         * The indicator showing if the node is closed. This property is read-only.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setClosed(
          /**
           * New value for property `closed`
           */
          bClosed: boolean
        ): sap.ui.vk.NodeProxy;
        /**
         * Sets a new value for property {@link #getHasChildren hasChildren}.
         *
         * The indicator showing if the node has child nodes. This property is read-only.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setHasChildren(
          /**
           * New value for property `hasChildren`
           */
          bHasChildren: boolean
        ): sap.ui.vk.NodeProxy;
        /**
         * Sets a new value for property {@link #getLocalMatrix localMatrix}.
         *
         * The local transformation matrix of the node.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setLocalMatrix(
          /**
           * New value for property `localMatrix`
           */
          sLocalMatrix: sap.ui.vk.TransformationMatrix
        ): sap.ui.vk.NodeProxy;
        /**
         * Sets a new value for property {@link #getMaterial material}.
         *
         * The material of the node (optional).
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setMaterial(
          /**
           * New value for property `material`
           */
          sMaterial: sap.ui.vk.Material
        ): sap.ui.vk.NodeProxy;
        /**
         * Sets a new value for property {@link #getName name}.
         *
         * The name of the node. This property is read-only.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setName(
          /**
           * New value for property `name`
           */
          sName: string
        ): sap.ui.vk.NodeProxy;
        /**
         * Sets a new value for property {@link #getNodeMetadata nodeMetadata}.
         *
         * The node metadata. This property is read-only.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setNodeMetadata(
          /**
           * New value for property `nodeMetadata`
           */
          oNodeMetadata: object
        ): sap.ui.vk.NodeProxy;
        /**
         * Sets a new value for property {@link #getNodeRef nodeRef}.
         *
         * The node reference. This property is read-only.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setNodeRef(
          /**
           * New value for property `nodeRef`
           */
          oNodeRef: any
        ): sap.ui.vk.NodeProxy;
        /**
         * Sets a new value for property {@link #getOpacity opacity}.
         *
         * The node opacity.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setOpacity(
          /**
           * New value for property `opacity`
           */
          fOpacity: number
        ): sap.ui.vk.NodeProxy;
        /**
         * Sets a new value for property {@link #getTintColor tintColor}.
         *
         * The tint color.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setTintColor(
          /**
           * New value for property `tintColor`
           */
          sTintColor: sap.ui.core.CSSColor
        ): sap.ui.vk.NodeProxy;
        /**
         * Sets a new value for property {@link #getTintColorABGR tintColorABGR}.
         *
         * The tint color.
         *
         *
         * The tint color is a 32-bit integer in the ABGR notation, where A is amount of blending between material
         * color and tint color.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setTintColorABGR(
          /**
           * New value for property `tintColorABGR`
           */
          iTintColorABGR: number
        ): sap.ui.vk.NodeProxy;
        /**
         * Sets a new value for property {@link #getVeIds veIds}.
         *
         * The node VE IDs. This property is read-only.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setVeIds(
          /**
           * New value for property `veIds`
           */
          sVeIds: object[]
        ): sap.ui.vk.NodeProxy;
        /**
         * Sets a new value for property {@link #getWorldMatrix worldMatrix}.
         *
         * The world transformation matrix of the node.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setWorldMatrix(
          /**
           * New value for property `worldMatrix`
           */
          sWorldMatrix: sap.ui.vk.TransformationMatrix
        ): sap.ui.vk.NodeProxy;
        /**
         * Unbinds property {@link #getLocalMatrix localMatrix} from model data.
         */
        unbindLocalMatrix(): sap.ui.vk.NodeProxy;
        /**
         * Unbinds property {@link #getOpacity opacity} from model data.
         */
        unbindOpacity(): sap.ui.vk.NodeProxy;
        /**
         * Unbinds property {@link #getTintColor tintColor} from model data.
         */
        unbindTintColor(): sap.ui.vk.NodeProxy;
        /**
         * Unbinds property {@link #getTintColorABGR tintColorABGR} from model data.
         */
        unbindTintColorABGR(): sap.ui.vk.NodeProxy;
        /**
         * Unbinds property {@link #getWorldMatrix worldMatrix} from model data.
         */
        unbindWorldMatrix(): sap.ui.vk.NodeProxy;
      }
      /**
       * @SINCE 1.38.0
       *
       * Provides the ability to display logged console messages within your application.
       */
      class Notifications extends sap.ui.core.Control {
        /**
         * Constructor for a new Notifications.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new Notifications control. Generated automatically if no ID is given.
           */
          sId?: string,
          /**
           * Initial settings for the new Notifications control.
           */
          mSettings?: NotificationsOpts
        );

        /**
         * Attaches event handler `fnFunction` to the {@link #event:allMessagesCleared allMessagesCleared} event
         * of this `sap.ui.vk.Notifications`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Notifications` itself.
         *
         * This event will be fired when all messages in the log are deleted.
         */
        attachAllMessagesCleared(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Notifications` itself
           */
          oListener?: object
        ): sap.ui.vk.Notifications;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:messageAdded messageAdded} event of this `sap.ui.vk.Notifications`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Notifications` itself.
         *
         * This event will be fired when a new log message is added.
         */
        attachMessageAdded(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Notifications` itself
           */
          oListener?: object
        ): sap.ui.vk.Notifications;
        /**
         * Clears the items in the Message Popover list.
         */
        clearAllMessages(): sap.ui.vk.Notifications;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:allMessagesCleared allMessagesCleared} event
         * of this `sap.ui.vk.Notifications`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachAllMessagesCleared(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.Notifications;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:messageAdded messageAdded} event of this `sap.ui.vk.Notifications`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachMessageAdded(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.Notifications;
        /**
         * Creates a new subclass of class sap.ui.vk.Notifications with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:allMessagesCleared allMessagesCleared} to attached listeners.
         */
        fireAllMessagesCleared(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): sap.ui.vk.Notifications;
        /**
         * Fires event {@link #event:messageAdded messageAdded} to attached listeners.
         */
        fireMessageAdded(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): sap.ui.vk.Notifications;
        /**
         * Returns a metadata object for class sap.ui.vk.Notifications.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:allMessagesCleared allMessagesCleared} event
         * of this `sap.ui.vk.Notifications`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Notifications` itself.
         *
         * This event will be fired when all messages in the log are deleted.
         */
        attachAllMessagesCleared(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Notifications` itself
           */
          oListener?: object
        ): sap.ui.vk.Notifications;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:messageAdded messageAdded} event of this `sap.ui.vk.Notifications`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Notifications` itself.
         *
         * This event will be fired when a new log message is added.
         */
        attachMessageAdded(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Notifications` itself
           */
          oListener?: object
        ): sap.ui.vk.Notifications;
      }
      /**
       * @SINCE 1.52.0
       *
       * Provides the interface for the orthographic camera.
       */
      class OrthographicCamera extends sap.ui.vk.Camera {
        /**
         * Constructor for a new OrthographicCamera.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Creates a new subclass of class sap.ui.vk.OrthographicCamera with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.Camera.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.ui.vk.OrthographicCamera.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getZoomFactor zoomFactor}.
         *
         * Camera zoom factor
         */
        getZoomFactor(): number;
        /**
         * Sets a new value for property {@link #getZoomFactor zoomFactor}.
         *
         * Camera zoom factor
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setZoomFactor(
          /**
           * New value for property `zoomFactor`
           */
          fZoomFactor: number
        ): sap.ui.vk.OrthographicCamera;
      }
      /**
       * @SINCE 1.32.0
       *
       * Constructor for a new Overlay.
       */
      class Overlay extends sap.ui.core.Control {
        /**
         * Constructor for a new Overlay.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: OverlayOpts
        );

        /**
         * Adds some area to the aggregation {@link #getAreas areas}.
         */
        addArea(
          /**
           * The area to add; if empty, nothing is inserted
           */
          oArea: sap.ui.vk.OverlayArea
        ): sap.ui.vk.Overlay;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:click click} event of this `sap.ui.vk.Overlay`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Overlay` itself.
         *
         * Raised when the Control is clicked.
         */
        attachClick(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Overlay` itself
           */
          oListener?: object
        ): sap.ui.vk.Overlay;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contextMenu contextMenu} event of this `sap.ui.vk.Overlay`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Overlay` itself.
         *
         * Raised when the Control is right clicked/longPress(tap and hold).
         */
        attachContextMenu(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Overlay` itself
           */
          oListener?: object
        ): sap.ui.vk.Overlay;
        /**
         * Destroys all the areas in the aggregation {@link #getAreas areas}.
         */
        destroyAreas(): sap.ui.vk.Overlay;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:click click} event of this `sap.ui.vk.Overlay`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachClick(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.Overlay;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:contextMenu contextMenu} event of this `sap.ui.vk.Overlay`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachContextMenu(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.Overlay;
        /**
         * Creates a new subclass of class sap.ui.vk.Overlay with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:click click} to attached listeners.
         */
        fireClick(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Client coordinate X
             */
            clientX?: number;
            /**
             * Client coordinate Y
             */
            clientY?: number;
            /**
             * Coordinates of click position in format "x;y;0"
             */
            pos?: string;
          }
        ): sap.ui.vk.Overlay;
        /**
         * Fires event {@link #event:contextMenu contextMenu} to attached listeners.
         */
        fireContextMenu(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Coordinates of click position in format "x;y;0"
             */
            pos?: string;
            /**
             * Menu to open
             */
            menu?: sap.ui.unified.Menu;
          }
        ): sap.ui.vk.Overlay;
        /**
         * Gets content of aggregation {@link #getAreas areas}.
         *
         * Aggregation of Highlight Areas.
         */
        getAreas(): sap.ui.vk.OverlayArea[];
        /**
         * Returns a metadata object for class sap.ui.vk.Overlay.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Trigger the interactive creation mode to get a position or position array.
         */
        getPositionInteractive(
          /**
           * Indicator if a single position or an array is requested
           */
          bPosArray: boolean,
          /**
           * Callback function func( sPosArray ) to be called when done. Position(array) sPosArray is provided in
           * format "x;y;0;..."
           */
          callback: Function
        ): boolean;
        /**
         * ID of the element which is the current target of the association {@link #getTarget target}, or `null`.
         */
        getTarget(): sap.ui.core.ID;
        /**
         * Gets current value of property {@link #getZoomOnResize zoomOnResize}.
         *
         * Default value is `true`.
         */
        getZoomOnResize(): boolean;
        /**
         * Checks for the provided `sap.ui.vk.OverlayArea` in the aggregation {@link #getAreas areas}. and returns
         * its index if found or -1 otherwise.
         */
        indexOfArea(
          /**
           * The area whose index is looked for
           */
          oArea: sap.ui.vk.OverlayArea
        ): number;
        /**
         * Inserts a area into the aggregation {@link #getAreas areas}.
         */
        insertArea(
          /**
           * The area to insert; if empty, nothing is inserted
           */
          oArea: sap.ui.vk.OverlayArea,
          /**
           * The `0`-based index the area should be inserted at; for a negative value of `iIndex`, the area is inserted
           * at position 0; for a value greater than the current size of the aggregation, the area is inserted at
           * the last position
           */
          iIndex: number
        ): sap.ui.vk.Overlay;
        /**
         * open the context menu
         */
        openContextMenu(
          /**
           * the context menu to be opened
           */
          oMenu: object
        ): void;
        /**
         * Removes all the controls from the aggregation {@link #getAreas areas}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllAreas(): sap.ui.vk.OverlayArea[];
        /**
         * Removes a area from the aggregation {@link #getAreas areas}.
         */
        removeArea(
          /**
           * The area to remove or its index or id
           */
          vArea: number | string | sap.ui.vk.OverlayArea
        ): sap.ui.vk.OverlayArea;
        /**
         * Reset the Overlay to its initial size and position.
         */
        reset(): sap.ui.vk.Overlay;
        /**
         * Pan and Zoom for the Overlay. The offsets `nDeltaX` and `nDeltaY` are applied to the current
         * center position. If zooming is involved as well the offsets are applied after the zooming.
         */
        setPanAndZoom(
          /**
           * the move of the center in x-direction in pixels
           */
          nDeltaX: number,
          /**
           * the move of the center in y-direction in pixels
           */
          nDeltaY: number,
          /**
           * the zoom factor to apply to the current state
           */
          fZoom: number
        ): void;
        /**
         * Sets the associated {@link #getTarget target}.
         */
        setTarget(
          /**
           * ID of an element which becomes the new target of this target association; alternatively, an element instance
           * may be given
           */
          oTarget: sap.ui.core.ID | sap.ui.core.Control
        ): sap.ui.vk.Overlay;
        /**
         * Sets a new value for property {@link #getZoomOnResize zoomOnResize}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setZoomOnResize(
          /**
           * New value for property `zoomOnResize`
           */
          bZoomOnResize: boolean
        ): sap.ui.vk.Overlay;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:click click} event of this `sap.ui.vk.Overlay`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Overlay` itself.
         *
         * Raised when the Control is clicked.
         */
        attachClick(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Overlay` itself
           */
          oListener?: object
        ): sap.ui.vk.Overlay;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contextMenu contextMenu} event of this `sap.ui.vk.Overlay`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Overlay` itself.
         *
         * Raised when the Control is right clicked/longPress(tap and hold).
         */
        attachContextMenu(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Overlay` itself
           */
          oListener?: object
        ): sap.ui.vk.Overlay;
      }
      /**
       * @SINCE 1.32.0
       *
       * Aggregation element for the Overlay Control
       */
      class OverlayArea extends sap.ui.core.Element {
        /**
         * Constructor for a new OverlayArea.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: OverlayAreaOpts
        );

        /**
         * Attaches event handler `fnFunction` to the {@link #event:click click} event of this `sap.ui.vk.OverlayArea`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.OverlayArea` itself.
         *
         * The event is raised when there is a click action on an OverlayArea.
         */
        attachClick(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.OverlayArea` itself
           */
          oListener?: object
        ): sap.ui.vk.OverlayArea;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contextMenu contextMenu} event of this `sap.ui.vk.OverlayArea`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.OverlayArea` itself.
         *
         * The event is raised when there is a right click or a tap and hold action on an OverlayArea.
         */
        attachContextMenu(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.OverlayArea` itself
           */
          oListener?: object
        ): sap.ui.vk.OverlayArea;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:edgeClick edgeClick} event of this `sap.ui.vk.OverlayArea`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.OverlayArea` itself.
         *
         * This event is raised when the edge of an OverlayArea is clicked.
         */
        attachEdgeClick(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.OverlayArea` itself
           */
          oListener?: object
        ): sap.ui.vk.OverlayArea;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:edgeContextMenu edgeContextMenu} event of this
         * `sap.ui.vk.OverlayArea`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.OverlayArea` itself.
         *
         * This event is raised when the edge of an OverlayArea is right clicked.
         */
        attachEdgeContextMenu(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.OverlayArea` itself
           */
          oListener?: object
        ): sap.ui.vk.OverlayArea;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:handleClick handleClick} event of this `sap.ui.vk.OverlayArea`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.OverlayArea` itself.
         *
         * This event is raised when the design handle of a changable OverlayArea is clicked.
         */
        attachHandleClick(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.OverlayArea` itself
           */
          oListener?: object
        ): sap.ui.vk.OverlayArea;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:handleContextMenu handleContextMenu} event of
         * this `sap.ui.vk.OverlayArea`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.OverlayArea` itself.
         *
         * This event is raised when the design handle of a changable OverlayArea is right clicked.
         */
        attachHandleContextMenu(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.OverlayArea` itself
           */
          oListener?: object
        ): sap.ui.vk.OverlayArea;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:handleMoved handleMoved} event of this `sap.ui.vk.OverlayArea`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.OverlayArea` itself.
         *
         * This event is raised when the design handle of a changable OverlayArea is moved.
         */
        attachHandleMoved(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.OverlayArea` itself
           */
          oListener?: object
        ): sap.ui.vk.OverlayArea;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:click click} event of this `sap.ui.vk.OverlayArea`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachClick(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.OverlayArea;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:contextMenu contextMenu} event of this `sap.ui.vk.OverlayArea`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachContextMenu(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.OverlayArea;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:edgeClick edgeClick} event of this `sap.ui.vk.OverlayArea`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachEdgeClick(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.OverlayArea;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:edgeContextMenu edgeContextMenu} event of
         * this `sap.ui.vk.OverlayArea`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachEdgeContextMenu(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.OverlayArea;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:handleClick handleClick} event of this `sap.ui.vk.OverlayArea`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachHandleClick(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.OverlayArea;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:handleContextMenu handleContextMenu} event
         * of this `sap.ui.vk.OverlayArea`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachHandleContextMenu(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.OverlayArea;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:handleMoved handleMoved} event of this `sap.ui.vk.OverlayArea`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachHandleMoved(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.OverlayArea;
        /**
         * Creates a new subclass of class sap.ui.vk.OverlayArea with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:click click} to attached listeners.
         */
        fireClick(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): sap.ui.vk.OverlayArea;
        /**
         * Fires event {@link #event:contextMenu contextMenu} to attached listeners.
         */
        fireContextMenu(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Menu to open
             */
            menu?: sap.ui.unified.Menu;
          }
        ): sap.ui.vk.OverlayArea;
        /**
         * Fires event {@link #event:edgeClick edgeClick} to attached listeners.
         */
        fireEdgeClick(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Index of the clicked edge. The numbering is zero based and the first edge with index 0 starts at the
             * first position in the position array and end at the second.
             */
            index?: number;
          }
        ): sap.ui.vk.OverlayArea;
        /**
         * Fires event {@link #event:edgeContextMenu edgeContextMenu} to attached listeners.
         */
        fireEdgeContextMenu(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Index of the clicked edge. The numbering is zero based and the first edge with index 0 starts at the
             * first position in the position array and end at the second.
             */
            index?: number;
            /**
             * Menu to open
             */
            menu?: sap.ui.unified.Menu;
          }
        ): sap.ui.vk.OverlayArea;
        /**
         * Fires event {@link #event:handleClick handleClick} to attached listeners.
         */
        fireHandleClick(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): sap.ui.vk.OverlayArea;
        /**
         * Fires event {@link #event:handleContextMenu handleContextMenu} to attached listeners.
         */
        fireHandleContextMenu(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Index of the clicked handle. The numbering is zero based.
             */
            index?: number;
            /**
             * Menu to open
             */
            menu?: sap.ui.unified.Menu;
          }
        ): sap.ui.vk.OverlayArea;
        /**
         * Fires event {@link #event:handleMoved handleMoved} to attached listeners.
         */
        fireHandleMoved(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): sap.ui.vk.OverlayArea;
        /**
         * Gets current value of property {@link #getChangeable changeable}.
         *
         * Set to true if OverlayArea is changeable.
         *
         * Default value is `false`.
         */
        getChangeable(): boolean;
        /**
         * Gets current value of property {@link #getColor color}.
         *
         * The fill color of the OverlayArea.
         *
         * Default value is `rgba(200, 50, 50, 0.3)`.
         */
        getColor(): sap.ui.core.CSSColor;
        /**
         * Gets current value of property {@link #getColorBorder colorBorder}.
         *
         * The border color of the OverlayArea.
         *
         * Default value is `rgba(200, 50, 50, 1.0)`.
         */
        getColorBorder(): sap.ui.core.CSSColor;
        /**
         * Gets current value of property {@link #getColorNonSelect colorNonSelect}.
         *
         * The non-select color of the OverlayArea in case non-selection de-highligthing is desired.
         */
        getColorNonSelect(): string;
        /**
         * Gets current value of property {@link #getColorSelect colorSelect}.
         *
         * The select color of the OverlayArea in case selection highligthing is desired.
         */
        getColorSelect(): string;
        /**
         * Gets current value of property {@link #getDeltaColorHot deltaColorHot}.
         *
         * Color or color delta when object is hovered. Color deltas can be declared in the format RHLSA(;;;)
         *
         * Default value is `RHLSA(0;1.3;1.0;1.0)`.
         */
        getDeltaColorHot(): string;
        /**
         * Gets current value of property {@link #getKey key}.
         *
         * Unique identifier for the object. This is optional. If not provided the default identifier sId is used.
         * However, sId is generated if template binding is used and thus it is not stable. Provide the key if the
         * object really needs a unique and stable identifier.
         */
        getKey(): string;
        /**
         * Returns a metadata object for class sap.ui.vk.OverlayArea.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getPosition position}.
         *
         * The position array for the OverlayArea. The format is "x0;y0;0;...;xN,yN,0".
         */
        getPosition(): string;
        /**
         * Gets current value of property {@link #getSelect select}.
         *
         * set to true if the element is selected
         *
         * Default value is `false`.
         */
        getSelect(): boolean;
        /**
         * open the context menu
         */
        openContextMenu(
          /**
           * the context menu to be opened
           */
          oMenu: object
        ): void;
        /**
         * Sets a new value for property {@link #getChangeable changeable}.
         *
         * Set to true if OverlayArea is changeable.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setChangeable(
          /**
           * New value for property `changeable`
           */
          bChangeable: boolean
        ): sap.ui.vk.OverlayArea;
        /**
         * Sets a new value for property {@link #getColor color}.
         *
         * The fill color of the OverlayArea.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `rgba(200, 50, 50, 0.3)`.
         */
        setColor(
          /**
           * New value for property `color`
           */
          sColor: sap.ui.core.CSSColor
        ): sap.ui.vk.OverlayArea;
        /**
         * Sets a new value for property {@link #getColorBorder colorBorder}.
         *
         * The border color of the OverlayArea.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `rgba(200, 50, 50, 1.0)`.
         */
        setColorBorder(
          /**
           * New value for property `colorBorder`
           */
          sColorBorder: sap.ui.core.CSSColor
        ): sap.ui.vk.OverlayArea;
        /**
         * Sets a new value for property {@link #getColorNonSelect colorNonSelect}.
         *
         * The non-select color of the OverlayArea in case non-selection de-highligthing is desired.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setColorNonSelect(
          /**
           * New value for property `colorNonSelect`
           */
          sColorNonSelect: string
        ): sap.ui.vk.OverlayArea;
        /**
         * Sets a new value for property {@link #getColorSelect colorSelect}.
         *
         * The select color of the OverlayArea in case selection highligthing is desired.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setColorSelect(
          /**
           * New value for property `colorSelect`
           */
          sColorSelect: string
        ): sap.ui.vk.OverlayArea;
        /**
         * Sets a new value for property {@link #getDeltaColorHot deltaColorHot}.
         *
         * Color or color delta when object is hovered. Color deltas can be declared in the format RHLSA(;;;)
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `RHLSA(0;1.3;1.0;1.0)`.
         */
        setDeltaColorHot(
          /**
           * New value for property `deltaColorHot`
           */
          sDeltaColorHot: string
        ): sap.ui.vk.OverlayArea;
        /**
         * Sets a new value for property {@link #getKey key}.
         *
         * Unique identifier for the object. This is optional. If not provided the default identifier sId is used.
         * However, sId is generated if template binding is used and thus it is not stable. Provide the key if the
         * object really needs a unique and stable identifier.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setKey(
          /**
           * New value for property `key`
           */
          sKey: string
        ): sap.ui.vk.OverlayArea;
        /**
         * Sets a new value for property {@link #getPosition position}.
         *
         * The position array for the OverlayArea. The format is "x0;y0;0;...;xN,yN,0".
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setPosition(
          /**
           * New value for property `position`
           */
          sPosition: string
        ): sap.ui.vk.OverlayArea;
        /**
         * Sets a new value for property {@link #getSelect select}.
         *
         * set to true if the element is selected
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setSelect(
          /**
           * New value for property `select`
           */
          bSelect: boolean
        ): sap.ui.vk.OverlayArea;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:click click} event of this `sap.ui.vk.OverlayArea`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.OverlayArea` itself.
         *
         * The event is raised when there is a click action on an OverlayArea.
         */
        attachClick(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.OverlayArea` itself
           */
          oListener?: object
        ): sap.ui.vk.OverlayArea;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contextMenu contextMenu} event of this `sap.ui.vk.OverlayArea`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.OverlayArea` itself.
         *
         * The event is raised when there is a right click or a tap and hold action on an OverlayArea.
         */
        attachContextMenu(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.OverlayArea` itself
           */
          oListener?: object
        ): sap.ui.vk.OverlayArea;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:edgeClick edgeClick} event of this `sap.ui.vk.OverlayArea`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.OverlayArea` itself.
         *
         * This event is raised when the edge of an OverlayArea is clicked.
         */
        attachEdgeClick(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.OverlayArea` itself
           */
          oListener?: object
        ): sap.ui.vk.OverlayArea;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:edgeContextMenu edgeContextMenu} event of this
         * `sap.ui.vk.OverlayArea`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.OverlayArea` itself.
         *
         * This event is raised when the edge of an OverlayArea is right clicked.
         */
        attachEdgeContextMenu(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.OverlayArea` itself
           */
          oListener?: object
        ): sap.ui.vk.OverlayArea;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:handleClick handleClick} event of this `sap.ui.vk.OverlayArea`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.OverlayArea` itself.
         *
         * This event is raised when the design handle of a changable OverlayArea is clicked.
         */
        attachHandleClick(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.OverlayArea` itself
           */
          oListener?: object
        ): sap.ui.vk.OverlayArea;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:handleContextMenu handleContextMenu} event of
         * this `sap.ui.vk.OverlayArea`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.OverlayArea` itself.
         *
         * This event is raised when the design handle of a changable OverlayArea is right clicked.
         */
        attachHandleContextMenu(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.OverlayArea` itself
           */
          oListener?: object
        ): sap.ui.vk.OverlayArea;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:handleMoved handleMoved} event of this `sap.ui.vk.OverlayArea`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.OverlayArea` itself.
         *
         * This event is raised when the design handle of a changable OverlayArea is moved.
         */
        attachHandleMoved(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.OverlayArea` itself
           */
          oListener?: object
        ): sap.ui.vk.OverlayArea;
      }
      /**
       * @SINCE 1.52.0
       *
       * Provides the interface for the perspective camera.
       */
      class PerspectiveCamera extends sap.ui.vk.Camera {
        /**
         * Constructor for a new perspective camera.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Creates a new subclass of class sap.ui.vk.PerspectiveCamera with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.Camera.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getFov fov}.
         *
         * Camera frustum field of view in degree
         */
        getFov(): number;
        /**
         * Returns a metadata object for class sap.ui.vk.PerspectiveCamera.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Sets a new value for property {@link #getFov fov}.
         *
         * Camera frustum field of view in degree
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setFov(
          /**
           * New value for property `fov`
           */
          fFov: number
        ): sap.ui.vk.PerspectiveCamera;
      }
      /**
       * @SINCE 1.50.0
       *
       * Shows the progress of a process in a graphical way. To indicate the progress, the inside of the ProgressIndicator
       * is filled with a color. Additionally, a user-defined string can be displayed on the ProgressIndicator.
       */
      class ProgressIndicator extends sap.m.ProgressIndicator {
        /**
         * Constructor for a new ProgressIndicator.
         */
        constructor(
          /**
           * ID for the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: ProgressIndicatorOpts
        );
      }
      /**
       * @SINCE 1.40.0
       *
       * Provides a control for designing redlining shapes.
       */
      class RedlineDesign extends sap.ui.vk.RedlineSurface {
        /**
         * Constructor for a new RedlineDesign.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Attaches event handler `fnFunction` to the {@link #event:elementCreated elementCreated} event of this
         * `sap.ui.vk.RedlineDesign`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.RedlineDesign` itself.
         */
        attachElementCreated(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.RedlineDesign` itself
           */
          oListener?: object
        ): sap.ui.vk.RedlineDesign;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:elementCreated elementCreated} event of this
         * `sap.ui.vk.RedlineDesign`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachElementCreated(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.RedlineDesign;
        /**
         * Creates a new subclass of class sap.ui.vk.RedlineDesign with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.RedlineSurface.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:elementCreated elementCreated} to attached listeners.
         */
        fireElementCreated(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            element?: object;
          }
        ): sap.ui.vk.RedlineDesign;
        /**
         * Returns a metadata object for class sap.ui.vk.RedlineDesign.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Prepares the RedlineDesign control for adding a new instance of {sap.ui.vk.RedlineElement}.
         */
        startAdding(
          /**
           * The redlining element which needs to be added.
           */
          elementInstance: sap.ui.vk.RedlineElement
        ): sap.ui.vk.RedlineDesign;
        /**
         * Stops the mode for adding redlining, which begins when the {@link sap.ui.vk.RedlineDesign#startAdding
         * startAdding} method is called.
         */
        stopAdding(): sap.ui.vk.RedlineDesign;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:elementCreated elementCreated} event of this
         * `sap.ui.vk.RedlineDesign`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.RedlineDesign` itself.
         */
        attachElementCreated(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.RedlineDesign` itself
           */
          oListener?: object
        ): sap.ui.vk.RedlineDesign;
      }
      /**
       * @SINCE 1.40.0
       *
       * Provides a base class for redline elements.
       */
      class RedlineElement extends sap.ui.core.Element {
        /**
         * Base class for redline elements such as {sap.ui.vk.RedlineElementRectangle}, {sap.ui.vk.RedlineElementEllipse},
         * {sap.ui.vk.RedlineElementFreehand}, {sap.ui.vk.RedlineElementText}.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Exports all the relevant data contained in the redline element to a JSON-like object.
         */
        exportJSON(): object;
        /**
         * Exports all the relevant data contained in the redline element to an SVG shape element.
         */
        exportSVG(): object;
        /**
         * Creates a new subclass of class sap.ui.vk.RedlineElement with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getElementId elementId}.
         */
        getElementId(): string;
        /**
         * Gets current value of property {@link #getHalo halo}.
         *
         * Default value is `false`.
         */
        getHalo(): boolean;
        /**
         * Returns a metadata object for class sap.ui.vk.RedlineElement.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getOpacity opacity}.
         *
         * Default value is `1`.
         */
        getOpacity(): number;
        /**
         * Gets current value of property {@link #getOriginX originX}.
         *
         * Default value is `0`.
         */
        getOriginX(): number;
        /**
         * Gets current value of property {@link #getOriginY originY}.
         *
         * Default value is `0`.
         */
        getOriginY(): number;
        /**
         * Gets current value of property {@link #getStrokeColor strokeColor}.
         *
         * Default value is `#e6600d`.
         */
        getStrokeColor(): sap.ui.core.CSSColor;
        /**
         * Gets current value of property {@link #getStrokeDashArray strokeDashArray}.
         *
         * Default value is `[]`.
         */
        getStrokeDashArray(): number[];
        /**
         * Gets current value of property {@link #getStrokeWidth strokeWidth}.
         *
         * Default value is `2`.
         */
        getStrokeWidth(): number;
        /**
         * Imports data from a JSON-like object into the redline element.
         */
        importJSON(
          /**
           * Relevant data that can be used to restore the redline element.
           */
          json: object
        ): sap.ui.vk.RedlineElement;
        /**
         * Imports data from an SVG shape element into the redline element.
         */
        importSVG(
          /**
           * SVG shape element that can be used to restore the redline element.
           */
          svg: object
        ): sap.ui.vk.RedlineElement;
        /**
         * This method is called by the RenderManager. The current method is empty because this is a base class
         * and the classes extending this class have their own implementations of the `render` method.
         */
        render(
          /**
           * Instance of RenderManager.
           */
          renderManager: sap.ui.core.RenderManager
        ): void;
        /**
         * This method is called by the RenderManager. The current method is empty because this is a base class
         * and the classes extending this class have their own implementations of the `render` method.
         */
        renderElement(
          /**
           * Instance of RenderManager.
           */
          renderManager: sap.ui.core.RenderManager,
          /**
           * If set to true then halo effect is rendered, otherwise this will do normal object rendering
           */
          halo: boolean
        ): void;
        /**
         * Sets a new value for property {@link #getElementId elementId}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setElementId(
          /**
           * New value for property `elementId`
           */
          sElementId: string
        ): sap.ui.vk.RedlineElement;
        /**
         * Sets a new value for property {@link #getHalo halo}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setHalo(
          /**
           * New value for property `halo`
           */
          bHalo: boolean
        ): sap.ui.vk.RedlineElement;
        /**
         * Sets a new value for property {@link #getOpacity opacity}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `1`.
         */
        setOpacity(
          /**
           * New value for property `opacity`
           */
          fOpacity: number
        ): sap.ui.vk.RedlineElement;
        /**
         * Sets a new value for property {@link #getOriginX originX}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setOriginX(
          /**
           * New value for property `originX`
           */
          fOriginX: number
        ): sap.ui.vk.RedlineElement;
        /**
         * Sets a new value for property {@link #getOriginY originY}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setOriginY(
          /**
           * New value for property `originY`
           */
          fOriginY: number
        ): sap.ui.vk.RedlineElement;
        /**
         * Sets a new value for property {@link #getStrokeColor strokeColor}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `#e6600d`.
         */
        setStrokeColor(
          /**
           * New value for property `strokeColor`
           */
          sStrokeColor: sap.ui.core.CSSColor
        ): sap.ui.vk.RedlineElement;
        /**
         * Sets a new value for property {@link #getStrokeDashArray strokeDashArray}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `[]`.
         */
        setStrokeDashArray(
          /**
           * New value for property `strokeDashArray`
           */
          sStrokeDashArray: number[]
        ): sap.ui.vk.RedlineElement;
        /**
         * Sets a new value for property {@link #getStrokeWidth strokeWidth}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `2`.
         */
        setStrokeWidth(
          /**
           * New value for property `strokeWidth`
           */
          fStrokeWidth: number
        ): sap.ui.vk.RedlineElement;
      }
      /**
       * @SINCE 1.40.0
       *
       * Provides a control for creating ellipse redline elements.
       */
      class RedlineElementEllipse extends sap.ui.vk.RedlineElement {
        /**
         * Redline element control for ellipse.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Changes the current radiusX and radiusY of the ellipse redline element by a factor which gets passed
         * as parameter.
         */
        applyZoom(
          /**
           * The factor to be applied to the current radiusX and radiusY.
           */
          zoomBy: number
        ): sap.ui.vk.RedlineElementEllipse;
        /**
         * Changes the current radiusX and radiusY of the ellipse redline element with the values passed as parameters.
         */
        edit(
          /**
           * The value in pixels that will be set as radiusX for the ellipse.
           */
          offsetX: number,
          /**
           * The value in pixels that will be set as radiusY for the ellipse.
           */
          offsetY: number
        ): sap.ui.vk.RedlineElementEllipse;
        /**
         * Exports all the relevant data contained in the ellipse redline element to a JSON object.
         */
        // @ts-ignore
        exportJSON(): object;
        /**
         * Exports all the relevant data contained in the ellipse redline element to an SVG ellipse element.
         */
        // @ts-ignore
        exportSVG(): object;
        /**
         * Creates a new subclass of class sap.ui.vk.RedlineElementEllipse with name `sClassName` and enriches it
         * with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.RedlineElement.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getFillColor fillColor}.
         *
         * Default value is `rgba(0, 0, 0, 0)`.
         */
        getFillColor(): sap.ui.core.CSSColor;
        /**
         * Returns a metadata object for class sap.ui.vk.RedlineElementEllipse.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getRadiusX radiusX}.
         *
         * Default value is `0.0001`.
         */
        getRadiusX(): number;
        /**
         * Gets current value of property {@link #getRadiusY radiusY}.
         *
         * Default value is `0.0001`.
         */
        getRadiusY(): number;
        /**
         * Imports data from a JSON object into the ellipse redline element.
         */
        // @ts-ignore
        importJSON(
          /**
           * Relevant data used to restore the ellipse redline element.
           */
          json: object
        ): sap.ui.vk.RedlineElementEllipse;
        /**
         * Imports data from an SVG ellipse element into the ellipse redline element.
         */
        // @ts-ignore
        importSVG(
          /**
           * SVG ellipse element used to restore the ellipse redline element.
           */
          svg: object
        ): sap.ui.vk.RedlineElementEllipse;
        /**
         * Sets a new value for property {@link #getFillColor fillColor}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `rgba(0, 0, 0, 0)`.
         */
        setFillColor(
          /**
           * New value for property `fillColor`
           */
          sFillColor: sap.ui.core.CSSColor
        ): sap.ui.vk.RedlineElementEllipse;
        /**
         * Sets a new value for property {@link #getRadiusX radiusX}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0.0001`.
         */
        setRadiusX(
          /**
           * New value for property `radiusX`
           */
          fRadiusX: number
        ): sap.ui.vk.RedlineElementEllipse;
        /**
         * Sets a new value for property {@link #getRadiusY radiusY}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0.0001`.
         */
        setRadiusY(
          /**
           * New value for property `radiusY`
           */
          fRadiusY: number
        ): sap.ui.vk.RedlineElementEllipse;
      }
      /**
       * @SINCE 1.40.0
       *
       * Provides a control for creating freehand redline elements.
       */
      class RedlineElementFreehand extends sap.ui.vk.RedlineElement {
        /**
         * Redline element control for freehand.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Creates a string path based on the current `path` property. The string path can then be used to set the
         * "d" attribute of an SVG  element.
         */
        _getProcessedPath(): string;
        /**
         * Applies a zoom factor to the current freehand redline element.
         */
        applyZoom(
          /**
           * The factor to be applied to the current freehand drawing.
           */
          zoomBy: number
        ): sap.ui.vk.RedlineElementFreehand;
        /**
         * Adds a new point to the current freehand path.
         */
        edit(
          /**
           * The value in pixels that will be set as the origin of the x-coordinate for a new point in the freehand
           * path.
           */
          offsetX: number,
          /**
           * The value in pixels that will be set as the origin of the y-coordinate for a new point in the freehand
           * path.
           */
          offsetY: number
        ): sap.ui.vk.RedlineElementFreehand;
        /**
         * Exports all the relevant data contained in the freehand redline element to a JSON object.
         */
        // @ts-ignore
        exportJSON(): object;
        /**
         * Exports all the relevant data contained in the freehand redline element to an SVG path element.
         */
        // @ts-ignore
        exportSVG(): object;
        /**
         * Creates a new subclass of class sap.ui.vk.RedlineElementFreehand with name `sClassName` and enriches
         * it with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.RedlineElement.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.ui.vk.RedlineElementFreehand.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getPath path}.
         */
        getPath(): number[];
        /**
         * Imports data from JSON into the redline element.
         */
        // @ts-ignore
        importJSON(
          /**
           * Relevant data that can be used to restore the freehand redline element.
           */
          json: object
        ): sap.ui.vk.RedlineElementFreehand;
        /**
         * Imports data from SVG path element into the freehand redline element.
         */
        // @ts-ignore
        importSVG(
          /**
           * SVG path element that can be used to restore the freehand redline element.
           */
          svg: object
        ): sap.ui.vk.RedlineElementFreehand;
        /**
         * Sets a new value for property {@link #getPath path}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setPath(
          /**
           * New value for property `path`
           */
          sPath: number[]
        ): sap.ui.vk.RedlineElementFreehand;
      }
      /**
       * @SINCE 1.40.0
       *
       * Provides a control for creating line redline elements.
       */
      class RedlineElementLine extends sap.ui.vk.RedlineElement {
        /**
         * Redline element control for line.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Changes the current deltaX and deltaY of the line redline element by a factor which gets passed as parameter.
         */
        applyZoom(
          /**
           * The factor to be applied to the current deltaX and deltaY.
           */
          zoomBy: number
        ): sap.ui.vk.RedlineElementLine;
        /**
         * Changes the current deltaX and deltaY of the line redline element with the values passed as parameters.
         */
        edit(
          /**
           * The value in pixels that will be set as deltaX for the line.
           */
          offsetX: number,
          /**
           * The value in pixels that will be set as deltaY for the line.
           */
          offsetY: number
        ): sap.ui.vk.RedlineElementLine;
        /**
         * Exports all the relevant data contained in the line redline element to a JSON object.
         */
        // @ts-ignore
        exportJSON(): object;
        /**
         * Exports all the relevant data contained in the line redline element to an SVG line element.
         */
        // @ts-ignore
        exportSVG(): object;
        /**
         * Creates a new subclass of class sap.ui.vk.RedlineElementLine with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.RedlineElement.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getDeltaX deltaX}.
         *
         * Default value is `0`.
         */
        getDeltaX(): number;
        /**
         * Gets current value of property {@link #getDeltaY deltaY}.
         *
         * Default value is `0`.
         */
        getDeltaY(): number;
        /**
         * Returns a metadata object for class sap.ui.vk.RedlineElementLine.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Imports data from a JSON object into the line redline element.
         */
        // @ts-ignore
        importJSON(
          /**
           * Relevant data used to restore the line redline element.
           */
          json: object
        ): sap.ui.vk.RedlineElementLine;
        /**
         * Imports data from an SVG line element into the line redline element.
         */
        // @ts-ignore
        importSVG(
          /**
           * SVG line element used to restore the line redline element.
           */
          svg: object
        ): sap.ui.vk.RedlineElementLine;
        /**
         * Sets a new value for property {@link #getDeltaX deltaX}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setDeltaX(
          /**
           * New value for property `deltaX`
           */
          fDeltaX: number
        ): sap.ui.vk.RedlineElementLine;
        /**
         * Sets a new value for property {@link #getDeltaY deltaY}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setDeltaY(
          /**
           * New value for property `deltaY`
           */
          fDeltaY: number
        ): sap.ui.vk.RedlineElementLine;
      }
      /**
       * @SINCE 1.40.0
       *
       * Provides a control for creating rectangle redline elements.
       */
      class RedlineElementRectangle extends sap.ui.vk.RedlineElement {
        /**
         * Redline element control for rectangle.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Changes the current width and height of the rectangle redline element by a factor which gets passed as
         * parameter.
         */
        applyZoom(
          /**
           * The factor to be applied to the current width and height.
           */
          zoomBy: number
        ): sap.ui.vk.RedlineElementRectangle;
        /**
         * Changes the current width and height of the rectangle redline element with the values passed as parameters.
         */
        edit(
          /**
           * The value in pixels that will be set as the width for the rectangle redline element.
           */
          offsetX: number,
          /**
           * The value in pixels that will be set as the height for the rectangle redline element.
           */
          offsetY: number
        ): sap.ui.vk.RedlineElementRectangle;
        /**
         * Exports all the relevant data contained in the rectangle redline element to a JSON object.
         */
        // @ts-ignore
        exportJSON(): object;
        /**
         * Exports all the relevant data contained in the rectangle redline element to an SVG rect element.
         */
        // @ts-ignore
        exportSVG(): object;
        /**
         * Creates a new subclass of class sap.ui.vk.RedlineElementRectangle with name `sClassName` and enriches
         * it with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.RedlineElement.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getFillColor fillColor}.
         *
         * Default value is `rgba(0, 0, 0, 0)`.
         */
        getFillColor(): sap.ui.core.CSSColor;
        /**
         * Gets current value of property {@link #getHeight height}.
         *
         * Default value is `0.001`.
         */
        getHeight(): number;
        /**
         * Returns a metadata object for class sap.ui.vk.RedlineElementRectangle.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getWidth width}.
         *
         * Default value is `0.001`.
         */
        getWidth(): number;
        /**
         * Imports data from a JSON object into the rectangle redline element.
         */
        // @ts-ignore
        importJSON(
          /**
           * Relevant data used to restore the rectangle redline element.
           */
          json: object
        ): sap.ui.vk.RedlineElementRectangle;
        /**
         * Imports data from an SVG rect element into the rectangle redline element.
         */
        // @ts-ignore
        importSVG(
          /**
           * SVG rect element used to restore the rectangle redline element.
           */
          svg: object
        ): sap.ui.vk.RedlineElementRectangle;
        /**
         * Sets a new value for property {@link #getFillColor fillColor}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `rgba(0, 0, 0, 0)`.
         */
        setFillColor(
          /**
           * New value for property `fillColor`
           */
          sFillColor: sap.ui.core.CSSColor
        ): sap.ui.vk.RedlineElementRectangle;
        /**
         * Sets a new value for property {@link #getHeight height}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0.001`.
         */
        setHeight(
          /**
           * New value for property `height`
           */
          fHeight: number
        ): sap.ui.vk.RedlineElementRectangle;
        /**
         * Sets a new value for property {@link #getWidth width}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0.001`.
         */
        setWidth(
          /**
           * New value for property `width`
           */
          fWidth: number
        ): sap.ui.vk.RedlineElementRectangle;
      }
      /**
       * @SINCE 1.40.0
       *
       * Provides a control for creating text redline elements.
       */
      class RedlineElementText extends sap.ui.vk.RedlineElement {
        /**
         * Redline element control for text.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Changes the current font size of the text redline element by a factor which gets passed as parameter.
         */
        applyZoom(
          /**
           * The factor to be applied to the current font size.
           */
          zoomBy: number
        ): sap.ui.vk.RedlineElementText;
        /**
         * Changes the current originX and originY of the text redline element with the values passed as parameters.
         */
        edit(
          /**
           * The value in pixels that will be set as originX for the text.
           */
          posX: number,
          /**
           * The value in pixels that will be set as originY for the text.
           */
          posY: number
        ): sap.ui.vk.RedlineElementText;
        /**
         * Exports all the relevant data contained in the text redline element to a JSON object.
         */
        // @ts-ignore
        exportJSON(): object;
        /**
         * Exports all the relevant data contained in the text redline element to an SVG text element.
         */
        // @ts-ignore
        exportSVG(): object;
        /**
         * Creates a new subclass of class sap.ui.vk.RedlineElementText with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.RedlineElement.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getFillColor fillColor}.
         *
         * Default value is `rgba(0,0,0,0)`.
         */
        getFillColor(): sap.ui.core.CSSColor;
        /**
         * Gets current value of property {@link #getFont font}.
         *
         * Default value is `empty string`.
         */
        getFont(): string;
        /**
         * Gets current value of property {@link #getFontSize fontSize}.
         *
         * Default value is `32`.
         */
        getFontSize(): number;
        /**
         * Returns a metadata object for class sap.ui.vk.RedlineElementText.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getText text}.
         *
         * Default value is `Text`.
         */
        getText(): string;
        /**
         * Imports data from a JSON object into the text redline element.
         */
        // @ts-ignore
        importJSON(
          /**
           * Relevant data used to restore the text redline element.
           */
          json: object
        ): sap.ui.vk.RedlineElementText;
        /**
         * Imports data from an SVG text element into the text redline element.
         */
        // @ts-ignore
        importSVG(
          /**
           * SVG text element used to restore the text redline element.
           */
          element: object
        ): sap.ui.vk.RedlineElementText;
        /**
         * Sets a new value for property {@link #getFillColor fillColor}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `rgba(0,0,0,0)`.
         */
        setFillColor(
          /**
           * New value for property `fillColor`
           */
          sFillColor: sap.ui.core.CSSColor
        ): sap.ui.vk.RedlineElementText;
        /**
         * Sets a new value for property {@link #getFont font}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `empty string`.
         */
        setFont(
          /**
           * New value for property `font`
           */
          sFont: string
        ): sap.ui.vk.RedlineElementText;
        /**
         * Sets a new value for property {@link #getFontSize fontSize}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `32`.
         */
        setFontSize(
          /**
           * New value for property `fontSize`
           */
          fFontSize: number
        ): sap.ui.vk.RedlineElementText;
        /**
         * Sets a new value for property {@link #getText text}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `Text`.
         */
        setText(
          /**
           * New value for property `text`
           */
          sText: string
        ): sap.ui.vk.RedlineElementText;
      }
      /**
       * @SINCE 1.40.0
       *
       * Provides a bass class control for redlining.
       */
      class RedlineSurface extends sap.ui.core.Control {
        /**
         * Constructor for a new RedlineSurface.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Adds some redlineElement to the aggregation {@link #getRedlineElements redlineElements}.
         */
        addRedlineElement(
          /**
           * The redlineElement to add; if empty, nothing is inserted
           */
          oRedlineElement: sap.ui.vk.RedlineElement
        ): sap.ui.vk.RedlineSurface;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:pan pan} event of this `sap.ui.vk.RedlineSurface`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.RedlineSurface` itself.
         */
        attachPan(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.RedlineSurface` itself
           */
          oListener?: object
        ): sap.ui.vk.RedlineSurface;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:zoom zoom} event of this `sap.ui.vk.RedlineSurface`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.RedlineSurface` itself.
         */
        attachZoom(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.RedlineSurface` itself
           */
          oListener?: object
        ): sap.ui.vk.RedlineSurface;
        /**
         * Destroys all the redlineElements in the aggregation {@link #getRedlineElements redlineElements}.
         */
        destroyRedlineElements(): sap.ui.vk.RedlineSurface;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:pan pan} event of this `sap.ui.vk.RedlineSurface`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachPan(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.RedlineSurface;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:zoom zoom} event of this `sap.ui.vk.RedlineSurface`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachZoom(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.RedlineSurface;
        /**
         * Exports all the current redline elements as an array of JSON objects.
         */
        exportJSON(): object[];
        /**
         * Exports all the current redline elements as an array of SVG objects.
         */
        exportSVG(): object[];
        /**
         * Creates a new subclass of class sap.ui.vk.RedlineSurface with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:pan pan} to attached listeners.
         */
        firePan(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            deltaX?: number;

            deltaY?: number;
          }
        ): sap.ui.vk.RedlineSurface;
        /**
         * Fires event {@link #event:zoom zoom} to attached listeners.
         */
        fireZoom(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            originX?: number;

            originY?: number;

            zoomFactor?: number;
          }
        ): sap.ui.vk.RedlineSurface;
        /**
         * Returns a metadata object for class sap.ui.vk.RedlineSurface.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getPanningRatio panningRatio}.
         *
         * Default value is `1`.
         */
        getPanningRatio(): number;
        /**
         * Gets content of aggregation {@link #getRedlineElements redlineElements}.
         */
        getRedlineElements(): sap.ui.vk.RedlineElement[];
        /**
         * Gets current value of property {@link #getVirtualLeft virtualLeft}.
         */
        getVirtualLeft(): number;
        /**
         * Gets current value of property {@link #getVirtualSideLength virtualSideLength}.
         */
        getVirtualSideLength(): number;
        /**
         * Gets current value of property {@link #getVirtualTop virtualTop}.
         */
        getVirtualTop(): number;
        /**
         * Iterates through all JSON objects from the array passed as parameter, and creates and restores the redline
         * elements serialized in the array.
         */
        importJSON(
          /**
           * An array of serialized redline elements.
           */
          jsonElements: object[]
        ): sap.ui.vk.RedlineSurface;
        /**
         * Iterates through all SVG objects from the array passed as parameter, and creates and restores the redline
         * elements in the array.
         */
        importSVG(
          /**
           * An array of redline elements in SVG format.
           */
          svg: object[]
        ): sap.ui.vk.RedlineSurface;
        /**
         * Checks for the provided `sap.ui.vk.RedlineElement` in the aggregation {@link #getRedlineElements redlineElements}.
         * and returns its index if found or -1 otherwise.
         */
        indexOfRedlineElement(
          /**
           * The redlineElement whose index is looked for
           */
          oRedlineElement: sap.ui.vk.RedlineElement
        ): number;
        /**
         * Inserts a redlineElement into the aggregation {@link #getRedlineElements redlineElements}.
         */
        insertRedlineElement(
          /**
           * The redlineElement to insert; if empty, nothing is inserted
           */
          oRedlineElement: sap.ui.vk.RedlineElement,
          /**
           * The `0`-based index the redlineElement should be inserted at; for a negative value of `iIndex`, the redlineElement
           * is inserted at position 0; for a value greater than the current size of the aggregation, the redlineElement
           * is inserted at the last position
           */
          iIndex: number
        ): sap.ui.vk.RedlineSurface;
        /**
         * Removes all the controls from the aggregation {@link #getRedlineElements redlineElements}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllRedlineElements(): sap.ui.vk.RedlineElement[];
        /**
         * Removes a redlineElement from the aggregation {@link #getRedlineElements redlineElements}.
         */
        removeRedlineElement(
          /**
           * The redlineElement to remove or its index or id
           */
          vRedlineElement: number | string | sap.ui.vk.RedlineElement
        ): sap.ui.vk.RedlineElement;
        /**
         * Sets a new value for property {@link #getPanningRatio panningRatio}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `1`.
         */
        setPanningRatio(
          /**
           * New value for property `panningRatio`
           */
          fPanningRatio: number
        ): sap.ui.vk.RedlineSurface;
        /**
         * Sets a new value for property {@link #getVirtualLeft virtualLeft}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setVirtualLeft(
          /**
           * New value for property `virtualLeft`
           */
          fVirtualLeft: number
        ): sap.ui.vk.RedlineSurface;
        /**
         * Sets a new value for property {@link #getVirtualSideLength virtualSideLength}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setVirtualSideLength(
          /**
           * New value for property `virtualSideLength`
           */
          fVirtualSideLength: number
        ): sap.ui.vk.RedlineSurface;
        /**
         * Sets a new value for property {@link #getVirtualTop virtualTop}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setVirtualTop(
          /**
           * New value for property `virtualTop`
           */
          fVirtualTop: number
        ): sap.ui.vk.RedlineSurface;
        /**
         * Updates the panning ratio by making calculations based on virtual viewport size and actual viewport size.
         */
        updatePanningRatio(): sap.ui.vk.RedlineSurface;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:pan pan} event of this `sap.ui.vk.RedlineSurface`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.RedlineSurface` itself.
         */
        attachPan(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.RedlineSurface` itself
           */
          oListener?: object
        ): sap.ui.vk.RedlineSurface;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:zoom zoom} event of this `sap.ui.vk.RedlineSurface`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.RedlineSurface` itself.
         */
        attachZoom(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.RedlineSurface` itself
           */
          oListener?: object
        ): sap.ui.vk.RedlineSurface;
      }
      /**
       * Provides the interface for the 3D model.
       *
       * The objects of this class should not be created directly. They should be created via {@link sap.ui.vk.ContentConnector
       * sap.ui.vk.ContentConnector}.
       */
      // @ts-ignore - static 'getMetadata' inheritance issue
      class Scene extends sap.ui.base.ManagedObject {
        /**
         * Constructor for a new Scene.
         *
         * The objects of this class should not be created directly. They should be created via {@link sap.ui.vk.ContentConnector
         * sap.ui.vk.ContentConnector}.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Create an animation sequence
         */
        createAnimationSequence(
          /**
           * The unique id of sequence
           */
          id: string,
          /**
           * The name of sequence
           */
          name: string,
          /**
           * duration of sequence
           */
          duration: number
        ): sap.ui.vk.AnimationSequence;
        /**
         * Creates a new subclass of class sap.ui.vk.Scene with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Get animation sequence
         */
        getAnimationSequence(
          /**
           * The unique id of sequence
           */
          id: string
        ): sap.ui.vk.AnimationSequence;
        /**
         * Gets the default node hierarchy in the Scene object.
         */
        getDefaultNodeHierarchy(): sap.ui.vk.NodeHierarchy;
        /**
         * Gets current value of property {@link #getDoubleSided doubleSided}.
         *
         * Enables or disables double-sided materials
         *
         * Default value is `false`.
         */
        getDoubleSided(): boolean;
        /**
         * Gets the unique ID of the Scene object.
         */
        // @ts-ignore
        getId(): string;
        /**
         * Get initial view
         */
        getInitialView(): sap.ui.vk.View;
        /**
         * Returns a metadata object for class sap.ui.vk.Scene.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets the scene reference that this Scene object wraps.
         */
        getSceneRef(): any;
        /**
         * Sets a new value for property {@link #getDoubleSided doubleSided}.
         *
         * Enables or disables double-sided materials
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setDoubleSided(
          /**
           * New value for property `doubleSided`
           */
          bDoubleSided: boolean
        ): sap.ui.vk.Scene;
        /**
         * Set initial view
         */
        setInitialView(
          /**
           * intial view
           */
          view: sap.ui.vk.View
        ): void;
      }
      /**
       * @SINCE 1.32.0
       *
       * Provides a hierarchical view of all the nodes in a given scene in table format.
       */
      class SceneTree extends sap.ui.core.Control {
        /**
         * Constructor for a new SceneTree.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: SceneTreeOpts
        );

        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentChanged contentChanged} event of this
         * `sap.ui.vk.SceneTree`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.SceneTree` itself.
         *
         * This event will be fired when a scene tree content is replaced.
         */
        attachContentChanged(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.SceneTree` itself
           */
          oListener?: object
        ): sap.ui.vk.SceneTree;
        /**
         * Destroys the treeTable in the aggregation {@link #getTreeTable treeTable}.
         */
        destroyTreeTable(): sap.ui.vk.SceneTree;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:contentChanged contentChanged} event of this
         * `sap.ui.vk.SceneTree`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachContentChanged(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.SceneTree;
        /**
         * Creates a new subclass of class sap.ui.vk.SceneTree with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:contentChanged contentChanged} to attached listeners.
         */
        fireContentChanged(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): sap.ui.vk.SceneTree;
        /**
         * ID of the element which is the current target of the association {@link #getContentConnector contentConnector},
         * or `null`.
         */
        getContentConnector(): sap.ui.core.ID;
        /**
         * Returns a metadata object for class sap.ui.vk.SceneTree.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getShowSearchField showSearchField}.
         *
         * Default value is `true`.
         */
        getShowSearchField(): boolean;
        /**
         * Gets current value of property {@link #getShowTitle showTitle}.
         *
         * Default value is `true`.
         */
        getShowTitle(): boolean;
        /**
         * Gets current value of property {@link #getTitle title}.
         *
         * Default value is `getResourceBundle().getText("SCENETREE_TITLE")`.
         */
        getTitle(): string;
        /**
         * Gets content of aggregation {@link #getTreeTable treeTable}.
         */
        getTreeTable(): sap.ui.table.TreeTable;
        /**
         * ID of the element which is the current target of the association {@link #getViewStateManager viewStateManager},
         * or `null`.
         */
        getViewStateManager(): sap.ui.core.ID;
        /**
         * Sets the associated {@link #getContentConnector contentConnector}.
         */
        setContentConnector(
          /**
           * ID of an element which becomes the new target of this contentConnector association; alternatively, an
           * element instance may be given
           */
          oContentConnector: sap.ui.core.ID | sap.ui.vk.ContentConnector
        ): sap.ui.vk.SceneTree;
        /**
         * Sets a new value for property {@link #getShowSearchField showSearchField}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setShowSearchField(
          /**
           * New value for property `showSearchField`
           */
          bShowSearchField: boolean
        ): sap.ui.vk.SceneTree;
        /**
         * Sets a new value for property {@link #getShowTitle showTitle}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setShowTitle(
          /**
           * New value for property `showTitle`
           */
          bShowTitle: boolean
        ): sap.ui.vk.SceneTree;
        /**
         * Sets a new value for property {@link #getTitle title}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `getResourceBundle().getText("SCENETREE_TITLE")`.
         */
        setTitle(
          /**
           * New value for property `title`
           */
          sTitle: string
        ): sap.ui.vk.SceneTree;
        /**
         * Sets the aggregated {@link #getTreeTable treeTable}.
         */
        setTreeTable(
          /**
           * The treeTable to set
           */
          oTreeTable: sap.ui.table.TreeTable
        ): sap.ui.vk.SceneTree;
        /**
         * Sets the associated {@link #getViewStateManager viewStateManager}.
         */
        setViewStateManager(
          /**
           * ID of an element which becomes the new target of this viewStateManager association; alternatively, an
           * element instance may be given
           */
          oViewStateManager: sap.ui.core.ID | sap.ui.vk.ViewStateManager
        ): sap.ui.vk.SceneTree;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentChanged contentChanged} event of this
         * `sap.ui.vk.SceneTree`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.SceneTree` itself.
         *
         * This event will be fired when a scene tree content is replaced.
         */
        attachContentChanged(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.SceneTree` itself
           */
          oListener?: object
        ): sap.ui.vk.SceneTree;
      }
      /**
       * @SINCE 1.32.0
       *
       * Enables capabilities for navigating and activating procedures and steps contained in a single 3D scene.
       */
      class StepNavigation extends sap.ui.core.Control {
        /**
         * Constructor for a new StepNavigation.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new control. This ID is generated automatically if no ID is provided.
           */
          sId?: string,
          /**
           * Initial settings for the new Step Navigation control.
           */
          mSettings?: StepNavigationOpts
        );

        /**
         * Attaches event handler `fnFunction` to the {@link #event:resize resize} event of this `sap.ui.vk.StepNavigation`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.StepNavigation` itself.
         */
        attachResize(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.StepNavigation` itself
           */
          oListener?: object
        ): sap.ui.vk.StepNavigation;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:stepChanged stepChanged} event of this `sap.ui.vk.StepNavigation`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.StepNavigation` itself.
         *
         * Raised each time a step starts, changes, or finishes.
         */
        attachStepChanged(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.StepNavigation` itself
           */
          oListener?: object
        ): sap.ui.vk.StepNavigation;
        /**
         * Clears the content of the Step Navigation control.
         */
        clear(): boolean;
        /**
         * Destroys the layout in the aggregation {@link #getLayout layout}.
         */
        destroyLayout(): sap.ui.vk.StepNavigation;
        /**
         * Destroys the procedureItemTemplate in the aggregation {@link #getProcedureItemTemplate procedureItemTemplate}.
         */
        destroyProcedureItemTemplate(): sap.ui.vk.StepNavigation;
        /**
         * Destroys the stepInfoPopup in the aggregation {@link #getStepInfoPopup stepInfoPopup}.
         */
        destroyStepInfoPopup(): sap.ui.vk.StepNavigation;
        /**
         * Destroys the thumbnailsContainer in the aggregation {@link #getThumbnailsContainer thumbnailsContainer}.
         */
        destroyThumbnailsContainer(): sap.ui.vk.StepNavigation;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:resize resize} event of this `sap.ui.vk.StepNavigation`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachResize(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.StepNavigation;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:stepChanged stepChanged} event of this `sap.ui.vk.StepNavigation`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachStepChanged(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.StepNavigation;
        /**
         * Creates a new subclass of class sap.ui.vk.StepNavigation with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:resize resize} to attached listeners.
         */
        fireResize(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            oldSize?: object;

            size?: object;
          }
        ): sap.ui.vk.StepNavigation;
        /**
         * Fires event {@link #event:stepChanged stepChanged} to attached listeners.
         */
        fireStepChanged(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * The ID of the rendering client that raised the event.
             */
            clientId?: object;
            /**
             * The type of sap.ve.dvl.DVLSTEPEVENT that has been raised; for example, DVLSTEPEVENT_FINISHED, DVLSTEPEVENT_SWITCHED,
             * DVLSTEPEVENT_STARTED.
             */
            type?: object;
            /**
             * The ID of the step affected by this stepId event.
             */
            stepId?: object;
          }
        ): sap.ui.vk.StepNavigation;
        /**
         * ID of the element which is the current target of the association {@link #getContentConnector contentConnector},
         * or `null`.
         */
        getContentConnector(): sap.ui.core.ID;
        /**
         * Gets current value of property {@link #getHeight height}.
         *
         * Height of the Step Navigation control.
         *
         * Default value is `100%`.
         */
        getHeight(): sap.ui.core.CSSSize;
        /**
         * Gets content of aggregation {@link #getLayout layout}.
         *
         * sap.m.Toolbar used to render the entire Step Navigation control's content.
         */
        getLayout(): sap.m.Toolbar;
        /**
         * Returns a metadata object for class sap.ui.vk.StepNavigation.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Cycles through steps and procedures for the lastLoadedScene and returns the step that follows after the
         * currentStepId.
         */
        getNextStep(
          /**
           * Optional integer representing the index of the target procedure in the procedures list.
           */
          procedureIndex?: number
        ): JSON;
        /**
         * Cycles through steps and procedures for the last loaded scene (`lastLoadedScene`), and returns the step
         * preceding the current step (currentStepId.
         */
        getPreviousStep(
          /**
           * Optional integer representing the index of the target procedure in the procedures list.
           */
          procedureIndex?: number
        ): JSON;
        /**
         * Gets content of aggregation {@link #getProcedureItemTemplate procedureItemTemplate}.
         *
         * Template control for Procedure items.
         */
        getProcedureItemTemplate(): sap.ui.core.Item;
        /**
         * Returns the procedures list with steps for the current scene, and appends base64 data as thumbnailData
         * and an image type as thumbnailType.
         */
        getProceduresAndSteps(): JSON;
        /**
         * Gets current value of property {@link #getSettings settings}.
         *
         * Managed settings and properties for Step Navigation events.
         */
        getSettings(): object;
        /**
         * Gets current value of property {@link #getShowStepInfo showStepInfo}.
         *
         * Indicates that the Step Navigation control should display a popup containing information around the step
         * that is playing. If set to `true`, then the popup is rendered. If set to `false`, the popup is hidden.
         *
         * Default value is `false`.
         */
        getShowStepInfo(): boolean;
        /**
         * Gets current value of property {@link #getShowThumbnails showThumbnails}.
         *
         * Indicates that the Step Navigation control should display thumbnails. If set to `true`, then thumbnails
         * are rendered. If set to `false`, then thumbnails are hidden.
         *
         * Default value is `true`.
         */
        getShowThumbnails(): boolean;
        /**
         * Gets current value of property {@link #getShowToolbar showToolbar}.
         *
         * Indicates that the Step Navigation control should display a toolbar. If set to `true`, then the toolbar
         * is rendered. If set to `false`, then the toolbar is hidden.
         *
         * Default value is `true`.
         */
        getShowToolbar(): boolean;
        /**
         * Gets a step based on a positive or negative integer, which is used as an index relative to the index
         * of the current step. An index value of `0` can be used to retrieve the details of the current step.
         */
        getStep(
          /**
           * Positive or negative integer representing the number to add or subtract from the index of the current
           * step to return the desired step; for example, //next 1, current 0, previous -1
           */
          relIndex: number,
          /**
           * Optional integer representing the index of the target procedure in the procedures list.
           */
          procedureIndex: number,
          /**
           * The ID of the step that we want to retrieve.
           */
          specificStepId: string
        ): JSON;
        /**
         * Gets content of aggregation {@link #getStepInfoPopup stepInfoPopup}.
         *
         * sap.ui.core.Popup used to render step information in a popup.
         */
        getStepInfoPopup(): sap.ui.core.Control;
        /**
         * Gets content of aggregation {@link #getThumbnailsContainer thumbnailsContainer}.
         *
         * sap.m.ScrollContainer used to render a list of thumbnails for the available steps.
         */
        getThumbnailsContainer(): sap.m.ScrollContainer;
        /**
         * Gets current value of property {@link #getWidth width}.
         *
         * Width of the Step Navigation control.
         *
         * Default value is `100%`.
         */
        getWidth(): sap.ui.core.CSSSize;
        /**
         * Pauses the step that is currently playing.
         */
        pauseStep(): void;
        /**
         * Plays all the steps in the specified procedure.
         */
        playAllSteps(
          /**
           * The ID of the procedure for which to play all steps. If `procedureId == null`, then only the first step
           * is played.
           */
          procedureId?: string
        ): void;
        /**
         * Plays the specified procedure step.
         */
        playStep(
          /**
           * The ID of the procedure step to play.
           */
          stepId: string,
          /**
           * Default: true If `true`, tells the Viewer to play the step from the first frame.
           */
          fromTheBeginning: boolean,
          /**
           * Default: false If `true`, tells the Viewer to play the next step in sequence.
           */
          continueToTheNext: boolean
        ): void;
        /**
         * Rebuilds the content of the Step Navigation control from the current Scene.
         */
        refresh(
          /**
           * The scene object to be used.
           */
          oScene: object
        ): boolean;
        /**
         * Sets the associated {@link #getContentConnector contentConnector}.
         */
        setContentConnector(
          /**
           * ID of an element which becomes the new target of this contentConnector association; alternatively, an
           * element instance may be given
           */
          oContentConnector: sap.ui.core.ID | sap.ui.vk.ContentConnector
        ): sap.ui.vk.StepNavigation;
        /**
         * Sets a new value for property {@link #getHeight height}.
         *
         * Height of the Step Navigation control.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `100%`.
         */
        setHeight(
          /**
           * New value for property `height`
           */
          sHeight: sap.ui.core.CSSSize
        ): sap.ui.vk.StepNavigation;
        /**
         * Sets the aggregated {@link #getLayout layout}.
         */
        setLayout(
          /**
           * The layout to set
           */
          oLayout: sap.m.Toolbar
        ): sap.ui.vk.StepNavigation;
        /**
         * Sets the aggregated {@link #getProcedureItemTemplate procedureItemTemplate}.
         */
        setProcedureItemTemplate(
          /**
           * The procedureItemTemplate to set
           */
          oProcedureItemTemplate: sap.ui.core.Item
        ): sap.ui.vk.StepNavigation;
        /**
         * Attaches a Scene object to the Step Navigation control so that it can access the Scene’s procedures and
         * steps.
         */
        setScene(
          /**
           * The Scene object to attach to the Step Navigation control.
           */
          scene: object
        ): void;
        /**
         * Sets a new value for property {@link #getSettings settings}.
         *
         * Managed settings and properties for Step Navigation events.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setSettings(
          /**
           * New value for property `settings`
           */
          oSettings: object
        ): sap.ui.vk.StepNavigation;
        /**
         * Sets a new value for property {@link #getShowStepInfo showStepInfo}.
         *
         * Indicates that the Step Navigation control should display a popup containing information around the step
         * that is playing. If set to `true`, then the popup is rendered. If set to `false`, the popup is hidden.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setShowStepInfo(
          /**
           * New value for property `showStepInfo`
           */
          bShowStepInfo: boolean
        ): sap.ui.vk.StepNavigation;
        /**
         * Sets a new value for property {@link #getShowThumbnails showThumbnails}.
         *
         * Indicates that the Step Navigation control should display thumbnails. If set to `true`, then thumbnails
         * are rendered. If set to `false`, then thumbnails are hidden.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setShowThumbnails(
          /**
           * New value for property `showThumbnails`
           */
          bShowThumbnails: boolean
        ): sap.ui.vk.StepNavigation;
        /**
         * Sets a new value for property {@link #getShowToolbar showToolbar}.
         *
         * Indicates that the Step Navigation control should display a toolbar. If set to `true`, then the toolbar
         * is rendered. If set to `false`, then the toolbar is hidden.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setShowToolbar(
          /**
           * New value for property `showToolbar`
           */
          bShowToolbar: boolean
        ): sap.ui.vk.StepNavigation;
        /**
         * Sets the aggregated {@link #getStepInfoPopup stepInfoPopup}.
         */
        setStepInfoPopup(
          /**
           * The stepInfoPopup to set
           */
          oStepInfoPopup: sap.ui.core.Control
        ): sap.ui.vk.StepNavigation;
        /**
         * Sets the aggregated {@link #getThumbnailsContainer thumbnailsContainer}.
         */
        setThumbnailsContainer(
          /**
           * The thumbnailsContainer to set
           */
          oThumbnailsContainer: sap.m.ScrollContainer
        ): sap.ui.vk.StepNavigation;
        /**
         * Sets a new value for property {@link #getWidth width}.
         *
         * Width of the Step Navigation control.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `100%`.
         */
        setWidth(
          /**
           * New value for property `width`
           */
          sWidth: sap.ui.core.CSSSize
        ): sap.ui.vk.StepNavigation;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:resize resize} event of this `sap.ui.vk.StepNavigation`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.StepNavigation` itself.
         */
        attachResize(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.StepNavigation` itself
           */
          oListener?: object
        ): sap.ui.vk.StepNavigation;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:stepChanged stepChanged} event of this `sap.ui.vk.StepNavigation`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.StepNavigation` itself.
         *
         * Raised each time a step starts, changes, or finishes.
         */
        attachStepChanged(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.StepNavigation` itself
           */
          oListener?: object
        ): sap.ui.vk.StepNavigation;
        /**
         * Gets a step based on a positive or negative integer, which is used as an index relative to the index
         * of the current step. An index value of `0` can be used to retrieve the details of the current step.
         */
        getStep(
          /**
           * Positive or negative integer representing the number to add or subtract from the index of the current
           * step to return the desired step; for example, //next 1, current 0, previous -1
           */
          relIndex: number,
          /**
           * The ID of the step that we want to retrieve.
           */
          specificStepId: string
        ): JSON;
      }
      /**
       * @EXPERIMENTAL (since 1.58.0)
       *
       * Provides the interface for the texture.
       */
      // @ts-ignore - static 'getMetadata' inheritance issue
      class Texture extends sap.ui.base.ManagedObject {
        /**
         * Constructor for a new texture
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Creates a new subclass of class sap.ui.vk.Texture with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getFilterMode filterMode}.
         *
         * filter mode - Bilinear = 0, NearestNeighbor = 1
         *
         * Default value is `0`.
         */
        getFilterMode(): number;
        /**
         * Gets current value of property {@link #getId id}.
         *
         * texture ID (optional)
         */
        // @ts-ignore
        getId(): string;
        /**
         * Returns a metadata object for class sap.ui.vk.Texture.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**/
        getTextRef(): any;
        /**
         * Gets current value of property {@link #getUvHorizontalOffset uvHorizontalOffset}.
         *
         * Horizontal offset of uv coordinates
         *
         * Default value is `0`.
         */
        getUvHorizontalOffset(): number;
        /**
         * Gets current value of property {@link #getUvHorizontalScale uvHorizontalScale}.
         *
         * Horizontal scale of uv coordinates
         *
         * Default value is `0`.
         */
        getUvHorizontalScale(): number;
        /**
         * Gets current value of property {@link #getUvHorizontalTilingEnabled uvHorizontalTilingEnabled}.
         *
         * Is the uv horizontal tiling enabled
         *
         * Default value is `true`.
         */
        getUvHorizontalTilingEnabled(): boolean;
        /**
         * Gets current value of property {@link #getUvRotationAngle uvRotationAngle}.
         *
         * Rotation angle of uv coordinates
         *
         * Default value is `0`.
         */
        getUvRotationAngle(): number;
        /**
         * Gets current value of property {@link #getUvVerticalOffset uvVerticalOffset}.
         *
         * VerticalOffset offset of uv coordinates
         *
         * Default value is `0`.
         */
        getUvVerticalOffset(): number;
        /**
         * Gets current value of property {@link #getUvVerticalScale uvVerticalScale}.
         *
         * Vertical scale of uv coordinates
         *
         * Default value is `0`.
         */
        getUvVerticalScale(): number;
        /**
         * Gets current value of property {@link #getUvVerticalTilingEnabled uvVerticalTilingEnabled}.
         *
         * Is the uv vertical tiling enabled
         *
         * Default value is `true`.
         */
        getUvVerticalTilingEnabled(): boolean;
        /**
         * Load texture image.
         */
        load(
          /**
           * resource url for image.
           */
          imageUrl: string
        ): sap.ui.vk.Texture;
        /**
         * Sets a new value for property {@link #getFilterMode filterMode}.
         *
         * filter mode - Bilinear = 0, NearestNeighbor = 1
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setFilterMode(
          /**
           * New value for property `filterMode`
           */
          iFilterMode: number
        ): sap.ui.vk.Texture;
        /**
         * Sets a new value for property {@link #getId id}.
         *
         * texture ID (optional)
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setId(
          /**
           * New value for property `id`
           */
          sId: string
        ): sap.ui.vk.Texture;
        /**
         * Sets a new value for property {@link #getUvHorizontalOffset uvHorizontalOffset}.
         *
         * Horizontal offset of uv coordinates
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setUvHorizontalOffset(
          /**
           * New value for property `uvHorizontalOffset`
           */
          fUvHorizontalOffset: number
        ): sap.ui.vk.Texture;
        /**
         * Sets a new value for property {@link #getUvHorizontalScale uvHorizontalScale}.
         *
         * Horizontal scale of uv coordinates
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setUvHorizontalScale(
          /**
           * New value for property `uvHorizontalScale`
           */
          fUvHorizontalScale: number
        ): sap.ui.vk.Texture;
        /**
         * Sets a new value for property {@link #getUvHorizontalTilingEnabled uvHorizontalTilingEnabled}.
         *
         * Is the uv horizontal tiling enabled
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setUvHorizontalTilingEnabled(
          /**
           * New value for property `uvHorizontalTilingEnabled`
           */
          sUvHorizontalTilingEnabled: boolean
        ): sap.ui.vk.Texture;
        /**
         * Sets a new value for property {@link #getUvRotationAngle uvRotationAngle}.
         *
         * Rotation angle of uv coordinates
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setUvRotationAngle(
          /**
           * New value for property `uvRotationAngle`
           */
          fUvRotationAngle: number
        ): sap.ui.vk.Texture;
        /**
         * Sets a new value for property {@link #getUvVerticalOffset uvVerticalOffset}.
         *
         * VerticalOffset offset of uv coordinates
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setUvVerticalOffset(
          /**
           * New value for property `uvVerticalOffset`
           */
          fUvVerticalOffset: number
        ): sap.ui.vk.Texture;
        /**
         * Sets a new value for property {@link #getUvVerticalScale uvVerticalScale}.
         *
         * Vertical scale of uv coordinates
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setUvVerticalScale(
          /**
           * New value for property `uvVerticalScale`
           */
          fUvVerticalScale: number
        ): sap.ui.vk.Texture;
        /**
         * Sets a new value for property {@link #getUvVerticalTilingEnabled uvVerticalTilingEnabled}.
         *
         * Is the uv vertical tiling enabled
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setUvVerticalTilingEnabled(
          /**
           * New value for property `uvVerticalTilingEnabled`
           */
          sUvVerticalTilingEnabled: boolean
        ): sap.ui.vk.Texture;
      }
      /**
       * @SINCE 1.32.0
       *
       * Provides buttons to hide or show certain sap.ui.vk controls.
       */
      class Toolbar extends sap.ui.core.Control {
        /**
         * Constructor for a new Toolbar.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: ToolbarOpts
        );

        /**
         * Adds some content to the aggregation {@link #getContent content}.
         */
        addContent(
          /**
           * The content to add; if empty, nothing is inserted
           */
          oContent: sap.ui.core.Control
        ): sap.ui.vk.Toolbar;
        /**
         * Destroys all the content in the aggregation {@link #getContent content}.
         */
        destroyContent(): sap.ui.vk.Toolbar;
        /**
         * Creates a new subclass of class sap.ui.vk.Toolbar with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets content of aggregation {@link #getContent content}.
         *
         * Toolbar content, this can be used to add/remove buttons and other SAP UI5 controls to the toolbar
         */
        getContent(): sap.ui.core.Control[];
        /**
         * Returns a metadata object for class sap.ui.vk.Toolbar.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getTitle title}.
         *
         * Used to set the title of the Toolbar
         *
         * Default value is `empty string`.
         */
        getTitle(): string;
        /**
         * ID of the element which is the current target of the association {@link #getViewer viewer}, or `null`.
         */
        getViewer(): sap.ui.core.ID;
        /**
         * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getContent content}. and returns
         * its index if found or -1 otherwise.
         */
        indexOfContent(
          /**
           * The content whose index is looked for
           */
          oContent: sap.ui.core.Control
        ): number;
        /**
         * Inserts a content into the aggregation {@link #getContent content}.
         */
        insertContent(
          /**
           * The content to insert; if empty, nothing is inserted
           */
          oContent: sap.ui.core.Control,
          /**
           * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
           * is inserted at position 0; for a value greater than the current size of the aggregation, the content
           * is inserted at the last position
           */
          iIndex: number
        ): sap.ui.vk.Toolbar;
        /**
         * Removes all the controls from the aggregation {@link #getContent content}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllContent(): sap.ui.core.Control[];
        /**
         * Removes a content from the aggregation {@link #getContent content}.
         */
        removeContent(
          /**
           * The content to remove or its index or id
           */
          vContent: number | string | sap.ui.core.Control
        ): sap.ui.core.Control;
        /**
         * Sets a new value for property {@link #getTitle title}.
         *
         * Used to set the title of the Toolbar
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `empty string`.
         */
        setTitle(
          /**
           * New value for property `title`
           */
          sTitle: string
        ): sap.ui.vk.Toolbar;
        /**
         * Sets the associated {@link #getViewer viewer}.
         */
        setViewer(
          /**
           * ID of an element which becomes the new target of this viewer association; alternatively, an element instance
           * may be given
           */
          oViewer: sap.ui.core.ID | sap.ui.vk.Viewer
        ): sap.ui.vk.Toolbar;
      }
      /**
       * @SINCE 1.32.0
       *
       * Transformation matrix is an array of 12 numbers in a row major mode.
       */
      class TransformationMatrix {
        /**/
        constructor();

        /**
         * Converts matrix from 4x4 to 4x3.
         */
        static convertTo4x3(
          /**
           * The matrix to convert. The last column must be [0, 0, 0, 1].
           */
          matrix4x4: number[]
        ): number[];
        /**
         * Converts matrix from 4x3 to 4x4.
         */
        static convertTo4x4(
          /**
           * The matrix to convert.
           */
          matrix4x3: number[]
        ): number[];
        /**
         * Parses the given string value and converts it into an array of numbers.
         */
        static parseValue(
          /**
           * a comma or white space delimited string
           */
          value: string
        ): number[];
      }
      /**
       * Provides the interface for the view.
       */
      // @ts-ignore - static 'getMetadata' inheritance issue
      class View extends sap.ui.base.ManagedObject {
        /**
         * Constructor for a new View.
         *
         * The objects of this class contain neccessary information to reproduce current view including camera type,
         * position and orientation as well as objects visibility property and their positions (if different from
         * default)
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Creates a new subclass of class sap.ui.vk.View with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getCameraInfo cameraInfo}.
         *
         * Object containing camera info (optional) Perspective camera requires: type (String) must be "PerspectiveCamera",
         * fov (Number), position [Array of 3 Numbers], nearClipPlane (Number), farClipPlane (Number), targetDirection
         * - [Array of 3 Numbers], upDirection - [Array of 3 Numbers] Orthographic camera requires: type (String)
         * must be "OrthographicCamera", nearClipPlane (Number), farClipPlane (Number), zoomFactor (Number), position
         * [Array of 3 Numbers], targetDirection - [Array of 3 Numbers], upDirection - [Array of 3 Numbers]
         */
        getCameraInfo(): object;
        /**
         * Gets current value of property {@link #getDescription description}.
         *
         * string description (optional)
         */
        getDescription(): string;
        /**
         * Returns a metadata object for class sap.ui.vk.View.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getName name}.
         *
         * string name (optional)
         */
        getName(): string;
        /**
         * Gets current value of property {@link #getNodeInfos nodeInfos}.
         *
         * Array of objects containing node information. nodeRef - required node reference (String), transform -
         * optional transformation matrix [Array of 12 Numbers], visibility - optional (Boolean)
         */
        getNodeInfos(): object[];
        /**
         * Gets current value of property {@link #getPlaybacks playbacks}.
         *
         * Array of objects containing playback information. All required: sequenceId (string), playbackSpeed (float),
         * playbackPreDelay (float), playbackPostDelay (float), playbackRepeat - required (int), playbackReversed
         * (Boolean)
         */
        getPlaybacks(): object[];
        /**
         * Sets a new value for property {@link #getCameraInfo cameraInfo}.
         *
         * Object containing camera info (optional) Perspective camera requires: type (String) must be "PerspectiveCamera",
         * fov (Number), position [Array of 3 Numbers], nearClipPlane (Number), farClipPlane (Number), targetDirection
         * - [Array of 3 Numbers], upDirection - [Array of 3 Numbers] Orthographic camera requires: type (String)
         * must be "OrthographicCamera", nearClipPlane (Number), farClipPlane (Number), zoomFactor (Number), position
         * [Array of 3 Numbers], targetDirection - [Array of 3 Numbers], upDirection - [Array of 3 Numbers]
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setCameraInfo(
          /**
           * New value for property `cameraInfo`
           */
          oCameraInfo: object
        ): sap.ui.vk.View;
        /**
         * Sets a new value for property {@link #getDescription description}.
         *
         * string description (optional)
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setDescription(
          /**
           * New value for property `description`
           */
          sDescription: string
        ): sap.ui.vk.View;
        /**
         * Sets a new value for property {@link #getName name}.
         *
         * string name (optional)
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setName(
          /**
           * New value for property `name`
           */
          sName: string
        ): sap.ui.vk.View;
        /**
         * Sets a new value for property {@link #getNodeInfos nodeInfos}.
         *
         * Array of objects containing node information. nodeRef - required node reference (String), transform -
         * optional transformation matrix [Array of 12 Numbers], visibility - optional (Boolean)
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setNodeInfos(
          /**
           * New value for property `nodeInfos`
           */
          sNodeInfos: object[]
        ): sap.ui.vk.View;
        /**
         * Sets a new value for property {@link #getPlaybacks playbacks}.
         *
         * Array of objects containing playback information. All required: sequenceId (string), playbackSpeed (float),
         * playbackPreDelay (float), playbackPostDelay (float), playbackRepeat - required (int), playbackReversed
         * (Boolean)
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setPlaybacks(
          /**
           * New value for property `playbacks`
           */
          sPlaybacks: object[]
        ): sap.ui.vk.View;
      }
      /**
       * @SINCE 1.32.0
       *
       * Provides simple 3D visualization capability by connecting, configuring and presenting the essential Visualization
       * Toolkit controls a single composite control.
       */
      class Viewer extends sap.ui.core.Control {
        /**
         * Constructor for a new Viewer.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new Viewer control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * initial settings for the new Viewer control
           */
          mSettings?: ViewerOpts
        );

        /**
         * It activates or deactivates full screen mode.
         */
        activateFullScreenMode(
          /**
           * Parameter which specifies whether to activate or deactivate full screen mode.
           */
          value: boolean
        ): sap.ui.vk.Viewer;
        /**
         * Adds some contentResource to the aggregation {@link #getContentResources contentResources}.
         */
        addContentResource(
          /**
           * The contentResource to add; if empty, nothing is inserted
           */
          oContentResource: sap.ui.vk.ContentResource
        ): sap.ui.vk.Viewer;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentResourceChangesProcessed contentResourceChangesProcessed}
         * event of this `sap.ui.vk.Viewer`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Viewer` itself.
         *
         * This event will be fired when any content resource or the contentResources aggregation has been changed
         * and processed.
         */
        attachContentResourceChangesProcessed(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Viewer` itself
           */
          oListener?: object
        ): sap.ui.vk.Viewer;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:fullScreen fullScreen} event of this `sap.ui.vk.Viewer`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Viewer` itself.
         *
         * This event is fired when viewer enters/exits full screen mode.
         */
        attachFullScreen(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Viewer` itself
           */
          oListener?: object
        ): sap.ui.vk.Viewer;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:nodeClicked nodeClicked} event of this `sap.ui.vk.Viewer`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Viewer` itself.
         *
         * This event will be fired when a node is clicked.
         */
        attachNodeClicked(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Viewer` itself
           */
          oListener?: object
        ): sap.ui.vk.Viewer;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:sceneDestroying sceneDestroying} event of this
         * `sap.ui.vk.Viewer`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Viewer` itself.
         *
         * This event will be fired when scene / image loaded in Viewer is about to be destroyed.
         */
        attachSceneDestroying(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Viewer` itself
           */
          oListener?: object
        ): sap.ui.vk.Viewer;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:sceneLoadingFailed sceneLoadingFailed} event
         * of this `sap.ui.vk.Viewer`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Viewer` itself.
         *
         * This event will be fired when a critical error occurs during scene / image loading.
         */
        attachSceneLoadingFailed(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Viewer` itself
           */
          oListener?: object
        ): sap.ui.vk.Viewer;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:sceneLoadingSucceeded sceneLoadingSucceeded}
         * event of this `sap.ui.vk.Viewer`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Viewer` itself.
         *
         * This event will be fired when a scene / image has been loaded into the Viewer.
         */
        attachSceneLoadingSucceeded(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Viewer` itself
           */
          oListener?: object
        ): sap.ui.vk.Viewer;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:selectionChanged selectionChanged} event of
         * this `sap.ui.vk.Viewer`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Viewer` itself.
         *
         * This event is fired when the nodes are selected/unselected.
         */
        attachSelectionChanged(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Viewer` itself
           */
          oListener?: object
        ): sap.ui.vk.Viewer;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:urlClicked urlClicked} event of this `sap.ui.vk.Viewer`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Viewer` itself.
         *
         * This event will be fired when a URL in a note is clicked.
         */
        attachUrlClicked(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Viewer` itself
           */
          oListener?: object
        ): sap.ui.vk.Viewer;
        /**
         * Destroys all the contentResources in the aggregation {@link #getContentResources contentResources}.
         */
        destroyContentResources(): sap.ui.vk.Viewer;
        /**
         * Destroys the overlay in the aggregation {@link #getOverlay overlay}.
         */
        destroyOverlay(): sap.ui.vk.Viewer;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:contentResourceChangesProcessed contentResourceChangesProcessed}
         * event of this `sap.ui.vk.Viewer`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachContentResourceChangesProcessed(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.Viewer;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:fullScreen fullScreen} event of this `sap.ui.vk.Viewer`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachFullScreen(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.Viewer;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:nodeClicked nodeClicked} event of this `sap.ui.vk.Viewer`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachNodeClicked(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.Viewer;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:sceneDestroying sceneDestroying} event of
         * this `sap.ui.vk.Viewer`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachSceneDestroying(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.Viewer;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:sceneLoadingFailed sceneLoadingFailed} event
         * of this `sap.ui.vk.Viewer`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachSceneLoadingFailed(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.Viewer;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:sceneLoadingSucceeded sceneLoadingSucceeded}
         * event of this `sap.ui.vk.Viewer`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachSceneLoadingSucceeded(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.Viewer;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:selectionChanged selectionChanged} event of
         * this `sap.ui.vk.Viewer`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachSelectionChanged(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.Viewer;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:urlClicked urlClicked} event of this `sap.ui.vk.Viewer`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachUrlClicked(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.Viewer;
        /**
         * Creates a new subclass of class sap.ui.vk.Viewer with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:contentResourceChangesProcessed contentResourceChangesProcessed} to attached
         * listeners.
         */
        fireContentResourceChangesProcessed(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): sap.ui.vk.Viewer;
        /**
         * Fires event {@link #event:fullScreen fullScreen} to attached listeners.
         */
        fireFullScreen(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * true: entered full screen; false: exited full screen.
             */
            isFullScreen?: boolean;
          }
        ): sap.ui.vk.Viewer;
        /**
         * Fires event {@link #event:nodeClicked nodeClicked} to attached listeners.
         */
        fireNodeClicked(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Returns a node reference.
             */
            nodeRef?: any;

            x?: number;

            y?: number;
          }
        ): sap.ui.vk.Viewer;
        /**
         * Fires event {@link #event:sceneDestroying sceneDestroying} to attached listeners.
         */
        fireSceneDestroying(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Returns a reference to the scene to be destroyed.
             */
            scene?: sap.ui.vk.Scene;
            /**
             * Returns a `function(prevent: boolean)` with one boolean parameter. To prevent garbage collection after
             * the scene is destroyed call this function passing `true` as a parameter.
             */
            preventGarbageCollection?: Function;
          }
        ): sap.ui.vk.Viewer;
        /**
         * Fires event {@link #event:sceneLoadingFailed sceneLoadingFailed} to attached listeners.
         */
        fireSceneLoadingFailed(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Returns an optional object describing the reason of the failure.
             */
            reason?: object;
          }
        ): sap.ui.vk.Viewer;
        /**
         * Fires event {@link #event:sceneLoadingSucceeded sceneLoadingSucceeded} to attached listeners.
         */
        fireSceneLoadingSucceeded(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Returns a reference to the loaded Scene.
             */
            scene?: sap.ui.vk.Scene;
          }
        ): sap.ui.vk.Viewer;
        /**
         * Fires event {@link #event:selectionChanged selectionChanged} to attached listeners.
         */
        fireSelectionChanged(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Node references to the newly selected nodes.
             */
            selected?: any[];
            /**
             * Node references to the newly unselected nodes.
             */
            unselected?: any[];
          }
        ): sap.ui.vk.Viewer;
        /**
         * Fires event {@link #event:urlClicked urlClicked} to attached listeners.
         */
        fireUrlClicked(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Returns a node reference of the note that contains the URL.
             */
            nodeRef?: any;
            /**
             * Returns a URL that was clicked.
             */
            url?: string;
          }
        ): sap.ui.vk.Viewer;
        /**
         * Gets content of aggregation {@link #getContentResources contentResources}.
         *
         * Content resources to load and display in the Viewer control.
         */
        getContentResources(): sap.ui.vk.ContentResource[];
        /**
         * Gets current value of property {@link #getEnableNotifications enableNotifications}.
         *
         * Disables the Message Popover Control
         *
         * Default value is `true`.
         */
        getEnableNotifications(): boolean;
        /**
         * Gets current value of property {@link #getEnableOverlay enableOverlay}.
         *
         * Enables or disables the Overlay control
         *
         * Default value is `false`.
         */
        getEnableOverlay(): boolean;
        /**
         * Gets current value of property {@link #getEnableProgressIndicator enableProgressIndicator}.
         *
         * Enable / disable progress indicator for downloading and rendering VDS files
         *
         * Default value is `true`.
         */
        getEnableProgressIndicator(): boolean;
        /**
         * Gets current value of property {@link #getEnableSceneTree enableSceneTree}.
         *
         * Disables the scene tree control Button on the menu
         *
         * Default value is `true`.
         */
        getEnableSceneTree(): boolean;
        /**
         * Gets current value of property {@link #getEnableStepNavigation enableStepNavigation}.
         *
         * Disables the Step Navigation Control Button on the menu
         *
         * Default value is `true`.
         */
        getEnableStepNavigation(): boolean;
        /**
         * Gets current value of property {@link #getEnableToolbar enableToolbar}.
         *
         * Shows or hides Toolbar control
         *
         * Default value is `true`.
         */
        getEnableToolbar(): boolean;
        /**
         * @deprecated (since 1.50.0)
         *
         * Gets the GraphicsCore object if the currently loaded content is a 3D model.
         */
        getGraphicsCore(): sap.ui.vk.dvl.GraphicsCore;
        /**
         * Gets current value of property {@link #getHeight height}.
         *
         * Height of the Viewer control
         */
        getHeight(): sap.ui.core.CSSSize;
        /**
         * Gets current value of property {@link #getHotspotColor hotspotColor}.
         *
         * Color used for highlighting Smart2D hotspots in the CSS Color format.
         *
         * Default value is `rgba(255, 0, 0, 0.7529411764705882)`.
         */
        getHotspotColor(): sap.ui.core.CSSColor;
        /**
         * Gets current value of property {@link #getHotspotColorABGR hotspotColorABGR}.
         *
         * Color used for highlighting Smart2D hotspots in the ABGR format.
         *
         * Default value is `3221225727`.
         */
        getHotspotColorABGR(): number;
        /**
         * Returns a metadata object for class sap.ui.vk.Viewer.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets the 2D viewport used for displaying format natively supported by the browser - 2D images etc.
         */
        getNativeViewport(): sap.ui.vk.NativeViewport;
        /**
         * Gets content of aggregation {@link #getOverlay overlay}.
         */
        getOverlay(): sap.ui.vk.Overlay;
        /**
         * Gets current value of property {@link #getOverlayStepNavigation overlayStepNavigation}.
         *
         * If enabled the Step Navigation will be overlayed on top of the viewport. Only set this during initialization.
         * Will not work when set at runtime.
         *
         * Default value is `false`.
         */
        getOverlayStepNavigation(): boolean;
        /**
         * Gets current value of property {@link #getRecursiveSelection recursiveSelection}.
         *
         * Whether or not we want ViewStateManager to have recursive selection.
         *
         * Default value is `false`.
         */
        getRecursiveSelection(): boolean;
        /**
         * Gets the RedlineDesign instance used for creating redlining shapes.
         */
        getRedlineDesign(): sap.ui.vk.RedlineDesign;
        /**
         * Gets current value of property {@link #getRuntimeSettings runtimeSettings}.
         *
         * Optional Emscripten runtime module settings. A JSON object with the following properties:
         * 	 - totalMemory {int} size of Emscripten module memory in bytes, default value: 512 MB.
         * 	 - logElementId {string} ID of a textarea DOM element to write the log to.
         * 	 - statusElementId {string} ID of a DOM element to write the status messages to.  Emscripten runtime
         * 			module settings cannot be changed after the control is fully initialized.
         *
         * Default value is `[object Object]`.
         */
        getRuntimeSettings(): object;
        /**
         * Gets the Scene currently loaded in the Viewer control.
         */
        getScene(): sap.ui.vk.Scene;
        /**
         * Gets the scene tree control to customize it.
         */
        getSceneTree(): sap.ui.vk.SceneTree;
        /**
         * Gets current value of property {@link #getShouldTrackVisibilityChanges shouldTrackVisibilityChanges}.
         *
         * Whether or not we want ViewStateManager to keep track of visibility changes.
         *
         * Default value is `false`.
         */
        getShouldTrackVisibilityChanges(): boolean;
        /**
         * Gets current value of property {@link #getShowAllHotspots showAllHotspots}.
         *
         * Enables or disables showing of all hotspots
         *
         * Default value is `false`.
         */
        getShowAllHotspots(): boolean;
        /**
         * Gets current value of property {@link #getShowSceneTree showSceneTree}.
         *
         * Shows or hides the scene tree control
         *
         * Default value is `true`.
         */
        getShowSceneTree(): boolean;
        /**
         * Gets current value of property {@link #getShowStepNavigation showStepNavigation}.
         *
         * Shows or hides the Step Navigation Control
         *
         * Default value is `false`.
         */
        getShowStepNavigation(): boolean;
        /**
         * Gets current value of property {@link #getShowStepNavigationThumbnails showStepNavigationThumbnails}.
         *
         * Shows or hides the Step Navigation thumbnails
         *
         * Default value is `true`.
         */
        getShowStepNavigationThumbnails(): boolean;
        /**
         * Gets the toolbar control to customize it - add or remove buttons
         */
        getToolbar(): sap.ui.vk.Toolbar;
        /**
         * Gets current value of property {@link #getToolbarTitle toolbarTitle}.
         *
         * The toolbar title
         *
         * Default value is `empty string`.
         */
        getToolbarTitle(): string;
        /**
         * Gets the 3D viewport.
         */
        getViewport(): sap.ui.vk.Viewport;
        /**
         * Gets the view state manager object used for handling visibility and selection of nodes.
         */
        getViewStateManager(): sap.ui.vk.ViewStateManager;
        /**
         * Gets current value of property {@link #getWebGLContextAttributes webGLContextAttributes}.
         *
         * Optional WebGL context attributes. A JSON object with the following boolean properties:
         * 	 - antialias {boolean} default value `true`. If set to `true`, the context will attempt to perform antialiased
         * 			rendering if possible.
         * 	 - alpha {boolean} default value `true`. If set to `true`, the context will have an alpha (transparency)
         * 			channel.
         * 	 - premultipliedAlpha {boolean} default value `false`. If set to `true`, the color channels in the framebuffer
         * 			will be stored premultiplied by the alpha channel to improve performance.  Other {@link https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.2
         * 			WebGL context attributes} are also supported. WebGL context attributes cannot be changed after the control
         * 			is fully initialized.
         *
         * Default value is `{ antialias: true, alpha: true, premultipliedAlpha: false }`.
         */
        getWebGLContextAttributes(): object;
        /**
         * Gets current value of property {@link #getWidth width}.
         *
         * Width of the Viewer control
         */
        getWidth(): sap.ui.core.CSSSize;
        /**
         * Checks for the provided `sap.ui.vk.ContentResource` in the aggregation {@link #getContentResources contentResources}.
         * and returns its index if found or -1 otherwise.
         */
        indexOfContentResource(
          /**
           * The contentResource whose index is looked for
           */
          oContentResource: sap.ui.vk.ContentResource
        ): number;
        /**
         * Inserts a contentResource into the aggregation {@link #getContentResources contentResources}.
         */
        insertContentResource(
          /**
           * The contentResource to insert; if empty, nothing is inserted
           */
          oContentResource: sap.ui.vk.ContentResource,
          /**
           * The `0`-based index the contentResource should be inserted at; for a negative value of `iIndex`, the
           * contentResource is inserted at position 0; for a value greater than the current size of the aggregation,
           * the contentResource is inserted at the last position
           */
          iIndex: number
        ): sap.ui.vk.Viewer;
        /**
         * Removes all the controls from the aggregation {@link #getContentResources contentResources}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllContentResources(): sap.ui.vk.ContentResource[];
        /**
         * Removes a contentResource from the aggregation {@link #getContentResources contentResources}.
         */
        removeContentResource(
          /**
           * The contentResource to remove or its index or id
           */
          vContentResource: number | string | sap.ui.vk.ContentResource
        ): sap.ui.vk.ContentResource;
        /**
         * Sets an callback function used to authorize user and provide authorization token.
         */
        setAuthorizationHandler(
          /**
           * An callback function.
           */
          handler: sap.ui.vk.AuthorizationHandler
        ): sap.ui.vk.Viewer;
        /**
         * Sets an object that decrypts content of encrypted models.
         */
        setDecryptionHandler(
          /**
           * An object that decrypts content of encrypted models.
           */
          handler: sap.ui.vk.DecryptionHandler
        ): sap.ui.vk.Viewer;
        /**
         * Sets a new value for property {@link #getEnableNotifications enableNotifications}.
         *
         * Disables the Message Popover Control
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setEnableNotifications(
          /**
           * New value for property `enableNotifications`
           */
          bEnableNotifications: boolean
        ): sap.ui.vk.Viewer;
        /**
         * Sets a new value for property {@link #getEnableOverlay enableOverlay}.
         *
         * Enables or disables the Overlay control
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setEnableOverlay(
          /**
           * New value for property `enableOverlay`
           */
          bEnableOverlay: boolean
        ): sap.ui.vk.Viewer;
        /**
         * Sets a new value for property {@link #getEnableProgressIndicator enableProgressIndicator}.
         *
         * Enable / disable progress indicator for downloading and rendering VDS files
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setEnableProgressIndicator(
          /**
           * New value for property `enableProgressIndicator`
           */
          bEnableProgressIndicator: boolean
        ): sap.ui.vk.Viewer;
        /**
         * Sets a new value for property {@link #getEnableSceneTree enableSceneTree}.
         *
         * Disables the scene tree control Button on the menu
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setEnableSceneTree(
          /**
           * New value for property `enableSceneTree`
           */
          bEnableSceneTree: boolean
        ): sap.ui.vk.Viewer;
        /**
         * Sets a new value for property {@link #getEnableStepNavigation enableStepNavigation}.
         *
         * Disables the Step Navigation Control Button on the menu
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setEnableStepNavigation(
          /**
           * New value for property `enableStepNavigation`
           */
          bEnableStepNavigation: boolean
        ): sap.ui.vk.Viewer;
        /**
         * Sets a new value for property {@link #getEnableToolbar enableToolbar}.
         *
         * Shows or hides Toolbar control
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setEnableToolbar(
          /**
           * New value for property `enableToolbar`
           */
          bEnableToolbar: boolean
        ): sap.ui.vk.Viewer;
        /**
         * Sets a new value for property {@link #getHeight height}.
         *
         * Height of the Viewer control
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setHeight(
          /**
           * New value for property `height`
           */
          sHeight: sap.ui.core.CSSSize
        ): sap.ui.vk.Viewer;
        /**
         * Sets a new value for property {@link #getHotspotColor hotspotColor}.
         *
         * Color used for highlighting Smart2D hotspots in the CSS Color format.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `rgba(255, 0, 0, 0.7529411764705882)`.
         */
        setHotspotColor(
          /**
           * New value for property `hotspotColor`
           */
          sHotspotColor: sap.ui.core.CSSColor
        ): sap.ui.vk.Viewer;
        /**
         * Sets a new value for property {@link #getHotspotColorABGR hotspotColorABGR}.
         *
         * Color used for highlighting Smart2D hotspots in the ABGR format.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `3221225727`.
         */
        setHotspotColorABGR(
          /**
           * New value for property `hotspotColorABGR`
           */
          iHotspotColorABGR: number
        ): sap.ui.vk.Viewer;
        /**
         * Sets the aggregated {@link #getOverlay overlay}.
         */
        setOverlay(
          /**
           * The overlay to set
           */
          oOverlay: sap.ui.vk.Overlay
        ): sap.ui.vk.Viewer;
        /**
         * Sets a new value for property {@link #getOverlayStepNavigation overlayStepNavigation}.
         *
         * If enabled the Step Navigation will be overlayed on top of the viewport. Only set this during initialization.
         * Will not work when set at runtime.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setOverlayStepNavigation(
          /**
           * New value for property `overlayStepNavigation`
           */
          bOverlayStepNavigation: boolean
        ): sap.ui.vk.Viewer;
        /**
         * Sets a new value for property {@link #getRecursiveSelection recursiveSelection}.
         *
         * Whether or not we want ViewStateManager to have recursive selection.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setRecursiveSelection(
          /**
           * New value for property `recursiveSelection`
           */
          bRecursiveSelection: boolean
        ): sap.ui.vk.Viewer;
        /**
         * Sets a new value for property {@link #getRuntimeSettings runtimeSettings}.
         *
         * Optional Emscripten runtime module settings. A JSON object with the following properties:
         * 	 - totalMemory {int} size of Emscripten module memory in bytes, default value: 512 MB.
         * 	 - logElementId {string} ID of a textarea DOM element to write the log to.
         * 	 - statusElementId {string} ID of a DOM element to write the status messages to.  Emscripten runtime
         * 			module settings cannot be changed after the control is fully initialized.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `[object Object]`.
         */
        setRuntimeSettings(
          /**
           * New value for property `runtimeSettings`
           */
          oRuntimeSettings: object
        ): sap.ui.vk.Viewer;
        /**
         * Sets a new value for property {@link #getShouldTrackVisibilityChanges shouldTrackVisibilityChanges}.
         *
         * Whether or not we want ViewStateManager to keep track of visibility changes.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setShouldTrackVisibilityChanges(
          /**
           * New value for property `shouldTrackVisibilityChanges`
           */
          bShouldTrackVisibilityChanges: boolean
        ): sap.ui.vk.Viewer;
        /**
         * Sets a new value for property {@link #getShowAllHotspots showAllHotspots}.
         *
         * Enables or disables showing of all hotspots
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setShowAllHotspots(
          /**
           * New value for property `showAllHotspots`
           */
          bShowAllHotspots: boolean
        ): sap.ui.vk.Viewer;
        /**
         * Sets a new value for property {@link #getShowSceneTree showSceneTree}.
         *
         * Shows or hides the scene tree control
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setShowSceneTree(
          /**
           * New value for property `showSceneTree`
           */
          bShowSceneTree: boolean
        ): sap.ui.vk.Viewer;
        /**
         * Sets a new value for property {@link #getShowStepNavigation showStepNavigation}.
         *
         * Shows or hides the Step Navigation Control
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setShowStepNavigation(
          /**
           * New value for property `showStepNavigation`
           */
          bShowStepNavigation: boolean
        ): sap.ui.vk.Viewer;
        /**
         * Sets a new value for property {@link #getShowStepNavigationThumbnails showStepNavigationThumbnails}.
         *
         * Shows or hides the Step Navigation thumbnails
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setShowStepNavigationThumbnails(
          /**
           * New value for property `showStepNavigationThumbnails`
           */
          bShowStepNavigationThumbnails: boolean
        ): sap.ui.vk.Viewer;
        /**
         * Sets a new value for property {@link #getToolbarTitle toolbarTitle}.
         *
         * The toolbar title
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `empty string`.
         */
        setToolbarTitle(
          /**
           * New value for property `toolbarTitle`
           */
          sToolbarTitle: string
        ): sap.ui.vk.Viewer;
        /**
         * Sets a new value for property {@link #getWebGLContextAttributes webGLContextAttributes}.
         *
         * Optional WebGL context attributes. A JSON object with the following boolean properties:
         * 	 - antialias {boolean} default value `true`. If set to `true`, the context will attempt to perform antialiased
         * 			rendering if possible.
         * 	 - alpha {boolean} default value `true`. If set to `true`, the context will have an alpha (transparency)
         * 			channel.
         * 	 - premultipliedAlpha {boolean} default value `false`. If set to `true`, the color channels in the framebuffer
         * 			will be stored premultiplied by the alpha channel to improve performance.  Other {@link https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.2
         * 			WebGL context attributes} are also supported. WebGL context attributes cannot be changed after the control
         * 			is fully initialized.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `{ antialias: true, alpha: true, premultipliedAlpha: false }`.
         */
        setWebGLContextAttributes(
          /**
           * New value for property `webGLContextAttributes`
           */
          oWebGLContextAttributes: object
        ): sap.ui.vk.Viewer;
        /**
         * Sets a new value for property {@link #getWidth width}.
         *
         * Width of the Viewer control
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setWidth(
          /**
           * New value for property `width`
           */
          sWidth: sap.ui.core.CSSSize
        ): sap.ui.vk.Viewer;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:contentResourceChangesProcessed contentResourceChangesProcessed}
         * event of this `sap.ui.vk.Viewer`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Viewer` itself.
         *
         * This event will be fired when any content resource or the contentResources aggregation has been changed
         * and processed.
         */
        attachContentResourceChangesProcessed(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Viewer` itself
           */
          oListener?: object
        ): sap.ui.vk.Viewer;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:fullScreen fullScreen} event of this `sap.ui.vk.Viewer`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Viewer` itself.
         *
         * This event is fired when viewer enters/exits full screen mode.
         */
        attachFullScreen(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Viewer` itself
           */
          oListener?: object
        ): sap.ui.vk.Viewer;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:nodeClicked nodeClicked} event of this `sap.ui.vk.Viewer`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Viewer` itself.
         *
         * This event will be fired when a node is clicked.
         */
        attachNodeClicked(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Viewer` itself
           */
          oListener?: object
        ): sap.ui.vk.Viewer;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:sceneDestroying sceneDestroying} event of this
         * `sap.ui.vk.Viewer`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Viewer` itself.
         *
         * This event will be fired when scene / image loaded in Viewer is about to be destroyed.
         */
        attachSceneDestroying(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Viewer` itself
           */
          oListener?: object
        ): sap.ui.vk.Viewer;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:sceneLoadingFailed sceneLoadingFailed} event
         * of this `sap.ui.vk.Viewer`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Viewer` itself.
         *
         * This event will be fired when a critical error occurs during scene / image loading.
         */
        attachSceneLoadingFailed(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Viewer` itself
           */
          oListener?: object
        ): sap.ui.vk.Viewer;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:sceneLoadingSucceeded sceneLoadingSucceeded}
         * event of this `sap.ui.vk.Viewer`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Viewer` itself.
         *
         * This event will be fired when a scene / image has been loaded into the Viewer.
         */
        attachSceneLoadingSucceeded(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Viewer` itself
           */
          oListener?: object
        ): sap.ui.vk.Viewer;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:selectionChanged selectionChanged} event of
         * this `sap.ui.vk.Viewer`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Viewer` itself.
         *
         * This event is fired when the nodes are selected/unselected.
         */
        attachSelectionChanged(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Viewer` itself
           */
          oListener?: object
        ): sap.ui.vk.Viewer;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:urlClicked urlClicked} event of this `sap.ui.vk.Viewer`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.Viewer` itself.
         *
         * This event will be fired when a URL in a note is clicked.
         */
        attachUrlClicked(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.Viewer` itself
           */
          oListener?: object
        ): sap.ui.vk.Viewer;
      }
      /**
       * @SINCE 1.62.0
       *
       * Enables capabilities for navigating and activating procedures and steps contained in a single 3D scene.
       */
      class ViewGallery extends sap.ui.core.Control {
        /**
         * Constructor for a new ViewGallery.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new control. This ID is generated automatically if no ID is provided.
           */
          sId?: string,
          /**
           * Initial settings for the new View Gallery control.
           */
          mSettings?: ViewGalleryOpts
        );

        /**
         * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
         * `sap.ui.vk.ViewGallery`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewGallery` itself.
         *
         * Fires when selection is changed via user interaction inside the control.
         */
        attachSelectionChange(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewGallery` itself
           */
          oListener?: object
        ): sap.ui.vk.ViewGallery;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:viewOrderChange viewOrderChange} event of this
         * `sap.ui.vk.ViewGallery`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewGallery` itself.
         *
         * Fires when views are reordered
         */
        attachViewOrderChange(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewGallery` itself
           */
          oListener?: object
        ): sap.ui.vk.ViewGallery;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:selectionChange selectionChange} event of
         * this `sap.ui.vk.ViewGallery`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachSelectionChange(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.ViewGallery;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:viewOrderChange viewOrderChange} event of
         * this `sap.ui.vk.ViewGallery`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachViewOrderChange(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.ViewGallery;
        /**
         * Creates a new subclass of class sap.ui.vk.ViewGallery with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:selectionChange selectionChange} to attached listeners.
         */
        fireSelectionChange(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            item?: sap.ui.core.Control;
          }
        ): sap.ui.vk.ViewGallery;
        /**
         * Fires event {@link #event:viewOrderChange viewOrderChange} to attached listeners.
         */
        fireViewOrderChange(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            view?: sap.ui.vk.View;

            viewIndex?: number;
          }
        ): sap.ui.vk.ViewGallery;
        /**
         * ID of the element which is the current target of the association {@link #getContentConnector contentConnector},
         * or `null`.
         */
        getContentConnector(): sap.ui.core.ID;
        /**
         * Gets current value of property {@link #getEnableViewReordering enableViewReordering}.
         *
         * Indicates that the View Gallery control should allow view reordering
         *
         * Default value is `false`.
         */
        getEnableViewReordering(): boolean;
        /**
         * Returns a metadata object for class sap.ui.vk.ViewGallery.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Retrieves the index of the selected view group.
         */
        getSelectedViewGroupIndex(): number;
        /**
         * Retrieves the index of the selected view.
         */
        getSelectedViewIndex(): number;
        /**
         * Gets current value of property {@link #getShowAnimationTimeSlider showAnimationTimeSlider}.
         *
         * Indicates that the View Gallery control should display animation slider showing time of animation in
         * current view.
         *
         * Default value is `true`.
         */
        getShowAnimationTimeSlider(): boolean;
        /**
         * Gets current value of property {@link #getShowThumbnailContainer showThumbnailContainer}.
         *
         * Indicates that the View Gallery control should display thumbnails
         *
         * Default value is `true`.
         */
        getShowThumbnailContainer(): boolean;
        /**
         * Gets current value of property {@link #getShowToolbar showToolbar}.
         *
         * Indicates that the View Gallery control should display toolbar
         *
         * Default value is `true`.
         */
        getShowToolbar(): boolean;
        /**
         * ID of the element which is the current target of the association {@link #getViewport viewport}, or `null`.
         */
        getViewport(): sap.ui.core.ID;
        /**
         * Sets the associated {@link #getContentConnector contentConnector}.
         */
        setContentConnector(
          /**
           * ID of an element which becomes the new target of this contentConnector association; alternatively, an
           * element instance may be given
           */
          oContentConnector: sap.ui.core.ID | sap.ui.vk.ContentConnector
        ): sap.ui.vk.ViewGallery;
        /**
         * Sets a new value for property {@link #getEnableViewReordering enableViewReordering}.
         *
         * Indicates that the View Gallery control should allow view reordering
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setEnableViewReordering(
          /**
           * New value for property `enableViewReordering`
           */
          bEnableViewReordering: boolean
        ): sap.ui.vk.ViewGallery;
        /**
         * Set if playing animation when activating view or playing procedure
         */
        setPlayingAnimation(
          /**
           * true if playing animation
           */
          play: boolean
        ): void;
        /**
         * Attaches a Scene object to the View Gallery control so that it can access the Scene’s procedures and
         * steps.
         */
        setScene(
          /**
           * The Scene object to attach to the View Gallery control.
           */
          scene: object
        ): void;
        /**
         * Selects view group with given index. This will reload list of views.
         */
        setSelectedViewGroupIndex(
          /**
           * Index of view group to become selected.
           */
          index: number,
          /**
           * Index of view in view group to become selected
           */
          viewIndex: number
        ): void;
        /**
         * Selects view with given view index.
         */
        setSelectedViewIndex(
          /**
           * Index of view to become selected.
           */
          index: number
        ): void;
        /**
         * Sets a new value for property {@link #getShowAnimationTimeSlider showAnimationTimeSlider}.
         *
         * Indicates that the View Gallery control should display animation slider showing time of animation in
         * current view.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setShowAnimationTimeSlider(
          /**
           * New value for property `showAnimationTimeSlider`
           */
          bShowAnimationTimeSlider: boolean
        ): sap.ui.vk.ViewGallery;
        /**
         * Sets a new value for property {@link #getShowThumbnailContainer showThumbnailContainer}.
         *
         * Indicates that the View Gallery control should display thumbnails
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setShowThumbnailContainer(
          /**
           * New value for property `showThumbnailContainer`
           */
          bShowThumbnailContainer: boolean
        ): sap.ui.vk.ViewGallery;
        /**
         * Sets a new value for property {@link #getShowToolbar showToolbar}.
         *
         * Indicates that the View Gallery control should display toolbar
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setShowToolbar(
          /**
           * New value for property `showToolbar`
           */
          bShowToolbar: boolean
        ): sap.ui.vk.ViewGallery;
        /**
         * Sets the associated {@link #getViewport viewport}.
         */
        setViewport(
          /**
           * ID of an element which becomes the new target of this viewport association; alternatively, an element
           * instance may be given
           */
          oViewport: sap.ui.core.ID | sap.ui.vk.Viewport
        ): sap.ui.vk.ViewGallery;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
         * `sap.ui.vk.ViewGallery`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewGallery` itself.
         *
         * Fires when selection is changed via user interaction inside the control.
         */
        attachSelectionChange(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewGallery` itself
           */
          oListener?: object
        ): sap.ui.vk.ViewGallery;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:viewOrderChange viewOrderChange} event of this
         * `sap.ui.vk.ViewGallery`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewGallery` itself.
         *
         * Fires when views are reordered
         */
        attachViewOrderChange(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewGallery` itself
           */
          oListener?: object
        ): sap.ui.vk.ViewGallery;
      }
      /**
       * @SINCE 1.50.0
       *
       * Provides a rendering canvas for the 3D elements of a loaded scene.
       */
      class Viewport extends sap.ui.vk.ViewportBase {
        /**
         * Constructor for a new Viewport.
         */
        constructor(
          /**
           * ID for the new Viewport control. Generated automatically if no ID is given.
           */
          sId?: string,
          /**
           * Initial settings for the new Viewport control.
           */
          mSettings?: ViewportOpts
        );

        /**
         * Calls activateView with view definition
         */
        // @ts-ignore
        activateView(
          /**
           * object definition
           */
          view: sap.ui.vk.View,
          /**
           * Whether or not to play animations
           */
          notPlayingAnimations: boolean
        ): sap.ui.vk.Viewport;
        /**
         * Creates a new subclass of class sap.ui.vk.Viewport with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.ViewportBase.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Get current view - remembered when activateView function is called
         */
        getCurrentView(): sap.ui.vk.View;
        /**
         * Returns viewport content as an image of desired size.
         */
        getImage(
          /**
           * Requested image width in pixels (allowed values 8 to 2048)
           */
          width: number,
          /**
           * Requested image height in pixels (allowed values 8 to 2048)
           */
          height: number,
          /**
           * The sap.ui.core.CSSColor to be used for top background color
           */
          topColor: string,
          /**
           * The sap.ui.core.CSSColor to be used for bottom background color
           */
          bottomColor: string,
          /**
           * Include selected nodes
           */
          includeSelection: boolean
        ): string;
        /**
         * Returns a metadata object for class sap.ui.vk.Viewport.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Retrieves information about the current camera view in the scene, and saves the information in a JSON-like
         * object. The information can then be used at a later time to restore the scene to the same camera view
         * using the {@link sap.ui.vk.Viewport#setViewInfo setViewInfo} method.
         */
        getViewInfo(
          /**
           * Query object which indicates what information to be retrieved.
           */
          query?: {
            /**
             * Indicator to retrieve camera information.
             */
            camera?: {
              /**
               * Indicator to retrieve camera view and projection matrices.
               */
              matrices?: boolean;
              /**
               * Indicator to retrieve the transition camera properties instead of regular one's.
               */
              useTransitionCamera?: boolean;
            };

            /**
             * Indicator to retrieve animation information.
             */
            animation?: boolean;
            /**
             * Indicator to retrieve visibility information.
             */
            visibility?: {
              /**
               * Indicator to retrieve the complete visibility definition or just the difference.
               */
              mode?: any;
            };
          }
        ): object;
        /**
         * Sets the current scene to use the camera view information acquired from the {@link sap.ui.vk.Viewport#getViewInfo
         * getViewInfo} method.
         *  Internally, the `setViewInfo` method activates certain steps at certain animation times, and then changes
         * the camera position, rotation and field of view (FOV) / zoom factor.
         */
        setViewInfo(
          /**
           * A JSON-like object containing view information acquired using the {@link sap.ui.vk.Viewport#getViewInfo
           * getViewInfo} method.
           */
          viewInfo: {
            /**
             * A JSON-like object containing the camera information.
             */
            camera?: {
              /**
               * Rotation defined in {@link https://en.wikipedia.org/wiki/Aircraft_principal_axes Aircraft principal axes}.
               */
              rotation: {
                /**
                 * Angle around the vertical axis in degrees.
                 */
                yaw: number;
                /**
                 * Angle around the lateral axis in degrees.
                 */
                pitch: number;
                /**
                 * Angle around the longitudinal axis in degrees.
                 */
                roll: number;
              };

              /**
               * Position defined in 3-dimensional space.
               */
              position: {
                /**
                 * X coordinate.
                 */
                x: number;
                /**
                 * Y coordinate.
                 */
                y: number;
                /**
                 * Z coordinate.
                 */
                z: number;
              };

              /**
               * Camera field of view binding type.
               */
              bindingType: any;
              /**
               * Camera projection type.
               */
              projectionType: any;
              /**
               * Camera field of view in degrees. Applicable only to perspective cameras.
               */
              fieldOfView: number;
              /**
               * Camera zoom factor. Applicable only to orthographic cameras.
               */
              zoomFactor: number;
            };

            /**
             * A JSON-like object containing the animation information.
             */
            animation?: {
              /**
               * Step VE ID. If it is omitted then procedure and step indices are used.
               */
              stepVeId?: string;
              /**
               * Procedure index in the list of procedures.
               */
              procedureIndex?: number;
              /**
               * Step index in the list of steps in the procedure.
               */
              stepIndex?: number;
              /**
               * Time at which to activate the step.
               */
              animationTime?: number;
            };

            /**
             * A JSON-like object containing the visibility information.
             */
            visibility?: {
              /**
               * If the mode equals to {@link sap.ui.vk.VisibilityMode.Complete complete} then the visible and hidden
               * fields are defined. If the mode equals {@link sap.ui.vk.VisibilityMode.Differences differences} then
               * the changes field is defined.
               */
              mode: any;
              /**
               * List of Ids of visible nodes.
               */
              visible: string[];
              /**
               * List of Ids of hidden nodes.
               */
              hidden: string[];
              /**
               * List of Ids of nodes with inverted visibility.
               */
              changes: string[];
            };
          },
          /**
           * Fly-to animation duration in seconds.
           */
          flyToDuration?: number
        ): sap.ui.vk.Viewport;
        /**/
        showHotspots(
          /**
           * The node reference or the array of node references that we want to tint.
           */
          nodeRefs: any | any[],
          /**
           * Whether to highlight the nodes or remove the highlight.
           */
          show: boolean,
          /**
           * The color to use for highlighting the nodes passed as argument.
           */
          color: number | any
        ): sap.ui.vk.Viewport;
        /**
         * Executes a click or tap gesture.
         */
        tap(
          /**
           * The tap gesture's x-coordinate.
           */
          x: number,
          /**
           * The tap gesture's y-coordinate.
           */
          y: number,
          /**
           * Indicates whether the tap gesture should be interpreted as a double-click. A value of `true` indicates
           * a double-click gesture, and `false` indicates a single click gesture.
           */
          isDoubleClick: boolean
        ): sap.ui.vk.Viewport;
        /**
         * Zooms the scene to a bounding box created from a particular set of nodes.
         */
        zoomTo(
          /**
           * What set of nodes to zoom to.
           */
          what: any | any,
          /**
           * Is only used if what == sap.ui.vk.ZoomTo.Node.
           */
          nodeRef: any,
          /**
           * Time to perform the "fly to" animation. Set to 0 to do this immediately.
           */
          crossFadeSeconds: number,
          /**
           * Margin. Set to 0 to zoom to the entire screen.
           */
          margin: number
        ): sap.ui.vk.Viewport;
      }
      /**
       * @SINCE 1.50.0
       *
       * Provides a rendering canvas for the 3D elements of a loaded scene.
       */
      class ViewportBase extends sap.ui.core.Control {
        /**
         * Constructor for a new Viewport.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new Viewport control. Generated automatically if no ID is given.
           */
          sId?: string,
          /**
           * Initial settings for the new Viewport control.
           */
          mSettings?: ViewportBaseOpts
        );

        /**
         * Calls activateView with view definition
         */
        activateView(
          /**
           * view object definition
           */
          view: sap.ui.vk.View,
          /**
           * Whether or not to play animations
           */
          notPlayingAnimations: boolean
        ): sap.ui.vk.ViewportBase;
        /**
         * Adds some content to the aggregation {@link #getContent content}.
         */
        addContent(
          /**
           * The content to add; if empty, nothing is inserted
           */
          oContent: sap.ui.core.Control
        ): sap.ui.vk.ViewportBase;
        /**
         * Adds some tool into the association {@link #getTools tools}.
         */
        addTool(
          /**
           * The tools to add; if empty, nothing is inserted
           */
          vTool: sap.ui.core.ID | sap.ui.vk.tools.Tool
        ): sap.ui.vk.ViewportBase;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:animationFinished animationFinished} event of
         * this `sap.ui.vk.ViewportBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewportBase` itself.
         *
         * This event is fired when a set of playbacks in a view end
         */
        attachAnimationFinished(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewportBase` itself
           */
          oListener?: object
        ): sap.ui.vk.ViewportBase;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:animationStarted animationStarted} event of
         * this `sap.ui.vk.ViewportBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewportBase` itself.
         *
         * This event is fired when a set of playbacks in a view start
         */
        attachAnimationStarted(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewportBase` itself
           */
          oListener?: object
        ): sap.ui.vk.ViewportBase;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:animationUpdated animationUpdated} event of
         * this `sap.ui.vk.ViewportBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewportBase` itself.
         *
         * This event is fired when animation tracks are updated by animation mixer
         */
        attachAnimationUpdated(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewportBase` itself
           */
          oListener?: object
        ): sap.ui.vk.ViewportBase;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:nodeClicked nodeClicked} event of this `sap.ui.vk.ViewportBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewportBase` itself.
         *
         * This event will be fired when a node is clicked.
         */
        attachNodeClicked(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewportBase` itself
           */
          oListener?: object
        ): sap.ui.vk.ViewportBase;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:nodesPicked nodesPicked} event of this `sap.ui.vk.ViewportBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewportBase` itself.
         *
         * This event is fired when nodes in the scene are picked by user action. If application requires different
         * selection behaviour then it can handle this event and implement its own selection method. In this case
         * {@link sap.ui.vk.Viewport#selectionMode selectionMode} property should be set to `sap.ui.vk.SelectionMode.None`
         * Application can modify list of picked node references to alter selection behaviour.
         */
        attachNodesPicked(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewportBase` itself
           */
          oListener?: object
        ): sap.ui.vk.ViewportBase;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:nodeZoomed nodeZoomed} event of this `sap.ui.vk.ViewportBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewportBase` itself.
         *
         * This event is fired when a node in the scene is zoomed in/out by double-clicking.
         */
        attachNodeZoomed(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewportBase` itself
           */
          oListener?: object
        ): sap.ui.vk.ViewportBase;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:procedureFinished procedureFinished} event of
         * this `sap.ui.vk.ViewportBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewportBase` itself.
         *
         * This event is fired when the current procedure is done playing
         */
        attachProcedureFinished(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewportBase` itself
           */
          oListener?: object
        ): sap.ui.vk.ViewportBase;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:resize resize} event of this `sap.ui.vk.ViewportBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewportBase` itself.
         *
         * This event is fired when viewport size is changed.
         */
        attachResize(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewportBase` itself
           */
          oListener?: object
        ): sap.ui.vk.ViewportBase;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:urlClicked urlClicked} event of this `sap.ui.vk.ViewportBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewportBase` itself.
         *
         * This event is fired when a URL in a note is clicked.
         */
        attachUrlClicked(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewportBase` itself
           */
          oListener?: object
        ): sap.ui.vk.ViewportBase;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:viewActivated viewActivated} event of this `sap.ui.vk.ViewportBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewportBase` itself.
         *
         * This event is fired when a view in the viewport is activated
         */
        attachViewActivated(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewportBase` itself
           */
          oListener?: object
        ): sap.ui.vk.ViewportBase;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:viewFinished viewFinished} event of this `sap.ui.vk.ViewportBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewportBase` itself.
         *
         * This event is fired when the current view is done playing
         */
        attachViewFinished(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewportBase` itself
           */
          oListener?: object
        ): sap.ui.vk.ViewportBase;
        /**
         * Destroys all the content in the aggregation {@link #getContent content}.
         */
        destroyContent(): sap.ui.vk.ViewportBase;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:animationFinished animationFinished} event
         * of this `sap.ui.vk.ViewportBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachAnimationFinished(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.ViewportBase;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:animationStarted animationStarted} event of
         * this `sap.ui.vk.ViewportBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachAnimationStarted(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.ViewportBase;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:animationUpdated animationUpdated} event of
         * this `sap.ui.vk.ViewportBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachAnimationUpdated(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.ViewportBase;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:nodeClicked nodeClicked} event of this `sap.ui.vk.ViewportBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachNodeClicked(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.ViewportBase;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:nodesPicked nodesPicked} event of this `sap.ui.vk.ViewportBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachNodesPicked(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.ViewportBase;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:nodeZoomed nodeZoomed} event of this `sap.ui.vk.ViewportBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachNodeZoomed(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.ViewportBase;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:procedureFinished procedureFinished} event
         * of this `sap.ui.vk.ViewportBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachProcedureFinished(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.ViewportBase;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:resize resize} event of this `sap.ui.vk.ViewportBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachResize(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.ViewportBase;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:urlClicked urlClicked} event of this `sap.ui.vk.ViewportBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachUrlClicked(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.ViewportBase;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:viewActivated viewActivated} event of this
         * `sap.ui.vk.ViewportBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachViewActivated(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.ViewportBase;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:viewFinished viewFinished} event of this `sap.ui.vk.ViewportBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachViewFinished(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.ViewportBase;
        /**
         * Helper method used to provide exclusive selection method. If this method is used then nodes are marked
         * as selected while all previously selected objects are deselected. If this is called with empty nodes
         * list then all already selected nodes are deselected.
         */
        exclusiveSelectionHandler(
          /**
           * Array of node references
           */
          nodes: any[]
        ): void;
        /**
         * Creates a new subclass of class sap.ui.vk.ViewportBase with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:animationFinished animationFinished} to attached listeners.
         */
        fireAnimationFinished(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): sap.ui.vk.ViewportBase;
        /**
         * Fires event {@link #event:animationStarted animationStarted} to attached listeners.
         */
        fireAnimationStarted(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): sap.ui.vk.ViewportBase;
        /**
         * Fires event {@link #event:animationUpdated animationUpdated} to attached listeners.
         */
        fireAnimationUpdated(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            value?: number;
          }
        ): sap.ui.vk.ViewportBase;
        /**
         * Fires event {@link #event:nodeClicked nodeClicked} to attached listeners.
         */
        fireNodeClicked(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Returns a node reference.
             */
            nodeRef?: any;

            x?: number;

            y?: number;
          }
        ): sap.ui.vk.ViewportBase;
        /**
         * Fires event {@link #event:nodesPicked nodesPicked} to attached listeners.
         */
        fireNodesPicked(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * References of the nodes that are picked.
             */
            picked?: any[];
          }
        ): sap.ui.vk.ViewportBase;
        /**
         * Fires event {@link #event:nodeZoomed nodeZoomed} to attached listeners.
         */
        fireNodeZoomed(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Reference of the node that is zoomed.
             */
            zoomed?: any;
            /**
             * True for zoom in, and false for zoom out.
             */
            isZoomIn?: boolean;
          }
        ): sap.ui.vk.ViewportBase;
        /**
         * Fires event {@link #event:procedureFinished procedureFinished} to attached listeners.
         */
        fireProcedureFinished(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): sap.ui.vk.ViewportBase;
        /**
         * Fires event {@link #event:resize resize} to attached listeners.
         */
        fireResize(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Returns the width and height of new size { width: number, height: number } in CSS pixels.
             */
            size?: object;
          }
        ): sap.ui.vk.ViewportBase;
        /**
         * Fires event {@link #event:urlClicked urlClicked} to attached listeners.
         */
        fireUrlClicked(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Returns a node reference of the note that contains the URL.
             */
            nodeRef?: any;
            /**
             * Returns a URL that was clicked.
             */
            url?: string;
          }
        ): sap.ui.vk.ViewportBase;
        /**
         * Fires event {@link #event:viewActivated viewActivated} to attached listeners.
         */
        fireViewActivated(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Index of the activated view
             */
            viewIndex?: number;
            /**
             * The activated view
             */
            view?: sap.ui.vk.View;
            /**
             * The type of content loaded into the Viewport (for example: 2D, 3D).
             */
            type?: string;
          }
        ): sap.ui.vk.ViewportBase;
        /**
         * Fires event {@link #event:viewFinished viewFinished} to attached listeners.
         */
        fireViewFinished(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            viewIndex?: number;
          }
        ): sap.ui.vk.ViewportBase;
        /**
         * Gets current value of property {@link #getBackgroundColorBottom backgroundColorBottom}.
         *
         * Viewport background bottom color in the CSS Color format
         *
         * Default value is `rgba(255, 255, 255, 1)`.
         */
        getBackgroundColorBottom(): sap.ui.core.CSSColor;
        /**
         * Gets current value of property {@link #getBackgroundColorTop backgroundColorTop}.
         *
         * Viewport background top color in the CSS Color format
         *
         * Default value is `rgba(50, 50, 50, 1)`.
         */
        getBackgroundColorTop(): sap.ui.core.CSSColor;
        /**
         * Gets current camera to the viewport
         */
        getCamera(): sap.ui.vk.Camera;
        /**
         * Gets content of aggregation {@link #getContent content}.
         *
         * The controls inside the viewport.
         */
        getContent(): sap.ui.core.Control[];
        /**
         * ID of the element which is the current target of the association {@link #getContentConnector contentConnector},
         * or `null`.
         */
        getContentConnector(): sap.ui.core.ID;
        /**
         * Gets current value of property {@link #getFreezeCamera freezeCamera}.
         *
         * Freeze camera
         *
         * Default value is `false`.
         */
        getFreezeCamera(): boolean;
        /**
         * Gets current value of property {@link #getHeight height}.
         *
         * Viewport height
         *
         * Default value is `100%`.
         */
        getHeight(): sap.ui.core.CSSSize;
        /**
         * Returns a metadata object for class sap.ui.vk.ViewportBase.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getRenderMode renderMode}.
         *
         * Viewport render mode
         *
         * Default value is `Default`.
         */
        getRenderMode(): any;
        /**
         * Gets current value of property {@link #getSelectionMode selectionMode}.
         *
         * Selection mode
         *
         * Default value is `Sticky`.
         */
        getSelectionMode(): any;
        /**
         * Gets current value of property {@link #getShowDebugInfo showDebugInfo}.
         *
         * Shows or hides the debug info.
         *
         * Default value is `false`.
         */
        getShowDebugInfo(): boolean;
        /**
         * Returns array of IDs of the elements which are the current targets of the association {@link #getTools
         * tools}.
         */
        getTools(): sap.ui.core.ID[];
        /**
         * ID of the element which is the current target of the association {@link #getViewStateManager viewStateManager},
         * or `null`.
         */
        getViewStateManager(): sap.ui.core.ID;
        /**
         * Gets current value of property {@link #getWidth width}.
         *
         * Viewport width
         *
         * Default value is `100%`.
         */
        getWidth(): sap.ui.core.CSSSize;
        /**
         * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getContent content}. and returns
         * its index if found or -1 otherwise.
         */
        indexOfContent(
          /**
           * The content whose index is looked for
           */
          oContent: sap.ui.core.Control
        ): number;
        /**
         * Inserts a content into the aggregation {@link #getContent content}.
         */
        insertContent(
          /**
           * The content to insert; if empty, nothing is inserted
           */
          oContent: sap.ui.core.Control,
          /**
           * The `0`-based index the content should be inserted at; for a negative value of `iIndex`, the content
           * is inserted at position 0; for a value greater than the current size of the aggregation, the content
           * is inserted at the last position
           */
          iIndex: number
        ): sap.ui.vk.ViewportBase;
        /**
         * Performs a `pan` gesture to pan across the Viewport.
         */
        pan(
          /**
           * The change in distance along the x-coordinate.
           */
          dx: number,
          /**
           * The change in distance along the y-coordinate.
           */
          dy: number
        ): sap.ui.vk.ViewportBase;
        /**
         * Removes all the controls from the aggregation {@link #getContent content}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllContent(): sap.ui.core.Control[];
        /**
         * Removes all the controls in the association named {@link #getTools tools}.
         */
        removeAllTools(): sap.ui.core.ID[];
        /**
         * Removes a content from the aggregation {@link #getContent content}.
         */
        removeContent(
          /**
           * The content to remove or its index or id
           */
          vContent: number | string | sap.ui.core.Control
        ): sap.ui.core.Control;
        /**
         * Removes an tool from the association named {@link #getTools tools}.
         */
        removeTool(
          /**
           * The tool to be removed or its index or ID
           */
          vTool: number | sap.ui.core.ID | sap.ui.vk.tools.Tool
        ): sap.ui.core.ID;
        /**
         * Rotates the content resource displayed on the Viewport.
         */
        rotate(
          /**
           * The change in x-coordinate used to define the desired rotation.
           */
          dx: number,
          /**
           * The change in y-coordinate used to define the desired rotation.
           */
          dy: number
        ): sap.ui.vk.ViewportBase;
        /**
         * Sets a new value for property {@link #getBackgroundColorBottom backgroundColorBottom}.
         *
         * Viewport background bottom color in the CSS Color format
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `rgba(255, 255, 255, 1)`.
         */
        setBackgroundColorBottom(
          /**
           * New value for property `backgroundColorBottom`
           */
          sBackgroundColorBottom: sap.ui.core.CSSColor
        ): sap.ui.vk.ViewportBase;
        /**
         * Sets a new value for property {@link #getBackgroundColorTop backgroundColorTop}.
         *
         * Viewport background top color in the CSS Color format
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `rgba(50, 50, 50, 1)`.
         */
        setBackgroundColorTop(
          /**
           * New value for property `backgroundColorTop`
           */
          sBackgroundColorTop: sap.ui.core.CSSColor
        ): sap.ui.vk.ViewportBase;
        /**
         * @SINCE 1.52.0
         *
         * Sets current camera to the viewport
         */
        setCamera(
          /**
           * If the `camera` parameter is not `null`, the camera is replaced. If the `camera` parameter is `null`,
           * the current camera is destroyed.
           */
          camera: sap.ui.vk.Camera
        ): sap.ui.vk.Viewport;
        /**
         * Sets the associated {@link #getContentConnector contentConnector}.
         */
        setContentConnector(
          /**
           * ID of an element which becomes the new target of this contentConnector association; alternatively, an
           * element instance may be given
           */
          oContentConnector: sap.ui.core.ID | sap.ui.vk.ContentConnector
        ): sap.ui.vk.ViewportBase;
        /**
         * Sets a new value for property {@link #getFreezeCamera freezeCamera}.
         *
         * Freeze camera
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setFreezeCamera(
          /**
           * New value for property `freezeCamera`
           */
          bFreezeCamera: boolean
        ): sap.ui.vk.ViewportBase;
        /**
         * Sets a new value for property {@link #getHeight height}.
         *
         * Viewport height
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `100%`.
         */
        setHeight(
          /**
           * New value for property `height`
           */
          sHeight: sap.ui.core.CSSSize
        ): sap.ui.vk.ViewportBase;
        /**
         * Sets a new value for property {@link #getRenderMode renderMode}.
         *
         * Viewport render mode
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `Default`.
         */
        setRenderMode(
          /**
           * New value for property `renderMode`
           */
          sRenderMode: any
        ): sap.ui.vk.ViewportBase;
        /**
         * Sets a new value for property {@link #getSelectionMode selectionMode}.
         *
         * Selection mode
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `Sticky`.
         */
        setSelectionMode(
          /**
           * New value for property `selectionMode`
           */
          sSelectionMode: any
        ): sap.ui.vk.ViewportBase;
        /**
         * Sets a new value for property {@link #getShowDebugInfo showDebugInfo}.
         *
         * Shows or hides the debug info.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setShowDebugInfo(
          /**
           * New value for property `showDebugInfo`
           */
          bShowDebugInfo: boolean
        ): sap.ui.vk.ViewportBase;
        /**
         * Sets the associated {@link #getViewStateManager viewStateManager}.
         */
        setViewStateManager(
          /**
           * ID of an element which becomes the new target of this viewStateManager association; alternatively, an
           * element instance may be given
           */
          oViewStateManager: sap.ui.core.ID | sap.ui.vk.ViewStateManager
        ): sap.ui.vk.ViewportBase;
        /**
         * Sets a new value for property {@link #getWidth width}.
         *
         * Viewport width
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `100%`.
         */
        setWidth(
          /**
           * New value for property `width`
           */
          sWidth: sap.ui.core.CSSSize
        ): sap.ui.vk.ViewportBase;
        /**
         * Helper method to provide "sticky" selection method. If this method is used then nodes are added into
         * selection if they were not selected before, otherwise they are removed from selection. If this is called
         * with empty nodes list then all already selected nodes are deselected.
         */
        stickySelectionHandler(
          /**
           * Array of node references
           */
          nodes: any[]
        ): void;
        /**
         * Performs a `zoom` gesture to zoom in or out on the beginGesture coordinate.
         */
        zoom(
          /**
           * Zoom factor. A scale factor that specifies how much to zoom in or out by.
           */
          dy: number
        ): sap.ui.vk.ViewportBase;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:animationFinished animationFinished} event of
         * this `sap.ui.vk.ViewportBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewportBase` itself.
         *
         * This event is fired when a set of playbacks in a view end
         */
        attachAnimationFinished(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewportBase` itself
           */
          oListener?: object
        ): sap.ui.vk.ViewportBase;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:animationStarted animationStarted} event of
         * this `sap.ui.vk.ViewportBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewportBase` itself.
         *
         * This event is fired when a set of playbacks in a view start
         */
        attachAnimationStarted(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewportBase` itself
           */
          oListener?: object
        ): sap.ui.vk.ViewportBase;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:animationUpdated animationUpdated} event of
         * this `sap.ui.vk.ViewportBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewportBase` itself.
         *
         * This event is fired when animation tracks are updated by animation mixer
         */
        attachAnimationUpdated(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewportBase` itself
           */
          oListener?: object
        ): sap.ui.vk.ViewportBase;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:nodeClicked nodeClicked} event of this `sap.ui.vk.ViewportBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewportBase` itself.
         *
         * This event will be fired when a node is clicked.
         */
        attachNodeClicked(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewportBase` itself
           */
          oListener?: object
        ): sap.ui.vk.ViewportBase;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:nodesPicked nodesPicked} event of this `sap.ui.vk.ViewportBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewportBase` itself.
         *
         * This event is fired when nodes in the scene are picked by user action. If application requires different
         * selection behaviour then it can handle this event and implement its own selection method. In this case
         * {@link sap.ui.vk.Viewport#selectionMode selectionMode} property should be set to `sap.ui.vk.SelectionMode.None`
         * Application can modify list of picked node references to alter selection behaviour.
         */
        attachNodesPicked(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewportBase` itself
           */
          oListener?: object
        ): sap.ui.vk.ViewportBase;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:nodeZoomed nodeZoomed} event of this `sap.ui.vk.ViewportBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewportBase` itself.
         *
         * This event is fired when a node in the scene is zoomed in/out by double-clicking.
         */
        attachNodeZoomed(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewportBase` itself
           */
          oListener?: object
        ): sap.ui.vk.ViewportBase;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:procedureFinished procedureFinished} event of
         * this `sap.ui.vk.ViewportBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewportBase` itself.
         *
         * This event is fired when the current procedure is done playing
         */
        attachProcedureFinished(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewportBase` itself
           */
          oListener?: object
        ): sap.ui.vk.ViewportBase;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:resize resize} event of this `sap.ui.vk.ViewportBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewportBase` itself.
         *
         * This event is fired when viewport size is changed.
         */
        attachResize(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewportBase` itself
           */
          oListener?: object
        ): sap.ui.vk.ViewportBase;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:urlClicked urlClicked} event of this `sap.ui.vk.ViewportBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewportBase` itself.
         *
         * This event is fired when a URL in a note is clicked.
         */
        attachUrlClicked(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewportBase` itself
           */
          oListener?: object
        ): sap.ui.vk.ViewportBase;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:viewActivated viewActivated} event of this `sap.ui.vk.ViewportBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewportBase` itself.
         *
         * This event is fired when a view in the viewport is activated
         */
        attachViewActivated(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewportBase` itself
           */
          oListener?: object
        ): sap.ui.vk.ViewportBase;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:viewFinished viewFinished} event of this `sap.ui.vk.ViewportBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewportBase` itself.
         *
         * This event is fired when the current view is done playing
         */
        attachViewFinished(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewportBase` itself
           */
          oListener?: object
        ): sap.ui.vk.ViewportBase;
      }
      /**
       * @SINCE 1.32.0
       *
       * Manages the visibility and selection states of nodes in the scene.
       */
      class ViewStateManager extends sap.ui.vk.ViewStateManagerBase {
        /**
         * Constructor for a new ViewStateManager.
         */
        constructor(
          /**
           * ID for the new ViewStateManager object. Generated automatically if no ID is given.
           */
          sId?: string,
          /**
           * Initial settings for the new ViewStateManager object.
           */
          mSettings?: ViewStateManagerOpts
        );

        /**
         * Enumerates IDs of the selected nodes.
         */
        // @ts-ignore
        enumerateSelection(
          /**
           * A function to call when the selected nodes are enumerated. The function takes one parameter of type `string`.
           */
          callback: Function
        ): sap.ui.vk.ViewStateManager;
        /**
         * Creates a new subclass of class sap.ui.vk.ViewStateManager with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.vk.ViewStateManagerBase.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets the default highlighting color
         */
        getHighlightColor(
          /**
           * This flag indicates to return the default highlighting color in the ABGR format, if it equals `false`
           * then the color is returned in the CSS color format.
           */
          inABGRFormat?: boolean
        ): sap.ui.core.CSSColor | string | number;
        /**
         * Returns a metadata object for class sap.ui.vk.ViewStateManager.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets the NodeHierarchy object associated with this ViewStateManager object.
         */
        // @ts-ignore
        getNodeHierarchy(): sap.ui.vk.NodeHierarchy;
        /**
         * Gets the opacity of the node.
         *
         * If a single node reference is passed to the method then a single value is returned.
         *  If an array of node references is passed to the method then an array of values is returned.
         */
        // @ts-ignore
        getOpacity(
          /**
           * The node reference or the array of node references.
           */
          nodeRefs: any | any[]
        ): number | number[];
        /**
         * Gets the selection state of the node.
         *
         * If a single node reference is passed to the method then a single selection state is returned.
         *  If an array of node references is passed to the method then an array of selection states is returned.
         */
        // @ts-ignore
        getSelectionState(
          /**
           * The node reference or the array of node references.
           */
          nodeRefs: any | any[]
        ): boolean | boolean[];
        /**
         * Gets if showing the bounding box when nodes are selected
         */
        getShowSelectionBoundingBox(): boolean;
        /**
         * Gets the tint color of the node.
         *
         * If a single node reference is passed to the method then a single value is returned.
         *  If an array of node references is passed to the method then an array of values is returned.
         */
        // @ts-ignore
        getTintColor(
          /**
           * The node reference or the array of node references.
           */
          nodeRefs: any | any[],
          /**
           * This flag indicates to return the tint color in the ABGR format, if it equals `false` then the color
           * is returned in the CSS color format.
           */
          inABGRFormat?: boolean
        ): sap.ui.core.CSSColor | sap.ui.core.CSSColor[] | number | number[];
        /**
         * Gets the visibility changes in the current ViewStateManager object.
         */
        // @ts-ignore
        getVisibilityChanges(): string[];
        /**
         * Gets the visibility state of nodes.
         *
         * If a single node reference is passed to the method then a single visibility state is returned.
         *  If an array of node references is passed to the method then an array of visibility states is returned.
         */
        // @ts-ignore
        getVisibilityState(
          /**
           * The node reference or the array of node references.
           */
          nodeRefs: any | any[]
        ): boolean | boolean[];
        /**
         * Resets the visibility states of all nodes to the initial states.
         */
        // @ts-ignore
        resetVisibility(): sap.ui.vk.ViewStateManagerBase;
        /**
         * Sets the default highlighting color
         */
        setHighlightColor(
          /**
           * The new default highlighting color. The value can be defined as a string in the CSS color format or as
           * an integer in the ABGR format. If `null` is passed then the tint color is reset and the node's own tint
           * color should be used.
           */
          color: any | string | number
        ): sap.ui.vk.ViewStateManager;
        /**
         * Sets the opacity of the nodes.
         */
        // @ts-ignore
        setOpacity(
          /**
           * The node reference or the array of node references.
           */
          nodeRefs: any | any[],
          /**
           * The new opacity of the nodes. If `null` is passed then the opacity is reset and the node's own opacity
           * should be used.
           */
          opacity: number | null,
          /**
           * The flags indicates if the change needs to propagate recursively to child nodes.
           */
          recursive?: boolean
        ): sap.ui.vk.ViewStateManager;
        /**
         * @deprecated (since 1.56.3)
         *
         * Sets the selection state of the nodes.
         */
        // @ts-ignore
        setSelectionState(
          /**
           * The node reference or the array of node references.
           */
          nodeRefs: any | any[],
          /**
           * The new selection state of the nodes.
           */
          selected: boolean,
          /**
           * The flags indicates if the change needs to propagate recursively to child nodes.
           */
          recursive: boolean
        ): sap.ui.vk.ViewStateManager;
        /**
         * Sets or resets the selection state of the nodes.
         */
        // @ts-ignore
        setSelectionStates(
          /**
           * The node reference or the array of node references of selected nodes.
           */
          selectedNodeRefs: any | any[],
          /**
           * The node reference or the array of node references of unselected nodes.
           */
          unselectedNodeRefs: any | any[],
          /**
           * The flags indicates if the change needs to propagate recursively to child nodes.
           */
          recursive: boolean
        ): sap.ui.vk.ViewStateManager;
        /**
         * Sets if showing the bounding box when nodes are selected
         */
        setShowSelectionBoundingBox(
          /**
           * `true` if bounding boxes of selected nodes are shown, `false` otherwise.
           */
          val: boolean
        ): void;
        /**
         * Sets the tint color of the nodes.
         */
        // @ts-ignore
        setTintColor(
          /**
           * The node reference or the array of node references.
           */
          nodeRefs: any | any[],
          /**
           * The new tint color of the nodes. The value can be defined as a string in the CSS color format or as an
           * integer in the ABGR format. If `null` is passed then the tint color is reset and the node's own tint
           * color should be used.
           */
          tintColor: any | number | null,
          /**
           * This flag indicates if the change needs to propagate recursively to child nodes.
           */
          recursive?: boolean
        ): sap.ui.vk.ViewStateManager;
        /**
         * Sets the visibility state of the nodes.
         */
        // @ts-ignore
        setVisibilityState(
          /**
           * The node reference or the array of node references.
           */
          nodeRefs: any | any[],
          /**
           * The new visibility state of the nodes.
           */
          visible: boolean,
          /**
           * The flags indicates if the change needs to propagate recursively to child nodes.
           */
          recursive: boolean
        ): sap.ui.vk.ViewStateManager;
      }
      /**
       * @SINCE 1.32.0
       *
       * Manages the visibility and selection states of nodes in the scene.
       */
      class ViewStateManagerBase extends sap.ui.core.Element {
        /**
         * Constructor for a new ViewStateManagerBase.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new ViewStateManagerBase object. Generated automatically if no ID is given.
           */
          sId?: string,
          /**
           * Initial settings for the new ViewStateManagerBase object.
           */
          mSettings?: ViewStateManagerBaseOpts
        );

        /**
         * Attaches event handler `fnFunction` to the {@link #event:highlightColorChanged highlightColorChanged}
         * event of this `sap.ui.vk.ViewStateManagerBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewStateManagerBase` itself.
         *
         * This event is fired when highlighting color is changed.
         */
        attachHighlightColorChanged(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewStateManagerBase` itself
           */
          oListener?: object
        ): sap.ui.vk.ViewStateManagerBase;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:nodeHierarchyReplaced nodeHierarchyReplaced}
         * event of this `sap.ui.vk.ViewStateManagerBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewStateManagerBase` itself.
         *
         * This event is fired when the node hierarchy is replaced.
         */
        attachNodeHierarchyReplaced(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewStateManagerBase` itself
           */
          oListener?: object
        ): sap.ui.vk.ViewStateManagerBase;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:opacityChanged opacityChanged} event of this
         * `sap.ui.vk.ViewStateManagerBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewStateManagerBase` itself.
         *
         * This event is fired when opacity of the nodes is changed.
         */
        attachOpacityChanged(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewStateManagerBase` itself
           */
          oListener?: object
        ): sap.ui.vk.ViewStateManagerBase;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:selectionChanged selectionChanged} event of
         * this `sap.ui.vk.ViewStateManagerBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewStateManagerBase` itself.
         *
         * This event is fired when the nodes are selected/unselected.
         */
        attachSelectionChanged(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewStateManagerBase` itself
           */
          oListener?: object
        ): sap.ui.vk.ViewStateManagerBase;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:tintColorChanged tintColorChanged} event of
         * this `sap.ui.vk.ViewStateManagerBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewStateManagerBase` itself.
         *
         * This event is fired when tint color of the nodes is changed.
         */
        attachTintColorChanged(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewStateManagerBase` itself
           */
          oListener?: object
        ): sap.ui.vk.ViewStateManagerBase;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:visibilityChanged visibilityChanged} event of
         * this `sap.ui.vk.ViewStateManagerBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewStateManagerBase` itself.
         *
         * This event is fired when the visibility of the node changes.
         */
        attachVisibilityChanged(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewStateManagerBase` itself
           */
          oListener?: object
        ): sap.ui.vk.ViewStateManagerBase;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:highlightColorChanged highlightColorChanged}
         * event of this `sap.ui.vk.ViewStateManagerBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachHighlightColorChanged(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.ViewStateManagerBase;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:nodeHierarchyReplaced nodeHierarchyReplaced}
         * event of this `sap.ui.vk.ViewStateManagerBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachNodeHierarchyReplaced(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.ViewStateManagerBase;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:opacityChanged opacityChanged} event of this
         * `sap.ui.vk.ViewStateManagerBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachOpacityChanged(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.ViewStateManagerBase;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:selectionChanged selectionChanged} event of
         * this `sap.ui.vk.ViewStateManagerBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachSelectionChanged(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.ViewStateManagerBase;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:tintColorChanged tintColorChanged} event of
         * this `sap.ui.vk.ViewStateManagerBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachTintColorChanged(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.ViewStateManagerBase;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:visibilityChanged visibilityChanged} event
         * of this `sap.ui.vk.ViewStateManagerBase`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachVisibilityChanged(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.ui.vk.ViewStateManagerBase;
        /**
         * Enumerates IDs of the selected nodes.
         */
        enumerateSelection(
          /**
           * A function to call when the selected nodes are enumerated. The function takes one parameter of type `string`.
           */
          callback: Function
        ): sap.ui.vk.ViewStateManagerBase;
        /**
         * Creates a new subclass of class sap.ui.vk.ViewStateManagerBase with name `sClassName` and enriches it
         * with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:highlightColorChanged highlightColorChanged} to attached listeners.
         */
        fireHighlightColorChanged(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Highlighting color
             */
            highlightColor?: sap.ui.core.CSSColor;
            /**
             * Highlighting color in the ABGR format.
             */
            highlightColorABGR?: number;
          }
        ): sap.ui.vk.ViewStateManagerBase;
        /**
         * Fires event {@link #event:nodeHierarchyReplaced nodeHierarchyReplaced} to attached listeners.
         */
        fireNodeHierarchyReplaced(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Old node hierarchy
             */
            oldNodeHierarchy?: sap.ui.vk.NodeHierarchy;
            /**
             * New node hierarchy
             */
            newNodeHierarchy?: sap.ui.vk.NodeHierarchy;
          }
        ): sap.ui.vk.ViewStateManagerBase;
        /**
         * Fires event {@link #event:opacityChanged opacityChanged} to attached listeners.
         */
        fireOpacityChanged(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * References of nodes whose opacity changed.
             */
            changed?: any[];
            /**
             * Opacity assigned to the nodes.
             */
            opacity?: number;
          }
        ): sap.ui.vk.ViewStateManagerBase;
        /**
         * Fires event {@link #event:selectionChanged selectionChanged} to attached listeners.
         */
        fireSelectionChanged(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * References of newly selected nodes.
             */
            selected?: any[];
            /**
             * References of newly unselected nodes.
             */
            unselected?: any[];
          }
        ): sap.ui.vk.ViewStateManagerBase;
        /**
         * Fires event {@link #event:tintColorChanged tintColorChanged} to attached listeners.
         */
        fireTintColorChanged(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * References of nodes whose tint color changed.
             */
            changed?: any[];
            /**
             * Tint color assigned to the nodes.
             */
            tintColor?: sap.ui.core.CSSColor;
            /**
             * Tint color in the ABGR format assigned to the nodes.
             */
            tintColorABGR?: number;
          }
        ): sap.ui.vk.ViewStateManagerBase;
        /**
         * Fires event {@link #event:visibilityChanged visibilityChanged} to attached listeners.
         */
        fireVisibilityChanged(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * References of newly shown nodes.
             */
            visible?: any[];
            /**
             * IDs of newly hidden nodes.
             */
            hidden?: any[];
          }
        ): sap.ui.vk.ViewStateManagerBase;
        /**
         * ID of the element which is the current target of the association {@link #getContentConnector contentConnector},
         * or `null`.
         */
        getContentConnector(): sap.ui.core.ID;
        /**
         * Returns a metadata object for class sap.ui.vk.ViewStateManagerBase.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets the NodeHierarchy object associated with this ViewStateManagerBase object.
         */
        getNodeHierarchy(): sap.ui.vk.NodeHierarchy;
        /**
         * Gets the opacity of the node.
         *
         * If a single node reference is passed to the method then a single value is returned.
         *  If an array of node references is passed to the method then an array of values is returned.
         */
        getOpacity(
          /**
           * The node reference or the array of node references.
           */
          nodeRefs: any | any[]
        ): number | number[];
        /**
         * Gets current value of property {@link #getRecursiveSelection recursiveSelection}.
         *
         * Default value is `false`.
         */
        getRecursiveSelection(): boolean;
        /**
         * Gets the selection state of the node.
         *
         * If a single node reference is passed to the method then a single selection state is returned.
         *  If an array of node references is passed to the method then an array of selection states is returned.
         */
        getSelectionState(
          /**
           * The node reference or the array of node references.
           */
          nodeRefs: any | any[]
        ): boolean | boolean[];
        /**
         * Gets current value of property {@link #getShouldTrackVisibilityChanges shouldTrackVisibilityChanges}.
         *
         * Default value is `false`.
         */
        getShouldTrackVisibilityChanges(): boolean;
        /**
         * Gets the tint color of the node.
         *
         * If a single node reference is passed to the method then a single value is returned.
         *  If an array of node references is passed to the method then an array of values is returned.
         */
        getTintColor(
          /**
           * The node reference or the array of node references.
           */
          nodeRefs: any | any[],
          /**
           * This flag indicates to return the tint color in the ABGR format, if it equals `false` then the color
           * is returned in the CSS color format.
           */
          inABGRFormat?: boolean
        ): sap.ui.core.CSSColor | sap.ui.core.CSSColor[] | number | number[];
        /**
         * Gets the visibility changes in the current ViewStateManagerBase object.
         */
        getVisibilityChanges(): string[];
        /**
         * Gets the visibility state of nodes.
         *
         * If a single node reference is passed to the method then a single visibility state is returned.
         *  If an array of node references is passed to the method then an array of visibility states is returned.
         */
        getVisibilityState(
          /**
           * The node reference or the array of node references.
           */
          nodeRefs: any | any[]
        ): boolean | boolean[];
        /**
         * Resets the visibility states of all nodes to the initial states.
         */
        resetVisibility(): sap.ui.vk.ViewStateManagerBase;
        /**
         * Sets the associated {@link #getContentConnector contentConnector}.
         */
        setContentConnector(
          /**
           * ID of an element which becomes the new target of this contentConnector association; alternatively, an
           * element instance may be given
           */
          oContentConnector: sap.ui.core.ID | sap.ui.vk.ContentConnector
        ): sap.ui.vk.ViewStateManagerBase;
        /**
         * Sets the opacity of the nodes.
         */
        setOpacity(
          /**
           * The node reference or the array of node references.
           */
          nodeRefs: any | any[],
          /**
           * The new opacity of the nodes. If `null` is passed then the opacity is reset and the node's own opacity
           * should be used.
           */
          opacity: number | null,
          /**
           * The flags indicates if the change needs to propagate recursively to child nodes.
           */
          recursive?: boolean
        ): sap.ui.vk.ViewStateManagerBase;
        /**
         * Sets a new value for property {@link #getRecursiveSelection recursiveSelection}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setRecursiveSelection(
          /**
           * New value for property `recursiveSelection`
           */
          bRecursiveSelection: boolean
        ): sap.ui.vk.ViewStateManagerBase;
        /**
         * @deprecated (since 1.56.3)
         *
         * Sets the selection state of the nodes.
         */
        setSelectionState(
          /**
           * The node reference or the array of node references.
           */
          nodeRefs: any | any[],
          /**
           * The new selection state of the nodes.
           */
          selected: boolean,
          /**
           * The flags indicates if the change needs to propagate recursively to child nodes.
           */
          recursive: boolean,
          /**
           * The flag to suppres selectionChanged event.
           */
          blockNotification: boolean
        ): sap.ui.vk.ViewStateManagerBase;
        /**
         * Sets or resets the selection state of the nodes.
         */
        setSelectionStates(
          /**
           * The node reference or the array of node references of selected nodes.
           */
          selectedNodeRefs: any | any[],
          /**
           * The node reference or the array of node references of unselected nodes.
           */
          unselectedNodeRefs: any | any[],
          /**
           * The flags indicates if the change needs to propagate recursively to child nodes.
           */
          recursive: boolean,
          /**
           * The flag to suppres selectionChanged event.
           */
          blockNotification: boolean
        ): sap.ui.vk.ViewStateManagerBase;
        /**
         * Sets a new value for property {@link #getShouldTrackVisibilityChanges shouldTrackVisibilityChanges}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setShouldTrackVisibilityChanges(
          /**
           * New value for property `shouldTrackVisibilityChanges`
           */
          bShouldTrackVisibilityChanges: boolean
        ): sap.ui.vk.ViewStateManagerBase;
        /**
         * Sets the tint color of the nodes.
         */
        setTintColor(
          /**
           * The node reference or the array of node references.
           */
          nodeRefs: any | any[],
          /**
           * The new tint color of the nodes. The value can be defined as a string in the CSS color format or as an
           * integer in the ABGR format. If `null` is passed then the tint color is reset and the node's own tint
           * color should be used.
           */
          tintColor: any | number | null,
          /**
           * This flag indicates if the change needs to propagate recursively to child nodes.
           */
          recursive?: boolean
        ): sap.ui.vk.ViewStateManagerBase;
        /**
         * Sets the visibility state of the nodes.
         */
        setVisibilityState(
          /**
           * The node reference or the array of node references.
           */
          nodeRefs: any | any[],
          /**
           * The new visibility state of the nodes.
           */
          visible: boolean,
          /**
           * The flags indicates if the change needs to propagate recursively to child nodes.
           */
          recursive: boolean
        ): sap.ui.vk.ViewStateManagerBase;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:highlightColorChanged highlightColorChanged}
         * event of this `sap.ui.vk.ViewStateManagerBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewStateManagerBase` itself.
         *
         * This event is fired when highlighting color is changed.
         */
        attachHighlightColorChanged(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewStateManagerBase` itself
           */
          oListener?: object
        ): sap.ui.vk.ViewStateManagerBase;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:nodeHierarchyReplaced nodeHierarchyReplaced}
         * event of this `sap.ui.vk.ViewStateManagerBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewStateManagerBase` itself.
         *
         * This event is fired when the node hierarchy is replaced.
         */
        attachNodeHierarchyReplaced(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewStateManagerBase` itself
           */
          oListener?: object
        ): sap.ui.vk.ViewStateManagerBase;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:opacityChanged opacityChanged} event of this
         * `sap.ui.vk.ViewStateManagerBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewStateManagerBase` itself.
         *
         * This event is fired when opacity of the nodes is changed.
         */
        attachOpacityChanged(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewStateManagerBase` itself
           */
          oListener?: object
        ): sap.ui.vk.ViewStateManagerBase;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:selectionChanged selectionChanged} event of
         * this `sap.ui.vk.ViewStateManagerBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewStateManagerBase` itself.
         *
         * This event is fired when the nodes are selected/unselected.
         */
        attachSelectionChanged(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewStateManagerBase` itself
           */
          oListener?: object
        ): sap.ui.vk.ViewStateManagerBase;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:tintColorChanged tintColorChanged} event of
         * this `sap.ui.vk.ViewStateManagerBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewStateManagerBase` itself.
         *
         * This event is fired when tint color of the nodes is changed.
         */
        attachTintColorChanged(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewStateManagerBase` itself
           */
          oListener?: object
        ): sap.ui.vk.ViewStateManagerBase;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:visibilityChanged visibilityChanged} event of
         * this `sap.ui.vk.ViewStateManagerBase`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.ui.vk.ViewStateManagerBase` itself.
         *
         * This event is fired when the visibility of the node changes.
         */
        attachVisibilityChanged(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.ui.vk.ViewStateManagerBase` itself
           */
          oListener?: object
        ): sap.ui.vk.ViewStateManagerBase;
      }
    }
  }

  interface IUI5DefineDependencyNames {
    "sap/ui/vk/dvl/BaseNodeProxy": undefined;

    "sap/ui/vk/dvl/ContentManager": undefined;

    "sap/ui/vk/dvl/GraphicsCore": undefined;

    "sap/ui/vk/dvl/LayerProxy": undefined;

    "sap/ui/vk/dvl/NodeHierarchy": undefined;

    "sap/ui/vk/dvl/NodeProxy": undefined;

    "sap/ui/vk/dvl/Scene": undefined;

    "sap/ui/vk/dvl/Viewport": undefined;

    "sap/ui/vk/dvl/ViewStateManager": undefined;

    "sap/ui/vk/threejs/AnimationSequence": undefined;

    "sap/ui/vk/threejs/BaseNodeProxy": undefined;

    "sap/ui/vk/threejs/Billboard": undefined;

    "sap/ui/vk/threejs/Callout": undefined;

    "sap/ui/vk/threejs/ContentManager": undefined;

    "sap/ui/vk/threejs/DetailView": undefined;

    "sap/ui/vk/threejs/Material": undefined;

    "sap/ui/vk/threejs/NodeHierarchy": undefined;

    "sap/ui/vk/threejs/NodeProxy": undefined;

    "sap/ui/vk/threejs/OrthographicCamera": undefined;

    "sap/ui/vk/threejs/PerspectiveCamera": undefined;

    "sap/ui/vk/threejs/Scene": undefined;

    "sap/ui/vk/threejs/Texture": undefined;

    "sap/ui/vk/threejs/Thrustline": undefined;

    "sap/ui/vk/threejs/Viewport": undefined;

    "sap/ui/vk/threejs/ViewStateManager": undefined;

    "sap/ui/vk/tools/AnchorPointTool": undefined;

    "sap/ui/vk/tools/AnchorPointToolGizmo": undefined;

    "sap/ui/vk/tools/CrossSectionTool": undefined;

    "sap/ui/vk/tools/CrossSectionToolGizmo": undefined;

    "sap/ui/vk/tools/Gizmo": undefined;

    "sap/ui/vk/tools/HitTestTool": undefined;

    "sap/ui/vk/tools/MoveTool": undefined;

    "sap/ui/vk/tools/MoveToolGizmo": undefined;

    "sap/ui/vk/tools/RectSelectTool": undefined;

    "sap/ui/vk/tools/RotateOrbitTool": undefined;

    "sap/ui/vk/tools/RotateTool": undefined;

    "sap/ui/vk/tools/RotateToolGizmo": undefined;

    "sap/ui/vk/tools/RotateTurntableTool": undefined;

    "sap/ui/vk/tools/ScaleTool": undefined;

    "sap/ui/vk/tools/ScaleToolGizmo": undefined;

    "sap/ui/vk/tools/SceneOrientationTool": undefined;

    "sap/ui/vk/tools/SceneOrientationToolGizmo": undefined;

    "sap/ui/vk/tools/Tool": undefined;

    "sap/ui/vk/tools/TooltipTool": undefined;

    "sap/ui/vk/tools/TooltipToolGizmo": undefined;

    "sap/ui/vk/AnimationPlayback": undefined;

    "sap/ui/vk/AnimationSequence": undefined;

    "sap/ui/vk/BaseNodeProxy": undefined;

    "sap/ui/vk/Camera": undefined;

    "sap/ui/vk/ContainerBase": undefined;

    "sap/ui/vk/ContainerContent": undefined;

    "sap/ui/vk/ContentConnector": undefined;

    "sap/ui/vk/ContentManager": undefined;

    "sap/ui/vk/ContentResource": undefined;

    "sap/ui/vk/DrawerToolbar": undefined;

    "sap/ui/vk/FlexibleControl": undefined;

    "sap/ui/vk/FlexibleControlLayoutData": undefined;

    "sap/ui/vk/ImageContentManager": undefined;

    "sap/ui/vk/LayerProxy": undefined;

    "sap/ui/vk/LegendItem": undefined;

    "sap/ui/vk/ListPanel": undefined;

    "sap/ui/vk/ListPanelStack": undefined;

    "sap/ui/vk/Loco": undefined;

    "sap/ui/vk/MapContainer": undefined;

    "sap/ui/vk/Material": undefined;

    "sap/ui/vk/NativeViewport": undefined;

    "sap/ui/vk/NodeHierarchy": undefined;

    "sap/ui/vk/NodeProxy": undefined;

    "sap/ui/vk/Notifications": undefined;

    "sap/ui/vk/OrthographicCamera": undefined;

    "sap/ui/vk/Overlay": undefined;

    "sap/ui/vk/OverlayArea": undefined;

    "sap/ui/vk/PerspectiveCamera": undefined;

    "sap/ui/vk/ProgressIndicator": undefined;

    "sap/ui/vk/RedlineDesign": undefined;

    "sap/ui/vk/RedlineElement": undefined;

    "sap/ui/vk/RedlineElementEllipse": undefined;

    "sap/ui/vk/RedlineElementFreehand": undefined;

    "sap/ui/vk/RedlineElementLine": undefined;

    "sap/ui/vk/RedlineElementRectangle": undefined;

    "sap/ui/vk/RedlineElementText": undefined;

    "sap/ui/vk/RedlineSurface": undefined;

    "sap/ui/vk/Scene": undefined;

    "sap/ui/vk/SceneTree": undefined;

    "sap/ui/vk/StepNavigation": undefined;

    "sap/ui/vk/Texture": undefined;

    "sap/ui/vk/Toolbar": undefined;

    "sap/ui/vk/TransformationMatrix": undefined;

    "sap/ui/vk/View": undefined;

    "sap/ui/vk/Viewer": undefined;

    "sap/ui/vk/ViewGallery": undefined;

    "sap/ui/vk/Viewport": undefined;

    "sap/ui/vk/ViewportBase": undefined;

    "sap/ui/vk/ViewStateManager": undefined;

    "sap/ui/vk/ViewStateManagerBase": undefined;

    "sap/ui/vk/AuthorizationHandler": undefined;

    "sap/ui/vk/DecryptionHandler": undefined;
  }
}
