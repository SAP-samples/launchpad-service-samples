// For Library Version: 1.71.13

declare namespace sap {
  namespace uiext {
    /**
     * The Unified Inbox control
     */
    namespace inbox {
      /**
       * Enumeration for Primary Filters This value will be applied for the DropDown Filter in Inbox
       */
      namespace InboxPrimaryFilterEnum {
        /**
         * Primary Filter for Completed Tasks
         */
        export const COMPLETED: undefined;

        /**
         * Primary Filter for Escalated Tasks
         */
        export const ESCALATED: undefined;

        /**
         * Primary Filter for Open Tasks
         */
        export const OPEN: undefined;

        /**
         * Primary Filter for Overdue Tasks
         */
        export const OVERDUE: undefined;
      }
      /**
       * Enumeration for Secondary Filter Paths
       */
      namespace InboxSecondaryFilterPathEnum {
        /**
         * Path for DueDate Secondary Filter
         */
        export const DUEDATE: undefined;

        /**
         * Path for Priority Secondary Filter
         */
        export const PRIORITY: undefined;

        /**
         * Path for StartDate Secondary Filter
         */
        export const STARTDATE: undefined;

        /**
         * Path for Status Secondary Filter
         */
        export const STATUS: undefined;

        /**
         * Path for TaskType Secondary Filter
         */
        export const TASKTYPE: undefined;
      }
      /**
       * Enumeration for Secondary Filter Values
       */
      namespace InboxSecondaryFilterValuesEnum {
        /**
         * Enum Values displayed by DueDate Secondary Filter dropdown are
         *  Today  : sap.uiext.inbox.InboxSecondaryFilterValuesEnum.DueDate.TODAY
         *
         *  Next7Days  : sap.uiext.inbox.InboxSecondaryFilterValuesEnum.DueDate.NEXT7DAYS
         *
         *  Next15Days  : sap.uiext.inbox.InboxSecondaryFilterValuesEnum.DueDate.NEXT15DAYS
         *
         *  Next30Days  : sap.uiext.inbox.InboxSecondaryFilterValuesEnum.DueDate.NEXT30DAYS
         *
         *  NoDueDate  : sap.uiext.inbox.InboxSecondaryFilterValuesEnum.DueDate.NODUEDATE
         */
        export const DueDate: undefined;

        /**
         * Enum Values displayed by Priority Secondary Filter dropdown are
         *   Low  : sap.uiext.inbox.InboxSecondaryFilterValuesEnum.Priority.LOW
         *
         *   Medium : sap.uiext.inbox.InboxSecondaryFilterValuesEnum.Priority.MEDIUM
         *
         *   High  : sap.uiext.inbox.InboxSecondaryFilterValuesEnum.Priority.HIGH
         *
         *   Very High: sap.uiext.inbox.InboxSecondaryFilterValuesEnum.Priority.VERYHIGH
         */
        export const Priority: undefined;

        /**
         * Enum Values displayed by the StartDate Secondary Filter are
         *   Today  : sap.uiext.inbox.InboxSecondaryFilterValuesEnum.StartDate.TODAY
         *
         *   Last7Days  : sap.uiext.inbox.InboxSecondaryFilterValuesEnum.StartDate.LAST7DAYS
         *
         *  Last15Days  : sap.uiext.inbox.InboxSecondaryFilterValuesEnum.StartDate.LAST15DAYS
         *
         *  Last30Days  : sap.uiext.inbox.InboxSecondaryFilterValuesEnum.StartDate.LAST30DAYS
         */
        export const StartDate: undefined;

        /**
         * Enum Values displayed by the Status Secondary Filter dropdown are
         *  Ready  : sap.uiext.inbox.InboxSecondaryFilterValuesEnum.Status.READY
         *
         * Reserved  : sap.uiext.inbox.InboxSecondaryFilterValuesEnum.Status.RESERVED
         *
         * InProgress  : sap.uiext.inbox.InboxSecondaryFilterValuesEnum.Status.INPROGRESS
         */
        export const Status: undefined;
      }

      namespace composite {
        interface InboxAddAttachmentTileOpts extends sap.ui.core.ControlOpts {}

        interface InboxAttachmentsTileContainerOpts
          extends sap.ui.core.ControlOpts {
          /**
           * URL to upload the selected file
           */
          uploadUrl?: string;

          /**
           * name of the selected file for uploading
           */
          fileName?: string;

          /**
           * type of the selected file for uploading
           */
          fileType?: string;

          /**
           * boolean property to indicate if user has selected a file to upload
           */
          isFileSelected?: boolean;

          /**
           * description string entered by user while uploading a file
           */
          enteredDescription?: string;

          /**
           * boolean value to indicate whether to show Add Attachment tile
           */
          showAddTile?: boolean;

          /**
           * event is fired to add all the header parameters just before uploading a file
           */
          uploadButtonPress?: Function;

          /**
           * event is fired when uploading a file is completed successfully
           */
          uploadSuccess?: Function;

          /**
           * event is fired when uploading a file has failed
           */
          uploadFailed?: Function;

          /**
           * aggregation for attachments tile
           */
          attachments?:
            | sap.uiext.inbox.composite.InboxAttachmentTile[]
            | sap.uiext.inbox.composite.InboxAttachmentTile;
        }

        interface InboxAttachmentTileOpts extends sap.ui.core.ControlOpts {
          /**
           * Name of the attachment
           */
          fileName?: string;

          /**
           * size of the attachment
           */
          fileSize?: string;

          /**
           * description of the attachment
           */
          fileDescription?: string;

          /**
           * Icon URI of the file type
           */
          fileTypeIcon?: sap.ui.core.URI;

          /**
           * creation date of the attachment
           */
          creationDate?: string;

          /**
           * URL for attachment title link to download the attachment.
           */
          downloadUrl?: string;

          /**
           * name of the user who has uploaded attachment
           */
          createdBy?: string;

          /**
           * boolean value to indicate whether to show delete button
           */
          showDeleteButton?: boolean;

          /**
           * fire this event to delete the attachment
           */
          deleteAttachment?: Function;
        }

        interface InboxBusyIndicatorOpts extends sap.ui.core.ControlOpts {}

        interface InboxCommentOpts extends sap.ui.core.ControlOpts {
          /**
           * Sender of the comment chunk
           */
          sender?: string;

          /**
           * Format is ISO 8601 YYYY-MM-DDThh:mm:ss.sZ, Z meaning the time is in UTC time zone
           */
          timestamp?: string;

          /**
           * URL to the thumbnail image.
           */
          thumbnailSrc?: sap.ui.core.URI;

          /**
           * The FeedChunk text
           */
          text?: string;

          /**
           * Unique username of the user responsible for adding comment
           */
          createdBy?: string;

          /**
           * Represent system origin in case of multi origin scenario
           */
          sapOrigin?: string;
        }

        interface InboxTaskCommentsOpts extends sap.ui.core.ControlOpts {
          /**
           * Sender for the comment feeder
           */
          feederSender?: string;

          /**
           * URL to the thumbnail image for the comment feeder.
           */
          feederThumbnailSrc?: sap.ui.core.URI;

          /**
           * Boolean value for visibilty of comment feeder
           */
          showFeeder?: boolean;

          /**
           * Boolean value for visibility of header
           */
          showHeader?: boolean;

          /**
           * Event is raised when submit on the feeder is pressed.
           */
          commentSubmit?: Function;

          /**
           * URL to the thumbnail image.
           */
          comments?:
            | sap.uiext.inbox.composite.InboxComment[]
            | sap.uiext.inbox.composite.InboxComment;
        }

        interface InboxTaskTitleControlOpts extends sap.ui.core.ControlOpts {
          /**
           * The Task Title of the Task
           */
          taskTitle?: string;

          /**
           * Category icon
           */
          categoryIconURI?: sap.ui.core.URI;

          /**
           * has Attachments
           */
          hasAttachments?: boolean;

          /**
           * has Comments
           */
          hasComments?: boolean;

          /**
           * Internal aggregation to hold the inner Task Title Link
           */
          titleLink?: sap.ui.core.Control;
        }

        interface InboxUploadAttachmentTileOpts
          extends sap.ui.core.ControlOpts {
          /**
           * name of the selected file
           */
          fileName?: string;

          /**
           * icon URI of the selected file type
           */
          fileTypeIcon?: sap.ui.core.URI;

          /**
           * event is fired when upload for selected file is requested
           */
          uploadSelectedFile?: Function;
        }
        /**
         * InboxAddAttachmentTile
         */
        class InboxAddAttachmentTile extends sap.ui.core.Control {
          /**
           * Constructor for a new composite/InboxAddAttachmentTile.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           *
           * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.core.Control#constructor
           * sap.ui.core.Control} can be used.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: InboxAddAttachmentTileOpts
          );

          /**
           * Creates a new subclass of class sap.uiext.inbox.composite.InboxAddAttachmentTile with name `sClassName`
           * and enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.uiext.inbox.composite.InboxAddAttachmentTile.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
        }
        /**
         * InboxAttachmentsTileContainer
         */
        class InboxAttachmentsTileContainer extends sap.ui.core.Control {
          /**
           * Constructor for a new composite/InboxAttachmentsTileContainer.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: InboxAttachmentsTileContainerOpts
          );

          /**
           * Adds some attachment to the aggregation {@link #getAttachments attachments}.
           */
          addAttachment(
            /**
             * The attachment to add; if empty, nothing is inserted
             */
            oAttachment: sap.uiext.inbox.composite.InboxAttachmentTile
          ): sap.uiext.inbox.composite.InboxAttachmentsTileContainer;
          /**
           * method to add a header parameter while uploading a file. This method takes header name and header value
           * as input.
           */
          addUploadHeader(): void;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:uploadButtonPress uploadButtonPress} event of
           * this `sap.uiext.inbox.composite.InboxAttachmentsTileContainer`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.uiext.inbox.composite.InboxAttachmentsTileContainer` itself.
           *
           * event is fired to add all the header parameters just before uploading a file
           */
          attachUploadButtonPress(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.uiext.inbox.composite.InboxAttachmentsTileContainer`
             * itself
             */
            oListener?: object
          ): sap.uiext.inbox.composite.InboxAttachmentsTileContainer;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:uploadFailed uploadFailed} event of this `sap.uiext.inbox.composite.InboxAttachmentsTileContainer`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.uiext.inbox.composite.InboxAttachmentsTileContainer` itself.
           *
           * event is fired when uploading a file has failed
           */
          attachUploadFailed(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.uiext.inbox.composite.InboxAttachmentsTileContainer`
             * itself
             */
            oListener?: object
          ): sap.uiext.inbox.composite.InboxAttachmentsTileContainer;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:uploadSuccess uploadSuccess} event of this `sap.uiext.inbox.composite.InboxAttachmentsTileContainer`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.uiext.inbox.composite.InboxAttachmentsTileContainer` itself.
           *
           * event is fired when uploading a file is completed successfully
           */
          attachUploadSuccess(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.uiext.inbox.composite.InboxAttachmentsTileContainer`
             * itself
             */
            oListener?: object
          ): sap.uiext.inbox.composite.InboxAttachmentsTileContainer;
          /**
           * Destroys all the attachments in the aggregation {@link #getAttachments attachments}.
           */
          destroyAttachments(): sap.uiext.inbox.composite.InboxAttachmentsTileContainer;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:uploadButtonPress uploadButtonPress} event
           * of this `sap.uiext.inbox.composite.InboxAttachmentsTileContainer`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachUploadButtonPress(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.uiext.inbox.composite.InboxAttachmentsTileContainer;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:uploadFailed uploadFailed} event of this `sap.uiext.inbox.composite.InboxAttachmentsTileContainer`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachUploadFailed(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.uiext.inbox.composite.InboxAttachmentsTileContainer;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:uploadSuccess uploadSuccess} event of this
           * `sap.uiext.inbox.composite.InboxAttachmentsTileContainer`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachUploadSuccess(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.uiext.inbox.composite.InboxAttachmentsTileContainer;
          /**
           * Creates a new subclass of class sap.uiext.inbox.composite.InboxAttachmentsTileContainer with name `sClassName`
           * and enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:uploadButtonPress uploadButtonPress} to attached listeners.
           */
          fireUploadButtonPress(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.uiext.inbox.composite.InboxAttachmentsTileContainer;
          /**
           * Fires event {@link #event:uploadFailed uploadFailed} to attached listeners.
           */
          fireUploadFailed(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.uiext.inbox.composite.InboxAttachmentsTileContainer;
          /**
           * Fires event {@link #event:uploadSuccess uploadSuccess} to attached listeners.
           */
          fireUploadSuccess(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.uiext.inbox.composite.InboxAttachmentsTileContainer;
          /**
           * Gets content of aggregation {@link #getAttachments attachments}.
           *
           * aggregation for attachments tile
           */
          getAttachments(): sap.uiext.inbox.composite.InboxAttachmentTile[];
          /**
           * Gets current value of property {@link #getEnteredDescription enteredDescription}.
           *
           * description string entered by user while uploading a file
           */
          getEnteredDescription(): string;
          /**
           * Gets current value of property {@link #getFileName fileName}.
           *
           * name of the selected file for uploading
           */
          getFileName(): string;
          /**
           * Gets current value of property {@link #getFileType fileType}.
           *
           * type of the selected file for uploading
           */
          getFileType(): string;
          /**
           * Gets current value of property {@link #getIsFileSelected isFileSelected}.
           *
           * boolean property to indicate if user has selected a file to upload
           */
          getIsFileSelected(): boolean;
          /**
           * Returns a metadata object for class sap.uiext.inbox.composite.InboxAttachmentsTileContainer.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getShowAddTile showAddTile}.
           *
           * boolean value to indicate whether to show Add Attachment tile
           *
           * Default value is `true`.
           */
          getShowAddTile(): boolean;
          /**
           * Gets current value of property {@link #getUploadUrl uploadUrl}.
           *
           * URL to upload the selected file
           */
          getUploadUrl(): string;
          /**
           * Checks for the provided `sap.uiext.inbox.composite.InboxAttachmentTile` in the aggregation {@link #getAttachments
           * attachments}. and returns its index if found or -1 otherwise.
           */
          indexOfAttachment(
            /**
             * The attachment whose index is looked for
             */
            oAttachment: sap.uiext.inbox.composite.InboxAttachmentTile
          ): number;
          /**
           * Inserts a attachment into the aggregation {@link #getAttachments attachments}.
           */
          insertAttachment(
            /**
             * The attachment to insert; if empty, nothing is inserted
             */
            oAttachment: sap.uiext.inbox.composite.InboxAttachmentTile,
            /**
             * The `0`-based index the attachment should be inserted at; for a negative value of `iIndex`, the attachment
             * is inserted at position 0; for a value greater than the current size of the aggregation, the attachment
             * is inserted at the last position
             */
            iIndex: number
          ): sap.uiext.inbox.composite.InboxAttachmentsTileContainer;
          /**
           * Removes all the controls from the aggregation {@link #getAttachments attachments}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllAttachments(): sap.uiext.inbox.composite.InboxAttachmentTile[];
          /**
           * Removes a attachment from the aggregation {@link #getAttachments attachments}.
           */
          removeAttachment(
            /**
             * The attachment to remove or its index or id
             */
            vAttachment:
              | number
              | string
              | sap.uiext.inbox.composite.InboxAttachmentTile
          ): sap.uiext.inbox.composite.InboxAttachmentTile;
          /**
           * method to remove a headerParameter of fileUploader
           */
          removeUploadHeader(): void;
          /**
           * Sets a new value for property {@link #getEnteredDescription enteredDescription}.
           *
           * description string entered by user while uploading a file
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setEnteredDescription(
            /**
             * New value for property `enteredDescription`
             */
            sEnteredDescription: string
          ): sap.uiext.inbox.composite.InboxAttachmentsTileContainer;
          /**
           * Sets a new value for property {@link #getFileName fileName}.
           *
           * name of the selected file for uploading
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setFileName(
            /**
             * New value for property `fileName`
             */
            sFileName: string
          ): sap.uiext.inbox.composite.InboxAttachmentsTileContainer;
          /**
           * Sets a new value for property {@link #getFileType fileType}.
           *
           * type of the selected file for uploading
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setFileType(
            /**
             * New value for property `fileType`
             */
            sFileType: string
          ): sap.uiext.inbox.composite.InboxAttachmentsTileContainer;
          /**
           * Sets a new value for property {@link #getIsFileSelected isFileSelected}.
           *
           * boolean property to indicate if user has selected a file to upload
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setIsFileSelected(
            /**
             * New value for property `isFileSelected`
             */
            bIsFileSelected: boolean
          ): sap.uiext.inbox.composite.InboxAttachmentsTileContainer;
          /**
           * Sets a new value for property {@link #getShowAddTile showAddTile}.
           *
           * boolean value to indicate whether to show Add Attachment tile
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setShowAddTile(
            /**
             * New value for property `showAddTile`
             */
            bShowAddTile: boolean
          ): sap.uiext.inbox.composite.InboxAttachmentsTileContainer;
          /**
           * Sets a new value for property {@link #getUploadUrl uploadUrl}.
           *
           * URL to upload the selected file
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setUploadUrl(
            /**
             * New value for property `uploadUrl`
             */
            sUploadUrl: string
          ): sap.uiext.inbox.composite.InboxAttachmentsTileContainer;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:uploadButtonPress uploadButtonPress} event of
           * this `sap.uiext.inbox.composite.InboxAttachmentsTileContainer`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.uiext.inbox.composite.InboxAttachmentsTileContainer` itself.
           *
           * event is fired to add all the header parameters just before uploading a file
           */
          attachUploadButtonPress(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.uiext.inbox.composite.InboxAttachmentsTileContainer`
             * itself
             */
            oListener?: object
          ): sap.uiext.inbox.composite.InboxAttachmentsTileContainer;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:uploadFailed uploadFailed} event of this `sap.uiext.inbox.composite.InboxAttachmentsTileContainer`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.uiext.inbox.composite.InboxAttachmentsTileContainer` itself.
           *
           * event is fired when uploading a file has failed
           */
          attachUploadFailed(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.uiext.inbox.composite.InboxAttachmentsTileContainer`
             * itself
             */
            oListener?: object
          ): sap.uiext.inbox.composite.InboxAttachmentsTileContainer;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:uploadSuccess uploadSuccess} event of this `sap.uiext.inbox.composite.InboxAttachmentsTileContainer`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.uiext.inbox.composite.InboxAttachmentsTileContainer` itself.
           *
           * event is fired when uploading a file is completed successfully
           */
          attachUploadSuccess(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.uiext.inbox.composite.InboxAttachmentsTileContainer`
             * itself
             */
            oListener?: object
          ): sap.uiext.inbox.composite.InboxAttachmentsTileContainer;
        }
        /**
         * InboxAttachmentTile
         */
        class InboxAttachmentTile extends sap.ui.core.Control {
          /**
           * Constructor for a new composite/InboxAttachmentTile.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: InboxAttachmentTileOpts
          );

          /**
           * Attaches event handler `fnFunction` to the {@link #event:deleteAttachment deleteAttachment} event of
           * this `sap.uiext.inbox.composite.InboxAttachmentTile`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.uiext.inbox.composite.InboxAttachmentTile` itself.
           *
           * fire this event to delete the attachment
           */
          attachDeleteAttachment(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.uiext.inbox.composite.InboxAttachmentTile`
             * itself
             */
            oListener?: object
          ): sap.uiext.inbox.composite.InboxAttachmentTile;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:deleteAttachment deleteAttachment} event of
           * this `sap.uiext.inbox.composite.InboxAttachmentTile`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachDeleteAttachment(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.uiext.inbox.composite.InboxAttachmentTile;
          /**
           * Creates a new subclass of class sap.uiext.inbox.composite.InboxAttachmentTile with name `sClassName`
           * and enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:deleteAttachment deleteAttachment} to attached listeners.
           */
          fireDeleteAttachment(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.uiext.inbox.composite.InboxAttachmentTile;
          /**
           * Gets current value of property {@link #getCreatedBy createdBy}.
           *
           * name of the user who has uploaded attachment
           */
          getCreatedBy(): string;
          /**
           * Gets current value of property {@link #getCreationDate creationDate}.
           *
           * creation date of the attachment
           */
          getCreationDate(): string;
          /**
           * Gets current value of property {@link #getDownloadUrl downloadUrl}.
           *
           * URL for attachment title link to download the attachment.
           */
          getDownloadUrl(): string;
          /**
           * Gets current value of property {@link #getFileDescription fileDescription}.
           *
           * description of the attachment
           */
          getFileDescription(): string;
          /**
           * Gets current value of property {@link #getFileName fileName}.
           *
           * Name of the attachment
           */
          getFileName(): string;
          /**
           * Gets current value of property {@link #getFileSize fileSize}.
           *
           * size of the attachment
           */
          getFileSize(): string;
          /**
           * Gets current value of property {@link #getFileTypeIcon fileTypeIcon}.
           *
           * Icon URI of the file type
           */
          getFileTypeIcon(): sap.ui.core.URI;
          /**
           * Returns a metadata object for class sap.uiext.inbox.composite.InboxAttachmentTile.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getShowDeleteButton showDeleteButton}.
           *
           * boolean value to indicate whether to show delete button
           *
           * Default value is `true`.
           */
          getShowDeleteButton(): boolean;
          /**
           * Sets a new value for property {@link #getCreatedBy createdBy}.
           *
           * name of the user who has uploaded attachment
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setCreatedBy(
            /**
             * New value for property `createdBy`
             */
            sCreatedBy: string
          ): sap.uiext.inbox.composite.InboxAttachmentTile;
          /**
           * Sets a new value for property {@link #getCreationDate creationDate}.
           *
           * creation date of the attachment
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setCreationDate(
            /**
             * New value for property `creationDate`
             */
            sCreationDate: string
          ): sap.uiext.inbox.composite.InboxAttachmentTile;
          /**
           * Sets a new value for property {@link #getDownloadUrl downloadUrl}.
           *
           * URL for attachment title link to download the attachment.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setDownloadUrl(
            /**
             * New value for property `downloadUrl`
             */
            sDownloadUrl: string
          ): sap.uiext.inbox.composite.InboxAttachmentTile;
          /**
           * Sets a new value for property {@link #getFileDescription fileDescription}.
           *
           * description of the attachment
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setFileDescription(
            /**
             * New value for property `fileDescription`
             */
            sFileDescription: string
          ): sap.uiext.inbox.composite.InboxAttachmentTile;
          /**
           * Sets a new value for property {@link #getFileName fileName}.
           *
           * Name of the attachment
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setFileName(
            /**
             * New value for property `fileName`
             */
            sFileName: string
          ): sap.uiext.inbox.composite.InboxAttachmentTile;
          /**
           * Sets a new value for property {@link #getFileSize fileSize}.
           *
           * size of the attachment
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setFileSize(
            /**
             * New value for property `fileSize`
             */
            sFileSize: string
          ): sap.uiext.inbox.composite.InboxAttachmentTile;
          /**
           * Sets a new value for property {@link #getFileTypeIcon fileTypeIcon}.
           *
           * Icon URI of the file type
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setFileTypeIcon(
            /**
             * New value for property `fileTypeIcon`
             */
            sFileTypeIcon: sap.ui.core.URI
          ): sap.uiext.inbox.composite.InboxAttachmentTile;
          /**
           * Sets a new value for property {@link #getShowDeleteButton showDeleteButton}.
           *
           * boolean value to indicate whether to show delete button
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setShowDeleteButton(
            /**
             * New value for property `showDeleteButton`
             */
            bShowDeleteButton: boolean
          ): sap.uiext.inbox.composite.InboxAttachmentTile;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:deleteAttachment deleteAttachment} event of
           * this `sap.uiext.inbox.composite.InboxAttachmentTile`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.uiext.inbox.composite.InboxAttachmentTile` itself.
           *
           * fire this event to delete the attachment
           */
          attachDeleteAttachment(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.uiext.inbox.composite.InboxAttachmentTile`
             * itself
             */
            oListener?: object
          ): sap.uiext.inbox.composite.InboxAttachmentTile;
        }
        /**
         * InboxBusyIndicator
         */
        class InboxBusyIndicator extends sap.ui.core.Control {
          /**
           * Constructor for a new composite/InboxBusyIndicator.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           *
           * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.core.Control#constructor
           * sap.ui.core.Control} can be used.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: InboxBusyIndicatorOpts
          );

          /**
           * Creates a new subclass of class sap.uiext.inbox.composite.InboxBusyIndicator with name `sClassName` and
           * enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.uiext.inbox.composite.InboxBusyIndicator.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
        }
        /**
         * fsgg
         */
        class InboxComment extends sap.ui.core.Control {
          /**
           * Constructor for a new composite/InboxComment.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: InboxCommentOpts
          );

          /**
           * Creates a new subclass of class sap.uiext.inbox.composite.InboxComment with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets current value of property {@link #getCreatedBy createdBy}.
           *
           * Unique username of the user responsible for adding comment
           */
          getCreatedBy(): string;
          /**
           * Returns a metadata object for class sap.uiext.inbox.composite.InboxComment.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getSapOrigin sapOrigin}.
           *
           * Represent system origin in case of multi origin scenario
           */
          getSapOrigin(): string;
          /**
           * Gets current value of property {@link #getSender sender}.
           *
           * Sender of the comment chunk
           */
          getSender(): string;
          /**
           * Gets current value of property {@link #getText text}.
           *
           * The FeedChunk text
           */
          getText(): string;
          /**
           * Gets current value of property {@link #getThumbnailSrc thumbnailSrc}.
           *
           * URL to the thumbnail image.
           */
          getThumbnailSrc(): sap.ui.core.URI;
          /**
           * Gets current value of property {@link #getTimestamp timestamp}.
           *
           * Format is ISO 8601 YYYY-MM-DDThh:mm:ss.sZ, Z meaning the time is in UTC time zone
           */
          getTimestamp(): string;
          /**
           * Sets a new value for property {@link #getCreatedBy createdBy}.
           *
           * Unique username of the user responsible for adding comment
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setCreatedBy(
            /**
             * New value for property `createdBy`
             */
            sCreatedBy: string
          ): sap.uiext.inbox.composite.InboxComment;
          /**
           * Sets a new value for property {@link #getSapOrigin sapOrigin}.
           *
           * Represent system origin in case of multi origin scenario
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setSapOrigin(
            /**
             * New value for property `sapOrigin`
             */
            sSapOrigin: string
          ): sap.uiext.inbox.composite.InboxComment;
          /**
           * Sets a new value for property {@link #getSender sender}.
           *
           * Sender of the comment chunk
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setSender(
            /**
             * New value for property `sender`
             */
            sSender: string
          ): sap.uiext.inbox.composite.InboxComment;
          /**
           * Sets a new value for property {@link #getText text}.
           *
           * The FeedChunk text
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setText(
            /**
             * New value for property `text`
             */
            sText: string
          ): sap.uiext.inbox.composite.InboxComment;
          /**
           * Sets a new value for property {@link #getThumbnailSrc thumbnailSrc}.
           *
           * URL to the thumbnail image.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setThumbnailSrc(
            /**
             * New value for property `thumbnailSrc`
             */
            sThumbnailSrc: sap.ui.core.URI
          ): sap.uiext.inbox.composite.InboxComment;
          /**
           * Sets a new value for property {@link #getTimestamp timestamp}.
           *
           * Format is ISO 8601 YYYY-MM-DDThh:mm:ss.sZ, Z meaning the time is in UTC time zone
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setTimestamp(
            /**
             * New value for property `timestamp`
             */
            sTimestamp: string
          ): sap.uiext.inbox.composite.InboxComment;
        }
        /**
         * InboxTaskComments
         */
        class InboxTaskComments extends sap.ui.core.Control {
          /**
           * Constructor for a new composite/InboxTaskComments.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: InboxTaskCommentsOpts
          );

          /**
           * Adds some comment to the aggregation {@link #getComments comments}.
           */
          addComment(
            /**
             * The comment to add; if empty, nothing is inserted
             */
            oComment: sap.uiext.inbox.composite.InboxComment
          ): sap.uiext.inbox.composite.InboxTaskComments;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:commentSubmit commentSubmit} event of this `sap.uiext.inbox.composite.InboxTaskComments`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.uiext.inbox.composite.InboxTaskComments` itself.
           *
           * Event is raised when submit on the feeder is pressed.
           */
          attachCommentSubmit(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.uiext.inbox.composite.InboxTaskComments`
             * itself
             */
            oListener?: object
          ): sap.uiext.inbox.composite.InboxTaskComments;
          /**
           * Destroys all the comments in the aggregation {@link #getComments comments}.
           */
          destroyComments(): sap.uiext.inbox.composite.InboxTaskComments;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:commentSubmit commentSubmit} event of this
           * `sap.uiext.inbox.composite.InboxTaskComments`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachCommentSubmit(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.uiext.inbox.composite.InboxTaskComments;
          /**
           * Creates a new subclass of class sap.uiext.inbox.composite.InboxTaskComments with name `sClassName` and
           * enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:commentSubmit commentSubmit} to attached listeners.
           */
          fireCommentSubmit(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.uiext.inbox.composite.InboxTaskComments;
          /**
           * Gets content of aggregation {@link #getComments comments}.
           *
           * URL to the thumbnail image.
           */
          getComments(): sap.uiext.inbox.composite.InboxComment[];
          /**
           * Gets current value of property {@link #getFeederSender feederSender}.
           *
           * Sender for the comment feeder
           */
          getFeederSender(): string;
          /**
           * Gets current value of property {@link #getFeederThumbnailSrc feederThumbnailSrc}.
           *
           * URL to the thumbnail image for the comment feeder.
           */
          getFeederThumbnailSrc(): sap.ui.core.URI;
          /**
           * Returns a metadata object for class sap.uiext.inbox.composite.InboxTaskComments.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getShowFeeder showFeeder}.
           *
           * Boolean value for visibilty of comment feeder
           *
           * Default value is `true`.
           */
          getShowFeeder(): boolean;
          /**
           * Gets current value of property {@link #getShowHeader showHeader}.
           *
           * Boolean value for visibility of header
           *
           * Default value is `false`.
           */
          getShowHeader(): boolean;
          /**
           * Checks for the provided `sap.uiext.inbox.composite.InboxComment` in the aggregation {@link #getComments
           * comments}. and returns its index if found or -1 otherwise.
           */
          indexOfComment(
            /**
             * The comment whose index is looked for
             */
            oComment: sap.uiext.inbox.composite.InboxComment
          ): number;
          /**
           * Inserts a comment into the aggregation {@link #getComments comments}.
           */
          insertComment(
            /**
             * The comment to insert; if empty, nothing is inserted
             */
            oComment: sap.uiext.inbox.composite.InboxComment,
            /**
             * The `0`-based index the comment should be inserted at; for a negative value of `iIndex`, the comment
             * is inserted at position 0; for a value greater than the current size of the aggregation, the comment
             * is inserted at the last position
             */
            iIndex: number
          ): sap.uiext.inbox.composite.InboxTaskComments;
          /**
           * Removes all the controls from the aggregation {@link #getComments comments}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllComments(): sap.uiext.inbox.composite.InboxComment[];
          /**
           * Removes a comment from the aggregation {@link #getComments comments}.
           */
          removeComment(
            /**
             * The comment to remove or its index or id
             */
            vComment: number | string | sap.uiext.inbox.composite.InboxComment
          ): sap.uiext.inbox.composite.InboxComment;
          /**
           * Sets a new value for property {@link #getFeederSender feederSender}.
           *
           * Sender for the comment feeder
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setFeederSender(
            /**
             * New value for property `feederSender`
             */
            sFeederSender: string
          ): sap.uiext.inbox.composite.InboxTaskComments;
          /**
           * Sets a new value for property {@link #getFeederThumbnailSrc feederThumbnailSrc}.
           *
           * URL to the thumbnail image for the comment feeder.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setFeederThumbnailSrc(
            /**
             * New value for property `feederThumbnailSrc`
             */
            sFeederThumbnailSrc: sap.ui.core.URI
          ): sap.uiext.inbox.composite.InboxTaskComments;
          /**
           * Sets a new value for property {@link #getShowFeeder showFeeder}.
           *
           * Boolean value for visibilty of comment feeder
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setShowFeeder(
            /**
             * New value for property `showFeeder`
             */
            bShowFeeder: boolean
          ): sap.uiext.inbox.composite.InboxTaskComments;
          /**
           * Sets a new value for property {@link #getShowHeader showHeader}.
           *
           * Boolean value for visibility of header
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setShowHeader(
            /**
             * New value for property `showHeader`
             */
            bShowHeader: boolean
          ): sap.uiext.inbox.composite.InboxTaskComments;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:commentSubmit commentSubmit} event of this `sap.uiext.inbox.composite.InboxTaskComments`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.uiext.inbox.composite.InboxTaskComments` itself.
           *
           * Event is raised when submit on the feeder is pressed.
           */
          attachCommentSubmit(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.uiext.inbox.composite.InboxTaskComments`
             * itself
             */
            oListener?: object
          ): sap.uiext.inbox.composite.InboxTaskComments;
        }
        /**
         * InboxTaskTitleControl
         */
        class InboxTaskTitleControl extends sap.ui.core.Control {
          /**
           * Constructor for a new composite/InboxTaskTitleControl.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: InboxTaskTitleControlOpts
          );

          /**
           * Destroys the titleLink in the aggregation {@link #getTitleLink titleLink}.
           */
          destroyTitleLink(): sap.uiext.inbox.composite.InboxTaskTitleControl;
          /**
           * Creates a new subclass of class sap.uiext.inbox.composite.InboxTaskTitleControl with name `sClassName`
           * and enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets current value of property {@link #getCategoryIconURI categoryIconURI}.
           *
           * Category icon
           *
           * Default value is `hasCategory`.
           */
          getCategoryIconURI(): sap.ui.core.URI;
          /**
           * Gets current value of property {@link #getHasAttachments hasAttachments}.
           *
           * has Attachments
           */
          getHasAttachments(): boolean;
          /**
           * Gets current value of property {@link #getHasComments hasComments}.
           *
           * has Comments
           */
          getHasComments(): boolean;
          /**
           * Returns a metadata object for class sap.uiext.inbox.composite.InboxTaskTitleControl.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getTaskTitle taskTitle}.
           *
           * The Task Title of the Task
           */
          getTaskTitle(): string;
          /**
           * Gets content of aggregation {@link #getTitleLink titleLink}.
           *
           * Internal aggregation to hold the inner Task Title Link
           */
          getTitleLink(): sap.ui.core.Control;
          /**
           * Sets a new value for property {@link #getCategoryIconURI categoryIconURI}.
           *
           * Category icon
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `hasCategory`.
           */
          setCategoryIconURI(
            /**
             * New value for property `categoryIconURI`
             */
            sCategoryIconURI: sap.ui.core.URI
          ): sap.uiext.inbox.composite.InboxTaskTitleControl;
          /**
           * Sets a new value for property {@link #getHasAttachments hasAttachments}.
           *
           * has Attachments
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setHasAttachments(
            /**
             * New value for property `hasAttachments`
             */
            bHasAttachments: boolean
          ): sap.uiext.inbox.composite.InboxTaskTitleControl;
          /**
           * Sets a new value for property {@link #getHasComments hasComments}.
           *
           * has Comments
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setHasComments(
            /**
             * New value for property `hasComments`
             */
            bHasComments: boolean
          ): sap.uiext.inbox.composite.InboxTaskTitleControl;
          /**
           * Sets a new value for property {@link #getTaskTitle taskTitle}.
           *
           * The Task Title of the Task
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setTaskTitle(
            /**
             * New value for property `taskTitle`
             */
            sTaskTitle: string
          ): sap.uiext.inbox.composite.InboxTaskTitleControl;
          /**
           * Sets the aggregated {@link #getTitleLink titleLink}.
           */
          setTitleLink(
            /**
             * The titleLink to set
             */
            oTitleLink: sap.ui.core.Control
          ): sap.uiext.inbox.composite.InboxTaskTitleControl;
        }
        /**
         * InboxUploadAttachmentTile
         */
        class InboxUploadAttachmentTile extends sap.ui.core.Control {
          /**
           * Constructor for a new composite/InboxUploadAttachmentTile.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: InboxUploadAttachmentTileOpts
          );

          /**
           * Attaches event handler `fnFunction` to the {@link #event:uploadSelectedFile uploadSelectedFile} event
           * of this `sap.uiext.inbox.composite.InboxUploadAttachmentTile`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.uiext.inbox.composite.InboxUploadAttachmentTile` itself.
           *
           * event is fired when upload for selected file is requested
           */
          attachUploadSelectedFile(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.uiext.inbox.composite.InboxUploadAttachmentTile`
             * itself
             */
            oListener?: object
          ): sap.uiext.inbox.composite.InboxUploadAttachmentTile;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:uploadSelectedFile uploadSelectedFile} event
           * of this `sap.uiext.inbox.composite.InboxUploadAttachmentTile`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachUploadSelectedFile(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.uiext.inbox.composite.InboxUploadAttachmentTile;
          /**
           * Creates a new subclass of class sap.uiext.inbox.composite.InboxUploadAttachmentTile with name `sClassName`
           * and enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:uploadSelectedFile uploadSelectedFile} to attached listeners.
           */
          fireUploadSelectedFile(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.uiext.inbox.composite.InboxUploadAttachmentTile;
          /**
           * Gets current value of property {@link #getFileName fileName}.
           *
           * name of the selected file
           */
          getFileName(): string;
          /**
           * Gets current value of property {@link #getFileTypeIcon fileTypeIcon}.
           *
           * icon URI of the selected file type
           */
          getFileTypeIcon(): sap.ui.core.URI;
          /**
           * Returns a metadata object for class sap.uiext.inbox.composite.InboxUploadAttachmentTile.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Sets a new value for property {@link #getFileName fileName}.
           *
           * name of the selected file
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setFileName(
            /**
             * New value for property `fileName`
             */
            sFileName: string
          ): sap.uiext.inbox.composite.InboxUploadAttachmentTile;
          /**
           * Sets a new value for property {@link #getFileTypeIcon fileTypeIcon}.
           *
           * icon URI of the selected file type
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setFileTypeIcon(
            /**
             * New value for property `fileTypeIcon`
             */
            sFileTypeIcon: sap.ui.core.URI
          ): sap.uiext.inbox.composite.InboxUploadAttachmentTile;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:uploadSelectedFile uploadSelectedFile} event
           * of this `sap.uiext.inbox.composite.InboxUploadAttachmentTile`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.uiext.inbox.composite.InboxUploadAttachmentTile` itself.
           *
           * event is fired when upload for selected file is requested
           */
          attachUploadSelectedFile(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.uiext.inbox.composite.InboxUploadAttachmentTile`
             * itself
             */
            oListener?: object
          ): sap.uiext.inbox.composite.InboxUploadAttachmentTile;
        }
      }

      interface InboxOpts extends sap.ui.core.ControlOpts {
        /**
         * set the theme URL parameter string to be appended to the task Execution URL. In case of a function callback
         * set for Task Execution PopUp, this string will not be appended.
         */
        taskExecutionURLThemeValue?: string;

        /**
         * set this as true for oData Model. If set as false, the user will need to handle task Actions, search
         * and Task Execution URL population. See function call back methods.
         */
        handleBindings?: boolean;

        /**
         * set this to true to enable opening of completed tasks.
         */
        openCompletedTasks?: boolean;

        /**
         * If handleBindings property is set to true , the control assumes an oData model is set and handles the
         * complete logic within. In this case once the oData request is complete, this event is fired with additional
         * parameters.
         */
        oDataRequestCompleted?: Function;

        /**
         * this event is fires to handle refresh Action, when the handleBindings property is set to false.
         */
        refresh?: Function;

        /**
         * this event is fires to handle task Actions - Claim, Release, when the handleBindings property is set
         * to false.
         */
        taskAction?: Function;

        /**
         * This event is fired when table row selection is changed in the list view of Inbox control
         */
        taskSelectionChange?: Function;
      }

      interface InboxLaunchPadOpts extends sap.ui.core.ControlOpts {
        /**
         * The title text appearing in Inbox LaunchPad header bar.
         */
        title?: string;

        /**
         * Path (src) to the logo icon to be displayed in the Inbox LaunchPad header.
         */
        logoSrc?: string;

        /**
         * Property to indicate whether the Logoff button in the header should be displayed or not. Default value
         * is true.
         */
        showLogoutButton?: boolean;

        /**
         * Property to indicate whether loggod on User's Name in the header should be displayed or not. Default
         * value is true.
         */
        showUserName?: boolean;

        /**
         * User name to be shown in the header.
         */
        userName?: string;

        /**
         * Fires an event when a tile is selected in Inbox LaunchPad.
         */
        tileSelected?: Function;

        /**
         * Fired when the user clicks the "Log-off" button.
         */
        logout?: Function;
      }

      interface InboxSplitAppOpts extends sap.ui.core.ControlOpts {
        /**
         * Show/Hide the Navigation Button for the Master Page
         */
        showMasterPageNavBtn?: boolean;

        /**
         * TCM service URL
         */
        tcmServiceURL?: string;

        /**
         * Filters to be applied on the data shown in the MasterPage
         */
        filters?: object[];

        /**
         * TCM Configuration object for control initialization.
         */
        tcmConfiguration?: object;

        /**
         * Navigation Button of the Master Page is pressed, if visible.
         */
        navButtonPressed?: Function;

        /**
         * This is the splitApp that is created inside the control
         */
        splitAppl?: sap.m.SplitApp;
      }

      interface SubstitutionRulesManagerOpts extends sap.ui.core.ControlOpts {}
      /**
       * @EXPERIMENTAL (since 1.5.2)
       *
       * A comprehensive UI design approach with graphical and functional elements for search tasks, filter tasks,
       * and take actions on the tasks ("Inbox Pattern").
       */
      class Inbox extends sap.ui.core.Control {
        /**
         * Constructor for a new Inbox.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: InboxOpts
        );

        /**
         * Adds an additional action to inbox
         */
        addAction(
          /**
           * ID of the new action.
           */
          sActionID: string,
          /**
           * The Label Text for the new action.
           */
          sDisplayText: string,
          /**
           * Tooltip for the added action.
           */
          sToolTip: string,
          /**
           * Function to be called when the action is executed
           */
          fnActionHandler: Function,
          /**
           * Flag indicating if the action is mass enabled.Default value is true.
           */
          bMassEnabled: boolean
        ): sap.uiext.inbox.Inbox;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:oDataRequestCompleted oDataRequestCompleted}
         * event of this `sap.uiext.inbox.Inbox`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.uiext.inbox.Inbox` itself.
         *
         * If handleBindings property is set to true , the control assumes an oData model is set and handles the
         * complete logic within. In this case once the oData request is complete, this event is fired with additional
         * parameters.
         */
        attachODataRequestCompleted(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.uiext.inbox.Inbox` itself
           */
          oListener?: object
        ): sap.uiext.inbox.Inbox;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:refresh refresh} event of this `sap.uiext.inbox.Inbox`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.uiext.inbox.Inbox` itself.
         *
         * this event is fires to handle refresh Action, when the handleBindings property is set to false.
         */
        attachRefresh(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.uiext.inbox.Inbox` itself
           */
          oListener?: object
        ): sap.uiext.inbox.Inbox;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:taskAction taskAction} event of this `sap.uiext.inbox.Inbox`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.uiext.inbox.Inbox` itself.
         *
         * this event is fires to handle task Actions - Claim, Release, when the handleBindings property is set
         * to false.
         */
        attachTaskAction(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.uiext.inbox.Inbox` itself
           */
          oListener?: object
        ): sap.uiext.inbox.Inbox;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:taskSelectionChange taskSelectionChange} event
         * of this `sap.uiext.inbox.Inbox`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.uiext.inbox.Inbox` itself.
         *
         * This event is fired when table row selection is changed in the list view of Inbox control
         */
        attachTaskSelectionChange(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.uiext.inbox.Inbox` itself
           */
          oListener?: object
        ): sap.uiext.inbox.Inbox;
        /**
         * Registers a callback function to be invoked to search on the Task Table.
         */
        bindSearch(
          /**
           * callback function to be called to execute a search
           */
          searchCallBack: Function
        ): sap.uiext.inbox.Inbox;
        /**
         * Registers a callback function to be invoked to populate the Task Execution PopUp.
         */
        bindTaskExecutionURL(
          /**
           * callback function for getting the execution URL, will be supplied with the task ID and should return
           * the URL to be displayed with the Task Execution PopUp.
           */
          taskExecURLfnCallBack: Function,
          /**
           * callback function for getting the status of the task, will be supplied with the task ID and should return
           * the Task Status.
           */
          taskExecURLStatusCallBack: Function
        ): sap.uiext.inbox.Inbox;
        /**
         * Bind the Inbox Task Collection
         */
        bindTasks(
          /**
           * Binding path for the element displaying the tasks within the Inbox. This path is the Task Collection
           * according to the TCM (Task Consumption Model)
           */
          sPath: string,
          /**
           * Predefined filter that is applied to the Task Collection before displaying the tasks in the Inbox. (sap.uiext.inbox.InboxFilters)
           */
          oFilter: object,
          /**
           * {}Predefined sorter that is applied to the Task Collection before displaying the tasks in the Inbox.
           * By default the tasks are sorted on 'CreatedOn' , descending, according to TCM. The sorter is not validated
           * for the path being a valid TCM Entity Property. The sorter passed will be applied to the oData service
           * as is. In case the entity Property in the path is a sortable property on the UI, the sorter indicator
           * for that property will be visible.
           */
          oSorter: sap.ui.model.Sorter
        ): sap.uiext.inbox.Inbox;
        /**
         * Binds the Task Table Rows to the given path.
         */
        bindTaskTable(
          /**
           * Binding path for the rows of the Task Table
           */
          sPath: string,
          /**
           * Predefined filter for the Task Table (sap.uiext.inbox.TaskInitialFilters)
           */
          oTaskFilters: object
        ): sap.uiext.inbox.Inbox;
        /**
         * Registers a callback function to be invoked to populate the TaskType Drill Down. This should return the
         * array of Values to be populated in the Task Type Drill Down.
         */
        bindTaskTypeDynamicFilter(
          /**
           * callback function that populates the TaskType Drill Down
           */
          taskTypeDynamicFilterCallBack: Function
        ): sap.uiext.inbox.Inbox;
        /**
         * Clears all the filters applied in Drill Down. (Status, Priority, Date/Time and TaskType).
         */
        clearDrillDownFilter(): void;
        /**
         * Row Settings applied using the Settings button shall be cleared.
         */
        clearRowSettings(): void;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:oDataRequestCompleted oDataRequestCompleted}
         * event of this `sap.uiext.inbox.Inbox`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachODataRequestCompleted(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.uiext.inbox.Inbox;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:refresh refresh} event of this `sap.uiext.inbox.Inbox`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachRefresh(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.uiext.inbox.Inbox;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:taskAction taskAction} event of this `sap.uiext.inbox.Inbox`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachTaskAction(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.uiext.inbox.Inbox;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:taskSelectionChange taskSelectionChange} event
         * of this `sap.uiext.inbox.Inbox`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachTaskSelectionChange(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.uiext.inbox.Inbox;
        /**
         * Creates a new subclass of class sap.uiext.inbox.Inbox with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:oDataRequestCompleted oDataRequestCompleted} to attached listeners.
         */
        fireODataRequestCompleted(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): sap.uiext.inbox.Inbox;
        /**
         * Fires event {@link #event:refresh refresh} to attached listeners.
         */
        fireRefresh(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): sap.uiext.inbox.Inbox;
        /**
         * Fires event {@link #event:taskAction taskAction} to attached listeners.
         */
        fireTaskAction(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): sap.uiext.inbox.Inbox;
        /**
         * Fires event {@link #event:taskSelectionChange taskSelectionChange} to attached listeners.
         */
        fireTaskSelectionChange(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): sap.uiext.inbox.Inbox;
        /**
         * Gets current value of property {@link #getHandleBindings handleBindings}.
         *
         * set this as true for oData Model. If set as false, the user will need to handle task Actions, search
         * and Task Execution URL population. See function call back methods.
         *
         * Default value is `true`.
         */
        getHandleBindings(): boolean;
        /**
         * Returns a metadata object for class sap.uiext.inbox.Inbox.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getOpenCompletedTasks openCompletedTasks}.
         *
         * set this to true to enable opening of completed tasks.
         *
         * Default value is `false`.
         */
        getOpenCompletedTasks(): boolean;
        /**
         * Getter for property isSubstitutionEnabled.
         *
         * Boolean property to enable the sap.uiext.inbox.SubstitutionRulesManager control (default is false). If
         * is true, 'Manage Substitution Rules' is visible in settings button, else if it is false the option will
         * not be visible under settings.
         *
         * Default value is false
         */
        getSubstitutionEnabled(): boolean;
        /**
         * Gets current value of property {@link #getTaskExecutionURLThemeValue taskExecutionURLThemeValue}.
         *
         * set the theme URL parameter string to be appended to the task Execution URL. In case of a function callback
         * set for Task Execution PopUp, this string will not be appended.
         */
        getTaskExecutionURLThemeValue(): string;
        /**
         * returns the binding for the Task Table
         */
        getTaskTableBinding(): object;
        /**
         * Inbox is refreshed if task is completed
         */
        refresh(
          /**
           * Array of Json objects containing TaskInstanceID and SAP__Origin
           */
          aTaskUniqueIdentifiers: object[]
        ): void;
        /**
         * Set configuration on Inbox. See APIs in InboxConfiguration
         */
        setConfiguration(
          /**
           * Configuration object to set the configuration on Inbox. See APIs in InboxConfiguration
           */
          oConfiguration: object
        ): sap.uiext.inbox.Inbox;
        /**
         * Sets a new value for property {@link #getHandleBindings handleBindings}.
         *
         * set this as true for oData Model. If set as false, the user will need to handle task Actions, search
         * and Task Execution URL population. See function call back methods.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setHandleBindings(
          /**
           * New value for property `handleBindings`
           */
          bHandleBindings: boolean
        ): sap.uiext.inbox.Inbox;
        /**
         * Sets a new value for property {@link #getOpenCompletedTasks openCompletedTasks}.
         *
         * set this to true to enable opening of completed tasks.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setOpenCompletedTasks(
          /**
           * New value for property `openCompletedTasks`
           */
          bOpenCompletedTasks: boolean
        ): sap.uiext.inbox.Inbox;
        /**
         * Setter for property bOpenTaskUIInNewTab. If set to true, Task UI will opene in a new tab. Default value
         * is false.
         */
        setOpenTaskUIInNewTab(): void;
        /**
         * Setter for property isSubstitutionEnabled.
         *
         * Boolean property to enable the sap.uiext.inbox.SubstitutionRulesManager control (default is false). If
         * set to true, 'Manage Substitution Rules' is visible in settings button, else if set to false the option
         * will not be visible under settings.
         *
         * Default value is false
         */
        setSubstitutionEnabled(
          /**
           * isSubstitutionEnabled
           */
          bIsSubstitutionEnabled: boolean,
          /**
           * the path
           */
          path: string
        ): void;
        /**
         * Sets a new value for property {@link #getTaskExecutionURLThemeValue taskExecutionURLThemeValue}.
         *
         * set the theme URL parameter string to be appended to the task Execution URL. In case of a function callback
         * set for Task Execution PopUp, this string will not be appended.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setTaskExecutionURLThemeValue(
          /**
           * New value for property `taskExecutionURLThemeValue`
           */
          sTaskExecutionURLThemeValue: string
        ): sap.uiext.inbox.Inbox;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:oDataRequestCompleted oDataRequestCompleted}
         * event of this `sap.uiext.inbox.Inbox`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.uiext.inbox.Inbox` itself.
         *
         * If handleBindings property is set to true , the control assumes an oData model is set and handles the
         * complete logic within. In this case once the oData request is complete, this event is fired with additional
         * parameters.
         */
        attachODataRequestCompleted(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.uiext.inbox.Inbox` itself
           */
          oListener?: object
        ): sap.uiext.inbox.Inbox;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:refresh refresh} event of this `sap.uiext.inbox.Inbox`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.uiext.inbox.Inbox` itself.
         *
         * this event is fires to handle refresh Action, when the handleBindings property is set to false.
         */
        attachRefresh(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.uiext.inbox.Inbox` itself
           */
          oListener?: object
        ): sap.uiext.inbox.Inbox;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:taskAction taskAction} event of this `sap.uiext.inbox.Inbox`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.uiext.inbox.Inbox` itself.
         *
         * this event is fires to handle task Actions - Claim, Release, when the handleBindings property is set
         * to false.
         */
        attachTaskAction(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.uiext.inbox.Inbox` itself
           */
          oListener?: object
        ): sap.uiext.inbox.Inbox;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:taskSelectionChange taskSelectionChange} event
         * of this `sap.uiext.inbox.Inbox`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.uiext.inbox.Inbox` itself.
         *
         * This event is fired when table row selection is changed in the list view of Inbox control
         */
        attachTaskSelectionChange(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.uiext.inbox.Inbox` itself
           */
          oListener?: object
        ): sap.uiext.inbox.Inbox;
      }
      /**
       * Configuration for Inbox
       */
      class InboxConfiguration extends sap.ui.base.Object {
        /**
         * Constructor for InboxConfiguration
         */
        constructor();

        /**
         * Creates a new subclass of class sap.uiext.inbox.InboxConfiguration with name `sClassName` and enriches
         * it with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.uiext.inbox.InboxConfiguration.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Setter for Max Limit for user search in Inbox
         */
        setSearchUersMaxLimit(iMaxLimit: number): void;
      }
      /**
       * PreDefined Filters for Inbox
       */
      class InboxFilters extends sap.ui.base.Object {
        /**
         * Constructor for InboxFilters
         */
        constructor();

        /**
         * Creates a new subclass of class sap.uiext.inbox.InboxFilters with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.uiext.inbox.InboxFilters.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Getter for Primary filters
         */
        getPrimaryFilterr(): sap.uiext.inbox.InboxPrimaryFilters;
        /**
         * Getter for Max Limit for user search in Inbox
         */
        getSearchUersMaxLimit(): number;
        /**
         * Getter for Secondary filters
         */
        getSecondaryFilter(): sap.uiext.inbox.InboxSecondaryFilters;
        /**
         * Setter for the Primary filters to be applied
         */
        setPrimaryFilter(
          oPrimaryFilter: sap.uiext.inbox.InboxPrimaryFilters
        ): void;
        /**
         * Setter for Secondary filters to be applied
         */
        setSecondaryFilter(
          oSecondaryFilter: sap.uiext.inbox.InboxSecondaryFilters
        ): void;
      }
      /**
       * @EXPERIMENTAL (since 1.7.0)
       *
       * InboxLaunchPad Documentation to be updated later
       */
      class InboxLaunchPad extends sap.ui.core.Control {
        /**
         * Constructor for a new InboxLaunchPad.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: InboxLaunchPadOpts
        );

        /**
         * Attaches event handler `fnFunction` to the {@link #event:logout logout} event of this `sap.uiext.inbox.InboxLaunchPad`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.uiext.inbox.InboxLaunchPad` itself.
         *
         * Fired when the user clicks the "Log-off" button.
         */
        attachLogout(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.uiext.inbox.InboxLaunchPad` itself
           */
          oListener?: object
        ): sap.uiext.inbox.InboxLaunchPad;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:tileSelected tileSelected} event of this `sap.uiext.inbox.InboxLaunchPad`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.uiext.inbox.InboxLaunchPad` itself.
         *
         * Fires an event when a tile is selected in Inbox LaunchPad.
         */
        attachTileSelected(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.uiext.inbox.InboxLaunchPad` itself
           */
          oListener?: object
        ): sap.uiext.inbox.InboxLaunchPad;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:logout logout} event of this `sap.uiext.inbox.InboxLaunchPad`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachLogout(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.uiext.inbox.InboxLaunchPad;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:tileSelected tileSelected} event of this `sap.uiext.inbox.InboxLaunchPad`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachTileSelected(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.uiext.inbox.InboxLaunchPad;
        /**
         * Creates a new subclass of class sap.uiext.inbox.InboxLaunchPad with name `sClassName` and enriches it
         * with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:logout logout} to attached listeners.
         */
        fireLogout(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): sap.uiext.inbox.InboxLaunchPad;
        /**
         * Fires event {@link #event:tileSelected tileSelected} to attached listeners.
         */
        fireTileSelected(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): sap.uiext.inbox.InboxLaunchPad;
        /**
         * Gets current value of property {@link #getLogoSrc logoSrc}.
         *
         * Path (src) to the logo icon to be displayed in the Inbox LaunchPad header.
         */
        getLogoSrc(): string;
        /**
         * Returns a metadata object for class sap.uiext.inbox.InboxLaunchPad.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getShowLogoutButton showLogoutButton}.
         *
         * Property to indicate whether the Logoff button in the header should be displayed or not. Default value
         * is true.
         *
         * Default value is `true`.
         */
        getShowLogoutButton(): boolean;
        /**
         * Gets current value of property {@link #getShowUserName showUserName}.
         *
         * Property to indicate whether loggod on User's Name in the header should be displayed or not. Default
         * value is true.
         *
         * Default value is `true`.
         */
        getShowUserName(): boolean;
        /**
         * Gets current value of property {@link #getTitle title}.
         *
         * The title text appearing in Inbox LaunchPad header bar.
         *
         * Default value is `Inbox Launch Pad Title`.
         */
        getTitle(): string;
        /**
         * Gets current value of property {@link #getUserName userName}.
         *
         * User name to be shown in the header.
         */
        getUserName(): string;
        /**
         * Sets a new value for property {@link #getLogoSrc logoSrc}.
         *
         * Path (src) to the logo icon to be displayed in the Inbox LaunchPad header.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setLogoSrc(
          /**
           * New value for property `logoSrc`
           */
          sLogoSrc: string
        ): sap.uiext.inbox.InboxLaunchPad;
        /**
         * Sets a new value for property {@link #getShowLogoutButton showLogoutButton}.
         *
         * Property to indicate whether the Logoff button in the header should be displayed or not. Default value
         * is true.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setShowLogoutButton(
          /**
           * New value for property `showLogoutButton`
           */
          bShowLogoutButton: boolean
        ): sap.uiext.inbox.InboxLaunchPad;
        /**
         * Sets a new value for property {@link #getShowUserName showUserName}.
         *
         * Property to indicate whether loggod on User's Name in the header should be displayed or not. Default
         * value is true.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setShowUserName(
          /**
           * New value for property `showUserName`
           */
          bShowUserName: boolean
        ): sap.uiext.inbox.InboxLaunchPad;
        /**
         * Sets a new value for property {@link #getTitle title}.
         *
         * The title text appearing in Inbox LaunchPad header bar.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `Inbox Launch Pad Title`.
         */
        setTitle(
          /**
           * New value for property `title`
           */
          sTitle: string
        ): sap.uiext.inbox.InboxLaunchPad;
        /**
         * Sets a new value for property {@link #getUserName userName}.
         *
         * User name to be shown in the header.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setUserName(
          /**
           * New value for property `userName`
           */
          sUserName: string
        ): sap.uiext.inbox.InboxLaunchPad;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:logout logout} event of this `sap.uiext.inbox.InboxLaunchPad`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.uiext.inbox.InboxLaunchPad` itself.
         *
         * Fired when the user clicks the "Log-off" button.
         */
        attachLogout(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.uiext.inbox.InboxLaunchPad` itself
           */
          oListener?: object
        ): sap.uiext.inbox.InboxLaunchPad;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:tileSelected tileSelected} event of this `sap.uiext.inbox.InboxLaunchPad`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.uiext.inbox.InboxLaunchPad` itself.
         *
         * Fires an event when a tile is selected in Inbox LaunchPad.
         */
        attachTileSelected(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.uiext.inbox.InboxLaunchPad` itself
           */
          oListener?: object
        ): sap.uiext.inbox.InboxLaunchPad;
      }
      /**
       * Primary Filters for Inbox
       */
      class InboxPrimaryFilters extends sap.ui.base.Object {
        /**
         * Constructor for InboxPrimaryFilters
         */
        constructor();

        /**
         * Creates a new subclass of class sap.uiext.inbox.InboxPrimaryFilters with name `sClassName` and enriches
         * it with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.uiext.inbox.InboxPrimaryFilters.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * set Primary filter
         */
        setFilter(oFilter: sap.uiext.inbox.InboxPrimaryFilterEnum): void;
      }
      /**
       * Secondary Filters for Inbox
       */
      class InboxSecondaryFilters extends sap.ui.base.Object {
        /**
         * Constructor for InboxSecondaryFilters
         */
        constructor();

        /**
         * Creates a new subclass of class sap.uiext.inbox.InboxSecondaryFilters with name `sClassName` and enriches
         * it with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.uiext.inbox.InboxSecondaryFilters.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Set Secondary Filters
         */
        setStandardFilters(
          /**
           * Array of secondary Filter Objects eg. : {sPath : sap.uiext.inbox.InboxSecondaryFilterPathEnum.Priority,
           * values : [sap.uiext.inbox.InboxSecondaryFilterValuesEnum.Status.LOW, sap.uiext.inbox.InboxSecondaryFilterValuesEnum.Status.HIGH]}
           * sPath : {sap.uiext.inbox.InboxSecondaryFilterPathEnum} values : {Array} Array of SecondaryFilterValuesEnums
           * of {sap.uiext.inbox.InboxSecondaryFilterValuesEnum}
           */
          aFilterObjects: any
        ): void;
      }
      /**
       * @EXPERIMENTAL (since 1.7.0)
       *
       * Inbox Split App
       */
      class InboxSplitApp extends sap.ui.core.Control {
        /**
         * Constructor for a new InboxSplitApp.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: InboxSplitAppOpts
        );

        /**
         * Attaches event handler `fnFunction` to the {@link #event:navButtonPressed navButtonPressed} event of
         * this `sap.uiext.inbox.InboxSplitApp`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.uiext.inbox.InboxSplitApp` itself.
         *
         * Navigation Button of the Master Page is pressed, if visible.
         */
        attachNavButtonPressed(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.uiext.inbox.InboxSplitApp` itself
           */
          oListener?: object
        ): sap.uiext.inbox.InboxSplitApp;
        /**
         * Call this method to display data in the InboxSplitApp
         */
        bindTasks(aFilters: object[]): sap.uiext.inbox.InboxSplitApp;
        /**
         * Destroys the splitAppl in the aggregation {@link #getSplitAppl splitAppl}.
         */
        destroySplitAppl(): sap.uiext.inbox.InboxSplitApp;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:navButtonPressed navButtonPressed} event of
         * this `sap.uiext.inbox.InboxSplitApp`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachNavButtonPressed(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.uiext.inbox.InboxSplitApp;
        /**
         * Creates a new subclass of class sap.uiext.inbox.InboxSplitApp with name `sClassName` and enriches it
         * with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:navButtonPressed navButtonPressed} to attached listeners.
         */
        fireNavButtonPressed(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): sap.uiext.inbox.InboxSplitApp;
        /**
         * Gets current value of property {@link #getFilters filters}.
         *
         * Filters to be applied on the data shown in the MasterPage
         */
        getFilters(): object[];
        /**
         * Returns a metadata object for class sap.uiext.inbox.InboxSplitApp.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getShowMasterPageNavBtn showMasterPageNavBtn}.
         *
         * Show/Hide the Navigation Button for the Master Page
         */
        getShowMasterPageNavBtn(): boolean;
        /**
         * Gets content of aggregation {@link #getSplitAppl splitAppl}.
         *
         * This is the splitApp that is created inside the control
         */
        getSplitAppl(): sap.m.SplitApp;
        /**
         * Gets current value of property {@link #getTcmConfiguration tcmConfiguration}.
         *
         * TCM Configuration object for control initialization.
         */
        getTcmConfiguration(): object;
        /**
         * Gets current value of property {@link #getTcmServiceURL tcmServiceURL}.
         *
         * TCM service URL
         */
        getTcmServiceURL(): string;
        /**
         * Call this method to reset the search criteria.
         */
        resetSearchCriteria(): sap.uiext.inbox.InboxSplitApp;
        /**
         * Sets a new value for property {@link #getFilters filters}.
         *
         * Filters to be applied on the data shown in the MasterPage
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setFilters(
          /**
           * New value for property `filters`
           */
          sFilters: object[]
        ): sap.uiext.inbox.InboxSplitApp;
        /**
         * Sets a new value for property {@link #getShowMasterPageNavBtn showMasterPageNavBtn}.
         *
         * Show/Hide the Navigation Button for the Master Page
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setShowMasterPageNavBtn(
          /**
           * New value for property `showMasterPageNavBtn`
           */
          bShowMasterPageNavBtn: boolean
        ): sap.uiext.inbox.InboxSplitApp;
        /**
         * Sets the aggregated {@link #getSplitAppl splitAppl}.
         */
        setSplitAppl(
          /**
           * The splitAppl to set
           */
          oSplitAppl: sap.m.SplitApp
        ): sap.uiext.inbox.InboxSplitApp;
        /**
         * Sets a new value for property {@link #getTcmConfiguration tcmConfiguration}.
         *
         * TCM Configuration object for control initialization.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setTcmConfiguration(
          /**
           * New value for property `tcmConfiguration`
           */
          oTcmConfiguration: object
        ): sap.uiext.inbox.InboxSplitApp;
        /**
         * Sets a new value for property {@link #getTcmServiceURL tcmServiceURL}.
         *
         * TCM service URL
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setTcmServiceURL(
          /**
           * New value for property `tcmServiceURL`
           */
          sTcmServiceURL: string
        ): sap.uiext.inbox.InboxSplitApp;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:navButtonPressed navButtonPressed} event of
         * this `sap.uiext.inbox.InboxSplitApp`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.uiext.inbox.InboxSplitApp` itself.
         *
         * Navigation Button of the Master Page is pressed, if visible.
         */
        attachNavButtonPressed(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.uiext.inbox.InboxSplitApp` itself
           */
          oListener?: object
        ): sap.uiext.inbox.InboxSplitApp;
      }
      /**
       * @EXPERIMENTAL (since 1.7.0)
       *
       * The SubstitutionRulesManager
       */
      class SubstitutionRulesManager extends sap.ui.core.Control {
        /**
         * Constructor for a new SubstitutionRulesManager.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         *
         * This class does not have its own settings, but all settings applicable to the base type {@link sap.ui.core.Control#constructor
         * sap.ui.core.Control} can be used.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: SubstitutionRulesManagerOpts
        );

        /**
         * Binds the Substitution Rules to the given path.
         */
        bindSubstitutionRules(
          /**
           * The path
           */
          path: string
        ): sap.uiext.inbox.SubstitutionRulesManager;
        /**
         * Creates a new subclass of class sap.uiext.inbox.SubstitutionRulesManager with name `sClassName` and enriches
         * it with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.uiext.inbox.SubstitutionRulesManager.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
      }
    }
  }

  interface IUI5DefineDependencyNames {
    "sap/uiext/inbox/composite/InboxAddAttachmentTile": undefined;

    "sap/uiext/inbox/composite/InboxAttachmentsTileContainer": undefined;

    "sap/uiext/inbox/composite/InboxAttachmentTile": undefined;

    "sap/uiext/inbox/composite/InboxBusyIndicator": undefined;

    "sap/uiext/inbox/composite/InboxComment": undefined;

    "sap/uiext/inbox/composite/InboxTaskComments": undefined;

    "sap/uiext/inbox/composite/InboxTaskTitleControl": undefined;

    "sap/uiext/inbox/composite/InboxUploadAttachmentTile": undefined;

    "sap/uiext/inbox/Inbox": undefined;

    "sap/uiext/inbox/InboxConfiguration": undefined;

    "sap/uiext/inbox/InboxFilters": undefined;

    "sap/uiext/inbox/InboxLaunchPad": undefined;

    "sap/uiext/inbox/InboxPrimaryFilters": undefined;

    "sap/uiext/inbox/InboxSecondaryFilters": undefined;

    "sap/uiext/inbox/InboxSplitApp": undefined;

    "sap/uiext/inbox/SubstitutionRulesManager": undefined;
  }
}
