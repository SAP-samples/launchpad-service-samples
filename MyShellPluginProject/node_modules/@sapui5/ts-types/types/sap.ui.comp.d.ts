// For Library Version: 1.71.13

declare namespace sap {
  namespace ui {
    /**
     * SAPUI5 library with smart controls.
     *  **Note:** The controls in this library only support OData V2 (see {@link sap.ui.model.odata.v2.ODataModel})
     * and a default model (named `undefined`).
     *  **Note:** Properties of a complex type (used in an OData entity type) cannot be bound by or used with
     * controls of this library.
     *  **Note:** Most controls in this library do not support key user adaptation. Please see {@link topic:f1430c0337534d469da3a56307ff76af
     * Key User Adaptation: Enable Your App} for a list of supported controls.
     */
    namespace comp {
      namespace filterbar {
        interface FilterBarOpts extends sap.ui.layout.GridOpts {
          /**
           * Key used to access personalization data. Only if the persistencyKey is provided, will the `VariantManagement`
           * control be used.
           */
          persistencyKey?: string;

          /**
           * The advanced mode is only relevant for the value help scenario. UI representation is different from the
           * standard FilterBar.
           */
          advancedMode?: boolean;

          /**
           * @deprecated (since 1.30.0) - Replaced by property `filterBarExpanded` This property is mapped to the
           * filterBarExpanded property.
           *
           * Collapses/expands the advanced area.
           */
          expandAdvancedArea?: boolean;

          /**
           * @deprecated (since 1.32.0)
           *
           * Enables/disables the Search button.
           */
          searchEnabled?: boolean;

          /**
           * @SINCE 1.26.1
           *
           * Shows the filters area. When property `useToolbar` is set to `false`, `filterBarExpanded` is set to `true`
           * automatically.
           */
          filterBarExpanded?: boolean;

          /**
           * @SINCE 1.28.0
           *
           * If this property is set, then the label for filters will be prefixed with the group title.
           */
          considerGroupTitle?: boolean;

          /**
           * @SINCE 1.26.1
           *
           * Handles visibility of the Clear button on the Filters dialog.
           */
          showClearButton?: boolean;

          /**
           * @SINCE 1.26.1
           *
           * Handles visibility of the "Restore" button on the "Filters" dialog. **Note:** Restore works only automatically
           * when a property `persistencyKey` is set and therefore Variant Management is used. In all other cases
           * the "restore" behavior needs to be implemented by the app, based on the event `reset`.
           */
          showRestoreButton?: boolean;

          /**
           * @SINCE 1.28.0
           *
           * Handles visibility of the Go button on the FilterBar.
           */
          showGoOnFB?: boolean;

          /**
           * @SINCE 1.28.0
           *
           * Handles visibility of the Restore button on the FilterBar.
           */
          showRestoreOnFB?: boolean;

          /**
           * @SINCE 1.28.0
           *
           * Handles visibility of the Clear button on the FilterBar.
           */
          showClearOnFB?: boolean;

          /**
           * @SINCE 1.26.1
           * @deprecated (since 1.28.0) - Replaced by property `showGoOnFB`
           *
           * Handles visibility of the Go button on the FilterBar.
           */
          showGoButton?: boolean;

          /**
           * @SINCE 1.34.0
           *
           * Stores the delta as compared to the standard variant.
           */
          deltaVariantMode?: boolean;

          /**
           * @SINCE 1.34.0
           *
           * Sets the width of the filters container.
           */
          filterContainerWidth?: string;

          /**
           * @SINCE 1.38.0
           *
           * Determines what design should be used. Default is the design with toolbar. The design with toolbar is
           * always used on phones. When property `useToolbar` is set to `false`, `filterBarExpanded` is set to `true`
           * automatically.
           */
          useToolbar?: boolean;

          /**
           * @SINCE 1.38.0
           *
           * Specifies header text that is shown in the toolbar on the first position. This property is ignored, when
           * `useToolbar` is set to `false`.
           */
          header?: string;

          /**
           * @SINCE 1.38.0
           *
           * Handles visibility of the Filters button on the FilterBar.
           */
          showFilterConfiguration?: boolean;

          /**
           * @SINCE 1.44
           *
           * Determines the behavior when `reset` is executed.
           *  **Note:** This property is only relevant if no variant management is used, and the filter bar is not
           * used in the advanced mode. A snapshot shows the current state of the filter bar, just before the Filters
           * dialog is opened.
           * 	 - `undefined` (default) defines the standard behavior: snapshot will be applied after `reset` was triggered
           *
           * 	 - `false` defines that the snapshot will not be applied
           * 	 - `true`is not considered at all
           */
          useSnapshot?: boolean;

          /**
           * This event is fired when the Cancel button on the Filters dialog is pressed and the variant is marked
           * as dirty.
           */
          cancel?: Function;

          /**
           * This event is fired when the Restore button is pressed.
           */
          reset?: Function;

          /**
           * This event is fired when the Go button is pressed.
           */
          search?: Function;

          /**
           * @deprecated (since 1.48.2) - Replaced by the event `beforeVariantFetch`
           *
           * This event is fired before a variant is saved. The event can be used to adapt the data of the custom
           * filters, which will be saved as variant later.
           */
          beforeVariantSave?: Function;

          /**
           * @SINCE 1.28.13
           *
           * This event is fired before a variant is fetched.
           */
          beforeVariantFetch?: Function;

          /**
           * This event is fired after a variant has been loaded and applied to the FilterBar. The event can be used
           * to adapt custom filters with data from the variant.
           */
          afterVariantLoad?: Function;

          /**
           * This event is fired when a filter or multiple filters has changed.
           */
          filterChange?: Function;

          /**
           * This event is fired when the Clear button is pressed. The consumer has to clear all filters.
           */
          clear?: Function;

          /**
           * This event is fired when the FilterBar is initialized to indicate that metadata are available.
           */
          initialise?: Function;

          /**
           * @SINCE 1.38.0
           *
           * This event is fired after the `FilterBar` has been initialized, the user's default variant has been applied,
           * and a stable filter state has been achieved. With this event all relevant filter information, for example,
           * for navigation-related actions, is available via {@link sap.ui.comp.filterbar.FilterBar#getUiState}.
           */
          initialized?: Function;

          /**
           * This event is fired after a variant has been saved.
           */
          afterVariantSave?: Function;

          /**
           * @SINCE 1.34.0
           *
           * This event is fired after the filters dialog is closed.
           */
          filtersDialogClosed?: Function;

          /**
           * @SINCE 1.48.0
           *
           * This event is fired after the filters dialog is opened.
           */
          filtersDialogBeforeOpen?: Function;

          /**
           * @SINCE 1.48.0
           *
           * This event is fired when the Cancel button on the filters dialog is pressed.
           */
          filtersDialogCancel?: Function;

          /**
           * @SINCE 1.48.0
           *
           * This event is fired when the Go button on the filters dialog is pressed.
           */
          filtersDialogSearch?: Function;

          /**
           * @SINCE 1.48.0
           *
           * This event is fired when search field of the filter dialog is changed.
           */
          filtersDialogSearchForFilters?: Function;

          /**
           * @SINCE 1.38.0
           *
           * This event is fired when the filters information has changed. It indicates specifically that the count
           * of assigned filters may be changed. One of the intended reaction to this event would be to call `retrieveFiltersWithValuesAsText`
           * method.
           */
          assignedFiltersChanged?: Function;

          /**
           * @deprecated (since 1.48.0) - Use aggregation `filterGroupItems` instead.
           *
           * Filters belonging to the basic group.
           */
          filterItems?:
            | sap.ui.comp.filterbar.FilterItem[]
            | sap.ui.comp.filterbar.FilterItem;

          /**
           * Contains all FilterBar filters.
           *  `Note:`In case a filter has to be added to the basic group
           * 	 - the property `groupName` has to be set to the constant `sap.ui.comp.filterbar.FilterBar.INTERNAL_GROUP`
           *
           * 	 - the property `groupLabel` will be handled internally and will be ignored, if set
           * 	 - the property `partOfCurrentVariant` has to be set to `true`
           * 	 - if the property `visibleInFilterBar` is set to `true`, the property `partOfCurrentVariant` will be
           * 			set internally also to `true`
           */
          filterGroupItems?:
            | sap.ui.comp.filterbar.FilterGroupItem[]
            | sap.ui.comp.filterbar.FilterGroupItem;

          /**
           * @SINCE 1.30.0
           *
           * Populates the basic search area on the FilterBar and the Filters dialog.
           */
          basicSearch?: sap.m.SearchField | string;
        }

        interface FilterGroupItemOpts
          extends sap.ui.comp.filterbar.FilterItemOpts {
          /**
           * Title of the group.
           */
          groupTitle?: string;

          /**
           * Name of the group.
           */
          groupName?: string;

          /**
           * @SINCE 1.24.0
           * @deprecated (since 1.26.1) - Replaced by property `visibleInFilterBar`
           *
           * If set to true, this filter is visible on the filter bar by default. Mapped against the `visibleInFilterBar`
           * property.
           */
          visibleInAdvancedArea?: boolean;
        }

        interface FilterItemOpts extends sap.ui.core.ElementOpts {
          /**
           * Label of the filter.
           */
          label?: string;

          /**
           * Name of the filter. This is an identifier for the filter and has to be unique.
           */
          name?: string;

          /**
           * Mandatory flag.
           */
          mandatory?: boolean;

          /**
           * Visibility state of the filter.
           */
          visible?: boolean;

          /**
           * Tooltip for the filter.
           */
          labelTooltip?: string;

          /**
           * @SINCE 1.52.0
           *
           * Tooltip for the filter'c control.
           */
          controlTooltip?: string;

          /**
           * @SINCE 1.26.1
           *
           * Determines if a filter is part of the currently selected variant.
           *  **Note:** This property can also be changed using the `visibleInFilterBar` property and by user interaction
           * in the Select Filters dialog or the variant handling.
           */
          partOfCurrentVariant?: boolean;

          /**
           * @SINCE 1.26.1
           *
           * Controls the visibility of a filter item in the filter bar.
           */
          visibleInFilterBar?: boolean;

          /**
           * @SINCE 1.44.0
           *
           * A hidden filter will never be visible in the filter bar control
           */
          hiddenFilter?: boolean;

          /**
           * @SINCE 1.58.0
           *
           * EntitySet name to which the filter belongs
           */
          entitySetName?: string;

          /**
           * @SINCE 1.58.0
           *
           * EntityType name to which the filter belongs
           */
          entityTypeName?: string;

          /**
           * This event is fired when one of the properties is changed.
           */
          change?: Function;

          /**
           * The control of the filter.
           */
          control?: sap.ui.core.Control;
        }
        /**
         * The control displays filters in a user-friendly manner to populate values for a query. The FilterBar
         * consists of a row containing the {@link sap.ui.comp.variants.VariantManagement VariantManagement} control,
         * the related buttons, and an area underneath displaying the filters. The filters are arranged in a logical
         * row that is divided depending on the space available and the width of the filters. The area containing
         * the filters can be hidden or shown using the Hide FilterBar / Show FilterBar button. The Go button triggers
         * the search event, and the Filters button shows the filter dialog.
         *  In this dialog, the consumer has full control over the FilterBar. The filters in this dialog are displayed
         * in one column and organized in groups. The filter items of the `filterItems` aggregation are grouped
         * in the Basic group . Each filter can be marked as visible in the FilterBar by selecting Add to FilterBar.
         * In addition, the items in the `filterGroupItems` aggregation can be marked as part of the current variant.
         * The FilterBar also supports a different UI layout when used inside a value help dialog. In this case
         * the FilterBar consists of two logical areas, one containing the general search button and one the Advanced
         * Search area. The Advanced Search is a collapsible area displaying the advanced filters in two columns.
         */
        class FilterBar extends sap.ui.layout.Grid {
          /**
           * Constructor for a new FilterBar.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           * See:
           * 	{@link topic:2ae520a67c44495ab5dbc69668c47a7f Filter Bar}
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: FilterBarOpts
          );

          /**
           * Enables to add application specific content to the filters dialog. If the content was not yet added it
           * will be added. The content will be set to visible, all other filters dialog content will be set to invisible.
           */
          addFilterDialogContent(
            /**
             * to be added; if empty, nothing is inserted.
             */
            oContent: sap.ui.core.Control
          ): sap.ui.core.Control;
          /**
           * Adds some filterGroupItem to the aggregation {@link #getFilterGroupItems filterGroupItems}.
           */
          addFilterGroupItem(
            /**
             * The filterGroupItem to add; if empty, nothing is inserted
             */
            oFilterGroupItem: sap.ui.comp.filterbar.FilterGroupItem
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @deprecated (since 1.48.0) - Use aggregation `filterGroupItems` instead.
           *
           * Adds some filterItem to the aggregation {@link #getFilterItems filterItems}.
           */
          addFilterItem(
            /**
             * The filterItem to add; if empty, nothing is inserted
             */
            oFilterItem: sap.ui.comp.filterbar.FilterItem
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * Applies the variant.
           */
          applyVariant(
            /**
             * JSON object
             */
            oVariant: object,
            /**
             * Describes in which context the variant is applied. The context is passed on to the application via the
             * afterVariantLoad event
             */
            sContext: string,
            /**
             * indicates if the apply was executed during the initialization phase.
             */
            bInitial: boolean
          ): void;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:afterVariantLoad afterVariantLoad} event of
           * this `sap.ui.comp.filterbar.FilterBar`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.filterbar.FilterBar` itself.
           *
           * This event is fired after a variant has been loaded and applied to the FilterBar. The event can be used
           * to adapt custom filters with data from the variant.
           */
          attachAfterVariantLoad(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.filterbar.FilterBar` itself
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:afterVariantSave afterVariantSave} event of
           * this `sap.ui.comp.filterbar.FilterBar`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.filterbar.FilterBar` itself.
           *
           * This event is fired after a variant has been saved.
           */
          attachAfterVariantSave(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.filterbar.FilterBar` itself
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.38.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:assignedFiltersChanged assignedFiltersChanged}
           * event of this `sap.ui.comp.filterbar.FilterBar`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.filterbar.FilterBar` itself.
           *
           * This event is fired when the filters information has changed. It indicates specifically that the count
           * of assigned filters may be changed. One of the intended reaction to this event would be to call `retrieveFiltersWithValuesAsText`
           * method.
           */
          attachAssignedFiltersChanged(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.filterbar.FilterBar` itself
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.28.13
           *
           * Attaches event handler `fnFunction` to the {@link #event:beforeVariantFetch beforeVariantFetch} event
           * of this `sap.ui.comp.filterbar.FilterBar`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.filterbar.FilterBar` itself.
           *
           * This event is fired before a variant is fetched.
           */
          attachBeforeVariantFetch(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.filterbar.FilterBar` itself
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @deprecated (since 1.48.2) - Replaced by the event `beforeVariantFetch`
           *
           * Attaches event handler `fnFunction` to the {@link #event:beforeVariantSave beforeVariantSave} event of
           * this `sap.ui.comp.filterbar.FilterBar`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.filterbar.FilterBar` itself.
           *
           * This event is fired before a variant is saved. The event can be used to adapt the data of the custom
           * filters, which will be saved as variant later.
           */
          attachBeforeVariantSave(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.filterbar.FilterBar` itself
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:cancel cancel} event of this `sap.ui.comp.filterbar.FilterBar`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.filterbar.FilterBar` itself.
           *
           * This event is fired when the Cancel button on the Filters dialog is pressed and the variant is marked
           * as dirty.
           */
          attachCancel(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.filterbar.FilterBar` itself
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:clear clear} event of this `sap.ui.comp.filterbar.FilterBar`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.filterbar.FilterBar` itself.
           *
           * This event is fired when the Clear button is pressed. The consumer has to clear all filters.
           */
          attachClear(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.filterbar.FilterBar` itself
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:filterChange filterChange} event of this `sap.ui.comp.filterbar.FilterBar`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.filterbar.FilterBar` itself.
           *
           * This event is fired when a filter or multiple filters has changed.
           */
          attachFilterChange(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.filterbar.FilterBar` itself
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.48.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:filtersDialogBeforeOpen filtersDialogBeforeOpen}
           * event of this `sap.ui.comp.filterbar.FilterBar`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.filterbar.FilterBar` itself.
           *
           * This event is fired after the filters dialog is opened.
           */
          attachFiltersDialogBeforeOpen(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.filterbar.FilterBar` itself
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.48.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:filtersDialogCancel filtersDialogCancel} event
           * of this `sap.ui.comp.filterbar.FilterBar`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.filterbar.FilterBar` itself.
           *
           * This event is fired when the Cancel button on the filters dialog is pressed.
           */
          attachFiltersDialogCancel(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.filterbar.FilterBar` itself
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.34.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:filtersDialogClosed filtersDialogClosed} event
           * of this `sap.ui.comp.filterbar.FilterBar`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.filterbar.FilterBar` itself.
           *
           * This event is fired after the filters dialog is closed.
           */
          attachFiltersDialogClosed(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.filterbar.FilterBar` itself
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.48.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:filtersDialogSearch filtersDialogSearch} event
           * of this `sap.ui.comp.filterbar.FilterBar`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.filterbar.FilterBar` itself.
           *
           * This event is fired when the Go button on the filters dialog is pressed.
           */
          attachFiltersDialogSearch(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.filterbar.FilterBar` itself
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.48.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:filtersDialogSearchForFilters filtersDialogSearchForFilters}
           * event of this `sap.ui.comp.filterbar.FilterBar`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.filterbar.FilterBar` itself.
           *
           * This event is fired when search field of the filter dialog is changed.
           */
          attachFiltersDialogSearchForFilters(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.filterbar.FilterBar` itself
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:initialise initialise} event of this `sap.ui.comp.filterbar.FilterBar`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.filterbar.FilterBar` itself.
           *
           * This event is fired when the FilterBar is initialized to indicate that metadata are available.
           */
          attachInitialise(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.filterbar.FilterBar` itself
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.38.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.ui.comp.filterbar.FilterBar`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.filterbar.FilterBar` itself.
           *
           * This event is fired after the `FilterBar` has been initialized, the user's default variant has been applied,
           * and a stable filter state has been achieved. With this event all relevant filter information, for example,
           * for navigation-related actions, is available via {@link sap.ui.comp.filterbar.FilterBar#getUiState}.
           */
          attachInitialized(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.filterbar.FilterBar` itself
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:reset reset} event of this `sap.ui.comp.filterbar.FilterBar`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.filterbar.FilterBar` itself.
           *
           * This event is fired when the Restore button is pressed.
           */
          attachReset(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.filterbar.FilterBar` itself
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:search search} event of this `sap.ui.comp.filterbar.FilterBar`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.filterbar.FilterBar` itself.
           *
           * This event is fired when the Go button is pressed.
           */
          attachSearch(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.filterbar.FilterBar` itself
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * Resets the current selection in the variant management control to standard.
           */
          clearVariantSelection(): void;
          /**
           * Destroys all the filterGroupItems in the aggregation {@link #getFilterGroupItems filterGroupItems}.
           */
          destroyFilterGroupItems(): sap.ui.comp.filterbar.FilterBar;
          /**
           * @deprecated (since 1.48.0) - Use aggregation `filterGroupItems` instead.
           *
           * Destroys all the filterItems in the aggregation {@link #getFilterItems filterItems}.
           */
          destroyFilterItems(): sap.ui.comp.filterbar.FilterBar;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:afterVariantLoad afterVariantLoad} event of
           * this `sap.ui.comp.filterbar.FilterBar`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachAfterVariantLoad(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:afterVariantSave afterVariantSave} event of
           * this `sap.ui.comp.filterbar.FilterBar`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachAfterVariantSave(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.38.0
           *
           * Detaches event handler `fnFunction` from the {@link #event:assignedFiltersChanged assignedFiltersChanged}
           * event of this `sap.ui.comp.filterbar.FilterBar`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachAssignedFiltersChanged(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.28.13
           *
           * Detaches event handler `fnFunction` from the {@link #event:beforeVariantFetch beforeVariantFetch} event
           * of this `sap.ui.comp.filterbar.FilterBar`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachBeforeVariantFetch(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @deprecated (since 1.48.2) - Replaced by the event `beforeVariantFetch`
           *
           * Detaches event handler `fnFunction` from the {@link #event:beforeVariantSave beforeVariantSave} event
           * of this `sap.ui.comp.filterbar.FilterBar`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachBeforeVariantSave(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:cancel cancel} event of this `sap.ui.comp.filterbar.FilterBar`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachCancel(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:clear clear} event of this `sap.ui.comp.filterbar.FilterBar`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachClear(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:filterChange filterChange} event of this `sap.ui.comp.filterbar.FilterBar`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachFilterChange(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.48.0
           *
           * Detaches event handler `fnFunction` from the {@link #event:filtersDialogBeforeOpen filtersDialogBeforeOpen}
           * event of this `sap.ui.comp.filterbar.FilterBar`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachFiltersDialogBeforeOpen(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.48.0
           *
           * Detaches event handler `fnFunction` from the {@link #event:filtersDialogCancel filtersDialogCancel} event
           * of this `sap.ui.comp.filterbar.FilterBar`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachFiltersDialogCancel(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.34.0
           *
           * Detaches event handler `fnFunction` from the {@link #event:filtersDialogClosed filtersDialogClosed} event
           * of this `sap.ui.comp.filterbar.FilterBar`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachFiltersDialogClosed(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.48.0
           *
           * Detaches event handler `fnFunction` from the {@link #event:filtersDialogSearch filtersDialogSearch} event
           * of this `sap.ui.comp.filterbar.FilterBar`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachFiltersDialogSearch(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.48.0
           *
           * Detaches event handler `fnFunction` from the {@link #event:filtersDialogSearchForFilters filtersDialogSearchForFilters}
           * event of this `sap.ui.comp.filterbar.FilterBar`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachFiltersDialogSearchForFilters(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:initialise initialise} event of this `sap.ui.comp.filterbar.FilterBar`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachInitialise(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.38.0
           *
           * Detaches event handler `fnFunction` from the {@link #event:initialized initialized} event of this `sap.ui.comp.filterbar.FilterBar`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachInitialized(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:reset reset} event of this `sap.ui.comp.filterbar.FilterBar`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachReset(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:search search} event of this `sap.ui.comp.filterbar.FilterBar`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachSearch(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * Retrieves the control associated to the filter.
           */
          determineControlByFilterItem(
            /**
             * From the aggregations
             */
            oFilterItem: sap.ui.comp.filterbar.FilterItem,
            /**
             * check also analytics parameter
             */
            bConsiderParameters: boolean
          ): sap.ui.core.Control;
          /**
           * Retrieves the control based on the name and group name.
           */
          determineControlByName(
            /**
             * Name of the filter.
             */
            sName: string,
            /**
             * Group name of the filter; `null` for filter that belongs to basic group.
             */
            sGroupName: string
          ): sap.ui.core.Control;
          /**
           * Retrieves the filter corresponding to the filter name.
           */
          determineFilterItemByName(
            /**
             * the control's name
             */
            sName: string
          ): sap.ui.comp.filterbar.FilterGroupItem;
          /**
           * Retrieves the associated label based on the name and group name.
           */
          determineLabelByName(
            /**
             * Name of the filter.
             */
            sName: string,
            /**
             * Group name of the filter; `null` for filter that belongs to basic group.
             */
            sGroupName: string
          ): sap.m.Label;
          /**
           * Retrieves the mandatory filters.
           */
          determineMandatoryFilterItems(): any[];
          /**
           * Creates a new subclass of class sap.ui.comp.filterbar.FilterBar with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.layout.Grid.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Creates and returns the variant representation.
           */
          fetchVariant(): object;
          /**
           * Fires event {@link #event:afterVariantSave afterVariantSave} to attached listeners.
           */
          fireAfterVariantSave(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.38.0
           *
           * Fires event {@link #event:assignedFiltersChanged assignedFiltersChanged} to attached listeners.
           */
          fireAssignedFiltersChanged(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.28.13
           *
           * Fires event {@link #event:beforeVariantFetch beforeVariantFetch} to attached listeners.
           */
          fireBeforeVariantFetch(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * Fires event {@link #event:cancel cancel} to attached listeners.
           */
          fireCancel(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * Fires event {@link #event:clear clear} to attached listeners.
           */
          fireClear(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * Visible controls
               */
              selectionSet?: sap.ui.core.Control[];
            }
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.48.0
           *
           * Fires event {@link #event:filtersDialogBeforeOpen filtersDialogBeforeOpen} to attached listeners.
           */
          fireFiltersDialogBeforeOpen(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.48.0
           *
           * Fires event {@link #event:filtersDialogCancel filtersDialogCancel} to attached listeners.
           */
          fireFiltersDialogCancel(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.34.0
           *
           * Fires event {@link #event:filtersDialogClosed filtersDialogClosed} to attached listeners.
           */
          fireFiltersDialogClosed(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * Context of the event. Can also be `null` or `undefined`
               */
              context?: string;
            }
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.48.0
           *
           * Fires event {@link #event:filtersDialogSearch filtersDialogSearch} to attached listeners.
           */
          fireFiltersDialogSearch(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.48.0
           *
           * Fires event {@link #event:filtersDialogSearchForFilters filtersDialogSearchForFilters} to attached listeners.
           */
          fireFiltersDialogSearchForFilters(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * Contains the entered search filed value
               */
              newValue?: string;
            }
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * Fires event {@link #event:initialise initialise} to attached listeners.
           */
          fireInitialise(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.38.0
           *
           * Fires event {@link #event:initialized initialized} to attached listeners.
           */
          fireInitialized(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * Fires event {@link #event:reset reset} to attached listeners.
           */
          fireReset(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * Visible controls
               */
              selectionSet?: sap.ui.core.Control[];
            }
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * Fires event {@link #event:search search} to attached listeners.
           */
          fireSearch(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * Visible controls
               */
              selectionSet?: sap.ui.core.Control[];
            }
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * Gets current value of property {@link #getAdvancedMode advancedMode}.
           *
           * The advanced mode is only relevant for the value help scenario. UI representation is different from the
           * standard FilterBar.
           *
           * Default value is `false`.
           */
          getAdvancedMode(): boolean;
          /**
           * Retrieves filters belonging to the current variant.
           */
          getAllFilterItems(
            /**
             * Indicates that only visible filters are retrieved. **Note:** hidden filters are treated as visible filters.
             */
            bConsiderOnlyVisibleFields: boolean
          ): any[];
          /**
           * @SINCE 1.30.0
           *
           * ID of the element which is the current target of the association {@link #getBasicSearch basicSearch},
           * or `null`.
           */
          getBasicSearch(): sap.ui.core.ID;
          /**
           * Determine the internal basic search field name.
           */
          getBasicSearchName(): string;
          /**
           * Determine the value of the basic search.
           */
          getBasicSearchValue(): string;
          /**
           * @SINCE 1.28.0
           *
           * Gets current value of property {@link #getConsiderGroupTitle considerGroupTitle}.
           *
           * If this property is set, then the label for filters will be prefixed with the group title.
           *
           * Default value is `false`.
           */
          getConsiderGroupTitle(): boolean;
          /**
           * @SINCE 1.28.0
           *
           * Retrieves the current variant ID.
           */
          getCurrentVariantId(): string;
          /**
           * @SINCE 1.28.0
           * @deprecated (since 1.48) - replaced by {@link sap.ui.comp.filterbar.FilterBar#getUiState}
           *
           * Retrieves the current variant as selection variant for UI navigation
           */
          getDataSuiteFormat(
            /**
             * also include empty/invisible fields filter data
             */
            bConsiderAllFilters: boolean
          ): string;
          /**
           * @SINCE 1.34.0
           *
           * Gets current value of property {@link #getDeltaVariantMode deltaVariantMode}.
           *
           * Stores the delta as compared to the standard variant.
           *
           * Default value is `true`.
           */
          getDeltaVariantMode(): boolean;
          /**
           * @SINCE 1.75
           *
           * Reads the descriptions for given filters and value keys.
           */
          getDescriptionForKeys(
            /**
             * List of filters with value keys to be retrieved
             */
            aFiltersWithKeyValues: any[]
          ): void;
          /**
           * @SINCE 1.26.1
           *
           * Gets current value of property {@link #getFilterBarExpanded filterBarExpanded}.
           *
           * Shows the filters area. When property `useToolbar` is set to `false`, `filterBarExpanded` is set to `true`
           * automatically.
           *
           * Default value is `true`.
           */
          getFilterBarExpanded(): boolean;
          /**
           * @SINCE 1.34.0
           *
           * Gets current value of property {@link #getFilterContainerWidth filterContainerWidth}.
           *
           * Sets the width of the filters container.
           *
           * Default value is `12rem`.
           */
          getFilterContainerWidth(): string;
          /**
           * Returns the filter dialog content. `Node:`The original content is a {@link sap.ui.layout.form.Form Form}.
           * The form may be enhanced with a toolbar to enable the inner switch to an added custom content. Besides
           * such operations, the original content should not be manipulated in any way.
           */
          getFilterDialogContent(): any[];
          /**
           * Gets content of aggregation {@link #getFilterGroupItems filterGroupItems}.
           *
           * Contains all FilterBar filters.
           *  `Note:`In case a filter has to be added to the basic group
           * 	 - the property `groupName` has to be set to the constant `sap.ui.comp.filterbar.FilterBar.INTERNAL_GROUP`
           *
           * 	 - the property `groupLabel` will be handled internally and will be ignored, if set
           * 	 - the property `partOfCurrentVariant` has to be set to `true`
           * 	 - if the property `visibleInFilterBar` is set to `true`, the property `partOfCurrentVariant` will be
           * 			set internally also to `true`
           */
          getFilterGroupItems(): sap.ui.comp.filterbar.FilterGroupItem[];
          /**
           * @deprecated (since 1.48.0) - Use aggregation `filterGroupItems` instead.
           *
           * Gets content of aggregation {@link #getFilterItems filterItems}.
           *
           * Filters belonging to the basic group.
           */
          getFilterItems(): sap.ui.comp.filterbar.FilterItem[];
          /**
           * @SINCE 1.38.0
           *
           * Gets current value of property {@link #getHeader header}.
           *
           * Specifies header text that is shown in the toolbar on the first position. This property is ignored, when
           * `useToolbar` is set to `false`.
           *
           * Default value is `empty string`.
           */
          getHeader(): string;
          /**
           * Returns a metadata object for class sap.ui.comp.filterbar.FilterBar.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getPersistencyKey persistencyKey}.
           *
           * Key used to access personalization data. Only if the persistencyKey is provided, will the `VariantManagement`
           * control be used.
           *
           * Default value is `empty string`.
           */
          getPersistencyKey(): string;
          /**
           * @deprecated (since 1.32.0)
           *
           * Gets current value of property {@link #getSearchEnabled searchEnabled}.
           *
           * Enables/disables the Search button.
           *
           * Default value is `true`.
           */
          getSearchEnabled(): boolean;
          /**
           * @SINCE 1.26.1
           *
           * Gets current value of property {@link #getShowClearButton showClearButton}.
           *
           * Handles visibility of the Clear button on the Filters dialog.
           *
           * Default value is `false`.
           */
          getShowClearButton(): boolean;
          /**
           * @SINCE 1.28.0
           *
           * Gets current value of property {@link #getShowClearOnFB showClearOnFB}.
           *
           * Handles visibility of the Clear button on the FilterBar.
           *
           * Default value is `false`.
           */
          getShowClearOnFB(): boolean;
          /**
           * @SINCE 1.38.0
           *
           * Gets current value of property {@link #getShowFilterConfiguration showFilterConfiguration}.
           *
           * Handles visibility of the Filters button on the FilterBar.
           *
           * Default value is `true`.
           */
          getShowFilterConfiguration(): boolean;
          /**
           * @SINCE 1.26.1
           * @deprecated (since 1.28.0) - Replaced by property `showGoOnFB`
           *
           * Gets current value of property {@link #getShowGoButton showGoButton}.
           *
           * Handles visibility of the Go button on the FilterBar.
           */
          getShowGoButton(): boolean;
          /**
           * @SINCE 1.28.0
           *
           * Gets current value of property {@link #getShowGoOnFB showGoOnFB}.
           *
           * Handles visibility of the Go button on the FilterBar.
           *
           * Default value is `true`.
           */
          getShowGoOnFB(): boolean;
          /**
           * @SINCE 1.26.1
           *
           * Gets current value of property {@link #getShowRestoreButton showRestoreButton}.
           *
           * Handles visibility of the "Restore" button on the "Filters" dialog. **Note:** Restore works only automatically
           * when a property `persistencyKey` is set and therefore Variant Management is used. In all other cases
           * the "restore" behavior needs to be implemented by the app, based on the event `reset`.
           *
           * Default value is `true`.
           */
          getShowRestoreButton(): boolean;
          /**
           * @SINCE 1.28.0
           *
           * Gets current value of property {@link #getShowRestoreOnFB showRestoreOnFB}.
           *
           * Handles visibility of the Restore button on the FilterBar.
           *
           * Default value is `false`.
           */
          getShowRestoreOnFB(): boolean;
          /**
           * @SINCE 1.48
           *
           * Retrieves the current UI state of the `FilterBar` control.
           *  The current UI state represents the data suite format.
           */
          getUiState(
            /**
             * controls the API behavior
             */
            mProperties: {
              /**
               * include empty/invisible fields filter data. Default is `false`
               */
              allFilters: boolean;
            }
          ): sap.ui.comp.state.UIState;
          /**
           * @SINCE 1.44
           *
           * Gets current value of property {@link #getUseSnapshot useSnapshot}.
           *
           * Determines the behavior when `reset` is executed.
           *  **Note:** This property is only relevant if no variant management is used, and the filter bar is not
           * used in the advanced mode. A snapshot shows the current state of the filter bar, just before the Filters
           * dialog is opened.
           * 	 - `undefined` (default) defines the standard behavior: snapshot will be applied after `reset` was triggered
           *
           * 	 - `false` defines that the snapshot will not be applied
           * 	 - `true`is not considered at all
           */
          getUseSnapshot(): boolean;
          /**
           * @SINCE 1.38.0
           *
           * Gets current value of property {@link #getUseToolbar useToolbar}.
           *
           * Determines what design should be used. Default is the design with toolbar. The design with toolbar is
           * always used on phones. When property `useToolbar` is set to `false`, `filterBarExpanded` is set to `true`
           * automatically.
           *
           * Default value is `true`.
           */
          getUseToolbar(): boolean;
          /**
           * @SINCE 1.44.0
           *
           * Returns the associated VariantManagement control. The returned VariantManagement instance should not
           * be cached or manipulated in any ways. It should offer the application a convenient way to verify the
           * dirty state and to check for page variant scenario. The method may return `null` or a disabled VariantManagement
           * control.
           */
          getVariantManagement(): sap.ui.comp.variants.VariantManagement;
          /**
           * @SINCE 1.40.4
           *
           * Hides the Go button on FilterBar. Allows to hide the Go-button for dedicated scenarios, like liveMode.
           */
          hideGoButton(): void;
          /**
           * Checks for the provided `sap.ui.comp.filterbar.FilterGroupItem` in the aggregation {@link #getFilterGroupItems
           * filterGroupItems}. and returns its index if found or -1 otherwise.
           */
          indexOfFilterGroupItem(
            /**
             * The filterGroupItem whose index is looked for
             */
            oFilterGroupItem: sap.ui.comp.filterbar.FilterGroupItem
          ): number;
          /**
           * @deprecated (since 1.48.0) - Use aggregation `filterGroupItems` instead.
           *
           * Checks for the provided `sap.ui.comp.filterbar.FilterItem` in the aggregation {@link #getFilterItems
           * filterItems}. and returns its index if found or -1 otherwise.
           */
          indexOfFilterItem(
            /**
             * The filterItem whose index is looked for
             */
            oFilterItem: sap.ui.comp.filterbar.FilterItem
          ): number;
          /**
           * Returns the information whether the flag 'executeOnSelect' is set or not on current variant.
           */
          isCurrentVariantExecuteOnSelectEnabled(): boolean;
          /**
           * @SINCE 1.44.0
           *
           * Determines if the current variant is the standard variant
           */
          isCurrentVariantStandard(): boolean | undefined;
          /**
           * Determines if the filters dialog is opene.
           */
          isDialogOpen(): boolean;
          /**
           * Registration of a callback function. The provided callback function is executed when a variant must be
           * applied. The callback function will receive the corresponding data set containing all relevant data in
           * JSON, as initially provided by the callback for fetchData.
           */
          registerApplyData(
            /**
             * Called when a variant must be applied
             */
            fCallBack: Function
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * Registration of a callback function. The provided callback function is executed when saving a variant
           * is triggered and must provide all relevant fields and values in JSON.
           */
          registerFetchData(
            /**
             * Called when a variant must be fetched
             */
            fCallBack: Function
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.26.1
           *
           * Registration of a callback function. The provided callback function is executed to obtain the filters
           * with values.
           */
          registerGetFiltersWithValues(
            /**
             * Called when a variant must be applied
             */
            fCallBack: Function
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * Removes all entries in the aggregation filterGroupItems.
           */
          removeAllFilterGroupItems(): sap.ui.comp.filterbar.FilterGroupItem[];
          /**
           * @deprecated (since 1.48.0) - Use aggregation `filterGroupItems` instead.
           *
           * Removes all entries in the aggregation filterItems.
           */
          removeAllFilterItems(): sap.ui.comp.filterbar.FilterItem[];
          /**
           * Removes all entries in the aggregations filterItems, filterGroupItems, basicSearch
           */
          removeAllFilters(): void;
          /**
           * Removes a filterGroupItem from the aggregation {@link #getFilterGroupItems filterGroupItems}.
           */
          removeFilterGroupItem(
            /**
             * The filterGroupItem to remove or its index or id
             */
            vFilterGroupItem:
              | number
              | string
              | sap.ui.comp.filterbar.FilterGroupItem
          ): sap.ui.comp.filterbar.FilterGroupItem;
          /**
           * @deprecated (since 1.48.0) - Use aggregation `filterGroupItems` instead.
           *
           * Removes a filterItem from the aggregation {@link #getFilterItems filterItems}.
           */
          removeFilterItem(
            /**
             * The filterItem to remove or its index or id
             */
            vFilterItem: number | string | sap.ui.comp.filterbar.FilterItem
          ): sap.ui.comp.filterbar.FilterItem;
          /**
           * @SINCE 1.40.4
           *
           * Restores the visibility of the Go button on FilterBar. The visibilty of the Go button will be set, according
           * to the showGoOnFB property.
           */
          restoreGoButton(): void;
          /**
           * Retrieves the labels of all visible filters that belongs to the current variant and have an assigned
           * value.
           */
          retrieveFiltersWithValues(): any[];
          /**
           * Returns a summary string that contains information about the filters currently assigned. The string starts
           * with "Filtered By", followed by the number of set filters and their labels.
           *  Example:
           *  Filtered By (3): Company Code, Fiscal Year, Customer
           */
          retrieveFiltersWithValuesAsText(): string;
          /**
           * Executes the search event. Controls of all visible filters will be passed as event-parameters.
           */
          search(): boolean;
          /**
           * Sets a new value for property {@link #getAdvancedMode advancedMode}.
           *
           * The advanced mode is only relevant for the value help scenario. UI representation is different from the
           * standard FilterBar.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setAdvancedMode(
            /**
             * New value for property `advancedMode`
             */
            bAdvancedMode: boolean
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.30.0
           *
           * Sets the associated {@link #getBasicSearch basicSearch}.
           */
          setBasicSearch(
            /**
             * ID of an element which becomes the new target of this basicSearch association; alternatively, an element
             * instance may be given
             */
            oBasicSearch: sap.ui.core.ID | sap.m.SearchField
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.28.0
           *
           * Sets a new value for property {@link #getConsiderGroupTitle considerGroupTitle}.
           *
           * If this property is set, then the label for filters will be prefixed with the group title.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setConsiderGroupTitle(
            /**
             * New value for property `considerGroupTitle`
             */
            bConsiderGroupTitle: boolean
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * Sets the height of the content area of the dialog. The passed dimension will be interpreted as 'px'.
           */
          setContentHeight(
            /**
             * the content height of the filters dialog.
             */
            nHeight: Number
          ): void;
          /**
           * Sets the width of the content area of the dialog. The passed dimension will be interpreted as 'px'.
           */
          setContentWidth(
            /**
             * the content width of the filters dialog.
             */
            nWidth: Number
          ): void;
          /**
           * @SINCE 1.28.0
           *
           * Sets the current variant ID.
           */
          setCurrentVariantId(
            /**
             * ID of the variant
             */
            sVariantId: string,
            /**
             * If set to `true`, the `applyVariant` method is not executed yet. Relevant during navigation, when called
             * before the initialise event has been executed.
             */
            bDoNotApplyVariant: boolean
          ): void;
          /**
           * @SINCE 1.28.0
           * @deprecated (since 1.48) - replaced by {@link sap.ui.comp.filterbar.FilterBar#setUiState}
           *
           * Sets the selection variant for UI navigation to FilterBar.
           */
          setDataSuiteFormat(
            /**
             * Represents the selection variants for UI navigation
             */
            sSuiteData: string,
            /**
             * Replaces existing filter data
             */
            bReplace: boolean
          ): void;
          /**
           * @SINCE 1.34.0
           *
           * Sets a new value for property {@link #getDeltaVariantMode deltaVariantMode}.
           *
           * Stores the delta as compared to the standard variant.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setDeltaVariantMode(
            /**
             * New value for property `deltaVariantMode`
             */
            bDeltaVariantMode: boolean
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.26.1
           *
           * Sets a new value for property {@link #getFilterBarExpanded filterBarExpanded}.
           *
           * Shows the filters area. When property `useToolbar` is set to `false`, `filterBarExpanded` is set to `true`
           * automatically.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setFilterBarExpanded(
            /**
             * New value for property `filterBarExpanded`
             */
            bFilterBarExpanded: boolean
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.34.0
           *
           * Sets a new value for property {@link #getFilterContainerWidth filterContainerWidth}.
           *
           * Sets the width of the filters container.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `12rem`.
           */
          setFilterContainerWidth(
            /**
             * New value for property `filterContainerWidth`
             */
            sFilterContainerWidth: string
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.38.0
           *
           * Sets a new value for property {@link #getHeader header}.
           *
           * Specifies header text that is shown in the toolbar on the first position. This property is ignored, when
           * `useToolbar` is set to `false`.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `empty string`.
           */
          setHeader(
            /**
             * New value for property `header`
             */
            sHeader: string
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * Sets a new value for property {@link #getPersistencyKey persistencyKey}.
           *
           * Key used to access personalization data. Only if the persistencyKey is provided, will the `VariantManagement`
           * control be used.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `empty string`.
           */
          setPersistencyKey(
            /**
             * New value for property `persistencyKey`
             */
            sPersistencyKey: string
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @deprecated (since 1.32.0)
           *
           * Sets a new value for property {@link #getSearchEnabled searchEnabled}.
           *
           * Enables/disables the Search button.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setSearchEnabled(
            /**
             * New value for property `searchEnabled`
             */
            bSearchEnabled: boolean
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.26.1
           *
           * Sets a new value for property {@link #getShowClearButton showClearButton}.
           *
           * Handles visibility of the Clear button on the Filters dialog.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setShowClearButton(
            /**
             * New value for property `showClearButton`
             */
            bShowClearButton: boolean
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.28.0
           *
           * Sets a new value for property {@link #getShowClearOnFB showClearOnFB}.
           *
           * Handles visibility of the Clear button on the FilterBar.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setShowClearOnFB(
            /**
             * New value for property `showClearOnFB`
             */
            bShowClearOnFB: boolean
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.38.0
           *
           * Sets a new value for property {@link #getShowFilterConfiguration showFilterConfiguration}.
           *
           * Handles visibility of the Filters button on the FilterBar.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setShowFilterConfiguration(
            /**
             * New value for property `showFilterConfiguration`
             */
            bShowFilterConfiguration: boolean
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.26.1
           * @deprecated (since 1.28.0) - Replaced by property `showGoOnFB`
           *
           * Sets a new value for property {@link #getShowGoButton showGoButton}.
           *
           * Handles visibility of the Go button on the FilterBar.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setShowGoButton(
            /**
             * New value for property `showGoButton`
             */
            bShowGoButton: boolean
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.28.0
           *
           * Sets a new value for property {@link #getShowGoOnFB showGoOnFB}.
           *
           * Handles visibility of the Go button on the FilterBar.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setShowGoOnFB(
            /**
             * New value for property `showGoOnFB`
             */
            bShowGoOnFB: boolean
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.26.1
           *
           * Sets a new value for property {@link #getShowRestoreButton showRestoreButton}.
           *
           * Handles visibility of the "Restore" button on the "Filters" dialog. **Note:** Restore works only automatically
           * when a property `persistencyKey` is set and therefore Variant Management is used. In all other cases
           * the "restore" behavior needs to be implemented by the app, based on the event `reset`.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setShowRestoreButton(
            /**
             * New value for property `showRestoreButton`
             */
            bShowRestoreButton: boolean
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.28.0
           *
           * Sets a new value for property {@link #getShowRestoreOnFB showRestoreOnFB}.
           *
           * Handles visibility of the Restore button on the FilterBar.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setShowRestoreOnFB(
            /**
             * New value for property `showRestoreOnFB`
             */
            bShowRestoreOnFB: boolean
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.48
           *
           * Sets the current UI state of the `FilterBar` control.
           *  The current UI state represents the data suite format.
           */
          setUiState(
            /**
             * object representing the ui-state. Currently only the SelectionVariant part is considered.
             */
            oUiState: sap.ui.comp.state.UIState,
            /**
             * controls the API behavior
             */
            mProperties: {
              /**
               * Replaces existing filter data
               */
              replace: boolean;
              /**
               * Determines filters and parameters based on the name.
               * 	 - `true`: Determines filters and parameters based on their exact name and type. If there is no exact
               * 			match, the filter/parameter will be ignored.
               * 	 - `false`: Determines parameters first following this rule set:
               * 	If a parameter is found, use it.
               * 	 - If a filter is found, check first if a matching parameter exists with the filter name prefixed with
               * 			"P_". If there is a match, use it as parameter, otherwise use it as filter.
               */
              strictMode: boolean;
            }
          ): void;
          /**
           * @SINCE 1.54
           *
           * Apply the SelectionPresentationVariant annotated information as a variant. The current UI state represents
           * the data suite format.
           */
          setUiStateAsVariant(
            /**
             * object representing the ui-state.Only the SelectionVariant part is considered.
             */
            oUiState: sap.ui.comp.state.UIState
          ): void;
          /**
           * @SINCE 1.44
           *
           * Sets a new value for property {@link #getUseSnapshot useSnapshot}.
           *
           * Determines the behavior when `reset` is executed.
           *  **Note:** This property is only relevant if no variant management is used, and the filter bar is not
           * used in the advanced mode. A snapshot shows the current state of the filter bar, just before the Filters
           * dialog is opened.
           * 	 - `undefined` (default) defines the standard behavior: snapshot will be applied after `reset` was triggered
           *
           * 	 - `false` defines that the snapshot will not be applied
           * 	 - `true`is not considered at all
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setUseSnapshot(
            /**
             * New value for property `useSnapshot`
             */
            bUseSnapshot: boolean
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.38.0
           *
           * Sets a new value for property {@link #getUseToolbar useToolbar}.
           *
           * Determines what design should be used. Default is the design with toolbar. The design with toolbar is
           * always used on phones. When property `useToolbar` is set to `false`, `filterBarExpanded` is set to `true`
           * automatically.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setUseToolbar(
            /**
             * New value for property `useToolbar`
             */
            bUseToolbar: boolean
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * Creates and shows the filters dialog. This method may only be called when FilterBar is displayed and
           * basically accessible. It may also only be called when the filters dialog is currently not opened.
           */
          showFilterDialog(): void;
          /**
           * This method will be called by the SmartVariantMangement and indicates, that the standard variant was
           * obtained. It indicates, that the variant management is fully initialized.
           */
          variantsInitialized(): void;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:afterVariantLoad afterVariantLoad} event of
           * this `sap.ui.comp.filterbar.FilterBar`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.filterbar.FilterBar` itself.
           *
           * This event is fired after a variant has been loaded and applied to the FilterBar. The event can be used
           * to adapt custom filters with data from the variant.
           */
          attachAfterVariantLoad(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.filterbar.FilterBar` itself
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:afterVariantSave afterVariantSave} event of
           * this `sap.ui.comp.filterbar.FilterBar`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.filterbar.FilterBar` itself.
           *
           * This event is fired after a variant has been saved.
           */
          attachAfterVariantSave(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.filterbar.FilterBar` itself
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.38.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:assignedFiltersChanged assignedFiltersChanged}
           * event of this `sap.ui.comp.filterbar.FilterBar`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.filterbar.FilterBar` itself.
           *
           * This event is fired when the filters information has changed. It indicates specifically that the count
           * of assigned filters may be changed. One of the intended reaction to this event would be to call `retrieveFiltersWithValuesAsText`
           * method.
           */
          attachAssignedFiltersChanged(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.filterbar.FilterBar` itself
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.28.13
           *
           * Attaches event handler `fnFunction` to the {@link #event:beforeVariantFetch beforeVariantFetch} event
           * of this `sap.ui.comp.filterbar.FilterBar`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.filterbar.FilterBar` itself.
           *
           * This event is fired before a variant is fetched.
           */
          attachBeforeVariantFetch(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.filterbar.FilterBar` itself
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @deprecated (since 1.48.2) - Replaced by the event `beforeVariantFetch`
           *
           * Attaches event handler `fnFunction` to the {@link #event:beforeVariantSave beforeVariantSave} event of
           * this `sap.ui.comp.filterbar.FilterBar`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.filterbar.FilterBar` itself.
           *
           * This event is fired before a variant is saved. The event can be used to adapt the data of the custom
           * filters, which will be saved as variant later.
           */
          attachBeforeVariantSave(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.filterbar.FilterBar` itself
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:cancel cancel} event of this `sap.ui.comp.filterbar.FilterBar`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.filterbar.FilterBar` itself.
           *
           * This event is fired when the Cancel button on the Filters dialog is pressed and the variant is marked
           * as dirty.
           */
          attachCancel(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.filterbar.FilterBar` itself
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:clear clear} event of this `sap.ui.comp.filterbar.FilterBar`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.filterbar.FilterBar` itself.
           *
           * This event is fired when the Clear button is pressed. The consumer has to clear all filters.
           */
          attachClear(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.filterbar.FilterBar` itself
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:filterChange filterChange} event of this `sap.ui.comp.filterbar.FilterBar`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.filterbar.FilterBar` itself.
           *
           * This event is fired when a filter or multiple filters has changed.
           */
          attachFilterChange(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.filterbar.FilterBar` itself
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.48.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:filtersDialogBeforeOpen filtersDialogBeforeOpen}
           * event of this `sap.ui.comp.filterbar.FilterBar`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.filterbar.FilterBar` itself.
           *
           * This event is fired after the filters dialog is opened.
           */
          attachFiltersDialogBeforeOpen(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.filterbar.FilterBar` itself
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.48.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:filtersDialogCancel filtersDialogCancel} event
           * of this `sap.ui.comp.filterbar.FilterBar`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.filterbar.FilterBar` itself.
           *
           * This event is fired when the Cancel button on the filters dialog is pressed.
           */
          attachFiltersDialogCancel(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.filterbar.FilterBar` itself
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.34.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:filtersDialogClosed filtersDialogClosed} event
           * of this `sap.ui.comp.filterbar.FilterBar`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.filterbar.FilterBar` itself.
           *
           * This event is fired after the filters dialog is closed.
           */
          attachFiltersDialogClosed(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.filterbar.FilterBar` itself
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.48.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:filtersDialogSearch filtersDialogSearch} event
           * of this `sap.ui.comp.filterbar.FilterBar`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.filterbar.FilterBar` itself.
           *
           * This event is fired when the Go button on the filters dialog is pressed.
           */
          attachFiltersDialogSearch(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.filterbar.FilterBar` itself
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.48.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:filtersDialogSearchForFilters filtersDialogSearchForFilters}
           * event of this `sap.ui.comp.filterbar.FilterBar`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.filterbar.FilterBar` itself.
           *
           * This event is fired when search field of the filter dialog is changed.
           */
          attachFiltersDialogSearchForFilters(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.filterbar.FilterBar` itself
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:initialise initialise} event of this `sap.ui.comp.filterbar.FilterBar`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.filterbar.FilterBar` itself.
           *
           * This event is fired when the FilterBar is initialized to indicate that metadata are available.
           */
          attachInitialise(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.filterbar.FilterBar` itself
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.38.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.ui.comp.filterbar.FilterBar`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.filterbar.FilterBar` itself.
           *
           * This event is fired after the `FilterBar` has been initialized, the user's default variant has been applied,
           * and a stable filter state has been achieved. With this event all relevant filter information, for example,
           * for navigation-related actions, is available via {@link sap.ui.comp.filterbar.FilterBar#getUiState}.
           */
          attachInitialized(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.filterbar.FilterBar` itself
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:reset reset} event of this `sap.ui.comp.filterbar.FilterBar`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.filterbar.FilterBar` itself.
           *
           * This event is fired when the Restore button is pressed.
           */
          attachReset(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.filterbar.FilterBar` itself
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:search search} event of this `sap.ui.comp.filterbar.FilterBar`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.filterbar.FilterBar` itself.
           *
           * This event is fired when the Go button is pressed.
           */
          attachSearch(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.filterbar.FilterBar` itself
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterBar;
        }
        /**
         * Represents a filter belonging to a group other than basic.
         */
        class FilterGroupItem extends sap.ui.comp.filterbar.FilterItem {
          /**
           * Constructor for a new FilterBar/FilterGroupItem.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: FilterGroupItemOpts
          );
          /**
           * @SINCE 1.26.1
           *
           * Controls the visibility of a filter item in the filter bar. Default value is `false`.
           */
          getVisibleInFilterBar: undefined;

          /**
           * Destroys this element.
           */
          // @ts-ignore
          destroy(): void;
          /**
           * Creates a new subclass of class sap.ui.comp.filterbar.FilterGroupItem with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.comp.filterbar.FilterItem.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets current value of property {@link #getGroupName groupName}.
           *
           * Name of the group.
           */
          getGroupName(): string;
          /**
           * Gets current value of property {@link #getGroupTitle groupTitle}.
           *
           * Title of the group.
           */
          getGroupTitle(): string;
          /**
           * Returns a metadata object for class sap.ui.comp.filterbar.FilterGroupItem.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Sets a new value for property {@link #getGroupName groupName}.
           *
           * Name of the group.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setGroupName(
            /**
             * New value for property `groupName`
             */
            sGroupName: string
          ): sap.ui.comp.filterbar.FilterGroupItem;
          /**
           * Setter for group title.
           */
          setGroupTitle(
            /**
             * Group title
             */
            sValue: string
          ): void;
        }
        /**
         * Represents a filter belonging to the basic group.
         */
        class FilterItem extends sap.ui.core.Element {
          /**
           * Constructor for a new FilterBar/FilterItem.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: FilterItemOpts
          );

          /**
           * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.comp.filterbar.FilterItem`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.filterbar.FilterItem` itself.
           *
           * This event is fired when one of the properties is changed.
           */
          attachChange(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.filterbar.FilterItem` itself
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterItem;
          /**
           * Destroys this element.
           */
          // @ts-ignore
          destroy(): void;
          /**
           * Destroys the control in the aggregation {@link #getControl control}.
           */
          destroyControl(): sap.ui.comp.filterbar.FilterItem;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.ui.comp.filterbar.FilterItem`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachChange(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterItem;
          /**
           * Creates a new subclass of class sap.ui.comp.filterbar.FilterItem with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:change change} to attached listeners.
           */
          fireChange(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * Name of the changed property
               */
              propertyName?: string;
            }
          ): sap.ui.comp.filterbar.FilterItem;
          /**
           * Always returns the initially added control.
           */
          getControl(): void;
          /**
           * @SINCE 1.52.0
           *
           * Gets current value of property {@link #getControlTooltip controlTooltip}.
           *
           * Tooltip for the filter'c control.
           */
          getControlTooltip(): string;
          /**
           * @SINCE 1.58.0
           *
           * Gets current value of property {@link #getEntitySetName entitySetName}.
           *
           * EntitySet name to which the filter belongs
           */
          getEntitySetName(): string;
          /**
           * @SINCE 1.58.0
           *
           * Gets current value of property {@link #getEntityTypeName entityTypeName}.
           *
           * EntityType name to which the filter belongs
           */
          getEntityTypeName(): string;
          /**
           * @SINCE 1.44.0
           *
           * Gets current value of property {@link #getHiddenFilter hiddenFilter}.
           *
           * A hidden filter will never be visible in the filter bar control
           *
           * Default value is `false`.
           */
          getHiddenFilter(): boolean;
          /**
           * Gets current value of property {@link #getLabel label}.
           *
           * Label of the filter.
           */
          getLabel(): string;
          /**
           * Gets current value of property {@link #getLabelTooltip labelTooltip}.
           *
           * Tooltip for the filter.
           */
          getLabelTooltip(): string;
          /**
           * Gets current value of property {@link #getMandatory mandatory}.
           *
           * Mandatory flag.
           *
           * Default value is `false`.
           */
          getMandatory(): boolean;
          /**
           * Returns a metadata object for class sap.ui.comp.filterbar.FilterItem.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getName name}.
           *
           * Name of the filter. This is an identifier for the filter and has to be unique.
           */
          getName(): string;
          /**
           * @SINCE 1.26.1
           *
           * Gets current value of property {@link #getPartOfCurrentVariant partOfCurrentVariant}.
           *
           * Determines if a filter is part of the currently selected variant.
           *  **Note:** This property can also be changed using the `visibleInFilterBar` property and by user interaction
           * in the Select Filters dialog or the variant handling.
           *
           * Default value is `false`.
           */
          getPartOfCurrentVariant(): boolean;
          /**
           * Gets current value of property {@link #getVisible visible}.
           *
           * Visibility state of the filter.
           *
           * Default value is `true`.
           */
          getVisible(): boolean;
          /**
           * @SINCE 1.26.1
           *
           * Gets current value of property {@link #getVisibleInFilterBar visibleInFilterBar}.
           *
           * Controls the visibility of a filter item in the filter bar.
           *
           * Default value is `true`.
           */
          getVisibleInFilterBar(): boolean;
          /**
           * Initializes the filter item.
           */
          // @ts-ignore
          init(): void;
          /**
           * Sets the corresponding control. The control may not be overwritten by the application, once the filter
           * item is assigned to the FilterBar.
           */
          setControl(
            /**
             * associated with the filter.
             */
            oControl: sap.ui.core.Control
          ): void;
          /**
           * @SINCE 1.52.0
           *
           * Sets a new value for property {@link #getControlTooltip controlTooltip}.
           *
           * Tooltip for the filter'c control.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setControlTooltip(
            /**
             * New value for property `controlTooltip`
             */
            sControlTooltip: string
          ): sap.ui.comp.filterbar.FilterItem;
          /**
           * @SINCE 1.58.0
           *
           * Sets a new value for property {@link #getEntitySetName entitySetName}.
           *
           * EntitySet name to which the filter belongs
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setEntitySetName(
            /**
             * New value for property `entitySetName`
             */
            sEntitySetName: string
          ): sap.ui.comp.filterbar.FilterItem;
          /**
           * @SINCE 1.58.0
           *
           * Sets a new value for property {@link #getEntityTypeName entityTypeName}.
           *
           * EntityType name to which the filter belongs
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setEntityTypeName(
            /**
             * New value for property `entityTypeName`
             */
            sEntityTypeName: string
          ): sap.ui.comp.filterbar.FilterItem;
          /**
           * @SINCE 1.44.0
           *
           * Sets a new value for property {@link #getHiddenFilter hiddenFilter}.
           *
           * A hidden filter will never be visible in the filter bar control
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setHiddenFilter(
            /**
             * New value for property `hiddenFilter`
             */
            bHiddenFilter: boolean
          ): sap.ui.comp.filterbar.FilterItem;
          /**
           * Setter for label.
           */
          setLabel(
            /**
             * Label text
             */
            sValue: string
          ): void;
          /**
           * Setter for tooltip.
           */
          setLabelTooltip(
            /**
             * Tooltip text
             */
            sText: string
          ): void;
          /**
           * Setter for mandatory flag.
           */
          setMandatory(
            /**
             * Mandatory state
             */
            bValue: string
          ): void;
          /**
           * Sets a new value for property {@link #getName name}.
           *
           * Name of the filter. This is an identifier for the filter and has to be unique.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setName(
            /**
             * New value for property `name`
             */
            sName: string
          ): sap.ui.comp.filterbar.FilterItem;
          /**
           * Setter for partOfCurrentVariant in filter bar.
           */
          setPartOfCurrentVariant(
            /**
             * State of visibility in filter bar
             */
            bVisible: boolean
          ): void;
          /**
           * Setter for visible property.
           */
          setVisible(
            /**
             * State of visibility
             */
            bVisible: boolean
          ): void;
          /**
           * @SINCE 1.26.1
           *
           * Setter for visible in filter bar.
           */
          setVisibleInFilterBar(
            /**
             * State of visibility in filter bar
             */
            bVisible: boolean
          ): void;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.comp.filterbar.FilterItem`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.filterbar.FilterItem` itself.
           *
           * This event is fired when one of the properties is changed.
           */
          attachChange(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.filterbar.FilterItem` itself
             */
            oListener?: object
          ): sap.ui.comp.filterbar.FilterItem;
        }
      }

      namespace navpopover {
        interface LinkDataOpts extends sap.ui.core.ElementOpts {
          /**
           * Text which can be displayed on the UI
           */
          text?: string;

          /**
           * Destination link for a navigation operation in internal format. **Note**: The link will be encoded before
           * it is shown in external format using the `hrefForExternal` method of the CrossApplicationNavigation service.
           */
          href?: string;

          /**
           * The standard values for the `target` property are: _self, _top, _blank, _parent, _search. Alternatively,
           * a frame name can be entered. This property is only used if the `href` property is set.
           */
          target?: string;

          /**
           * @SINCE 1.42.0
           *
           * Description of the link.
           */
          description?: string;

          /**
           * @SINCE 1.44.0
           *
           * Describes whether the link should be visible on the screen.
           */
          visible?: boolean;

          /**
           * @SINCE 1.44.0
           *
           * Key of link.
           */
          key?: string;

          /**
           * @SINCE 1.46.0
           *
           * Callback for `press` event.
           */
          press?: object;

          /**
           * @SINCE 1.48.0
           *
           * Marker for superior action.
           */
          isSuperiorAction?: boolean;

          /**
           * @SINCE 1.58.0
           *
           * Describes whether the visibility is changed by end user or not.
           */
          visibleChangedByUser?: boolean;
        }

        interface NavigationPopoverOpts extends sap.m.ResponsivePopoverOpts {
          /**
           * @SINCE 1.28.0
           * @deprecated (since 1.40.0) - The property `semanticObjectName` is obsolete as target determination is
           * no longer done by NavigationPopover. Instead the NavigationPopoverHandler is responsible for target determination.
           *
           * The name of the semantic object.
           */
          semanticObjectName?: string;

          /**
           * @SINCE 1.28.0
           * @deprecated (since 1.40.0) - The property `semanticAttributes` is obsolete as target determination is
           * no longer done by NavigationPopover. Instead the NavigationPopoverHandler is responsible for target determination.
           *
           * Describes the semantic attributes. The attribute has to be a map.
           */
          semanticAttributes?: object;

          /**
           * @SINCE 1.28.0
           * @deprecated (since 1.40.0) - The property `appStateKey` is obsolete as target determination is no longer
           * done by NavigationPopover. Instead the NavigationPopoverHandler is responsible for target determination.
           *
           * The application state key passed to retrieve the navigation targets.
           */
          appStateKey?: string;

          /**
           * @SINCE 1.28.0
           *
           * Sets the description of the main navigation link. If `mainNavigation` also contains an href description,
           * then `mainNavigationId` is displayed. If `mainNavigationId` is set to an empty string `''`, neither description
           * nor subtitle are displayed.
           */
          mainNavigationId?: string;

          /**
           * @SINCE 1.44.0
           *
           * Determines the text of personalization link. If this property is set to some string, choosing the personalization
           * link will trigger the `availableActionsPersonalizationPress` event. If this property is not set, the
           * personalization link is not shown.
           */
          availableActionsPersonalizationText?: string;

          /**
           * @SINCE 1.28.0
           * @deprecated (since 1.40.0) - The event `navigationTargetsObtained` is obsolete as target determination
           * is no longer done by NavigationPopover. Instead the NavigationPopoverHandler is responsible for target
           * determination. The event `navigationTargetsObtained` is fired from NavigationPopoverHandler after navigation
           * targets are determined.
           *
           * The navigation targets that are shown.
           */
          targetsObtained?: Function;

          /**
           * @SINCE 1.28.0
           *
           * This event is fired when a link is chosen.
           */
          navigate?: Function;

          /**
           * @SINCE 1.44.0
           *
           * This event is fired when personalization of `availableActions` is chosen.
           */
          availableActionsPersonalizationPress?: Function;

          /**
           * @SINCE 1.28.0
           *
           * A list of available actions shown as links.
           */
          availableActions?:
            | sap.ui.comp.navpopover.LinkData[]
            | sap.ui.comp.navpopover.LinkData;

          /**
           * @SINCE 1.28.0
           *
           * The main navigation link. If `mainNavigationId` is not set then `text` of `mainNavigation` is displayed.
           * Otherwise the `mainNavigationId` is displayed.
           */
          mainNavigation?: sap.ui.comp.navpopover.LinkData;

          /**
           * @SINCE 1.28.0
           * @deprecated (since 1.40.0) - The property `ownNavigation` is obsolete as target determination is no longer
           * done by NavigationPopover. Instead the NavigationPopoverHandler is responsible for target determination.
           *
           * The navigation taking the user back to the source application.
           */
          ownNavigation?: sap.ui.comp.navpopover.LinkData;

          /**
           * @SINCE 1.28.0
           *
           * Source control for which the popover is displayed.
           */
          source?: sap.ui.core.Control | string;

          /**
           * @SINCE 1.28.0
           *
           * In addition to main navigation link and available links some additional content can be displayed in the
           * popover.
           */
          extraContent?: sap.ui.core.Control | string;

          /**
           * The parent component.
           */
          component?: sap.ui.core.Element | string;
        }

        interface SemanticObjectControllerOpts extends sap.ui.core.ElementOpts {
          /**
           * @SINCE 1.28.0
           *
           * Comma-separated list of fields that must not be displayed as links.
           */
          ignoredFields?: string;

          /**
           * @SINCE 1.28.0
           * @deprecated (since 1.42.0) - The property `prefetchNavigationTargets` is obsolete as navigation targets
           * are determined automatically. The SmartLink controls are re-rendered as soon as the asynchronous determination
           * of navigation targets has been completed.
           *
           * If set to `true`, the SemanticObjectController will retrieve all navigation targets once and will disable
           * links for which no targets were found. Setting this value to `true` will trigger an additional roundtrip.
           */
          prefetchNavigationTargets?: boolean;

          /**
           * @SINCE 1.28.0
           *
           * Maps the fields to the related semantic objects. When accessing this property for the first time, the
           * mapping will be calculated from the metadata within the provided model.
           */
          fieldSemanticObjectMap?: object;

          /**
           * @SINCE 1.28.0
           *
           * The name of the entity set used. If `entitySet` has not been defined, the SemanticObjectController tries
           * to retrieve the name from its parents. **Note:** This is not a dynamic UI5 property.
           */
          entitySet?: string;

          /**
           * @SINCE 1.40.0
           *
           * Navigation property that points from the current to the related entity type where the `com.sap.vocabularies.Communication.v1.Contact`
           * annotation is defined, for example, ` '\{"Supplier":"to_Supplier", "CompanyName":"to_Company"\}' `. An
           * empty string means that the related entity type is the current one.
           */
          contactAnnotationPaths?: object;

          /**
           * @SINCE 1.44.0
           *
           * Determines whether the personalization link is shown inside the NavigationPopover control. For example,
           * ` '\{"Supplier":false, "CompanyName":true\}' `.
           */
          enableAvailableActionsPersonalization?: object;

          /**
           * @SINCE 1.48.0
           *
           * If set to `false`, the SmartLink control will not replace its field name with the according `semanticObject`
           * property during the calculation of the semantic attributes.
           */
          mapFieldToSemanticObject?: boolean;

          /**
           * @SINCE 1.58.0
           *
           * Object containing fields for which the corresponding `SmartLink` control is rendered as a link even if
           * `contactAnnotationPaths` is not set and navigation targets do not exist. Setting this property to `true`
           * allows the application, for example, to modify the `SmartLink` control in the event handler, after the
           * user has clicked on a link and the registered event handler has been called.\n
           *
           * **Note:** The `ignoredFields` property and the `ignoreLinkRendering` property of the `SmartLink` control
           * take precedence over `forceLinkRendering`.\n
           *
           * Example of usage: ` '\{"Supplier":"true", "CompanyName":"true"\}' `
           */
          forceLinkRendering?: object;

          /**
           * @SINCE 1.28.0
           *
           * After the navigation targets have been retrieved, `navigationTargetsObtained` is fired and makes it possible
           * you to change the targets.
           */
          navigationTargetsObtained?: Function;

          /**
           * @SINCE 1.28.0
           *
           * Event is fired before the navigation popover opens and before navigation target links are retrieved.
           * Event can be used to change the parameters used to retrieve the navigation targets. In case of SmartLink,
           * `beforePopoverOpens` is fired after the link has been clicked.
           */
          beforePopoverOpens?: Function;

          /**
           * @SINCE 1.28.0
           *
           * This event is fired after a navigation link on the navigation popover has been clicked. This event is
           * only fired, if the user left-clicks the link. Right-clicking the link and selecting 'Open in New Window'
           * etc. in the context menu does not fire the event.
           */
          navigate?: Function;

          /**
           * @SINCE 1.28.0
           * @deprecated (since 1.42.0) - The event `prefetchDone` is obsolete because it depends on the property
           * `prefetchNavigationTargets` which has been deprecated.
           *
           * If the property `prefetchNavigationTargets` is set to `true`, event `prefetchDone` is fired after all
           * navigation targets have been retrieved.
           */
          prefetchDone?: Function;
        }

        interface SmartLinkOpts extends sap.m.LinkOpts {
          /**
           * @SINCE 1.28.0
           *
           * Name of semantic object which is used to fill the navigation popover. **Note**: Setting a value triggers
           * an asynchronous determination, so the effect can be delayed.
           */
          semanticObject?: string;

          /**
           * @SINCE 1.42.0
           *
           * Semantic object names which can be used additional to the default `semanticObject` property in order
           * to get navigation targets links.
           */
          additionalSemanticObjects?: string[];

          /**
           * @SINCE 1.28.0
           *
           * The semantic object controller controls events for several SmartLink controls. If the controller is not
           * set manually, it tries to find a SemanticObjectController in its parent hierarchy.
           */
          semanticObjectController?: any;

          /**
           * @SINCE 1.28.0
           *
           * The metadata field name for this SmartLink control.
           */
          fieldName?: string;

          /**
           * @SINCE 1.28.0
           * @deprecated (since 1.40.0) - Title section with `semanticObjectLabel` has been removed due to new UI
           * design
           *
           * Shown label of semantic object.
           */
          semanticObjectLabel?: string;

          /**
           * @SINCE 1.28.0
           *
           * Function that enables the SmartLink control to create an alternative control, which is displayed if no
           * navigation targets are available. The function has no parameters and has to return an instance of sap.ui.core.Control.
           */
          createControlCallback?: object;

          /**
           * If set to `false`, the SmartLink control will not replace its field name with the according `semanticObject`
           * property during the calculation of the semantic attributes. This enables the usage of several SmartLink
           * controls on the same semantic object.
           */
          mapFieldToSemanticObject?: boolean;

          /**
           * @SINCE 1.40.0
           *
           * Navigation property that points from the current to the related entity type where the com.sap.vocabularies.Communication.v1.Contact
           * annotation is defined, for example, `'to_Supplier'`. An empty string means that the related entity type
           * is the current one.
           */
          contactAnnotationPath?: string;

          /**
           * @SINCE 1.28.0
           *
           * If set to `true`, the SmartLink control will render the `innerControl` or the control provided by `createControlCallback`
           * instead of the actual link. This is used for example by the SemanticObjectController if this SmartLink
           * is listed in its `ignoredFields` or no navigation targets were found during prefetch.
           */
          ignoreLinkRendering?: boolean;

          /**
           * @SINCE 1.44.0
           *
           * Determines whether the personalization link is shown inside the NavigationPopover control.
           */
          enableAvailableActionsPersonalization?: boolean;

          /**
           * @SINCE 1.58.0
           *
           * If set to true, the `SmartLink` control is rendered as a link even if `contactAnnotationPath` is not
           * set and navigation targets do not exist. Setting this property to `true` allows the application, for
           * example, to modify the `SmartLink` control in the event handler, after the user has clicked on a link
           * and the registered event handler has been called.
           *
           * **Note:** The `ignoreLinkRendering` property and the `ignoredFields` property of the associated `SemanticObjectController`
           * take precedence over `forceLinkRendering`.
           */
          forceLinkRendering?: boolean;

          /**
           * @SINCE 1.48.0
           *
           * Additionally to the `text` property the Unit of Measure can be displayed.
           */
          uom?: string;

          /**
           * @SINCE 1.28.0
           *
           * Event is fired before the navigation popover opens and before navigation target links are getting retrieved.
           * Event can be used to change the parameters used to retrieve the navigation targets. In case of SmartLink
           * control, the `beforePopoverOpens` is fired after the link has been clicked.
           */
          beforePopoverOpens?: Function;

          /**
           * @SINCE 1.28.0
           *
           * After the navigation targets are retrieved, `navigationTargetsObtained` is fired and provides the possibility
           * to change the targets.
           */
          navigationTargetsObtained?: Function;

          /**
           * @SINCE 1.28.0
           *
           * This event is fired after a navigation link on the navigation popover has been clicked. This event is
           * only fired, if the user left-clicks the link. Right-clicking the link and selecting 'Open in New Window'
           * etc. in the context menu does not fire the event.
           */
          innerNavigate?: Function;

          /**
           * @SINCE 1.28.0
           *
           * Control that is displayed instead of SmartLink control, if the SmartLink is disabled (for example, if
           * no navigation targets are available). If `innerControl` is not provided, the SmartLink control tries
           * to create one with property `createControlCallback`.
           */
          innerControl?: sap.ui.core.Control;
        }
        /**
         * @SINCE 1.28.0
         *
         * Stores display text together with a navigation target hyperlink.
         *  The LinkData class is used by {@link sap.ui.comp.navpopover.SmartLink SmartLink} and {@link sap.ui.comp.navpopover.SemanticObjectController
         * SemanticObjectController} to define the visible links on {@link sap.ui.comp.navpopover.NavigationPopover
         * NavigationPopover}.
         */
        class LinkData extends sap.ui.core.Element {
          /**
           * Constructor for a new navpopover/LinkData.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: LinkDataOpts
          );

          /**
           * Creates a new subclass of class sap.ui.comp.navpopover.LinkData with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * @SINCE 1.42.0
           *
           * Gets current value of property {@link #getDescription description}.
           *
           * Description of the link.
           *
           * Default value is `undefined`.
           */
          getDescription(): string;
          /**
           * Gets current value of property {@link #getHref href}.
           *
           * Destination link for a navigation operation in internal format. **Note**: The link will be encoded before
           * it is shown in external format using the `hrefForExternal` method of the CrossApplicationNavigation service.
           */
          getHref(): string;
          /**
           * @SINCE 1.48.0
           *
           * Gets current value of property {@link #getIsSuperiorAction isSuperiorAction}.
           *
           * Marker for superior action.
           */
          getIsSuperiorAction(): boolean;
          /**
           * @SINCE 1.44.0
           *
           * Gets current value of property {@link #getKey key}.
           *
           * Key of link.
           *
           * Default value is `undefined`.
           */
          getKey(): string;
          /**
           * Returns a metadata object for class sap.ui.comp.navpopover.LinkData.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * @SINCE 1.46.0
           *
           * Gets current value of property {@link #getPress press}.
           *
           * Callback for `press` event.
           */
          getPress(): object;
          /**
           * Gets current value of property {@link #getTarget target}.
           *
           * The standard values for the `target` property are: _self, _top, _blank, _parent, _search. Alternatively,
           * a frame name can be entered. This property is only used if the `href` property is set.
           */
          getTarget(): string;
          /**
           * Gets current value of property {@link #getText text}.
           *
           * Text which can be displayed on the UI
           */
          getText(): string;
          /**
           * @SINCE 1.44.0
           *
           * Gets current value of property {@link #getVisible visible}.
           *
           * Describes whether the link should be visible on the screen.
           *
           * Default value is `true`.
           */
          getVisible(): boolean;
          /**
           * @SINCE 1.58.0
           *
           * Gets current value of property {@link #getVisibleChangedByUser visibleChangedByUser}.
           *
           * Describes whether the visibility is changed by end user or not.
           */
          getVisibleChangedByUser(): boolean;
          /**
           * @SINCE 1.42.0
           *
           * Sets a new value for property {@link #getDescription description}.
           *
           * Description of the link.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `undefined`.
           */
          setDescription(
            /**
             * New value for property `description`
             */
            sDescription: string
          ): sap.ui.comp.navpopover.LinkData;
          /**
           * Sets a new value for property {@link #getHref href}.
           *
           * Destination link for a navigation operation in internal format. **Note**: The link will be encoded before
           * it is shown in external format using the `hrefForExternal` method of the CrossApplicationNavigation service.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setHref(
            /**
             * New value for property `href`
             */
            sHref: string
          ): sap.ui.comp.navpopover.LinkData;
          /**
           * @SINCE 1.48.0
           *
           * Sets a new value for property {@link #getIsSuperiorAction isSuperiorAction}.
           *
           * Marker for superior action.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setIsSuperiorAction(
            /**
             * New value for property `isSuperiorAction`
             */
            bIsSuperiorAction: boolean
          ): sap.ui.comp.navpopover.LinkData;
          /**
           * @SINCE 1.44.0
           *
           * Sets a new value for property {@link #getKey key}.
           *
           * Key of link.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `undefined`.
           */
          setKey(
            /**
             * New value for property `key`
             */
            sKey: string
          ): sap.ui.comp.navpopover.LinkData;
          /**
           * @SINCE 1.46.0
           *
           * Sets a new value for property {@link #getPress press}.
           *
           * Callback for `press` event.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setPress(
            /**
             * New value for property `press`
             */
            oPress: object
          ): sap.ui.comp.navpopover.LinkData;
          /**
           * Sets a new value for property {@link #getTarget target}.
           *
           * The standard values for the `target` property are: _self, _top, _blank, _parent, _search. Alternatively,
           * a frame name can be entered. This property is only used if the `href` property is set.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setTarget(
            /**
             * New value for property `target`
             */
            sTarget: string
          ): sap.ui.comp.navpopover.LinkData;
          /**
           * Sets a new value for property {@link #getText text}.
           *
           * Text which can be displayed on the UI
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setText(
            /**
             * New value for property `text`
             */
            sText: string
          ): sap.ui.comp.navpopover.LinkData;
          /**
           * @SINCE 1.44.0
           *
           * Sets a new value for property {@link #getVisible visible}.
           *
           * Describes whether the link should be visible on the screen.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setVisible(
            /**
             * New value for property `visible`
             */
            bVisible: boolean
          ): sap.ui.comp.navpopover.LinkData;
          /**
           * @SINCE 1.58.0
           *
           * Sets a new value for property {@link #getVisibleChangedByUser visibleChangedByUser}.
           *
           * Describes whether the visibility is changed by end user or not.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setVisibleChangedByUser(
            /**
             * New value for property `visibleChangedByUser`
             */
            bVisibleChangedByUser: boolean
          ): sap.ui.comp.navpopover.LinkData;
        }
        /**
         * The NavigationPopover control is used to present information in a specific format. **Note**: This control
         * is used by the {@link sap.ui.comp.navpopover.NavigationPopoverHandler NavigationPopoverHandler} and must
         * not be used manually.
         */
        class NavigationPopover extends sap.m.ResponsivePopover {
          /**
           * Constructor for a new navpopover/NavigationPopover.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: NavigationPopoverOpts
          );

          /**
           * @SINCE 1.28.0
           *
           * Adds some availableAction to the aggregation {@link #getAvailableActions availableActions}.
           */
          addAvailableAction(
            /**
             * The availableAction to add; if empty, nothing is inserted
             */
            oAvailableAction: sap.ui.comp.navpopover.LinkData
          ): sap.ui.comp.navpopover.NavigationPopover;
          /**
           * @SINCE 1.44.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:availableActionsPersonalizationPress availableActionsPersonalizationPress}
           * event of this `sap.ui.comp.navpopover.NavigationPopover`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.navpopover.NavigationPopover` itself.
           *
           * This event is fired when personalization of `availableActions` is chosen.
           */
          attachAvailableActionsPersonalizationPress(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.navpopover.NavigationPopover`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.navpopover.NavigationPopover;
          /**
           * @SINCE 1.28.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:navigate navigate} event of this `sap.ui.comp.navpopover.NavigationPopover`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.navpopover.NavigationPopover` itself.
           *
           * This event is fired when a link is chosen.
           */
          attachNavigate(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.navpopover.NavigationPopover`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.navpopover.NavigationPopover;
          /**
           * @SINCE 1.28.0
           * @deprecated (since 1.40.0) - The event `navigationTargetsObtained` is obsolete as target determination
           * is no longer done by NavigationPopover. Instead the NavigationPopoverHandler is responsible for target
           * determination. The event `navigationTargetsObtained` is fired from NavigationPopoverHandler after navigation
           * targets are determined.
           *
           * Attaches event handler `fnFunction` to the {@link #event:targetsObtained targetsObtained} event of this
           * `sap.ui.comp.navpopover.NavigationPopover`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.navpopover.NavigationPopover` itself.
           *
           * The navigation targets that are shown.
           */
          attachTargetsObtained(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.navpopover.NavigationPopover`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.navpopover.NavigationPopover;
          /**
           * @SINCE 1.28.0
           *
           * Destroys all the availableActions in the aggregation {@link #getAvailableActions availableActions}.
           */
          destroyAvailableActions(): sap.ui.comp.navpopover.NavigationPopover;
          /**
           * @SINCE 1.28.0
           *
           * Destroys the mainNavigation in the aggregation {@link #getMainNavigation mainNavigation}.
           */
          destroyMainNavigation(): sap.ui.comp.navpopover.NavigationPopover;
          /**
           * @SINCE 1.28.0
           * @deprecated (since 1.40.0) - The property `ownNavigation` is obsolete as target determination is no longer
           * done by NavigationPopover. Instead the NavigationPopoverHandler is responsible for target determination.
           *
           * Destroys the ownNavigation in the aggregation {@link #getOwnNavigation ownNavigation}.
           */
          destroyOwnNavigation(): sap.ui.comp.navpopover.NavigationPopover;
          /**
           * @SINCE 1.44.0
           *
           * Detaches event handler `fnFunction` from the {@link #event:availableActionsPersonalizationPress availableActionsPersonalizationPress}
           * event of this `sap.ui.comp.navpopover.NavigationPopover`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachAvailableActionsPersonalizationPress(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.navpopover.NavigationPopover;
          /**
           * @SINCE 1.28.0
           *
           * Detaches event handler `fnFunction` from the {@link #event:navigate navigate} event of this `sap.ui.comp.navpopover.NavigationPopover`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachNavigate(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.navpopover.NavigationPopover;
          /**
           * @SINCE 1.28.0
           * @deprecated (since 1.40.0) - The event `navigationTargetsObtained` is obsolete as target determination
           * is no longer done by NavigationPopover. Instead the NavigationPopoverHandler is responsible for target
           * determination. The event `navigationTargetsObtained` is fired from NavigationPopoverHandler after navigation
           * targets are determined.
           *
           * Detaches event handler `fnFunction` from the {@link #event:targetsObtained targetsObtained} event of
           * this `sap.ui.comp.navpopover.NavigationPopover`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachTargetsObtained(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.navpopover.NavigationPopover;
          /**
           * Creates a new subclass of class sap.ui.comp.navpopover.NavigationPopover with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.m.ResponsivePopover.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * @SINCE 1.44.0
           *
           * Fires event {@link #event:availableActionsPersonalizationPress availableActionsPersonalizationPress}
           * to attached listeners.
           */
          fireAvailableActionsPersonalizationPress(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.ui.comp.navpopover.NavigationPopover;
          /**
           * @SINCE 1.28.0
           *
           * Fires event {@link #event:navigate navigate} to attached listeners.
           */
          fireNavigate(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * The UI text shown in the chosen link
               */
              text?: string;
              /**
               * The navigation target of the chosen link
               */
              href?: string;
            }
          ): sap.ui.comp.navpopover.NavigationPopover;
          /**
           * @SINCE 1.28.0
           * @deprecated (since 1.40.0) - The event `navigationTargetsObtained` is obsolete as target determination
           * is no longer done by NavigationPopover. Instead the NavigationPopoverHandler is responsible for target
           * determination. The event `navigationTargetsObtained` is fired from NavigationPopoverHandler after navigation
           * targets are determined.
           *
           * Fires event {@link #event:targetsObtained targetsObtained} to attached listeners.
           */
          fireTargetsObtained(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.ui.comp.navpopover.NavigationPopover;
          /**
           * @SINCE 1.28.0
           * @deprecated (since 1.40.0) - The property `appStateKey` is obsolete as target determination is no longer
           * done by NavigationPopover. Instead the NavigationPopoverHandler is responsible for target determination.
           *
           * Gets current value of property {@link #getAppStateKey appStateKey}.
           *
           * The application state key passed to retrieve the navigation targets.
           */
          getAppStateKey(): string;
          /**
           * @SINCE 1.28.0
           *
           * Gets content of aggregation {@link #getAvailableActions availableActions}.
           *
           * A list of available actions shown as links.
           */
          getAvailableActions(): sap.ui.comp.navpopover.LinkData[];
          /**
           * @SINCE 1.44.0
           *
           * Gets current value of property {@link #getAvailableActionsPersonalizationText availableActionsPersonalizationText}.
           *
           * Determines the text of personalization link. If this property is set to some string, choosing the personalization
           * link will trigger the `availableActionsPersonalizationPress` event. If this property is not set, the
           * personalization link is not shown.
           *
           * Default value is `undefined`.
           */
          getAvailableActionsPersonalizationText(): string;
          /**
           * ID of the element which is the current target of the association {@link #getComponent component}, or
           * `null`.
           */
          getComponent(): sap.ui.core.ID;
          /**
           * Returns link for direct navigation if the NavigationPopover has only `mainNavigation` or one `availableAction`
           * and no `extraContent`.
           */
          getDirectLink(): sap.m.Link | null;
          /**
           * @SINCE 1.28.0
           *
           * ID of the element which is the current target of the association {@link #getExtraContent extraContent},
           * or `null`.
           */
          getExtraContent(): sap.ui.core.ID;
          /**
           * @SINCE 1.28.0
           *
           * Gets content of aggregation {@link #getMainNavigation mainNavigation}.
           *
           * The main navigation link. If `mainNavigationId` is not set then `text` of `mainNavigation` is displayed.
           * Otherwise the `mainNavigationId` is displayed.
           */
          getMainNavigation(): sap.ui.comp.navpopover.LinkData;
          /**
           * @SINCE 1.28.0
           *
           * Gets current value of property {@link #getMainNavigationId mainNavigationId}.
           *
           * Sets the description of the main navigation link. If `mainNavigation` also contains an href description,
           * then `mainNavigationId` is displayed. If `mainNavigationId` is set to an empty string `''`, neither description
           * nor subtitle are displayed.
           */
          getMainNavigationId(): string;
          /**
           * Returns a metadata object for class sap.ui.comp.navpopover.NavigationPopover.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * @SINCE 1.28.0
           * @deprecated (since 1.40.0) - The property `ownNavigation` is obsolete as target determination is no longer
           * done by NavigationPopover. Instead the NavigationPopoverHandler is responsible for target determination.
           *
           * Gets content of aggregation {@link #getOwnNavigation ownNavigation}.
           *
           * The navigation taking the user back to the source application.
           */
          getOwnNavigation(): sap.ui.comp.navpopover.LinkData;
          /**
           * @SINCE 1.28.0
           * @deprecated (since 1.40.0) - The property `semanticAttributes` is obsolete as target determination is
           * no longer done by NavigationPopover. Instead the NavigationPopoverHandler is responsible for target determination.
           *
           * Gets current value of property {@link #getSemanticAttributes semanticAttributes}.
           *
           * Describes the semantic attributes. The attribute has to be a map.
           */
          getSemanticAttributes(): object;
          /**
           * @SINCE 1.28.0
           * @deprecated (since 1.40.0) - The property `semanticObjectName` is obsolete as target determination is
           * no longer done by NavigationPopover. Instead the NavigationPopoverHandler is responsible for target determination.
           *
           * Gets current value of property {@link #getSemanticObjectName semanticObjectName}.
           *
           * The name of the semantic object.
           */
          getSemanticObjectName(): string;
          /**
           * @SINCE 1.28.0
           *
           * ID of the element which is the current target of the association {@link #getSource source}, or `null`.
           */
          getSource(): sap.ui.core.ID;
          /**
           * @SINCE 1.28.0
           *
           * Checks for the provided `sap.ui.comp.navpopover.LinkData` in the aggregation {@link #getAvailableActions
           * availableActions}. and returns its index if found or -1 otherwise.
           */
          indexOfAvailableAction(
            /**
             * The availableAction whose index is looked for
             */
            oAvailableAction: sap.ui.comp.navpopover.LinkData
          ): number;
          /**
           * @SINCE 1.28.0
           *
           * Inserts a availableAction into the aggregation {@link #getAvailableActions availableActions}.
           */
          insertAvailableAction(
            /**
             * The availableAction to insert; if empty, nothing is inserted
             */
            oAvailableAction: sap.ui.comp.navpopover.LinkData,
            /**
             * The `0`-based index the availableAction should be inserted at; for a negative value of `iIndex`, the
             * availableAction is inserted at position 0; for a value greater than the current size of the aggregation,
             * the availableAction is inserted at the last position
             */
            iIndex: number
          ): sap.ui.comp.navpopover.NavigationPopover;
          /**
           * @SINCE 1.28.0
           *
           * Removes all the controls from the aggregation {@link #getAvailableActions availableActions}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllAvailableActions(): sap.ui.comp.navpopover.LinkData[];
          /**
           * @SINCE 1.28.0
           *
           * Removes a availableAction from the aggregation {@link #getAvailableActions availableActions}.
           */
          removeAvailableAction(
            /**
             * The availableAction to remove or its index or id
             */
            vAvailableAction: number | string | sap.ui.comp.navpopover.LinkData
          ): sap.ui.comp.navpopover.LinkData;
          /**
           * @deprecated (since 1.42.0) - Target determination is no longer done by NavigationPopover. Instead the
           * NavigationPopoverHandler is responsible for target determination.
           *
           * Determines the potential navigation targets for the semantical object and visualize the popover.
           */
          retrieveNavTargets(): void;
          /**
           * @SINCE 1.28.0
           * @deprecated (since 1.40.0) - The property `appStateKey` is obsolete as target determination is no longer
           * done by NavigationPopover. Instead the NavigationPopoverHandler is responsible for target determination.
           *
           * Sets a new value for property {@link #getAppStateKey appStateKey}.
           *
           * The application state key passed to retrieve the navigation targets.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setAppStateKey(
            /**
             * New value for property `appStateKey`
             */
            sAppStateKey: string
          ): sap.ui.comp.navpopover.NavigationPopover;
          /**
           * @SINCE 1.44.0
           *
           * Sets a new value for property {@link #getAvailableActionsPersonalizationText availableActionsPersonalizationText}.
           *
           * Determines the text of personalization link. If this property is set to some string, choosing the personalization
           * link will trigger the `availableActionsPersonalizationPress` event. If this property is not set, the
           * personalization link is not shown.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `undefined`.
           */
          setAvailableActionsPersonalizationText(
            /**
             * New value for property `availableActionsPersonalizationText`
             */
            sAvailableActionsPersonalizationText: string
          ): sap.ui.comp.navpopover.NavigationPopover;
          /**
           * Sets the associated {@link #getComponent component}.
           */
          setComponent(
            /**
             * ID of an element which becomes the new target of this component association; alternatively, an element
             * instance may be given
             */
            oComponent: sap.ui.core.ID | sap.ui.core.Element
          ): sap.ui.comp.navpopover.NavigationPopover;
          /**
           * @SINCE 1.28.0
           *
           * Sets the associated {@link #getExtraContent extraContent}.
           */
          setExtraContent(
            /**
             * ID of an element which becomes the new target of this extraContent association; alternatively, an element
             * instance may be given
             */
            oExtraContent: sap.ui.core.ID | sap.ui.core.Control
          ): sap.ui.comp.navpopover.NavigationPopover;
          /**
           * @SINCE 1.28.0
           *
           * Sets the aggregated {@link #getMainNavigation mainNavigation}.
           */
          setMainNavigation(
            /**
             * The mainNavigation to set
             */
            oMainNavigation: sap.ui.comp.navpopover.LinkData
          ): sap.ui.comp.navpopover.NavigationPopover;
          /**
           * @SINCE 1.28.0
           *
           * Sets a new value for property {@link #getMainNavigationId mainNavigationId}.
           *
           * Sets the description of the main navigation link. If `mainNavigation` also contains an href description,
           * then `mainNavigationId` is displayed. If `mainNavigationId` is set to an empty string `''`, neither description
           * nor subtitle are displayed.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setMainNavigationId(
            /**
             * New value for property `mainNavigationId`
             */
            sMainNavigationId: string
          ): sap.ui.comp.navpopover.NavigationPopover;
          /**
           * @SINCE 1.28.0
           * @deprecated (since 1.40.0) - The property `ownNavigation` is obsolete as target determination is no longer
           * done by NavigationPopover. Instead the NavigationPopoverHandler is responsible for target determination.
           *
           * Sets the aggregated {@link #getOwnNavigation ownNavigation}.
           */
          setOwnNavigation(
            /**
             * The ownNavigation to set
             */
            oOwnNavigation: sap.ui.comp.navpopover.LinkData
          ): sap.ui.comp.navpopover.NavigationPopover;
          /**
           * @SINCE 1.28.0
           * @deprecated (since 1.40.0) - The property `semanticAttributes` is obsolete as target determination is
           * no longer done by NavigationPopover. Instead the NavigationPopoverHandler is responsible for target determination.
           *
           * Sets a new value for property {@link #getSemanticAttributes semanticAttributes}.
           *
           * Describes the semantic attributes. The attribute has to be a map.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setSemanticAttributes(
            /**
             * New value for property `semanticAttributes`
             */
            oSemanticAttributes: object
          ): sap.ui.comp.navpopover.NavigationPopover;
          /**
           * @SINCE 1.28.0
           * @deprecated (since 1.40.0) - The property `semanticObjectName` is obsolete as target determination is
           * no longer done by NavigationPopover. Instead the NavigationPopoverHandler is responsible for target determination.
           *
           * Sets a new value for property {@link #getSemanticObjectName semanticObjectName}.
           *
           * The name of the semantic object.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setSemanticObjectName(
            /**
             * New value for property `semanticObjectName`
             */
            sSemanticObjectName: string
          ): sap.ui.comp.navpopover.NavigationPopover;
          /**
           * @SINCE 1.28.0
           *
           * Sets the associated {@link #getSource source}.
           */
          setSource(
            /**
             * ID of an element which becomes the new target of this source association; alternatively, an element instance
             * may be given
             */
            oSource: sap.ui.core.ID | sap.ui.core.Control
          ): sap.ui.comp.navpopover.NavigationPopover;
          /**
           * Displays the popover. This method should be called, once all navigation targets are adapted by the application.
           */
          show(): void;
          /**
           * @SINCE 1.44.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:availableActionsPersonalizationPress availableActionsPersonalizationPress}
           * event of this `sap.ui.comp.navpopover.NavigationPopover`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.navpopover.NavigationPopover` itself.
           *
           * This event is fired when personalization of `availableActions` is chosen.
           */
          attachAvailableActionsPersonalizationPress(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.navpopover.NavigationPopover`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.navpopover.NavigationPopover;
          /**
           * @SINCE 1.28.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:navigate navigate} event of this `sap.ui.comp.navpopover.NavigationPopover`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.navpopover.NavigationPopover` itself.
           *
           * This event is fired when a link is chosen.
           */
          attachNavigate(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.navpopover.NavigationPopover`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.navpopover.NavigationPopover;
          /**
           * @SINCE 1.28.0
           * @deprecated (since 1.40.0) - The event `navigationTargetsObtained` is obsolete as target determination
           * is no longer done by NavigationPopover. Instead the NavigationPopoverHandler is responsible for target
           * determination. The event `navigationTargetsObtained` is fired from NavigationPopoverHandler after navigation
           * targets are determined.
           *
           * Attaches event handler `fnFunction` to the {@link #event:targetsObtained targetsObtained} event of this
           * `sap.ui.comp.navpopover.NavigationPopover`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.navpopover.NavigationPopover` itself.
           *
           * The navigation targets that are shown.
           */
          attachTargetsObtained(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.navpopover.NavigationPopover`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.navpopover.NavigationPopover;
        }
        /**
         * The NavigationPopoverHandler control determines navigation targets for a semantic object and shows them
         * together with further information in a Popover.
         *  **Note:** Navigation targets are determined using {@link sap.ushell.services.CrossApplicationNavigation
         * CrossApplicationNavigation} of the unified shell service.
         */
        // @ts-ignore - static 'getMetadata' inheritance issue
        class NavigationPopoverHandler extends sap.ui.base.ManagedObject {
          /**
           * Constructor for a new navpopover/NavigationPopoverHandler.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: object
          );

          /**
           * @SINCE 1.36.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:beforePopoverOpens beforePopoverOpens} event
           * of this `sap.ui.comp.navpopover.NavigationPopoverHandler`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.navpopover.NavigationPopoverHandler` itself.
           *
           * Event is fired before the navigation popover opens and before navigation target links are getting retrieved.
           * Event can be used to change the parameters used to retrieve the navigation targets. In case of NavigationPopoverHandler,
           * the `beforePopoverOpens` is fired after the link has been clicked.
           */
          attachBeforePopoverOpens(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.navpopover.NavigationPopoverHandler`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.navpopover.NavigationPopoverHandler;
          /**
           * @SINCE 1.36.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:innerNavigate innerNavigate} event of this `sap.ui.comp.navpopover.NavigationPopoverHandler`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.navpopover.NavigationPopoverHandler` itself.
           *
           * This event is fired after a navigation link on the navigation popover has been clicked. This event is
           * only fired, if the user left-clicks the link. Right-clicking the link and selecting 'Open in New Window'
           * etc. in the context menu does not fire the event.
           */
          attachInnerNavigate(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.navpopover.NavigationPopoverHandler`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.navpopover.NavigationPopoverHandler;
          /**
           * @SINCE 1.36.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:navigationTargetsObtained navigationTargetsObtained}
           * event of this `sap.ui.comp.navpopover.NavigationPopoverHandler`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.navpopover.NavigationPopoverHandler` itself.
           *
           * After the navigation targets are retrieved, `navigationTargetsObtained` is fired and provides the possibility
           * to change the targets.
           */
          attachNavigationTargetsObtained(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.navpopover.NavigationPopoverHandler`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.navpopover.NavigationPopoverHandler;
          /**
           * @SINCE 1.36.0
           *
           * Detaches event handler `fnFunction` from the {@link #event:beforePopoverOpens beforePopoverOpens} event
           * of this `sap.ui.comp.navpopover.NavigationPopoverHandler`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachBeforePopoverOpens(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.navpopover.NavigationPopoverHandler;
          /**
           * @SINCE 1.36.0
           *
           * Detaches event handler `fnFunction` from the {@link #event:innerNavigate innerNavigate} event of this
           * `sap.ui.comp.navpopover.NavigationPopoverHandler`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachInnerNavigate(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.navpopover.NavigationPopoverHandler;
          /**
           * @SINCE 1.36.0
           *
           * Detaches event handler `fnFunction` from the {@link #event:navigationTargetsObtained navigationTargetsObtained}
           * event of this `sap.ui.comp.navpopover.NavigationPopoverHandler`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachNavigationTargetsObtained(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.navpopover.NavigationPopoverHandler;
          /**
           * Creates a new subclass of class sap.ui.comp.navpopover.NavigationPopoverHandler with name `sClassName`
           * and enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * @SINCE 1.36.0
           *
           * Fires event {@link #event:beforePopoverOpens beforePopoverOpens} to attached listeners.
           */
          fireBeforePopoverOpens(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * The semantic object for which the navigation targets will be retrieved.
               */
              semanticObject?: string;
              /**
               * Map containing the semantic attributes calculated from the binding that will be used to retrieve the
               * navigation targets.
               */
              semanticAttributes?: object;
              /**
               * A map of semantic objects for which the navigation targets will be retrieved and it's semantic attributes
               * calculated from the binding context. The semantic attributes will be used as parameters in order to retrieve
               * the navigation targets.
               */
              semanticAttributesOfSemanticObjects?: object;
              /**
               * This callback function enables you to define a changed semantic attributes map. Signatures: `setSemanticAttributes(oSemanticAttributesMap)`
               * Parameter:
               * 	 - {object} oSemanticAttributesMap New map containing the semantic attributes
               * 	 - {string} sSemanticObject Semantic Object for which the oSemanticAttributesMap belongs
               */
              setSemanticAttributes?: Function;
              /**
               * This callback function sets an application state key that is used over the cross-application navigation.
               * Signatures: `setAppStateKey(sAppStateKey)` Parameter:
               * 	 - {string} sAppStateKey
               */
              setAppStateKey?: Function;
              /**
               * The ID of the NavigationPopoverHandler.
               */
              originalId?: string;
              /**
               * This callback function triggers the retrieval of navigation targets and leads to the opening of the navigation
               * popover. Signatures: `open()` If the `beforePopoverOpens` has been registered, the `open` function has
               * to be called manually in order to open the navigation popover.
               */
              open?: Function;
            }
          ): sap.ui.comp.navpopover.NavigationPopoverHandler;
          /**
           * @SINCE 1.36.0
           *
           * Fires event {@link #event:innerNavigate innerNavigate} to attached listeners.
           */
          fireInnerNavigate(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * The UI text shown in the clicked link.
               */
              text?: string;
              /**
               * The navigation target of the clicked link.
               */
              href?: string;
              /**
               * The semantic object used to retrieve this target.
               */
              semanticObject?: string;
              /**
               * Map containing the semantic attributes used to retrieve this target.
               */
              semanticAttributes?: object;
              /**
               * The ID of the NavigationPopoverHandler.
               */
              originalId?: string;
            }
          ): sap.ui.comp.navpopover.NavigationPopoverHandler;
          /**
           * @SINCE 1.36.0
           *
           * Fires event {@link #event:navigationTargetsObtained navigationTargetsObtained} to attached listeners.
           */
          fireNavigationTargetsObtained(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * The main navigation object.
               */
              mainNavigation?: sap.ui.comp.navpopover.LinkData;
              /**
               * Array of available navigation target objects.
               */
              actions?: sap.ui.comp.navpopover.LinkData[];
              /**
               * The navigation object for the own application. This navigation option is by default not visible on the
               * popover.
               */
              ownNavigation?: sap.ui.comp.navpopover.LinkData;
              /**
               * Array containing contact data.
               */
              popoverForms?: sap.ui.layout.form.SimpleForm[];
              /**
               * The semantic object for which the navigation targets have been retrieved.
               */
              semanticObject?: string;
              /**
               * Map containing the semantic attributes.
               */
              semanticAttributes?: object;
              /**
               * The ID of the NavigationPopoverHandler.
               */
              originalId?: string;
              /**
               * This callback function shows the actual navigation popover. If the `navigationTargetsObtained` has been
               * registered, the `show` function has to be called manually in order to open the navigation popover. Signatures:
               * `show()`
               * 	 - `show(oMainNavigation, aAvailableActions, oAdditionalContent)` Parameters:
               * 	{sap.ui.comp.navpopover.LinkData | null | undefined} oMainNavigation The main navigation object. With
               * `null` the main navigation object will be removed. With `undefined` the old object will remain.
               * 	 - {sap.ui.comp.navpopover.LinkData[] | [] | undefined} aAvailableActions Array containing the cross
               * 			application navigation links. With empty array all available links will be removed. With `undefined`
               * 			the old links will remain.
               * 	 - {sap.ui.core.Control | null | undefined} oAdditionalContent Control that will be displayed in extra
               * 			content section on the popover. With `null` the main extra content object will be removed. With `undefined`
               * 			the old object still remains.
               * 	 - `show(sMainNavigationId, oMainNavigation, aAvailableActions, oAdditionalContent)` Parameters:
               * 	{string | undefined} sMainNavigationId The visible description for the main navigation link. With `''`,
               * both the description and subtitle will be removed. With `undefined`, the description is calculated using
               * the binding context of a given source object (for example `SmartLink` control).
               * 	 - {sap.ui.comp.navpopover.LinkData | null | undefined} oMainNavigation The main navigation object.
               * 			With `null` the main navigation object will be removed. With `undefined` the old object will remain.
               *
               * 	 - {sap.ui.comp.navpopover.LinkData[] | [] | undefined} aAvailableActions Array containing the cross
               * 			application navigation links. With empty array all available links will be removed. With `undefined`
               * 			the old links will remain.
               * 	 - {sap.ui.core.Control | null | undefined} oAdditionalContent Control that will be displayed in extra
               * 			content section on the popover. With `null` the main extra content object will be removed. With `undefined`
               * 			the old object still remains.
               */
              show?: Function;
            }
          ): sap.ui.comp.navpopover.NavigationPopoverHandler;
          /**
           * @SINCE 1.42.0
           *
           * Gets current value of property {@link #getAdditionalSemanticObjects additionalSemanticObjects}.
           *
           * Names of additional semantic objects which are used to determine target navigations.
           *
           * Default value is `[]`.
           */
          getAdditionalSemanticObjects(): string[];
          /**
           * @SINCE 1.40.0
           *
           * Gets current value of property {@link #getContactAnnotationPath contactAnnotationPath}.
           *
           * Navigation property that points from the current to the related entity type where the com.sap.vocabularies.Communication.v1.Contact
           * annotation is defined, for example, `'to_Supplier'`. An empty string means that the related entity type
           * is the current one.
           *
           * Default value is `undefined`.
           */
          getContactAnnotationPath(): string;
          /**
           * @SINCE 1.36.0
           *
           * ID of the element which is the current target of the association {@link #getControl control}, or `null`.
           */
          getControl(): sap.ui.core.ID;
          /**
           * @SINCE 1.44.0
           *
           * Gets current value of property {@link #getEnableAvailableActionsPersonalization enableAvailableActionsPersonalization}.
           *
           * Determines whether the personalization link is shown inside the NavigationPopover control.
           *
           * Default value is `true`.
           */
          getEnableAvailableActionsPersonalization(): boolean;
          /**
           * @SINCE 1.36.0
           *
           * Gets current value of property {@link #getFieldName fieldName}.
           *
           * The metadata field name for this NavigationPopoverHandler control.
           */
          getFieldName(): string;
          /**
           * @SINCE 1.36.0
           *
           * Gets current value of property {@link #getMapFieldToSemanticObject mapFieldToSemanticObject}.
           *
           * If set to `false`, the NavigationPopoverHandler control will not replace its field name with the according
           * `semanticObject` property during the calculation of the semantic attributes. This enables the usage of
           * several NavigationPopoverHandler on the same semantic object. *
           *
           * Default value is `true`.
           */
          getMapFieldToSemanticObject(): boolean;
          /**
           * Returns a metadata object for class sap.ui.comp.navpopover.NavigationPopoverHandler.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * @SINCE 1.36.0
           *
           * Gets current value of property {@link #getSemanticObject semanticObject}.
           *
           * Name of semantic object which is used to determine target navigations.
           */
          getSemanticObject(): string;
          /**
           * @SINCE 1.36.0
           *
           * Gets current value of property {@link #getSemanticObjectController semanticObjectController}.
           *
           * The semantic object controller controls events for several NavigationPopoverHandler controls. If the
           * controller is not set manually, it tries to find a SemanticObjectController in its parent hierarchy.
           */
          getSemanticObjectController(): any;
          /**
           * @SINCE 1.36.0
           * @deprecated (since 1.40.0) - Title section with `semanticObjectLabel` has been removed due to new UI
           * design
           *
           * Gets current value of property {@link #getSemanticObjectLabel semanticObjectLabel}.
           *
           * Shown title of semantic object.
           */
          getSemanticObjectLabel(): string;
          /**
           * Gets the current value assigned to the field with the NavigationPopoverHandler's semantic object name.
           */
          getSemanticObjectValue(): object;
          /**
           * Opens the `sap.m.Popover` with navigation targets in an asynchronous manner.
           */
          openPopover(
            /**
             * Optional DOM reference to which the popover is attached. By default the `control` association is used
             * as DOM reference.
             */
            oDomRef: object
          ): any;
          /**
           * @SINCE 1.42.0
           *
           * Sets a new value for property {@link #getAdditionalSemanticObjects additionalSemanticObjects}.
           *
           * Names of additional semantic objects which are used to determine target navigations.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `[]`.
           */
          setAdditionalSemanticObjects(
            /**
             * New value for property `additionalSemanticObjects`
             */
            sAdditionalSemanticObjects: string[]
          ): sap.ui.comp.navpopover.NavigationPopoverHandler;
          /**
           * @SINCE 1.40.0
           *
           * Sets a new value for property {@link #getContactAnnotationPath contactAnnotationPath}.
           *
           * Navigation property that points from the current to the related entity type where the com.sap.vocabularies.Communication.v1.Contact
           * annotation is defined, for example, `'to_Supplier'`. An empty string means that the related entity type
           * is the current one.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `undefined`.
           */
          setContactAnnotationPath(
            /**
             * New value for property `contactAnnotationPath`
             */
            sContactAnnotationPath: string
          ): sap.ui.comp.navpopover.NavigationPopoverHandler;
          /**
           * @SINCE 1.36.0
           *
           * Sets the associated {@link #getControl control}.
           */
          setControl(
            /**
             * ID of an element which becomes the new target of this control association; alternatively, an element
             * instance may be given
             */
            oControl: sap.ui.core.ID | sap.ui.core.Control
          ): sap.ui.comp.navpopover.NavigationPopoverHandler;
          /**
           * @SINCE 1.44.0
           *
           * Sets a new value for property {@link #getEnableAvailableActionsPersonalization enableAvailableActionsPersonalization}.
           *
           * Determines whether the personalization link is shown inside the NavigationPopover control.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setEnableAvailableActionsPersonalization(
            /**
             * New value for property `enableAvailableActionsPersonalization`
             */
            bEnableAvailableActionsPersonalization: boolean
          ): sap.ui.comp.navpopover.NavigationPopoverHandler;
          /**
           * @SINCE 1.36.0
           *
           * Sets a new value for property {@link #getFieldName fieldName}.
           *
           * The metadata field name for this NavigationPopoverHandler control.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setFieldName(
            /**
             * New value for property `fieldName`
             */
            sFieldName: string
          ): sap.ui.comp.navpopover.NavigationPopoverHandler;
          /**
           * @SINCE 1.36.0
           *
           * Sets a new value for property {@link #getMapFieldToSemanticObject mapFieldToSemanticObject}.
           *
           * If set to `false`, the NavigationPopoverHandler control will not replace its field name with the according
           * `semanticObject` property during the calculation of the semantic attributes. This enables the usage of
           * several NavigationPopoverHandler on the same semantic object. *
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setMapFieldToSemanticObject(
            /**
             * New value for property `mapFieldToSemanticObject`
             */
            bMapFieldToSemanticObject: boolean
          ): sap.ui.comp.navpopover.NavigationPopoverHandler;
          /**
           * @SINCE 1.36.0
           *
           * Sets a new value for property {@link #getSemanticObject semanticObject}.
           *
           * Name of semantic object which is used to determine target navigations.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setSemanticObject(
            /**
             * New value for property `semanticObject`
             */
            sSemanticObject: string
          ): sap.ui.comp.navpopover.NavigationPopoverHandler;
          /**
           * @SINCE 1.36.0
           *
           * Sets a new value for property {@link #getSemanticObjectController semanticObjectController}.
           *
           * The semantic object controller controls events for several NavigationPopoverHandler controls. If the
           * controller is not set manually, it tries to find a SemanticObjectController in its parent hierarchy.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setSemanticObjectController(
            /**
             * New value for property `semanticObjectController`
             */
            oSemanticObjectController: any
          ): sap.ui.comp.navpopover.NavigationPopoverHandler;
          /**
           * @SINCE 1.36.0
           * @deprecated (since 1.40.0) - Title section with `semanticObjectLabel` has been removed due to new UI
           * design
           *
           * Sets a new value for property {@link #getSemanticObjectLabel semanticObjectLabel}.
           *
           * Shown title of semantic object.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setSemanticObjectLabel(
            /**
             * New value for property `semanticObjectLabel`
             */
            sSemanticObjectLabel: string
          ): sap.ui.comp.navpopover.NavigationPopoverHandler;
          /**
           * @SINCE 1.36.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:beforePopoverOpens beforePopoverOpens} event
           * of this `sap.ui.comp.navpopover.NavigationPopoverHandler`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.navpopover.NavigationPopoverHandler` itself.
           *
           * Event is fired before the navigation popover opens and before navigation target links are getting retrieved.
           * Event can be used to change the parameters used to retrieve the navigation targets. In case of NavigationPopoverHandler,
           * the `beforePopoverOpens` is fired after the link has been clicked.
           */
          attachBeforePopoverOpens(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.navpopover.NavigationPopoverHandler`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.navpopover.NavigationPopoverHandler;
          /**
           * @SINCE 1.36.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:innerNavigate innerNavigate} event of this `sap.ui.comp.navpopover.NavigationPopoverHandler`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.navpopover.NavigationPopoverHandler` itself.
           *
           * This event is fired after a navigation link on the navigation popover has been clicked. This event is
           * only fired, if the user left-clicks the link. Right-clicking the link and selecting 'Open in New Window'
           * etc. in the context menu does not fire the event.
           */
          attachInnerNavigate(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.navpopover.NavigationPopoverHandler`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.navpopover.NavigationPopoverHandler;
          /**
           * @SINCE 1.36.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:navigationTargetsObtained navigationTargetsObtained}
           * event of this `sap.ui.comp.navpopover.NavigationPopoverHandler`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.navpopover.NavigationPopoverHandler` itself.
           *
           * After the navigation targets are retrieved, `navigationTargetsObtained` is fired and provides the possibility
           * to change the targets.
           */
          attachNavigationTargetsObtained(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.navpopover.NavigationPopoverHandler`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.navpopover.NavigationPopoverHandler;
        }
        /**
         * The `SemanticObjectController` control operates as a single entry point for `SmartLink` controls created
         * automatically by {@link sap.ui.comp.smarttable.SmartTable SmartTable} control, {@link sap.ui.comp.smartchart.SmartChart
         * SmartChart} control, {@link sap.ui.comp.smartform.SmartForm SmartForm} control and {@link sap.ui.comp.smartfield.SmartField
         * SmartField} control based on OData metadata. Additionally, all events provided by the `SmartLink` control
         * are registered by the SemanticObjectController and can be consumed there in a single place. As usual,
         * the SemanticObjectController can be defined within the XML view as well as in the code.
         */
        class SemanticObjectController extends sap.ui.core.Element {
          /**
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sID?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: SemanticObjectControllerOpts
          );

          /**
           * @SINCE 1.28.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:beforePopoverOpens beforePopoverOpens} event
           * of this `sap.ui.comp.navpopover.SemanticObjectController`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.navpopover.SemanticObjectController` itself.
           *
           * Event is fired before the navigation popover opens and before navigation target links are retrieved.
           * Event can be used to change the parameters used to retrieve the navigation targets. In case of SmartLink,
           * `beforePopoverOpens` is fired after the link has been clicked.
           */
          attachBeforePopoverOpens(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.navpopover.SemanticObjectController`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.navpopover.SemanticObjectController;
          /**
           * @SINCE 1.28.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:navigate navigate} event of this `sap.ui.comp.navpopover.SemanticObjectController`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.navpopover.SemanticObjectController` itself.
           *
           * This event is fired after a navigation link on the navigation popover has been clicked. This event is
           * only fired, if the user left-clicks the link. Right-clicking the link and selecting 'Open in New Window'
           * etc. in the context menu does not fire the event.
           */
          attachNavigate(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.navpopover.SemanticObjectController`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.navpopover.SemanticObjectController;
          /**
           * @SINCE 1.28.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:navigationTargetsObtained navigationTargetsObtained}
           * event of this `sap.ui.comp.navpopover.SemanticObjectController`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.navpopover.SemanticObjectController` itself.
           *
           * After the navigation targets have been retrieved, `navigationTargetsObtained` is fired and makes it possible
           * you to change the targets.
           */
          attachNavigationTargetsObtained(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.navpopover.SemanticObjectController`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.navpopover.SemanticObjectController;
          /**
           * @SINCE 1.28.0
           * @deprecated (since 1.42.0) - The event `prefetchDone` is obsolete because it depends on the property
           * `prefetchNavigationTargets` which has been deprecated.
           *
           * Attaches event handler `fnFunction` to the {@link #event:prefetchDone prefetchDone} event of this `sap.ui.comp.navpopover.SemanticObjectController`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.navpopover.SemanticObjectController` itself.
           *
           * If the property `prefetchNavigationTargets` is set to `true`, event `prefetchDone` is fired after all
           * navigation targets have been retrieved.
           */
          attachPrefetchDone(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.navpopover.SemanticObjectController`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.navpopover.SemanticObjectController;
          /**
           * @SINCE 1.28.0
           *
           * Detaches event handler `fnFunction` from the {@link #event:beforePopoverOpens beforePopoverOpens} event
           * of this `sap.ui.comp.navpopover.SemanticObjectController`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachBeforePopoverOpens(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.navpopover.SemanticObjectController;
          /**
           * @SINCE 1.28.0
           *
           * Detaches event handler `fnFunction` from the {@link #event:navigate navigate} event of this `sap.ui.comp.navpopover.SemanticObjectController`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachNavigate(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.navpopover.SemanticObjectController;
          /**
           * @SINCE 1.28.0
           *
           * Detaches event handler `fnFunction` from the {@link #event:navigationTargetsObtained navigationTargetsObtained}
           * event of this `sap.ui.comp.navpopover.SemanticObjectController`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachNavigationTargetsObtained(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.navpopover.SemanticObjectController;
          /**
           * @SINCE 1.28.0
           * @deprecated (since 1.42.0) - The event `prefetchDone` is obsolete because it depends on the property
           * `prefetchNavigationTargets` which has been deprecated.
           *
           * Detaches event handler `fnFunction` from the {@link #event:prefetchDone prefetchDone} event of this `sap.ui.comp.navpopover.SemanticObjectController`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachPrefetchDone(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.navpopover.SemanticObjectController;
          /**
           * Creates a new subclass of class sap.ui.comp.navpopover.SemanticObjectController with name `sClassName`
           * and enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * @SINCE 1.28.0
           *
           * Fires event {@link #event:beforePopoverOpens beforePopoverOpens} to attached listeners.
           */
          fireBeforePopoverOpens(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * The semantic object for which the navigation targets will be retrieved.
               */
              semanticObject?: string;
              /**
               * Map containing the semantic attributes calculated from the binding that will be used to retrieve the
               * navigation targets.
               */
              semanticAttributes?: object;
              /**
               * A map of semantic objects for which the navigation targets will be retrieved and it's semantic attributes
               * calculated from the binding context. The semantic attributes will be used as parameters in order to retrieve
               * the navigation targets.
               */
              semanticAttributesOfSemanticObjects?: object;
              /**
               * This callback function enables you to define a changed semantic attributes map. Signatures: `setSemanticAttributes(oSemanticAttributesMap)`
               * Parameter:
               * 	 - {object} oSemanticAttributesMap New map containing the semantic attributes
               * 	 - {string} sSemanticObject Semantic Object for which the oSemanticAttributesMap belongs
               */
              setSemanticAttributes?: Function;
              /**
               * This callback function sets an application state key that is used over the cross-application navigation.
               * Signatures: `setAppStateKey(sAppStateKey)` Parameter:
               * 	 - {string} sAppStateKey
               */
              setAppStateKey?: Function;
              /**
               * The ID of the control that fires this event. If `beforePopoverOpens` is registered on the SmartLink,
               * `originalId` is the same as the event's source ID which is also the SmartLink's ID. If the `beforePopoverOpens`
               * is registered on the SemanticObjectController, `originalId` helps to identify the original SmartLink
               * control which triggered the event.
               */
              originalId?: string;
              /**
               * This callback function triggers the retrieval of navigation targets and leads to the opening of the navigation
               * popover. Signatures: `open()` If `beforePopoverOpens` has been registered, `open` function has to be
               * called manually in order to open the navigation popover.
               */
              open?: Function;
            }
          ): sap.ui.comp.navpopover.SemanticObjectController;
          /**
           * @SINCE 1.28.0
           *
           * Fires event {@link #event:navigate navigate} to attached listeners.
           */
          fireNavigate(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * The UI text shown in the clicked link.
               */
              text?: string;
              /**
               * The navigation target of the clicked link.
               */
              href?: string;
              /**
               * The semantic object used to retrieve this target.
               */
              semanticObject?: string;
              /**
               * Map containing the semantic attributes used to retrieve this target.
               */
              semanticAttributes?: object;
              /**
               * The ID of the control that fires this event. If `navigate` is registered on the SmartLink, `originalId`
               * is the same as the event's source ID which is the SmartLink's ID. If `navigate` is registered on the
               * SemanticObjectController, `originalId` helps to identify the original SmartLink control which triggered
               * the event.
               */
              originalId?: string;
            }
          ): sap.ui.comp.navpopover.SemanticObjectController;
          /**
           * @SINCE 1.28.0
           *
           * Fires event {@link #event:navigationTargetsObtained navigationTargetsObtained} to attached listeners.
           */
          fireNavigationTargetsObtained(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * The main navigation object.
               */
              mainNavigation?: sap.ui.comp.navpopover.LinkData;
              /**
               * Array of available navigation target objects.
               */
              actions?: sap.ui.comp.navpopover.LinkData[];
              /**
               * The navigation object for the own application. This navigation option is by default not visible on the
               * popover.
               */
              ownNavigation?: sap.ui.comp.navpopover.LinkData;
              /**
               * Array containing contact data.
               */
              popoverForms?: sap.ui.layout.form.SimpleForm[];
              /**
               * The semantic object for which the navigation targets have been retrieved.
               */
              semanticObject?: string;
              /**
               * Map containing the semantic attributes.
               */
              semanticAttributes?: object;
              /**
               * The ID of the control that fires this event. If `navigationTargetsObtained` is registered on the SmartLink,
               * `originalId` is the same as the event's source ID which is also the SmartLink's ID. If `navigationTargetsObtained`
               * is registered on the SemanticObjectController, `originalId` helps to identify the original SmartLink
               * control which triggered the event.
               */
              originalId?: string;
              /**
               * This callback function shows the actual navigation popover. If the `navigationTargetsObtained` has been
               * registered, the `show` function has to be called manually in order to open the navigation popover. Signatures:
               * `show()`
               * 	 - `show(oMainNavigation, aAvailableActions, oAdditionalContent)` Parameters:
               * 	{sap.ui.comp.navpopover.LinkData | null | undefined} oMainNavigation The main navigation object. With
               * `null` the main navigation object will be removed. With `undefined` the old object will remain.
               * 	 - {sap.ui.comp.navpopover.LinkData[] | [] | undefined} aAvailableActions Array containing the cross-application
               * 			navigation links. With empty array all available links will be removed. With `undefined` the old links
               * 			will remain.
               * 	 - {sap.ui.core.Control | null | undefined} oAdditionalContent Control that will be displayed in extra
               * 			content section on the popover. With `null` the main extra content object will be removed. With `undefined`
               * 			the old object still remains.
               * 	 - `show(sMainNavigationId, oMainNavigation, aAvailableActions, oAdditionalContent)` Parameters:
               * 	{string | undefined} sMainNavigationId The visible description for the main navigation link. With `''`,
               * both the description and subtitle will be removed. With `undefined`, the description is calculated using
               * the binding context of a given source object (for example `SmartLink` control).
               * 	 - {sap.ui.comp.navpopover.LinkData | null | undefined} oMainNavigation The main navigation object.
               * 			With `null` the main navigation object will be removed. With `undefined` the old object will remain.
               *
               * 	 - {sap.ui.comp.navpopover.LinkData[] | [] | undefined} aAvailableActions Array containing the cross-application
               * 			navigation links. With empty array all available links will be removed. With `undefined` the old links
               * 			will remain.
               * 	 - {sap.ui.core.Control | null | undefined} oAdditionalContent Control that will be displayed in extra
               * 			content section on the popover. With `null` the main extra content object will be removed. With `undefined`
               * 			the old object still remains.
               */
              show?: Function;
            }
          ): sap.ui.comp.navpopover.SemanticObjectController;
          /**
           * @SINCE 1.28.0
           * @deprecated (since 1.42.0) - The event `prefetchDone` is obsolete because it depends on the property
           * `prefetchNavigationTargets` which has been deprecated.
           *
           * Fires event {@link #event:prefetchDone prefetchDone} to attached listeners.
           */
          firePrefetchDone(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * A map containing all semantic objects as keys for which at least one navigation target has been found.
               * The value for each semantic object key is an array containing the available actions found for this semantic
               * object.
               */
              semanticObjects?: object;
            }
          ): sap.ui.comp.navpopover.SemanticObjectController;
          /**
           * @SINCE 1.40.0
           *
           * Gets current value of property {@link #getContactAnnotationPaths contactAnnotationPaths}.
           *
           * Navigation property that points from the current to the related entity type where the `com.sap.vocabularies.Communication.v1.Contact`
           * annotation is defined, for example, ` '\{"Supplier":"to_Supplier", "CompanyName":"to_Company"\}' `. An
           * empty string means that the related entity type is the current one.
           */
          getContactAnnotationPaths(): object;
          /**
           * @SINCE 1.44.0
           *
           * Gets current value of property {@link #getEnableAvailableActionsPersonalization enableAvailableActionsPersonalization}.
           *
           * Determines whether the personalization link is shown inside the NavigationPopover control. For example,
           * ` '\{"Supplier":false, "CompanyName":true\}' `.
           */
          getEnableAvailableActionsPersonalization(): object;
          /**
           * @SINCE 1.28.0
           *
           * Gets current value of property {@link #getEntitySet entitySet}.
           *
           * The name of the entity set used. If `entitySet` has not been defined, the SemanticObjectController tries
           * to retrieve the name from its parents. **Note:** This is not a dynamic UI5 property.
           */
          getEntitySet(): string;
          /**
           * @SINCE 1.28.0
           *
           * Gets current value of property {@link #getFieldSemanticObjectMap fieldSemanticObjectMap}.
           *
           * Maps the fields to the related semantic objects. When accessing this property for the first time, the
           * mapping will be calculated from the metadata within the provided model.
           */
          getFieldSemanticObjectMap(): object;
          /**
           * @SINCE 1.58.0
           *
           * Gets current value of property {@link #getForceLinkRendering forceLinkRendering}.
           *
           * Object containing fields for which the corresponding `SmartLink` control is rendered as a link even if
           * `contactAnnotationPaths` is not set and navigation targets do not exist. Setting this property to `true`
           * allows the application, for example, to modify the `SmartLink` control in the event handler, after the
           * user has clicked on a link and the registered event handler has been called.\n
           *
           * **Note:** The `ignoredFields` property and the `ignoreLinkRendering` property of the `SmartLink` control
           * take precedence over `forceLinkRendering`.\n
           *
           * Example of usage: ` '\{"Supplier":"true", "CompanyName":"true"\}' `
           */
          getForceLinkRendering(): object;
          /**
           * @SINCE 1.28.0
           *
           * Gets current value of property {@link #getIgnoredFields ignoredFields}.
           *
           * Comma-separated list of fields that must not be displayed as links.
           */
          getIgnoredFields(): string;
          /**
           * @SINCE 1.48.0
           *
           * Gets current value of property {@link #getMapFieldToSemanticObject mapFieldToSemanticObject}.
           *
           * If set to `false`, the SmartLink control will not replace its field name with the according `semanticObject`
           * property during the calculation of the semantic attributes.
           */
          getMapFieldToSemanticObject(): boolean;
          /**
           * Returns a metadata object for class sap.ui.comp.navpopover.SemanticObjectController.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * @SINCE 1.28.0
           * @deprecated (since 1.42.0) - The property `prefetchNavigationTargets` is obsolete as navigation targets
           * are determined automatically. The SmartLink controls are re-rendered as soon as the asynchronous determination
           * of navigation targets has been completed.
           *
           * Gets current value of property {@link #getPrefetchNavigationTargets prefetchNavigationTargets}.
           *
           * If set to `true`, the SemanticObjectController will retrieve all navigation targets once and will disable
           * links for which no targets were found. Setting this value to `true` will trigger an additional roundtrip.
           *
           * Default value is `false`.
           */
          getPrefetchNavigationTargets(): boolean;
          /**
           * @deprecated (since 1.42.0) - The method `hasSemanticObjectLinks` is obsolete because it depends on the
           * property `prefetchNavigationTargets` which has been deprecated.
           *
           * Checks if the given semantic object name has a navigation link. **Note**: this method returns a valid
           * value only after the event `prefetchDone` has been raised. The event `prefetchDone` is raised if the
           * property `prefetchNavigationTargets` is set to `true`.
           */
          hasSemanticObjectLinks(
            /**
             * Name of semantic object
             */
            sSemanticObject: string
          ): boolean;
          /**
           * Returns whether the given control has been registered by the SemanticObjectController.
           */
          isControlRegistered(
            /**
             * Control registered by `SemanticObjectController`
             */
            oControl:
              | sap.ui.comp.navpopover.SmartLink
              | sap.ui.comp.navpopover.NavigationPopoverHandler
          ): boolean;
          /**
           * Adds the given control to the SemanticObjectController and registers all relevant events.
           */
          registerControl(
            /**
             * Control to be registered by `SemanticObjectController`
             */
            oControl:
              | sap.ui.comp.navpopover.SmartLink
              | sap.ui.comp.navpopover.NavigationPopoverHandler
          ): void;
          /**
           * @SINCE 1.40.0
           *
           * Sets a new value for property {@link #getContactAnnotationPaths contactAnnotationPaths}.
           *
           * Navigation property that points from the current to the related entity type where the `com.sap.vocabularies.Communication.v1.Contact`
           * annotation is defined, for example, ` '\{"Supplier":"to_Supplier", "CompanyName":"to_Company"\}' `. An
           * empty string means that the related entity type is the current one.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setContactAnnotationPaths(
            /**
             * New value for property `contactAnnotationPaths`
             */
            oContactAnnotationPaths: object
          ): sap.ui.comp.navpopover.SemanticObjectController;
          /**
           * @SINCE 1.44.0
           *
           * Sets a new value for property {@link #getEnableAvailableActionsPersonalization enableAvailableActionsPersonalization}.
           *
           * Determines whether the personalization link is shown inside the NavigationPopover control. For example,
           * ` '\{"Supplier":false, "CompanyName":true\}' `.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setEnableAvailableActionsPersonalization(
            /**
             * New value for property `enableAvailableActionsPersonalization`
             */
            oEnableAvailableActionsPersonalization: object
          ): sap.ui.comp.navpopover.SemanticObjectController;
          /**
           * @SINCE 1.28.0
           *
           * Sets a new value for property {@link #getEntitySet entitySet}.
           *
           * The name of the entity set used. If `entitySet` has not been defined, the SemanticObjectController tries
           * to retrieve the name from its parents. **Note:** This is not a dynamic UI5 property.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setEntitySet(
            /**
             * New value for property `entitySet`
             */
            sEntitySet: string
          ): sap.ui.comp.navpopover.SemanticObjectController;
          /**
           * @SINCE 1.28.0
           *
           * Sets a new value for property {@link #getFieldSemanticObjectMap fieldSemanticObjectMap}.
           *
           * Maps the fields to the related semantic objects. When accessing this property for the first time, the
           * mapping will be calculated from the metadata within the provided model.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setFieldSemanticObjectMap(
            /**
             * New value for property `fieldSemanticObjectMap`
             */
            oFieldSemanticObjectMap: object
          ): sap.ui.comp.navpopover.SemanticObjectController;
          /**
           * @SINCE 1.58.0
           *
           * Sets a new value for property {@link #getForceLinkRendering forceLinkRendering}.
           *
           * Object containing fields for which the corresponding `SmartLink` control is rendered as a link even if
           * `contactAnnotationPaths` is not set and navigation targets do not exist. Setting this property to `true`
           * allows the application, for example, to modify the `SmartLink` control in the event handler, after the
           * user has clicked on a link and the registered event handler has been called.\n
           *
           * **Note:** The `ignoredFields` property and the `ignoreLinkRendering` property of the `SmartLink` control
           * take precedence over `forceLinkRendering`.\n
           *
           * Example of usage: ` '\{"Supplier":"true", "CompanyName":"true"\}' `
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setForceLinkRendering(
            /**
             * New value for property `forceLinkRendering`
             */
            oForceLinkRendering: object
          ): sap.ui.comp.navpopover.SemanticObjectController;
          /**
           * @SINCE 1.28.0
           *
           * Sets a new value for property {@link #getIgnoredFields ignoredFields}.
           *
           * Comma-separated list of fields that must not be displayed as links.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setIgnoredFields(
            /**
             * New value for property `ignoredFields`
             */
            sIgnoredFields: string
          ): sap.ui.comp.navpopover.SemanticObjectController;
          /**
           * @deprecated (since 1.42.0) - The method `setIgnoredState` is obsolete as SmartLink is processing the
           * internal state on its own.
           *
           * Checks if the given SmartLink has to be enabled or disabled and sets the state.
           */
          setIgnoredState(
            /**
             * the SmartLink which should be enabled or disabled.
             */
            oSmartLink: sap.ui.comp.navpopover.SmartLink
          ): void;
          /**
           * @SINCE 1.48.0
           *
           * Sets a new value for property {@link #getMapFieldToSemanticObject mapFieldToSemanticObject}.
           *
           * If set to `false`, the SmartLink control will not replace its field name with the according `semanticObject`
           * property during the calculation of the semantic attributes.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setMapFieldToSemanticObject(
            /**
             * New value for property `mapFieldToSemanticObject`
             */
            bMapFieldToSemanticObject: boolean
          ): sap.ui.comp.navpopover.SemanticObjectController;
          /**
           * @SINCE 1.28.0
           * @deprecated (since 1.42.0) - The property `prefetchNavigationTargets` is obsolete as navigation targets
           * are determined automatically. The SmartLink controls are re-rendered as soon as the asynchronous determination
           * of navigation targets has been completed.
           *
           * Sets a new value for property {@link #getPrefetchNavigationTargets prefetchNavigationTargets}.
           *
           * If set to `true`, the SemanticObjectController will retrieve all navigation targets once and will disable
           * links for which no targets were found. Setting this value to `true` will trigger an additional roundtrip.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setPrefetchNavigationTargets(
            /**
             * New value for property `prefetchNavigationTargets`
             */
            bPrefetchNavigationTargets: boolean
          ): sap.ui.comp.navpopover.SemanticObjectController;
          /**
           * Removes the given control from the SemanticObjectController and unregisters all relevant events.
           */
          unregisterControl(
            /**
             * Control to be unregistered by `SemanticObjectController`
             */
            oControl:
              | sap.ui.comp.navpopover.SmartLink
              | sap.ui.comp.navpopover.NavigationPopoverHandler
          ): void;
          /**
           * @SINCE 1.28.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:beforePopoverOpens beforePopoverOpens} event
           * of this `sap.ui.comp.navpopover.SemanticObjectController`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.navpopover.SemanticObjectController` itself.
           *
           * Event is fired before the navigation popover opens and before navigation target links are retrieved.
           * Event can be used to change the parameters used to retrieve the navigation targets. In case of SmartLink,
           * `beforePopoverOpens` is fired after the link has been clicked.
           */
          attachBeforePopoverOpens(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.navpopover.SemanticObjectController`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.navpopover.SemanticObjectController;
          /**
           * @SINCE 1.28.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:navigate navigate} event of this `sap.ui.comp.navpopover.SemanticObjectController`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.navpopover.SemanticObjectController` itself.
           *
           * This event is fired after a navigation link on the navigation popover has been clicked. This event is
           * only fired, if the user left-clicks the link. Right-clicking the link and selecting 'Open in New Window'
           * etc. in the context menu does not fire the event.
           */
          attachNavigate(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.navpopover.SemanticObjectController`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.navpopover.SemanticObjectController;
          /**
           * @SINCE 1.28.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:navigationTargetsObtained navigationTargetsObtained}
           * event of this `sap.ui.comp.navpopover.SemanticObjectController`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.navpopover.SemanticObjectController` itself.
           *
           * After the navigation targets have been retrieved, `navigationTargetsObtained` is fired and makes it possible
           * you to change the targets.
           */
          attachNavigationTargetsObtained(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.navpopover.SemanticObjectController`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.navpopover.SemanticObjectController;
          /**
           * @SINCE 1.28.0
           * @deprecated (since 1.42.0) - The event `prefetchDone` is obsolete because it depends on the property
           * `prefetchNavigationTargets` which has been deprecated.
           *
           * Attaches event handler `fnFunction` to the {@link #event:prefetchDone prefetchDone} event of this `sap.ui.comp.navpopover.SemanticObjectController`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.navpopover.SemanticObjectController` itself.
           *
           * If the property `prefetchNavigationTargets` is set to `true`, event `prefetchDone` is fired after all
           * navigation targets have been retrieved.
           */
          attachPrefetchDone(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.navpopover.SemanticObjectController`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.navpopover.SemanticObjectController;
        }
        /**
         * The SmartLink control uses a semantic object to display {@link sap.ui.comp.navpopover.NavigationPopover
         * NavigationPopover} for further navigation steps.
         *  **Note:** Navigation targets are determined using {@link sap.ushell.services.CrossApplicationNavigation
         * CrossApplicationNavigation} of the unified shell service.
         */
        class SmartLink extends sap.m.Link {
          /**
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           * See:
           * 	{@link topic:f638884d0d624ad8a243f4005f8e9972 Smart Link}
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: SmartLinkOpts
          );

          /**
           * @SINCE 1.28.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:beforePopoverOpens beforePopoverOpens} event
           * of this `sap.ui.comp.navpopover.SmartLink`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.navpopover.SmartLink` itself.
           *
           * Event is fired before the navigation popover opens and before navigation target links are getting retrieved.
           * Event can be used to change the parameters used to retrieve the navigation targets. In case of SmartLink
           * control, the `beforePopoverOpens` is fired after the link has been clicked.
           */
          attachBeforePopoverOpens(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.navpopover.SmartLink` itself
             */
            oListener?: object
          ): sap.ui.comp.navpopover.SmartLink;
          /**
           * @SINCE 1.28.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:innerNavigate innerNavigate} event of this `sap.ui.comp.navpopover.SmartLink`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.navpopover.SmartLink` itself.
           *
           * This event is fired after a navigation link on the navigation popover has been clicked. This event is
           * only fired, if the user left-clicks the link. Right-clicking the link and selecting 'Open in New Window'
           * etc. in the context menu does not fire the event.
           */
          attachInnerNavigate(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.navpopover.SmartLink` itself
             */
            oListener?: object
          ): sap.ui.comp.navpopover.SmartLink;
          /**
           * @SINCE 1.28.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:navigationTargetsObtained navigationTargetsObtained}
           * event of this `sap.ui.comp.navpopover.SmartLink`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.navpopover.SmartLink` itself.
           *
           * After the navigation targets are retrieved, `navigationTargetsObtained` is fired and provides the possibility
           * to change the targets.
           */
          attachNavigationTargetsObtained(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.navpopover.SmartLink` itself
             */
            oListener?: object
          ): sap.ui.comp.navpopover.SmartLink;
          /**
           * @SINCE 1.28.0
           *
           * Destroys the innerControl in the aggregation {@link #getInnerControl innerControl}.
           */
          destroyInnerControl(): sap.ui.comp.navpopover.SmartLink;
          /**
           * @SINCE 1.28.0
           *
           * Detaches event handler `fnFunction` from the {@link #event:beforePopoverOpens beforePopoverOpens} event
           * of this `sap.ui.comp.navpopover.SmartLink`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachBeforePopoverOpens(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.navpopover.SmartLink;
          /**
           * @SINCE 1.28.0
           *
           * Detaches event handler `fnFunction` from the {@link #event:innerNavigate innerNavigate} event of this
           * `sap.ui.comp.navpopover.SmartLink`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachInnerNavigate(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.navpopover.SmartLink;
          /**
           * @SINCE 1.28.0
           *
           * Detaches event handler `fnFunction` from the {@link #event:navigationTargetsObtained navigationTargetsObtained}
           * event of this `sap.ui.comp.navpopover.SmartLink`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachNavigationTargetsObtained(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.navpopover.SmartLink;
          /**
           * Creates a new subclass of class sap.ui.comp.navpopover.SmartLink with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.m.Link.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * @SINCE 1.28.0
           *
           * Fires event {@link #event:beforePopoverOpens beforePopoverOpens} to attached listeners.
           */
          fireBeforePopoverOpens(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * The semantic object for which the navigation targets will be retrieved.
               */
              semanticObject?: string;
              /**
               * Map containing the semantic attributes calculated from the binding that will be used to retrieve the
               * navigation targets.
               */
              semanticAttributes?: object;
              /**
               * A map of semantic objects for which the navigation targets will be retrieved and it's semantic attributes
               * calculated from the binding context. The semantic attributes will be used as parameters in order to retrieve
               * the navigation targets.
               */
              semanticAttributesOfSemanticObjects?: object;
              /**
               * This callback function enables you to define a changed semantic attributes map. Signatures: `setSemanticAttributes(oSemanticAttributesMap)`
               * Parameter:
               * 	 - {object} oSemanticAttributesMap New map containing the semantic attributes
               * 	 - {string} sSemanticObject Semantic Object for which the oSemanticAttributesMap belongs
               */
              setSemanticAttributes?: Function;
              /**
               * This callback function sets an application state key that is used over the cross-application navigation.
               * Signatures: `setAppStateKey(sAppStateKey)` Parameter:
               * 	 - {string} sAppStateKey
               */
              setAppStateKey?: Function;
              /**
               * The ID of the SmartLink control.
               */
              originalId?: string;
              /**
               * This callback function triggers the retrieval of navigation targets and leads to the opening of the navigation
               * popover. Signatures: `open()` If the `beforePopoverOpens` has been registered, the `open` function has
               * to be called manually in order to open the navigation popover.
               */
              open?: Function;
            }
          ): sap.ui.comp.navpopover.SmartLink;
          /**
           * @SINCE 1.28.0
           *
           * Fires event {@link #event:innerNavigate innerNavigate} to attached listeners.
           */
          fireInnerNavigate(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * The UI text shown in the clicked link.
               */
              text?: string;
              /**
               * The navigation target of the clicked link.
               */
              href?: string;
              /**
               * The semantic object used to retrieve this target.
               */
              semanticObject?: string;
              /**
               * Map containing the semantic attributes used to retrieve this target.
               */
              semanticAttributes?: object;
              /**
               * The ID of the SmartLink control.
               */
              originalId?: string;
            }
          ): sap.ui.comp.navpopover.SmartLink;
          /**
           * @SINCE 1.28.0
           *
           * Fires event {@link #event:navigationTargetsObtained navigationTargetsObtained} to attached listeners.
           */
          fireNavigationTargetsObtained(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * The main navigation object.
               */
              mainNavigation?: sap.ui.comp.navpopover.LinkData;
              /**
               * Array of available navigation target objects.
               */
              actions?: sap.ui.comp.navpopover.LinkData[];
              /**
               * The navigation object for the own application. This navigation option is by default not visible on the
               * popover.
               */
              ownNavigation?: sap.ui.comp.navpopover.LinkData;
              /**
               * Array containing contact data.
               */
              popoverForms?: sap.ui.layout.form.SimpleForm[];
              /**
               * The semantic object for which the navigation targets have been retrieved.
               */
              semanticObject?: string;
              /**
               * Map containing the semantic attributes.
               */
              semanticAttributes?: object;
              /**
               * The ID of the SmartLink control.
               */
              originalId?: string;
              /**
               * This callback function shows the actual navigation popover. If the `navigationTargetsObtained` has been
               * registered, the `show` function has to be called manually in order to open the navigation popover. Signatures:
               * `show()`
               * 	 - `show(oMainNavigation, aAvailableActions, oAdditionalContent)` Parameters:
               * 	{sap.ui.comp.navpopover.LinkData | null | undefined} oMainNavigation The main navigation object. With
               * `null` the main navigation object will be removed. With `undefined` the old object will remain.
               * 	 - {sap.ui.comp.navpopover.LinkData[] | [] | undefined} aAvailableActions Array containing the cross
               * 			application navigation links. With empty array all available links will be removed. With `undefined`
               * 			the old links will remain.
               * 	 - {sap.ui.core.Control | null | undefined} oAdditionalContent Control that will be displayed in extra
               * 			content section on the popover. With `null` the main extra content object will be removed. With `undefined`
               * 			the old object still remains.
               * 	 - `show(sMainNavigationId, oMainNavigation, aAvailableActions, oAdditionalContent)` Parameters:
               * 	{string | undefined} sMainNavigationId The visible description for the main navigation link. With `''`,
               * both the description and subtitle will be removed. With `undefined`, the description is calculated using
               * the binding context of a given source object (for example `SmartLink` control).
               * 	 - {sap.ui.comp.navpopover.LinkData | null | undefined} oMainNavigation The main navigation object.
               * 			With `null` the main navigation object will be removed. With `undefined` the old object will remain.
               *
               * 	 - {sap.ui.comp.navpopover.LinkData[] | [] | undefined} aAvailableActions Array containing the cross
               * 			application navigation links. With empty array all available links will be removed. With `undefined`
               * 			the old links will remain.
               * 	 - {sap.ui.core.Control | null | undefined} oAdditionalContent Control that will be displayed in extra
               * 			content section on the popover. With `null` the main extra content object will be removed. With `undefined`
               * 			the old object still remains.
               */
              show?: Function;
            }
          ): sap.ui.comp.navpopover.SmartLink;
          /**
           * @SINCE 1.42.0
           *
           * Gets current value of property {@link #getAdditionalSemanticObjects additionalSemanticObjects}.
           *
           * Semantic object names which can be used additional to the default `semanticObject` property in order
           * to get navigation targets links.
           *
           * Default value is `[]`.
           */
          getAdditionalSemanticObjects(): string[];
          /**
           * @SINCE 1.40.0
           *
           * Gets current value of property {@link #getContactAnnotationPath contactAnnotationPath}.
           *
           * Navigation property that points from the current to the related entity type where the com.sap.vocabularies.Communication.v1.Contact
           * annotation is defined, for example, `'to_Supplier'`. An empty string means that the related entity type
           * is the current one.
           *
           * Default value is `undefined`.
           */
          getContactAnnotationPath(): string;
          /**
           * @SINCE 1.28.0
           *
           * Gets current value of property {@link #getCreateControlCallback createControlCallback}.
           *
           * Function that enables the SmartLink control to create an alternative control, which is displayed if no
           * navigation targets are available. The function has no parameters and has to return an instance of sap.ui.core.Control.
           */
          getCreateControlCallback(): object;
          /**
           * @SINCE 1.44.0
           *
           * Gets current value of property {@link #getEnableAvailableActionsPersonalization enableAvailableActionsPersonalization}.
           *
           * Determines whether the personalization link is shown inside the NavigationPopover control.
           *
           * Default value is `true`.
           */
          getEnableAvailableActionsPersonalization(): boolean;
          /**
           * @SINCE 1.28.0
           *
           * Gets current value of property {@link #getFieldName fieldName}.
           *
           * The metadata field name for this SmartLink control.
           */
          getFieldName(): string;
          /**
           * @SINCE 1.58.0
           *
           * Gets current value of property {@link #getForceLinkRendering forceLinkRendering}.
           *
           * If set to true, the `SmartLink` control is rendered as a link even if `contactAnnotationPath` is not
           * set and navigation targets do not exist. Setting this property to `true` allows the application, for
           * example, to modify the `SmartLink` control in the event handler, after the user has clicked on a link
           * and the registered event handler has been called.
           *
           * **Note:** The `ignoreLinkRendering` property and the `ignoredFields` property of the associated `SemanticObjectController`
           * take precedence over `forceLinkRendering`.
           *
           * Default value is `false`.
           */
          getForceLinkRendering(): boolean;
          /**
           * @SINCE 1.28.0
           *
           * Gets current value of property {@link #getIgnoreLinkRendering ignoreLinkRendering}.
           *
           * If set to `true`, the SmartLink control will render the `innerControl` or the control provided by `createControlCallback`
           * instead of the actual link. This is used for example by the SemanticObjectController if this SmartLink
           * is listed in its `ignoredFields` or no navigation targets were found during prefetch.
           *
           * Default value is `false`.
           */
          getIgnoreLinkRendering(): boolean;
          /**
           * @SINCE 1.28.0
           *
           * Gets content of aggregation {@link #getInnerControl innerControl}.
           *
           * Control that is displayed instead of SmartLink control, if the SmartLink is disabled (for example, if
           * no navigation targets are available). If `innerControl` is not provided, the SmartLink control tries
           * to create one with property `createControlCallback`.
           */
          getInnerControl(): sap.ui.core.Control;
          /**
           * Gets the inner control's value, if no inner control is available, the text of SmartLink control will
           * be returned.
           */
          getInnerControlValue(): object;
          /**
           * Gets current value of property {@link #getMapFieldToSemanticObject mapFieldToSemanticObject}.
           *
           * If set to `false`, the SmartLink control will not replace its field name with the according `semanticObject`
           * property during the calculation of the semantic attributes. This enables the usage of several SmartLink
           * controls on the same semantic object.
           *
           * Default value is `true`.
           */
          getMapFieldToSemanticObject(): boolean;
          /**
           * Returns a metadata object for class sap.ui.comp.navpopover.SmartLink.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * @SINCE 1.28.0
           *
           * Gets current value of property {@link #getSemanticObject semanticObject}.
           *
           * Name of semantic object which is used to fill the navigation popover. **Note**: Setting a value triggers
           * an asynchronous determination, so the effect can be delayed.
           */
          getSemanticObject(): string;
          /**
           * @SINCE 1.28.0
           *
           * Gets current value of property {@link #getSemanticObjectController semanticObjectController}.
           *
           * The semantic object controller controls events for several SmartLink controls. If the controller is not
           * set manually, it tries to find a SemanticObjectController in its parent hierarchy.
           */
          getSemanticObjectController(): any;
          /**
           * @SINCE 1.28.0
           * @deprecated (since 1.40.0) - Title section with `semanticObjectLabel` has been removed due to new UI
           * design
           *
           * Gets current value of property {@link #getSemanticObjectLabel semanticObjectLabel}.
           *
           * Shown label of semantic object.
           */
          getSemanticObjectLabel(): string;
          /**
           * @SINCE 1.48.0
           *
           * Gets current value of property {@link #getUom uom}.
           *
           * Additionally to the `text` property the Unit of Measure can be displayed.
           *
           * Default value is `undefined`.
           */
          getUom(): string;
          /**
           * @SINCE 1.42.0
           *
           * Sets a new value for property {@link #getAdditionalSemanticObjects additionalSemanticObjects}.
           *
           * Semantic object names which can be used additional to the default `semanticObject` property in order
           * to get navigation targets links.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `[]`.
           */
          setAdditionalSemanticObjects(
            /**
             * New value for property `additionalSemanticObjects`
             */
            sAdditionalSemanticObjects: string[]
          ): sap.ui.comp.navpopover.SmartLink;
          /**
           * @SINCE 1.40.0
           *
           * Sets a new value for property {@link #getContactAnnotationPath contactAnnotationPath}.
           *
           * Navigation property that points from the current to the related entity type where the com.sap.vocabularies.Communication.v1.Contact
           * annotation is defined, for example, `'to_Supplier'`. An empty string means that the related entity type
           * is the current one.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `undefined`.
           */
          setContactAnnotationPath(
            /**
             * New value for property `contactAnnotationPath`
             */
            sContactAnnotationPath: string
          ): sap.ui.comp.navpopover.SmartLink;
          /**
           * @SINCE 1.28.0
           *
           * Sets a new value for property {@link #getCreateControlCallback createControlCallback}.
           *
           * Function that enables the SmartLink control to create an alternative control, which is displayed if no
           * navigation targets are available. The function has no parameters and has to return an instance of sap.ui.core.Control.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setCreateControlCallback(
            /**
             * New value for property `createControlCallback`
             */
            oCreateControlCallback: object
          ): sap.ui.comp.navpopover.SmartLink;
          /**
           * @SINCE 1.44.0
           *
           * Sets a new value for property {@link #getEnableAvailableActionsPersonalization enableAvailableActionsPersonalization}.
           *
           * Determines whether the personalization link is shown inside the NavigationPopover control.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setEnableAvailableActionsPersonalization(
            /**
             * New value for property `enableAvailableActionsPersonalization`
             */
            bEnableAvailableActionsPersonalization: boolean
          ): sap.ui.comp.navpopover.SmartLink;
          /**
           * @SINCE 1.28.0
           *
           * Sets a new value for property {@link #getFieldName fieldName}.
           *
           * The metadata field name for this SmartLink control.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setFieldName(
            /**
             * New value for property `fieldName`
             */
            sFieldName: string
          ): sap.ui.comp.navpopover.SmartLink;
          /**
           * @SINCE 1.58.0
           *
           * Sets a new value for property {@link #getForceLinkRendering forceLinkRendering}.
           *
           * If set to true, the `SmartLink` control is rendered as a link even if `contactAnnotationPath` is not
           * set and navigation targets do not exist. Setting this property to `true` allows the application, for
           * example, to modify the `SmartLink` control in the event handler, after the user has clicked on a link
           * and the registered event handler has been called.
           *
           * **Note:** The `ignoreLinkRendering` property and the `ignoredFields` property of the associated `SemanticObjectController`
           * take precedence over `forceLinkRendering`.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setForceLinkRendering(
            /**
             * New value for property `forceLinkRendering`
             */
            bForceLinkRendering: boolean
          ): sap.ui.comp.navpopover.SmartLink;
          /**
           * @SINCE 1.28.0
           *
           * Sets a new value for property {@link #getIgnoreLinkRendering ignoreLinkRendering}.
           *
           * If set to `true`, the SmartLink control will render the `innerControl` or the control provided by `createControlCallback`
           * instead of the actual link. This is used for example by the SemanticObjectController if this SmartLink
           * is listed in its `ignoredFields` or no navigation targets were found during prefetch.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setIgnoreLinkRendering(
            /**
             * New value for property `ignoreLinkRendering`
             */
            bIgnoreLinkRendering: boolean
          ): sap.ui.comp.navpopover.SmartLink;
          /**
           * @SINCE 1.28.0
           *
           * Sets the aggregated {@link #getInnerControl innerControl}.
           */
          setInnerControl(
            /**
             * The innerControl to set
             */
            oInnerControl: sap.ui.core.Control
          ): sap.ui.comp.navpopover.SmartLink;
          /**
           * Sets a new value for property {@link #getMapFieldToSemanticObject mapFieldToSemanticObject}.
           *
           * If set to `false`, the SmartLink control will not replace its field name with the according `semanticObject`
           * property during the calculation of the semantic attributes. This enables the usage of several SmartLink
           * controls on the same semantic object.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setMapFieldToSemanticObject(
            /**
             * New value for property `mapFieldToSemanticObject`
             */
            bMapFieldToSemanticObject: boolean
          ): sap.ui.comp.navpopover.SmartLink;
          /**
           * @SINCE 1.28.0
           *
           * Sets a new value for property {@link #getSemanticObject semanticObject}.
           *
           * Name of semantic object which is used to fill the navigation popover. **Note**: Setting a value triggers
           * an asynchronous determination, so the effect can be delayed.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setSemanticObject(
            /**
             * New value for property `semanticObject`
             */
            sSemanticObject: string
          ): sap.ui.comp.navpopover.SmartLink;
          /**
           * @SINCE 1.28.0
           *
           * Sets a new value for property {@link #getSemanticObjectController semanticObjectController}.
           *
           * The semantic object controller controls events for several SmartLink controls. If the controller is not
           * set manually, it tries to find a SemanticObjectController in its parent hierarchy.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setSemanticObjectController(
            /**
             * New value for property `semanticObjectController`
             */
            oSemanticObjectController: any
          ): sap.ui.comp.navpopover.SmartLink;
          /**
           * @SINCE 1.28.0
           * @deprecated (since 1.40.0) - Title section with `semanticObjectLabel` has been removed due to new UI
           * design
           *
           * Sets a new value for property {@link #getSemanticObjectLabel semanticObjectLabel}.
           *
           * Shown label of semantic object.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setSemanticObjectLabel(
            /**
             * New value for property `semanticObjectLabel`
             */
            sSemanticObjectLabel: string
          ): sap.ui.comp.navpopover.SmartLink;
          /**
           * @SINCE 1.48.0
           *
           * Sets a new value for property {@link #getUom uom}.
           *
           * Additionally to the `text` property the Unit of Measure can be displayed.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `undefined`.
           */
          setUom(
            /**
             * New value for property `uom`
             */
            sUom: string
          ): sap.ui.comp.navpopover.SmartLink;
          /**
           * @SINCE 1.28.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:beforePopoverOpens beforePopoverOpens} event
           * of this `sap.ui.comp.navpopover.SmartLink`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.navpopover.SmartLink` itself.
           *
           * Event is fired before the navigation popover opens and before navigation target links are getting retrieved.
           * Event can be used to change the parameters used to retrieve the navigation targets. In case of SmartLink
           * control, the `beforePopoverOpens` is fired after the link has been clicked.
           */
          attachBeforePopoverOpens(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.navpopover.SmartLink` itself
             */
            oListener?: object
          ): sap.ui.comp.navpopover.SmartLink;
          /**
           * @SINCE 1.28.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:innerNavigate innerNavigate} event of this `sap.ui.comp.navpopover.SmartLink`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.navpopover.SmartLink` itself.
           *
           * This event is fired after a navigation link on the navigation popover has been clicked. This event is
           * only fired, if the user left-clicks the link. Right-clicking the link and selecting 'Open in New Window'
           * etc. in the context menu does not fire the event.
           */
          attachInnerNavigate(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.navpopover.SmartLink` itself
             */
            oListener?: object
          ): sap.ui.comp.navpopover.SmartLink;
          /**
           * @SINCE 1.28.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:navigationTargetsObtained navigationTargetsObtained}
           * event of this `sap.ui.comp.navpopover.SmartLink`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.navpopover.SmartLink` itself.
           *
           * After the navigation targets are retrieved, `navigationTargetsObtained` is fired and provides the possibility
           * to change the targets.
           */
          attachNavigationTargetsObtained(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.navpopover.SmartLink` itself
             */
            oListener?: object
          ): sap.ui.comp.navpopover.SmartLink;
        }
        /**
         * Type of change handler type for link personalization.
         */
        enum ChangeHandlerType {
          /**
           * Change handler creating a change for an added link.
           */
          addLink,
          /**
           * Change handler creating a change for a moved link.
           */
          moveLink,
          /**
           * Change handler creating a change for a removed link.
           */
          removeLink
        }
      }

      namespace personalization {
        /**
         * Provides enumeration sap.ui.comp.personalization.AggregationRole. A subset of aggregation roles used
         * in table personalization.
         */
        enum AggregationRole {
          /**
           * Dimension role.
           */
          Dimension,
          /**
           * Measure role.
           */
          Measure,
          /**
           * Role which is neither dimension nor measure.
           */
          NotDimeasure
        }
        /**
         * Provides enumeration sap.ui.comp.personalization.ChangeType. A subset of changes done during table personalization.
         */
        enum ChangeType {
          /**
           * Change is applied to model but not applied to table
           */
          ModelChanged,
          /**
           * Change is applied to model and to table
           */
          TableChanged,
          /**
           * Not changed
           */
          Unchanged
        }
        /**
         * Provides enumeration sap.ui.comp.personalization.ColumnType. A subset of column types that fit for table
         * personalization.
         */
        enum ColumnType {
          /**
           * Represents `sap.ui.comp.personalization.ColumnWrapper`.
           */
          ColumnWrapper,
          /**
           * Represents `sap.m.Column`.
           */
          ResponsiveColumn,
          /**
           * Represents `sap.ui.table.Column`.
           */
          TableColumn
        }
        /**
         * Provides enumeration sap.ui.comp.personalization.ResetType. A subset of reset types used in table personalization.
         */
        enum ResetType {
          /**
           * Reset back to Restore (i.e. the version of the table with which the controller was instantiated or via
           * setter updated) was triggered (either via API or via reset button)
           */
          ResetFull,
          /**
           * Reset back to the CurrentVariant was triggered
           */
          ResetPartial
        }
        /**
         * Provides enumeration sap.ui.comp.personalization.TableType. A subset of table types that fit for table
         * personalization.
         */
        enum TableType {
          /**
           * Represents `sap.ui.table.AnalyticalTable`.
           */
          AnalyticalTable,
          /**
           * Represents `sap.ui.comp.personalization.ChartWrapper`.
           */
          ChartWrapper,
          /**
           * Represents `sap.m.Table`.
           */
          ResponsiveTable,
          /**
           * Represents `sap.ui.comp.personalization.SelectionWrapper`.
           */
          SelectionWrapper,
          /**
           * Represents `sap.ui.table.Table`.
           */
          Table,
          /**
           * Represents `sap.ui.table.TreeTable`.
           */
          TreeTable
        }
      }

      namespace smartchart {
        interface SmartChartOpts extends sap.m.VBoxOpts {
          /**
           * The entity set name from which to fetch data and generate the columns.
           *  **Note** This is not a dynamic property.
           */
          entitySet?: string;

          /**
           * ID of the corresponding SmartFilter control. If specified, the SmartChart control searches for the SmartFilter
           * control (also in the closest parent view) and attaches to the relevant events of the SmartFilter control
           * to fetch data, show overlay etc.
           */
          smartFilterId?: string;

          /**
           * CSV of fields that must be ignored in the OData metadata by the SmartChart control.
           *  **Note:** No validation is done. Please ensure that you do not add spaces or special characters.
           */
          ignoredFields?: string;

          /**
           * CSV of fields that must be always requested by the backend system.
           *  This property is mainly meant to be used if there is no PresentationVariant annotation.
           *  If both this property and the PresentationVariant annotation exist, the select request sent to the backend
           * would be a combination of both.
           *  **Note:** No validation is done. Please ensure that you do not add spaces or special characters. Also,
           * setting this property during runtime, will delete the current drill-stack and lead to a loss of the drill
           * history.
           */
          requestAtLeastFields?: string;

          /**
           * CSV of fields that is not shown in the personalization dialog.
           *  **Note:** No validation is done. Please ensure that you do not add spaces or special characters.
           */
          ignoreFromPersonalisation?: string;

          /**
           * Specifies the type of chart to be created by the SmartChart control.
           */
          chartType?: string;

          /**
           * CSV of fields that is not shown in the list of available chart types.
           *  **Note:** No validation is done. Please ensure that you do not add spaces or special characters.
           */
          ignoredChartTypes?: string;

          /**
           * If set to `true`, variants are used. As a prerequisite, you need to specify the persistencyKey property.
           */
          useVariantManagement?: boolean;

          /**
           * If set to `true`, personalized chart settings are defined. If you want to persist the chart personalization,
           * you need to specify the persistencyKey property.
           */
          useChartPersonalisation?: boolean;

          /**
           * Specifies header text that is shown in the chart.
           */
          header?: string;

          /**
           * Key used to access personalization data.
           */
          persistencyKey?: string;

          /**
           * Retrieves or applies the current variant.
           */
          currentVariantId?: string;

          /**
           * If set to `true`, this enables automatic binding of the chart using the chartBindingPath (if it exists)
           * or entitySet property. This happens right after the `initialise` event has been fired.
           */
          enableAutoBinding?: boolean;

          /**
           * Specifies the path that is used during the binding of the chart. If not specified, the entitySet property
           * is used instead. (used only if binding is established internally/automatically - See enableAutoBinding)
           */
          chartBindingPath?: string;

          /**
           * Controls the visibility of the Drill Up and Drill Down buttons.
           */
          showDrillButtons?: boolean;

          /**
           * @SINCE 1.36
           *
           * Controls the visibility of the Zoom In and Zoom Out buttons.
           */
          showZoomButtons?: boolean;

          /**
           * @SINCE 1.36
           *
           * Controls the visibility of the Navigation button
           */
          showSemanticNavigationButton?: boolean;

          /**
           * @SINCE 1.38
           *
           * Controls the visibility of the Variant Management.
           */
          showVariantManagement?: boolean;

          /**
           * @SINCE 1.39
           *
           * Controls the visibility of the chart download button.
           */
          showDownloadButton?: boolean;

          /**
           * @SINCE 1.38
           *
           * Controls the visibility of the Details button. If set to `true`, the datapoint tooltip will be disabled
           * as the information of selected datapoints will be found in the details popover. This will also set the
           * drill-down button to invisible.
           */
          showDetailsButton?: boolean;

          /**
           * @SINCE 1.38
           *
           * Controls the visibility of the Breadcrumbs control for drilling up within the visible dimensions. If
           * set to `true`, the toolbar header will be replaced by the Breadcrumbs control. This will also set the
           * drill-up button to invisible.
           */
          showDrillBreadcrumbs?: boolean;

          /**
           * @SINCE 1.38
           *
           * Controls the visibility of the chart tooltip. If set to `true `, an instance of sap.viz.ui5.controls.VizTooltip
           * will be created and shown when hovering over a data point.
           */
          showChartTooltip?: boolean;

          /**
           * @SINCE 1.36
           *
           * Controls the visibility of the Navigation button
           */
          showLegendButton?: boolean;

          /**
           * @SINCE 1.36
           *
           * Set chart's legend properties.
           */
          legendVisible?: boolean;

          /**
           * @SINCE 1.36
           *
           * Chart selection mode. Supported values are {@link sap.ui.comp.smartchart.SelectionMode.Single} or {@link
           * sap.ui.comp.smartchart.SelectionMode.Multi}, case insensitive, always return in upper case. Unsupported
           * values will be ignored.
           */
          selectionMode?: sap.ui.comp.smartchart.SelectionMode;

          /**
           * @SINCE 1.36
           *
           * Controls the visibility of the FullScreen button.
           */
          showFullScreenButton?: boolean;

          /**
           * @SINCE 1.36
           *
           * Specifies weather an instance of {@link sap.viz.ui5.controls.VizTooltip} or {@link sap.viz.ui5.controls.Popover}
           * is used. If set to `true`, a tooltip will be displayed, a popover otherwise.
           */
          useTooltip?: boolean;

          /**
           * @SINCE 1.38
           * @deprecated (since 1.48.0) - Setting the property to `false` will have no effect on the visualization
           * of chart type selection. `SmartChart` will always show a list of chart types.
           *
           * Controls the visualization for chart type selection. If set to `true`, the list of available chart types
           * will be displayed. If set to `false` and there are three or fewer available chart types, the chart types
           * will be displayed as separate buttons in the toolbar. If there are more than three chart types, a list
           * will be shown.
           */
          useListForChartTypeSelection?: boolean;

          /**
           * @SINCE 1.48
           *
           * Controls the visibility of the chart type selection button.
           */
          showChartTypeSelectionButton?: boolean;

          /**
           * @SINCE 1.46
           *
           * Defines the custom text that will be displayed in case no data is found for the current binding.
           */
          noData?: string;

          /**
           * @SINCE 1.54
           *
           * Controls the visibility of the toolbar.
           */
          showToolbar?: boolean;

          /**
           * @SINCE 1.54
           *
           * Defines the visual style of the smart charts `Toolbar`. **Note:** The visual styles are theme-dependent.
           */
          toolbarStyle?: sap.m.ToolbarStyle;

          /**
           * @SINCE 1.54
           *
           * Controls the visibility of the title in the dimension area of the chart.
           */
          showDimensionsTitle?: boolean;

          /**
           * @SINCE 1.54
           *
           * Controls the visibility of the title in the measure area of the chart.
           */
          showMeasuresTitle?: boolean;

          /**
           * @deprecated (since 1.65)
           *
           * This event is fired once the control has been initialized. **Note:** For compatibility reasons the sap.chart
           * library is loaded synchroniously as soon as a event handler for the `initialise` event has been attached.
           * Please use event `intialized` instead.
           */
          initialise?: Function;

          /**
           * New event, async successor of initialise
           */
          initialized?: Function;

          /**
           * This event is fired right before the `SmartChart` control triggers the binding / rebinding of the inner
           * chart.
           *  **Note:** In certain cases the inner chart triggers a rebinding by itself. In these cases, the event
           * is not fired.
           */
          beforeRebindChart?: Function;

          /**
           * @deprecated (since 1.56) - Use `beforeRebindChart` event to attach/listen to the binding "events" directly
           *
           * This event is fired when data is received after binding. This event is fired if the binding for the chart
           * is done by the SmartChart control itself.
           */
          dataReceived?: Function;

          /**
           * This event is fired after the variant management in the SmartChart control has been initialized.
           */
          afterVariantInitialise?: Function;

          /**
           * This event is fired after a variant has been saved. This event can be used to retrieve the ID of the
           * saved variant.
           */
          afterVariantSave?: Function;

          /**
           * This event is fired after a variant has been applied.
           */
          afterVariantApply?: Function;

          /**
           * This event is fired right before the overlay is shown.
           */
          showOverlay?: Function;

          /**
           * @SINCE 1.46
           *
           * This event is fired right after the full screen mode of the SmartChart control has been changed.
           */
          fullScreenToggled?: Function;

          /**
           * @SINCE 1.48
           * @EXPERIMENTAL (since 1.48)
           *
           * This event is fired when any action in the selection details popover is pressed.
           */
          selectionDetailsActionPress?: Function;

          /**
           * This event is fired when `SmartChart` control data changes, due to changes in the personalization dialog
           * or drill operations.
           *  The data can be changed via sorters, filters or drill-ups/drill-downs.
           */
          chartDataChanged?: Function;

          /**
           * A custom toolbar that can be specified by the user to define their own buttons, icons, etc. If this is
           * added, the SmartChart control does not create its own toolbar, but uses this one instead. However, if
           * default actions, such as showSemanticNavigation, showFullScreenButton etc. are set, these actions are
           * added at the left-hand side of the toolbar.
           */
          toolbar?: sap.m.Toolbar;

          /**
           * @SINCE 1.36
           *
           * The Semantic Object Controller allows the user to specify and overwrite functionality for semantic object
           * navigation.
           */
          semanticObjectController?: sap.ui.comp.navpopover.SemanticObjectController;

          /**
           * @EXPERIMENTAL (since 1.48)
           *
           * Actions on item level which can be specified for the selection details popover.
           */
          selectionDetailsItemActions?: sap.ui.core.Item[] | sap.ui.core.Item;

          /**
           * @EXPERIMENTAL (since 1.48)
           *
           * Actions on footer level which can be specified for the selection details popover.
           */
          selectionDetailsActions?: sap.ui.core.Item[] | sap.ui.core.Item;

          /**
           * @EXPERIMENTAL (since 1.48)
           *
           * Actions on group level which can be specified for the selection details popover.
           */
          selectionDetailsActionGroups?: sap.ui.core.Item[] | sap.ui.core.Item;

          /**
           * @SINCE 1.38
           *
           * Identifies the SmartVariant control which should be used for the personalization. Will be ignored if
           * the advanced mode is set.
           */
          smartVariant?: sap.ui.core.Control | string;
        }
        /**
         * The SmartChart control creates a chart based on the OData metadata and the provided configuration. To
         * use the control, the `entitySet` property must be specified. This property is used to fetch the metadata,
         * from which the chart UI will be generated.
         *  Based on the chartType property, this control will render initially the corresponding chart.
         *  **Note:** Most of the properties are not dynamic and cannot be changed once the control has been initialized.
         */
        class SmartChart extends sap.m.VBox {
          /**
           * Constructor for a new SmartChart instance.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           * See:
           * 	{@link topic:7a32157697474864b041fa739fcc51ba Smart Chart}
           */
          constructor(
            /**
             * ID for the new control that is generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: SmartChartOpts
          );

          /**
           * @EXPERIMENTAL (since 1.48)
           *
           * Adds some selectionDetailsAction to the aggregation {@link #getSelectionDetailsActions selectionDetailsActions}.
           */
          addSelectionDetailsAction(
            /**
             * The selectionDetailsAction to add; if empty, nothing is inserted
             */
            oSelectionDetailsAction: sap.ui.core.Item
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * @EXPERIMENTAL (since 1.48)
           *
           * Adds some selectionDetailsActionGroup to the aggregation {@link #getSelectionDetailsActionGroups selectionDetailsActionGroups}.
           */
          addSelectionDetailsActionGroup(
            /**
             * The selectionDetailsActionGroup to add; if empty, nothing is inserted
             */
            oSelectionDetailsActionGroup: sap.ui.core.Item
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * @EXPERIMENTAL (since 1.48)
           *
           * Adds some selectionDetailsItemAction to the aggregation {@link #getSelectionDetailsItemActions selectionDetailsItemActions}.
           */
          addSelectionDetailsItemAction(
            /**
             * The selectionDetailsItemAction to add; if empty, nothing is inserted
             */
            oSelectionDetailsItemAction: sap.ui.core.Item
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * Interface function for SmartVariantManagement control that applies the current variant.
           */
          applyVariant(
            /**
             * The variant JSON
             */
            oVariantJSON: Object,
            /**
             * Describes the context in which the variant has been applied
             */
            sContext: string
          ): void;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:afterVariantApply afterVariantApply} event of
           * this `sap.ui.comp.smartchart.SmartChart`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartchart.SmartChart` itself.
           *
           * This event is fired after a variant has been applied.
           */
          attachAfterVariantApply(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartchart.SmartChart` itself
             */
            oListener?: object
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:afterVariantInitialise afterVariantInitialise}
           * event of this `sap.ui.comp.smartchart.SmartChart`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartchart.SmartChart` itself.
           *
           * This event is fired after the variant management in the SmartChart control has been initialized.
           */
          attachAfterVariantInitialise(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartchart.SmartChart` itself
             */
            oListener?: object
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:afterVariantSave afterVariantSave} event of
           * this `sap.ui.comp.smartchart.SmartChart`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartchart.SmartChart` itself.
           *
           * This event is fired after a variant has been saved. This event can be used to retrieve the ID of the
           * saved variant.
           */
          attachAfterVariantSave(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartchart.SmartChart` itself
             */
            oListener?: object
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:beforeRebindChart beforeRebindChart} event of
           * this `sap.ui.comp.smartchart.SmartChart`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartchart.SmartChart` itself.
           *
           * This event is fired right before the `SmartChart` control triggers the binding / rebinding of the inner
           * chart.
           *  **Note:** In certain cases the inner chart triggers a rebinding by itself. In these cases, the event
           * is not fired.
           */
          attachBeforeRebindChart(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartchart.SmartChart` itself
             */
            oListener?: object
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:chartDataChanged chartDataChanged} event of
           * this `sap.ui.comp.smartchart.SmartChart`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartchart.SmartChart` itself.
           *
           * This event is fired when `SmartChart` control data changes, due to changes in the personalization dialog
           * or drill operations.
           *  The data can be changed via sorters, filters or drill-ups/drill-downs.
           */
          attachChartDataChanged(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartchart.SmartChart` itself
             */
            oListener?: object
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * @deprecated (since 1.56) - Use `beforeRebindChart` event to attach/listen to the binding "events" directly
           *
           * Attaches event handler `fnFunction` to the {@link #event:dataReceived dataReceived} event of this `sap.ui.comp.smartchart.SmartChart`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartchart.SmartChart` itself.
           *
           * This event is fired when data is received after binding. This event is fired if the binding for the chart
           * is done by the SmartChart control itself.
           */
          attachDataReceived(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartchart.SmartChart` itself
             */
            oListener?: object
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * @SINCE 1.46
           *
           * Attaches event handler `fnFunction` to the {@link #event:fullScreenToggled fullScreenToggled} event of
           * this `sap.ui.comp.smartchart.SmartChart`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartchart.SmartChart` itself.
           *
           * This event is fired right after the full screen mode of the SmartChart control has been changed.
           */
          attachFullScreenToggled(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartchart.SmartChart` itself
             */
            oListener?: object
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * Loads the chart lib synchronously before the event is attached. That is done for compatibility reasons.
           */
          attachInitialise(): void;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.ui.comp.smartchart.SmartChart`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartchart.SmartChart` itself.
           *
           * New event, async successor of initialise
           */
          attachInitialized(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartchart.SmartChart` itself
             */
            oListener?: object
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * @SINCE 1.48
           * @EXPERIMENTAL (since 1.48)
           *
           * Attaches event handler `fnFunction` to the {@link #event:selectionDetailsActionPress selectionDetailsActionPress}
           * event of this `sap.ui.comp.smartchart.SmartChart`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartchart.SmartChart` itself.
           *
           * This event is fired when any action in the selection details popover is pressed.
           */
          attachSelectionDetailsActionPress(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartchart.SmartChart` itself
             */
            oListener?: object
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:showOverlay showOverlay} event of this `sap.ui.comp.smartchart.SmartChart`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartchart.SmartChart` itself.
           *
           * This event is fired right before the overlay is shown.
           */
          attachShowOverlay(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartchart.SmartChart` itself
             */
            oListener?: object
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * @EXPERIMENTAL (since 1.48)
           *
           * Destroys all the selectionDetailsActionGroups in the aggregation {@link #getSelectionDetailsActionGroups
           * selectionDetailsActionGroups}.
           */
          destroySelectionDetailsActionGroups(): sap.ui.comp.smartchart.SmartChart;
          /**
           * @EXPERIMENTAL (since 1.48)
           *
           * Destroys all the selectionDetailsActions in the aggregation {@link #getSelectionDetailsActions selectionDetailsActions}.
           */
          destroySelectionDetailsActions(): sap.ui.comp.smartchart.SmartChart;
          /**
           * @EXPERIMENTAL (since 1.48)
           *
           * Destroys all the selectionDetailsItemActions in the aggregation {@link #getSelectionDetailsItemActions
           * selectionDetailsItemActions}.
           */
          destroySelectionDetailsItemActions(): sap.ui.comp.smartchart.SmartChart;
          /**
           * @SINCE 1.36
           *
           * Destroys the semanticObjectController in the aggregation {@link #getSemanticObjectController semanticObjectController}.
           */
          destroySemanticObjectController(): sap.ui.comp.smartchart.SmartChart;
          /**
           * Destroys the toolbar in the aggregation {@link #getToolbar toolbar}.
           */
          destroyToolbar(): sap.ui.comp.smartchart.SmartChart;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:afterVariantApply afterVariantApply} event
           * of this `sap.ui.comp.smartchart.SmartChart`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachAfterVariantApply(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:afterVariantInitialise afterVariantInitialise}
           * event of this `sap.ui.comp.smartchart.SmartChart`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachAfterVariantInitialise(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:afterVariantSave afterVariantSave} event of
           * this `sap.ui.comp.smartchart.SmartChart`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachAfterVariantSave(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:beforeRebindChart beforeRebindChart} event
           * of this `sap.ui.comp.smartchart.SmartChart`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachBeforeRebindChart(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:chartDataChanged chartDataChanged} event of
           * this `sap.ui.comp.smartchart.SmartChart`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachChartDataChanged(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * @deprecated (since 1.56) - Use `beforeRebindChart` event to attach/listen to the binding "events" directly
           *
           * Detaches event handler `fnFunction` from the {@link #event:dataReceived dataReceived} event of this `sap.ui.comp.smartchart.SmartChart`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachDataReceived(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * @SINCE 1.46
           *
           * Detaches event handler `fnFunction` from the {@link #event:fullScreenToggled fullScreenToggled} event
           * of this `sap.ui.comp.smartchart.SmartChart`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachFullScreenToggled(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * @deprecated (since 1.65)
           *
           * Detaches event handler `fnFunction` from the {@link #event:initialise initialise} event of this `sap.ui.comp.smartchart.SmartChart`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachInitialise(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:initialized initialized} event of this `sap.ui.comp.smartchart.SmartChart`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachInitialized(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * @SINCE 1.48
           * @EXPERIMENTAL (since 1.48)
           *
           * Detaches event handler `fnFunction` from the {@link #event:selectionDetailsActionPress selectionDetailsActionPress}
           * event of this `sap.ui.comp.smartchart.SmartChart`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachSelectionDetailsActionPress(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:showOverlay showOverlay} event of this `sap.ui.comp.smartchart.SmartChart`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachShowOverlay(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * Cleans up the control.
           */
          // @ts-ignore
          exit(): void;
          /**
           * Creates a new subclass of class sap.ui.comp.smartchart.SmartChart with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.m.VBox.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Function for the {@link sap.ui.comp.smartvariants.SmartVariantManagement} control that returns the currently
           * used variant data in an internal format. **Note:** This function must not be used by applications.
           */
          fetchVariant(): Object;
          /**
           * Fires event {@link #event:afterVariantApply afterVariantApply} to attached listeners.
           */
          fireAfterVariantApply(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * ID of the currently selected variant
               */
              currentVariantId?: string;
            }
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * Fires event {@link #event:afterVariantInitialise afterVariantInitialise} to attached listeners.
           */
          fireAfterVariantInitialise(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * Fires event {@link #event:afterVariantSave afterVariantSave} to attached listeners.
           */
          fireAfterVariantSave(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * ID of the currently selected variant
               */
              currentVariantId?: string;
            }
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * Fires event {@link #event:beforeRebindChart beforeRebindChart} to attached listeners.
           */
          fireBeforeRebindChart(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * Fires event {@link #event:chartDataChanged chartDataChanged} to attached listeners.
           */
          fireChartDataChanged(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * Object which contains a boolean flag for dimeasure, filter, sort. If set to `true`, it has been changed.
               */
              changeTypes?: object;
            }
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * @deprecated (since 1.56) - Use `beforeRebindChart` event to attach/listen to the binding "events" directly
           *
           * Fires event {@link #event:dataReceived dataReceived} to attached listeners.
           */
          fireDataReceived(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * @SINCE 1.46
           *
           * Fires event {@link #event:fullScreenToggled fullScreenToggled} to attached listeners.
           */
          fireFullScreenToggled(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * If `true` the control is in full screen mode
               */
              fullScreen?: boolean;
            }
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * @deprecated (since 1.65)
           *
           * Fires event {@link #event:initialise initialise} to attached listeners.
           */
          fireInitialise(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * Fires event {@link #event:initialized initialized} to attached listeners.
           */
          fireInitialized(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * @SINCE 1.48
           * @EXPERIMENTAL (since 1.48)
           *
           * Fires event {@link #event:selectionDetailsActionPress selectionDetailsActionPress} to attached listeners.
           */
          fireSelectionDetailsActionPress(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * The action that has to be processed once the action has been pressed
               */
              action?: sap.ui.core.Item;
              /**
               * If the action is pressed on one of the {@link sap.m.SelectionDetailsItem items}, the parameter contains
               * the {@link sap.ui.model.Context context} of the pressed {@link sap.m.SelectionDetailsItem item}. If a
               * custom action or action group of the SelectionDetails popover is pressed, this parameter contains all
               * {@link sap.ui.model.Context contexts} of the {@link sap.m.SelectionDetailsItem items}.
               */
              itemContexts?: sap.ui.model.Context;
              /**
               * The action level of action buttons. The available levels are Item, List and Group
               */
              level?: sap.m.SelectionDetailsActionLevel;
            }
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * Fires event {@link #event:showOverlay showOverlay} to attached listeners.
           */
          fireShowOverlay(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * @deprecated (since 1.57.0) - Please use `getChartAsync` instead.
           *
           * Returns the chart object used internally.
           *  **Note:** Direct changes made to the inner {@link sap.chart.Chart chart} object or its {@link sap.viz.ui5.controls.VizFrame
           * vizFrame} might lead to inconsistencies and side effects during runtime, as the `SmartChart` control
           * doesn't listen to all changes made to the inner {@link sap.chart.Chart chart} instance. To avoid this,
           * please use the API provided by the `SmartChart` control itself.
           */
          getChart(): object;
          /**
           * @SINCE 1.57.0
           *
           * Returns a promise which will be resolved with the internally used chart object, once all dependencies
           * have been loaded.
           *  **Note:** Direct changes made to the inner {@link sap.chart.Chart chart} object or its {@link sap.viz.ui5.controls.VizFrame
           * vizFrame} might lead to inconsistencies and side effects during runtime, as the `SmartChart` control
           * doesn't listen to all changes made to the inner {@link sap.chart.Chart chart} instance. To avoid this,
           * please use the API provided by the `SmartChart` control itself.
           */
          getChartAsync(): object;
          /**
           * Gets current value of property {@link #getChartBindingPath chartBindingPath}.
           *
           * Specifies the path that is used during the binding of the chart. If not specified, the entitySet property
           * is used instead. (used only if binding is established internally/automatically - See enableAutoBinding)
           */
          getChartBindingPath(): string;
          /**
           * Gets current value of property {@link #getChartType chartType}.
           *
           * Specifies the type of chart to be created by the SmartChart control.
           */
          getChartType(): string;
          /**
           * Returns the ID of the currently selected variant.
           */
          getCurrentVariantId(): string;
          /**
           * Gets current value of property {@link #getEnableAutoBinding enableAutoBinding}.
           *
           * If set to `true`, this enables automatic binding of the chart using the chartBindingPath (if it exists)
           * or entitySet property. This happens right after the `initialise` event has been fired.
           *
           * Default value is `false`.
           */
          getEnableAutoBinding(): boolean;
          /**
           * Gets current value of property {@link #getEntitySet entitySet}.
           *
           * The entity set name from which to fetch data and generate the columns.
           *  **Note** This is not a dynamic property.
           */
          getEntitySet(): string;
          /**
           * Gets current value of property {@link #getHeader header}.
           *
           * Specifies header text that is shown in the chart.
           */
          getHeader(): string;
          /**
           * Gets current value of property {@link #getIgnoredChartTypes ignoredChartTypes}.
           *
           * CSV of fields that is not shown in the list of available chart types.
           *  **Note:** No validation is done. Please ensure that you do not add spaces or special characters.
           */
          getIgnoredChartTypes(): string;
          /**
           * Gets current value of property {@link #getIgnoredFields ignoredFields}.
           *
           * CSV of fields that must be ignored in the OData metadata by the SmartChart control.
           *  **Note:** No validation is done. Please ensure that you do not add spaces or special characters.
           */
          getIgnoredFields(): string;
          /**
           * Gets current value of property {@link #getIgnoreFromPersonalisation ignoreFromPersonalisation}.
           *
           * CSV of fields that is not shown in the personalization dialog.
           *  **Note:** No validation is done. Please ensure that you do not add spaces or special characters.
           */
          getIgnoreFromPersonalisation(): string;
          /**
           * @SINCE 1.36
           *
           * Gets current value of property {@link #getLegendVisible legendVisible}.
           *
           * Set chart's legend properties.
           *
           * Default value is `true`.
           */
          getLegendVisible(): boolean;
          /**
           * Returns a metadata object for class sap.ui.comp.smartchart.SmartChart.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * @SINCE 1.46
           *
           * Gets current value of property {@link #getNoData noData}.
           *
           * Defines the custom text that will be displayed in case no data is found for the current binding.
           */
          getNoData(): string;
          /**
           * Gets current value of property {@link #getPersistencyKey persistencyKey}.
           *
           * Key used to access personalization data.
           */
          getPersistencyKey(): string;
          /**
           * Gets current value of property {@link #getRequestAtLeastFields requestAtLeastFields}.
           *
           * CSV of fields that must be always requested by the backend system.
           *  This property is mainly meant to be used if there is no PresentationVariant annotation.
           *  If both this property and the PresentationVariant annotation exist, the select request sent to the backend
           * would be a combination of both.
           *  **Note:** No validation is done. Please ensure that you do not add spaces or special characters. Also,
           * setting this property during runtime, will delete the current drill-stack and lead to a loss of the drill
           * history.
           */
          getRequestAtLeastFields(): string;
          /**
           * @EXPERIMENTAL (since 1.48)
           *
           * Gets content of aggregation {@link #getSelectionDetailsActionGroups selectionDetailsActionGroups}.
           *
           * Actions on group level which can be specified for the selection details popover.
           */
          getSelectionDetailsActionGroups(): sap.ui.core.Item[];
          /**
           * @EXPERIMENTAL (since 1.48)
           *
           * Gets content of aggregation {@link #getSelectionDetailsActions selectionDetailsActions}.
           *
           * Actions on footer level which can be specified for the selection details popover.
           */
          getSelectionDetailsActions(): sap.ui.core.Item[];
          /**
           * @EXPERIMENTAL (since 1.48)
           *
           * Gets content of aggregation {@link #getSelectionDetailsItemActions selectionDetailsItemActions}.
           *
           * Actions on item level which can be specified for the selection details popover.
           */
          getSelectionDetailsItemActions(): sap.ui.core.Item[];
          /**
           * @SINCE 1.36
           *
           * Gets current value of property {@link #getSelectionMode selectionMode}.
           *
           * Chart selection mode. Supported values are {@link sap.ui.comp.smartchart.SelectionMode.Single} or {@link
           * sap.ui.comp.smartchart.SelectionMode.Multi}, case insensitive, always return in upper case. Unsupported
           * values will be ignored.
           *
           * Default value is `Multi`.
           */
          getSelectionMode(): sap.ui.comp.smartchart.SelectionMode;
          /**
           * @SINCE 1.36
           *
           * Gets content of aggregation {@link #getSemanticObjectController semanticObjectController}.
           *
           * The Semantic Object Controller allows the user to specify and overwrite functionality for semantic object
           * navigation.
           */
          getSemanticObjectController(): sap.ui.comp.navpopover.SemanticObjectController;
          /**
           * @SINCE 1.38
           *
           * Gets current value of property {@link #getShowChartTooltip showChartTooltip}.
           *
           * Controls the visibility of the chart tooltip. If set to `true `, an instance of sap.viz.ui5.controls.VizTooltip
           * will be created and shown when hovering over a data point.
           *
           * Default value is `true`.
           */
          getShowChartTooltip(): boolean;
          /**
           * @SINCE 1.48
           *
           * Gets current value of property {@link #getShowChartTypeSelectionButton showChartTypeSelectionButton}.
           *
           * Controls the visibility of the chart type selection button.
           *
           * Default value is `true`.
           */
          getShowChartTypeSelectionButton(): boolean;
          /**
           * @SINCE 1.38
           *
           * Gets current value of property {@link #getShowDetailsButton showDetailsButton}.
           *
           * Controls the visibility of the Details button. If set to `true`, the datapoint tooltip will be disabled
           * as the information of selected datapoints will be found in the details popover. This will also set the
           * drill-down button to invisible.
           *
           * Default value is `false`.
           */
          getShowDetailsButton(): boolean;
          /**
           * @SINCE 1.54
           *
           * Gets current value of property {@link #getShowDimensionsTitle showDimensionsTitle}.
           *
           * Controls the visibility of the title in the dimension area of the chart.
           *
           * Default value is `true`.
           */
          getShowDimensionsTitle(): boolean;
          /**
           * @SINCE 1.39
           *
           * Gets current value of property {@link #getShowDownloadButton showDownloadButton}.
           *
           * Controls the visibility of the chart download button.
           *
           * Default value is `false`.
           */
          getShowDownloadButton(): boolean;
          /**
           * @SINCE 1.38
           *
           * Gets current value of property {@link #getShowDrillBreadcrumbs showDrillBreadcrumbs}.
           *
           * Controls the visibility of the Breadcrumbs control for drilling up within the visible dimensions. If
           * set to `true`, the toolbar header will be replaced by the Breadcrumbs control. This will also set the
           * drill-up button to invisible.
           *
           * Default value is `false`.
           */
          getShowDrillBreadcrumbs(): boolean;
          /**
           * Gets current value of property {@link #getShowDrillButtons showDrillButtons}.
           *
           * Controls the visibility of the Drill Up and Drill Down buttons.
           *
           * Default value is `true`.
           */
          getShowDrillButtons(): boolean;
          /**
           * @SINCE 1.36
           *
           * Gets current value of property {@link #getShowFullScreenButton showFullScreenButton}.
           *
           * Controls the visibility of the FullScreen button.
           *
           * Default value is `true`.
           */
          getShowFullScreenButton(): boolean;
          /**
           * @SINCE 1.36
           *
           * Gets current value of property {@link #getShowLegendButton showLegendButton}.
           *
           * Controls the visibility of the Navigation button
           *
           * Default value is `true`.
           */
          getShowLegendButton(): boolean;
          /**
           * @SINCE 1.54
           *
           * Gets current value of property {@link #getShowMeasuresTitle showMeasuresTitle}.
           *
           * Controls the visibility of the title in the measure area of the chart.
           *
           * Default value is `true`.
           */
          getShowMeasuresTitle(): boolean;
          /**
           * @SINCE 1.36
           *
           * Gets current value of property {@link #getShowSemanticNavigationButton showSemanticNavigationButton}.
           *
           * Controls the visibility of the Navigation button
           *
           * Default value is `true`.
           */
          getShowSemanticNavigationButton(): boolean;
          /**
           * @SINCE 1.54
           *
           * Gets current value of property {@link #getShowToolbar showToolbar}.
           *
           * Controls the visibility of the toolbar.
           *
           * Default value is `true`.
           */
          getShowToolbar(): boolean;
          /**
           * @SINCE 1.38
           *
           * Gets current value of property {@link #getShowVariantManagement showVariantManagement}.
           *
           * Controls the visibility of the Variant Management.
           *
           * Default value is `true`.
           */
          getShowVariantManagement(): boolean;
          /**
           * @SINCE 1.36
           *
           * Gets current value of property {@link #getShowZoomButtons showZoomButtons}.
           *
           * Controls the visibility of the Zoom In and Zoom Out buttons.
           *
           * Default value is `true`.
           */
          getShowZoomButtons(): boolean;
          /**
           * Gets current value of property {@link #getSmartFilterId smartFilterId}.
           *
           * ID of the corresponding SmartFilter control. If specified, the SmartChart control searches for the SmartFilter
           * control (also in the closest parent view) and attaches to the relevant events of the SmartFilter control
           * to fetch data, show overlay etc.
           */
          getSmartFilterId(): string;
          /**
           * @SINCE 1.38
           *
           * ID of the element which is the current target of the association {@link #getSmartVariant smartVariant},
           * or `null`.
           */
          getSmartVariant(): sap.ui.core.ID;
          /**
           * Gets content of aggregation {@link #getToolbar toolbar}.
           *
           * A custom toolbar that can be specified by the user to define their own buttons, icons, etc. If this is
           * added, the SmartChart control does not create its own toolbar, but uses this one instead. However, if
           * default actions, such as showSemanticNavigation, showFullScreenButton etc. are set, these actions are
           * added at the left-hand side of the toolbar.
           */
          getToolbar(): sap.m.Toolbar;
          /**
           * @SINCE 1.54
           *
           * Gets current value of property {@link #getToolbarStyle toolbarStyle}.
           *
           * Defines the visual style of the smart charts `Toolbar`. **Note:** The visual styles are theme-dependent.
           */
          getToolbarStyle(): sap.m.ToolbarStyle;
          /**
           * The method returns the current UI state of SmartChart control.
           */
          getUiState(): sap.ui.comp.state.UIState;
          /**
           * Gets current value of property {@link #getUseChartPersonalisation useChartPersonalisation}.
           *
           * If set to `true`, personalized chart settings are defined. If you want to persist the chart personalization,
           * you need to specify the persistencyKey property.
           *
           * Default value is `true`.
           */
          getUseChartPersonalisation(): boolean;
          /**
           * @SINCE 1.38
           * @deprecated (since 1.48.0) - Setting the property to `false` will have no effect on the visualization
           * of chart type selection. `SmartChart` will always show a list of chart types.
           *
           * Gets current value of property {@link #getUseListForChartTypeSelection useListForChartTypeSelection}.
           *
           * Controls the visualization for chart type selection. If set to `true`, the list of available chart types
           * will be displayed. If set to `false` and there are three or fewer available chart types, the chart types
           * will be displayed as separate buttons in the toolbar. If there are more than three chart types, a list
           * will be shown.
           *
           * Default value is `true`.
           */
          getUseListForChartTypeSelection(): boolean;
          /**
           * @SINCE 1.36
           *
           * Gets current value of property {@link #getUseTooltip useTooltip}.
           *
           * Specifies weather an instance of {@link sap.viz.ui5.controls.VizTooltip} or {@link sap.viz.ui5.controls.Popover}
           * is used. If set to `true`, a tooltip will be displayed, a popover otherwise.
           *
           * Default value is `true`.
           */
          getUseTooltip(): boolean;
          /**
           * Gets current value of property {@link #getUseVariantManagement useVariantManagement}.
           *
           * If set to `true`, variants are used. As a prerequisite, you need to specify the persistencyKey property.
           *
           * Default value is `true`.
           */
          getUseVariantManagement(): boolean;
          /**
           * @EXPERIMENTAL (since 1.48)
           *
           * Checks for the provided `sap.ui.core.Item` in the aggregation {@link #getSelectionDetailsActions selectionDetailsActions}.
           * and returns its index if found or -1 otherwise.
           */
          indexOfSelectionDetailsAction(
            /**
             * The selectionDetailsAction whose index is looked for
             */
            oSelectionDetailsAction: sap.ui.core.Item
          ): number;
          /**
           * @EXPERIMENTAL (since 1.48)
           *
           * Checks for the provided `sap.ui.core.Item` in the aggregation {@link #getSelectionDetailsActionGroups
           * selectionDetailsActionGroups}. and returns its index if found or -1 otherwise.
           */
          indexOfSelectionDetailsActionGroup(
            /**
             * The selectionDetailsActionGroup whose index is looked for
             */
            oSelectionDetailsActionGroup: sap.ui.core.Item
          ): number;
          /**
           * @EXPERIMENTAL (since 1.48)
           *
           * Checks for the provided `sap.ui.core.Item` in the aggregation {@link #getSelectionDetailsItemActions
           * selectionDetailsItemActions}. and returns its index if found or -1 otherwise.
           */
          indexOfSelectionDetailsItemAction(
            /**
             * The selectionDetailsItemAction whose index is looked for
             */
            oSelectionDetailsItemAction: sap.ui.core.Item
          ): number;
          /**
           * @EXPERIMENTAL (since 1.48)
           *
           * Inserts a selectionDetailsAction into the aggregation {@link #getSelectionDetailsActions selectionDetailsActions}.
           */
          insertSelectionDetailsAction(
            /**
             * The selectionDetailsAction to insert; if empty, nothing is inserted
             */
            oSelectionDetailsAction: sap.ui.core.Item,
            /**
             * The `0`-based index the selectionDetailsAction should be inserted at; for a negative value of `iIndex`,
             * the selectionDetailsAction is inserted at position 0; for a value greater than the current size of the
             * aggregation, the selectionDetailsAction is inserted at the last position
             */
            iIndex: number
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * @EXPERIMENTAL (since 1.48)
           *
           * Inserts a selectionDetailsActionGroup into the aggregation {@link #getSelectionDetailsActionGroups selectionDetailsActionGroups}.
           */
          insertSelectionDetailsActionGroup(
            /**
             * The selectionDetailsActionGroup to insert; if empty, nothing is inserted
             */
            oSelectionDetailsActionGroup: sap.ui.core.Item,
            /**
             * The `0`-based index the selectionDetailsActionGroup should be inserted at; for a negative value of `iIndex`,
             * the selectionDetailsActionGroup is inserted at position 0; for a value greater than the current size
             * of the aggregation, the selectionDetailsActionGroup is inserted at the last position
             */
            iIndex: number
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * @EXPERIMENTAL (since 1.48)
           *
           * Inserts a selectionDetailsItemAction into the aggregation {@link #getSelectionDetailsItemActions selectionDetailsItemActions}.
           */
          insertSelectionDetailsItemAction(
            /**
             * The selectionDetailsItemAction to insert; if empty, nothing is inserted
             */
            oSelectionDetailsItemAction: sap.ui.core.Item,
            /**
             * The `0`-based index the selectionDetailsItemAction should be inserted at; for a negative value of `iIndex`,
             * the selectionDetailsItemAction is inserted at position 0; for a value greater than the current size of
             * the aggregation, the selectionDetailsItemAction is inserted at the last position
             */
            iIndex: number
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * Checks whether the control is initialized.
           */
          isInitialised(): boolean;
          /**
           * This can be used to trigger binding on the chart used in the SmartChart
           */
          rebindChart(): void;
          /**
           * @EXPERIMENTAL (since 1.48)
           *
           * Removes all the controls from the aggregation {@link #getSelectionDetailsActionGroups selectionDetailsActionGroups}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllSelectionDetailsActionGroups(): sap.ui.core.Item[];
          /**
           * @EXPERIMENTAL (since 1.48)
           *
           * Removes all the controls from the aggregation {@link #getSelectionDetailsActions selectionDetailsActions}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllSelectionDetailsActions(): sap.ui.core.Item[];
          /**
           * @EXPERIMENTAL (since 1.48)
           *
           * Removes all the controls from the aggregation {@link #getSelectionDetailsItemActions selectionDetailsItemActions}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllSelectionDetailsItemActions(): sap.ui.core.Item[];
          /**
           * @EXPERIMENTAL (since 1.48)
           *
           * Removes a selectionDetailsAction from the aggregation {@link #getSelectionDetailsActions selectionDetailsActions}.
           */
          removeSelectionDetailsAction(
            /**
             * The selectionDetailsAction to remove or its index or id
             */
            vSelectionDetailsAction: number | string | sap.ui.core.Item
          ): sap.ui.core.Item;
          /**
           * @EXPERIMENTAL (since 1.48)
           *
           * Removes a selectionDetailsActionGroup from the aggregation {@link #getSelectionDetailsActionGroups selectionDetailsActionGroups}.
           */
          removeSelectionDetailsActionGroup(
            /**
             * The selectionDetailsActionGroup to remove or its index or id
             */
            vSelectionDetailsActionGroup: number | string | sap.ui.core.Item
          ): sap.ui.core.Item;
          /**
           * @EXPERIMENTAL (since 1.48)
           *
           * Removes a selectionDetailsItemAction from the aggregation {@link #getSelectionDetailsItemActions selectionDetailsItemActions}.
           */
          removeSelectionDetailsItemAction(
            /**
             * The selectionDetailsItemAction to remove or its index or id
             */
            vSelectionDetailsItemAction: number | string | sap.ui.core.Item
          ): sap.ui.core.Item;
          /**
           * Sets a new value for property {@link #getChartBindingPath chartBindingPath}.
           *
           * Specifies the path that is used during the binding of the chart. If not specified, the entitySet property
           * is used instead. (used only if binding is established internally/automatically - See enableAutoBinding)
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setChartBindingPath(
            /**
             * New value for property `chartBindingPath`
             */
            sChartBindingPath: string
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * Sets a new value for property {@link #getChartType chartType}.
           *
           * Specifies the type of chart to be created by the SmartChart control.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setChartType(
            /**
             * New value for property `chartType`
             */
            sChartType: string
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * Applies the current variant based on the sVariantId parameter. If an empty string or null or undefined
           * have been passed, the standard variant will be used. The standard variant will also be used if the passed
           * sVariantId cannot be found. If the flexibility variant, the content for the standard variant, or the
           * personalizable control cannot be obtained, no changes will be made.
           */
          setCurrentVariantId(
            /**
             * ID of the currently selected variant
             */
            sVariantId: string
          ): void;
          /**
           * Sets a new value for property {@link #getEnableAutoBinding enableAutoBinding}.
           *
           * If set to `true`, this enables automatic binding of the chart using the chartBindingPath (if it exists)
           * or entitySet property. This happens right after the `initialise` event has been fired.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setEnableAutoBinding(
            /**
             * New value for property `enableAutoBinding`
             */
            bEnableAutoBinding: boolean
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * The entity set name in the OData metadata against which the chart must be bound.
           */
          setEntitySet(
            /**
             * The entity set
             */
            sEntitySetName: string
          ): void;
          /**
           * Sets a new value for property {@link #getHeader header}.
           *
           * Specifies header text that is shown in the chart.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setHeader(
            /**
             * New value for property `header`
             */
            sHeader: string
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * Sets a new value for property {@link #getIgnoredChartTypes ignoredChartTypes}.
           *
           * CSV of fields that is not shown in the list of available chart types.
           *  **Note:** No validation is done. Please ensure that you do not add spaces or special characters.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setIgnoredChartTypes(
            /**
             * New value for property `ignoredChartTypes`
             */
            sIgnoredChartTypes: string
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * Sets a new value for property {@link #getIgnoredFields ignoredFields}.
           *
           * CSV of fields that must be ignored in the OData metadata by the SmartChart control.
           *  **Note:** No validation is done. Please ensure that you do not add spaces or special characters.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setIgnoredFields(
            /**
             * New value for property `ignoredFields`
             */
            sIgnoredFields: string
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * Sets a new value for property {@link #getIgnoreFromPersonalisation ignoreFromPersonalisation}.
           *
           * CSV of fields that is not shown in the personalization dialog.
           *  **Note:** No validation is done. Please ensure that you do not add spaces or special characters.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setIgnoreFromPersonalisation(
            /**
             * New value for property `ignoreFromPersonalisation`
             */
            sIgnoreFromPersonalisation: string
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * @SINCE 1.46
           *
           * Sets a new value for property {@link #getNoData noData}.
           *
           * Defines the custom text that will be displayed in case no data is found for the current binding.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setNoData(
            /**
             * New value for property `noData`
             */
            sNoData: string
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * Sets a new value for property {@link #getPersistencyKey persistencyKey}.
           *
           * Key used to access personalization data.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setPersistencyKey(
            /**
             * New value for property `persistencyKey`
             */
            sPersistencyKey: string
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * Sets a new value for property {@link #getRequestAtLeastFields requestAtLeastFields}.
           *
           * CSV of fields that must be always requested by the backend system.
           *  This property is mainly meant to be used if there is no PresentationVariant annotation.
           *  If both this property and the PresentationVariant annotation exist, the select request sent to the backend
           * would be a combination of both.
           *  **Note:** No validation is done. Please ensure that you do not add spaces or special characters. Also,
           * setting this property during runtime, will delete the current drill-stack and lead to a loss of the drill
           * history.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setRequestAtLeastFields(
            /**
             * New value for property `requestAtLeastFields`
             */
            sRequestAtLeastFields: string
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * @SINCE 1.36
           *
           * Sets the aggregated {@link #getSemanticObjectController semanticObjectController}.
           */
          setSemanticObjectController(
            /**
             * The semanticObjectController to set
             */
            oSemanticObjectController: sap.ui.comp.navpopover.SemanticObjectController
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * @SINCE 1.38
           *
           * Sets a new value for property {@link #getShowChartTooltip showChartTooltip}.
           *
           * Controls the visibility of the chart tooltip. If set to `true `, an instance of sap.viz.ui5.controls.VizTooltip
           * will be created and shown when hovering over a data point.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setShowChartTooltip(
            /**
             * New value for property `showChartTooltip`
             */
            bShowChartTooltip: boolean
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * @SINCE 1.48
           *
           * Sets a new value for property {@link #getShowChartTypeSelectionButton showChartTypeSelectionButton}.
           *
           * Controls the visibility of the chart type selection button.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setShowChartTypeSelectionButton(
            /**
             * New value for property `showChartTypeSelectionButton`
             */
            bShowChartTypeSelectionButton: boolean
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * @SINCE 1.38
           *
           * Sets a new value for property {@link #getShowDetailsButton showDetailsButton}.
           *
           * Controls the visibility of the Details button. If set to `true`, the datapoint tooltip will be disabled
           * as the information of selected datapoints will be found in the details popover. This will also set the
           * drill-down button to invisible.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setShowDetailsButton(
            /**
             * New value for property `showDetailsButton`
             */
            bShowDetailsButton: boolean
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * @SINCE 1.39
           *
           * Sets a new value for property {@link #getShowDownloadButton showDownloadButton}.
           *
           * Controls the visibility of the chart download button.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setShowDownloadButton(
            /**
             * New value for property `showDownloadButton`
             */
            bShowDownloadButton: boolean
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * @SINCE 1.38
           *
           * Sets a new value for property {@link #getShowDrillBreadcrumbs showDrillBreadcrumbs}.
           *
           * Controls the visibility of the Breadcrumbs control for drilling up within the visible dimensions. If
           * set to `true`, the toolbar header will be replaced by the Breadcrumbs control. This will also set the
           * drill-up button to invisible.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setShowDrillBreadcrumbs(
            /**
             * New value for property `showDrillBreadcrumbs`
             */
            bShowDrillBreadcrumbs: boolean
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * @SINCE 1.54
           *
           * Change the visibility of the toolbar
           */
          setShowToolbar(
            /**
             * If set to `true` the toolbar is shown, if set to `false` it is not visible
             */
            bShowToolbar: boolean
          ): void;
          /**
           * @SINCE 1.38
           *
           * Sets a new value for property {@link #getShowVariantManagement showVariantManagement}.
           *
           * Controls the visibility of the Variant Management.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setShowVariantManagement(
            /**
             * New value for property `showVariantManagement`
             */
            bShowVariantManagement: boolean
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * Sets a new value for property {@link #getSmartFilterId smartFilterId}.
           *
           * ID of the corresponding SmartFilter control. If specified, the SmartChart control searches for the SmartFilter
           * control (also in the closest parent view) and attaches to the relevant events of the SmartFilter control
           * to fetch data, show overlay etc.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setSmartFilterId(
            /**
             * New value for property `smartFilterId`
             */
            sSmartFilterId: string
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * @SINCE 1.38
           *
           * Sets the associated {@link #getSmartVariant smartVariant}.
           */
          setSmartVariant(
            /**
             * ID of an element which becomes the new target of this smartVariant association; alternatively, an element
             * instance may be given
             */
            oSmartVariant: sap.ui.core.ID | sap.ui.core.Control
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * Sets the aggregated {@link #getToolbar toolbar}.
           */
          setToolbar(
            /**
             * The toolbar to set
             */
            oToolbar: sap.m.Toolbar
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * @SINCE 1.54
           *
           * Change the style of the toolbar
           */
          setToolbarStyle(
            /**
             * The style of the toolbar.
             */
            sStyle: sap.m.ToolbarStyle
          ): void;
          /**
           * The method replaces the current UI state of SmartChart control with the data represented in `uiState`.
           */
          setUiState(
            /**
             * the new representation of UI state
             */
            oUiState: sap.ui.comp.state.UIState
          ): void;
          /**
           * Sets a new value for property {@link #getUseChartPersonalisation useChartPersonalisation}.
           *
           * If set to `true`, personalized chart settings are defined. If you want to persist the chart personalization,
           * you need to specify the persistencyKey property.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setUseChartPersonalisation(
            /**
             * New value for property `useChartPersonalisation`
             */
            bUseChartPersonalisation: boolean
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * @SINCE 1.38
           * @deprecated (since 1.48.0) - Setting the property to `false` will have no effect on the visualization
           * of chart type selection. `SmartChart` will always show a list of chart types.
           *
           * Sets a new value for property {@link #getUseListForChartTypeSelection useListForChartTypeSelection}.
           *
           * Controls the visualization for chart type selection. If set to `true`, the list of available chart types
           * will be displayed. If set to `false` and there are three or fewer available chart types, the chart types
           * will be displayed as separate buttons in the toolbar. If there are more than three chart types, a list
           * will be shown.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setUseListForChartTypeSelection(
            /**
             * New value for property `useListForChartTypeSelection`
             */
            bUseListForChartTypeSelection: boolean
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * @SINCE 1.36
           *
           * Sets a new value for property {@link #getUseTooltip useTooltip}.
           *
           * Specifies weather an instance of {@link sap.viz.ui5.controls.VizTooltip} or {@link sap.viz.ui5.controls.Popover}
           * is used. If set to `true`, a tooltip will be displayed, a popover otherwise.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setUseTooltip(
            /**
             * New value for property `useTooltip`
             */
            bUseTooltip: boolean
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * Sets a new value for property {@link #getUseVariantManagement useVariantManagement}.
           *
           * If set to `true`, variants are used. As a prerequisite, you need to specify the persistencyKey property.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setUseVariantManagement(
            /**
             * New value for property `useVariantManagement`
             */
            bUseVariantManagement: boolean
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:afterVariantApply afterVariantApply} event of
           * this `sap.ui.comp.smartchart.SmartChart`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartchart.SmartChart` itself.
           *
           * This event is fired after a variant has been applied.
           */
          attachAfterVariantApply(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartchart.SmartChart` itself
             */
            oListener?: object
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:afterVariantInitialise afterVariantInitialise}
           * event of this `sap.ui.comp.smartchart.SmartChart`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartchart.SmartChart` itself.
           *
           * This event is fired after the variant management in the SmartChart control has been initialized.
           */
          attachAfterVariantInitialise(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartchart.SmartChart` itself
             */
            oListener?: object
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:afterVariantSave afterVariantSave} event of
           * this `sap.ui.comp.smartchart.SmartChart`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartchart.SmartChart` itself.
           *
           * This event is fired after a variant has been saved. This event can be used to retrieve the ID of the
           * saved variant.
           */
          attachAfterVariantSave(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartchart.SmartChart` itself
             */
            oListener?: object
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:beforeRebindChart beforeRebindChart} event of
           * this `sap.ui.comp.smartchart.SmartChart`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartchart.SmartChart` itself.
           *
           * This event is fired right before the `SmartChart` control triggers the binding / rebinding of the inner
           * chart.
           *  **Note:** In certain cases the inner chart triggers a rebinding by itself. In these cases, the event
           * is not fired.
           */
          attachBeforeRebindChart(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartchart.SmartChart` itself
             */
            oListener?: object
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:chartDataChanged chartDataChanged} event of
           * this `sap.ui.comp.smartchart.SmartChart`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartchart.SmartChart` itself.
           *
           * This event is fired when `SmartChart` control data changes, due to changes in the personalization dialog
           * or drill operations.
           *  The data can be changed via sorters, filters or drill-ups/drill-downs.
           */
          attachChartDataChanged(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartchart.SmartChart` itself
             */
            oListener?: object
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * @deprecated (since 1.56) - Use `beforeRebindChart` event to attach/listen to the binding "events" directly
           *
           * Attaches event handler `fnFunction` to the {@link #event:dataReceived dataReceived} event of this `sap.ui.comp.smartchart.SmartChart`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartchart.SmartChart` itself.
           *
           * This event is fired when data is received after binding. This event is fired if the binding for the chart
           * is done by the SmartChart control itself.
           */
          attachDataReceived(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartchart.SmartChart` itself
             */
            oListener?: object
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * @SINCE 1.46
           *
           * Attaches event handler `fnFunction` to the {@link #event:fullScreenToggled fullScreenToggled} event of
           * this `sap.ui.comp.smartchart.SmartChart`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartchart.SmartChart` itself.
           *
           * This event is fired right after the full screen mode of the SmartChart control has been changed.
           */
          attachFullScreenToggled(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartchart.SmartChart` itself
             */
            oListener?: object
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:initialized initialized} event of this `sap.ui.comp.smartchart.SmartChart`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartchart.SmartChart` itself.
           *
           * New event, async successor of initialise
           */
          attachInitialized(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartchart.SmartChart` itself
             */
            oListener?: object
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * @SINCE 1.48
           * @EXPERIMENTAL (since 1.48)
           *
           * Attaches event handler `fnFunction` to the {@link #event:selectionDetailsActionPress selectionDetailsActionPress}
           * event of this `sap.ui.comp.smartchart.SmartChart`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartchart.SmartChart` itself.
           *
           * This event is fired when any action in the selection details popover is pressed.
           */
          attachSelectionDetailsActionPress(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartchart.SmartChart` itself
             */
            oListener?: object
          ): sap.ui.comp.smartchart.SmartChart;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:showOverlay showOverlay} event of this `sap.ui.comp.smartchart.SmartChart`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartchart.SmartChart` itself.
           *
           * This event is fired right before the overlay is shown.
           */
          attachShowOverlay(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartchart.SmartChart` itself
             */
            oListener?: object
          ): sap.ui.comp.smartchart.SmartChart;
        }
        /**
         * Enumeration for supported selection mode in SmartChart
         */
        enum SelectionMode {
          /**
           * Multi selection mode, multiple sets of data points can be selected at once.
           */
          Multi,
          /**
           * None selection mode, no data points can be selected.
           */
          None,
          /**
           * Single selection mode, only one set of data points can be selected at once.
           */
          Single
        }
      }

      namespace smartfield {
        interface ConfigurationOpts extends sap.ui.core.ElementOpts {
          /**
           * By default the SmartField chooses the controls it hosts by interpreting OData metadata. This property
           * allows to overwrite the default behavior to some extent. For example makes it possible to define that
           * an OData property of type Edm.Boolean is displayed as a combo box.
           */
          controlType?: sap.ui.comp.smartfield.ControlType;

          /**
           * The property specifies how value help, that is available for input fields, is presented. For example,
           * it specifies whether the descriptions of the values shown in the result after a query are displayed.
           */
          displayBehaviour?: sap.ui.comp.smartfield.DisplayBehaviour;

          /**
           * If there are value help annotations for a smart field, it is possible to specify whether the table in
           * the value help dialog for this field will be filled initially. The default value is `true`, which means
           * the table will not be filled as the data fetch is prevented.
           */
          preventInitialDataFetchInValueHelpDialog?: boolean;
        }

        interface ControlProposalOpts extends sap.ui.core.ElementOpts {
          /**
           * By default the SmartField chooses the controls it hosts by interpreting OData meta data. This property
           * allows to overwrite the default behavior to some extent; for example this property allows to define that
           * an OData property of type Edm.Boolean is displayed as combo box.
           */
          controlType?: sap.ui.comp.smartfield.ControlProposalType;

          /**
           * @SINCE 1.34.0
           *
           * Optional definition to further qualify how an object status control should be rendered.
           */
          objectStatus?: sap.ui.comp.smartfield.ObjectStatus;
        }

        interface ObjectStatusOpts extends sap.ui.core.ElementOpts {
          /**
           * Optional attribute to determine the rendered state. Possible values are the numeric representations of
           * the enum members of annotation `com.sap.vocabularies.UI.v1.CriticalityType`: 0: None 1: Error 2: Warning
           * 3: Success
           */
          criticality?: any;

          /**
           * Optional attribute, which can be set to control how the criticality is visualized.
           */
          criticalityRepresentationType?: sap.ui.comp.smartfield.CriticalityRepresentationType;
        }

        interface SmartFieldOpts extends sap.ui.core.ControlOpts {
          /**
           * The value property keeps the current value of the control. If a binding expression is configured, this
           * is used to determine the property of an OData entity.
           */
          value?: any;

          /**
           * Indicates whether the user can interact with the control or not. **Note:** Disabled controls cannot be
           * focused and they are out of the tab order.
           */
          enabled?: boolean;

          /**
           * The name of an entity set for which the control manages values. This is an optional property.
           */
          entitySet?: string;

          /**
           * Sets the control into an editable mode or a display mode.
           */
          editable?: boolean;

          /**
           * @SINCE 1.32.0
           *
           * Notifies the control whether controls using the `SmartField` control are editable.
           */
          contextEditable?: boolean;

          /**
           * Defines the width of the control.
           */
          width?: sap.ui.core.CSSSize;

          /**
           * Horizontal alignment of the text.
           */
          textAlign?: sap.ui.core.TextAlign;

          /**
           * Text shown when no value available.
           */
          placeholder?: string;

          /**
           * To be used in the HTML code (for example, for HTML forms that send data to the server via 'submit').
           */
          name?: string;

          /**
           * Visualizes the validation state of the control, e.g. `Error`, `Warning`, `Success`.
           */
          valueState?: sap.ui.core.ValueState;

          /**
           * The text which is shown in the value state message popup.
           */
          valueStateText?: string;

          /**
           * Defines whether the value state message is shown or not.
           */
          showValueStateMessage?: boolean;

          /**
           * @deprecated (since 1.31.0)
           *
           * Data types to be used, if the `SmartField` control is interacting with a JSON model. If the value property
           * of the control is bound to a property of an OData entity set, this property is not taken into consideration.
           */
          jsontype?: sap.ui.comp.smartfield.JSONType;

          /**
           * If set to `true`, a user input is required.
           */
          mandatory?: boolean;

          /**
           * Defines the highest possible number of permitted input characters that the user can enter into the text
           * input field.
           *
           * Computed `maxLength`: If the specified `maxLength` value is greater than the `maxLength` value specified
           * for the underlying bound Entity Data Model (EDM) property in the service metadata document, the `maxLength`
           * value of the EDM property takes precedence. Likewise, if the application code provides a binding data
           * type for the `value` property of the `SmartField` control and the binding data type has `maxLength` constraints
           * defined, this `maxLength` is also taken into consideration to compute the final `maxLength` value.
           *
           * Validation Behavior: By design, the `SmartField` control does not restrict/validate the highest number
           * of permitted input characters for every keystroke, but only when the text input field has changed, and
           * the browser focus leaves the text input field or the ENTER key is pressed. The `SmartField` control is
           * used more generically in broader contexts, and adding a `maxLength` attribute to the HTML text input
           * control may break data type formatting in two-way data-binding scenarios. Let's say the `maxLength` property
           * is set to 3, but the text input control has a formatter function attached to it to format the entered
           * value "DE" to "Germany (DE)". In this case, the formatted value will be truncated by the `maxLength`
           * setting.
           */
          maxLength?: number;

          /**
           * If set to `true`, the suggestion feature for a hosted control is enabled, if the hosted control supports
           * it.
           */
          showSuggestion?: boolean;

          /**
           * If set to `true`, a value help indicator will be displayed inside the hosted control, if the hosted control
           * supports this.
           */
          showValueHelp?: boolean;

          /**
           * If set to `false` the label is not displayed.
           */
          showLabel?: boolean;

          /**
           * This property contains the text of an associated `SmartLabel`.
           */
          textLabel?: string;

          /**
           * This property contains the tool tip of the associated `SmartLabel` control.
           */
          tooltipLabel?: string;

          /**
           * Visible state of the unit, if the `SmartField` control addresses unit of measure use cases, for example,
           * an amount and its associated currency.
           */
          uomVisible?: boolean;

          /**
           * Editable state of the unit, if the `SmartField` control addresses unit of measure use cases, for example,
           * an amount and its associated currency.
           */
          uomEditable?: boolean;

          /**
           * Enabled state of the unit, if the `SmartField` control addresses unit of measure use cases, for example,
           * an amount and its associated currency.
           */
          uomEnabled?: boolean;

          /**
           * Contains a URL which is used to render a link. The link is rendered, if the OData property, to which
           * the value property of the control is bound, is of type `Edm.String` and the `SmartField` is in display
           * mode.
           */
          url?: string;

          /**
           * @SINCE 1.32.0
           *
           * This property is for internal use only.
           */
          uomEditState?: number;

          /**
           * @SINCE 1.32.0
           *
           * Defines the context in which the layout of the `SmartField` control has to be interpreted.
           */
          controlContext?: sap.ui.comp.smartfield.ControlContextType;

          /**
           * @SINCE 1.32.0
           * @deprecated (since 1.32.0)
           *
           * Proposes a control to be rendered. The `SmartField` control can ignore the proposal.
           */
          proposedControl?: sap.ui.comp.smartfield.ControlProposalType;

          /**
           * @SINCE 1.36.6
           *
           * Indicates whether the control break lines (in display mode) to prevent overflow.
           */
          wrapping?: boolean;

          /**
           * @SINCE 1.38.3
           *
           * Determines if the mandatory check happens on the client side `true` or on the server side `false`.
           *
           * **Note:** If the {@link sap.ui.comp.smartfield.SmartField#value} property of the `SmartField` control
           * is bound to an Entity Data Model (EDM) property annotated as `Nullable="false"`, the mandatory validation
           * is performed on the client side regardless of the `clientSideMandatoryCheck` setting.
           *
           * Example:
           *
           *
           * ```javascript
           *
           *     <Property Name="CategoryID" Type="Edm.String" Nullable="false"/>
           * ```
           */
          clientSideMandatoryCheck?: boolean;

          /**
           * @SINCE 1.42.0
           *
           * Indicates whether the value list collection is fetched in display mode from the resource path specified
           * in the `com.sap.vocabularies.Common.v1.ValueList` annotation.
           *
           * This collection data is used to infer a descriptive text for the value of the `SmartField` control. However,
           * fetching the value list collection for every `SmartField` instance individually may not be ideal in some
           * performance-critical scenarios. To optimize this default behavior, you can set this property to `false`
           * and provide the `com.sap.vocabularies.Common.v1.Text` annotation, which is used to specify the URL path
           * name to the Entity Data Model (EDM) property from which the descriptive text for the value of the `SmartField`
           * control is fetched, for example, LT (Laptop).
           *
           * **Note:** Setting this property to `false` only has an effect if the `value` property of the `SmartField`
           * control is bound to an Entity Data Model (EDM) property typed as `Edm.String`. In addition, applications
           * or frameworks have to make sure the descriptive text is fetched, for example, by expanding a navigation
           * property.
           */
          fetchValueListReadOnly?: boolean;

          /**
           * @SINCE 1.48
           * @EXPERIMENTAL (since 1.48)
           *
           * Indicates if entities related to navigation properties inside the metadata are requested. If set to `true`,
           * then these related entities are loaded with an `$expand` request.
           *
           * Annotations that can have navigation properties are the following:
           * 	 `com.sap.vocabularies.Common.v1.Text` for text arrangements  `Org.OData.Measures.V1.Unit` and `Org.OData.Measures.V1.ISOCurrency`
           * for units  `com.sap.vocabularies.Common.v1.FieldControl` for field control
           *
           * **Note:** Independent of the `fetchValueListReadOnly` value, setting this flag to `true` requests data
           * from the backend.
           *
           * **Note:** The back-end request to expand the navigation properties is sent only if the entity to which
           * `SmartField` is bound is persisted. For transient entities, there is no back-end request since no such
           * data is available.
           */
          expandNavigationProperties?: boolean;

          /**
           * @SINCE 1.54
           * @EXPERIMENTAL (since 1.54)
           *
           * Sets the source from which text descriptions for `IDs` are fetched in edit mode, for example, for LT
           * (Laptop).
           *
           * **Note**: The `sap.ui.comp.smartfield.TextInEditModeSource.NavigationProperty` and `sap.ui.comp.smartfield.TextInEditModeSource.ValueList`
           * enumeration members are only supported if the following applies:
           *
           *
           * 	 - The `value` property of the `SmartField` control instance is bound to an Entity Data Model (EDM)
           * 			property typed as `Edm.String` or `Edm.Guid`.
           * 	 - The `com.sap.vocabularies.UI.v1.TextArrangement` annotation for the bound EDM property or entity
           * 			type is specified in the (service metadata document/annotation file).
           * 	 - The binding mode for the `value` property of the `SmartField` control is the two-way binding mode.
           *
           * 	 - The field from which the description is fetch is filterable.
           *
           * **Note**: In addition, the `sap.ui.comp.smartfield.TextInEditModeSource.NavigationProperty` enumeration
           * member is only supported if the following applies:
           *
           *
           * 	 - The navigation EDM property association is defined in the service metadata document.
           * 	 - The `com.sap.vocabularies.Common.v1.Text` annotation for the bound EDM property is specified in the
           * 			service metadata document or annotation file whose `Path` attribute points to a navigation EDM property
           * 			of a lookup entity set/type whose single key property is the `ID`, which contains (among other properties)
           * 			the descriptive value.
           * 	 - The navigation EDM property association defines a referential constraint that ties values of the
           * 			dependent editable entity type/set to the lookup entity type/set in the service metadata document.
           * 	 - The navigation EDM property association end multiplicity of the lookup entity type/set is defined
           * 			as `1` in the service metadata document. There must be a single-valued navigation from the editable entity
           * 			set/type to the lookup entity set/type.
           * 	 - The lookup entity type/set from which the descriptive value is fetched contains a single key property.
           */
          textInEditModeSource?: sap.ui.comp.smartfield.TextInEditModeSource;

          /**
           * The OData entity set is either derived from the control's binding context or from control's entity set
           * property, if a value for it is specified. In both cases this event is fired.
           */
          entitySetFound?: Function;

          /**
           * The event is fired after the text in the field has been changed and the focus leaves the field, or after
           * the Enter key has been pressed.
           */
          change?: Function;

          /**
           * The event is fired after the smart field has calculated its metadata.
           */
          initialise?: Function;

          /**
           * The event is fired after the visibility of the control has changed.
           */
          visibleChanged?: Function;

          /**
           * @SINCE 1.30.0
           *
           * The event is fired after the value of editable property of the control has changed.
           */
          editableChanged?: Function;

          /**
           * @SINCE 1.32.0
           *
           * The event is fired after the context editable property of the control has changed.
           */
          contextEditableChanged?: Function;

          /**
           * The event is fired after the inner controls have been created. The created controls can be obtained via
           * oControl.getInnerControls().
           */
          innerControlsCreated?: Function;

          /**
           * @SINCE 1.31.0
           *
           * The event is fired when after selection of values with value help or auto-suggest, the model is updated
           * with the selected data.
           */
          valueListChanged?: Function;

          /**
           * @SINCE 1.36.0
           *
           * Fires when the user triggers the link control or taps/clicks on an active title of the object identifier
           * control.
           */
          press?: Function;

          /**
           * Optional configuration for `SmartField`.
           */
          configuration?: sap.ui.comp.smartfield.Configuration;

          /**
           * @SINCE 1.32.0
           * @deprecated (since 1.34.0)
           *
           * Proposes a control to be rendered. The `SmartField` control can ignore the proposal.
           */
          controlProposal?: sap.ui.comp.smartfield.ControlProposal;

          /**
           * The Semantic Object Controller allows the user to specify and overwrite functionality for semantic object
           * navigation.
           */
          semanticObjectController?: sap.ui.comp.navpopover.SemanticObjectController;

          /**
           * @SINCE 1.34.2
           *
           * Association to controls / IDs which label this control (see WAI-ARIA attribute `aria-labelledby`).
           */
          ariaLabelledBy?: sap.ui.core.Control[] | string[];
        }
        /**
         * The configuration allows to further define the behavior of a `SmartField`.
         */
        class Configuration extends sap.ui.core.Element {
          /**
           * Constructor for a new `Smartfield`/`Configuration`.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: ConfigurationOpts
          );

          /**
           * Creates a new subclass of class sap.ui.comp.smartfield.Configuration with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets current value of property {@link #getControlType controlType}.
           *
           * By default the SmartField chooses the controls it hosts by interpreting OData metadata. This property
           * allows to overwrite the default behavior to some extent. For example makes it possible to define that
           * an OData property of type Edm.Boolean is displayed as a combo box.
           */
          getControlType(): sap.ui.comp.smartfield.ControlType;
          /**
           * Gets current value of property {@link #getDisplayBehaviour displayBehaviour}.
           *
           * The property specifies how value help, that is available for input fields, is presented. For example,
           * it specifies whether the descriptions of the values shown in the result after a query are displayed.
           */
          getDisplayBehaviour(): sap.ui.comp.smartfield.DisplayBehaviour;
          /**
           * Returns a metadata object for class sap.ui.comp.smartfield.Configuration.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getPreventInitialDataFetchInValueHelpDialog preventInitialDataFetchInValueHelpDialog}.
           *
           * If there are value help annotations for a smart field, it is possible to specify whether the table in
           * the value help dialog for this field will be filled initially. The default value is `true`, which means
           * the table will not be filled as the data fetch is prevented.
           *
           * Default value is `true`.
           */
          getPreventInitialDataFetchInValueHelpDialog(): boolean;
          /**
           * Sets a new value for property {@link #getControlType controlType}.
           *
           * By default the SmartField chooses the controls it hosts by interpreting OData metadata. This property
           * allows to overwrite the default behavior to some extent. For example makes it possible to define that
           * an OData property of type Edm.Boolean is displayed as a combo box.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setControlType(
            /**
             * New value for property `controlType`
             */
            sControlType: sap.ui.comp.smartfield.ControlType
          ): sap.ui.comp.smartfield.Configuration;
          /**
           * Sets a new value for property {@link #getDisplayBehaviour displayBehaviour}.
           *
           * The property specifies how value help, that is available for input fields, is presented. For example,
           * it specifies whether the descriptions of the values shown in the result after a query are displayed.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setDisplayBehaviour(
            /**
             * New value for property `displayBehaviour`
             */
            sDisplayBehaviour: sap.ui.comp.smartfield.DisplayBehaviour
          ): sap.ui.comp.smartfield.Configuration;
          /**
           * Sets a new value for property {@link #getPreventInitialDataFetchInValueHelpDialog preventInitialDataFetchInValueHelpDialog}.
           *
           * If there are value help annotations for a smart field, it is possible to specify whether the table in
           * the value help dialog for this field will be filled initially. The default value is `true`, which means
           * the table will not be filled as the data fetch is prevented.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setPreventInitialDataFetchInValueHelpDialog(
            /**
             * New value for property `preventInitialDataFetchInValueHelpDialog`
             */
            bPreventInitialDataFetchInValueHelpDialog: boolean
          ): sap.ui.comp.smartfield.Configuration;
        }
        /**
         * Proposes a control to be rendered. The smart field may ignore the proposal.
         */
        class ControlProposal extends sap.ui.core.Element {
          /**
           * Constructor for a new `smartfield/ControlProposal`.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: ControlProposalOpts
          );

          /**
           * @SINCE 1.34.0
           *
           * Destroys the objectStatus in the aggregation {@link #getObjectStatus objectStatus}.
           */
          destroyObjectStatus(): sap.ui.comp.smartfield.ControlProposal;
          /**
           * Creates a new subclass of class sap.ui.comp.smartfield.ControlProposal with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets current value of property {@link #getControlType controlType}.
           *
           * By default the SmartField chooses the controls it hosts by interpreting OData meta data. This property
           * allows to overwrite the default behavior to some extent; for example this property allows to define that
           * an OData property of type Edm.Boolean is displayed as combo box.
           *
           * Default value is `None`.
           */
          getControlType(): sap.ui.comp.smartfield.ControlProposalType;
          /**
           * Returns a metadata object for class sap.ui.comp.smartfield.ControlProposal.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * @SINCE 1.34.0
           *
           * Gets content of aggregation {@link #getObjectStatus objectStatus}.
           *
           * Optional definition to further qualify how an object status control should be rendered.
           */
          getObjectStatus(): sap.ui.comp.smartfield.ObjectStatus;
          /**
           * Sets a new value for property {@link #getControlType controlType}.
           *
           * By default the SmartField chooses the controls it hosts by interpreting OData meta data. This property
           * allows to overwrite the default behavior to some extent; for example this property allows to define that
           * an OData property of type Edm.Boolean is displayed as combo box.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `None`.
           */
          setControlType(
            /**
             * New value for property `controlType`
             */
            sControlType: sap.ui.comp.smartfield.ControlProposalType
          ): sap.ui.comp.smartfield.ControlProposal;
          /**
           * @SINCE 1.34.0
           *
           * Sets the aggregated {@link #getObjectStatus objectStatus}.
           */
          setObjectStatus(
            /**
             * The objectStatus to set
             */
            oObjectStatus: sap.ui.comp.smartfield.ObjectStatus
          ): sap.ui.comp.smartfield.ControlProposal;
        }
        /**
         * Defines a possible object status control to be rendered. The smart field may ignore the proposal.
         */
        class ObjectStatus extends sap.ui.core.Element {
          /**
           * Constructor for a new `SmartField/ObjectStatus`.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: ObjectStatusOpts
          );

          /**
           * Creates a new subclass of class sap.ui.comp.smartfield.ObjectStatus with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets current value of property {@link #getCriticality criticality}.
           *
           * Optional attribute to determine the rendered state. Possible values are the numeric representations of
           * the enum members of annotation `com.sap.vocabularies.UI.v1.CriticalityType`: 0: None 1: Error 2: Warning
           * 3: Success
           */
          getCriticality(): any;
          /**
           * Gets current value of property {@link #getCriticalityRepresentationType criticalityRepresentationType}.
           *
           * Optional attribute, which can be set to control how the criticality is visualized.
           *
           * Default value is `WithIcon`.
           */
          getCriticalityRepresentationType(): sap.ui.comp.smartfield.CriticalityRepresentationType;
          /**
           * Returns a metadata object for class sap.ui.comp.smartfield.ObjectStatus.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Sets a new value for property {@link #getCriticality criticality}.
           *
           * Optional attribute to determine the rendered state. Possible values are the numeric representations of
           * the enum members of annotation `com.sap.vocabularies.UI.v1.CriticalityType`: 0: None 1: Error 2: Warning
           * 3: Success
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setCriticality(
            /**
             * New value for property `criticality`
             */
            oCriticality: any
          ): sap.ui.comp.smartfield.ObjectStatus;
          /**
           * Sets a new value for property {@link #getCriticalityRepresentationType criticalityRepresentationType}.
           *
           * Optional attribute, which can be set to control how the criticality is visualized.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `WithIcon`.
           */
          setCriticalityRepresentationType(
            /**
             * New value for property `criticalityRepresentationType`
             */
            sCriticalityRepresentationType: sap.ui.comp.smartfield.CriticalityRepresentationType
          ): sap.ui.comp.smartfield.ObjectStatus;
        }
        /**
         * The `SmartField` control interprets metadata that represents entity relationship models, data types,
         * service capabilities, and annotations in OData services to automatically generate the underlying inner
         * controls and reduce the amount of code needed for developing applications. In some cases, the OData entity
         * is derived from the control's binding context. The OData entity's property that is changed or displayed
         * with the control is derived from the control's `value` property.
         *
         * **Note:** For interoperability and accessibility reasons, the `SmartField` control must be labeled by
         * the `sap.ui.comp.smartfield.SmartLabel` control instead of the `sap.m.Label` control, as the `sap.m.Label`
         * control does not know of the inner structure of a `SmartField` control. If the `SmartField` control is
         * rendered inside a smart container control, for example, the `SmartForm` control, the `SmartLabel` control
         * is automatically generated to reduce the amount of code needed on the application side. However, in other
         * scenarios when `SmartField` is used stand-alone or outside a smart container control, for example, a
         * `SimpleForm` control, the `SmartLabel` control is not automatically generated in these cases. Although
         * the `sap.ui.comp.smartfield.SmartLabel` is a private/internal control, the following basic use is allowed
         * by applications for labeling the `SmartField` control.
         *
         * XML Example of a `SmartField` control labeled by a `SmartLabel` control
         *
         *
         * ```javascript
         *
         * <sap.ui.comp.smartfield.SmartLabel labelFor="IDProduct"/>
         * <sap.ui.comp.smartfield.SmartField id="IDProduct" value="{ProductId}"/>
         * ```
         *
         *
         * **Note**: By default, the `com.sap.vocabularies.UI.v1.TextArrangement` annotation and the value of the
         * `displayBehaviour` property of the aggregation named `configuration` are not evaluated in edit mode.
         * To enable these features, set the `textInEditModeSource` control property to a non-default value.
         */
        class SmartField extends sap.ui.core.Control {
          /**
           * Constructor for a new `sap.ui.comp.smartfield.SmartField`.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           * See:
           * 	{@link topic:4864403f08c64ca08a2b0ee1fa9cb5e2 Smart Field}
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: SmartFieldOpts
          );

          /**
           * @SINCE 1.34.2
           *
           * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
           */
          addAriaLabelledBy(
            /**
             * The ariaLabelledBy to add; if empty, nothing is inserted
             */
            vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.comp.smartfield.SmartField`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartfield.SmartField` itself.
           *
           * The event is fired after the text in the field has been changed and the focus leaves the field, or after
           * the Enter key has been pressed.
           */
          attachChange(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartfield.SmartField` itself
             */
            oListener?: object
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * @SINCE 1.32.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:contextEditableChanged contextEditableChanged}
           * event of this `sap.ui.comp.smartfield.SmartField`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartfield.SmartField` itself.
           *
           * The event is fired after the context editable property of the control has changed.
           */
          attachContextEditableChanged(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartfield.SmartField` itself
             */
            oListener?: object
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * @SINCE 1.30.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:editableChanged editableChanged} event of this
           * `sap.ui.comp.smartfield.SmartField`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartfield.SmartField` itself.
           *
           * The event is fired after the value of editable property of the control has changed.
           */
          attachEditableChanged(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartfield.SmartField` itself
             */
            oListener?: object
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:entitySetFound entitySetFound} event of this
           * `sap.ui.comp.smartfield.SmartField`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartfield.SmartField` itself.
           *
           * The OData entity set is either derived from the control's binding context or from control's entity set
           * property, if a value for it is specified. In both cases this event is fired.
           */
          attachEntitySetFound(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartfield.SmartField` itself
             */
            oListener?: object
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:initialise initialise} event of this `sap.ui.comp.smartfield.SmartField`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartfield.SmartField` itself.
           *
           * The event is fired after the smart field has calculated its metadata.
           */
          attachInitialise(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartfield.SmartField` itself
             */
            oListener?: object
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:innerControlsCreated innerControlsCreated} event
           * of this `sap.ui.comp.smartfield.SmartField`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartfield.SmartField` itself.
           *
           * The event is fired after the inner controls have been created. The created controls can be obtained via
           * oControl.getInnerControls().
           */
          attachInnerControlsCreated(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartfield.SmartField` itself
             */
            oListener?: object
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * @SINCE 1.36.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.ui.comp.smartfield.SmartField`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartfield.SmartField` itself.
           *
           * Fires when the user triggers the link control or taps/clicks on an active title of the object identifier
           * control.
           */
          attachPress(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartfield.SmartField` itself
             */
            oListener?: object
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * @SINCE 1.31.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:valueListChanged valueListChanged} event of
           * this `sap.ui.comp.smartfield.SmartField`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartfield.SmartField` itself.
           *
           * The event is fired when after selection of values with value help or auto-suggest, the model is updated
           * with the selected data.
           */
          attachValueListChanged(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartfield.SmartField` itself
             */
            oListener?: object
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:visibleChanged visibleChanged} event of this
           * `sap.ui.comp.smartfield.SmartField`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartfield.SmartField` itself.
           *
           * The event is fired after the visibility of the control has changed.
           */
          attachVisibleChanged(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartfield.SmartField` itself
             */
            oListener?: object
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * @deprecated (since 1.64) - replaced by {@link sap.ui.comp.smartfield.SmartField#checkValuesValidity}
           *
           * Checks whether a client error has been detected. Additionally the error message is shown, if this is
           * not the case already.
           */
          checkClientError(): boolean;
          /**
           * @SINCE 1.64
           *
           * Checks whether the value of every inner text input field in edit mode is valid.
           *
           * This method is typically used to check whether the value of every inner text input field in edit mode
           * is subject to data type constraints and whether the constraints are fulfilled.
           *
           * **Note:** In some scenarios, invoking this method may also trigger a back-end request to check whether
           * the value is valid.
           *
           * A data type constraint for a bound Entity Data Model (EDM) property can be violated in many ways, for
           * example:
           *
           *
           * 	 - The `Nullable` constraint for an EDM property typed as `Edm.String` is violated.
           * 	 - A user input is invalid for the bound EDM property typed as `Edm.DateTime`.
           *
           * If this happens, the following applies:
           *
           *
           * 	 - A validation error state is set on the text input field.
           * 	 - A validation error message is set on the text input field.
           * 	 - The validation error message (possibly generated by a user input) is added to a `sap.ui.core.message.MessageManager`
           * 			object instance if, for example, a view object instance is registered to it.
           * 	 - The inner private text input field fires a {@link sap.ui.base.EventProvider#event:validationError},
           * 			or {@link sap.ui.base.EventProvider#event:parseError} event. Note that the events are fired synchronously
           * 			if the value is validated on client side or asynchronously if, for example, the value is validated on
           * 			back-end side.
           *
           * The inner private text input field fires a {@link sap.ui.base.EventProvider#event:validationSuccess}
           * if its validation passes.
           *
           * **Note:** In display mode, this method always returns a fulfilled `Promise` object.
           *
           * **Note:** In two-way data binding scenarios, it is usually not necessary to invoke this method explicitly
           * to validate user input, as the data type validation is done automatically when the value in the input
           * field has changed and the focus leaves the text input field or the enter key is pressed. However, in
           * two-way data binding scenarios, this method may be used to check whether a value is valid before submitting
           * it to the back-end system.
           */
          checkValuesValidity(): any;
          /**
           * Destroys the configuration in the aggregation {@link #getConfiguration configuration}.
           */
          destroyConfiguration(): sap.ui.comp.smartfield.SmartField;
          /**
           * @SINCE 1.32.0
           * @deprecated (since 1.34.0)
           *
           * Destroys the controlProposal in the aggregation {@link #getControlProposal controlProposal}.
           */
          destroyControlProposal(): sap.ui.comp.smartfield.SmartField;
          /**
           * Destroys the semanticObjectController in the aggregation {@link #getSemanticObjectController semanticObjectController}.
           */
          destroySemanticObjectController(): sap.ui.comp.smartfield.SmartField;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.ui.comp.smartfield.SmartField`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachChange(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * @SINCE 1.32.0
           *
           * Detaches event handler `fnFunction` from the {@link #event:contextEditableChanged contextEditableChanged}
           * event of this `sap.ui.comp.smartfield.SmartField`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachContextEditableChanged(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * @SINCE 1.30.0
           *
           * Detaches event handler `fnFunction` from the {@link #event:editableChanged editableChanged} event of
           * this `sap.ui.comp.smartfield.SmartField`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachEditableChanged(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:entitySetFound entitySetFound} event of this
           * `sap.ui.comp.smartfield.SmartField`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachEntitySetFound(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:initialise initialise} event of this `sap.ui.comp.smartfield.SmartField`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachInitialise(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:innerControlsCreated innerControlsCreated}
           * event of this `sap.ui.comp.smartfield.SmartField`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachInnerControlsCreated(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * @SINCE 1.36.0
           *
           * Detaches event handler `fnFunction` from the {@link #event:press press} event of this `sap.ui.comp.smartfield.SmartField`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachPress(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * @SINCE 1.31.0
           *
           * Detaches event handler `fnFunction` from the {@link #event:valueListChanged valueListChanged} event of
           * this `sap.ui.comp.smartfield.SmartField`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachValueListChanged(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:visibleChanged visibleChanged} event of this
           * `sap.ui.comp.smartfield.SmartField`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachVisibleChanged(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * Creates a new subclass of class sap.ui.comp.smartfield.SmartField with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:change change} to attached listeners.
           */
          fireChange(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * The current value inside the text field
               */
              value?: string;
              /**
               * The new value inside the text field
               */
              newValue?: string;
            }
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * @SINCE 1.32.0
           *
           * Fires event {@link #event:contextEditableChanged contextEditableChanged} to attached listeners.
           */
          fireContextEditableChanged(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * The value of the context editable property of the control
               */
              editable?: boolean;
            }
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * @SINCE 1.30.0
           *
           * Fires event {@link #event:editableChanged editableChanged} to attached listeners.
           */
          fireEditableChanged(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * If `true`, the control is in edit mode
               */
              editable?: boolean;
            }
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * Fires event {@link #event:entitySetFound entitySetFound} to attached listeners.
           */
          fireEntitySetFound(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * The path to the found entity set
               */
              entitySet?: string;
            }
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * Fires event {@link #event:initialise initialise} to attached listeners.
           */
          fireInitialise(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * Fires event {@link #event:innerControlsCreated innerControlsCreated} to attached listeners.
           */
          fireInnerControlsCreated(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * @SINCE 1.36.0
           *
           * Fires event {@link #event:press press} to attached listeners.
           */
          firePress(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * @SINCE 1.31.0
           *
           * Fires event {@link #event:valueListChanged valueListChanged} to attached listeners.
           */
          fireValueListChanged(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * An array of selected values
               */
              changes?: sap.ui.core.Control[];
            }
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * Fires event {@link #event:visibleChanged visibleChanged} to attached listeners.
           */
          fireVisibleChanged(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * If `true`, the control is visible
               */
              visible?: boolean;
            }
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * @SINCE 1.34.2
           *
           * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
           * ariaLabelledBy}.
           */
          getAriaLabelledBy(): sap.ui.core.ID[];
          /**
           * @SINCE 1.38.3
           *
           * Gets current value of property {@link #getClientSideMandatoryCheck clientSideMandatoryCheck}.
           *
           * Determines if the mandatory check happens on the client side `true` or on the server side `false`.
           *
           * **Note:** If the {@link sap.ui.comp.smartfield.SmartField#value} property of the `SmartField` control
           * is bound to an Entity Data Model (EDM) property annotated as `Nullable="false"`, the mandatory validation
           * is performed on the client side regardless of the `clientSideMandatoryCheck` setting.
           *
           * Example:
           *
           *
           * ```javascript
           *
           *     <Property Name="CategoryID" Type="Edm.String" Nullable="false"/>
           * ```
           *
           *
           * Default value is `true`.
           */
          getClientSideMandatoryCheck(): boolean;
          /**
           * Gets content of aggregation {@link #getConfiguration configuration}.
           *
           * Optional configuration for `SmartField`.
           */
          getConfiguration(): sap.ui.comp.smartfield.Configuration;
          /**
           * @SINCE 1.32.0
           *
           * Gets current value of property {@link #getContextEditable contextEditable}.
           *
           * Notifies the control whether controls using the `SmartField` control are editable.
           *
           * Default value is `true`.
           */
          getContextEditable(): boolean;
          /**
           * @SINCE 1.32.0
           *
           * Gets current value of property {@link #getControlContext controlContext}.
           *
           * Defines the context in which the layout of the `SmartField` control has to be interpreted.
           *
           * Default value is `None`.
           */
          getControlContext(): sap.ui.comp.smartfield.ControlContextType;
          /**
           * @SINCE 1.32.0
           * @deprecated (since 1.34.0)
           *
           * Gets content of aggregation {@link #getControlProposal controlProposal}.
           *
           * Proposes a control to be rendered. The `SmartField` control can ignore the proposal.
           */
          getControlProposal(): sap.ui.comp.smartfield.ControlProposal;
          /**
           * Returns the OData property to which the `value` property of the control is bound.
           */
          getDataProperty(): object;
          /**
           * Returns the EDM data type of the OData property to which the value property of the control is bound.
           * If no model or no OData property is available `null` is returned.
           */
          getDataType(): string;
          /**
           * Gets current value of property {@link #getEditable editable}.
           *
           * Sets the control into an editable mode or a display mode.
           *
           * Default value is `true`.
           */
          getEditable(): boolean;
          /**
           * Gets current value of property {@link #getEnabled enabled}.
           *
           * Indicates whether the user can interact with the control or not. **Note:** Disabled controls cannot be
           * focused and they are out of the tab order.
           *
           * Default value is `true`.
           */
          getEnabled(): boolean;
          /**
           * Gets current value of property {@link #getEntitySet entitySet}.
           *
           * The name of an entity set for which the control manages values. This is an optional property.
           *
           * Default value is `empty string`.
           */
          getEntitySet(): string;
          /**
           * @SINCE 1.48
           * @EXPERIMENTAL (since 1.48)
           *
           * Gets current value of property {@link #getExpandNavigationProperties expandNavigationProperties}.
           *
           * Indicates if entities related to navigation properties inside the metadata are requested. If set to `true`,
           * then these related entities are loaded with an `$expand` request.
           *
           * Annotations that can have navigation properties are the following:
           * 	 `com.sap.vocabularies.Common.v1.Text` for text arrangements  `Org.OData.Measures.V1.Unit` and `Org.OData.Measures.V1.ISOCurrency`
           * for units  `com.sap.vocabularies.Common.v1.FieldControl` for field control
           *
           * **Note:** Independent of the `fetchValueListReadOnly` value, setting this flag to `true` requests data
           * from the backend.
           *
           * **Note:** The back-end request to expand the navigation properties is sent only if the entity to which
           * `SmartField` is bound is persisted. For transient entities, there is no back-end request since no such
           * data is available.
           *
           * Default value is `false`.
           */
          getExpandNavigationProperties(): boolean;
          /**
           * @SINCE 1.42.0
           *
           * Gets current value of property {@link #getFetchValueListReadOnly fetchValueListReadOnly}.
           *
           * Indicates whether the value list collection is fetched in display mode from the resource path specified
           * in the `com.sap.vocabularies.Common.v1.ValueList` annotation.
           *
           * This collection data is used to infer a descriptive text for the value of the `SmartField` control. However,
           * fetching the value list collection for every `SmartField` instance individually may not be ideal in some
           * performance-critical scenarios. To optimize this default behavior, you can set this property to `false`
           * and provide the `com.sap.vocabularies.Common.v1.Text` annotation, which is used to specify the URL path
           * name to the Entity Data Model (EDM) property from which the descriptive text for the value of the `SmartField`
           * control is fetched, for example, LT (Laptop).
           *
           * **Note:** Setting this property to `false` only has an effect if the `value` property of the `SmartField`
           * control is bound to an Entity Data Model (EDM) property typed as `Edm.String`. In addition, applications
           * or frameworks have to make sure the descriptive text is fetched, for example, by expanding a navigation
           * property.
           *
           * Default value is `true`.
           */
          getFetchValueListReadOnly(): boolean;
          /**
           * Returns the DOM element that gets the focus.
           */
          // @ts-ignore
          getFocusDomRef(): sap.ui.core.Element;
          /**
           * Gets the ID of the control to which the label should point.
           */
          // @ts-ignore
          getIdForLabel(): string;
          /**
           * Resolves the controls hosted currently by this `SmartField` control.
           */
          getInnerControls(): any[];
          /**
           * @deprecated (since 1.31.0)
           *
           * Gets current value of property {@link #getJsontype jsontype}.
           *
           * Data types to be used, if the `SmartField` control is interacting with a JSON model. If the value property
           * of the control is bound to a property of an OData entity set, this property is not taken into consideration.
           */
          getJsontype(): sap.ui.comp.smartfield.JSONType;
          /**
           * Gets current value of property {@link #getMandatory mandatory}.
           *
           * If set to `true`, a user input is required.
           *
           * Default value is `false`.
           */
          getMandatory(): boolean;
          /**
           * Gets current value of property {@link #getMaxLength maxLength}.
           *
           * Defines the highest possible number of permitted input characters that the user can enter into the text
           * input field.
           *
           * Computed `maxLength`: If the specified `maxLength` value is greater than the `maxLength` value specified
           * for the underlying bound Entity Data Model (EDM) property in the service metadata document, the `maxLength`
           * value of the EDM property takes precedence. Likewise, if the application code provides a binding data
           * type for the `value` property of the `SmartField` control and the binding data type has `maxLength` constraints
           * defined, this `maxLength` is also taken into consideration to compute the final `maxLength` value.
           *
           * Validation Behavior: By design, the `SmartField` control does not restrict/validate the highest number
           * of permitted input characters for every keystroke, but only when the text input field has changed, and
           * the browser focus leaves the text input field or the ENTER key is pressed. The `SmartField` control is
           * used more generically in broader contexts, and adding a `maxLength` attribute to the HTML text input
           * control may break data type formatting in two-way data-binding scenarios. Let's say the `maxLength` property
           * is set to 3, but the text input control has a formatter function attached to it to format the entered
           * value "DE" to "Germany (DE)". In this case, the formatted value will be truncated by the `maxLength`
           * setting.
           *
           * Default value is `0`.
           */
          getMaxLength(): number;
          /**
           * Returns a metadata object for class sap.ui.comp.smartfield.SmartField.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Returns the current SmartField's edit mode
           */
          getMode(): string;
          /**
           * Gets current value of property {@link #getName name}.
           *
           * To be used in the HTML code (for example, for HTML forms that send data to the server via 'submit').
           *
           * Default value is `empty string`.
           */
          getName(): string;
          /**
           * Gets current value of property {@link #getPlaceholder placeholder}.
           *
           * Text shown when no value available.
           *
           * Default value is `empty string`.
           */
          getPlaceholder(): string;
          /**
           * @SINCE 1.32.0
           * @deprecated (since 1.32.0)
           *
           * Gets current value of property {@link #getProposedControl proposedControl}.
           *
           * Proposes a control to be rendered. The `SmartField` control can ignore the proposal.
           *
           * Default value is `None`.
           */
          getProposedControl(): sap.ui.comp.smartfield.ControlProposalType;
          /**
           * @SINCE 1.48.0
           *
           * Gets the value of the `mandatory` property.
           *
           * This function is needed as the "mandatory" feature is named "required" in a lot of other controls (like
           * `Label` or `Form`).
           */
          getRequired(): boolean;
          /**
           * Gets content of aggregation {@link #getSemanticObjectController semanticObjectController}.
           *
           * The Semantic Object Controller allows the user to specify and overwrite functionality for semantic object
           * navigation.
           */
          getSemanticObjectController(): sap.ui.comp.navpopover.SemanticObjectController;
          /**
           * Gets current value of property {@link #getShowLabel showLabel}.
           *
           * If set to `false` the label is not displayed.
           *
           * Default value is `true`.
           */
          getShowLabel(): boolean;
          /**
           * Gets current value of property {@link #getShowSuggestion showSuggestion}.
           *
           * If set to `true`, the suggestion feature for a hosted control is enabled, if the hosted control supports
           * it.
           *
           * Default value is `true`.
           */
          getShowSuggestion(): boolean;
          /**
           * Gets current value of property {@link #getShowValueHelp showValueHelp}.
           *
           * If set to `true`, a value help indicator will be displayed inside the hosted control, if the hosted control
           * supports this.
           *
           * Default value is `true`.
           */
          getShowValueHelp(): boolean;
          /**
           * Gets current value of property {@link #getShowValueStateMessage showValueStateMessage}.
           *
           * Defines whether the value state message is shown or not.
           *
           * Default value is `true`.
           */
          getShowValueStateMessage(): boolean;
          /**
           * Calculates the paths to the annotations used by the `SmartField` control.
           */
          static getSupportedAnnotationPaths(
            /**
             * The given OData meta model
             */
            oMetaModel: sap.ui.model.odata.ODataMetaModel,
            /**
             * The given entity set
             */
            oEntitySet: object,
            /**
             * The path identifying the OData property to which the value property of the `SmartField` control is bound
             */
            sValueBinding: string,
            /**
             * If set to `true`, no properties are returned
             */
            bNavigationPathsOnly: boolean
          ): any[];
          /**
           * Gets current value of property {@link #getTextAlign textAlign}.
           *
           * Horizontal alignment of the text.
           *
           * Default value is `Initial`.
           */
          getTextAlign(): sap.ui.core.TextAlign;
          /**
           * @SINCE 1.54
           * @EXPERIMENTAL (since 1.54)
           *
           * Gets current value of property {@link #getTextInEditModeSource textInEditModeSource}.
           *
           * Sets the source from which text descriptions for `IDs` are fetched in edit mode, for example, for LT
           * (Laptop).
           *
           * **Note**: The `sap.ui.comp.smartfield.TextInEditModeSource.NavigationProperty` and `sap.ui.comp.smartfield.TextInEditModeSource.ValueList`
           * enumeration members are only supported if the following applies:
           *
           *
           * 	 - The `value` property of the `SmartField` control instance is bound to an Entity Data Model (EDM)
           * 			property typed as `Edm.String` or `Edm.Guid`.
           * 	 - The `com.sap.vocabularies.UI.v1.TextArrangement` annotation for the bound EDM property or entity
           * 			type is specified in the (service metadata document/annotation file).
           * 	 - The binding mode for the `value` property of the `SmartField` control is the two-way binding mode.
           *
           * 	 - The field from which the description is fetch is filterable.
           *
           * **Note**: In addition, the `sap.ui.comp.smartfield.TextInEditModeSource.NavigationProperty` enumeration
           * member is only supported if the following applies:
           *
           *
           * 	 - The navigation EDM property association is defined in the service metadata document.
           * 	 - The `com.sap.vocabularies.Common.v1.Text` annotation for the bound EDM property is specified in the
           * 			service metadata document or annotation file whose `Path` attribute points to a navigation EDM property
           * 			of a lookup entity set/type whose single key property is the `ID`, which contains (among other properties)
           * 			the descriptive value.
           * 	 - The navigation EDM property association defines a referential constraint that ties values of the
           * 			dependent editable entity type/set to the lookup entity type/set in the service metadata document.
           * 	 - The navigation EDM property association end multiplicity of the lookup entity type/set is defined
           * 			as `1` in the service metadata document. There must be a single-valued navigation from the editable entity
           * 			set/type to the lookup entity set/type.
           * 	 - The lookup entity type/set from which the descriptive value is fetched contains a single key property.
           *
           *
           * Default value is `None`.
           */
          getTextInEditModeSource(): sap.ui.comp.smartfield.TextInEditModeSource;
          /**
           * Gets current value of property {@link #getTextLabel textLabel}.
           *
           * This property contains the text of an associated `SmartLabel`.
           *
           * Default value is `empty string`.
           */
          getTextLabel(): string;
          /**
           * Gets current value of property {@link #getTooltipLabel tooltipLabel}.
           *
           * This property contains the tool tip of the associated `SmartLabel` control.
           *
           * Default value is `empty string`.
           */
          getTooltipLabel(): string;
          /**
           * If the OData property to which the control's value property is bound semantically represents a unit of
           * measure, the value of the current unit of measure is returned. Otherwise `null` is returned.
           */
          getUnitOfMeasure(): any;
          /**
           * Gets current value of property {@link #getUomEditable uomEditable}.
           *
           * Editable state of the unit, if the `SmartField` control addresses unit of measure use cases, for example,
           * an amount and its associated currency.
           *
           * Default value is `true`.
           */
          getUomEditable(): boolean;
          /**
           * @SINCE 1.32.0
           *
           * Gets current value of property {@link #getUomEditState uomEditState}.
           *
           * This property is for internal use only.
           *
           * Default value is `-1`.
           */
          getUomEditState(): number;
          /**
           * Gets current value of property {@link #getUomEnabled uomEnabled}.
           *
           * Enabled state of the unit, if the `SmartField` control addresses unit of measure use cases, for example,
           * an amount and its associated currency.
           *
           * Default value is `true`.
           */
          getUomEnabled(): boolean;
          /**
           * Gets current value of property {@link #getUomVisible uomVisible}.
           *
           * Visible state of the unit, if the `SmartField` control addresses unit of measure use cases, for example,
           * an amount and its associated currency.
           *
           * Default value is `true`.
           */
          getUomVisible(): boolean;
          /**
           * Gets current value of property {@link #getUrl url}.
           *
           * Contains a URL which is used to render a link. The link is rendered, if the OData property, to which
           * the value property of the control is bound, is of type `Edm.String` and the `SmartField` is in display
           * mode.
           *
           * Default value is `empty string`.
           */
          getUrl(): string;
          /**
           * Gets current value of property {@link #getValue value}.
           *
           * The value property keeps the current value of the control. If a binding expression is configured, this
           * is used to determine the property of an OData entity.
           */
          getValue(): any;
          /**
           * Gets current value of property {@link #getValueState valueState}.
           *
           * Visualizes the validation state of the control, e.g. `Error`, `Warning`, `Success`.
           *
           * Default value is `None`.
           */
          getValueState(): sap.ui.core.ValueState;
          /**
           * Gets current value of property {@link #getValueStateText valueStateText}.
           *
           * The text which is shown in the value state message popup.
           *
           * Default value is `empty string`.
           */
          getValueStateText(): string;
          /**
           * Gets current value of property {@link #getWidth width}.
           *
           * Defines the width of the control.
           *
           * Default value is `empty string`.
           */
          getWidth(): sap.ui.core.CSSSize;
          /**
           * @SINCE 1.36.6
           *
           * Gets current value of property {@link #getWrapping wrapping}.
           *
           * Indicates whether the control break lines (in display mode) to prevent overflow.
           *
           * Default value is `true`.
           */
          getWrapping(): boolean;
          /**
           * @SINCE 1.34.2
           *
           * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
           */
          removeAllAriaLabelledBy(): sap.ui.core.ID[];
          /**
           * @SINCE 1.34.2
           *
           * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
           */
          removeAriaLabelledBy(
            /**
             * The ariaLabelledBy to be removed or its index or ID
             */
            vAriaLabelledBy: number | sap.ui.core.ID | sap.ui.core.Control
          ): sap.ui.core.ID;
          /**
           * @SINCE 1.38.3
           *
           * Sets a new value for property {@link #getClientSideMandatoryCheck clientSideMandatoryCheck}.
           *
           * Determines if the mandatory check happens on the client side `true` or on the server side `false`.
           *
           * **Note:** If the {@link sap.ui.comp.smartfield.SmartField#value} property of the `SmartField` control
           * is bound to an Entity Data Model (EDM) property annotated as `Nullable="false"`, the mandatory validation
           * is performed on the client side regardless of the `clientSideMandatoryCheck` setting.
           *
           * Example:
           *
           *
           * ```javascript
           *
           *     <Property Name="CategoryID" Type="Edm.String" Nullable="false"/>
           * ```
           *
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setClientSideMandatoryCheck(
            /**
             * New value for property `clientSideMandatoryCheck`
             */
            bClientSideMandatoryCheck: boolean
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * Sets the aggregated {@link #getConfiguration configuration}.
           */
          setConfiguration(
            /**
             * The configuration to set
             */
            oConfiguration: sap.ui.comp.smartfield.Configuration
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * @SINCE 1.32.0
           *
           * Sets a new value for property {@link #getContextEditable contextEditable}.
           *
           * Notifies the control whether controls using the `SmartField` control are editable.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setContextEditable(
            /**
             * New value for property `contextEditable`
             */
            bContextEditable: boolean
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * @SINCE 1.32.0
           *
           * Sets a new value for property {@link #getControlContext controlContext}.
           *
           * Defines the context in which the layout of the `SmartField` control has to be interpreted.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `None`.
           */
          setControlContext(
            /**
             * New value for property `controlContext`
             */
            sControlContext: sap.ui.comp.smartfield.ControlContextType
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * @SINCE 1.32.0
           * @deprecated (since 1.34.0)
           *
           * Sets the aggregated {@link #getControlProposal controlProposal}.
           */
          setControlProposal(
            /**
             * The controlProposal to set
             */
            oControlProposal: sap.ui.comp.smartfield.ControlProposal
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * Sets a new value for property {@link #getEditable editable}.
           *
           * Sets the control into an editable mode or a display mode.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setEditable(
            /**
             * New value for property `editable`
             */
            bEditable: boolean
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * Sets a new value for property {@link #getEnabled enabled}.
           *
           * Indicates whether the user can interact with the control or not. **Note:** Disabled controls cannot be
           * focused and they are out of the tab order.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setEnabled(
            /**
             * New value for property `enabled`
             */
            bEnabled: boolean
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * Sets a new value for property {@link #getEntitySet entitySet}.
           *
           * The name of an entity set for which the control manages values. This is an optional property.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `empty string`.
           */
          setEntitySet(
            /**
             * New value for property `entitySet`
             */
            sEntitySet: string
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * @SINCE 1.48
           * @EXPERIMENTAL (since 1.48)
           *
           * Sets a new value for property {@link #getExpandNavigationProperties expandNavigationProperties}.
           *
           * Indicates if entities related to navigation properties inside the metadata are requested. If set to `true`,
           * then these related entities are loaded with an `$expand` request.
           *
           * Annotations that can have navigation properties are the following:
           * 	 `com.sap.vocabularies.Common.v1.Text` for text arrangements  `Org.OData.Measures.V1.Unit` and `Org.OData.Measures.V1.ISOCurrency`
           * for units  `com.sap.vocabularies.Common.v1.FieldControl` for field control
           *
           * **Note:** Independent of the `fetchValueListReadOnly` value, setting this flag to `true` requests data
           * from the backend.
           *
           * **Note:** The back-end request to expand the navigation properties is sent only if the entity to which
           * `SmartField` is bound is persisted. For transient entities, there is no back-end request since no such
           * data is available.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setExpandNavigationProperties(
            /**
             * New value for property `expandNavigationProperties`
             */
            bExpandNavigationProperties: boolean
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * @SINCE 1.42.0
           *
           * Sets a new value for property {@link #getFetchValueListReadOnly fetchValueListReadOnly}.
           *
           * Indicates whether the value list collection is fetched in display mode from the resource path specified
           * in the `com.sap.vocabularies.Common.v1.ValueList` annotation.
           *
           * This collection data is used to infer a descriptive text for the value of the `SmartField` control. However,
           * fetching the value list collection for every `SmartField` instance individually may not be ideal in some
           * performance-critical scenarios. To optimize this default behavior, you can set this property to `false`
           * and provide the `com.sap.vocabularies.Common.v1.Text` annotation, which is used to specify the URL path
           * name to the Entity Data Model (EDM) property from which the descriptive text for the value of the `SmartField`
           * control is fetched, for example, LT (Laptop).
           *
           * **Note:** Setting this property to `false` only has an effect if the `value` property of the `SmartField`
           * control is bound to an Entity Data Model (EDM) property typed as `Edm.String`. In addition, applications
           * or frameworks have to make sure the descriptive text is fetched, for example, by expanding a navigation
           * property.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setFetchValueListReadOnly(
            /**
             * New value for property `fetchValueListReadOnly`
             */
            bFetchValueListReadOnly: boolean
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * @deprecated (since 1.31.0)
           *
           * Sets a new value for property {@link #getJsontype jsontype}.
           *
           * Data types to be used, if the `SmartField` control is interacting with a JSON model. If the value property
           * of the control is bound to a property of an OData entity set, this property is not taken into consideration.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setJsontype(
            /**
             * New value for property `jsontype`
             */
            sJsontype: sap.ui.comp.smartfield.JSONType
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * Sets a new value for property {@link #getMandatory mandatory}.
           *
           * If set to `true`, a user input is required.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setMandatory(
            /**
             * New value for property `mandatory`
             */
            bMandatory: boolean
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * Sets a new value for property {@link #getMaxLength maxLength}.
           *
           * Defines the highest possible number of permitted input characters that the user can enter into the text
           * input field.
           *
           * Computed `maxLength`: If the specified `maxLength` value is greater than the `maxLength` value specified
           * for the underlying bound Entity Data Model (EDM) property in the service metadata document, the `maxLength`
           * value of the EDM property takes precedence. Likewise, if the application code provides a binding data
           * type for the `value` property of the `SmartField` control and the binding data type has `maxLength` constraints
           * defined, this `maxLength` is also taken into consideration to compute the final `maxLength` value.
           *
           * Validation Behavior: By design, the `SmartField` control does not restrict/validate the highest number
           * of permitted input characters for every keystroke, but only when the text input field has changed, and
           * the browser focus leaves the text input field or the ENTER key is pressed. The `SmartField` control is
           * used more generically in broader contexts, and adding a `maxLength` attribute to the HTML text input
           * control may break data type formatting in two-way data-binding scenarios. Let's say the `maxLength` property
           * is set to 3, but the text input control has a formatter function attached to it to format the entered
           * value "DE" to "Germany (DE)". In this case, the formatted value will be truncated by the `maxLength`
           * setting.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `0`.
           */
          setMaxLength(
            /**
             * New value for property `maxLength`
             */
            iMaxLength: number
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * Sets a new value for property {@link #getName name}.
           *
           * To be used in the HTML code (for example, for HTML forms that send data to the server via 'submit').
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `empty string`.
           */
          setName(
            /**
             * New value for property `name`
             */
            sName: string
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * Sets a new value for property {@link #getPlaceholder placeholder}.
           *
           * Text shown when no value available.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `empty string`.
           */
          setPlaceholder(
            /**
             * New value for property `placeholder`
             */
            sPlaceholder: string
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * @SINCE 1.32.0
           * @deprecated (since 1.32.0)
           *
           * Sets a new value for property {@link #getProposedControl proposedControl}.
           *
           * Proposes a control to be rendered. The `SmartField` control can ignore the proposal.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `None`.
           */
          setProposedControl(
            /**
             * New value for property `proposedControl`
             */
            sProposedControl: sap.ui.comp.smartfield.ControlProposalType
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * Sets the aggregated {@link #getSemanticObjectController semanticObjectController}.
           */
          setSemanticObjectController(
            /**
             * The semanticObjectController to set
             */
            oSemanticObjectController: sap.ui.comp.navpopover.SemanticObjectController
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * Sets a new value for property {@link #getShowLabel showLabel}.
           *
           * If set to `false` the label is not displayed.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setShowLabel(
            /**
             * New value for property `showLabel`
             */
            bShowLabel: boolean
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * Sets a new value for property {@link #getShowSuggestion showSuggestion}.
           *
           * If set to `true`, the suggestion feature for a hosted control is enabled, if the hosted control supports
           * it.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setShowSuggestion(
            /**
             * New value for property `showSuggestion`
             */
            bShowSuggestion: boolean
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * Sets a new value for property {@link #getShowValueHelp showValueHelp}.
           *
           * If set to `true`, a value help indicator will be displayed inside the hosted control, if the hosted control
           * supports this.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setShowValueHelp(
            /**
             * New value for property `showValueHelp`
             */
            bShowValueHelp: boolean
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * Sets a new value for property {@link #getShowValueStateMessage showValueStateMessage}.
           *
           * Defines whether the value state message is shown or not.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setShowValueStateMessage(
            /**
             * New value for property `showValueStateMessage`
             */
            bShowValueStateMessage: boolean
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * Sets a new value for property {@link #getTextAlign textAlign}.
           *
           * Horizontal alignment of the text.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `Initial`.
           */
          setTextAlign(
            /**
             * New value for property `textAlign`
             */
            sTextAlign: sap.ui.core.TextAlign
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * @SINCE 1.54
           * @EXPERIMENTAL (since 1.54)
           *
           * Sets a new value for property {@link #getTextInEditModeSource textInEditModeSource}.
           *
           * Sets the source from which text descriptions for `IDs` are fetched in edit mode, for example, for LT
           * (Laptop).
           *
           * **Note**: The `sap.ui.comp.smartfield.TextInEditModeSource.NavigationProperty` and `sap.ui.comp.smartfield.TextInEditModeSource.ValueList`
           * enumeration members are only supported if the following applies:
           *
           *
           * 	 - The `value` property of the `SmartField` control instance is bound to an Entity Data Model (EDM)
           * 			property typed as `Edm.String` or `Edm.Guid`.
           * 	 - The `com.sap.vocabularies.UI.v1.TextArrangement` annotation for the bound EDM property or entity
           * 			type is specified in the (service metadata document/annotation file).
           * 	 - The binding mode for the `value` property of the `SmartField` control is the two-way binding mode.
           *
           * 	 - The field from which the description is fetch is filterable.
           *
           * **Note**: In addition, the `sap.ui.comp.smartfield.TextInEditModeSource.NavigationProperty` enumeration
           * member is only supported if the following applies:
           *
           *
           * 	 - The navigation EDM property association is defined in the service metadata document.
           * 	 - The `com.sap.vocabularies.Common.v1.Text` annotation for the bound EDM property is specified in the
           * 			service metadata document or annotation file whose `Path` attribute points to a navigation EDM property
           * 			of a lookup entity set/type whose single key property is the `ID`, which contains (among other properties)
           * 			the descriptive value.
           * 	 - The navigation EDM property association defines a referential constraint that ties values of the
           * 			dependent editable entity type/set to the lookup entity type/set in the service metadata document.
           * 	 - The navigation EDM property association end multiplicity of the lookup entity type/set is defined
           * 			as `1` in the service metadata document. There must be a single-valued navigation from the editable entity
           * 			set/type to the lookup entity set/type.
           * 	 - The lookup entity type/set from which the descriptive value is fetched contains a single key property.
           *
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `None`.
           */
          setTextInEditModeSource(
            /**
             * New value for property `textInEditModeSource`
             */
            sTextInEditModeSource: sap.ui.comp.smartfield.TextInEditModeSource
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * Sets a new value for property {@link #getTextLabel textLabel}.
           *
           * This property contains the text of an associated `SmartLabel`.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `empty string`.
           */
          setTextLabel(
            /**
             * New value for property `textLabel`
             */
            sTextLabel: string
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * Sets a new value for property {@link #getTooltipLabel tooltipLabel}.
           *
           * This property contains the tool tip of the associated `SmartLabel` control.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `empty string`.
           */
          setTooltipLabel(
            /**
             * New value for property `tooltipLabel`
             */
            sTooltipLabel: string
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * If the OData property the control's value property is bound to semantically represents a unit of measure,
           * the value of the current unit of measure can be changed.
           */
          setUnitOfMeasure(
            /**
             * The new unit of measure to be set.
             */
            sUnit: string
          ): void;
          /**
           * Sets a new value for property {@link #getUomEditable uomEditable}.
           *
           * Editable state of the unit, if the `SmartField` control addresses unit of measure use cases, for example,
           * an amount and its associated currency.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setUomEditable(
            /**
             * New value for property `uomEditable`
             */
            bUomEditable: boolean
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * Sets a new value for property {@link #getUomEnabled uomEnabled}.
           *
           * Enabled state of the unit, if the `SmartField` control addresses unit of measure use cases, for example,
           * an amount and its associated currency.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setUomEnabled(
            /**
             * New value for property `uomEnabled`
             */
            bUomEnabled: boolean
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * Sets a new value for property {@link #getUomVisible uomVisible}.
           *
           * Visible state of the unit, if the `SmartField` control addresses unit of measure use cases, for example,
           * an amount and its associated currency.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setUomVisible(
            /**
             * New value for property `uomVisible`
             */
            bUomVisible: boolean
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * @SINCE 1.29
           *
           * Setter for property `url`. Default value is `null`.
           */
          setUrl(
            /**
             * The new value for property `url`
             */
            sValue: string
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * Sets a new value for property {@link #getValue value}.
           *
           * The value property keeps the current value of the control. If a binding expression is configured, this
           * is used to determine the property of an OData entity.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setValue(
            /**
             * New value for property `value`
             */
            oValue: any
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * @SINCE 1.30.0
           *
           * Setter for property `valueState`. Default value is `None`.
           */
          setValueState(
            /**
             * The new value for property `valueState`
             */
            sValueState: sap.ui.core.ValueState
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * @SINCE 1.29
           *
           * Setter for property `valueStateText`. Default value is empty/`undefined`.
           */
          setValueStateText(
            /**
             * The new value for property `valueStateText`
             */
            sText: string
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * Sets a new value for property {@link #getWidth width}.
           *
           * Defines the width of the control.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `empty string`.
           */
          setWidth(
            /**
             * New value for property `width`
             */
            sWidth: sap.ui.core.CSSSize
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * @SINCE 1.36.6
           *
           * Sets a new value for property {@link #getWrapping wrapping}.
           *
           * Indicates whether the control break lines (in display mode) to prevent overflow.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setWrapping(
            /**
             * New value for property `wrapping`
             */
            bWrapping: boolean
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.comp.smartfield.SmartField`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartfield.SmartField` itself.
           *
           * The event is fired after the text in the field has been changed and the focus leaves the field, or after
           * the Enter key has been pressed.
           */
          attachChange(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartfield.SmartField` itself
             */
            oListener?: object
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * @SINCE 1.32.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:contextEditableChanged contextEditableChanged}
           * event of this `sap.ui.comp.smartfield.SmartField`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartfield.SmartField` itself.
           *
           * The event is fired after the context editable property of the control has changed.
           */
          attachContextEditableChanged(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartfield.SmartField` itself
             */
            oListener?: object
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * @SINCE 1.30.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:editableChanged editableChanged} event of this
           * `sap.ui.comp.smartfield.SmartField`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartfield.SmartField` itself.
           *
           * The event is fired after the value of editable property of the control has changed.
           */
          attachEditableChanged(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartfield.SmartField` itself
             */
            oListener?: object
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:entitySetFound entitySetFound} event of this
           * `sap.ui.comp.smartfield.SmartField`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartfield.SmartField` itself.
           *
           * The OData entity set is either derived from the control's binding context or from control's entity set
           * property, if a value for it is specified. In both cases this event is fired.
           */
          attachEntitySetFound(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartfield.SmartField` itself
             */
            oListener?: object
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:initialise initialise} event of this `sap.ui.comp.smartfield.SmartField`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartfield.SmartField` itself.
           *
           * The event is fired after the smart field has calculated its metadata.
           */
          attachInitialise(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartfield.SmartField` itself
             */
            oListener?: object
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:innerControlsCreated innerControlsCreated} event
           * of this `sap.ui.comp.smartfield.SmartField`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartfield.SmartField` itself.
           *
           * The event is fired after the inner controls have been created. The created controls can be obtained via
           * oControl.getInnerControls().
           */
          attachInnerControlsCreated(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartfield.SmartField` itself
             */
            oListener?: object
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * @SINCE 1.36.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:press press} event of this `sap.ui.comp.smartfield.SmartField`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartfield.SmartField` itself.
           *
           * Fires when the user triggers the link control or taps/clicks on an active title of the object identifier
           * control.
           */
          attachPress(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartfield.SmartField` itself
             */
            oListener?: object
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * @SINCE 1.31.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:valueListChanged valueListChanged} event of
           * this `sap.ui.comp.smartfield.SmartField`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartfield.SmartField` itself.
           *
           * The event is fired when after selection of values with value help or auto-suggest, the model is updated
           * with the selected data.
           */
          attachValueListChanged(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartfield.SmartField` itself
             */
            oListener?: object
          ): sap.ui.comp.smartfield.SmartField;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:visibleChanged visibleChanged} event of this
           * `sap.ui.comp.smartfield.SmartField`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartfield.SmartField` itself.
           *
           * The event is fired after the visibility of the control has changed.
           */
          attachVisibleChanged(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartfield.SmartField` itself
             */
            oListener?: object
          ): sap.ui.comp.smartfield.SmartField;
        }
        /**
         * Enumeration of the different contexts supported by the SmartField, if it is using an OData model.
         */
        enum ControlContextType {
          /**
           * Behaves currently exactly like `sap.ui.comp.smartfield.ControlContextType.None`.
           */
          Form,
          /**
           * No special context is selected. The Smart Field applies its internal defaults.
           */
          None,
          /**
           * Also the UoM layout is influenced.
           */
          ResponsiveTable,
          /**
           * If this is selected the UoM layout is influenced.
           */
          SmartFormGrid,
          /**
           * If this is selected the UoM layout is influenced.
           */
          Table
        }
        /**
         * Enumeration of the different control proposals supported by the Smart Field, if it is using an OData
         * model.
         */
        enum ControlProposalType {
          /**
           * No special context is selected. The Smart Field applies its internal defaults.
           */
          None,
          /**
           * If this is selected, the sap.m.ObjectIdentifier control is used to display IDs, if they are not editable.
           * The current OData property is assumed to have a text annotation. Otherwise the configuration is ignored.
           */
          ObjectIdentifier,
          /**
           * If this is selected, the sap.m.ObjectNumber control is used to display units of measure. If the value
           * property of the Smart Field is not bound to a unit of measure, the property is ignored.
           */
          ObjectNumber
        }
        /**
         * The available control types to configure the internal control selection of a SmartField control.
         */
        enum ControlType {
          /**
           * The `SmartField` control chooses the control to be displayed.
           */
          auto,
          /**
           * The `SmartField` control displays a check box control.
           */
          checkBox,
          /**
           * The `SmartField` control displays a date picker control.
           */
          datePicker,
          /**
           * The `SmartField` control displays a combo box control.
           */
          dropDownList,
          /**
           * The `SmartField` control displays a text input field control.
           */
          input,
          /**
           * The `SmartField` control displays a select control.
           */
          selection
        }
        /**
         * The different options to visualize the ObjectStatus control.
         */
        enum CriticalityRepresentationType {
          /**
           * If this is selected, the sap.m.ObjectStatus control visualizes the criticality using an icon.
           */
          WithIcon,
          /**
           * If this is selected, the sap.m.ObjectStatus control does not visualize the criticality using an icon.
           */
          WithoutIcon
        }
        /**
         * The different options to define display behavior for the value help of a SmartField control.
         */
        enum DisplayBehaviour {
          /**
           * The SmartField chooses the display behavior.
           */
          auto,
          /**
           * Description and ID are displayed for available values.
           */
          descriptionAndId,
          /**
           * Only the description of the available values is displayed.
           */
          descriptionOnly,
          /**
           * ID and description are displayed for available values.
           */
          idAndDescription,
          /**
           * Shows the ID only.
           */
          idOnly,
          /**
           * Shows Boolean value as On/Off
           */
          OnOff,
          /**
           * Shows Boolean value as True/False
           */
          TrueFalse,
          /**
           * Shows Boolean value as Yes/No
           */
          YesNo
        }
        /**
         * Enumeration of the different data types supported by the SmartField control, if it is using a JSON model.
         */
        enum JSONType {
          /**
           * Boolean Type
           */
          Boolean,
          /**
           * The JavaScript Date Object
           */
          Date,
          /**
           * Date Time Type
           */
          DateTime,
          /**
           * Float type
           */
          Float,
          /**
           * Integer type
           */
          Integer,
          /**
           * The JavaScript primary type String
           */
          String
        }
        /**
         * @SINCE 1.54
         *
         * Enumeration of sources from which text values for `Codes`/`IDs` are fetched in edit mode. The text is
         * usually visualized as description/text value for IDs, for example, for LT (Laptop).
         */
        enum TextInEditModeSource {
          /**
           * The text is fetched from the OData model property specified in the `Path` attribute of the `com.sap.vocabularies.Common.v1.Text`
           * annotation.
           */
          NavigationProperty,
          /**
           * The `com.sap.vocabularies.UI.v1.TextArrangement` annotation and the value of the `displayBehaviour` property
           * of the `configuration` aggregation are not evaluated.
           */
          None,
          /**
           * The text is fetched from the OData model property specified in the `Path` attribute of the `com.sap.vocabularies.Common.v1.Text`
           * annotation of the associated value list entity.
           */
          ValueList
        }
      }

      namespace smartfilterbar {
        interface ControlConfigurationOpts extends sap.ui.core.ElementOpts {
          /**
           * The key property corresponds to the field name from the OData service $metadata document.
           */
          key?: string;

          /**
           * The groupId can be used to move a field from one group to another. The groupId corresponds to the EntityName
           * from the OData metadata. It is also possible to move a field from the advanced area to the basic area
           * by specifying the groupId _BASIC.
           */
          groupId?: string;

          /**
           * Using this property it is possible to overwrite the label of a filter field in the SmartFilterBar.
           */
          label?: string;

          /**
           * Using this flag it is possible to hide fields from the OData metadata.
           */
          visible?: boolean;

          /**
           * Specifies whether a value help dialog is available or not.
           */
          hasValueHelpDialog?: boolean;

          /**
           * The SmartFilterBar calculates which kind of control will be used for a filter fields based on multiple
           * OData Attributes and annotations. Using this property it is possible to overwrite the OData metadata.
           */
          controlType?: sap.ui.comp.smartfilterbar.ControlType;

          /**
           * The filter type specifies whether the filter field is of type single value, multi-value, or interval.
           * The filter type is calculated by the {@link sap.ui.comp.smartfilterbar.SmartFilterBar} control based
           * on the OData metadata. Using this property the filter type can be configured manually.
           */
          filterType?: sap.ui.comp.smartfilterbar.FilterType;

          /**
           * The zero based index can be used to specify the initial order of fields (without any variants).
           */
          index?: number;

          /**
           * Property can be used to enable the TypeAhead service. TypeAhead does not work with all controls, e.g
           * it does not work for DrodDownListbox
           */
          hasTypeAhead?: boolean;

          /**
           * Property can be used to overwrite the mandatory state of a filter field. Property can only be set during
           * initialization. Changes at runtime will be ignored.
           */
          mandatory?: sap.ui.comp.smartfilterbar.MandatoryType;

          /**
           * The width of the filter field in a CSS compatible format. The width can be set only once during initialization.
           * Changes at runtime will not be reflected. The width will not be applied to custom controls.
           */
          width?: string;

          /**
           * If set to true this field will be added to the advanced area (aka. Dynamic Selection) by default.
           */
          visibleInAdvancedArea?: boolean;

          /**
           * In case there are value help annotations for this filter field, it is possible to specify whether the
           * table in the value help dialog for this field will be filled initially. The default value is true, which
           * means the table will not be filled as the data fetch is prevented.
           */
          preventInitialDataFetchInValueHelpDialog?: boolean;

          /**
           * The displayBehaviour specifies how the content should be displayed on certain controls. Ex: DescriptionOnly
           * for Combobox (DropDown text) , Description and ID for MultiInput (token text)
           */
          displayBehaviour?: sap.ui.comp.smartfilterbar.DisplayBehaviour;

          /**
           * The condition Type class name to use for this filter item. Implementation should derive from sap.ui.comp.config.condition.Type
           */
          conditionType?: any;

          /**
           * Fired when the value of a property, for example isVisible, has changed.
           */
          change?: Function;

          /**
           * Default value for a filter field. The aggreagtion expects {@link sap.ui.comp.smartfilterbar.SelectOption|SelectOption}
           * instances, where the values' format (properties `low` and `high`) match the type of the referneced property
           * and consider also the given constraints of the property.
           *
           * Samples for valid formats: `Edm.DateTime` with constraint `sap:display-format='Date'`: "2018-12-24" (you
           * optionally can provide a time-part and timezone, too, (2018-12-24T00:00:00Z) but this is ignored)
           *
           * `Edm.DateTimeOffset`: "2018-12-24T13:55:59Z"
           *
           * `Edm.Time`: "PT12H34M56S"
           *
           * `Edm.Boolean`: "false"
           *
           * `Edm.Decimal`: "2983.12"
           */
          defaultFilterValues?:
            | sap.ui.comp.smartfilterbar.SelectOption[]
            | sap.ui.comp.smartfilterbar.SelectOption;

          /**
           * If a custom control is specified, the SmartFilterBar will not create a control but use the custom control.
           * Additional services like TypeAhead have to implemented manually.
           */
          customControl?: sap.ui.core.Control;
        }

        interface GroupConfigurationOpts extends sap.ui.core.ElementOpts {
          /**
           * The key property shall correspond to the name EntityTypeName from the OData service $metadata document.
           */
          key?: string;

          /**
           * Zero based integer index. The index can be used to specify the order of groups. If no index is specified,
           * the order like in the OData metadata will be used.
           */
          index?: any;

          /**
           * Using this property it is possible to overwrite the label of a group in the advanced area of the SmartFilterBar.
           */
          label?: any;

          /**
           * Fired when the value of a property, for example label, has changed
           */
          change?: Function;
        }

        interface SelectOptionOpts extends sap.ui.core.ElementOpts {
          /**
           * The sign for a Select Option. Possible values are I for include or E for exclude.
           */
          sign?: sap.ui.comp.smartfilterbar.SelectOptionSign;

          /**
           * The operator for a select option. The default value is EQ "for equals".
           */
          operator?: sap.ui.model.FilterOperator;

          /**
           * The low value for a select option.
           */
          low?: string;

          /**
           * The high value for a select option. The high value is only required for a few operators, e.g. BT (between).
           */
          high?: string;
        }

        interface SmartFilterBarOpts
          extends sap.ui.comp.filterbar.FilterBarOpts {
          /**
           * @deprecated (since 1.40) - Use `entitySet` property instead of this one, to enable V4 annotation support
           *
           * The OData entity type whose metadata is used to create the SmartFilterBar. **Note:** Changing this value
           * after the SmartFilterBar is initialized (`initialise` event was fired) has no effect.
           */
          entityType?: string;

          /**
           * The OData entity set whose metadata is used to create the SmartFilterBar. **Note:** Changing this value
           * after the SmartFilterBar is initialized (`initialise` event was fired) has no effect.
           */
          entitySet?: string;

          /**
           * @deprecated (since 1.29) - Set an ODataModel as the main model on your control/view instead
           *
           * Optional. The OData service URL. If it is not specified, the service URL from the OData model (this.getModel())
           * will be used. **Note:** Changing this value after the SmartFilterBar is initialized (initialise event
           * was fired) has no effect.
           */
          resourceUri?: string;

          /**
           * Name of the field that is the focus of the basic search.
           */
          basicSearchFieldName?: string;

          /**
           * Enables the basic search field. The entered value can be accessed with {@link sap.ui.comp.smartfilterbar.SmartFilterBar#getParameters}.
           * **Note:** When the SmartFilterBar control is used with a {@link sap.ui.comp.smarttable.SmartTable} control
           * the parameters are handled automatically. Therefore, this must only be enabled for OData service entities
           * that support basic search.
           */
          enableBasicSearch?: boolean;

          /**
           * @SINCE 1.40
           *
           * If set the search will be automatically triggered, when a filter value was set via the change
           * event.
           *  **Note:** The liveMode only operates on non-mobile scenarios.
           *  Additionally, if liveMode is set, the following applies:
           * 	 - The error messagebox is not displayed, and the `showMessages` property is ignored.
           * 	 - The search is triggered after a variant has been selected.
           * 	 - Execute on Select for `VariantManagement` is not shown and not taken into account
           */
          liveMode?: boolean;

          /**
           * @SINCE 1.40
           *
           * If set to `false` eventual errors during the search, will not be displayed in a messagebox.
           */
          showMessages?: boolean;

          /**
           * @SINCE 1.42.0
           * @EXPERIMENTAL (since 1.42.0)
           *
           * Indicates if the analytical parameters (SelectionVariant) must be taken into consideration.
           */
          considerAnalyticalParameters?: boolean;

          /**
           * @SINCE 1.46.0
           *
           * If set to `true` all date fields with filter restriction `interval` will be treated as `DateTimeRange`
           * filters. The `useDateRangeType` can be set only once during initialization. **Note:** If this property
           * is set to `true` and any date filters with filter restriction `interval` were stored as part of a variant,
           * the values of these filters cannot be applied. If this property is set to `false`, any previously stored
           * filters which were treated as type `DateTimeRange` based on the former setting, cannot be converted back
           * to the standard date interval.
           */
          useDateRangeType?: boolean;

          /**
           * @SINCE 1.44.0
           * @EXPERIMENTAL (since 1.44.0)
           *
           * If set to `true` all search requests will be ignored. This functionality is only intended to be used
           * internally to enable an optimal solution when the filter bar is controlled by the smart templates. NOTE:
           * As long as this property is set to `true`, all search requests will be neglected.
           */
          suppressSelection?: boolean;

          /**
           * @SINCE 1.48.0
           *
           * Indicates if the annotation `com.sap.vocabularies.UI.v1.SelectionVariant` is taken into account.
           */
          considerSelectionVariants?: boolean;

          /**
           * @SINCE 1.48.0
           *
           * Determines one specific variant that is based on the `com.sap.vocabularies.UI.v1.SelectionVariant` annotation,
           * which is then used as the default variant.
           *  This property is only relevant in case `considerSelectionVariants` is set to `true` and will only be
           * applied if there is no user-defined default variant specified.
           */
          defaultSelectionVariantName?: string;

          /**
           * @SINCE 1.48
           *
           * If set to `true`, only the navigation properties mentioned in property {@link sap.ui.comp.smartfilterbar.SmartFilterBarl#getNavigationProperties}
           * are checked for further filters.
           */
          useProvidedNavigationProperties?: boolean;

          /**
           * @SINCE 1.48
           *
           * This property is only evaluated if the property {@link sap.ui.comp.smartfilterbar.SmartFilterBar#getUseProvidedNavigationProperties}
           * is set to `true`. It contains a comma-separated list of navigation property names which are checked for
           * filters.
           */
          navigationProperties?: string;

          /**
           * @SINCE 1.36
           *
           * This event is fired after the pending state of the `FilterBar` control changes.
           */
          pendingChange?: Function;

          /**
           * Using control configurations you can add additional configuration to filter fields, for example set custom
           * labels, change the order of fields, or change the filter field control type. **Note:** Changing the values
           * here after the SmartFilter is initialized (`initialise` event was fired) has no effect.
           */
          controlConfiguration?:
            | sap.ui.comp.smartfilterbar.ControlConfiguration[]
            | sap.ui.comp.smartfilterbar.ControlConfiguration;

          /**
           * Provides the possibility to add additional configuration to groups. Groups are used to show fields in
           * the advanced area of the SmartFilterBar. With additional configuration, you can for example set custom
           * labels or change the order of groups. **Note:** Changing the values here after the SmartFilter is initialized
           * (`initialise` event was fired) has no effect.
           */
          groupConfiguration?:
            | sap.ui.comp.smartfilterbar.GroupConfiguration[]
            | sap.ui.comp.smartfilterbar.GroupConfiguration;

          /**
           * @SINCE 1.38
           *
           * Identifies the SmartVariant control which should be used for the personalization.
           */
          smartVariant?:
            | sap.ui.comp.smartvariants.SmartVariantManagement
            | string;
        }
        /**
         * ControlConfiguration can be used to add additional configuration for filter fields in the SmartFilterBar
         * control, in order to overwrite the default settings from the OData metadata. For instance, it is possible
         * to change the label, index or control type of a filter field.
         */
        class ControlConfiguration extends sap.ui.core.Element {
          /**
           * Constructor for a new smartfilterbar/ControlConfiguration.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sID?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: ControlConfigurationOpts
          );

          /**
           * Adds some defaultFilterValue to the aggregation {@link #getDefaultFilterValues defaultFilterValues}.
           */
          addDefaultFilterValue(
            /**
             * The defaultFilterValue to add; if empty, nothing is inserted
             */
            oDefaultFilterValue: sap.ui.comp.smartfilterbar.SelectOption
          ): sap.ui.comp.smartfilterbar.ControlConfiguration;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.comp.smartfilterbar.ControlConfiguration`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartfilterbar.ControlConfiguration` itself.
           *
           * Fired when the value of a property, for example isVisible, has changed.
           */
          attachChange(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartfilterbar.ControlConfiguration`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.smartfilterbar.ControlConfiguration;
          /**
           * Destroys the customControl in the aggregation {@link #getCustomControl customControl}.
           */
          destroyCustomControl(): sap.ui.comp.smartfilterbar.ControlConfiguration;
          /**
           * Destroys all the defaultFilterValues in the aggregation {@link #getDefaultFilterValues defaultFilterValues}.
           */
          destroyDefaultFilterValues(): sap.ui.comp.smartfilterbar.ControlConfiguration;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.ui.comp.smartfilterbar.ControlConfiguration`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachChange(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smartfilterbar.ControlConfiguration;
          /**
           * Creates a new subclass of class sap.ui.comp.smartfilterbar.ControlConfiguration with name `sClassName`
           * and enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:change change} to attached listeners.
           */
          fireChange(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * Name of the changed property
               */
              propertyName?: string;
            }
          ): sap.ui.comp.smartfilterbar.ControlConfiguration;
          /**
           * Gets current value of property {@link #getConditionType conditionType}.
           *
           * The condition Type class name to use for this filter item. Implementation should derive from sap.ui.comp.config.condition.Type
           */
          getConditionType(): any;
          /**
           * Gets current value of property {@link #getControlType controlType}.
           *
           * The SmartFilterBar calculates which kind of control will be used for a filter fields based on multiple
           * OData Attributes and annotations. Using this property it is possible to overwrite the OData metadata.
           *
           * Default value is `auto`.
           */
          getControlType(): sap.ui.comp.smartfilterbar.ControlType;
          /**
           * Gets content of aggregation {@link #getCustomControl customControl}.
           *
           * If a custom control is specified, the SmartFilterBar will not create a control but use the custom control.
           * Additional services like TypeAhead have to implemented manually.
           */
          getCustomControl(): sap.ui.core.Control;
          /**
           * Gets content of aggregation {@link #getDefaultFilterValues defaultFilterValues}.
           *
           * Default value for a filter field. The aggreagtion expects {@link sap.ui.comp.smartfilterbar.SelectOption|SelectOption}
           * instances, where the values' format (properties `low` and `high`) match the type of the referneced property
           * and consider also the given constraints of the property.
           *
           * Samples for valid formats: `Edm.DateTime` with constraint `sap:display-format='Date'`: "2018-12-24" (you
           * optionally can provide a time-part and timezone, too, (2018-12-24T00:00:00Z) but this is ignored)
           *
           * `Edm.DateTimeOffset`: "2018-12-24T13:55:59Z"
           *
           * `Edm.Time`: "PT12H34M56S"
           *
           * `Edm.Boolean`: "false"
           *
           * `Edm.Decimal`: "2983.12"
           */
          getDefaultFilterValues(): sap.ui.comp.smartfilterbar.SelectOption[];
          /**
           * Gets current value of property {@link #getDisplayBehaviour displayBehaviour}.
           *
           * The displayBehaviour specifies how the content should be displayed on certain controls. Ex: DescriptionOnly
           * for Combobox (DropDown text) , Description and ID for MultiInput (token text)
           *
           * Default value is `auto`.
           */
          getDisplayBehaviour(): sap.ui.comp.smartfilterbar.DisplayBehaviour;
          /**
           * Gets current value of property {@link #getFilterType filterType}.
           *
           * The filter type specifies whether the filter field is of type single value, multi-value, or interval.
           * The filter type is calculated by the {@link sap.ui.comp.smartfilterbar.SmartFilterBar} control based
           * on the OData metadata. Using this property the filter type can be configured manually.
           *
           * Default value is `auto`.
           */
          getFilterType(): sap.ui.comp.smartfilterbar.FilterType;
          /**
           * Gets current value of property {@link #getGroupId groupId}.
           *
           * The groupId can be used to move a field from one group to another. The groupId corresponds to the EntityName
           * from the OData metadata. It is also possible to move a field from the advanced area to the basic area
           * by specifying the groupId _BASIC.
           */
          getGroupId(): string;
          /**
           * Gets current value of property {@link #getHasTypeAhead hasTypeAhead}.
           *
           * Property can be used to enable the TypeAhead service. TypeAhead does not work with all controls, e.g
           * it does not work for DrodDownListbox
           *
           * Default value is `true`.
           */
          getHasTypeAhead(): boolean;
          /**
           * Gets current value of property {@link #getHasValueHelpDialog hasValueHelpDialog}.
           *
           * Specifies whether a value help dialog is available or not.
           *
           * Default value is `true`.
           */
          getHasValueHelpDialog(): boolean;
          /**
           * Gets current value of property {@link #getIndex index}.
           *
           * The zero based index can be used to specify the initial order of fields (without any variants).
           *
           * Default value is `-1`.
           */
          getIndex(): number;
          /**
           * Gets current value of property {@link #getKey key}.
           *
           * The key property corresponds to the field name from the OData service $metadata document.
           */
          getKey(): string;
          /**
           * Gets current value of property {@link #getLabel label}.
           *
           * Using this property it is possible to overwrite the label of a filter field in the SmartFilterBar.
           */
          getLabel(): string;
          /**
           * Gets current value of property {@link #getMandatory mandatory}.
           *
           * Property can be used to overwrite the mandatory state of a filter field. Property can only be set during
           * initialization. Changes at runtime will be ignored.
           *
           * Default value is `auto`.
           */
          getMandatory(): sap.ui.comp.smartfilterbar.MandatoryType;
          /**
           * Returns a metadata object for class sap.ui.comp.smartfilterbar.ControlConfiguration.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getPreventInitialDataFetchInValueHelpDialog preventInitialDataFetchInValueHelpDialog}.
           *
           * In case there are value help annotations for this filter field, it is possible to specify whether the
           * table in the value help dialog for this field will be filled initially. The default value is true, which
           * means the table will not be filled as the data fetch is prevented.
           *
           * Default value is `true`.
           */
          getPreventInitialDataFetchInValueHelpDialog(): boolean;
          /**
           * Gets current value of property {@link #getVisible visible}.
           *
           * Using this flag it is possible to hide fields from the OData metadata.
           *
           * Default value is `true`.
           */
          getVisible(): boolean;
          /**
           * Gets current value of property {@link #getVisibleInAdvancedArea visibleInAdvancedArea}.
           *
           * If set to true this field will be added to the advanced area (aka. Dynamic Selection) by default.
           *
           * Default value is `false`.
           */
          getVisibleInAdvancedArea(): boolean;
          /**
           * Gets current value of property {@link #getWidth width}.
           *
           * The width of the filter field in a CSS compatible format. The width can be set only once during initialization.
           * Changes at runtime will not be reflected. The width will not be applied to custom controls.
           */
          getWidth(): string;
          /**
           * Checks for the provided `sap.ui.comp.smartfilterbar.SelectOption` in the aggregation {@link #getDefaultFilterValues
           * defaultFilterValues}. and returns its index if found or -1 otherwise.
           */
          indexOfDefaultFilterValue(
            /**
             * The defaultFilterValue whose index is looked for
             */
            oDefaultFilterValue: sap.ui.comp.smartfilterbar.SelectOption
          ): number;
          /**
           * Inserts a defaultFilterValue into the aggregation {@link #getDefaultFilterValues defaultFilterValues}.
           */
          insertDefaultFilterValue(
            /**
             * The defaultFilterValue to insert; if empty, nothing is inserted
             */
            oDefaultFilterValue: sap.ui.comp.smartfilterbar.SelectOption,
            /**
             * The `0`-based index the defaultFilterValue should be inserted at; for a negative value of `iIndex`, the
             * defaultFilterValue is inserted at position 0; for a value greater than the current size of the aggregation,
             * the defaultFilterValue is inserted at the last position
             */
            iIndex: number
          ): sap.ui.comp.smartfilterbar.ControlConfiguration;
          /**
           * Removes all the controls from the aggregation {@link #getDefaultFilterValues defaultFilterValues}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllDefaultFilterValues(): sap.ui.comp.smartfilterbar.SelectOption[];
          /**
           * Removes a defaultFilterValue from the aggregation {@link #getDefaultFilterValues defaultFilterValues}.
           */
          removeDefaultFilterValue(
            /**
             * The defaultFilterValue to remove or its index or id
             */
            vDefaultFilterValue:
              | number
              | string
              | sap.ui.comp.smartfilterbar.SelectOption
          ): sap.ui.comp.smartfilterbar.SelectOption;
          /**
           * Sets a new value for property {@link #getConditionType conditionType}.
           *
           * The condition Type class name to use for this filter item. Implementation should derive from sap.ui.comp.config.condition.Type
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setConditionType(
            /**
             * New value for property `conditionType`
             */
            oConditionType: any
          ): sap.ui.comp.smartfilterbar.ControlConfiguration;
          /**
           * Sets a new value for property {@link #getControlType controlType}.
           *
           * The SmartFilterBar calculates which kind of control will be used for a filter fields based on multiple
           * OData Attributes and annotations. Using this property it is possible to overwrite the OData metadata.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `auto`.
           */
          setControlType(
            /**
             * New value for property `controlType`
             */
            sControlType: sap.ui.comp.smartfilterbar.ControlType
          ): sap.ui.comp.smartfilterbar.ControlConfiguration;
          /**
           * Sets the aggregated {@link #getCustomControl customControl}.
           */
          setCustomControl(
            /**
             * The customControl to set
             */
            oCustomControl: sap.ui.core.Control
          ): sap.ui.comp.smartfilterbar.ControlConfiguration;
          /**
           * Sets a new value for property {@link #getDisplayBehaviour displayBehaviour}.
           *
           * The displayBehaviour specifies how the content should be displayed on certain controls. Ex: DescriptionOnly
           * for Combobox (DropDown text) , Description and ID for MultiInput (token text)
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `auto`.
           */
          setDisplayBehaviour(
            /**
             * New value for property `displayBehaviour`
             */
            sDisplayBehaviour: sap.ui.comp.smartfilterbar.DisplayBehaviour
          ): sap.ui.comp.smartfilterbar.ControlConfiguration;
          /**
           * Sets a new value for property {@link #getFilterType filterType}.
           *
           * The filter type specifies whether the filter field is of type single value, multi-value, or interval.
           * The filter type is calculated by the {@link sap.ui.comp.smartfilterbar.SmartFilterBar} control based
           * on the OData metadata. Using this property the filter type can be configured manually.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `auto`.
           */
          setFilterType(
            /**
             * New value for property `filterType`
             */
            sFilterType: sap.ui.comp.smartfilterbar.FilterType
          ): sap.ui.comp.smartfilterbar.ControlConfiguration;
          /**
           * Sets a new value for property {@link #getGroupId groupId}.
           *
           * The groupId can be used to move a field from one group to another. The groupId corresponds to the EntityName
           * from the OData metadata. It is also possible to move a field from the advanced area to the basic area
           * by specifying the groupId _BASIC.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setGroupId(
            /**
             * New value for property `groupId`
             */
            sGroupId: string
          ): sap.ui.comp.smartfilterbar.ControlConfiguration;
          /**
           * Sets a new value for property {@link #getHasTypeAhead hasTypeAhead}.
           *
           * Property can be used to enable the TypeAhead service. TypeAhead does not work with all controls, e.g
           * it does not work for DrodDownListbox
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setHasTypeAhead(
            /**
             * New value for property `hasTypeAhead`
             */
            bHasTypeAhead: boolean
          ): sap.ui.comp.smartfilterbar.ControlConfiguration;
          /**
           * Sets a new value for property {@link #getHasValueHelpDialog hasValueHelpDialog}.
           *
           * Specifies whether a value help dialog is available or not.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setHasValueHelpDialog(
            /**
             * New value for property `hasValueHelpDialog`
             */
            bHasValueHelpDialog: boolean
          ): sap.ui.comp.smartfilterbar.ControlConfiguration;
          /**
           * Sets a new value for property {@link #getIndex index}.
           *
           * The zero based index can be used to specify the initial order of fields (without any variants).
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `-1`.
           */
          setIndex(
            /**
             * New value for property `index`
             */
            iIndex: number
          ): sap.ui.comp.smartfilterbar.ControlConfiguration;
          /**
           * Sets a new value for property {@link #getKey key}.
           *
           * The key property corresponds to the field name from the OData service $metadata document.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setKey(
            /**
             * New value for property `key`
             */
            sKey: string
          ): sap.ui.comp.smartfilterbar.ControlConfiguration;
          /**
           * Sets a new value for property {@link #getLabel label}.
           *
           * Using this property it is possible to overwrite the label of a filter field in the SmartFilterBar.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setLabel(
            /**
             * New value for property `label`
             */
            sLabel: string
          ): sap.ui.comp.smartfilterbar.ControlConfiguration;
          /**
           * Sets a new value for property {@link #getMandatory mandatory}.
           *
           * Property can be used to overwrite the mandatory state of a filter field. Property can only be set during
           * initialization. Changes at runtime will be ignored.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `auto`.
           */
          setMandatory(
            /**
             * New value for property `mandatory`
             */
            sMandatory: sap.ui.comp.smartfilterbar.MandatoryType
          ): sap.ui.comp.smartfilterbar.ControlConfiguration;
          /**
           * Sets a new value for property {@link #getPreventInitialDataFetchInValueHelpDialog preventInitialDataFetchInValueHelpDialog}.
           *
           * In case there are value help annotations for this filter field, it is possible to specify whether the
           * table in the value help dialog for this field will be filled initially. The default value is true, which
           * means the table will not be filled as the data fetch is prevented.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setPreventInitialDataFetchInValueHelpDialog(
            /**
             * New value for property `preventInitialDataFetchInValueHelpDialog`
             */
            bPreventInitialDataFetchInValueHelpDialog: boolean
          ): sap.ui.comp.smartfilterbar.ControlConfiguration;
          /**
           * Sets a new value for property {@link #getVisible visible}.
           *
           * Using this flag it is possible to hide fields from the OData metadata.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setVisible(
            /**
             * New value for property `visible`
             */
            bVisible: boolean
          ): sap.ui.comp.smartfilterbar.ControlConfiguration;
          /**
           * Sets a new value for property {@link #getVisibleInAdvancedArea visibleInAdvancedArea}.
           *
           * If set to true this field will be added to the advanced area (aka. Dynamic Selection) by default.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setVisibleInAdvancedArea(
            /**
             * New value for property `visibleInAdvancedArea`
             */
            bVisibleInAdvancedArea: boolean
          ): sap.ui.comp.smartfilterbar.ControlConfiguration;
          /**
           * Sets a new value for property {@link #getWidth width}.
           *
           * The width of the filter field in a CSS compatible format. The width can be set only once during initialization.
           * Changes at runtime will not be reflected. The width will not be applied to custom controls.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setWidth(
            /**
             * New value for property `width`
             */
            sWidth: string
          ): sap.ui.comp.smartfilterbar.ControlConfiguration;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.comp.smartfilterbar.ControlConfiguration`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartfilterbar.ControlConfiguration` itself.
           *
           * Fired when the value of a property, for example isVisible, has changed.
           */
          attachChange(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartfilterbar.ControlConfiguration`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.smartfilterbar.ControlConfiguration;
        }
        /**
         * A GroupConfiguration can be used to add additional configurations for groups in the SmartFilterBar. A
         * group in the SmartFilterBar is a group of filter fields in the advanced search.
         */
        class GroupConfiguration extends sap.ui.core.Element {
          /**
           * Constructor for a new smartfilterbar/GroupConfiguration.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sID?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: GroupConfigurationOpts
          );

          /**
           * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.comp.smartfilterbar.GroupConfiguration`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartfilterbar.GroupConfiguration` itself.
           *
           * Fired when the value of a property, for example label, has changed
           */
          attachChange(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartfilterbar.GroupConfiguration`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.smartfilterbar.GroupConfiguration;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.ui.comp.smartfilterbar.GroupConfiguration`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachChange(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smartfilterbar.GroupConfiguration;
          /**
           * Creates a new subclass of class sap.ui.comp.smartfilterbar.GroupConfiguration with name `sClassName`
           * and enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:change change} to attached listeners.
           */
          fireChange(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * Name of the changed property
               */
              propertyName?: string;
            }
          ): sap.ui.comp.smartfilterbar.GroupConfiguration;
          /**
           * Gets current value of property {@link #getIndex index}.
           *
           * Zero based integer index. The index can be used to specify the order of groups. If no index is specified,
           * the order like in the OData metadata will be used.
           *
           * Default value is `undefined`.
           */
          getIndex(): any;
          /**
           * Gets current value of property {@link #getKey key}.
           *
           * The key property shall correspond to the name EntityTypeName from the OData service $metadata document.
           */
          getKey(): string;
          /**
           * Gets current value of property {@link #getLabel label}.
           *
           * Using this property it is possible to overwrite the label of a group in the advanced area of the SmartFilterBar.
           *
           * Default value is `undefined`.
           */
          getLabel(): any;
          /**
           * Returns a metadata object for class sap.ui.comp.smartfilterbar.GroupConfiguration.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Sets a new value for property {@link #getIndex index}.
           *
           * Zero based integer index. The index can be used to specify the order of groups. If no index is specified,
           * the order like in the OData metadata will be used.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `undefined`.
           */
          setIndex(
            /**
             * New value for property `index`
             */
            oIndex: any
          ): sap.ui.comp.smartfilterbar.GroupConfiguration;
          /**
           * Sets a new value for property {@link #getKey key}.
           *
           * The key property shall correspond to the name EntityTypeName from the OData service $metadata document.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setKey(
            /**
             * New value for property `key`
             */
            sKey: string
          ): sap.ui.comp.smartfilterbar.GroupConfiguration;
          /**
           * Sets a new value for property {@link #getLabel label}.
           *
           * Using this property it is possible to overwrite the label of a group in the advanced area of the SmartFilterBar.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `undefined`.
           */
          setLabel(
            /**
             * New value for property `label`
             */
            oLabel: any
          ): sap.ui.comp.smartfilterbar.GroupConfiguration;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.comp.smartfilterbar.GroupConfiguration`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartfilterbar.GroupConfiguration` itself.
           *
           * Fired when the value of a property, for example label, has changed
           */
          attachChange(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartfilterbar.GroupConfiguration`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.smartfilterbar.GroupConfiguration;
        }
        /**
         * A Select Option can be used to specify default filter values for a control configuration of the SmartFilterBar.
         */
        class SelectOption extends sap.ui.core.Element {
          /**
           * Constructor for a new smartfilterbar/SelectOption.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sID?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: SelectOptionOpts
          );

          /**
           * Creates a new subclass of class sap.ui.comp.smartfilterbar.SelectOption with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets current value of property {@link #getHigh high}.
           *
           * The high value for a select option. The high value is only required for a few operators, e.g. BT (between).
           */
          getHigh(): string;
          /**
           * Gets current value of property {@link #getLow low}.
           *
           * The low value for a select option.
           */
          getLow(): string;
          /**
           * Returns a metadata object for class sap.ui.comp.smartfilterbar.SelectOption.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getOperator operator}.
           *
           * The operator for a select option. The default value is EQ "for equals".
           *
           * Default value is `EQ`.
           */
          getOperator(): sap.ui.model.FilterOperator;
          /**
           * Gets current value of property {@link #getSign sign}.
           *
           * The sign for a Select Option. Possible values are I for include or E for exclude.
           *
           * Default value is `I`.
           */
          getSign(): sap.ui.comp.smartfilterbar.SelectOptionSign;
          /**
           * Sets a new value for property {@link #getHigh high}.
           *
           * The high value for a select option. The high value is only required for a few operators, e.g. BT (between).
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setHigh(
            /**
             * New value for property `high`
             */
            sHigh: string
          ): sap.ui.comp.smartfilterbar.SelectOption;
          /**
           * Sets a new value for property {@link #getLow low}.
           *
           * The low value for a select option.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setLow(
            /**
             * New value for property `low`
             */
            sLow: string
          ): sap.ui.comp.smartfilterbar.SelectOption;
          /**
           * Sets a new value for property {@link #getOperator operator}.
           *
           * The operator for a select option. The default value is EQ "for equals".
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `EQ`.
           */
          setOperator(
            /**
             * New value for property `operator`
             */
            sOperator: sap.ui.model.FilterOperator
          ): sap.ui.comp.smartfilterbar.SelectOption;
          /**
           * Sets a new value for property {@link #getSign sign}.
           *
           * The sign for a Select Option. Possible values are I for include or E for exclude.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `I`.
           */
          setSign(
            /**
             * New value for property `sign`
             */
            sSign: sap.ui.comp.smartfilterbar.SelectOptionSign
          ): sap.ui.comp.smartfilterbar.SelectOption;
        }
        /**
         * The SmartFilterBar control uses the OData metadata of an entity in order to create a FilterBar.
         *  Whether a field is visible on the FilterBar, supports type-ahead and value help, for example, is automatically
         * determined. When you use control configurations and group configurations it is possible to configure
         * the FilterBar and adapt it according to your needs.
         *  **Note:**
         *  Most of the attributes/properties are not dynamic and cannot be changed once the control has been initialized.
         */
        class SmartFilterBar extends sap.ui.comp.filterbar.FilterBar {
          /**
           * Constructor for a new smartfilterbar/SmartFilterBar.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           * See:
           * 	{@link topic:7bcdffc056a94731b4341db73251e32b Smart Filter Bar}
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sID?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: SmartFilterBarOpts
          );

          /**
           * Adds some controlConfiguration to the aggregation {@link #getControlConfiguration controlConfiguration}.
           */
          addControlConfiguration(
            /**
             * The controlConfiguration to add; if empty, nothing is inserted
             */
            oControlConfiguration: sap.ui.comp.smartfilterbar.ControlConfiguration
          ): sap.ui.comp.smartfilterbar.SmartFilterBar;
          /**
           * Searches for the filter field having the specified OData key and adds this filter field to the advanced
           * area. If there is no corresponding field in the OData metadata, this method has no effect.
           */
          addFieldToAdvancedArea(
            /**
             * The key like specified in the OData metadata
             */
            sKey: string
          ): void;
          /**
           * Adds some groupConfiguration to the aggregation {@link #getGroupConfiguration groupConfiguration}.
           */
          addGroupConfiguration(
            /**
             * The groupConfiguration to add; if empty, nothing is inserted
             */
            oGroupConfiguration: sap.ui.comp.smartfilterbar.GroupConfiguration
          ): sap.ui.comp.smartfilterbar.SmartFilterBar;
          /**
           * Applies the current variant as opposed to `fetchVariant`. The variant is retrieved via the flex layer.
           */
          // @ts-ignore
          applyVariant(
            /**
             * The variant that must be applied. oVariant must contain a valid JSON object.
             */
            oVariant: object
          ): void;
          /**
           * @SINCE 1.36
           *
           * Attaches event handler `fnFunction` to the {@link #event:pendingChange pendingChange} event of this `sap.ui.comp.smartfilterbar.SmartFilterBar`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartfilterbar.SmartFilterBar` itself.
           *
           * This event is fired after the pending state of the `FilterBar` control changes.
           */
          attachPendingChange(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartfilterbar.SmartFilterBar`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.smartfilterbar.SmartFilterBar;
          /**
           * Destroys all the controlConfiguration in the aggregation {@link #getControlConfiguration controlConfiguration}.
           */
          destroyControlConfiguration(): sap.ui.comp.smartfilterbar.SmartFilterBar;
          /**
           * Destroys all the groupConfiguration in the aggregation {@link #getGroupConfiguration groupConfiguration}.
           */
          destroyGroupConfiguration(): sap.ui.comp.smartfilterbar.SmartFilterBar;
          /**
           * @SINCE 1.36
           *
           * Detaches event handler `fnFunction` from the {@link #event:pendingChange pendingChange} event of this
           * `sap.ui.comp.smartfilterbar.SmartFilterBar`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachPendingChange(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smartfilterbar.SmartFilterBar;
          /**
           * Ensures the associated ValueHelpProvider is loaded.
           */
          ensureLoadedValueHelp(
            /**
             * is the name of the property from the entity type which is associated with a Value Help.
             */
            sFieldName: string
          ): void;
          /**
           * Creates a new subclass of class sap.ui.comp.smartfilterbar.SmartFilterBar with name `sClassName` and
           * enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.comp.filterbar.FilterBar.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Retrieves the currently visible filters and the values for storing them as variants. The result will
           * be passed on as a JSON object to the callee smart variant control.
           */
          // @ts-ignore
          fetchVariant(): object;
          /**
           * @SINCE 1.36
           *
           * Fires event {@link #event:pendingChange pendingChange} to attached listeners.
           */
          firePendingChange(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.ui.comp.smartfilterbar.SmartFilterBar;
          /**
           * @EXPERIMENTAL (since 1.42.0)
           *
           * Returns the binding paths for the parameters.
           */
          getAnalyticBindingPath(): string;
          /**
           * Returns an instance of the control for the basic search.
           */
          getBasicSearchControl(): object;
          /**
           * Gets current value of property {@link #getBasicSearchFieldName basicSearchFieldName}.
           *
           * Name of the field that is the focus of the basic search.
           */
          getBasicSearchFieldName(): string;
          /**
           * @SINCE 1.42.0
           * @EXPERIMENTAL (since 1.42.0)
           *
           * Gets current value of property {@link #getConsiderAnalyticalParameters considerAnalyticalParameters}.
           *
           * Indicates if the analytical parameters (SelectionVariant) must be taken into consideration.
           *
           * Default value is `false`.
           */
          getConsiderAnalyticalParameters(): boolean;
          /**
           * @SINCE 1.48.0
           *
           * Gets current value of property {@link #getConsiderSelectionVariants considerSelectionVariants}.
           *
           * Indicates if the annotation `com.sap.vocabularies.UI.v1.SelectionVariant` is taken into account.
           *
           * Default value is `false`.
           */
          getConsiderSelectionVariants(): boolean;
          /**
           * Returns the control (if any) with the specified key (Property name in OData entity). Use just the property
           * name as the key when getting a control from the basic area. Example: "CompanyCode" & Use "EntityName/GroupName.FieldName"
           * format to get controls from groups. Example:"Account.CompanyCode"
           */
          getControlByKey(
            /**
             * The key as present in the OData property name/control configuration
             */
            sKey: string
          ): object | sap.ui.core.Control;
          /**
           * Gets content of aggregation {@link #getControlConfiguration controlConfiguration}.
           *
           * Using control configurations you can add additional configuration to filter fields, for example set custom
           * labels, change the order of fields, or change the filter field control type. **Note:** Changing the values
           * here after the SmartFilter is initialized (`initialise` event was fired) has no effect.
           */
          getControlConfiguration(): sap.ui.comp.smartfilterbar.ControlConfiguration[];
          /**
           * @SINCE 1.48.0
           *
           * Gets current value of property {@link #getDefaultSelectionVariantName defaultSelectionVariantName}.
           *
           * Determines one specific variant that is based on the `com.sap.vocabularies.UI.v1.SelectionVariant` annotation,
           * which is then used as the default variant.
           *  This property is only relevant in case `considerSelectionVariants` is set to `true` and will only be
           * applied if there is no user-defined default variant specified.
           */
          getDefaultSelectionVariantName(): string;
          /**
           * @SINCE 1.75
           *
           * Reads the descriptions for given filters and value keys.
           */
          // @ts-ignore
          getDescriptionForKeys(
            /**
             * List of filters with value keys to be retrieved
             */
            aFiltersWithKeyValues: any[]
          ): void;
          /**
           * Gets current value of property {@link #getEnableBasicSearch enableBasicSearch}.
           *
           * Enables the basic search field. The entered value can be accessed with {@link sap.ui.comp.smartfilterbar.SmartFilterBar#getParameters}.
           * **Note:** When the SmartFilterBar control is used with a {@link sap.ui.comp.smarttable.SmartTable} control
           * the parameters are handled automatically. Therefore, this must only be enabled for OData service entities
           * that support basic search.
           *
           * Default value is `false`.
           */
          getEnableBasicSearch(): boolean;
          /**
           * Gets current value of property {@link #getEntitySet entitySet}.
           *
           * The OData entity set whose metadata is used to create the SmartFilterBar. **Note:** Changing this value
           * after the SmartFilterBar is initialized (`initialise` event was fired) has no effect.
           */
          getEntitySet(): string;
          /**
           * @deprecated (since 1.40) - Use `entitySet` property instead of this one, to enable V4 annotation support
           *
           * Gets current value of property {@link #getEntityType entityType}.
           *
           * The OData entity type whose metadata is used to create the SmartFilterBar. **Note:** Changing this value
           * after the SmartFilterBar is initialized (`initialise` event was fired) has no effect.
           */
          getEntityType(): string;
          /**
           * Get the filter context url.
           */
          getFilterContextUrl(): string;
          /**
           * Returns the data currently set in the filter data model.
           */
          getFilterData(
            /**
             * Also include empty/invisible fields filter data
             */
            bAllFilterData: boolean
          ): object;
          /**
           * Returns the data currently set in the filter data model as string.
           */
          getFilterDataAsString(
            /**
             * Also include empty/invisible fields filter data
             */
            bAllFilterData: boolean
          ): string;
          /**
           * Returns an array of filters (sap.ui.model.Filter instances), for visible fields, that can be used to
           * restrict the query result from OData.
           *  The result of this method can directly be used during aggregation binding or OData read.
           */
          getFilters(
            /**
             * optional array of field names that filters should be returned, if not given all visible filters are returned
             */
            aFieldNames?: string[]
          ): sap.ui.model.Filter[];
          /**
           * Returns all filter items
           * 	 - Containing a value
           * 	 - With the `visible` property set to `true`
           * 	 - That are either flagged as `partOfCurrentVariant` or `visibleInFilterBar`
           * 	 - That are not custom filters  Even hidden filters will be considered as long as the mentioned
           * 			criteria is fullfilled.
           */
          getFiltersWithValues(): sap.ui.comp.filterbar.FilterGroupItem[];
          /**
           * Gets content of aggregation {@link #getGroupConfiguration groupConfiguration}.
           *
           * Provides the possibility to add additional configuration to groups. Groups are used to show fields in
           * the advanced area of the SmartFilterBar. With additional configuration, you can for example set custom
           * labels or change the order of groups. **Note:** Changing the values here after the SmartFilter is initialized
           * (`initialise` event was fired) has no effect.
           */
          getGroupConfiguration(): sap.ui.comp.smartfilterbar.GroupConfiguration[];
          /**
           * @SINCE 1.40
           *
           * Gets current value of property {@link #getLiveMode liveMode}.
           *
           * If set the search will be automatically triggered, when a filter value was set via the change
           * event.
           *  **Note:** The liveMode only operates on non-mobile scenarios.
           *  Additionally, if liveMode is set, the following applies:
           * 	 - The error messagebox is not displayed, and the `showMessages` property is ignored.
           * 	 - The search is triggered after a variant has been selected.
           * 	 - Execute on Select for `VariantManagement` is not shown and not taken into account
           *
           * Default value is `false`.
           */
          getLiveMode(): boolean;
          /**
           * Returns a metadata object for class sap.ui.comp.smartfilterbar.SmartFilterBar.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Get the model data.
           */
          getModelData(): any;
          /**
           * @SINCE 1.48
           *
           * Gets current value of property {@link #getNavigationProperties navigationProperties}.
           *
           * This property is only evaluated if the property {@link sap.ui.comp.smartfilterbar.SmartFilterBar#getUseProvidedNavigationProperties}
           * is set to `true`. It contains a comma-separated list of navigation property names which are checked for
           * filters.
           *
           *
           * Default value is `empty string`.
           */
          getNavigationProperties(): string;
          /**
           * @SINCE 1.53.0
           *
           * Returns the binding paths for the parameters. This API can be used for both analytical and non-analytical
           * services. **Note**For analytical services, the API is NOT stable yet. Use at your own risk.
           */
          getParameterBindingPath(): string;
          /**
           * Get the parameter context url.
           */
          getParameterContextUrl(): string;
          /**
           * Returns a parameter object that can be used to restrict the result of an OData service request if a basic
           * search is performed. Example of a returned object:
           *
           *
           * ```javascript
           *
           * {
           * 	"custom": {
           * 		"search-focus": "MySearchFocusFieldName",
           * 		"search": "MySearchString"
           * 	}
           * }
           * ```
           *
           *
           * These parameters can be handed over as custom parameters, for example, to the {@link sap.ui.model.odata.v2.ODataListBinding}.
           */
          getParameters(): object;
          /**
           * @deprecated (since 1.29) - Set an ODataModel as the main model on your control/view instead
           *
           * Gets current value of property {@link #getResourceUri resourceUri}.
           *
           * Optional. The OData service URL. If it is not specified, the service URL from the OData model (this.getModel())
           * will be used. **Note:** Changing this value after the SmartFilterBar is initialized (initialise event
           * was fired) has no effect.
           */
          getResourceUri(): string;
          /**
           * @SINCE 1.40
           *
           * Gets current value of property {@link #getShowMessages showMessages}.
           *
           * If set to `false` eventual errors during the search, will not be displayed in a messagebox.
           *
           * Default value is `true`.
           */
          getShowMessages(): boolean;
          /**
           * @SINCE 1.38
           *
           * ID of the element which is the current target of the association {@link #getSmartVariant smartVariant},
           * or `null`.
           */
          getSmartVariant(): sap.ui.core.ID;
          /**
           * @SINCE 1.44.0
           * @EXPERIMENTAL (since 1.44.0)
           *
           * Gets current value of property {@link #getSuppressSelection suppressSelection}.
           *
           * If set to `true` all search requests will be ignored. This functionality is only intended to be used
           * internally to enable an optimal solution when the filter bar is controlled by the smart templates. NOTE:
           * As long as this property is set to `true`, all search requests will be neglected.
           *
           * Default value is `false`.
           */
          getSuppressSelection(): boolean;
          /**
           * @SINCE 1.46.0
           *
           * Gets current value of property {@link #getUseDateRangeType useDateRangeType}.
           *
           * If set to `true` all date fields with filter restriction `interval` will be treated as `DateTimeRange`
           * filters. The `useDateRangeType` can be set only once during initialization. **Note:** If this property
           * is set to `true` and any date filters with filter restriction `interval` were stored as part of a variant,
           * the values of these filters cannot be applied. If this property is set to `false`, any previously stored
           * filters which were treated as type `DateTimeRange` based on the former setting, cannot be converted back
           * to the standard date interval.
           */
          getUseDateRangeType(): boolean;
          /**
           * @SINCE 1.48
           *
           * Gets current value of property {@link #getUseProvidedNavigationProperties useProvidedNavigationProperties}.
           *
           * If set to `true`, only the navigation properties mentioned in property {@link sap.ui.comp.smartfilterbar.SmartFilterBarl#getNavigationProperties}
           * are checked for further filters.
           *
           * Default value is `false`.
           */
          getUseProvidedNavigationProperties(): boolean;
          /**
           * Checks for the provided `sap.ui.comp.smartfilterbar.ControlConfiguration` in the aggregation {@link #getControlConfiguration
           * controlConfiguration}. and returns its index if found or -1 otherwise.
           */
          indexOfControlConfiguration(
            /**
             * The controlConfiguration whose index is looked for
             */
            oControlConfiguration: sap.ui.comp.smartfilterbar.ControlConfiguration
          ): number;
          /**
           * Checks for the provided `sap.ui.comp.smartfilterbar.GroupConfiguration` in the aggregation {@link #getGroupConfiguration
           * groupConfiguration}. and returns its index if found or -1 otherwise.
           */
          indexOfGroupConfiguration(
            /**
             * The groupConfiguration whose index is looked for
             */
            oGroupConfiguration: sap.ui.comp.smartfilterbar.GroupConfiguration
          ): number;
          /**
           * Inserts a controlConfiguration into the aggregation {@link #getControlConfiguration controlConfiguration}.
           */
          insertControlConfiguration(
            /**
             * The controlConfiguration to insert; if empty, nothing is inserted
             */
            oControlConfiguration: sap.ui.comp.smartfilterbar.ControlConfiguration,
            /**
             * The `0`-based index the controlConfiguration should be inserted at; for a negative value of `iIndex`,
             * the controlConfiguration is inserted at position 0; for a value greater than the current size of the
             * aggregation, the controlConfiguration is inserted at the last position
             */
            iIndex: number
          ): sap.ui.comp.smartfilterbar.SmartFilterBar;
          /**
           * Inserts a groupConfiguration into the aggregation {@link #getGroupConfiguration groupConfiguration}.
           */
          insertGroupConfiguration(
            /**
             * The groupConfiguration to insert; if empty, nothing is inserted
             */
            oGroupConfiguration: sap.ui.comp.smartfilterbar.GroupConfiguration,
            /**
             * The `0`-based index the groupConfiguration should be inserted at; for a negative value of `iIndex`, the
             * groupConfiguration is inserted at position 0; for a value greater than the current size of the aggregation,
             * the groupConfiguration is inserted at the last position
             */
            iIndex: number
          ): sap.ui.comp.smartfilterbar.SmartFilterBar;
          /**
           * Checks whether the control is initialised
           */
          isInitialised(): boolean;
          /**
           * Determines if the custom data 'dateFormatSettings' is set with UTC mode `true`
           */
          isInUTCMode(): boolean;
          /**
           * Checks the pending state of the FilterBar control
           */
          isPending(): boolean;
          /**
           * Removes all the controls from the aggregation {@link #getControlConfiguration controlConfiguration}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllControlConfiguration(): sap.ui.comp.smartfilterbar.ControlConfiguration[];
          /**
           * Removes all the controls from the aggregation {@link #getGroupConfiguration groupConfiguration}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllGroupConfiguration(): sap.ui.comp.smartfilterbar.GroupConfiguration[];
          /**
           * Removes a controlConfiguration from the aggregation {@link #getControlConfiguration controlConfiguration}.
           */
          removeControlConfiguration(
            /**
             * The controlConfiguration to remove or its index or id
             */
            vControlConfiguration:
              | number
              | string
              | sap.ui.comp.smartfilterbar.ControlConfiguration
          ): sap.ui.comp.smartfilterbar.ControlConfiguration;
          /**
           * Removes a groupConfiguration from the aggregation {@link #getGroupConfiguration groupConfiguration}.
           */
          removeGroupConfiguration(
            /**
             * The groupConfiguration to remove or its index or id
             */
            vGroupConfiguration:
              | number
              | string
              | sap.ui.comp.smartfilterbar.GroupConfiguration
          ): sap.ui.comp.smartfilterbar.GroupConfiguration;
          /**
           * Overwrites method from base class. Called when user clicks the search button of the FilterBar. The search
           * is executed asynchronously per default, but can be forced to synchronously execution by providing the
           * `bSync` set to `true`. Synchronous mode is only supported for non live mode scenarios. In the synchroneous
           * mode a mandatory check prior to the search execution is made.
           */
          // @ts-ignore
          search(
            /**
             * Indicates if the search should be triggered synchronously
             */
            bSync: boolean
          ): boolean | undefined;
          /**
           * Sets a new value for property {@link #getBasicSearchFieldName basicSearchFieldName}.
           *
           * Name of the field that is the focus of the basic search.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setBasicSearchFieldName(
            /**
             * New value for property `basicSearchFieldName`
             */
            sBasicSearchFieldName: string
          ): sap.ui.comp.smartfilterbar.SmartFilterBar;
          /**
           * @SINCE 1.42.0
           * @EXPERIMENTAL (since 1.42.0)
           *
           * Sets a new value for property {@link #getConsiderAnalyticalParameters considerAnalyticalParameters}.
           *
           * Indicates if the analytical parameters (SelectionVariant) must be taken into consideration.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setConsiderAnalyticalParameters(
            /**
             * New value for property `considerAnalyticalParameters`
             */
            bConsiderAnalyticalParameters: boolean
          ): sap.ui.comp.smartfilterbar.SmartFilterBar;
          /**
           * @SINCE 1.48.0
           *
           * Sets a new value for property {@link #getConsiderSelectionVariants considerSelectionVariants}.
           *
           * Indicates if the annotation `com.sap.vocabularies.UI.v1.SelectionVariant` is taken into account.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setConsiderSelectionVariants(
            /**
             * New value for property `considerSelectionVariants`
             */
            bConsiderSelectionVariants: boolean
          ): sap.ui.comp.smartfilterbar.SmartFilterBar;
          /**
           * @SINCE 1.48.0
           *
           * Sets a new value for property {@link #getDefaultSelectionVariantName defaultSelectionVariantName}.
           *
           * Determines one specific variant that is based on the `com.sap.vocabularies.UI.v1.SelectionVariant` annotation,
           * which is then used as the default variant.
           *  This property is only relevant in case `considerSelectionVariants` is set to `true` and will only be
           * applied if there is no user-defined default variant specified.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setDefaultSelectionVariantName(
            /**
             * New value for property `defaultSelectionVariantName`
             */
            sDefaultSelectionVariantName: string
          ): sap.ui.comp.smartfilterbar.SmartFilterBar;
          /**
           * Sets a new value for property {@link #getEnableBasicSearch enableBasicSearch}.
           *
           * Enables the basic search field. The entered value can be accessed with {@link sap.ui.comp.smartfilterbar.SmartFilterBar#getParameters}.
           * **Note:** When the SmartFilterBar control is used with a {@link sap.ui.comp.smarttable.SmartTable} control
           * the parameters are handled automatically. Therefore, this must only be enabled for OData service entities
           * that support basic search.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setEnableBasicSearch(
            /**
             * New value for property `enableBasicSearch`
             */
            bEnableBasicSearch: boolean
          ): sap.ui.comp.smartfilterbar.SmartFilterBar;
          /**
           * @deprecated (since 1.40) - Use `entitySet` property instead of this one, to enable V4 annotation support
           *
           * Sets a new value for property {@link #getEntityType entityType}.
           *
           * The OData entity type whose metadata is used to create the SmartFilterBar. **Note:** Changing this value
           * after the SmartFilterBar is initialized (`initialise` event was fired) has no effect.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setEntityType(
            /**
             * New value for property `entityType`
             */
            sEntityType: string
          ): sap.ui.comp.smartfilterbar.SmartFilterBar;
          /**
           * Sets the data in the filter data model. The follow-on filterChange event is only triggered when none
           * _CUSTOM data is set.
           */
          setFilterData(
            /**
             * The JSON data in the filter bar
             */
            oJson: object,
            /**
             * Replace existing filter data
             */
            bReplace: boolean
          ): void;
          /**
           * Sets the data in the filter data model as string.
           */
          setFilterDataAsString(
            /**
             * The JSON data in the filter bar
             */
            sJson: string,
            /**
             * Replace existing filter data
             */
            bReplace: boolean
          ): void;
          /**
           * @SINCE 1.40
           *
           * Sets a new value for property {@link #getLiveMode liveMode}.
           *
           * If set the search will be automatically triggered, when a filter value was set via the change
           * event.
           *  **Note:** The liveMode only operates on non-mobile scenarios.
           *  Additionally, if liveMode is set, the following applies:
           * 	 - The error messagebox is not displayed, and the `showMessages` property is ignored.
           * 	 - The search is triggered after a variant has been selected.
           * 	 - Execute on Select for `VariantManagement` is not shown and not taken into account
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setLiveMode(
            /**
             * New value for property `liveMode`
             */
            bLiveMode: boolean
          ): sap.ui.comp.smartfilterbar.SmartFilterBar;
          /**
           * @SINCE 1.48
           *
           * Sets a new value for property {@link #getNavigationProperties navigationProperties}.
           *
           * This property is only evaluated if the property {@link sap.ui.comp.smartfilterbar.SmartFilterBar#getUseProvidedNavigationProperties}
           * is set to `true`. It contains a comma-separated list of navigation property names which are checked for
           * filters.
           *
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `empty string`.
           */
          setNavigationProperties(
            /**
             * New value for property `navigationProperties`
             */
            sNavigationProperties: string
          ): sap.ui.comp.smartfilterbar.SmartFilterBar;
          /**
           * @deprecated (since 1.29) - Set an ODataModel as the main model on your control/view instead
           *
           * Uses the provided resource URI to fetch the OData metadata instead of using the default ODataModel (getModel()).
           * You should only set this if you intend to get the metadata for the filter bar from elsewhere!
           */
          setResourceUri(
            /**
             * The URI of the oData service from which the metadata would be read
             */
            sResourceUri: string
          ): sap.ui.comp.smartfilterbar.SmartFilterBar;
          /**
           * @SINCE 1.40
           *
           * Sets a new value for property {@link #getShowMessages showMessages}.
           *
           * If set to `false` eventual errors during the search, will not be displayed in a messagebox.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setShowMessages(
            /**
             * New value for property `showMessages`
             */
            bShowMessages: boolean
          ): sap.ui.comp.smartfilterbar.SmartFilterBar;
          /**
           * @SINCE 1.38
           *
           * Sets the associated {@link #getSmartVariant smartVariant}.
           */
          setSmartVariant(
            /**
             * ID of an element which becomes the new target of this smartVariant association; alternatively, an element
             * instance may be given
             */
            oSmartVariant:
              | sap.ui.core.ID
              | sap.ui.comp.smartvariants.SmartVariantManagement
          ): sap.ui.comp.smartfilterbar.SmartFilterBar;
          /**
           * @SINCE 1.44.0
           * @EXPERIMENTAL (since 1.44.0)
           *
           * Sets a new value for property {@link #getSuppressSelection suppressSelection}.
           *
           * If set to `true` all search requests will be ignored. This functionality is only intended to be used
           * internally to enable an optimal solution when the filter bar is controlled by the smart templates. NOTE:
           * As long as this property is set to `true`, all search requests will be neglected.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setSuppressSelection(
            /**
             * New value for property `suppressSelection`
             */
            bSuppressSelection: boolean
          ): sap.ui.comp.smartfilterbar.SmartFilterBar;
          /**
           * @SINCE 1.46.0
           *
           * Sets a new value for property {@link #getUseDateRangeType useDateRangeType}.
           *
           * If set to `true` all date fields with filter restriction `interval` will be treated as `DateTimeRange`
           * filters. The `useDateRangeType` can be set only once during initialization. **Note:** If this property
           * is set to `true` and any date filters with filter restriction `interval` were stored as part of a variant,
           * the values of these filters cannot be applied. If this property is set to `false`, any previously stored
           * filters which were treated as type `DateTimeRange` based on the former setting, cannot be converted back
           * to the standard date interval.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setUseDateRangeType(
            /**
             * New value for property `useDateRangeType`
             */
            bUseDateRangeType: boolean
          ): sap.ui.comp.smartfilterbar.SmartFilterBar;
          /**
           * @SINCE 1.48
           *
           * Sets a new value for property {@link #getUseProvidedNavigationProperties useProvidedNavigationProperties}.
           *
           * If set to `true`, only the navigation properties mentioned in property {@link sap.ui.comp.smartfilterbar.SmartFilterBarl#getNavigationProperties}
           * are checked for further filters.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setUseProvidedNavigationProperties(
            /**
             * New value for property `useProvidedNavigationProperties`
             */
            bUseProvidedNavigationProperties: boolean
          ): sap.ui.comp.smartfilterbar.SmartFilterBar;
          /**
           * Verify if all mandatory filters or parameters have values.
           */
          validateMandatoryFields(): boolean;
          /**
           * Verifies if search is possible.
           */
          verifySearchAllowed(): object;
          /**
           * @SINCE 1.36
           *
           * Attaches event handler `fnFunction` to the {@link #event:pendingChange pendingChange} event of this `sap.ui.comp.smartfilterbar.SmartFilterBar`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartfilterbar.SmartFilterBar` itself.
           *
           * This event is fired after the pending state of the `FilterBar` control changes.
           */
          attachPendingChange(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartfilterbar.SmartFilterBar`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.smartfilterbar.SmartFilterBar;
        }
        /**
         * The available control types to configure the internal control selection of a SmartFilterBar control.
         */
        enum ControlType {
          /**
           * Shows field based on metadata.
           */
          auto,
          /**
           * Shows a date picker field.
           */
          date,
          /**
           * Shows a date time picker field.
           */
          dateTimePicker,
          /**
           * Shows a drop down list field.
           */
          dropDownList,
          /**
           * Shows an input field.
           */
          input
        }
        /**
         * The different options to define display behavior for fields in the SmartFilter control.
         */
        enum DisplayBehaviour {
          /**
           * Shows values based on metadata.
           */
          auto,
          /**
           * Shows description and then an id in values.
           */
          descriptionAndId,
          /**
           * Shows only the description for values.
           */
          descriptionOnly,
          /**
           * Shows id and then a description in values.
           */
          idAndDescription,
          /**
           * Shows only the id for values.
           */
          idOnly
        }
        /**
         * The available filter types to configure the internal control of a SmartFilterBar control.
         */
        enum FilterType {
          /**
           * Restrict filter based on metadata.
           */
          auto,
          /**
           * Restrict filter to an interval.
           */
          interval,
          /**
           * Restrict filter to multiple entries.
           */
          multiple,
          /**
           * Restrict filter to a single entry.
           */
          single
        }
        /**
         * The different options to define mandatory state for fields in the SmartFilter control.
         */
        enum MandatoryType {
          /**
           * Shows values based on metadata.
           */
          auto,
          /**
           * Shows field as mandatory.
           */
          mandatory,
          /**
           * Shows field as not mandatory.
           */
          notMandatory
        }
        /**
         * The different options to define Sign for Select Options used in SmartFilter control.
         */
        enum SelectOptionSign {
          /**
           * Sign Exclude
           */
          E,
          /**
           * Sign Exclude
           */
          exclude,
          /**
           * Sign Include
           */
          I,
          /**
           * Sign Include
           */
          include
        }
      }

      namespace smartform {
        /**
         * @SINCE 1.56.0
         *
         * Marker interface for SmartForm layouts.
         */
        interface SmartFormLayout {}

        interface GroupOpts extends sap.ui.layout.form.FormContainerOpts {
          /**
           * Specifies whether the groups are rendered in a `ResponsiveLayout` with label on top of the group element.
           * Each group will be rendered in a new line.
           *
           * **Note:** If `Group` is assigned to a `SmartForm` control, this property is inherited from the `SmartForm`
           * control.
           *
           * So don't set it to a different value from the one in the `SmartForm` control. For performance reasons
           * it might make sense to set it manually to the same value as the one in the `SmartForm` control when creating
           * the `Group` element.
           */
          useHorizontalLayout?: boolean;

          /**
           * @deprecated (since 1.48.0) - please do not use this property as it does not have any effect on the current
           * layout of the `SmartForm` control.
           *
           * Specifies the minimal size in pixels of all group elements of the form if horizontal Layout is used.
           *
           * **Note:** If `Group` is assigned to a `SmartForm` control, this property is inherited from the `SmartForm`
           * control. So don't set it manually.
           */
          horizontalLayoutGroupElementMinWidth?: number;

          /**
           * Label for the group.
           */
          label?: string;

          /**
           * A `GroupElement` is a combination of one label and different controls associated to this label.
           */
          groupElements?:
            | sap.ui.comp.smartform.GroupElement[]
            | sap.ui.comp.smartform.GroupElement;

          /**
           * @deprecated (since 1.48.0) - please use `layoutData` aggregation instead.
           *
           * Layout to specify how the group shall be rendered (e.g. span and line-break)
           *
           * **Note:** Do not use `layout` and `layoutData` aggregations combined.
           */
          layout?: sap.ui.layout.GridData;
        }

        interface GroupElementOpts extends sap.ui.layout.form.FormElementOpts {
          /**
           * Specifies whether the groups shall be rendered in a `ResponsiveLayout` with label on top of the group
           * element. Each group will be rendered in a new line.
           *
           * **Note:** If `Group` is assigned to a `SmartForm` control, this property is inherited from the `SmartForm`
           * control.
           *
           * So don't set it to a different value from the one in the `SmartForm` control. For performance reasons
           * it might make sense to set it manually to the same value as the one in the `SmartForm` control when creating
           * the `GroupElement` element.
           */
          useHorizontalLayout?: boolean;

          /**
           * @deprecated (since 1.48.0) - please do not use this property as it does not have any effect on the current
           * layout of the `SmartForm` control.
           *
           * Specifies the minimal size in pixels of all group elements of the form if horizontal Layout is used.
           *
           * **Note:** If `Group` is assigned to a `SmartForm` control, this property is inherited from the `SmartForm`
           * control. So don't set it manually.
           */
          horizontalLayoutGroupElementMinWidth?: number;

          /**
           * Index of element to be used for label determination
           */
          elementForLabel?: number;

          /**
           * The event is fired after the visibility of the control has changed.
           */
          visibleChanged?: Function;

          /**
           * Aggregation of controls to be displayed together with a label.
           *
           * **Warning:** Do not put any layout or other container controls in here. This could damage the visual
           * layout, keyboard support and screen-reader support. Only form controls are allowed. Views are also not
           * supported. Allowed controls implement the interface `sap.ui.core.IFormContent`.
           */
          elements?: sap.ui.core.Control[] | sap.ui.core.Control;
        }

        interface LayoutOpts extends sap.ui.core.ElementOpts {
          /**
           * @SINCE 1.38.0
           *
           * Default span for labels in extra large size.
           */
          labelSpanXL?: number;

          /**
           * Default span for labels in large size. This span is only used if more than 1 container is in one line,
           * if only 1 container is in the line the `labelSpanM` value is used.
           */
          labelSpanL?: number;

          /**
           * Default span for labels in medium size. This property is used for full size containers. If more than
           * one Container is in one line, `labelSpanL` is used.
           */
          labelSpanM?: number;

          /**
           * Default span for labels in small size.
           */
          labelSpanS?: number;

          /**
           * @SINCE 1.38.0
           *
           * Number of grid cells that are empty at the end of each line on extra large size.
           */
          emptySpanXL?: number;

          /**
           * Number of grid cells that are empty at the end of each line on large size.
           */
          emptySpanL?: number;

          /**
           * Number of grid cells that are empty at the end of each line on medium size.
           */
          emptySpanM?: number;

          /**
           * Number of grid cells that are empty at the end of each line on small size.
           */
          emptySpanS?: number;

          /**
           * @SINCE 1.38.0
           *
           * Number of columns for extra large size.
           *  The number of columns for extra large size must not be smaller than the number of columns for large
           * size.
           */
          columnsXL?: number;

          /**
           * Number of columns for large size.
           *  The number of columns for large size must not be smaller than the number of columns for medium size.
           */
          columnsL?: number;

          /**
           * Number of columns for medium size.
           */
          columnsM?: number;

          /**
           * @SINCE 1.34.1
           *
           * If the `SmartForm` contains only one single Group and this property is set, the Group is displayed using
           * the full size of the `SmartForm`. In this case the properties `columnsL` and `columnsM` are ignored.
           *  In all other cases the Group is displayed in the size of one column.
           */
          singleGroupFullSize?: boolean;

          /**
           * @SINCE 1.38.0
           *
           * Breakpoint (in pixel) between large size and extra large (XL) size.
           */
          breakpointXL?: number;

          /**
           * Breakpoint (in pixel) between Medium size and Large size.
           */
          breakpointL?: number;

          /**
           * reakpoint (in pixel) between Small size and Medium size.
           */
          breakpointM?: number;

          /**
           * A string type that represents Grid's span values for large, medium and small screens. Allowed values
           * are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container
           * has to take, for example: "L2 M4 S6", "M12", "s10" or "l4 m4". Note that the parameters has to be provided
           * in the order large medium small.
           *  The value set here will be set to all group elements when used with horizontal layout (`SmartForm` property
           * `useHorizontalLayout`)
           */
          gridDataSpan?: sap.ui.layout.GridSpan;
        }

        interface SmartFormOpts extends sap.ui.core.ControlOpts {
          /**
           * Title of the form.
           */
          title?: string;

          /**
           * Specifies whether the groups are rendered in a {@link sap.ui.layout.form.ResponsiveLayout ResponsiveLayout}
           * with the label above the field. Each group is rendered in a new line.
           *
           * **Note:** This property should no longer be used. To arrange the fields in columns, `ColumnLayout` should
           * be used in the `layout` property.
           *
           * **Note:** The value of this property will be passed on to the `useHorizontalLayout` property of all `Group`
           * and `GroupElement` elements.
           */
          useHorizontalLayout?: boolean;

          /**
           * @deprecated (since 1.48.0) - please do not use this property as it does not have any effect on the current
           * layout of the `SmartForm` control.
           *
           * Specifies the minimal size in pixels of all group elements of the form if the horizontal layout is used.
           */
          horizontalLayoutGroupElementMinWidth?: number;

          /**
           * Specifies whether a check button is added to the toolbar.
           */
          checkButton?: boolean;

          /**
           * CSV of entity types for which the flexibility features are available.
           *  For more information about SAPUI5 flexibility, refer to the Developer Guide.
           *  **Note:** No validation is done. Please ensure that you do not add spaces or special characters.
           */
          entityType?: string;

          /**
           * Specifies whether the control is expandable. Per default the control is not rendered as expanded.
           */
          expandable?: boolean;

          /**
           * If expandable, this property indicates whether the state is expanded or not. If expanded, then the toolbar
           * (if available) and the content is rendered; if expanded is false, then only the headerText/headerToolbar
           * is rendered.
           */
          expanded?: boolean;

          /**
           * If set to `true`, a button to toggle the `editable` property is shown in the toolbar.
           */
          editTogglable?: boolean;

          /**
           * Applies a device-specific and theme-specific line height and label alignment to the form rows if the
           * form has editable content. If set, all (not only the editable) rows of the form will get the line height
           * of editable fields.
           *
           * The labels inside the form will be rendered by default in the according mode.
           *
           * **Note:** The setting of this property will be passed to all `SmartField` controls inside the form, so
           * they will be editable if the form is editable.
           *
           * **Warning:** The setting of this property will not be passed to controls other than `SmartField`. For
           * example, `Input` controls in a form with `editable` set to `false` are still editable.
           *
           * If controls other than `SmartField` controls are used, and the edit mode of their control is not set
           * correctly, this might lead to visual issues. The labels and fields might be misaligned, the labels might
           * be rendered in the wrong mode, and the spacing between the single controls might be wrong. Also, controls
           * that do not fit the mode might be rendered incorrectly.
           */
          editable?: boolean;

          /**
           * CSV of fields that must be ignored in the OData metadata by the SmartForm control.
           *  **Note:**
           *  No validation is done. Please ensure that you do not add spaces or special characters.
           */
          ignoredFields?: string;

          /**
           * Specifies whether the form enables flexibility features, such as adding new fields.
           *  For more information about SAPUI5 flexibility, refer to the Developer Guide.
           */
          flexEnabled?: boolean;

          /**
           * This event is fired when the editable property is toggled.
           */
          editToggled?: Function;

          /**
           * This event is fired after check was performed.
           */
          checked?: Function;

          /**
           * Groups are used to group form elements.
           */
          groups?: sap.ui.comp.smartform.Group[] | sap.ui.comp.smartform.Group;

          /**
           * Layout settings to adjust the used layout.
           */
          layout?: sap.ui.comp.smartform.SmartFormLayout;

          /**
           * The Semantic Object Controller allows the user to specify and overwrite functionality for semantic object
           * navigation.
           */
          semanticObjectController?: sap.ui.comp.navpopover.SemanticObjectController;

          /**
           * An additional toolbar that can be added by the users, which can contain further custom buttons, controls,
           * etc.
           */
          customToolbar?: sap.m.Toolbar;

          /**
           * @SINCE 1.56.0
           *
           * Association to controls / IDs that label this control (see WAI-ARIA attribute `aria-labelledby`).
           */
          ariaLabelledBy?: sap.ui.core.Control[] | string[];
        }
        /**
         * Groups are used to group group elements.
         */
        class Group extends sap.ui.layout.form.FormContainer {
          /**
           * Constructor for a new smartform/Group.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: GroupOpts
          );

          /**
           * Adds some CustomData into the aggregation `customData`.
           *
           * **Note:** `customData` that is used by the `SmartField` control itself is also added to the `GroupElement`
           * elements and the `SmartField` controls in the children hierarchy. Additional `customData` that is not
           * used by the `SmartField` control internally might not be added.
           */
          // @ts-ignore
          addCustomData(
            /**
             * the customData to add; if empty, nothing is added
             */
            oCustomData: sap.ui.core.CustomData
          ): sap.ui.comp.smartform.GroupElement;
          /**
           * Adds some groupElement to the aggregation {@link #getGroupElements groupElements}.
           */
          addGroupElement(
            /**
             * The groupElement to add; if empty, nothing is inserted
             */
            oGroupElement: sap.ui.comp.smartform.GroupElement
          ): sap.ui.comp.smartform.Group;
          /**
           * Destroys all the groupElements in the aggregation {@link #getGroupElements groupElements}.
           */
          destroyGroupElements(): sap.ui.comp.smartform.Group;
          /**
           * @deprecated (since 1.48.0) - please use `layoutData` aggregation instead.
           *
           * Destroys the layout in the aggregation {@link #getLayout layout}.
           */
          destroyLayout(): sap.ui.comp.smartform.Group;
          /**
           * Creates a new subclass of class sap.ui.comp.smartform.Group with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.layout.form.FormContainer.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets content of aggregation {@link #getGroupElements groupElements}.
           *
           * A `GroupElement` is a combination of one label and different controls associated to this label.
           */
          getGroupElements(): sap.ui.comp.smartform.GroupElement[];
          /**
           * @deprecated (since 1.48.0) - please do not use this property as it does not have any effect on the current
           * layout of the `SmartForm` control.
           *
           * Gets current value of property {@link #getHorizontalLayoutGroupElementMinWidth horizontalLayoutGroupElementMinWidth}.
           *
           * Specifies the minimal size in pixels of all group elements of the form if horizontal Layout is used.
           *
           * **Note:** If `Group` is assigned to a `SmartForm` control, this property is inherited from the `SmartForm`
           * control. So don't set it manually.
           */
          getHorizontalLayoutGroupElementMinWidth(): number;
          /**
           * Gets current value of property {@link #getLabel label}.
           *
           * Label for the group.
           */
          getLabel(): string;
          /**
           * @deprecated (since 1.48.0) - please use `layoutData` aggregation instead.
           *
           * Gets content of aggregation {@link #getLayout layout}.
           *
           * Layout to specify how the group shall be rendered (e.g. span and line-break)
           *
           * **Note:** Do not use `layout` and `layoutData` aggregations combined.
           */
          getLayout(): sap.ui.layout.GridData;
          /**
           * Returns a metadata object for class sap.ui.comp.smartform.Group.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getUseHorizontalLayout useHorizontalLayout}.
           *
           * Specifies whether the groups are rendered in a `ResponsiveLayout` with label on top of the group element.
           * Each group will be rendered in a new line.
           *
           * **Note:** If `Group` is assigned to a `SmartForm` control, this property is inherited from the `SmartForm`
           * control.
           *
           * So don't set it to a different value from the one in the `SmartForm` control. For performance reasons
           * it might make sense to set it manually to the same value as the one in the `SmartForm` control when creating
           * the `Group` element.
           */
          getUseHorizontalLayout(): boolean;
          /**
           * Checks for the provided `sap.ui.comp.smartform.GroupElement` in the aggregation {@link #getGroupElements
           * groupElements}. and returns its index if found or -1 otherwise.
           */
          indexOfGroupElement(
            /**
             * The groupElement whose index is looked for
             */
            oGroupElement: sap.ui.comp.smartform.GroupElement
          ): number;
          /**
           * Inserts some customData into the aggregation `customData`.
           *
           * **Note:** `customData` that is used by the `SmartField` control itself is also added to the `GroupElement`
           * elements and the `SmartField` controls in the children hierarchy. Additional `customData` that is not
           * used by the `SmartField` control internally might not be added.
           */
          // @ts-ignore
          insertCustomData(
            /**
             * the customData to insert; if empty, nothing is inserted
             */
            oCustomData: sap.ui.core.CustomData,
            /**
             * the 0-based index the customData should be inserted at; for a negative value of iIndex, the customData
             * is inserted at position 0; for a value greater than the current size of the aggregation, the customData
             * is inserted at the last position
             */
            iIndex: number
          ): sap.ui.comp.smartform.GroupElement;
          /**
           * Inserts a groupElement into the aggregation {@link #getGroupElements groupElements}.
           */
          insertGroupElement(
            /**
             * The groupElement to insert; if empty, nothing is inserted
             */
            oGroupElement: sap.ui.comp.smartform.GroupElement,
            /**
             * The `0`-based index the groupElement should be inserted at; for a negative value of `iIndex`, the groupElement
             * is inserted at position 0; for a value greater than the current size of the aggregation, the groupElement
             * is inserted at the last position
             */
            iIndex: number
          ): sap.ui.comp.smartform.Group;
          /**
           * Removes all the controls from the aggregation {@link #getGroupElements groupElements}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllGroupElements(): sap.ui.comp.smartform.GroupElement[];
          /**
           * Removes a groupElement from the aggregation {@link #getGroupElements groupElements}.
           */
          removeGroupElement(
            /**
             * The groupElement to remove or its index or id
             */
            vGroupElement: number | string | sap.ui.comp.smartform.GroupElement
          ): sap.ui.comp.smartform.GroupElement;
          /**
           * Setter for property `editable` of all smart fields in children hierarchy.
           */
          setEditMode(
            /**
             * new value for editable property of smart fields.
             */
            bEditMode: boolean
          ): sap.ui.comp.smartform.Group;
          /**
           * @deprecated (since 1.48.0) - please do not use this property as it does not have any effect on the current
           * layout of the `SmartForm` control.
           *
           * Sets a new value for property {@link #getHorizontalLayoutGroupElementMinWidth horizontalLayoutGroupElementMinWidth}.
           *
           * Specifies the minimal size in pixels of all group elements of the form if horizontal Layout is used.
           *
           * **Note:** If `Group` is assigned to a `SmartForm` control, this property is inherited from the `SmartForm`
           * control. So don't set it manually.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setHorizontalLayoutGroupElementMinWidth(
            /**
             * New value for property `horizontalLayoutGroupElementMinWidth`
             */
            iHorizontalLayoutGroupElementMinWidth: number
          ): sap.ui.comp.smartform.Group;
          /**
           * Sets a new value for property {@link #getLabel label}.
           *
           * Label for the group.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setLabel(
            /**
             * New value for property `label`
             */
            sLabel: string
          ): sap.ui.comp.smartform.Group;
          /**
           * @deprecated (since 1.48.0) - please use `layoutData` aggregation instead.
           *
           * Sets the aggregated {@link #getLayout layout}.
           */
          setLayout(
            /**
             * The layout to set
             */
            oLayout: sap.ui.layout.GridData
          ): sap.ui.comp.smartform.Group;
          /**
           * Sets a new value for property {@link #getUseHorizontalLayout useHorizontalLayout}.
           *
           * Specifies whether the groups are rendered in a `ResponsiveLayout` with label on top of the group element.
           * Each group will be rendered in a new line.
           *
           * **Note:** If `Group` is assigned to a `SmartForm` control, this property is inherited from the `SmartForm`
           * control.
           *
           * So don't set it to a different value from the one in the `SmartForm` control. For performance reasons
           * it might make sense to set it manually to the same value as the one in the `SmartForm` control when creating
           * the `Group` element.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setUseHorizontalLayout(
            /**
             * New value for property `useHorizontalLayout`
             */
            bUseHorizontalLayout: boolean
          ): sap.ui.comp.smartform.Group;
          /**
           * Sets a new value for property `visible`. If set to `false`, the `Group` is not rendered. Default value
           * is true.
           */
          // @ts-ignore
          setVisible(
            /**
             * New value for property `visible`
             */
            bVisible: boolean
          ): sap.ui.comp.smartform.Group;
        }
        /**
         * A GroupElement is a combination of one label and different controls associated to this label.
         */
        class GroupElement extends sap.ui.layout.form.FormElement {
          /**
           * Constructor for a new smartform/GroupElement.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: GroupElementOpts
          );

          /**
           * Adds some customData into the aggregation `customData`.
           *
           * **Note:** `customData` that is used by the `SmartField` control itself is also added to the `SmartField`
           * controls in the children hierarchy. Additional `customData` that is not used by the `SmartField` control
           * internally might not be added.
           */
          // @ts-ignore
          addCustomData(
            /**
             * the customData to add; if empty, nothing is added
             */
            oCustomData: sap.ui.core.CustomData
          ): sap.ui.comp.smartform.GroupElement;
          /**
           * Adds some element to the aggregation {@link #getElements elements}.
           */
          addElement(
            /**
             * The element to add; if empty, nothing is inserted
             */
            oElement: sap.ui.core.Control
          ): sap.ui.comp.smartform.GroupElement;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:visibleChanged visibleChanged} event of this
           * `sap.ui.comp.smartform.GroupElement`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartform.GroupElement` itself.
           *
           * The event is fired after the visibility of the control has changed.
           */
          attachVisibleChanged(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartform.GroupElement`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.smartform.GroupElement;
          /**
           * Destroys all the elements in the aggregation {@link #getElements elements}.
           */
          destroyElements(): sap.ui.comp.smartform.GroupElement;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:visibleChanged visibleChanged} event of this
           * `sap.ui.comp.smartform.GroupElement`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachVisibleChanged(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smartform.GroupElement;
          /**
           * Creates a new subclass of class sap.ui.comp.smartform.GroupElement with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.layout.form.FormElement.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:visibleChanged visibleChanged} to attached listeners.
           */
          fireVisibleChanged(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.ui.comp.smartform.GroupElement;
          /**
           * Gets current value of property {@link #getElementForLabel elementForLabel}.
           *
           * Index of element to be used for label determination
           *
           * Default value is `0`.
           */
          getElementForLabel(): number;
          /**
           * Gets content of aggregation {@link #getElements elements}.
           *
           * Aggregation of controls to be displayed together with a label.
           *
           * **Warning:** Do not put any layout or other container controls in here. This could damage the visual
           * layout, keyboard support and screen-reader support. Only form controls are allowed. Views are also not
           * supported. Allowed controls implement the interface `sap.ui.core.IFormContent`.
           */
          getElements(): sap.ui.core.Control[];
          /**
           * Returns the from element.
           */
          getFormElement(): sap.ui.layout.form.FormElement;
          /**
           * @deprecated (since 1.48.0) - please do not use this property as it does not have any effect on the current
           * layout of the `SmartForm` control.
           *
           * Gets current value of property {@link #getHorizontalLayoutGroupElementMinWidth horizontalLayoutGroupElementMinWidth}.
           *
           * Specifies the minimal size in pixels of all group elements of the form if horizontal Layout is used.
           *
           * **Note:** If `Group` is assigned to a `SmartForm` control, this property is inherited from the `SmartForm`
           * control. So don't set it manually.
           */
          getHorizontalLayoutGroupElementMinWidth(): number;
          /**
           * Returns the text of the label.
           */
          getLabelText(): string;
          /**
           * Returns a metadata object for class sap.ui.comp.smartform.GroupElement.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getUseHorizontalLayout useHorizontalLayout}.
           *
           * Specifies whether the groups shall be rendered in a `ResponsiveLayout` with label on top of the group
           * element. Each group will be rendered in a new line.
           *
           * **Note:** If `Group` is assigned to a `SmartForm` control, this property is inherited from the `SmartForm`
           * control.
           *
           * So don't set it to a different value from the one in the `SmartForm` control. For performance reasons
           * it might make sense to set it manually to the same value as the one in the `SmartForm` control when creating
           * the `GroupElement` element.
           */
          getUseHorizontalLayout(): boolean;
          /**
           * Determines the visibility of a `GroupElement` based on elements
           */
          getVisibleBasedOnElements(): boolean;
          /**
           * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getElements elements}. and returns
           * its index if found or -1 otherwise.
           */
          indexOfElement(
            /**
             * The element whose index is looked for
             */
            oElement: sap.ui.core.Control
          ): number;
          /**
           * Inserts some customData into the aggregation `customData`.
           *
           * **Note:** `customData` that is used by the `SmartField` control itself is also added to the `SmartField`
           * controls in the children hierarchy. Additional `customData` that is not used by the `SmartField` control
           * internally might not be added.
           */
          // @ts-ignore
          insertCustomData(
            /**
             * the customData to insert; if empty, nothing is inserted
             */
            oCustomData: sap.ui.core.CustomData,
            /**
             * the 0-based index the customData should be inserted at; for a negative value of iIndex, the customData
             * is inserted at position 0; for a value greater than the current size of the aggregation, the customData
             * is inserted at the last position
             */
            iIndex: number
          ): sap.ui.comp.smartform.GroupElement;
          /**
           * Inserts a element into the aggregation {@link #getElements elements}.
           */
          insertElement(
            /**
             * The element to insert; if empty, nothing is inserted
             */
            oElement: sap.ui.core.Control,
            /**
             * The `0`-based index the element should be inserted at; for a negative value of `iIndex`, the element
             * is inserted at position 0; for a value greater than the current size of the aggregation, the element
             * is inserted at the last position
             */
            iIndex: number
          ): sap.ui.comp.smartform.GroupElement;
          /**
           * Removes all the controls from the aggregation {@link #getElements elements}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllElements(): sap.ui.core.Control[];
          /**
           * Removes a element from the aggregation {@link #getElements elements}.
           */
          removeElement(
            /**
             * The element to remove or its index or id
             */
            vElement: number | string | sap.ui.core.Control
          ): sap.ui.core.Control;
          /**
           * Setter for property editable of all smart fields in children hierarchy.
           */
          setEditMode(
            /**
             * new value for editable property of smart fields.
             */
            bEditMode: boolean
          ): sap.ui.comp.smartform.GroupElement;
          /**
           * Sets a new value for property {@link #getElementForLabel elementForLabel}.
           *
           * Index of element to be used for label determination
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `0`.
           */
          setElementForLabel(
            /**
             * New value for property `elementForLabel`
             */
            iElementForLabel: number
          ): sap.ui.comp.smartform.GroupElement;
          /**
           * @deprecated (since 1.48.0) - please do not use this property as it does not have any effect on the current
           * layout of the `SmartForm` control.
           *
           * Sets a new value for property {@link #getHorizontalLayoutGroupElementMinWidth horizontalLayoutGroupElementMinWidth}.
           *
           * Specifies the minimal size in pixels of all group elements of the form if horizontal Layout is used.
           *
           * **Note:** If `Group` is assigned to a `SmartForm` control, this property is inherited from the `SmartForm`
           * control. So don't set it manually.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setHorizontalLayoutGroupElementMinWidth(
            /**
             * New value for property `horizontalLayoutGroupElementMinWidth`
             */
            iHorizontalLayoutGroupElementMinWidth: number
          ): sap.ui.comp.smartform.GroupElement;
          /**
           * Sets a new value for property {@link #getUseHorizontalLayout useHorizontalLayout}.
           *
           * Specifies whether the groups shall be rendered in a `ResponsiveLayout` with label on top of the group
           * element. Each group will be rendered in a new line.
           *
           * **Note:** If `Group` is assigned to a `SmartForm` control, this property is inherited from the `SmartForm`
           * control.
           *
           * So don't set it to a different value from the one in the `SmartForm` control. For performance reasons
           * it might make sense to set it manually to the same value as the one in the `SmartForm` control when creating
           * the `GroupElement` element.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setUseHorizontalLayout(
            /**
             * New value for property `useHorizontalLayout`
             */
            bUseHorizontalLayout: boolean
          ): sap.ui.comp.smartform.GroupElement;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:visibleChanged visibleChanged} event of this
           * `sap.ui.comp.smartform.GroupElement`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartform.GroupElement` itself.
           *
           * The event is fired after the visibility of the control has changed.
           */
          attachVisibleChanged(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartform.GroupElement`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.smartform.GroupElement;
        }
        /**
         * Layout settings to adjust the `ResponsiveGridLayout` used inside the `Form`.
         */
        class Layout extends sap.ui.core.Element
          implements sap.ui.comp.smartform.SmartFormLayout {
          /**
           * Constructor for a new smartform/Layout.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: LayoutOpts
          );

          /**
           * Creates a new subclass of class sap.ui.comp.smartform.Layout with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets current value of property {@link #getBreakpointL breakpointL}.
           *
           * Breakpoint (in pixel) between Medium size and Large size.
           */
          getBreakpointL(): number;
          /**
           * Gets current value of property {@link #getBreakpointM breakpointM}.
           *
           * reakpoint (in pixel) between Small size and Medium size.
           */
          getBreakpointM(): number;
          /**
           * @SINCE 1.38.0
           *
           * Gets current value of property {@link #getBreakpointXL breakpointXL}.
           *
           * Breakpoint (in pixel) between large size and extra large (XL) size.
           */
          getBreakpointXL(): number;
          /**
           * Gets current value of property {@link #getColumnsL columnsL}.
           *
           * Number of columns for large size.
           *  The number of columns for large size must not be smaller than the number of columns for medium size.
           */
          getColumnsL(): number;
          /**
           * Gets current value of property {@link #getColumnsM columnsM}.
           *
           * Number of columns for medium size.
           */
          getColumnsM(): number;
          /**
           * @SINCE 1.38.0
           *
           * Gets current value of property {@link #getColumnsXL columnsXL}.
           *
           * Number of columns for extra large size.
           *  The number of columns for extra large size must not be smaller than the number of columns for large
           * size.
           */
          getColumnsXL(): number;
          /**
           * Gets current value of property {@link #getEmptySpanL emptySpanL}.
           *
           * Number of grid cells that are empty at the end of each line on large size.
           */
          getEmptySpanL(): number;
          /**
           * Gets current value of property {@link #getEmptySpanM emptySpanM}.
           *
           * Number of grid cells that are empty at the end of each line on medium size.
           */
          getEmptySpanM(): number;
          /**
           * Gets current value of property {@link #getEmptySpanS emptySpanS}.
           *
           * Number of grid cells that are empty at the end of each line on small size.
           */
          getEmptySpanS(): number;
          /**
           * @SINCE 1.38.0
           *
           * Gets current value of property {@link #getEmptySpanXL emptySpanXL}.
           *
           * Number of grid cells that are empty at the end of each line on extra large size.
           */
          getEmptySpanXL(): number;
          /**
           * Gets current value of property {@link #getGridDataSpan gridDataSpan}.
           *
           * A string type that represents Grid's span values for large, medium and small screens. Allowed values
           * are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container
           * has to take, for example: "L2 M4 S6", "M12", "s10" or "l4 m4". Note that the parameters has to be provided
           * in the order large medium small.
           *  The value set here will be set to all group elements when used with horizontal layout (`SmartForm` property
           * `useHorizontalLayout`)
           *
           * Default value is `empty string`.
           */
          getGridDataSpan(): sap.ui.layout.GridSpan;
          /**
           * Gets current value of property {@link #getLabelSpanL labelSpanL}.
           *
           * Default span for labels in large size. This span is only used if more than 1 container is in one line,
           * if only 1 container is in the line the `labelSpanM` value is used.
           */
          getLabelSpanL(): number;
          /**
           * Gets current value of property {@link #getLabelSpanM labelSpanM}.
           *
           * Default span for labels in medium size. This property is used for full size containers. If more than
           * one Container is in one line, `labelSpanL` is used.
           */
          getLabelSpanM(): number;
          /**
           * Gets current value of property {@link #getLabelSpanS labelSpanS}.
           *
           * Default span for labels in small size.
           */
          getLabelSpanS(): number;
          /**
           * @SINCE 1.38.0
           *
           * Gets current value of property {@link #getLabelSpanXL labelSpanXL}.
           *
           * Default span for labels in extra large size.
           */
          getLabelSpanXL(): number;
          /**
           * Returns a metadata object for class sap.ui.comp.smartform.Layout.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * @SINCE 1.34.1
           *
           * Gets current value of property {@link #getSingleGroupFullSize singleGroupFullSize}.
           *
           * If the `SmartForm` contains only one single Group and this property is set, the Group is displayed using
           * the full size of the `SmartForm`. In this case the properties `columnsL` and `columnsM` are ignored.
           *  In all other cases the Group is displayed in the size of one column.
           *
           * Default value is `true`.
           */
          getSingleGroupFullSize(): boolean;
          /**
           * Sets a new value for property {@link #getBreakpointL breakpointL}.
           *
           * Breakpoint (in pixel) between Medium size and Large size.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setBreakpointL(
            /**
             * New value for property `breakpointL`
             */
            iBreakpointL: number
          ): sap.ui.comp.smartform.Layout;
          /**
           * Sets a new value for property {@link #getBreakpointM breakpointM}.
           *
           * reakpoint (in pixel) between Small size and Medium size.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setBreakpointM(
            /**
             * New value for property `breakpointM`
             */
            iBreakpointM: number
          ): sap.ui.comp.smartform.Layout;
          /**
           * @SINCE 1.38.0
           *
           * Sets a new value for property {@link #getBreakpointXL breakpointXL}.
           *
           * Breakpoint (in pixel) between large size and extra large (XL) size.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setBreakpointXL(
            /**
             * New value for property `breakpointXL`
             */
            iBreakpointXL: number
          ): sap.ui.comp.smartform.Layout;
          /**
           * Sets a new value for property {@link #getColumnsL columnsL}.
           *
           * Number of columns for large size.
           *  The number of columns for large size must not be smaller than the number of columns for medium size.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setColumnsL(
            /**
             * New value for property `columnsL`
             */
            iColumnsL: number
          ): sap.ui.comp.smartform.Layout;
          /**
           * Sets a new value for property {@link #getColumnsM columnsM}.
           *
           * Number of columns for medium size.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setColumnsM(
            /**
             * New value for property `columnsM`
             */
            iColumnsM: number
          ): sap.ui.comp.smartform.Layout;
          /**
           * @SINCE 1.38.0
           *
           * Sets a new value for property {@link #getColumnsXL columnsXL}.
           *
           * Number of columns for extra large size.
           *  The number of columns for extra large size must not be smaller than the number of columns for large
           * size.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setColumnsXL(
            /**
             * New value for property `columnsXL`
             */
            iColumnsXL: number
          ): sap.ui.comp.smartform.Layout;
          /**
           * Sets a new value for property {@link #getEmptySpanL emptySpanL}.
           *
           * Number of grid cells that are empty at the end of each line on large size.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setEmptySpanL(
            /**
             * New value for property `emptySpanL`
             */
            iEmptySpanL: number
          ): sap.ui.comp.smartform.Layout;
          /**
           * Sets a new value for property {@link #getEmptySpanM emptySpanM}.
           *
           * Number of grid cells that are empty at the end of each line on medium size.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setEmptySpanM(
            /**
             * New value for property `emptySpanM`
             */
            iEmptySpanM: number
          ): sap.ui.comp.smartform.Layout;
          /**
           * Sets a new value for property {@link #getEmptySpanS emptySpanS}.
           *
           * Number of grid cells that are empty at the end of each line on small size.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setEmptySpanS(
            /**
             * New value for property `emptySpanS`
             */
            iEmptySpanS: number
          ): sap.ui.comp.smartform.Layout;
          /**
           * @SINCE 1.38.0
           *
           * Sets a new value for property {@link #getEmptySpanXL emptySpanXL}.
           *
           * Number of grid cells that are empty at the end of each line on extra large size.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setEmptySpanXL(
            /**
             * New value for property `emptySpanXL`
             */
            iEmptySpanXL: number
          ): sap.ui.comp.smartform.Layout;
          /**
           * Sets a new value for property {@link #getGridDataSpan gridDataSpan}.
           *
           * A string type that represents Grid's span values for large, medium and small screens. Allowed values
           * are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container
           * has to take, for example: "L2 M4 S6", "M12", "s10" or "l4 m4". Note that the parameters has to be provided
           * in the order large medium small.
           *  The value set here will be set to all group elements when used with horizontal layout (`SmartForm` property
           * `useHorizontalLayout`)
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `empty string`.
           */
          setGridDataSpan(
            /**
             * New value for property `gridDataSpan`
             */
            sGridDataSpan: sap.ui.layout.GridSpan
          ): sap.ui.comp.smartform.Layout;
          /**
           * Sets a new value for property {@link #getLabelSpanL labelSpanL}.
           *
           * Default span for labels in large size. This span is only used if more than 1 container is in one line,
           * if only 1 container is in the line the `labelSpanM` value is used.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setLabelSpanL(
            /**
             * New value for property `labelSpanL`
             */
            iLabelSpanL: number
          ): sap.ui.comp.smartform.Layout;
          /**
           * Sets a new value for property {@link #getLabelSpanM labelSpanM}.
           *
           * Default span for labels in medium size. This property is used for full size containers. If more than
           * one Container is in one line, `labelSpanL` is used.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setLabelSpanM(
            /**
             * New value for property `labelSpanM`
             */
            iLabelSpanM: number
          ): sap.ui.comp.smartform.Layout;
          /**
           * Sets a new value for property {@link #getLabelSpanS labelSpanS}.
           *
           * Default span for labels in small size.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setLabelSpanS(
            /**
             * New value for property `labelSpanS`
             */
            iLabelSpanS: number
          ): sap.ui.comp.smartform.Layout;
          /**
           * @SINCE 1.38.0
           *
           * Sets a new value for property {@link #getLabelSpanXL labelSpanXL}.
           *
           * Default span for labels in extra large size.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setLabelSpanXL(
            /**
             * New value for property `labelSpanXL`
             */
            iLabelSpanXL: number
          ): sap.ui.comp.smartform.Layout;
          /**
           * @SINCE 1.34.1
           *
           * Sets a new value for property {@link #getSingleGroupFullSize singleGroupFullSize}.
           *
           * If the `SmartForm` contains only one single Group and this property is set, the Group is displayed using
           * the full size of the `SmartForm`. In this case the properties `columnsL` and `columnsM` are ignored.
           *  In all other cases the Group is displayed in the size of one column.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setSingleGroupFullSize(
            /**
             * New value for property `singleGroupFullSize`
             */
            bSingleGroupFullSize: boolean
          ): sap.ui.comp.smartform.Layout;
        }
        /**
         * The `SmartForm` control renders a form (`sap.ui.layout.form.Form`). When used with the `SmartField` control
         * the label is taken from the metadata annotation `sap:label` if not specified directly.
         *
         * **Warning:** Do not put any layout or other container controls into the `GroupElement`. Views are also
         * not supported. This could damage the visual layout, keyboard support and screen-reader support.
         */
        class SmartForm extends sap.ui.core.Control {
          /**
           * Constructor for a new smartform/SmartForm.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           * See:
           * 	{@link topic:99e33bdfde074bb48d2e603fa5ecd2d0 Smart Form}
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: SmartFormOpts
          );

          /**
           * @SINCE 1.56.0
           *
           * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
           */
          addAriaLabelledBy(
            /**
             * The ariaLabelledBy to add; if empty, nothing is inserted
             */
            vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control
          ): sap.ui.comp.smartform.SmartForm;
          /**
           * Adds some customData into the aggregation `customData`.
           *
           * **Note:** `customData` that is used by the `SmartField` control itself is also added to the `Group` elements,
           * `GroupElement` elements and the `SmartField` controls in the children hierarchy. Additional `customData`
           * that is not used by the `SmartField` control internally might not be added.
           */
          // @ts-ignore
          addCustomData(
            /**
             * the customData to add; if empty, nothing is added
             */
            oCustomData: sap.ui.core.CustomData
          ): sap.ui.comp.smartform.GroupElement;
          /**
           * Adds some group to the aggregation {@link #getGroups groups}.
           */
          addGroup(
            /**
             * The group to add; if empty, nothing is inserted
             */
            oGroup: sap.ui.comp.smartform.Group
          ): sap.ui.comp.smartform.SmartForm;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:checked checked} event of this `sap.ui.comp.smartform.SmartForm`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartform.SmartForm` itself.
           *
           * This event is fired after check was performed.
           */
          attachChecked(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartform.SmartForm` itself
             */
            oListener?: object
          ): sap.ui.comp.smartform.SmartForm;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:editToggled editToggled} event of this `sap.ui.comp.smartform.SmartForm`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartform.SmartForm` itself.
           *
           * This event is fired when the editable property is toggled.
           */
          attachEditToggled(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartform.SmartForm` itself
             */
            oListener?: object
          ): sap.ui.comp.smartform.SmartForm;
          /**
           * Checks smart fields for client errors.
           */
          check(
            /**
             * Determines is only visible fields in visible groups should be considered. default: `true`
             */
            bConsiderOnlyVisible: boolean
          ): string[];
          /**
           * Destroys the customToolbar in the aggregation {@link #getCustomToolbar customToolbar}.
           */
          destroyCustomToolbar(): sap.ui.comp.smartform.SmartForm;
          /**
           * Destroys all the groups in the aggregation {@link #getGroups groups}.
           */
          destroyGroups(): sap.ui.comp.smartform.SmartForm;
          /**
           * Destroys the layout in the aggregation {@link #getLayout layout}.
           */
          destroyLayout(): sap.ui.comp.smartform.SmartForm;
          /**
           * Destroys the semanticObjectController in the aggregation {@link #getSemanticObjectController semanticObjectController}.
           */
          destroySemanticObjectController(): sap.ui.comp.smartform.SmartForm;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:checked checked} event of this `sap.ui.comp.smartform.SmartForm`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachChecked(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smartform.SmartForm;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:editToggled editToggled} event of this `sap.ui.comp.smartform.SmartForm`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachEditToggled(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smartform.SmartForm;
          /**
           * Creates a new subclass of class sap.ui.comp.smartform.SmartForm with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:checked checked} to attached listeners.
           */
          fireChecked(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * An array containing all smart fields with errors
               */
              erroneousFields?: sap.ui.comp.smartfield.SmartField[];
            }
          ): sap.ui.comp.smartform.SmartForm;
          /**
           * Fires event {@link #event:editToggled editToggled} to attached listeners.
           */
          fireEditToggled(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * If `true`, the control is in edit mode
               */
              editable?: boolean;
            }
          ): sap.ui.comp.smartform.SmartForm;
          /**
           * @SINCE 1.56.0
           *
           * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
           * ariaLabelledBy}.
           */
          getAriaLabelledBy(): sap.ui.core.ID[];
          /**
           * Gets current value of property {@link #getCheckButton checkButton}.
           *
           * Specifies whether a check button is added to the toolbar.
           *
           * Default value is `false`.
           */
          getCheckButton(): boolean;
          /**
           * Gets content of aggregation {@link #getCustomToolbar customToolbar}.
           *
           * An additional toolbar that can be added by the users, which can contain further custom buttons, controls,
           * etc.
           */
          getCustomToolbar(): sap.m.Toolbar;
          /**
           * Gets current value of property {@link #getEditable editable}.
           *
           * Applies a device-specific and theme-specific line height and label alignment to the form rows if the
           * form has editable content. If set, all (not only the editable) rows of the form will get the line height
           * of editable fields.
           *
           * The labels inside the form will be rendered by default in the according mode.
           *
           * **Note:** The setting of this property will be passed to all `SmartField` controls inside the form, so
           * they will be editable if the form is editable.
           *
           * **Warning:** The setting of this property will not be passed to controls other than `SmartField`. For
           * example, `Input` controls in a form with `editable` set to `false` are still editable.
           *
           * If controls other than `SmartField` controls are used, and the edit mode of their control is not set
           * correctly, this might lead to visual issues. The labels and fields might be misaligned, the labels might
           * be rendered in the wrong mode, and the spacing between the single controls might be wrong. Also, controls
           * that do not fit the mode might be rendered incorrectly.
           *
           * Default value is `false`.
           */
          getEditable(): boolean;
          /**
           * Gets current value of property {@link #getEditTogglable editTogglable}.
           *
           * If set to `true`, a button to toggle the `editable` property is shown in the toolbar.
           *
           * Default value is `false`.
           */
          getEditTogglable(): boolean;
          /**
           * Gets current value of property {@link #getEntityType entityType}.
           *
           * CSV of entity types for which the flexibility features are available.
           *  For more information about SAPUI5 flexibility, refer to the Developer Guide.
           *  **Note:** No validation is done. Please ensure that you do not add spaces or special characters.
           */
          getEntityType(): string;
          /**
           * Gets current value of property {@link #getExpandable expandable}.
           *
           * Specifies whether the control is expandable. Per default the control is not rendered as expanded.
           *
           * Default value is `false`.
           */
          getExpandable(): boolean;
          /**
           * Gets current value of property {@link #getExpanded expanded}.
           *
           * If expandable, this property indicates whether the state is expanded or not. If expanded, then the toolbar
           * (if available) and the content is rendered; if expanded is false, then only the headerText/headerToolbar
           * is rendered.
           */
          getExpanded(): boolean;
          /**
           * Gets current value of property {@link #getFlexEnabled flexEnabled}.
           *
           * Specifies whether the form enables flexibility features, such as adding new fields.
           *  For more information about SAPUI5 flexibility, refer to the Developer Guide.
           *
           * Default value is `true`.
           */
          getFlexEnabled(): boolean;
          /**
           * Gets content of aggregation {@link #getGroups groups}.
           *
           * Groups are used to group form elements.
           */
          getGroups(): sap.ui.comp.smartform.Group[];
          /**
           * @deprecated (since 1.48.0) - please do not use this property as it does not have any effect on the current
           * layout of the `SmartForm` control.
           *
           * Gets current value of property {@link #getHorizontalLayoutGroupElementMinWidth horizontalLayoutGroupElementMinWidth}.
           *
           * Specifies the minimal size in pixels of all group elements of the form if the horizontal layout is used.
           */
          getHorizontalLayoutGroupElementMinWidth(): number;
          /**
           * Gets current value of property {@link #getIgnoredFields ignoredFields}.
           *
           * CSV of fields that must be ignored in the OData metadata by the SmartForm control.
           *  **Note:**
           *  No validation is done. Please ensure that you do not add spaces or special characters.
           */
          getIgnoredFields(): string;
          /**
           * Gets content of aggregation {@link #getLayout layout}.
           *
           * Layout settings to adjust the used layout.
           */
          getLayout(): sap.ui.comp.smartform.SmartFormLayout;
          /**
           * Returns a metadata object for class sap.ui.comp.smartform.SmartForm.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets content of aggregation {@link #getSemanticObjectController semanticObjectController}.
           *
           * The Semantic Object Controller allows the user to specify and overwrite functionality for semantic object
           * navigation.
           */
          getSemanticObjectController(): sap.ui.comp.navpopover.SemanticObjectController;
          /**
           * Retrieves all the smart fields of the form.
           *
           * **Note:** Even invisible `SmartField` controls are returned if the `group` or `groupElement` is visible.
           */
          getSmartFields(
            /**
             * Determines if only visible `groups` are taken into account; default is true
             */
            bConsiderOnlyVisibleGroups: boolean,
            /**
             * Determines if only visible `groupElement` elements are taken into account; default is false (to be compatible)
             */
            bConsiderOnlyVisibleGroupElements: boolean
          ): sap.ui.comp.smartfield.SmartField[];
          /**
           * Gets current value of property {@link #getTitle title}.
           *
           * Title of the form.
           */
          getTitle(): string;
          /**
           * Gets current value of property {@link #getUseHorizontalLayout useHorizontalLayout}.
           *
           * Specifies whether the groups are rendered in a {@link sap.ui.layout.form.ResponsiveLayout ResponsiveLayout}
           * with the label above the field. Each group is rendered in a new line.
           *
           * **Note:** This property should no longer be used. To arrange the fields in columns, `ColumnLayout` should
           * be used in the `layout` property.
           *
           * **Note:** The value of this property will be passed on to the `useHorizontalLayout` property of all `Group`
           * and `GroupElement` elements.
           */
          getUseHorizontalLayout(): boolean;
          /**
           * Returns the array of properties currently visible on the UI.
           */
          getVisibleProperties(): string[];
          /**
           * Checks for the provided `sap.ui.comp.smartform.Group` in the aggregation {@link #getGroups groups}. and
           * returns its index if found or -1 otherwise.
           */
          indexOfGroup(
            /**
             * The group whose index is looked for
             */
            oGroup: sap.ui.comp.smartform.Group
          ): number;
          /**
           * Inserts some customData into the aggregation `customData`.
           *
           * **Note:** `customData` that is used by the `SmartField` control itself is also added to the `Group` elements,
           * `GroupElement` elements and the `SmartField` controls in the children hierarchy. Additional `customData`
           * that is not used by the `SmartField` control internally might not be added.
           */
          // @ts-ignore
          insertCustomData(
            /**
             * the customData to insert; if empty, nothing is inserted
             */
            oCustomData: sap.ui.core.CustomData,
            /**
             * the 0-based index the customData should be inserted at; for a negative value of iIndex, the customData
             * is inserted at position 0; for a value greater than the current size of the aggregation, the customData
             * is inserted at the last position
             */
            iIndex: number
          ): sap.ui.comp.smartform.GroupElement;
          /**
           * Inserts a group into the aggregation {@link #getGroups groups}.
           */
          insertGroup(
            /**
             * The group to insert; if empty, nothing is inserted
             */
            oGroup: sap.ui.comp.smartform.Group,
            /**
             * The `0`-based index the group should be inserted at; for a negative value of `iIndex`, the group is inserted
             * at position 0; for a value greater than the current size of the aggregation, the group is inserted at
             * the last position
             */
            iIndex: number
          ): sap.ui.comp.smartform.SmartForm;
          /**
           * Sets default span for `GridData` layout of group elements when used with horizontal layout.
           *
           * **Note:** There is no need to call this function as the update of all `GroupElement` elements inside
           * the `SmartForm` control is triggered automatically if the `GridDataSpan` property of the `Layout` aggregation
           * changes or the `Layout` aggregation is added.
           */
          propagateGridDataSpan(): sap.ui.comp.smartform.SmartForm;
          /**
           * @SINCE 1.56.0
           *
           * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
           */
          removeAllAriaLabelledBy(): sap.ui.core.ID[];
          /**
           * Removes all the controls from the aggregation {@link #getGroups groups}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllGroups(): sap.ui.comp.smartform.Group[];
          /**
           * @SINCE 1.56.0
           *
           * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
           */
          removeAriaLabelledBy(
            /**
             * The ariaLabelledBy to be removed or its index or ID
             */
            vAriaLabelledBy: number | sap.ui.core.ID | sap.ui.core.Control
          ): sap.ui.core.ID;
          /**
           * Removes a group from the aggregation {@link #getGroups groups}.
           */
          removeGroup(
            /**
             * The group to remove or its index or id
             */
            vGroup: number | string | sap.ui.comp.smartform.Group
          ): sap.ui.comp.smartform.Group;
          /**
           * Sets a new value for property {@link #getCheckButton checkButton}.
           *
           * Specifies whether a check button is added to the toolbar.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setCheckButton(
            /**
             * New value for property `checkButton`
             */
            bCheckButton: boolean
          ): sap.ui.comp.smartform.SmartForm;
          /**
           * Sets the aggregated {@link #getCustomToolbar customToolbar}.
           */
          setCustomToolbar(
            /**
             * The customToolbar to set
             */
            oCustomToolbar: sap.m.Toolbar
          ): sap.ui.comp.smartform.SmartForm;
          /**
           * Sets a new value for property {@link #getEditable editable}.
           *
           * Applies a device-specific and theme-specific line height and label alignment to the form rows if the
           * form has editable content. If set, all (not only the editable) rows of the form will get the line height
           * of editable fields.
           *
           * The labels inside the form will be rendered by default in the according mode.
           *
           * **Note:** The setting of this property will be passed to all `SmartField` controls inside the form, so
           * they will be editable if the form is editable.
           *
           * **Warning:** The setting of this property will not be passed to controls other than `SmartField`. For
           * example, `Input` controls in a form with `editable` set to `false` are still editable.
           *
           * If controls other than `SmartField` controls are used, and the edit mode of their control is not set
           * correctly, this might lead to visual issues. The labels and fields might be misaligned, the labels might
           * be rendered in the wrong mode, and the spacing between the single controls might be wrong. Also, controls
           * that do not fit the mode might be rendered incorrectly.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setEditable(
            /**
             * New value for property `editable`
             */
            bEditable: boolean
          ): sap.ui.comp.smartform.SmartForm;
          /**
           * Sets a new value for property {@link #getEditTogglable editTogglable}.
           *
           * If set to `true`, a button to toggle the `editable` property is shown in the toolbar.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setEditTogglable(
            /**
             * New value for property `editTogglable`
             */
            bEditTogglable: boolean
          ): sap.ui.comp.smartform.SmartForm;
          /**
           * Sets a new value for property {@link #getEntityType entityType}.
           *
           * CSV of entity types for which the flexibility features are available.
           *  For more information about SAPUI5 flexibility, refer to the Developer Guide.
           *  **Note:** No validation is done. Please ensure that you do not add spaces or special characters.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setEntityType(
            /**
             * New value for property `entityType`
             */
            sEntityType: string
          ): sap.ui.comp.smartform.SmartForm;
          /**
           * Sets a new value for property {@link #getExpandable expandable}.
           *
           * Specifies whether the control is expandable. Per default the control is not rendered as expanded.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setExpandable(
            /**
             * New value for property `expandable`
             */
            bExpandable: boolean
          ): sap.ui.comp.smartform.SmartForm;
          /**
           * Sets a new value for property {@link #getExpanded expanded}.
           *
           * If expandable, this property indicates whether the state is expanded or not. If expanded, then the toolbar
           * (if available) and the content is rendered; if expanded is false, then only the headerText/headerToolbar
           * is rendered.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setExpanded(
            /**
             * New value for property `expanded`
             */
            bExpanded: boolean
          ): sap.ui.comp.smartform.SmartForm;
          /**
           * Sets a new value for property {@link #getFlexEnabled flexEnabled}.
           *
           * Specifies whether the form enables flexibility features, such as adding new fields.
           *  For more information about SAPUI5 flexibility, refer to the Developer Guide.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setFlexEnabled(
            /**
             * New value for property `flexEnabled`
             */
            bFlexEnabled: boolean
          ): sap.ui.comp.smartform.SmartForm;
          /**
           * @SINCE 1.36.0
           *
           * Sets the focus on the first editable control.
           */
          setFocusOnEditableControl(): void;
          /**
           * @deprecated (since 1.48.0) - please do not use this property as it does not have any effect on the current
           * layout of the `SmartForm` control.
           *
           * Sets a new value for property {@link #getHorizontalLayoutGroupElementMinWidth horizontalLayoutGroupElementMinWidth}.
           *
           * Specifies the minimal size in pixels of all group elements of the form if the horizontal layout is used.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setHorizontalLayoutGroupElementMinWidth(
            /**
             * New value for property `horizontalLayoutGroupElementMinWidth`
             */
            iHorizontalLayoutGroupElementMinWidth: number
          ): sap.ui.comp.smartform.SmartForm;
          /**
           * Sets a new value for property {@link #getIgnoredFields ignoredFields}.
           *
           * CSV of fields that must be ignored in the OData metadata by the SmartForm control.
           *  **Note:**
           *  No validation is done. Please ensure that you do not add spaces or special characters.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setIgnoredFields(
            /**
             * New value for property `ignoredFields`
             */
            sIgnoredFields: string
          ): sap.ui.comp.smartform.SmartForm;
          /**
           * Sets the aggregated {@link #getLayout layout}.
           */
          setLayout(
            /**
             * The layout to set
             */
            oLayout: sap.ui.comp.smartform.SmartFormLayout
          ): sap.ui.comp.smartform.SmartForm;
          /**
           * Sets the aggregated {@link #getSemanticObjectController semanticObjectController}.
           */
          setSemanticObjectController(
            /**
             * The semanticObjectController to set
             */
            oSemanticObjectController: sap.ui.comp.navpopover.SemanticObjectController
          ): sap.ui.comp.smartform.SmartForm;
          /**
           * Sets a new value for property {@link #getTitle title}.
           *
           * Title of the form.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setTitle(
            /**
             * New value for property `title`
             */
            sTitle: string
          ): sap.ui.comp.smartform.SmartForm;
          /**
           * Sets a new value for property {@link #getUseHorizontalLayout useHorizontalLayout}.
           *
           * Specifies whether the groups are rendered in a {@link sap.ui.layout.form.ResponsiveLayout ResponsiveLayout}
           * with the label above the field. Each group is rendered in a new line.
           *
           * **Note:** This property should no longer be used. To arrange the fields in columns, `ColumnLayout` should
           * be used in the `layout` property.
           *
           * **Note:** The value of this property will be passed on to the `useHorizontalLayout` property of all `Group`
           * and `GroupElement` elements.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setUseHorizontalLayout(
            /**
             * New value for property `useHorizontalLayout`
             */
            bUseHorizontalLayout: boolean
          ): sap.ui.comp.smartform.SmartForm;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:checked checked} event of this `sap.ui.comp.smartform.SmartForm`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartform.SmartForm` itself.
           *
           * This event is fired after check was performed.
           */
          attachChecked(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartform.SmartForm` itself
             */
            oListener?: object
          ): sap.ui.comp.smartform.SmartForm;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:editToggled editToggled} event of this `sap.ui.comp.smartform.SmartForm`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartform.SmartForm` itself.
           *
           * This event is fired when the editable property is toggled.
           */
          attachEditToggled(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartform.SmartForm` itself
             */
            oListener?: object
          ): sap.ui.comp.smartform.SmartForm;
        }
      }

      namespace smartlist {
        interface SmartListOpts extends sap.m.VBoxOpts {
          /**
           * @SINCE 1.48.0
           *
           * The entity set name from which to fetch data.
           *  Note:
           *  This is not a dynamic UI5 property.
           */
          entitySet?: string;

          /**
           * @SINCE 1.48.0
           *
           * CSV of fields that must be selected when request is sent to the backend.
           *  Note:
           *  No validation is done. Please ensure that you do not add spaces or special characters.
           *  This property is only needed when used together with an `ODataModel`.
           */
          selectFields?: string;

          /**
           * @SINCE 1.48.0
           *
           * CSV of fields that must be expanded when request is sent to the backend.
           *  Note:
           *  No validation is done. Please ensure that you do not add spaces or special characters.
           *  This property is only needed when used together with an `ODataModel`.
           */
          expandFields?: string;

          /**
           * @SINCE 1.48.0
           *
           * If set to `true` (default), the number of rows is shown along with the header text.
           *  If set to `false`, the number of rows will not be shown on the user interface.
           *  Note:
           *  To avoid sending dedicated OData requests in order to improve your application's performance, you must
           * configure the binding of the list as required.
           */
          showRowCount?: boolean;

          /**
           * @SINCE 1.48.0
           *
           * Specifies header text that is shown in list.
           */
          header?: string;

          /**
           * @SINCE 1.48.0
           *
           * When set to `true`, this enables automatic binding of the list using the `listBindingPath` (if it exists)
           * or `entitySet` property. This happens right after the `initialise` event has been fired.
           */
          enableAutoBinding?: boolean;

          /**
           * @SINCE 1.48.0
           *
           * Specifies the path that is used during the binding of the list. If not specified, the `entitySet` property
           * is used instead. (used only if binding is done automatically or when using `rebindList`)
           */
          listBindingPath?: string;

          /**
           * @SINCE 1.48.0
           *
           * Specifies the type of list to be created in the `SmartList` control.
           *  Note:
           *  If you add a `List` or `Tree` to the content of the `SmartList` control in the view, this property has
           * no effect.
           */
          listType?: sap.ui.comp.smartlist.ListType;

          /**
           * @SINCE 1.48.0
           *
           * Controls the visibility of the full screen button.
           */
          showFullScreenButton?: boolean;

          /**
           * @SINCE 1.48.0
           *
           * Event fired once the control has been initialized.
           */
          initialise?: Function;

          /**
           * @SINCE 1.48.0
           *
           * Event fired right before the binding is being done.
           */
          beforeRebindList?: Function;

          /**
           * @SINCE 1.48.0
           *
           * Event fired when data is received after binding. The event is usually only fired if the binding for the
           * list is done by the `SmartList` control itself.
           */
          dataReceived?: Function;

          /**
           * @SINCE 1.48.0
           *
           * Specifies the template that is used for the inner `List` or `Tree` control.
           *  **Note:**
           *  This template is used when binding the `items` of `sap.m.List` or `sap.m.Tree` control, and will not
           * be available in the `SmartList` control once the binding has been done.
           */
          listItemTemplate?: sap.m.ListItemBase;

          /**
           * @SINCE 1.48.0
           *
           * The `SmartFilterBar` control to be linked to the `SmartList` control. Some events of the `SmartFilterBar`
           * control are then used to fetch data, show overlay etc.
           */
          smartFilter?: sap.ui.core.Control | string;
        }
        /**
         * @SINCE 1.48
         *
         * A smart control to simplify using the `sap.m.List` and `sap.m.Tree` controls in list patterns. Overview:
         * The `SmartList` control creates a list or tree based on the configuration specified. There is, however,
         * a difference to other smart controls: This control does not use annotations to automatically create its
         * content. Hence, a template must always be provided for this control. Structure: The `SmartList` control
         * consists of the following elements:
         * 	 -  `OverflowToolbar` control: Displays the header and other action buttons. Users can add their own
         * 			toolbar and buttons in the view.
         * 	 -  `List` or `Tree` control: The actual list/tree control. Users can also add this in the view with
         * 			the required configuration.  The `entitySet` property must be specified to use the control. This
         * 			attribute is used to fetch the actual data.
         *  The `listItemTemplate` aggregation must also be specified with the required item template, such as `StandardListItem/StandardTreeItem`,
         * which will be used during binding. **Note:**: Most of the attributes/properties are not dynamic and cannot
         * be changed once the control has been initialized.
         */
        class SmartList extends sap.m.VBox {
          /**
           * Constructor for a new smartlist/SmartList.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: SmartListOpts
          );

          /**
           * @SINCE 1.48.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:beforeRebindList beforeRebindList} event of
           * this `sap.ui.comp.smartlist.SmartList`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartlist.SmartList` itself.
           *
           * Event fired right before the binding is being done.
           */
          attachBeforeRebindList(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartlist.SmartList` itself
             */
            oListener?: object
          ): sap.ui.comp.smartlist.SmartList;
          /**
           * @SINCE 1.48.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:dataReceived dataReceived} event of this `sap.ui.comp.smartlist.SmartList`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartlist.SmartList` itself.
           *
           * Event fired when data is received after binding. The event is usually only fired if the binding for the
           * list is done by the `SmartList` control itself.
           */
          attachDataReceived(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartlist.SmartList` itself
             */
            oListener?: object
          ): sap.ui.comp.smartlist.SmartList;
          /**
           * @SINCE 1.48.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:initialise initialise} event of this `sap.ui.comp.smartlist.SmartList`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartlist.SmartList` itself.
           *
           * Event fired once the control has been initialized.
           */
          attachInitialise(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartlist.SmartList` itself
             */
            oListener?: object
          ): sap.ui.comp.smartlist.SmartList;
          /**
           * @SINCE 1.48.0
           *
           * Destroys the listItemTemplate in the aggregation {@link #getListItemTemplate listItemTemplate}.
           */
          destroyListItemTemplate(): sap.ui.comp.smartlist.SmartList;
          /**
           * @SINCE 1.48.0
           *
           * Detaches event handler `fnFunction` from the {@link #event:beforeRebindList beforeRebindList} event of
           * this `sap.ui.comp.smartlist.SmartList`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachBeforeRebindList(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smartlist.SmartList;
          /**
           * @SINCE 1.48.0
           *
           * Detaches event handler `fnFunction` from the {@link #event:dataReceived dataReceived} event of this `sap.ui.comp.smartlist.SmartList`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachDataReceived(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smartlist.SmartList;
          /**
           * @SINCE 1.48.0
           *
           * Detaches event handler `fnFunction` from the {@link #event:initialise initialise} event of this `sap.ui.comp.smartlist.SmartList`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachInitialise(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smartlist.SmartList;
          /**
           * Cleans up the control
           */
          // @ts-ignore
          exit(): void;
          /**
           * Creates a new subclass of class sap.ui.comp.smartlist.SmartList with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.m.VBox.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * @SINCE 1.48.0
           *
           * Fires event {@link #event:beforeRebindList beforeRebindList} to attached listeners.
           */
          fireBeforeRebindList(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.ui.comp.smartlist.SmartList;
          /**
           * @SINCE 1.48.0
           *
           * Fires event {@link #event:dataReceived dataReceived} to attached listeners.
           */
          fireDataReceived(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.ui.comp.smartlist.SmartList;
          /**
           * @SINCE 1.48.0
           *
           * Fires event {@link #event:initialise initialise} to attached listeners.
           */
          fireInitialise(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.ui.comp.smartlist.SmartList;
          /**
           * @SINCE 1.48.0
           *
           * Gets current value of property {@link #getEnableAutoBinding enableAutoBinding}.
           *
           * When set to `true`, this enables automatic binding of the list using the `listBindingPath` (if it exists)
           * or `entitySet` property. This happens right after the `initialise` event has been fired.
           *
           * Default value is `false`.
           */
          getEnableAutoBinding(): boolean;
          /**
           * @SINCE 1.48.0
           *
           * Gets current value of property {@link #getEntitySet entitySet}.
           *
           * The entity set name from which to fetch data.
           *  Note:
           *  This is not a dynamic UI5 property.
           */
          getEntitySet(): string;
          /**
           * @SINCE 1.48.0
           *
           * Gets current value of property {@link #getExpandFields expandFields}.
           *
           * CSV of fields that must be expanded when request is sent to the backend.
           *  Note:
           *  No validation is done. Please ensure that you do not add spaces or special characters.
           *  This property is only needed when used together with an `ODataModel`.
           */
          getExpandFields(): string;
          /**
           * @SINCE 1.48.0
           *
           * Gets current value of property {@link #getHeader header}.
           *
           * Specifies header text that is shown in list.
           */
          getHeader(): string;
          /**
           * Returns the `List` or `Tree` used internally.
           */
          getList(): object;
          /**
           * @SINCE 1.48.0
           *
           * Gets current value of property {@link #getListBindingPath listBindingPath}.
           *
           * Specifies the path that is used during the binding of the list. If not specified, the `entitySet` property
           * is used instead. (used only if binding is done automatically or when using `rebindList`)
           */
          getListBindingPath(): string;
          /**
           * @SINCE 1.48.0
           *
           * Gets content of aggregation {@link #getListItemTemplate listItemTemplate}.
           *
           * Specifies the template that is used for the inner `List` or `Tree` control.
           *  **Note:**
           *  This template is used when binding the `items` of `sap.m.List` or `sap.m.Tree` control, and will not
           * be available in the `SmartList` control once the binding has been done.
           */
          getListItemTemplate(): sap.m.ListItemBase;
          /**
           * @SINCE 1.48.0
           *
           * Gets current value of property {@link #getListType listType}.
           *
           * Specifies the type of list to be created in the `SmartList` control.
           *  Note:
           *  If you add a `List` or `Tree` to the content of the `SmartList` control in the view, this property has
           * no effect.
           */
          getListType(): sap.ui.comp.smartlist.ListType;
          /**
           * Returns a metadata object for class sap.ui.comp.smartlist.SmartList.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * @SINCE 1.48.0
           *
           * Gets current value of property {@link #getSelectFields selectFields}.
           *
           * CSV of fields that must be selected when request is sent to the backend.
           *  Note:
           *  No validation is done. Please ensure that you do not add spaces or special characters.
           *  This property is only needed when used together with an `ODataModel`.
           */
          getSelectFields(): string;
          /**
           * @SINCE 1.48.0
           *
           * Gets current value of property {@link #getShowFullScreenButton showFullScreenButton}.
           *
           * Controls the visibility of the full screen button.
           *
           * Default value is `false`.
           */
          getShowFullScreenButton(): boolean;
          /**
           * @SINCE 1.48.0
           *
           * Gets current value of property {@link #getShowRowCount showRowCount}.
           *
           * If set to `true` (default), the number of rows is shown along with the header text.
           *  If set to `false`, the number of rows will not be shown on the user interface.
           *  Note:
           *  To avoid sending dedicated OData requests in order to improve your application's performance, you must
           * configure the binding of the list as required.
           *
           * Default value is `true`.
           */
          getShowRowCount(): boolean;
          /**
           * @SINCE 1.48.0
           *
           * ID of the element which is the current target of the association {@link #getSmartFilter smartFilter},
           * or `null`.
           */
          getSmartFilter(): sap.ui.core.ID;
          /**
           * Checks whether the control is initialized.
           */
          isInitialised(): boolean;
          /**
           * This can be used to trigger binding on the list used in the SmartList
           */
          rebindList(
            /**
             * force bind call to be triggered on the inner list
             */
            bForceRebind: boolean
          ): void;
          /**
           * @SINCE 1.48.0
           *
           * Sets a new value for property {@link #getEnableAutoBinding enableAutoBinding}.
           *
           * When set to `true`, this enables automatic binding of the list using the `listBindingPath` (if it exists)
           * or `entitySet` property. This happens right after the `initialise` event has been fired.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setEnableAutoBinding(
            /**
             * New value for property `enableAutoBinding`
             */
            bEnableAutoBinding: boolean
          ): sap.ui.comp.smartlist.SmartList;
          /**
           * @SINCE 1.48.0
           *
           * Sets a new value for property {@link #getEntitySet entitySet}.
           *
           * The entity set name from which to fetch data.
           *  Note:
           *  This is not a dynamic UI5 property.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setEntitySet(
            /**
             * New value for property `entitySet`
             */
            sEntitySet: string
          ): sap.ui.comp.smartlist.SmartList;
          /**
           * @SINCE 1.48.0
           *
           * Sets a new value for property {@link #getExpandFields expandFields}.
           *
           * CSV of fields that must be expanded when request is sent to the backend.
           *  Note:
           *  No validation is done. Please ensure that you do not add spaces or special characters.
           *  This property is only needed when used together with an `ODataModel`.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setExpandFields(
            /**
             * New value for property `expandFields`
             */
            sExpandFields: string
          ): sap.ui.comp.smartlist.SmartList;
          /**
           * @SINCE 1.48.0
           *
           * Sets a new value for property {@link #getHeader header}.
           *
           * Specifies header text that is shown in list.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setHeader(
            /**
             * New value for property `header`
             */
            sHeader: string
          ): sap.ui.comp.smartlist.SmartList;
          /**
           * @SINCE 1.48.0
           *
           * Sets a new value for property {@link #getListBindingPath listBindingPath}.
           *
           * Specifies the path that is used during the binding of the list. If not specified, the `entitySet` property
           * is used instead. (used only if binding is done automatically or when using `rebindList`)
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setListBindingPath(
            /**
             * New value for property `listBindingPath`
             */
            sListBindingPath: string
          ): sap.ui.comp.smartlist.SmartList;
          /**
           * @SINCE 1.48.0
           *
           * Sets the aggregated {@link #getListItemTemplate listItemTemplate}.
           */
          setListItemTemplate(
            /**
             * The listItemTemplate to set
             */
            oListItemTemplate: sap.m.ListItemBase
          ): sap.ui.comp.smartlist.SmartList;
          /**
           * @SINCE 1.48.0
           *
           * Sets a new value for property {@link #getListType listType}.
           *
           * Specifies the type of list to be created in the `SmartList` control.
           *  Note:
           *  If you add a `List` or `Tree` to the content of the `SmartList` control in the view, this property has
           * no effect.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setListType(
            /**
             * New value for property `listType`
             */
            sListType: sap.ui.comp.smartlist.ListType
          ): sap.ui.comp.smartlist.SmartList;
          /**
           * @SINCE 1.48.0
           *
           * Sets a new value for property {@link #getSelectFields selectFields}.
           *
           * CSV of fields that must be selected when request is sent to the backend.
           *  Note:
           *  No validation is done. Please ensure that you do not add spaces or special characters.
           *  This property is only needed when used together with an `ODataModel`.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setSelectFields(
            /**
             * New value for property `selectFields`
             */
            sSelectFields: string
          ): sap.ui.comp.smartlist.SmartList;
          /**
           * @SINCE 1.48.0
           *
           * Sets a new value for property {@link #getShowFullScreenButton showFullScreenButton}.
           *
           * Controls the visibility of the full screen button.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setShowFullScreenButton(
            /**
             * New value for property `showFullScreenButton`
             */
            bShowFullScreenButton: boolean
          ): sap.ui.comp.smartlist.SmartList;
          /**
           * @SINCE 1.48.0
           *
           * Sets a new value for property {@link #getShowRowCount showRowCount}.
           *
           * If set to `true` (default), the number of rows is shown along with the header text.
           *  If set to `false`, the number of rows will not be shown on the user interface.
           *  Note:
           *  To avoid sending dedicated OData requests in order to improve your application's performance, you must
           * configure the binding of the list as required.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setShowRowCount(
            /**
             * New value for property `showRowCount`
             */
            bShowRowCount: boolean
          ): sap.ui.comp.smartlist.SmartList;
          /**
           * @SINCE 1.48.0
           *
           * Sets the associated {@link #getSmartFilter smartFilter}.
           */
          setSmartFilter(
            /**
             * ID of an element which becomes the new target of this smartFilter association; alternatively, an element
             * instance may be given
             */
            oSmartFilter: sap.ui.core.ID | sap.ui.core.Control
          ): sap.ui.comp.smartlist.SmartList;
          /**
           * @SINCE 1.48.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:beforeRebindList beforeRebindList} event of
           * this `sap.ui.comp.smartlist.SmartList`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartlist.SmartList` itself.
           *
           * Event fired right before the binding is being done.
           */
          attachBeforeRebindList(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartlist.SmartList` itself
             */
            oListener?: object
          ): sap.ui.comp.smartlist.SmartList;
          /**
           * @SINCE 1.48.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:dataReceived dataReceived} event of this `sap.ui.comp.smartlist.SmartList`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartlist.SmartList` itself.
           *
           * Event fired when data is received after binding. The event is usually only fired if the binding for the
           * list is done by the `SmartList` control itself.
           */
          attachDataReceived(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartlist.SmartList` itself
             */
            oListener?: object
          ): sap.ui.comp.smartlist.SmartList;
          /**
           * @SINCE 1.48.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:initialise initialise} event of this `sap.ui.comp.smartlist.SmartList`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartlist.SmartList` itself.
           *
           * Event fired once the control has been initialized.
           */
          attachInitialise(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartlist.SmartList` itself
             */
            oListener?: object
          ): sap.ui.comp.smartlist.SmartList;
        }
        /**
         * @SINCE 1.48
         *
         * Provides enumeration sap.ui.comp.smartlist.ListType. A subset of list types that fit to a simple API
         * returning one string.
         */
        enum ListType {
          /**
           * A list (sap.m.List) control shall be created as the content of the SmartList, if no list already exists
           * (default)
           */
          List,
          /**
           * A tree (sap.m.Tree) control shall be created as the content of the SmartList, if no list/tree already
           * exists
           */
          Tree
        }
      }

      namespace smartmicrochart {
        interface SmartAreaMicroChartOpts
          extends sap.ui.comp.smartmicrochart.SmartMicroChartBaseOpts {
          /**
           * Only `true` value is supported: the chart will be bound to the chartBindingPath or to the entitySet
           */
          enableAutoBinding?: boolean;
        }

        interface SmartBulletMicroChartOpts
          extends sap.ui.comp.smartmicrochart.SmartMicroChartBaseOpts {
          /**
           * If set to `true`, this enables automatic binding of the chart using the chartBindingPath (if it exists)
           * property.
           */
          enableAutoBinding?: boolean;
        }

        interface SmartColumnMicroChartOpts
          extends sap.ui.comp.smartmicrochart.SmartMicroChartBaseOpts {}

        interface SmartComparisonMicroChartOpts
          extends sap.ui.comp.smartmicrochart.SmartMicroChartBaseOpts {}

        interface SmartDeltaMicroChartOpts
          extends sap.ui.comp.smartmicrochart.SmartMicroChartBaseOpts {
          /**
           * If set to `true`, this enables automatic data binding using the `chartBindingPath` property , if such
           * a property exists.
           */
          enableAutoBinding?: boolean;
        }

        interface SmartHarveyBallMicroChartOpts
          extends sap.ui.comp.smartmicrochart.SmartMicroChartBaseOpts {
          /**
           * If set to `true`, the chart is automatically bound using the `chartBindingPath` property, if it is specified.
           */
          enableAutoBinding?: boolean;

          /**
           * If the associated control is provided, its `text` property is set to the free text provided by annotations.
           * The `Value` property of the `DataPoint` annotation should be annotated with this free text. The `Label`
           * annotation from the `OData Common` vocabulary can be used.
           */
          freeText?: sap.m.Label | string;
        }

        interface SmartLineMicroChartOpts
          extends sap.ui.comp.smartmicrochart.SmartMicroChartBaseOpts {}

        interface SmartMicroChartOpts extends sap.ui.core.ControlOpts {
          /**
           * The entity set name to fetch data and create the internal chart representation from. Note that this is
           * not a dynamic UI5 property.
           */
          entitySet?: string;

          /**
           * Determines if any label is shown or not
           */
          showLabel?: boolean;

          /**
           * If set to `true`, this enables automatic binding of the chart using the chartBindingPath (if it exists)
           * or entitySet property.
           */
          enableAutoBinding?: boolean;

          /**
           * This attribute can be used to specify the path that is used during the binding of the chart. If not specified,
           * the entitySet attribute is used instead and also stored in this property. Calling `bindElement` binds
           * the control and sets this property.
           */
          chartBindingPath?: string;

          /**
           * Specifies the type of chart. Note that this property is read-only.
           */
          chartType?: string;

          /**
           * The width of the chart. Overrides the width specified in the `size` property.
           */
          width?: sap.ui.core.CSSSize;

          /**
           * The height of the chart. Overrides the height specified in the `size` property.
           */
          height?: sap.ui.core.CSSSize;

          /**
           * @SINCE 1.62
           *
           * The size of the microchart. If not set, the default size is applied based on the size of the device tile.
           * Responsive size takes width and height of the parent container where the micro chart is included.
           */
          size?: sap.m.Size;

          /**
           * @deprecated (since 1.62)
           *
           * If this set to true, width and height of the control are determined by the width and height of the container
           * in which the control is placed or by the width and height property.
           */
          isResponsive?: boolean;

          /**
           * Event fired once the control has been initialized.
           */
          initialize?: Function;

          /**
           * If the associated control is provided, its `text` property is set to the Title property of the Chart
           * annotation. Title property of the DataPoint annotation is ignored.
           */
          chartTitle?: sap.m.Label | string;

          /**
           * If the associated control is provided, its `text` property is set to the Description property of the
           * Chart annotation. Description property of the DataPoint annotation is ignored.
           */
          chartDescription?: sap.m.Label | string;

          /**
           * If the associated control is provided, its `text` property is set to the Unit of Measure. The Value property
           * of the DataPoint annotation should be annotated with this Unit of Measure. It can be either ISOCurrency
           * or Unit from the OData Measures annotations.
           */
          unitOfMeasure?: sap.m.Label | string;

          /**
           * @SINCE 1.42.0
           *
           * If the associated control is provided, its `text` property is set to the free text provided by annotations.
           * The Value property of the DataPoint annotation should be annotated with this free text. As of 1.42.0,
           * this association is only available for chart type 'Donut'.
           */
          freeText?: sap.m.Label | string;

          /**
           * @SINCE 1.60.0
           *
           * Controls or IDs that label this control. Can be used by screen reader software.
           */
          ariaLabelledBy?: sap.ui.core.Control[] | string[];
        }

        interface SmartMicroChartBaseOpts extends sap.ui.core.ControlOpts {
          /**
           * The OData entity set bound to the smart line micro chart.
           *  This entity set is used to pull data into the micro chart and create its internal representation.
           *  Please note that this property cannot be updated dynamically.
           */
          entitySet?: string;

          /**
           * Specifies the type of chart. Note that this property is read-only.
           */
          chartType?: string;

          /**
           * This property can be used to specify a relative path (without '/') to an entity set (not a single entity)
           * that is used during the binding of the chart.
           *  For example, it can be a navigation property that will be added to the context path.
           *  If not specified, the `entitySet` property is used instead.
           */
          chartBindingPath?: string;

          /**
           * Determines if any label is shown or not.
           */
          showLabel?: boolean;

          /**
           * The width of the chart. Overrides the width specified in the `size` property.
           */
          width?: sap.ui.core.CSSSize;

          /**
           * The height of the chart. Overrides the height specified in the `size` property.
           */
          height?: sap.ui.core.CSSSize;

          /**
           * @SINCE 1.62
           *
           * The size of the microchart. If not set, the default size is applied based on the size of the device tile.
           * Responsive size takes width and height of the parent container where the micro chart is included.
           */
          size?: sap.m.Size;

          /**
           * @deprecated (since 1.62)
           *
           * If this set to true, width and height of the control are determined by the width and height of the container
           * in which the control is placed or by the width and height property.
           */
          isResponsive?: boolean;

          /**
           * This event is fired after the control has been initialized.
           */
          initialize?: Function;

          /**
           * If the associated control is provided, its `Text` property is set to the `Title` property of the Chart
           * annotation. The `Title` property of the DataPoint annotation is ignored.
           */
          chartTitle?: sap.m.Label | string;

          /**
           * If the associated control is provided, its `Text` property is set to the `Description` property of the
           * Chart annotation. The `Description` property of the DataPoint annotation is ignored.
           */
          chartDescription?: sap.m.Label | string;

          /**
           * If the associated control is provided, its `Text` property is set to the `Unit of Measure` property of
           * the Chart annotation. The `Value` property of the DataPoint annotation should be annotated with this
           * unit of measurement. It can be either ISOCurrency or Unit from the OData Measures annotations.
           */
          unitOfMeasure?: sap.m.Label | string;

          /**
           * @SINCE 1.60.0
           *
           * Controls or IDs that label this control. Can be used by screen reader software.
           */
          ariaLabelledBy?: sap.ui.core.Control[] | string[];
        }

        interface SmartRadialMicroChartOpts
          extends sap.ui.comp.smartmicrochart.SmartMicroChartBaseOpts {
          /**
           * If set to `true`, this enables automatic binding of the chart using the chartBindingPath (if it exists)
           * property.
           */
          enableAutoBinding?: boolean;

          /**
           * If the associated control is provided, its `text` property is set to the free text provided by annotations.
           * The Value property of the DataPoint annotation should be annotated with this free text. The Label annotation
           * from the OData Common vocabulary can be used.
           */
          freeText?: sap.m.Label | string;
        }

        interface SmartStackedBarMicroChartOpts
          extends sap.ui.comp.smartmicrochart.SmartMicroChartBaseOpts {}
        /**
         * @SINCE 1.38
         *
         * The SmartAreaMicroChart control creates a AreaMicroChart based on OData metadata and the configuration
         * specified. The entitySet attribute must be specified to use the control. This attribute is used to fetch
         * fields from OData metadata, from which Micro Area Chart UI will be generated; it can also be used to
         * fetch the actual chart data.
         *  **Note:**
         *  Most of the attributes/properties are not dynamic and cannot be changed once the control has been initialised.
         */
        class SmartAreaMicroChart extends sap.ui.comp.smartmicrochart
          .SmartMicroChartBase {
          /**
           * Constructor for a new sap.ui.comp.smartmicrochart.SmartAreaMicroChart.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: SmartAreaMicroChartOpts
          );

          /**
           * Creates a new subclass of class sap.ui.comp.smartmicrochart.SmartAreaMicroChart with name `sClassName`
           * and enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.comp.smartmicrochart.SmartMicroChartBase.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets current value of property {@link #getEnableAutoBinding enableAutoBinding}.
           *
           * Only `true` value is supported: the chart will be bound to the chartBindingPath or to the entitySet
           *
           * Default value is `true`.
           */
          getEnableAutoBinding(): boolean;
          /**
           * Returns a metadata object for class sap.ui.comp.smartmicrochart.SmartAreaMicroChart.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
        }
        /**
         * @SINCE 1.38
         *
         * The SmartBulletMicroChart control creates a `sap.suite.ui.microchart.BulletMicroChart` based on OData
         * metadata and the configuration specified by `mSettings`. The entitySet attribute must be specified to
         * use the control. This attribute is used to fetch metadata and annotation information from the given default
         * OData model. Based on this, the BulletMicroChart UI is created.
         *  **Note:**
         *  Most of the attributes/properties are not dynamic and cannot be changed once the control has been initialized.
         */
        class SmartBulletMicroChart extends sap.ui.comp.smartmicrochart
          .SmartMicroChartBase {
          /**
           * Constructor for a new sap.ui.comp.smartmicrochart.SmartBulletMicroChart.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: SmartBulletMicroChartOpts
          );

          /**
           * Creates a new subclass of class sap.ui.comp.smartmicrochart.SmartBulletMicroChart with name `sClassName`
           * and enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.comp.smartmicrochart.SmartMicroChartBase.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets current value of property {@link #getEnableAutoBinding enableAutoBinding}.
           *
           * If set to `true`, this enables automatic binding of the chart using the chartBindingPath (if it exists)
           * property.
           *
           * Default value is `false`.
           */
          getEnableAutoBinding(): boolean;
          /**
           * Returns a metadata object for class sap.ui.comp.smartmicrochart.SmartBulletMicroChart.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Sets a new value for property {@link #getEnableAutoBinding enableAutoBinding}.
           *
           * If set to `true`, this enables automatic binding of the chart using the chartBindingPath (if it exists)
           * property.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setEnableAutoBinding(
            /**
             * New value for property `enableAutoBinding`
             */
            bEnableAutoBinding: boolean
          ): sap.ui.comp.smartmicrochart.SmartBulletMicroChart;
        }
        /**
         * @SINCE 1.60
         *
         * The SmartColumnMicroChart control creates a {@link sap.suite.ui.microchart.ColumnMicroChart ColumnMicroChart}
         * based on OData metadata and the configuration specified.
         * The `entitySet` property is required. The entity set you specify in this property is used to fetch OData
         * metadata and to generate the micro chart's UI. This property can also be used to fetch actual chart data.
         *  **Note:**
         *  Most properties are not dynamic and cannot be changed, once the control has been initialized.
         */
        class SmartColumnMicroChart extends sap.ui.comp.smartmicrochart
          .SmartMicroChartBase {
          /**
           * Constructor for a new sap.ui.comp.smartmicrochart.SmartColumnMicroChart.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: SmartColumnMicroChartOpts
          );

          /**
           * Creates a new subclass of class sap.ui.comp.smartmicrochart.SmartColumnMicroChart with name `sClassName`
           * and enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.comp.smartmicrochart.SmartMicroChartBase.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.ui.comp.smartmicrochart.SmartColumnMicroChart.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
        }
        /**
         * @SINCE 1.58
         *
         * The SmartComparisonMicroChart control creates a ComparisonMicroChart based on OData metadata and the
         * configuration specified. The `entitySet` property is required to use the control. The entity set you
         * specify in this property is used to feetch OData metadata and to generate the micro chart's UI. This
         * property can also be used to fetch actual data.
         *  **Notes:**
         *
         * 	 - Most properties are not dynamic and cannot be changed, once the control has been initialized.
         * 	 -  SmartComparisonMicroChart does not have its own ChartType/Enum annotation. This means that ChartType
         * 			annotation is not specified and SmartComparisonMicroChart cannot be created with a `SmartMicroChart`.
         */
        class SmartComparisonMicroChart extends sap.ui.comp.smartmicrochart
          .SmartMicroChartBase {
          /**
           * Constructor for a new SmartComparisonMicroChart.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: SmartComparisonMicroChartOpts
          );

          /**
           * Creates a new subclass of class sap.ui.comp.smartmicrochart.SmartComparisonMicroChart with name `sClassName`
           * and enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.comp.smartmicrochart.SmartMicroChartBase.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.ui.comp.smartmicrochart.SmartComparisonMicroChart.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
        }
        /**
         * @SINCE 1.61
         *
         * The SmartDeltaMicroChart control creates a {@link sap.suite.ui.microchart.DeltaMicroChart DeltaMicroChart}
         * based on OData metadata and the configuration specified. The delta micro chart represents the delta of
         * two values as a chart.
         *  The `entitySet` property is required to use the control. The entity set you specify in this property
         * is used to fetch OData metadata and to generate the micro chart's UI. This property can also be used
         * to fetch actual data.
         *  **Notes:**
         *
         * 	 - Most properties are not dynamic and cannot be changed once the control has been initialized.
         * 	 -  SmartDeltaMicroChart does not have its own ChartType/Enum annotation. This means that ChartType
         * 			annotation is not specified and SmartDeltaMicroChart cannot be created with a `SmartMicroChart`.
         */
        class SmartDeltaMicroChart extends sap.ui.comp.smartmicrochart
          .SmartMicroChartBase {
          /**
           * Constructor for a new sap.ui.comp.smartmicrochart.SmartDeltaMicroChart.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: SmartDeltaMicroChartOpts
          );

          /**
           * Creates a new subclass of class sap.ui.comp.smartmicrochart.SmartDeltaMicroChart with name `sClassName`
           * and enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.comp.smartmicrochart.SmartMicroChartBase.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets current value of property {@link #getEnableAutoBinding enableAutoBinding}.
           *
           * If set to `true`, this enables automatic data binding using the `chartBindingPath` property , if such
           * a property exists.
           *
           * Default value is `false`.
           */
          getEnableAutoBinding(): boolean;
          /**
           * Returns a metadata object for class sap.ui.comp.smartmicrochart.SmartDeltaMicroChart.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Sets a new value for property {@link #getEnableAutoBinding enableAutoBinding}.
           *
           * If set to `true`, this enables automatic data binding using the `chartBindingPath` property , if such
           * a property exists.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setEnableAutoBinding(
            /**
             * New value for property `enableAutoBinding`
             */
            bEnableAutoBinding: boolean
          ): sap.ui.comp.smartmicrochart.SmartDeltaMicroChart;
        }
        /**
         * @SINCE 1.62.0
         *
         * The SmartHarveyBallMicroChart control creates a {@link sap.suite.ui.microchart.HarveyBallMicroChart}
         * based on OData metadata and the configuration specified in the `mSettings` of the {@link sap.ui.base.ManagedObject}.
         *
         * The `entitySet` property is required. The entity set is used to fetch OData metadata and annotation information
         * from the provided default OData model. The chart's UI is created based on this data.
         *  **Note:**
         *  Most of the properties are not dynamic and cannot be changed once the control has been initialized.
         */
        class SmartHarveyBallMicroChart extends sap.ui.comp.smartmicrochart
          .SmartMicroChartBase {
          /**
           * Constructor for a new SmartHarveyBallMicroChart.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: SmartHarveyBallMicroChartOpts
          );

          /**
           * Creates a new subclass of class sap.ui.comp.smartmicrochart.SmartHarveyBallMicroChart with name `sClassName`
           * and enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.comp.smartmicrochart.SmartMicroChartBase.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets current value of property {@link #getEnableAutoBinding enableAutoBinding}.
           *
           * If set to `true`, the chart is automatically bound using the `chartBindingPath` property, if it is specified.
           *
           * Default value is `false`.
           */
          getEnableAutoBinding(): boolean;
          /**
           * ID of the element which is the current target of the association {@link #getFreeText freeText}, or `null`.
           */
          getFreeText(): sap.ui.core.ID;
          /**
           * Returns a metadata object for class sap.ui.comp.smartmicrochart.SmartHarveyBallMicroChart.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Sets a new value for property {@link #getEnableAutoBinding enableAutoBinding}.
           *
           * If set to `true`, the chart is automatically bound using the `chartBindingPath` property, if it is specified.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setEnableAutoBinding(
            /**
             * New value for property `enableAutoBinding`
             */
            bEnableAutoBinding: boolean
          ): sap.ui.comp.smartmicrochart.SmartHarveyBallMicroChart;
          /**
           * Sets the associated {@link #getFreeText freeText}.
           */
          setFreeText(
            /**
             * ID of an element which becomes the new target of this freeText association; alternatively, an element
             * instance may be given
             */
            oFreeText: sap.ui.core.ID | sap.m.Label
          ): sap.ui.comp.smartmicrochart.SmartHarveyBallMicroChart;
        }
        /**
         * @SINCE 1.60
         *
         * The SmartLineMicroChart control creates a {@link sap.suite.ui.microchart.LineMicroChart LineMicroChart}
         * based on OData metadata and the configuration specified.
         * The `entitySet` property is required. The entity set you specify in this property is used to fetch OData
         * metadata and to generate the micro chart's UI. This property can also be used to fetch actual chart data.
         *  **Note:**
         *  Most properties are not dynamic and cannot be changed, once the control has been initialized.
         */
        class SmartLineMicroChart extends sap.ui.comp.smartmicrochart
          .SmartMicroChartBase {
          /**
           * Constructor for a new sap.ui.comp.smartmicrochart.SmartLineMicroChart.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: SmartLineMicroChartOpts
          );

          /**
           * Creates a new subclass of class sap.ui.comp.smartmicrochart.SmartLineMicroChart with name `sClassName`
           * and enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.comp.smartmicrochart.SmartMicroChartBase.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.ui.comp.smartmicrochart.SmartLineMicroChart.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
        }
        /**
         * @SINCE 1.38
         *
         * The SmartMicroChart control creates a chart based on OData metadata and the configuration specified by
         * `mSettings`.
         * The `entitySet` property is required. This property is used to fetch metadata and annotation information
         * from the specified default OData model. Depending on the UI/ChartType annotation, the control creates
         * a corresponding {@link sap.ui.comp.smartmicrochart.SmartAreaMicroChart SmartAreaMicroChart}, {@link sap.ui.comp.smartmicrochart.SmartBulletMicroChart
         * SmartBulletMicroChart}, {@link sap.ui.comp.smartmicrochart.SmartStackedBarMicroChart SmartStackedBarMicroChart},
         * {@link sap.ui.comp.smartmicrochart.SmartLineMicroChart SmartLineMicroChart}, or {@link sap.ui.comp.smartmicrochart.SmartRadialMicroChart
         * SmartRadialMicroChart} instance and delegates it to the internal control.
         *  **Note:** Most of the attributes are not dynamic and cannot be changed once the control has been
         * initialized.
         */
        class SmartMicroChart extends sap.ui.core.Control {
          /**
           * Constructor for a new sap.ui.comp.smartmicrochart.SmartMicroChart.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: SmartMicroChartOpts
          );

          /**
           * @SINCE 1.60.0
           *
           * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
           */
          addAriaLabelledBy(
            /**
             * The ariaLabelledBy to add; if empty, nothing is inserted
             */
            vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control
          ): sap.ui.comp.smartmicrochart.SmartMicroChart;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:initialize initialize} event of this `sap.ui.comp.smartmicrochart.SmartMicroChart`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartmicrochart.SmartMicroChart` itself.
           *
           * Event fired once the control has been initialized.
           */
          attachInitialize(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartmicrochart.SmartMicroChart`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.smartmicrochart.SmartMicroChart;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:initialize initialize} event of this `sap.ui.comp.smartmicrochart.SmartMicroChart`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachInitialize(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smartmicrochart.SmartMicroChart;
          /**
           * Creates a new subclass of class sap.ui.comp.smartmicrochart.SmartMicroChart with name `sClassName` and
           * enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:initialize initialize} to attached listeners.
           */
          fireInitialize(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.ui.comp.smartmicrochart.SmartMicroChart;
          /**
           * @SINCE 1.60.0
           *
           * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
           * ariaLabelledBy}.
           */
          getAriaLabelledBy(): sap.ui.core.ID[];
          /**
           * Gets current value of property {@link #getChartBindingPath chartBindingPath}.
           *
           * This attribute can be used to specify the path that is used during the binding of the chart. If not specified,
           * the entitySet attribute is used instead and also stored in this property. Calling `bindElement` binds
           * the control and sets this property.
           */
          getChartBindingPath(): string;
          /**
           * ID of the element which is the current target of the association {@link #getChartDescription chartDescription},
           * or `null`.
           */
          getChartDescription(): sap.ui.core.ID;
          /**
           * ID of the element which is the current target of the association {@link #getChartTitle chartTitle}, or
           * `null`.
           */
          getChartTitle(): sap.ui.core.ID;
          /**
           * Gets current value of property {@link #getChartType chartType}.
           *
           * Specifies the type of chart. Note that this property is read-only.
           */
          getChartType(): string;
          /**
           * Gets current value of property {@link #getEnableAutoBinding enableAutoBinding}.
           *
           * If set to `true`, this enables automatic binding of the chart using the chartBindingPath (if it exists)
           * or entitySet property.
           *
           * Default value is `false`.
           */
          getEnableAutoBinding(): boolean;
          /**
           * Gets current value of property {@link #getEntitySet entitySet}.
           *
           * The entity set name to fetch data and create the internal chart representation from. Note that this is
           * not a dynamic UI5 property.
           */
          getEntitySet(): string;
          /**
           * @SINCE 1.42.0
           *
           * ID of the element which is the current target of the association {@link #getFreeText freeText}, or `null`.
           */
          getFreeText(): sap.ui.core.ID;
          /**
           * Gets current value of property {@link #getHeight height}.
           *
           * The height of the chart. Overrides the height specified in the `size` property.
           */
          getHeight(): sap.ui.core.CSSSize;
          /**
           * @deprecated (since 1.62)
           *
           * Gets current value of property {@link #getIsResponsive isResponsive}.
           *
           * If this set to true, width and height of the control are determined by the width and height of the container
           * in which the control is placed or by the width and height property.
           *
           * Default value is `false`.
           */
          getIsResponsive(): boolean;
          /**
           * Returns a metadata object for class sap.ui.comp.smartmicrochart.SmartMicroChart.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getShowLabel showLabel}.
           *
           * Determines if any label is shown or not
           *
           * Default value is `true`.
           */
          getShowLabel(): boolean;
          /**
           * @SINCE 1.62
           *
           * Gets current value of property {@link #getSize size}.
           *
           * The size of the microchart. If not set, the default size is applied based on the size of the device tile.
           * Responsive size takes width and height of the parent container where the micro chart is included.
           *
           * Default value is `Auto`.
           */
          getSize(): sap.m.Size;
          /**
           * ID of the element which is the current target of the association {@link #getUnitOfMeasure unitOfMeasure},
           * or `null`.
           */
          getUnitOfMeasure(): sap.ui.core.ID;
          /**
           * Gets current value of property {@link #getWidth width}.
           *
           * The width of the chart. Overrides the width specified in the `size` property.
           */
          getWidth(): sap.ui.core.CSSSize;
          /**
           * @SINCE 1.60.0
           *
           * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
           */
          removeAllAriaLabelledBy(): sap.ui.core.ID[];
          /**
           * @SINCE 1.60.0
           *
           * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
           */
          removeAriaLabelledBy(
            /**
             * The ariaLabelledBy to be removed or its index or ID
             */
            vAriaLabelledBy: number | sap.ui.core.ID | sap.ui.core.Control
          ): sap.ui.core.ID;
          /**
           * Sets a new value for property {@link #getChartBindingPath chartBindingPath}.
           *
           * This attribute can be used to specify the path that is used during the binding of the chart. If not specified,
           * the entitySet attribute is used instead and also stored in this property. Calling `bindElement` binds
           * the control and sets this property.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setChartBindingPath(
            /**
             * New value for property `chartBindingPath`
             */
            sChartBindingPath: string
          ): sap.ui.comp.smartmicrochart.SmartMicroChart;
          /**
           * Sets the associated {@link #getChartDescription chartDescription}.
           */
          setChartDescription(
            /**
             * ID of an element which becomes the new target of this chartDescription association; alternatively, an
             * element instance may be given
             */
            oChartDescription: sap.ui.core.ID | sap.m.Label
          ): sap.ui.comp.smartmicrochart.SmartMicroChart;
          /**
           * Sets the associated {@link #getChartTitle chartTitle}.
           */
          setChartTitle(
            /**
             * ID of an element which becomes the new target of this chartTitle association; alternatively, an element
             * instance may be given
             */
            oChartTitle: sap.ui.core.ID | sap.m.Label
          ): sap.ui.comp.smartmicrochart.SmartMicroChart;
          /**
           * Sets a new value for property {@link #getEnableAutoBinding enableAutoBinding}.
           *
           * If set to `true`, this enables automatic binding of the chart using the chartBindingPath (if it exists)
           * or entitySet property.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setEnableAutoBinding(
            /**
             * New value for property `enableAutoBinding`
             */
            bEnableAutoBinding: boolean
          ): sap.ui.comp.smartmicrochart.SmartMicroChart;
          /**
           * Sets a new value for property {@link #getEntitySet entitySet}.
           *
           * The entity set name to fetch data and create the internal chart representation from. Note that this is
           * not a dynamic UI5 property.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setEntitySet(
            /**
             * New value for property `entitySet`
             */
            sEntitySet: string
          ): sap.ui.comp.smartmicrochart.SmartMicroChart;
          /**
           * @SINCE 1.42.0
           *
           * Sets the associated {@link #getFreeText freeText}.
           */
          setFreeText(
            /**
             * ID of an element which becomes the new target of this freeText association; alternatively, an element
             * instance may be given
             */
            oFreeText: sap.ui.core.ID | sap.m.Label
          ): sap.ui.comp.smartmicrochart.SmartMicroChart;
          /**
           * Sets a new value for property {@link #getHeight height}.
           *
           * The height of the chart. Overrides the height specified in the `size` property.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setHeight(
            /**
             * New value for property `height`
             */
            sHeight: sap.ui.core.CSSSize
          ): sap.ui.comp.smartmicrochart.SmartMicroChart;
          /**
           * @deprecated (since 1.62)
           *
           * Sets a new value for property {@link #getIsResponsive isResponsive}.
           *
           * If this set to true, width and height of the control are determined by the width and height of the container
           * in which the control is placed or by the width and height property.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setIsResponsive(
            /**
             * New value for property `isResponsive`
             */
            bIsResponsive: boolean
          ): sap.ui.comp.smartmicrochart.SmartMicroChart;
          /**
           * Sets a new value for property {@link #getShowLabel showLabel}.
           *
           * Determines if any label is shown or not
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setShowLabel(
            /**
             * New value for property `showLabel`
             */
            bShowLabel: boolean
          ): sap.ui.comp.smartmicrochart.SmartMicroChart;
          /**
           * @SINCE 1.62
           *
           * Sets a new value for property {@link #getSize size}.
           *
           * The size of the microchart. If not set, the default size is applied based on the size of the device tile.
           * Responsive size takes width and height of the parent container where the micro chart is included.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `Auto`.
           */
          setSize(
            /**
             * New value for property `size`
             */
            sSize: sap.m.Size
          ): sap.ui.comp.smartmicrochart.SmartMicroChart;
          /**
           * Sets the associated {@link #getUnitOfMeasure unitOfMeasure}.
           */
          setUnitOfMeasure(
            /**
             * ID of an element which becomes the new target of this unitOfMeasure association; alternatively, an element
             * instance may be given
             */
            oUnitOfMeasure: sap.ui.core.ID | sap.m.Label
          ): sap.ui.comp.smartmicrochart.SmartMicroChart;
          /**
           * Sets a new value for property {@link #getWidth width}.
           *
           * The width of the chart. Overrides the width specified in the `size` property.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setWidth(
            /**
             * New value for property `width`
             */
            sWidth: sap.ui.core.CSSSize
          ): sap.ui.comp.smartmicrochart.SmartMicroChart;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:initialize initialize} event of this `sap.ui.comp.smartmicrochart.SmartMicroChart`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartmicrochart.SmartMicroChart` itself.
           *
           * Event fired once the control has been initialized.
           */
          attachInitialize(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartmicrochart.SmartMicroChart`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.smartmicrochart.SmartMicroChart;
        }
        /**
         * @SINCE 1.60
         *
         * This is an abstract base class for Smart Micro Charts.
         */
        class SmartMicroChartBase extends sap.ui.core.Control {
          /**
           * Constructor for a new sap.ui.comp.smartmicrochart.SmartMicroChartBase.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new chart
             */
            mSettings?: SmartMicroChartBaseOpts
          );

          /**
           * @SINCE 1.60.0
           *
           * Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.
           */
          addAriaLabelledBy(
            /**
             * The ariaLabelledBy to add; if empty, nothing is inserted
             */
            vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control
          ): sap.ui.comp.smartmicrochart.SmartMicroChartBase;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:initialize initialize} event of this `sap.ui.comp.smartmicrochart.SmartMicroChartBase`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartmicrochart.SmartMicroChartBase` itself.
           *
           * This event is fired after the control has been initialized.
           */
          attachInitialize(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartmicrochart.SmartMicroChartBase`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.smartmicrochart.SmartMicroChartBase;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:initialize initialize} event of this `sap.ui.comp.smartmicrochart.SmartMicroChartBase`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachInitialize(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smartmicrochart.SmartMicroChartBase;
          /**
           * Creates a new subclass of class sap.ui.comp.smartmicrochart.SmartMicroChartBase with name `sClassName`
           * and enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:initialize initialize} to attached listeners.
           */
          fireInitialize(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.ui.comp.smartmicrochart.SmartMicroChartBase;
          /**
           * @SINCE 1.60.0
           *
           * Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy
           * ariaLabelledBy}.
           */
          getAriaLabelledBy(): sap.ui.core.ID[];
          /**
           * Gets current value of property {@link #getChartBindingPath chartBindingPath}.
           *
           * This property can be used to specify a relative path (without '/') to an entity set (not a single entity)
           * that is used during the binding of the chart.
           *  For example, it can be a navigation property that will be added to the context path.
           *  If not specified, the `entitySet` property is used instead.
           */
          getChartBindingPath(): string;
          /**
           * ID of the element which is the current target of the association {@link #getChartDescription chartDescription},
           * or `null`.
           */
          getChartDescription(): sap.ui.core.ID;
          /**
           * ID of the element which is the current target of the association {@link #getChartTitle chartTitle}, or
           * `null`.
           */
          getChartTitle(): sap.ui.core.ID;
          /**
           * Gets current value of property {@link #getChartType chartType}.
           *
           * Specifies the type of chart. Note that this property is read-only.
           */
          getChartType(): string;
          /**
           * Gets current value of property {@link #getEntitySet entitySet}.
           *
           * The OData entity set bound to the smart line micro chart.
           *  This entity set is used to pull data into the micro chart and create its internal representation.
           *  Please note that this property cannot be updated dynamically.
           */
          getEntitySet(): string;
          /**
           * Gets current value of property {@link #getHeight height}.
           *
           * The height of the chart. Overrides the height specified in the `size` property.
           */
          getHeight(): sap.ui.core.CSSSize;
          /**
           * @deprecated (since 1.62)
           *
           * Gets current value of property {@link #getIsResponsive isResponsive}.
           *
           * If this set to true, width and height of the control are determined by the width and height of the container
           * in which the control is placed or by the width and height property.
           *
           * Default value is `false`.
           */
          getIsResponsive(): boolean;
          /**
           * Returns a metadata object for class sap.ui.comp.smartmicrochart.SmartMicroChartBase.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getShowLabel showLabel}.
           *
           * Determines if any label is shown or not.
           *
           * Default value is `true`.
           */
          getShowLabel(): boolean;
          /**
           * @SINCE 1.62
           *
           * Gets current value of property {@link #getSize size}.
           *
           * The size of the microchart. If not set, the default size is applied based on the size of the device tile.
           * Responsive size takes width and height of the parent container where the micro chart is included.
           *
           * Default value is `Auto`.
           */
          getSize(): sap.m.Size;
          /**
           * ID of the element which is the current target of the association {@link #getUnitOfMeasure unitOfMeasure},
           * or `null`.
           */
          getUnitOfMeasure(): sap.ui.core.ID;
          /**
           * Gets current value of property {@link #getWidth width}.
           *
           * The width of the chart. Overrides the width specified in the `size` property.
           */
          getWidth(): sap.ui.core.CSSSize;
          /**
           * @SINCE 1.60.0
           *
           * Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.
           */
          removeAllAriaLabelledBy(): sap.ui.core.ID[];
          /**
           * @SINCE 1.60.0
           *
           * Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.
           */
          removeAriaLabelledBy(
            /**
             * The ariaLabelledBy to be removed or its index or ID
             */
            vAriaLabelledBy: number | sap.ui.core.ID | sap.ui.core.Control
          ): sap.ui.core.ID;
          /**
           * Sets a new value for property {@link #getChartBindingPath chartBindingPath}.
           *
           * This property can be used to specify a relative path (without '/') to an entity set (not a single entity)
           * that is used during the binding of the chart.
           *  For example, it can be a navigation property that will be added to the context path.
           *  If not specified, the `entitySet` property is used instead.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setChartBindingPath(
            /**
             * New value for property `chartBindingPath`
             */
            sChartBindingPath: string
          ): sap.ui.comp.smartmicrochart.SmartMicroChartBase;
          /**
           * Sets the associated {@link #getChartDescription chartDescription}.
           */
          setChartDescription(
            /**
             * ID of an element which becomes the new target of this chartDescription association; alternatively, an
             * element instance may be given
             */
            oChartDescription: sap.ui.core.ID | sap.m.Label
          ): sap.ui.comp.smartmicrochart.SmartMicroChartBase;
          /**
           * Sets the associated {@link #getChartTitle chartTitle}.
           */
          setChartTitle(
            /**
             * ID of an element which becomes the new target of this chartTitle association; alternatively, an element
             * instance may be given
             */
            oChartTitle: sap.ui.core.ID | sap.m.Label
          ): sap.ui.comp.smartmicrochart.SmartMicroChartBase;
          /**
           * Sets a new value for property {@link #getEntitySet entitySet}.
           *
           * The OData entity set bound to the smart line micro chart.
           *  This entity set is used to pull data into the micro chart and create its internal representation.
           *  Please note that this property cannot be updated dynamically.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setEntitySet(
            /**
             * New value for property `entitySet`
             */
            sEntitySet: string
          ): sap.ui.comp.smartmicrochart.SmartMicroChartBase;
          /**
           * Sets a new value for property {@link #getHeight height}.
           *
           * The height of the chart. Overrides the height specified in the `size` property.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setHeight(
            /**
             * New value for property `height`
             */
            sHeight: sap.ui.core.CSSSize
          ): sap.ui.comp.smartmicrochart.SmartMicroChartBase;
          /**
           * @deprecated (since 1.62)
           *
           * Sets a new value for property {@link #getIsResponsive isResponsive}.
           *
           * If this set to true, width and height of the control are determined by the width and height of the container
           * in which the control is placed or by the width and height property.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setIsResponsive(
            /**
             * New value for property `isResponsive`
             */
            bIsResponsive: boolean
          ): sap.ui.comp.smartmicrochart.SmartMicroChartBase;
          /**
           * Sets a new value for property {@link #getShowLabel showLabel}.
           *
           * Determines if any label is shown or not.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setShowLabel(
            /**
             * New value for property `showLabel`
             */
            bShowLabel: boolean
          ): sap.ui.comp.smartmicrochart.SmartMicroChartBase;
          /**
           * @SINCE 1.62
           *
           * Sets a new value for property {@link #getSize size}.
           *
           * The size of the microchart. If not set, the default size is applied based on the size of the device tile.
           * Responsive size takes width and height of the parent container where the micro chart is included.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `Auto`.
           */
          setSize(
            /**
             * New value for property `size`
             */
            sSize: sap.m.Size
          ): sap.ui.comp.smartmicrochart.SmartMicroChartBase;
          /**
           * Sets the associated {@link #getUnitOfMeasure unitOfMeasure}.
           */
          setUnitOfMeasure(
            /**
             * ID of an element which becomes the new target of this unitOfMeasure association; alternatively, an element
             * instance may be given
             */
            oUnitOfMeasure: sap.ui.core.ID | sap.m.Label
          ): sap.ui.comp.smartmicrochart.SmartMicroChartBase;
          /**
           * Sets a new value for property {@link #getWidth width}.
           *
           * The width of the chart. Overrides the width specified in the `size` property.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setWidth(
            /**
             * New value for property `width`
             */
            sWidth: sap.ui.core.CSSSize
          ): sap.ui.comp.smartmicrochart.SmartMicroChartBase;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:initialize initialize} event of this `sap.ui.comp.smartmicrochart.SmartMicroChartBase`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartmicrochart.SmartMicroChartBase` itself.
           *
           * This event is fired after the control has been initialized.
           */
          attachInitialize(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartmicrochart.SmartMicroChartBase`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.smartmicrochart.SmartMicroChartBase;
        }
        /**
         * @SINCE 1.42.0
         *
         * The SmartRadialMicroChart control creates a `sap.suite.ui.microchart.RadialMicroChart` based on OData
         * metadata and the configuration specified by `mSettings`. The entitySet attribute must be specified to
         * use the control. This attribute is used to fetch metadata and annotation information from the given default
         * OData model. Based on this, the RadialMicroChart UI is created.
         *  **Note:**
         *  Most of the attributes/properties are not dynamic and cannot be changed once the control has been initialized.
         */
        class SmartRadialMicroChart extends sap.ui.comp.smartmicrochart
          .SmartMicroChartBase {
          /**
           * Constructor for a new sap.ui.comp.smartmicrochart.SmartRadialMicroChart.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: SmartRadialMicroChartOpts
          );

          /**
           * Creates a new subclass of class sap.ui.comp.smartmicrochart.SmartRadialMicroChart with name `sClassName`
           * and enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.comp.smartmicrochart.SmartMicroChartBase.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets current value of property {@link #getEnableAutoBinding enableAutoBinding}.
           *
           * If set to `true`, this enables automatic binding of the chart using the chartBindingPath (if it exists)
           * property.
           *
           * Default value is `false`.
           */
          getEnableAutoBinding(): boolean;
          /**
           * ID of the element which is the current target of the association {@link #getFreeText freeText}, or `null`.
           */
          getFreeText(): sap.ui.core.ID;
          /**
           * Returns a metadata object for class sap.ui.comp.smartmicrochart.SmartRadialMicroChart.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Sets a new value for property {@link #getEnableAutoBinding enableAutoBinding}.
           *
           * If set to `true`, this enables automatic binding of the chart using the chartBindingPath (if it exists)
           * property.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setEnableAutoBinding(
            /**
             * New value for property `enableAutoBinding`
             */
            bEnableAutoBinding: boolean
          ): sap.ui.comp.smartmicrochart.SmartRadialMicroChart;
          /**
           * Sets the associated {@link #getFreeText freeText}.
           */
          setFreeText(
            /**
             * ID of an element which becomes the new target of this freeText association; alternatively, an element
             * instance may be given
             */
            oFreeText: sap.ui.core.ID | sap.m.Label
          ): sap.ui.comp.smartmicrochart.SmartRadialMicroChart;
        }
        /**
         * @SINCE 1.58
         *
         * The SmartStackedBarMicroChart control creates a StackedBarMicroChart based on OData metadata and the
         * configuration specified. The `entitySet` property is required. The entity set you specify in this property
         * is used to fetch OData metadata and to generate the micro chart's UI. This property can also be used
         * to fetch actual chart data.
         *  **Note:**
         *  Most properties are not dynamic and cannot be changed, once the control has been initialised.
         */
        class SmartStackedBarMicroChart extends sap.ui.comp.smartmicrochart
          .SmartMicroChartBase {
          /**
           * Constructor for a new sap.ui.comp.smartmicrochart.SmartStackedBarMicroChart.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: SmartStackedBarMicroChartOpts
          );

          /**
           * Creates a new subclass of class sap.ui.comp.smartmicrochart.SmartStackedBarMicroChart with name `sClassName`
           * and enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.comp.smartmicrochart.SmartMicroChartBase.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.ui.comp.smartmicrochart.SmartStackedBarMicroChart.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
        }
      }

      namespace smartmultiedit {
        interface ContainerOpts extends sap.ui.core.ControlOpts {
          /**
           * The entity set name to fetch metadata for. This entity set should have `sap:creatable` annotation set
           * to `true` as this control needs to create an entry internally for a short period of time.
           *  Please note that this is not a dynamic SAP UI5 property: setting it twice will not result in an update
           * of the property.
           */
          entitySet?: string;

          /**
           * The binding contexts relevant to this mass editing operation.
           */
          contexts?: sap.ui.model.Context[];

          /**
           * The form that contains smart multi edit fields ({@link sap.ui.comp.smartmultiedit.Field} controls).
           */
          layout?: sap.ui.comp.smartform.SmartForm;
        }

        interface FieldOpts extends sap.ui.core.ControlOpts {
          /**
           * The OData property name to fetch metadata for.
           *  Please note that this is not a dynamic SAP UI5 property: setting it twice will not result in a new binding.
           */
          propertyName?: string;

          /**
           * Indicates whether to display applyToEmptyOnly flag.
           */
          useApplyToEmptyOnly?: boolean;

          /**
           * Indicates whether to check for an existing value in the data model before applying the changes.
           *  Please note that this property does not automatically update the model. It is up to you as the app developer
           * to decide whether you want to consider this property when updating the model or not.
           */
          applyToEmptyOnly?: boolean;

          /**
           * Optional description of the field.
           */
          description?: string;

          /**
           * @SINCE 1.61.0
           *
           * Defines whether the existence of the selected token should be validated.
           * If you set this property to `true`, you should use the {@link sap.ui.comp.smartmultiedit.Container#getErroneousFieldsAndTokens}
           * method, as the validation becomes asynchronous.
           */
          validateTokenExistence?: boolean;

          /**
           * This event is fired when the selection focus moves from one item in the combo box to another.
           */
          change?: Function;

          /**
           * Optional configuration for `SmartField`.
           */
          configuration?: sap.ui.comp.smartfield.Configuration;
        }
        /**
         * @SINCE 1.52.0
         *
         * The SmartMultiEdit.Container control provides a layout for the smart multi edit fields ({@link sap.ui.comp.smartmultiedit.Field})
         * it includes and enables them to access the updated binding contexts.
         */
        class Container extends sap.ui.core.Control {
          /**
           * Constructor for a new `sap.ui.comp.smartmultiedit.Container`.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: ContainerOpts
          );

          /**
           * Destroys the layout in the aggregation {@link #getLayout layout}.
           */
          destroyLayout(): sap.ui.comp.smartmultiedit.Container;
          /**
           * Creates a new subclass of class sap.ui.comp.smartmultiedit.Container with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Provides updated objects, including the values of all {@link sap.ui.comp.smartmultiedit.Field} instances
           * in the `layout` aggregation.
           *
           *  The function returns a Promise that is resolved when each {@link sap.ui.model.Context} in the `contexts`
           * property is copied and updated. The fulfilled function is called with an array that contains an object
           * for each context in the `contexts` property.
           *  Each object in this array contains:
           * 	 - A `context` property that corresponds to the respective context.
           * 	 - A `data` property that contains the updated data object.
           */
          getAllUpdatedContexts(
            /**
             * If true, the returned data structure includes all entity set properties per context.
             */
            merge?: boolean
          ): any;
          /**
           * Gets current value of property {@link #getContexts contexts}.
           *
           * The binding contexts relevant to this mass editing operation.
           *
           * Default value is `[]`.
           */
          getContexts(): sap.ui.model.Context[];
          /**
           * Gets current value of property {@link #getEntitySet entitySet}.
           *
           * The entity set name to fetch metadata for. This entity set should have `sap:creatable` annotation set
           * to `true` as this control needs to create an entry internally for a short period of time.
           *  Please note that this is not a dynamic SAP UI5 property: setting it twice will not result in an update
           * of the property.
           */
          getEntitySet(): string;
          /**
           * @deprecated (since 1.61.0) - replaced by `getErroneousFieldsAndTokens`
           *
           * Collects all fields that have currently client errors.
           */
          getErroneousFields(): sap.ui.comp.smartmultiedit.Field[];
          /**
           * @SINCE 1.61.0
           *
           * Collects all fields that currently have client errors.
           */
          getErroneousFieldsAndTokens(): any;
          /**
           * Collects all instances of {@link sap.ui.comp.smartmultiedit.Field} scattered across the smart form ({@link
           * sap.ui.comp.smartform.SmartForm}) layout.
           */
          getFields(): any;
          /**
           * Gets content of aggregation {@link #getLayout layout}.
           *
           * The form that contains smart multi edit fields ({@link sap.ui.comp.smartmultiedit.Field} controls).
           */
          getLayout(): sap.ui.comp.smartform.SmartForm;
          /**
           * Returns a metadata object for class sap.ui.comp.smartmultiedit.Container.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Explicitly pushes the smart multi edit container's ({@link sap.ui.comp.smartmultiedit.Container}) custom
           * data to the specified field ({@link sap.ui.comp.smartmultiedit.Field}). Can be useful when adding fields
           * to a container after it has already been rendered.
           */
          indexField(
            /**
             * {@link sap.ui.comp.smartmultiedit.Field} to push the custom data to.
             */
            oField: sap.ui.comp.smartmultiedit.Field
          ): void;
          /**
           * Sets the contexts to be updated. These contexts are required for offering possible values and are also
           * used by the {@link sap.ui.comp.smartmultiedit.Container#getAllUpdatedContexts} method.
           */
          setContexts(
            /**
             * Contexts to be used. This property must be an array.
             */
            contexts: sap.ui.model.Context[]
          ): sap.ui.comp.smartmultiedit.Container;
          /**
           * Sets the entity set to read the properties from. Setting this value twice will not result in an update
           * of the underlining components.
           */
          setEntitySet(
            /**
             * Entity set to use.
             */
            entitySet: string
          ): sap.ui.comp.smartmultiedit.Container;
          /**
           * Sets the layout to use.
           */
          setLayout(
            /**
             * Smart form with the layout.
             */
            oSmartForm: sap.ui.comp.smartmultiedit.Field
          ): sap.ui.comp.smartmultiedit.Container;
        }
        /**
         * @SINCE 1.52.0
         *
         * The SmartMultiEdit.Field control enables you to edit multiple homogeneous objects simultaneously. It
         * allows you to select a predefined item from a combo box and apply your selection to all objects being
         * edited.
         *  In addition, SmartMultiEdit.Field can handle metadata for a specific OData property when you need to
         * enable mass editing for multiple contexts. The contexts are handled by the {@link sap.ui.comp.smartmultiedit.Container}
         * control.
         */
        class Field extends sap.ui.core.Control {
          /**
           * Constructor for a new `sap.ui.comp.smartmultiedit.Field`.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: FieldOpts
          );

          /**
           * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.comp.smartmultiedit.Field`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartmultiedit.Field` itself.
           *
           * This event is fired when the selection focus moves from one item in the combo box to another.
           */
          attachChange(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartmultiedit.Field` itself
             */
            oListener?: object
          ): sap.ui.comp.smartmultiedit.Field;
          /**
           * Destroys the configuration in the aggregation {@link #getConfiguration configuration}.
           */
          destroyConfiguration(): sap.ui.comp.smartmultiedit.Field;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.ui.comp.smartmultiedit.Field`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachChange(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smartmultiedit.Field;
          /**
           * Creates a new subclass of class sap.ui.comp.smartmultiedit.Field with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:change change} to attached listeners.
           */
          fireChange(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * The selected item.
               */
              selectedItem?: sap.ui.core.Item;
            }
          ): sap.ui.comp.smartmultiedit.Field;
          /**
           * Gets current value of property {@link #getApplyToEmptyOnly applyToEmptyOnly}.
           *
           * Indicates whether to check for an existing value in the data model before applying the changes.
           *  Please note that this property does not automatically update the model. It is up to you as the app developer
           * to decide whether you want to consider this property when updating the model or not.
           *
           * Default value is `false`.
           */
          getApplyToEmptyOnly(): boolean;
          /**
           * Gets content of aggregation {@link #getConfiguration configuration}.
           *
           * Optional configuration for `SmartField`.
           */
          getConfiguration(): sap.ui.comp.smartfield.Configuration;
          /**
           * Returns the data type used by the smart field. This data type is determined from metadata.
           */
          getDataType(): String;
          /**
           * Gets current value of property {@link #getDescription description}.
           *
           * Optional description of the field.
           */
          getDescription(): string;
          /**
           * Returns the label associated with this field.
           */
          getLabel(): sap.m.Label | any;
          /**
           * Returns a metadata object for class sap.ui.comp.smartmultiedit.Field.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Checks if the data type of the smart multi edit field is nullable as defined by its metadata.
           */
          getNullable(): boolean;
          /**
           * Gets current value of property {@link #getPropertyName propertyName}.
           *
           * The OData property name to fetch metadata for.
           *  Please note that this is not a dynamic SAP UI5 property: setting it twice will not result in a new binding.
           */
          getPropertyName(): string;
          /**
           * Returns the raw value for the OData property that is determined by the `propertyName` property. If the
           * 'Keep existing value' item is selected, an empty plain object is returned.
           */
          getRawValue(): object;
          /**
           * Returns the path to the text property used by the combo box.
           */
          getRecordTextPath(): string | null;
          /**
           * Returns the item that was selected using the Select action.
           */
          getSelectedItem(): sap.ui.core.Item | null;
          /**
           * Checks if a {@link sap.ui.comp.smartfield.SmartField} is present, which provides a way to define an explicit
           * value for the field.
           */
          getShowValueHelp(): boolean;
          /**
           * Returns the smart field that is used for selecting a new value.
           */
          getSmartField(): sap.ui.comp.smartfield.SmartField;
          /**
           * Returns the unit of measurement for the underlying smart field.
           */
          getUnitOfMeasure(): string;
          /**
           * Returns the name of the property used for the unit of measurement.
           */
          getUnitOfMeasurePropertyName(): string | null;
          /**
           * Gets current value of property {@link #getUseApplyToEmptyOnly useApplyToEmptyOnly}.
           *
           * Indicates whether to display applyToEmptyOnly flag.
           *
           * Default value is `false`.
           */
          getUseApplyToEmptyOnly(): boolean;
          /**
           * @SINCE 1.61.0
           *
           * Gets current value of property {@link #getValidateTokenExistence validateTokenExistence}.
           *
           * Defines whether the existence of the selected token should be validated.
           * If you set this property to `true`, you should use the {@link sap.ui.comp.smartmultiedit.Container#getErroneousFieldsAndTokens}
           * method, as the validation becomes asynchronous.
           *
           * Default value is `true`.
           */
          getValidateTokenExistence(): boolean;
          /**
           * Returns the current value of the smart field.
           */
          getValue(): any;
          /**
           * Returns true if there is a client error present, false otherwise.
           */
          hasClientError(): boolean;
          /**
           * Checks if the 'Leave blank' item is selected.
           */
          isBlankSelected(): boolean;
          /**
           * Checks if the data type of the smart field is boolean.
           */
          isBoolean(): boolean;
          /**
           * Checks if the field uses a combo box. This check doesn't rely on data type but rather a certain combination
           * of annotations.
           */
          isComboBox(): boolean;
          /**
           * Checks if the data type of the smart field is unit of measurement (UOM).
           */
          isComposite(): boolean;
          /**
           * Checks if the data type of the smart field is date.
           */
          isDate(): boolean;
          /**
           * Checks if the data type of the smart field is date with time.
           */
          isDateTime(): boolean;
          /**
           * Checks if the data type of the smart field is some kind of a float number.
           */
          isFloat(): boolean;
          /**
           * Checks if the data type of the smart field is some kind of a integer number.
           */
          isInteger(): boolean;
          /**
           * Checks if the 'Keep existing value' item is selected.
           */
          isKeepExistingSelected(): boolean;
          /**
           * Checks if the data type of the smart field is string.
           */
          isString(): boolean;
          /**
           * Checks if the data type of the smart field is time.
           */
          isTime(): boolean;
          /**
           * Checks if the 'Use Value Help' item is selected.
           */
          isValueHelpSelected(): boolean;
          /**
           * Sets a new value for property {@link #getApplyToEmptyOnly applyToEmptyOnly}.
           *
           * Indicates whether to check for an existing value in the data model before applying the changes.
           *  Please note that this property does not automatically update the model. It is up to you as the app developer
           * to decide whether you want to consider this property when updating the model or not.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setApplyToEmptyOnly(
            /**
             * New value for property `applyToEmptyOnly`
             */
            bApplyToEmptyOnly: boolean
          ): sap.ui.comp.smartmultiedit.Field;
          /**
           * Sets the optional configuration aggregation.
           */
          setConfiguration(
            /**
             * Optional configuration to set.
             */
            oConfig: sap.ui.comp.smartfield.Configuration
          ): sap.ui.comp.smartmultiedit.Field;
          /**
           * Sets a new value for property {@link #getDescription description}.
           *
           * Optional description of the field.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setDescription(
            /**
             * New value for property `description`
             */
            sDescription: string
          ): sap.ui.comp.smartmultiedit.Field;
          /**
           * Sets the name of the property to bind to.
           */
          setPropertyName(
            /**
             * Name of the property to bind to.
             */
            sName: string
          ): sap.ui.comp.smartmultiedit.Field;
          /**
           * Sets the item to be selected in the `sap.m.Select` instance, using its index.
           */
          setSelectedIndex(
            /**
             * An index of the item inside the Select action.
             */
            iIndex: number
          ): sap.ui.comp.smartmultiedit.Field;
          /**
           * Sets the item to be treated as selected in the `sap.m.Select` instance.
           */
          setSelectedItem(
            /**
             * An {@link sap.ui.core.Item} instance or `null`.
             */
            oItem: sap.ui.core.Item | null
          ): sap.ui.comp.smartmultiedit.Field;
          /**
           * Sets a new value for property {@link #getUseApplyToEmptyOnly useApplyToEmptyOnly}.
           *
           * Indicates whether to display applyToEmptyOnly flag.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setUseApplyToEmptyOnly(
            /**
             * New value for property `useApplyToEmptyOnly`
             */
            bUseApplyToEmptyOnly: boolean
          ): sap.ui.comp.smartmultiedit.Field;
          /**
           * @SINCE 1.61.0
           *
           * Sets a new value for property {@link #getValidateTokenExistence validateTokenExistence}.
           *
           * Defines whether the existence of the selected token should be validated.
           * If you set this property to `true`, you should use the {@link sap.ui.comp.smartmultiedit.Container#getErroneousFieldsAndTokens}
           * method, as the validation becomes asynchronous.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setValidateTokenExistence(
            /**
             * New value for property `validateTokenExistence`
             */
            bValidateTokenExistence: boolean
          ): sap.ui.comp.smartmultiedit.Field;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.comp.smartmultiedit.Field`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartmultiedit.Field` itself.
           *
           * This event is fired when the selection focus moves from one item in the combo box to another.
           */
          attachChange(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartmultiedit.Field` itself
             */
            oListener?: object
          ): sap.ui.comp.smartmultiedit.Field;
        }
      }

      namespace smartmultiinput {
        interface SmartMultiInputOpts
          extends sap.ui.comp.smartfield.SmartFieldOpts {
          /**
           * Enables value help with conditions. Can only be used without binding context. Otherwise, has no effect.
           */
          supportRanges?: boolean;

          /**
           * Enables multiple selection in value help dialog.
           */
          supportMultiSelect?: boolean;

          /**
           * This event is fired before the OData model's `create` method is called. Provides object with parameters
           * of the call for editing.
           */
          beforeCreate?: Function;

          /**
           * This event is fired before the OData model's `remove` method is called. Provides object with parameters
           * of the call in key:value format for editing.
           */
          beforeRemove?: Function;

          /**
           * This event is fired when the tokens aggregation is changed due to a user action (add / remove token).
           * This event is fired only for token changes in non-bound `SmartMultiInput` elements.
           */
          tokenUpdate?: Function;

          /**
           * This event is fired when item selection is changed. It is relevant only for selection changes on non-bound
           * `SmartMultiInput` elements with fixed values, such as {@link sap.m.MultiComboBox}.
           */
          selectionChange?: Function;
        }
        /**
         * @SINCE 1.56.0
         *
         * The `SmartMultiInput` control is a wrapper for other controls that extends the {@link sap.ui.comp.smartfield.SmartField}
         * control and supports the same settings and annotations.
         *  It interprets OData metadata to create multi-input controls, such as {@link sap.m.MultiInput} and {@link
         * sap.m.MultiComboBox}.
         *  The OData entity property that is changed or displayed in the control is derived from the control's
         * `value` property. You can use the `SmartMultiInput` control in two ways:
         * 	 - With data binding - the `value` property is bound to a navigation property (1:N relationship).
         * 	 - Without data binding - the `value` property is bound to an arbitrary property of the entity set that
         * 			is specified in the `entitySet` property.  Both cases are shown in the example bellow as well as
         * 			in the samples. Tokens selected in `SmartMultiInput` can be retrieved using either the {@link #getTokens}
         * 			or the {@link #getValue} method.
         *
         *
         * ```javascript
         *
         * <sap.ui.comp.smartmultiinput.SmartMultiInput value="{Categories/CategoryId}"/>
         * <sap.ui.comp.smartmultiinput.SmartMultiInput entitySet="Categories" value="{CategoryId}"/>
         * ```
         *
         *
         * For more details, see the {@link https://ui5.sap.com/#/entity/sap.ui.comp.smartmultiinput.SmartMultiInput
         * samples}.
         *
         * Note: Just as the rest of the {@link sap.ui.comp} library, this control supports only OData V2 (see {@link
         * sap.ui.model.odata.v2.ODataModel}) and default models.
         */
        class SmartMultiInput extends sap.ui.comp.smartfield.SmartField {
          /**
           * Constructor for a new `sap.ui.comp.smartfield.SmartMultiInput`.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           * See:
           * 	{@link topic:5644169deb76438f800f269b0cb715fc Smart Multi Input}
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: SmartMultiInputOpts
          );

          /**
           * Attaches event handler `fnFunction` to the {@link #event:beforeCreate beforeCreate} event of this `sap.ui.comp.smartmultiinput.SmartMultiInput`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartmultiinput.SmartMultiInput` itself.
           *
           * This event is fired before the OData model's `create` method is called. Provides object with parameters
           * of the call for editing.
           */
          attachBeforeCreate(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartmultiinput.SmartMultiInput`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.smartmultiinput.SmartMultiInput;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:beforeRemove beforeRemove} event of this `sap.ui.comp.smartmultiinput.SmartMultiInput`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartmultiinput.SmartMultiInput` itself.
           *
           * This event is fired before the OData model's `remove` method is called. Provides object with parameters
           * of the call in key:value format for editing.
           */
          attachBeforeRemove(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartmultiinput.SmartMultiInput`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.smartmultiinput.SmartMultiInput;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
           * `sap.ui.comp.smartmultiinput.SmartMultiInput`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartmultiinput.SmartMultiInput` itself.
           *
           * This event is fired when item selection is changed. It is relevant only for selection changes on non-bound
           * `SmartMultiInput` elements with fixed values, such as {@link sap.m.MultiComboBox}.
           */
          attachSelectionChange(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartmultiinput.SmartMultiInput`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.smartmultiinput.SmartMultiInput;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:tokenUpdate tokenUpdate} event of this `sap.ui.comp.smartmultiinput.SmartMultiInput`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartmultiinput.SmartMultiInput` itself.
           *
           * This event is fired when the tokens aggregation is changed due to a user action (add / remove token).
           * This event is fired only for token changes in non-bound `SmartMultiInput` elements.
           */
          attachTokenUpdate(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartmultiinput.SmartMultiInput`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.smartmultiinput.SmartMultiInput;
          /**
           * Checks whether a client error has been detected. In addition, this method displays an error message,
           * if it is not already displayed.
           */
          // @ts-ignore
          checkClientError(): boolean;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:beforeCreate beforeCreate} event of this `sap.ui.comp.smartmultiinput.SmartMultiInput`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachBeforeCreate(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smartmultiinput.SmartMultiInput;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:beforeRemove beforeRemove} event of this `sap.ui.comp.smartmultiinput.SmartMultiInput`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachBeforeRemove(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smartmultiinput.SmartMultiInput;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:selectionChange selectionChange} event of
           * this `sap.ui.comp.smartmultiinput.SmartMultiInput`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachSelectionChange(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smartmultiinput.SmartMultiInput;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:tokenUpdate tokenUpdate} event of this `sap.ui.comp.smartmultiinput.SmartMultiInput`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachTokenUpdate(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smartmultiinput.SmartMultiInput;
          /**
           * Creates a new subclass of class sap.ui.comp.smartmultiinput.SmartMultiInput with name `sClassName` and
           * enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.comp.smartfield.SmartField.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:beforeCreate beforeCreate} to attached listeners.
           *
           * Listeners may prevent the default action of this event by using the `preventDefault`-method on the event
           * object.
           */
          fireBeforeCreate(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * Data of the entry that should be created.
               */
              oData?: object;
              /**
               * Parameter map that will be passed to the OData model's `create` method, accepts the same properties as
               * mParameters of the `create` method. Parameters `success` and `error` have no meaning as they are changed
               * and used internally.
               */
              mParameters?: object;
            }
          ): boolean;
          /**
           * Fires event {@link #event:beforeRemove beforeRemove} to attached listeners.
           *
           * Listeners may prevent the default action of this event by using the `preventDefault`-method on the event
           * object.
           */
          fireBeforeRemove(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * Parameter map that will be passed to the OData model's `remove` method, accepts the same properties as
               * mParameters of the `remove` method. Parameters `success` and `error` have no meaning as they are changed
               * and used internally.
               */
              mParameters?: object;
            }
          ): boolean;
          /**
           * Fires event {@link #event:selectionChange selectionChange} to attached listeners.
           */
          fireSelectionChange(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * Item that was selected or deselected.
               */
              changedItem?: sap.ui.core.Item;
              /**
               * Selection state: `true` if the item is selected, `false` if item is not selected.
               */
              selected?: boolean;
            }
          ): sap.ui.comp.smartmultiinput.SmartMultiInput;
          /**
           * Fires event {@link #event:tokenUpdate tokenUpdate} to attached listeners.
           */
          fireTokenUpdate(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * Type of TokenUpdate event. There are two TokenUpdate types: `added` and `removed`. Use Tokenizer.TokenUpdateType.Added
               * for "added" and Tokenizer.TokenUpdateType.Removed for "removed". See {@link sap.m.Tokenizer} for details.
               */
              type?: string;
              /**
               * The array of tokens that are added. This parameter is used when tokenUpdate type is "added".
               */
              addedTokens?: sap.m.Token[];
              /**
               * The array of tokens that are removed. This parameter is used when tokenUpdate type is "removed".
               */
              removedTokens?: sap.m.Token[];
            }
          ): sap.ui.comp.smartmultiinput.SmartMultiInput;
          /**
           * Returns a filter that can be applied to restrict the OData query.
           */
          getFilter(): sap.ui.model.Filter;
          /**
           * Returns a metadata object for class sap.ui.comp.smartmultiinput.SmartMultiInput.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Returns an array of token values in range format.
           */
          getRangeData(): any;
          /**
           * Gets current value of property {@link #getSupportMultiSelect supportMultiSelect}.
           *
           * Enables multiple selection in value help dialog.
           *
           * Default value is `true`.
           */
          getSupportMultiSelect(): boolean;
          /**
           * Gets current value of property {@link #getSupportRanges supportRanges}.
           *
           * Enables value help with conditions. Can only be used without binding context. Otherwise, has no effect.
           *
           * Default value is `false`.
           */
          getSupportRanges(): boolean;
          /**
           * Returns tokens selected in `SmartMultiInput`
           */
          getTokens(): sap.m.Token[];
          /**
           * Returns tokens selected in `SmartMultiInput`
           */
          // @ts-ignore
          getValue(): sap.m.Token[];
          /**
           * Sets tokens based on given objects with range data. Can only be used without a data binding. Otherwise,
           * has no effect.
           */
          setRangeData(
            /**
             * Object or array of objects with range data. Tokens will be created based on this data and fed into the
             * smart multi input.
             */
            vRangeData: object | any[]
          ): void;
          /**
           * Sets a new value for property {@link #getSupportMultiSelect supportMultiSelect}.
           *
           * Enables multiple selection in value help dialog.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setSupportMultiSelect(
            /**
             * New value for property `supportMultiSelect`
             */
            bSupportMultiSelect: boolean
          ): sap.ui.comp.smartmultiinput.SmartMultiInput;
          /**
           * Sets a new value for property {@link #getSupportRanges supportRanges}.
           *
           * Enables value help with conditions. Can only be used without binding context. Otherwise, has no effect.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setSupportRanges(
            /**
             * New value for property `supportRanges`
             */
            bSupportRanges: boolean
          ): sap.ui.comp.smartmultiinput.SmartMultiInput;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:beforeCreate beforeCreate} event of this `sap.ui.comp.smartmultiinput.SmartMultiInput`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartmultiinput.SmartMultiInput` itself.
           *
           * This event is fired before the OData model's `create` method is called. Provides object with parameters
           * of the call for editing.
           */
          attachBeforeCreate(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartmultiinput.SmartMultiInput`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.smartmultiinput.SmartMultiInput;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:beforeRemove beforeRemove} event of this `sap.ui.comp.smartmultiinput.SmartMultiInput`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartmultiinput.SmartMultiInput` itself.
           *
           * This event is fired before the OData model's `remove` method is called. Provides object with parameters
           * of the call in key:value format for editing.
           */
          attachBeforeRemove(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartmultiinput.SmartMultiInput`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.smartmultiinput.SmartMultiInput;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
           * `sap.ui.comp.smartmultiinput.SmartMultiInput`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartmultiinput.SmartMultiInput` itself.
           *
           * This event is fired when item selection is changed. It is relevant only for selection changes on non-bound
           * `SmartMultiInput` elements with fixed values, such as {@link sap.m.MultiComboBox}.
           */
          attachSelectionChange(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartmultiinput.SmartMultiInput`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.smartmultiinput.SmartMultiInput;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:tokenUpdate tokenUpdate} event of this `sap.ui.comp.smartmultiinput.SmartMultiInput`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartmultiinput.SmartMultiInput` itself.
           *
           * This event is fired when the tokens aggregation is changed due to a user action (add / remove token).
           * This event is fired only for token changes in non-bound `SmartMultiInput` elements.
           */
          attachTokenUpdate(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartmultiinput.SmartMultiInput`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.smartmultiinput.SmartMultiInput;
        }
      }

      namespace smarttable {
        interface SmartTableOpts extends sap.m.VBoxOpts {
          /**
           * @SINCE 1.26.0
           *
           * The entity set name from which to fetch data and generate the columns. Note that this is not a dynamic
           * UI5 property
           *
           * **Note:** It is not allowed to have one of the following strings as field names for your OData entity:
           *
           * 	 - `btnEditToggle`
           * 	 - `btnExcelExport`
           * 	 - `btnFullScreen`
           * 	 - `btnPersonalisation`
           * 	 - `header`
           * 	 - `infoToolbarText`
           * 	 - `persoController`
           * 	 - `toolbarSeperator`
           * 	 - `toolbarSpacer`
           * 	 - `ui5table`
           * 	 - `variant`
           */
          entitySet?: string;

          /**
           * @SINCE 1.26.0
           *
           * ID of the corresponding SmartFilter control; When specified, the SmartTable searches for the SmartFilter
           * (also in the closest parent View) and attaches to the relevant events of the SmartFilter; to fetch data,
           * show overlay etc.
           */
          smartFilterId?: string;

          /**
           * @SINCE 1.26.0
           *
           * CSV of fields that must be ignored in the OData metadata by the SmartTable control.
           *  Note:
           *  No validation is done. Please ensure that you do not add spaces or special characters.
           */
          ignoredFields?: string;

          /**
           * @SINCE 1.32.0
           *
           * CSV of fields that must be shown initially in the SmartTable as visible columns and in the order specified.
           *  This property is mainly meant to be used when no LineItem annotation exists.
           *  If you have fields in the XMLView they are always shown first; then, the columns are added based on
           * the LineItem annotation and finally based on this property.
           *  Note:
           *  If both this property and the LineItem annotation exist, the order of fields cannot be guaranteed to
           * be as mentioned here.
           *  No validation is done. Please ensure that you do not add spaces or special characters.
           */
          initiallyVisibleFields?: string;

          /**
           * @SINCE 1.32.0
           *
           * CSV of fields that must be always requested from the backend
           *  This property is mainly meant to be used when there is no PresentationVariant annotation.
           *  If both this property and the PresentationVariant annotation exist, the select request sent to the backend
           * would be a combination of both.
           *  Note:
           *  For `AnalyticalTable` (supported since 1.54), the following restrictions apply:
           * 	 - The property name(s) must not point to a new dimension or a measure.
           * 	 - The property name(s) must not point to a navigationProperty/association path, as this might not supported
           * 			by analytical services.  No validation is done. Please ensure that you do not add spaces or special
           * 			characters.
           */
          requestAtLeastFields?: string;

          /**
           * @SINCE 1.32.0
           *
           * CSV of fields that is not shown in the personalization dialog.
           *  Note:
           *  No validation is done. Please ensure that you do not add spaces or special characters.
           */
          ignoreFromPersonalisation?: string;

          /**
           * @SINCE 1.26.0
           *
           * Specifies the type of table to be created in the SmartTable control.
           *  Note:
           *  If you add a table to the content of the SmartTable in the view, this property has no effect.
           */
          tableType?: sap.ui.comp.smarttable.TableType;

          /**
           * @SINCE 1.26.0
           *
           * The useVariantManagement attribute can be set to true or false depending on whether you want to use variants.
           * As a prerequisite you need to specify the persistencyKey property.
           */
          useVariantManagement?: boolean;

          /**
           * @SINCE 1.38.0
           *
           * The showVariantManagement attribute can be set to true or false for controlling the visibility of VariantManagement
           * button.
           */
          showVariantManagement?: boolean;

          /**
           * @SINCE 1.26.0
           *
           * Can be set to true or false depending on whether you want to export data to a spreadsheet application,
           * for example Microsoft Excel.
           *  Note:
           *  If `exportType` is `sap.ui.comp.smarttable.ExportType.GW`, any $expand parameters are removed when sending
           * the request to generate the spreadsheet.
           *  As of UI5 version 1.56: If `exportType` is `sap.ui.comp.smarttable.ExportType.UI5Client` and `TreeTable`
           * is used, the `worksheet.hierarchyLevel` property (see {@link sap.ui.export.Spreadsheet}) is filled from
           * the binding, if the relevant information is available there for exporting hierarchical data in the spreadsheet.
           */
          useExportToExcel?: boolean;

          /**
           * @SINCE 1.50.0
           *
           * Specifies the type of export to be used in the `SmartTable` control.
           */
          exportType?: sap.ui.comp.smarttable.ExportType;

          /**
           * @SINCE 1.26.0
           *
           * The useTablePersonalisation attribute can be set to true or false depending on whether you want to define
           * personalized table settings. If you want to persist the table personalization, you need to specify the
           * persistencyKey property.
           */
          useTablePersonalisation?: boolean;

          /**
           * @SINCE 1.38.0
           *
           * The showTablePersonalisation attribute can be set to true or false for controlling the visibility of
           * the TablePersonalisation button.
           */
          showTablePersonalisation?: boolean;

          /**
           * @SINCE 1.26.0
           *
           * If set to `true` (default), the number of rows is shown along with the header text.
           *  If set to `false`, the number of rows will not be shown on the user interface.
           *  Note:
           *  To avoid sending dedicated OData requests in order to improve your application's performance, you must
           * configure the binding of the table as required.
           */
          showRowCount?: boolean;

          /**
           * @SINCE 1.26.0
           *
           * Specifies header text that is shown in table
           */
          header?: string;

          /**
           * @SINCE 1.26.0
           *
           * A style class which is defined for the toolbar of the table.
           */
          toolbarStyleClass?: string;

          /**
           * @SINCE 1.26.0
           * @deprecated (since 1.40.0) - After personalization dialog has been introduced in SmartTable the property
           * `enableCustomFilter` does not make sense. When setting the property to `false`, the entered custom filter
           * value will not be shown in personalization dialog and will also not be persisted in variant management.
           * The custom filter will also be overwritten when rebindTable is called on the SmartTable.
           *
           * Can be used to override the filter behavior. If set to true (default), instead of the filter input box
           * a button is rendered. When pressing this button, the SmartTable control opens the filter panel directly
           * in the table personalization dialog.
           */
          enableCustomFilter?: boolean;

          /**
           * @SINCE 1.26.0
           *
           * Key used to access personalization data.
           */
          persistencyKey?: string;

          /**
           * @SINCE 1.26.0
           * @deprecated (since 1.29) - This property has no effect
           *
           * If set to true, the standard toolbar and custom toolbar will be merged into one toolbar. The combined
           * toolbar will have a solid style.
           */
          useOnlyOneSolidToolbar?: boolean;

          /**
           * @SINCE 1.56
           *
           * Specifies whether the `Toolbar` control of the `SmartTable` is placed inside the corresponding aggregation
           * of the inner UI5 table control.
           */
          placeToolbarInTable?: boolean;

          /**
           * @SINCE 1.28.0
           *
           * Retrieves or sets the current variant.
           */
          currentVariantId?: string;

          /**
           * @SINCE 1.28.0
           *
           * This attribute can be used to specify if the controls created by the SmartTable control are editable.
           * (The automatic toggle of controls works only for the SmartField/SmartToggle scenario)
           */
          editable?: boolean;

          /**
           * @SINCE 1.28.0
           *
           * When set to true, this enables automatic binding of the table using the tableBindingPath (if it exists)
           * or entitySet property. This happens just after the `initialise` event has been fired.
           */
          enableAutoBinding?: boolean;

          /**
           * @SINCE 1.28.0
           *
           * This attribute can be used to specify the path that is used during the binding of the table. If not specified,
           * the entitySet attribute is used instead. (used only if binding is established internally/automatically
           * - See enableAutoBinding)
           */
          tableBindingPath?: string;

          /**
           * @SINCE 1.28.0
           *
           * Specifies whether the editable property can be toggled via a button on the toolbar. (The automatic toggle
           * of controls works only for the SmartField/SmartToggle scenario)
           */
          editTogglable?: boolean;

          /**
           * @SINCE 1.30.0
           *
           * The demandPopin attribute can be set to true or false depending on whether you want to display columns
           * as popins on the responsive table
           */
          demandPopin?: boolean;

          /**
           * @SINCE 1.38
           *
           * Controls the visibility of the FullScreen button.
           */
          showFullScreenButton?: boolean;

          /**
           * @SINCE 1.58
           *
           * The text shown initially before the control is bound and initialized. The special values `$FILTERBAR`
           * or `$NO_FILTERBAR` can be specified to make the `SmartTable` control show the initial text as if the
           * `SmartFilterBar` control were associated with it. If nothing is specified, the default behavior is to
           * show the initial text based on whether the `SmartFilterBar` control is actually associated with the `SmartTable`
           * control.
           */
          initialNoDataText?: string;

          /**
           * @SINCE 1.70
           *
           * Shows an info toolbar.
           *  Filters that are applied using the table personalization dialog are shown in the info toolbar.
           *  **Note:**
           *
           * 	 - The default value for the property is `Auto`, which means that the info toolbar is shown by default
           * 			if table type is `ResponsiveTable`.
           * 	 - The info toolbar is hidden if the property is set to `Off`.
           * 	 - The info toolbar is visible if the property is set to `On`. Currently the info toolbar is only available
           * 			for the table type `ResponsiveTable`.
           * 	 - If multiple filters are applied to the same column, then the info toolbar contains the column name
           * 			only once.
           * 	 - In case there is a custom info toolbar used for the responsive table control, then the property must
           * 			be set to `Off`. Otherwise, an error is logged in the browser console.
           */
          useInfoToolbar?: sap.ui.comp.smarttable.InfoToolbarBehavior;

          /**
           * @SINCE 1.26.0
           *
           * This event is fired once the control has been initialized.
           */
          initialise?: Function;

          /**
           * @SINCE 1.26.0
           *
           * This event is fired just before the binding is being done.
           */
          beforeRebindTable?: Function;

          /**
           * @SINCE 1.28.0
           *
           * This event is fired when display/edit button is clicked.
           */
          editToggled?: Function;

          /**
           * @SINCE 1.52.0
           * @deprecated (since 1.56) - Use `beforeRebindTable` event to attach/listen to the binding "events" directly
           *
           * This event is fired when data is requested after binding. The event is fired if the binding for the table
           * is done by the SmartTable itself.
           */
          dataRequested?: Function;

          /**
           * @SINCE 1.28.0
           * @deprecated (since 1.56) - Use `beforeRebindTable` event to attach/listen to the binding "events" directly
           *
           * This event is fired when data is received after binding. The event is fired if the binding for the table
           * is done by the SmartTable itself.
           */
          dataReceived?: Function;

          /**
           * @SINCE 1.28.0
           *
           * This event is fired after variant management in the SmartTable has been initialized.
           */
          afterVariantInitialise?: Function;

          /**
           * @SINCE 1.28.0
           *
           * This event is fired after a variant has been saved. This event can be used to retrieve the ID of the
           * saved variant.
           */
          afterVariantSave?: Function;

          /**
           * @SINCE 1.28.0
           *
           * This event is fired after a variant has been applied.
           */
          afterVariantApply?: Function;

          /**
           * @SINCE 1.32.0
           *
           * This event is fired just before the overlay is being shown.
           */
          showOverlay?: Function;

          /**
           * @SINCE 1.34.0
           *
           * This event is fired when an editable field, created internally by the SmartTable control, is changed.
           */
          fieldChange?: Function;

          /**
           * @SINCE 1.46
           *
           * This event is fired right after the full screen mode of the SmartTable control has been changed.
           */
          fullScreenToggled?: Function;

          /**
           * @SINCE 1.50
           *
           * This event is fired just before export is triggered.
           */
          beforeExport?: Function;

          /**
           * @EXPERIMENTAL (since 1.64)
           *
           * This event is fired just before the paste event is triggered and can be used to prevent the default paste
           * behavior.
           */
          beforePaste?: Function;

          /**
           * @EXPERIMENTAL (since 1.64)
           *
           * This event is fired when paste is triggered.
           */
          paste?: Function;

          /**
           * @SINCE 1.26.0
           *
           * A toolbar that can be added by the user to define their own custom buttons, icons, etc. If this is specified,
           * the SmartTable control does not create an additional toolbar, but makes use of this one.
           *  Note:
           *  The CSS class sapMTBHeader-CTX is applied on the given toolbar.
           */
          customToolbar?: sap.m.Toolbar;

          /**
           * @SINCE 1.28.0
           *
           * The Semantic Object Controller allows the user to specify and overwrite functionality for semantic object
           * navigation.
           */
          semanticObjectController?: sap.ui.comp.navpopover.SemanticObjectController;

          /**
           * @SINCE 1.32.0
           *
           * The value for the noData aggregation can be either a string value or a control instance.
           *  The control is shown, in case there is no data for the Table available. In case of a string value this
           * will simply replace the no data text.
           *  Currently the Responsive Table only supports string values.
           */
          noData?: sap.ui.core.Control;

          /**
           * @SINCE 1.38.0
           *
           * Allows users to specify an additional control that will be added to a VBox for the first semantic key
           * field.
           *  Note:
           *  This property is not meant for public use.
           */
          semanticKeyAdditionalControl?: sap.ui.core.Control;

          /**
           * @SINCE 1.38
           *
           * Identifies the SmartVariant control which should be used for the personalization. Will be ignored if
           * the advanced mode is set.
           */
          smartVariant?: sap.ui.core.Control | string;
        }
        /**
         * The SmartTable control creates a table based on OData metadata and the configuration specified. The entitySet
         * attribute must be specified to use the control. This attribute is used to fetch fields from OData metadata,
         * from which columns will be generated; it can also be used to fetch the actual table data.
         *  Based on the tableType property, this control will render a standard, analytical, tree, or responsive
         * table.
         *  **Note:**
         *  Most of the attributes/properties are not dynamic and cannot be changed once the control has been initialized.
         */
        class SmartTable extends sap.m.VBox {
          /**
           * Constructor for a new smarttable/SmartTable.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           * See:
           * 	{@link topic:bed8274140d04fc0b9bcb2db42d8bac2 Smart Table}
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: SmartTableOpts
          );

          /**
           * Interface function for SmartVariantManagement control, sets the current variant. **Note:** If an application
           * default variant exists, then all other variants are extended from this application default variant.
           */
          applyVariant(
            /**
             * The variants json
             */
            oVariantJSON: object,
            /**
             * Describes the context in which the apply was executed
             */
            sContext: string
          ): void;
          /**
           * @SINCE 1.28.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:afterVariantApply afterVariantApply} event of
           * this `sap.ui.comp.smarttable.SmartTable`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smarttable.SmartTable` itself.
           *
           * This event is fired after a variant has been applied.
           */
          attachAfterVariantApply(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smarttable.SmartTable` itself
             */
            oListener?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.28.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:afterVariantInitialise afterVariantInitialise}
           * event of this `sap.ui.comp.smarttable.SmartTable`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smarttable.SmartTable` itself.
           *
           * This event is fired after variant management in the SmartTable has been initialized.
           */
          attachAfterVariantInitialise(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smarttable.SmartTable` itself
             */
            oListener?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.28.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:afterVariantSave afterVariantSave} event of
           * this `sap.ui.comp.smarttable.SmartTable`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smarttable.SmartTable` itself.
           *
           * This event is fired after a variant has been saved. This event can be used to retrieve the ID of the
           * saved variant.
           */
          attachAfterVariantSave(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smarttable.SmartTable` itself
             */
            oListener?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.50
           *
           * Attaches event handler `fnFunction` to the {@link #event:beforeExport beforeExport} event of this `sap.ui.comp.smarttable.SmartTable`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smarttable.SmartTable` itself.
           *
           * This event is fired just before export is triggered.
           */
          attachBeforeExport(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smarttable.SmartTable` itself
             */
            oListener?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @EXPERIMENTAL (since 1.64)
           *
           * Attaches event handler `fnFunction` to the {@link #event:beforePaste beforePaste} event of this `sap.ui.comp.smarttable.SmartTable`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smarttable.SmartTable` itself.
           *
           * This event is fired just before the paste event is triggered and can be used to prevent the default paste
           * behavior.
           */
          attachBeforePaste(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smarttable.SmartTable` itself
             */
            oListener?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.26.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:beforeRebindTable beforeRebindTable} event of
           * this `sap.ui.comp.smarttable.SmartTable`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smarttable.SmartTable` itself.
           *
           * This event is fired just before the binding is being done.
           */
          attachBeforeRebindTable(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smarttable.SmartTable` itself
             */
            oListener?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.28.0
           * @deprecated (since 1.56) - Use `beforeRebindTable` event to attach/listen to the binding "events" directly
           *
           * Attaches event handler `fnFunction` to the {@link #event:dataReceived dataReceived} event of this `sap.ui.comp.smarttable.SmartTable`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smarttable.SmartTable` itself.
           *
           * This event is fired when data is received after binding. The event is fired if the binding for the table
           * is done by the SmartTable itself.
           */
          attachDataReceived(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smarttable.SmartTable` itself
             */
            oListener?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.52.0
           * @deprecated (since 1.56) - Use `beforeRebindTable` event to attach/listen to the binding "events" directly
           *
           * Attaches event handler `fnFunction` to the {@link #event:dataRequested dataRequested} event of this `sap.ui.comp.smarttable.SmartTable`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smarttable.SmartTable` itself.
           *
           * This event is fired when data is requested after binding. The event is fired if the binding for the table
           * is done by the SmartTable itself.
           */
          attachDataRequested(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smarttable.SmartTable` itself
             */
            oListener?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.28.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:editToggled editToggled} event of this `sap.ui.comp.smarttable.SmartTable`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smarttable.SmartTable` itself.
           *
           * This event is fired when display/edit button is clicked.
           */
          attachEditToggled(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smarttable.SmartTable` itself
             */
            oListener?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.34.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:fieldChange fieldChange} event of this `sap.ui.comp.smarttable.SmartTable`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smarttable.SmartTable` itself.
           *
           * This event is fired when an editable field, created internally by the SmartTable control, is changed.
           */
          attachFieldChange(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smarttable.SmartTable` itself
             */
            oListener?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.46
           *
           * Attaches event handler `fnFunction` to the {@link #event:fullScreenToggled fullScreenToggled} event of
           * this `sap.ui.comp.smarttable.SmartTable`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smarttable.SmartTable` itself.
           *
           * This event is fired right after the full screen mode of the SmartTable control has been changed.
           */
          attachFullScreenToggled(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smarttable.SmartTable` itself
             */
            oListener?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.26.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:initialise initialise} event of this `sap.ui.comp.smarttable.SmartTable`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smarttable.SmartTable` itself.
           *
           * This event is fired once the control has been initialized.
           */
          attachInitialise(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smarttable.SmartTable` itself
             */
            oListener?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @EXPERIMENTAL (since 1.64)
           *
           * Attaches event handler `fnFunction` to the {@link #event:paste paste} event of this `sap.ui.comp.smarttable.SmartTable`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smarttable.SmartTable` itself.
           *
           * This event is fired when paste is triggered.
           */
          attachPaste(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smarttable.SmartTable` itself
             */
            oListener?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.32.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:showOverlay showOverlay} event of this `sap.ui.comp.smarttable.SmartTable`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smarttable.SmartTable` itself.
           *
           * This event is fired just before the overlay is being shown.
           */
          attachShowOverlay(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smarttable.SmartTable` itself
             */
            oListener?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.54.0
           *
           * Deactivates existing columns in the personalization dialog based on the provided column keys.
           *  Note: The columns are set to invisible and excluded from all panels in the table personalization.
           * Any existing sorting, filtering or grouping in the personalization dialog for such columns will no longer
           * be taken into account.
           */
          deactivateColumns(
            /**
             * An array of column keys by which the corresponding columns are deactivated. If `null` or `undefined`
             * or an empty array is passed, no column is deactivated, and all previously deactivated columns will be
             * reset
             */
            aColumnKeys: string[] | null | undefined
          ): void;
          /**
           * @SINCE 1.26.0
           *
           * Destroys the customToolbar in the aggregation {@link #getCustomToolbar customToolbar}.
           */
          destroyCustomToolbar(): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.32.0
           *
           * Destroys the noData in the aggregation {@link #getNoData noData}.
           */
          destroyNoData(): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.38.0
           *
           * Destroys the semanticKeyAdditionalControl in the aggregation {@link #getSemanticKeyAdditionalControl
           * semanticKeyAdditionalControl}.
           */
          destroySemanticKeyAdditionalControl(): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.28.0
           *
           * Destroys the semanticObjectController in the aggregation {@link #getSemanticObjectController semanticObjectController}.
           */
          destroySemanticObjectController(): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.28.0
           *
           * Detaches event handler `fnFunction` from the {@link #event:afterVariantApply afterVariantApply} event
           * of this `sap.ui.comp.smarttable.SmartTable`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachAfterVariantApply(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.28.0
           *
           * Detaches event handler `fnFunction` from the {@link #event:afterVariantInitialise afterVariantInitialise}
           * event of this `sap.ui.comp.smarttable.SmartTable`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachAfterVariantInitialise(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.28.0
           *
           * Detaches event handler `fnFunction` from the {@link #event:afterVariantSave afterVariantSave} event of
           * this `sap.ui.comp.smarttable.SmartTable`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachAfterVariantSave(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.50
           *
           * Detaches event handler `fnFunction` from the {@link #event:beforeExport beforeExport} event of this `sap.ui.comp.smarttable.SmartTable`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachBeforeExport(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @EXPERIMENTAL (since 1.64)
           *
           * Detaches event handler `fnFunction` from the {@link #event:beforePaste beforePaste} event of this `sap.ui.comp.smarttable.SmartTable`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachBeforePaste(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.26.0
           *
           * Detaches event handler `fnFunction` from the {@link #event:beforeRebindTable beforeRebindTable} event
           * of this `sap.ui.comp.smarttable.SmartTable`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachBeforeRebindTable(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.28.0
           * @deprecated (since 1.56) - Use `beforeRebindTable` event to attach/listen to the binding "events" directly
           *
           * Detaches event handler `fnFunction` from the {@link #event:dataReceived dataReceived} event of this `sap.ui.comp.smarttable.SmartTable`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachDataReceived(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.52.0
           * @deprecated (since 1.56) - Use `beforeRebindTable` event to attach/listen to the binding "events" directly
           *
           * Detaches event handler `fnFunction` from the {@link #event:dataRequested dataRequested} event of this
           * `sap.ui.comp.smarttable.SmartTable`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachDataRequested(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.28.0
           *
           * Detaches event handler `fnFunction` from the {@link #event:editToggled editToggled} event of this `sap.ui.comp.smarttable.SmartTable`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachEditToggled(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.34.0
           *
           * Detaches event handler `fnFunction` from the {@link #event:fieldChange fieldChange} event of this `sap.ui.comp.smarttable.SmartTable`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachFieldChange(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.46
           *
           * Detaches event handler `fnFunction` from the {@link #event:fullScreenToggled fullScreenToggled} event
           * of this `sap.ui.comp.smarttable.SmartTable`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachFullScreenToggled(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.26.0
           *
           * Detaches event handler `fnFunction` from the {@link #event:initialise initialise} event of this `sap.ui.comp.smarttable.SmartTable`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachInitialise(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @EXPERIMENTAL (since 1.64)
           *
           * Detaches event handler `fnFunction` from the {@link #event:paste paste} event of this `sap.ui.comp.smarttable.SmartTable`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachPaste(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.32.0
           *
           * Detaches event handler `fnFunction` from the {@link #event:showOverlay showOverlay} event of this `sap.ui.comp.smarttable.SmartTable`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachShowOverlay(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * Cleans up the control
           */
          // @ts-ignore
          exit(): void;
          /**
           * Creates a new subclass of class sap.ui.comp.smarttable.SmartTable with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.m.VBox.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Interface function for SmartVariantManagement control, returns the current used variant data
           */
          fetchVariant(): object;
          /**
           * @SINCE 1.28.0
           *
           * Fires event {@link #event:afterVariantApply afterVariantApply} to attached listeners.
           */
          fireAfterVariantApply(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * ID of the currently selected variant
               */
              currentVariantId?: string;
            }
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.28.0
           *
           * Fires event {@link #event:afterVariantInitialise afterVariantInitialise} to attached listeners.
           */
          fireAfterVariantInitialise(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.28.0
           *
           * Fires event {@link #event:afterVariantSave afterVariantSave} to attached listeners.
           */
          fireAfterVariantSave(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * ID of the currently selected variant
               */
              currentVariantId?: string;
            }
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.50
           *
           * Fires event {@link #event:beforeExport beforeExport} to attached listeners.
           */
          fireBeforeExport(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * Contains workbook.columns, dataSource and other export-related information
               */
              exportSettings?: object;
              /**
               * Contains the export settings defined by the user
               */
              userExportSettings?: object;
            }
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @EXPERIMENTAL (since 1.64)
           *
           * Fires event {@link #event:beforePaste beforePaste} to attached listeners.
           *
           * Listeners may prevent the default action of this event by using the `preventDefault`-method on the event
           * object.
           */
          fireBeforePaste(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * Contains array of column info object as determined by the SmartTable
               */
              columnInfos?: object[];
            }
          ): boolean;
          /**
           * @SINCE 1.26.0
           *
           * Fires event {@link #event:beforeRebindTable beforeRebindTable} to attached listeners.
           */
          fireBeforeRebindTable(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.28.0
           * @deprecated (since 1.56) - Use `beforeRebindTable` event to attach/listen to the binding "events" directly
           *
           * Fires event {@link #event:dataReceived dataReceived} to attached listeners.
           */
          fireDataReceived(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.52.0
           * @deprecated (since 1.56) - Use `beforeRebindTable` event to attach/listen to the binding "events" directly
           *
           * Fires event {@link #event:dataRequested dataRequested} to attached listeners.
           */
          fireDataRequested(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.28.0
           *
           * Fires event {@link #event:editToggled editToggled} to attached listeners.
           */
          fireEditToggled(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.34.0
           *
           * Fires event {@link #event:fieldChange fieldChange} to attached listeners.
           */
          fireFieldChange(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.46
           *
           * Fires event {@link #event:fullScreenToggled fullScreenToggled} to attached listeners.
           */
          fireFullScreenToggled(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * If `true`, control is in full screen mode
               */
              fullScreen?: boolean;
            }
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.26.0
           *
           * Fires event {@link #event:initialise initialise} to attached listeners.
           */
          fireInitialise(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @EXPERIMENTAL (since 1.64)
           *
           * Fires event {@link #event:paste paste} to attached listeners.
           */
          firePaste(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * Contains parsed/validated paste information returned by PasteHelper.parse API
               */
              result?: object;
            }
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.32.0
           *
           * Fires event {@link #event:showOverlay showOverlay} to attached listeners.
           */
          fireShowOverlay(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * returns the id of the currently selected variant.
           */
          getCurrentVariantId(): string;
          /**
           * @SINCE 1.26.0
           *
           * Gets content of aggregation {@link #getCustomToolbar customToolbar}.
           *
           * A toolbar that can be added by the user to define their own custom buttons, icons, etc. If this is specified,
           * the SmartTable control does not create an additional toolbar, but makes use of this one.
           *  Note:
           *  The CSS class sapMTBHeader-CTX is applied on the given toolbar.
           */
          getCustomToolbar(): sap.m.Toolbar;
          /**
           * @SINCE 1.30.0
           *
           * Gets current value of property {@link #getDemandPopin demandPopin}.
           *
           * The demandPopin attribute can be set to true or false depending on whether you want to display columns
           * as popins on the responsive table
           *
           * Default value is `false`.
           */
          getDemandPopin(): boolean;
          /**
           * @SINCE 1.28.0
           *
           * Gets current value of property {@link #getEditable editable}.
           *
           * This attribute can be used to specify if the controls created by the SmartTable control are editable.
           * (The automatic toggle of controls works only for the SmartField/SmartToggle scenario)
           *
           * Default value is `false`.
           */
          getEditable(): boolean;
          /**
           * @SINCE 1.28.0
           *
           * Gets current value of property {@link #getEditTogglable editTogglable}.
           *
           * Specifies whether the editable property can be toggled via a button on the toolbar. (The automatic toggle
           * of controls works only for the SmartField/SmartToggle scenario)
           *
           * Default value is `false`.
           */
          getEditTogglable(): boolean;
          /**
           * @SINCE 1.28.0
           *
           * Gets current value of property {@link #getEnableAutoBinding enableAutoBinding}.
           *
           * When set to true, this enables automatic binding of the table using the tableBindingPath (if it exists)
           * or entitySet property. This happens just after the `initialise` event has been fired.
           *
           * Default value is `false`.
           */
          getEnableAutoBinding(): boolean;
          /**
           * @SINCE 1.26.0
           * @deprecated (since 1.40.0) - After personalization dialog has been introduced in SmartTable the property
           * `enableCustomFilter` does not make sense. When setting the property to `false`, the entered custom filter
           * value will not be shown in personalization dialog and will also not be persisted in variant management.
           * The custom filter will also be overwritten when rebindTable is called on the SmartTable.
           *
           * Gets current value of property {@link #getEnableCustomFilter enableCustomFilter}.
           *
           * Can be used to override the filter behavior. If set to true (default), instead of the filter input box
           * a button is rendered. When pressing this button, the SmartTable control opens the filter panel directly
           * in the table personalization dialog.
           *
           * Default value is `true`.
           */
          getEnableCustomFilter(): boolean;
          /**
           * @SINCE 1.26.0
           *
           * Gets current value of property {@link #getEntitySet entitySet}.
           *
           * The entity set name from which to fetch data and generate the columns. Note that this is not a dynamic
           * UI5 property
           *
           * **Note:** It is not allowed to have one of the following strings as field names for your OData entity:
           *
           * 	 - `btnEditToggle`
           * 	 - `btnExcelExport`
           * 	 - `btnFullScreen`
           * 	 - `btnPersonalisation`
           * 	 - `header`
           * 	 - `infoToolbarText`
           * 	 - `persoController`
           * 	 - `toolbarSeperator`
           * 	 - `toolbarSpacer`
           * 	 - `ui5table`
           * 	 - `variant`
           */
          getEntitySet(): string;
          /**
           * @SINCE 1.50.0
           *
           * Gets current value of property {@link #getExportType exportType}.
           *
           * Specifies the type of export to be used in the `SmartTable` control.
           *
           * Default value is `UI5Client`.
           */
          getExportType(): sap.ui.comp.smarttable.ExportType;
          /**
           * @SINCE 1.26.0
           *
           * Gets current value of property {@link #getHeader header}.
           *
           * Specifies header text that is shown in table
           */
          getHeader(): string;
          /**
           * @SINCE 1.26.0
           *
           * Gets current value of property {@link #getIgnoredFields ignoredFields}.
           *
           * CSV of fields that must be ignored in the OData metadata by the SmartTable control.
           *  Note:
           *  No validation is done. Please ensure that you do not add spaces or special characters.
           */
          getIgnoredFields(): string;
          /**
           * @SINCE 1.32.0
           *
           * Gets current value of property {@link #getIgnoreFromPersonalisation ignoreFromPersonalisation}.
           *
           * CSV of fields that is not shown in the personalization dialog.
           *  Note:
           *  No validation is done. Please ensure that you do not add spaces or special characters.
           */
          getIgnoreFromPersonalisation(): string;
          /**
           * @SINCE 1.32.0
           *
           * Gets current value of property {@link #getInitiallyVisibleFields initiallyVisibleFields}.
           *
           * CSV of fields that must be shown initially in the SmartTable as visible columns and in the order specified.
           *  This property is mainly meant to be used when no LineItem annotation exists.
           *  If you have fields in the XMLView they are always shown first; then, the columns are added based on
           * the LineItem annotation and finally based on this property.
           *  Note:
           *  If both this property and the LineItem annotation exist, the order of fields cannot be guaranteed to
           * be as mentioned here.
           *  No validation is done. Please ensure that you do not add spaces or special characters.
           */
          getInitiallyVisibleFields(): string;
          /**
           * @SINCE 1.58
           *
           * Gets current value of property {@link #getInitialNoDataText initialNoDataText}.
           *
           * The text shown initially before the control is bound and initialized. The special values `$FILTERBAR`
           * or `$NO_FILTERBAR` can be specified to make the `SmartTable` control show the initial text as if the
           * `SmartFilterBar` control were associated with it. If nothing is specified, the default behavior is to
           * show the initial text based on whether the `SmartFilterBar` control is actually associated with the `SmartTable`
           * control.
           */
          getInitialNoDataText(): string;
          /**
           * Returns a metadata object for class sap.ui.comp.smarttable.SmartTable.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * @SINCE 1.32.0
           *
           * Gets content of aggregation {@link #getNoData noData}.
           *
           * The value for the noData aggregation can be either a string value or a control instance.
           *  The control is shown, in case there is no data for the Table available. In case of a string value this
           * will simply replace the no data text.
           *  Currently the Responsive Table only supports string values.
           */
          getNoData(): sap.ui.core.Control | string;
          /**
           * @SINCE 1.26.0
           *
           * Gets current value of property {@link #getPersistencyKey persistencyKey}.
           *
           * Key used to access personalization data.
           */
          getPersistencyKey(): string;
          /**
           * @SINCE 1.56
           *
           * Gets current value of property {@link #getPlaceToolbarInTable placeToolbarInTable}.
           *
           * Specifies whether the `Toolbar` control of the `SmartTable` is placed inside the corresponding aggregation
           * of the inner UI5 table control.
           *
           * Default value is `false`.
           */
          getPlaceToolbarInTable(): boolean;
          /**
           * @SINCE 1.32.0
           *
           * Gets current value of property {@link #getRequestAtLeastFields requestAtLeastFields}.
           *
           * CSV of fields that must be always requested from the backend
           *  This property is mainly meant to be used when there is no PresentationVariant annotation.
           *  If both this property and the PresentationVariant annotation exist, the select request sent to the backend
           * would be a combination of both.
           *  Note:
           *  For `AnalyticalTable` (supported since 1.54), the following restrictions apply:
           * 	 - The property name(s) must not point to a new dimension or a measure.
           * 	 - The property name(s) must not point to a navigationProperty/association path, as this might not supported
           * 			by analytical services.  No validation is done. Please ensure that you do not add spaces or special
           * 			characters.
           */
          getRequestAtLeastFields(): string;
          /**
           * @SINCE 1.38.0
           *
           * Gets content of aggregation {@link #getSemanticKeyAdditionalControl semanticKeyAdditionalControl}.
           *
           * Allows users to specify an additional control that will be added to a VBox for the first semantic key
           * field.
           *  Note:
           *  This property is not meant for public use.
           */
          getSemanticKeyAdditionalControl(): sap.ui.core.Control;
          /**
           * @SINCE 1.28.0
           *
           * Gets content of aggregation {@link #getSemanticObjectController semanticObjectController}.
           *
           * The Semantic Object Controller allows the user to specify and overwrite functionality for semantic object
           * navigation.
           */
          getSemanticObjectController(): sap.ui.comp.navpopover.SemanticObjectController;
          /**
           * @SINCE 1.38
           *
           * Gets current value of property {@link #getShowFullScreenButton showFullScreenButton}.
           *
           * Controls the visibility of the FullScreen button.
           *
           * Default value is `false`.
           */
          getShowFullScreenButton(): boolean;
          /**
           * @SINCE 1.26.0
           *
           * Gets current value of property {@link #getShowRowCount showRowCount}.
           *
           * If set to `true` (default), the number of rows is shown along with the header text.
           *  If set to `false`, the number of rows will not be shown on the user interface.
           *  Note:
           *  To avoid sending dedicated OData requests in order to improve your application's performance, you must
           * configure the binding of the table as required.
           *
           * Default value is `true`.
           */
          getShowRowCount(): boolean;
          /**
           * @SINCE 1.38.0
           *
           * Gets current value of property {@link #getShowTablePersonalisation showTablePersonalisation}.
           *
           * The showTablePersonalisation attribute can be set to true or false for controlling the visibility of
           * the TablePersonalisation button.
           *
           * Default value is `true`.
           */
          getShowTablePersonalisation(): boolean;
          /**
           * @SINCE 1.38.0
           *
           * Gets current value of property {@link #getShowVariantManagement showVariantManagement}.
           *
           * The showVariantManagement attribute can be set to true or false for controlling the visibility of VariantManagement
           * button.
           *
           * Default value is `true`.
           */
          getShowVariantManagement(): boolean;
          /**
           * @SINCE 1.26.0
           *
           * Gets current value of property {@link #getSmartFilterId smartFilterId}.
           *
           * ID of the corresponding SmartFilter control; When specified, the SmartTable searches for the SmartFilter
           * (also in the closest parent View) and attaches to the relevant events of the SmartFilter; to fetch data,
           * show overlay etc.
           */
          getSmartFilterId(): string;
          /**
           * @SINCE 1.38
           *
           * ID of the element which is the current target of the association {@link #getSmartVariant smartVariant},
           * or `null`.
           */
          getSmartVariant(): sap.ui.core.ID;
          /**
           * returns the internally used table object
           */
          getTable(): object;
          /**
           * @SINCE 1.28.0
           *
           * Gets current value of property {@link #getTableBindingPath tableBindingPath}.
           *
           * This attribute can be used to specify the path that is used during the binding of the table. If not specified,
           * the entitySet attribute is used instead. (used only if binding is established internally/automatically
           * - See enableAutoBinding)
           */
          getTableBindingPath(): string;
          /**
           * @SINCE 1.26.0
           *
           * Gets current value of property {@link #getTableType tableType}.
           *
           * Specifies the type of table to be created in the SmartTable control.
           *  Note:
           *  If you add a table to the content of the SmartTable in the view, this property has no effect.
           */
          getTableType(): sap.ui.comp.smarttable.TableType;
          /**
           * @SINCE 1.56
           *
           * Returns the `Toolbar` instance used inside the `SmartTable` control.
           */
          getToolbar(): sap.m.Toolbar;
          /**
           * @SINCE 1.26.0
           *
           * Gets current value of property {@link #getToolbarStyleClass toolbarStyleClass}.
           *
           * A style class which is defined for the toolbar of the table.
           */
          getToolbarStyleClass(): string;
          /**
           * @SINCE 1.52
           *
           * Returns the current UI state of the `SmartTable` control.
           *  **Note:**
           *  The following limitations apply:
           * 	 - Visualizations can only be used to modify the visibility and order of columns, the template or importance
           * 			of the column cannot be changed
           * 	 - MaxItems is not supported
           * 	 - RequestAtLeast contains values that are combined from both the `SmartTable` control property and
           * 			PresentationVariant annotation, but when it is updated it only affects the internal array. The property
           * 			in the `SmartTable` stays the same as before
           * 	 - Changes to RequestAtLeast alone will not lead to a new data request
           * 	 - RequestAtLeast is not supported in `AnalyticalTable` scenario
           * 	 - Any other limitations, like the ones mentioned in {@link sap.ui.comp.state.UIState}, also apply
           */
          getUiState(): sap.ui.comp.state.UIState;
          /**
           * @SINCE 1.26.0
           *
           * Gets current value of property {@link #getUseExportToExcel useExportToExcel}.
           *
           * Can be set to true or false depending on whether you want to export data to a spreadsheet application,
           * for example Microsoft Excel.
           *  Note:
           *  If `exportType` is `sap.ui.comp.smarttable.ExportType.GW`, any $expand parameters are removed when sending
           * the request to generate the spreadsheet.
           *  As of UI5 version 1.56: If `exportType` is `sap.ui.comp.smarttable.ExportType.UI5Client` and `TreeTable`
           * is used, the `worksheet.hierarchyLevel` property (see {@link sap.ui.export.Spreadsheet}) is filled from
           * the binding, if the relevant information is available there for exporting hierarchical data in the spreadsheet.
           *
           * Default value is `true`.
           */
          getUseExportToExcel(): boolean;
          /**
           * @SINCE 1.70
           *
           * Gets current value of property {@link #getUseInfoToolbar useInfoToolbar}.
           *
           * Shows an info toolbar.
           *  Filters that are applied using the table personalization dialog are shown in the info toolbar.
           *  **Note:**
           *
           * 	 - The default value for the property is `Auto`, which means that the info toolbar is shown by default
           * 			if table type is `ResponsiveTable`.
           * 	 - The info toolbar is hidden if the property is set to `Off`.
           * 	 - The info toolbar is visible if the property is set to `On`. Currently the info toolbar is only available
           * 			for the table type `ResponsiveTable`.
           * 	 - If multiple filters are applied to the same column, then the info toolbar contains the column name
           * 			only once.
           * 	 - In case there is a custom info toolbar used for the responsive table control, then the property must
           * 			be set to `Off`. Otherwise, an error is logged in the browser console.
           *
           * Default value is `Auto`.
           */
          getUseInfoToolbar(): sap.ui.comp.smarttable.InfoToolbarBehavior;
          /**
           * @SINCE 1.26.0
           * @deprecated (since 1.29) - This property has no effect
           *
           * Gets current value of property {@link #getUseOnlyOneSolidToolbar useOnlyOneSolidToolbar}.
           *
           * If set to true, the standard toolbar and custom toolbar will be merged into one toolbar. The combined
           * toolbar will have a solid style.
           *
           * Default value is `false`.
           */
          getUseOnlyOneSolidToolbar(): boolean;
          /**
           * @SINCE 1.26.0
           *
           * Gets current value of property {@link #getUseTablePersonalisation useTablePersonalisation}.
           *
           * The useTablePersonalisation attribute can be set to true or false depending on whether you want to define
           * personalized table settings. If you want to persist the table personalization, you need to specify the
           * persistencyKey property.
           *
           * Default value is `true`.
           */
          getUseTablePersonalisation(): boolean;
          /**
           * @SINCE 1.26.0
           *
           * Gets current value of property {@link #getUseVariantManagement useVariantManagement}.
           *
           * The useVariantManagement attribute can be set to true or false depending on whether you want to use variants.
           * As a prerequisite you need to specify the persistencyKey property.
           *
           * Default value is `true`.
           */
          getUseVariantManagement(): boolean;
          /**
           * Checks whether the control is initialised
           */
          isInitialised(): boolean;
          /**
           * @SINCE 1.48.0
           *
           * Opens the desired panel of the personalization dialog.
           *  Note: Calling this for panels that are globally hidden (E.g. manually by the application, or
           * due to unavailability of functionality) leads to an empty dialog being shown.
           */
          openPersonalisationDialog(
            /**
             * The desired panel; the value is either "Columns", "Sort", "Filter" or "Group"
             */
            sPanel: string
          ): void;
          /**
           * This can be used to trigger binding on the table used in the SmartTable
           */
          rebindTable(
            /**
             * force bind call to be triggered on the inner table
             */
            bForceRebind: boolean
          ): void;
          /**
           * Set the current variant according to the sVariantId. In case an empty string or null or undefined was
           * passed the STANDARD will be set. STANDARD will also be set, in case the passed sVariantId could not be
           * found. In case neither a flexibility variant, nor the content for the standard variant could not be obtained,
           * nor the personalisable control obtained nothing will be executed/changed
           */
          setCurrentVariantId(
            /**
             * id of the currently selected variant
             */
            sVariantId: string
          ): Object;
          /**
           * @SINCE 1.26.0
           *
           * Sets the aggregated {@link #getCustomToolbar customToolbar}.
           */
          setCustomToolbar(
            /**
             * The customToolbar to set
             */
            oCustomToolbar: sap.m.Toolbar
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.30.0
           *
           * Sets a new value for property {@link #getDemandPopin demandPopin}.
           *
           * The demandPopin attribute can be set to true or false depending on whether you want to display columns
           * as popins on the responsive table
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setDemandPopin(
            /**
             * New value for property `demandPopin`
             */
            bDemandPopin: boolean
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.28.0
           *
           * Sets a new value for property {@link #getEditable editable}.
           *
           * This attribute can be used to specify if the controls created by the SmartTable control are editable.
           * (The automatic toggle of controls works only for the SmartField/SmartToggle scenario)
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setEditable(
            /**
             * New value for property `editable`
             */
            bEditable: boolean
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.28.0
           *
           * Sets a new value for property {@link #getEditTogglable editTogglable}.
           *
           * Specifies whether the editable property can be toggled via a button on the toolbar. (The automatic toggle
           * of controls works only for the SmartField/SmartToggle scenario)
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setEditTogglable(
            /**
             * New value for property `editTogglable`
             */
            bEditTogglable: boolean
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.28.0
           *
           * Sets a new value for property {@link #getEnableAutoBinding enableAutoBinding}.
           *
           * When set to true, this enables automatic binding of the table using the tableBindingPath (if it exists)
           * or entitySet property. This happens just after the `initialise` event has been fired.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setEnableAutoBinding(
            /**
             * New value for property `enableAutoBinding`
             */
            bEnableAutoBinding: boolean
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.26.0
           * @deprecated (since 1.40.0) - After personalization dialog has been introduced in SmartTable the property
           * `enableCustomFilter` does not make sense. When setting the property to `false`, the entered custom filter
           * value will not be shown in personalization dialog and will also not be persisted in variant management.
           * The custom filter will also be overwritten when rebindTable is called on the SmartTable.
           *
           * Sets a new value for property {@link #getEnableCustomFilter enableCustomFilter}.
           *
           * Can be used to override the filter behavior. If set to true (default), instead of the filter input box
           * a button is rendered. When pressing this button, the SmartTable control opens the filter panel directly
           * in the table personalization dialog.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setEnableCustomFilter(
            /**
             * New value for property `enableCustomFilter`
             */
            bEnableCustomFilter: boolean
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * The entity set name from OData metadata, with which the table should be bound to
           */
          setEntitySet(
            /**
             * The entity set
             */
            sEntitySetName: string
          ): Object;
          /**
           * @SINCE 1.50.0
           *
           * Sets a new value for property {@link #getExportType exportType}.
           *
           * Specifies the type of export to be used in the `SmartTable` control.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `UI5Client`.
           */
          setExportType(
            /**
             * New value for property `exportType`
             */
            sExportType: sap.ui.comp.smarttable.ExportType
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.26.0
           *
           * Sets a new value for property {@link #getHeader header}.
           *
           * Specifies header text that is shown in table
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setHeader(
            /**
             * New value for property `header`
             */
            sHeader: string
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.26.0
           *
           * Sets a new value for property {@link #getIgnoredFields ignoredFields}.
           *
           * CSV of fields that must be ignored in the OData metadata by the SmartTable control.
           *  Note:
           *  No validation is done. Please ensure that you do not add spaces or special characters.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setIgnoredFields(
            /**
             * New value for property `ignoredFields`
             */
            sIgnoredFields: string
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.32.0
           *
           * Sets a new value for property {@link #getIgnoreFromPersonalisation ignoreFromPersonalisation}.
           *
           * CSV of fields that is not shown in the personalization dialog.
           *  Note:
           *  No validation is done. Please ensure that you do not add spaces or special characters.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setIgnoreFromPersonalisation(
            /**
             * New value for property `ignoreFromPersonalisation`
             */
            sIgnoreFromPersonalisation: string
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.32.0
           *
           * Sets a new value for property {@link #getInitiallyVisibleFields initiallyVisibleFields}.
           *
           * CSV of fields that must be shown initially in the SmartTable as visible columns and in the order specified.
           *  This property is mainly meant to be used when no LineItem annotation exists.
           *  If you have fields in the XMLView they are always shown first; then, the columns are added based on
           * the LineItem annotation and finally based on this property.
           *  Note:
           *  If both this property and the LineItem annotation exist, the order of fields cannot be guaranteed to
           * be as mentioned here.
           *  No validation is done. Please ensure that you do not add spaces or special characters.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setInitiallyVisibleFields(
            /**
             * New value for property `initiallyVisibleFields`
             */
            sInitiallyVisibleFields: string
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.58
           *
           * Sets a new value for property {@link #getInitialNoDataText initialNoDataText}.
           *
           * The text shown initially before the control is bound and initialized. The special values `$FILTERBAR`
           * or `$NO_FILTERBAR` can be specified to make the `SmartTable` control show the initial text as if the
           * `SmartFilterBar` control were associated with it. If nothing is specified, the default behavior is to
           * show the initial text based on whether the `SmartFilterBar` control is actually associated with the `SmartTable`
           * control.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setInitialNoDataText(
            /**
             * New value for property `initialNoDataText`
             */
            sInitialNoDataText: string
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.32.0
           *
           * Sets the aggregated {@link #getNoData noData}.
           */
          setNoData(
            /**
             * The noData to set
             */
            vNoData: sap.ui.core.Control | string
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.26.0
           *
           * Sets a new value for property {@link #getPersistencyKey persistencyKey}.
           *
           * Key used to access personalization data.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setPersistencyKey(
            /**
             * New value for property `persistencyKey`
             */
            sPersistencyKey: string
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.56
           *
           * Sets a new value for property {@link #getPlaceToolbarInTable placeToolbarInTable}.
           *
           * Specifies whether the `Toolbar` control of the `SmartTable` is placed inside the corresponding aggregation
           * of the inner UI5 table control.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setPlaceToolbarInTable(
            /**
             * New value for property `placeToolbarInTable`
             */
            bPlaceToolbarInTable: boolean
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.32.0
           *
           * Sets a new value for property {@link #getRequestAtLeastFields requestAtLeastFields}.
           *
           * CSV of fields that must be always requested from the backend
           *  This property is mainly meant to be used when there is no PresentationVariant annotation.
           *  If both this property and the PresentationVariant annotation exist, the select request sent to the backend
           * would be a combination of both.
           *  Note:
           *  For `AnalyticalTable` (supported since 1.54), the following restrictions apply:
           * 	 - The property name(s) must not point to a new dimension or a measure.
           * 	 - The property name(s) must not point to a navigationProperty/association path, as this might not supported
           * 			by analytical services.  No validation is done. Please ensure that you do not add spaces or special
           * 			characters.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setRequestAtLeastFields(
            /**
             * New value for property `requestAtLeastFields`
             */
            sRequestAtLeastFields: string
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.38.0
           *
           * Sets the aggregated {@link #getSemanticKeyAdditionalControl semanticKeyAdditionalControl}.
           */
          setSemanticKeyAdditionalControl(
            /**
             * The semanticKeyAdditionalControl to set
             */
            oSemanticKeyAdditionalControl: sap.ui.core.Control
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.28.0
           *
           * Sets the aggregated {@link #getSemanticObjectController semanticObjectController}.
           */
          setSemanticObjectController(
            /**
             * The semanticObjectController to set
             */
            oSemanticObjectController: sap.ui.comp.navpopover.SemanticObjectController
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.38
           *
           * Sets a new value for property {@link #getShowFullScreenButton showFullScreenButton}.
           *
           * Controls the visibility of the FullScreen button.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setShowFullScreenButton(
            /**
             * New value for property `showFullScreenButton`
             */
            bShowFullScreenButton: boolean
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.26.0
           *
           * Sets a new value for property {@link #getShowRowCount showRowCount}.
           *
           * If set to `true` (default), the number of rows is shown along with the header text.
           *  If set to `false`, the number of rows will not be shown on the user interface.
           *  Note:
           *  To avoid sending dedicated OData requests in order to improve your application's performance, you must
           * configure the binding of the table as required.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setShowRowCount(
            /**
             * New value for property `showRowCount`
             */
            bShowRowCount: boolean
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.38.0
           *
           * Sets a new value for property {@link #getShowTablePersonalisation showTablePersonalisation}.
           *
           * The showTablePersonalisation attribute can be set to true or false for controlling the visibility of
           * the TablePersonalisation button.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setShowTablePersonalisation(
            /**
             * New value for property `showTablePersonalisation`
             */
            bShowTablePersonalisation: boolean
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.38.0
           *
           * Sets a new value for property {@link #getShowVariantManagement showVariantManagement}.
           *
           * The showVariantManagement attribute can be set to true or false for controlling the visibility of VariantManagement
           * button.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setShowVariantManagement(
            /**
             * New value for property `showVariantManagement`
             */
            bShowVariantManagement: boolean
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.26.0
           *
           * Sets a new value for property {@link #getSmartFilterId smartFilterId}.
           *
           * ID of the corresponding SmartFilter control; When specified, the SmartTable searches for the SmartFilter
           * (also in the closest parent View) and attaches to the relevant events of the SmartFilter; to fetch data,
           * show overlay etc.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setSmartFilterId(
            /**
             * New value for property `smartFilterId`
             */
            sSmartFilterId: string
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.38
           *
           * Sets the associated {@link #getSmartVariant smartVariant}.
           */
          setSmartVariant(
            /**
             * ID of an element which becomes the new target of this smartVariant association; alternatively, an element
             * instance may be given
             */
            oSmartVariant: sap.ui.core.ID | sap.ui.core.Control
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.28.0
           *
           * Sets a new value for property {@link #getTableBindingPath tableBindingPath}.
           *
           * This attribute can be used to specify the path that is used during the binding of the table. If not specified,
           * the entitySet attribute is used instead. (used only if binding is established internally/automatically
           * - See enableAutoBinding)
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setTableBindingPath(
            /**
             * New value for property `tableBindingPath`
             */
            sTableBindingPath: string
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.26.0
           *
           * Sets a new value for property {@link #getTableType tableType}.
           *
           * Specifies the type of table to be created in the SmartTable control.
           *  Note:
           *  If you add a table to the content of the SmartTable in the view, this property has no effect.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setTableType(
            /**
             * New value for property `tableType`
             */
            sTableType: sap.ui.comp.smarttable.TableType
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.26.0
           *
           * Sets a new value for property {@link #getToolbarStyleClass toolbarStyleClass}.
           *
           * A style class which is defined for the toolbar of the table.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setToolbarStyleClass(
            /**
             * New value for property `toolbarStyleClass`
             */
            sToolbarStyleClass: string
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.52
           *
           * Replaces the current UI state of the `SmartTable` control with the data represented in {@link sap.ui.comp.state.UIState}.
           *  **Note:**
           *  The following limitations apply:
           * 	 - Visualizations can only be used to modify the visibility and order of columns, the template or importance
           * 			of the column cannot be changed
           * 	 - MaxItems is not supported
           * 	 - RequestAtLeast contains values that are combined from both the `SmartTable` control property and
           * 			PresentationVariant annotation, but when it is updated it only affects the internal array. The property
           * 			in the `SmartTable` stays the same as before
           * 	 - Changes to RequestAtLeast alone will not lead to a new data request
           * 	 - RequestAtLeast is not supported in `AnalyticalTable` scenario
           * 	 - Any other limitations, like the ones mentioned in {@link sap.ui.comp.state.UIState}, also apply
           */
          setUiState(
            /**
             * the new representation of UI state
             */
            oUIState: sap.ui.comp.state.UIState
          ): void;
          /**
           * @SINCE 1.26.0
           *
           * Sets a new value for property {@link #getUseExportToExcel useExportToExcel}.
           *
           * Can be set to true or false depending on whether you want to export data to a spreadsheet application,
           * for example Microsoft Excel.
           *  Note:
           *  If `exportType` is `sap.ui.comp.smarttable.ExportType.GW`, any $expand parameters are removed when sending
           * the request to generate the spreadsheet.
           *  As of UI5 version 1.56: If `exportType` is `sap.ui.comp.smarttable.ExportType.UI5Client` and `TreeTable`
           * is used, the `worksheet.hierarchyLevel` property (see {@link sap.ui.export.Spreadsheet}) is filled from
           * the binding, if the relevant information is available there for exporting hierarchical data in the spreadsheet.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setUseExportToExcel(
            /**
             * New value for property `useExportToExcel`
             */
            bUseExportToExcel: boolean
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.70
           *
           * Sets a new value for property {@link #getUseInfoToolbar useInfoToolbar}.
           *
           * Shows an info toolbar.
           *  Filters that are applied using the table personalization dialog are shown in the info toolbar.
           *  **Note:**
           *
           * 	 - The default value for the property is `Auto`, which means that the info toolbar is shown by default
           * 			if table type is `ResponsiveTable`.
           * 	 - The info toolbar is hidden if the property is set to `Off`.
           * 	 - The info toolbar is visible if the property is set to `On`. Currently the info toolbar is only available
           * 			for the table type `ResponsiveTable`.
           * 	 - If multiple filters are applied to the same column, then the info toolbar contains the column name
           * 			only once.
           * 	 - In case there is a custom info toolbar used for the responsive table control, then the property must
           * 			be set to `Off`. Otherwise, an error is logged in the browser console.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `Auto`.
           */
          setUseInfoToolbar(
            /**
             * New value for property `useInfoToolbar`
             */
            sUseInfoToolbar: sap.ui.comp.smarttable.InfoToolbarBehavior
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.26.0
           * @deprecated (since 1.29) - This property has no effect
           *
           * Sets a new value for property {@link #getUseOnlyOneSolidToolbar useOnlyOneSolidToolbar}.
           *
           * If set to true, the standard toolbar and custom toolbar will be merged into one toolbar. The combined
           * toolbar will have a solid style.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setUseOnlyOneSolidToolbar(
            /**
             * New value for property `useOnlyOneSolidToolbar`
             */
            bUseOnlyOneSolidToolbar: boolean
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.26.0
           *
           * Sets a new value for property {@link #getUseTablePersonalisation useTablePersonalisation}.
           *
           * The useTablePersonalisation attribute can be set to true or false depending on whether you want to define
           * personalized table settings. If you want to persist the table personalization, you need to specify the
           * persistencyKey property.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setUseTablePersonalisation(
            /**
             * New value for property `useTablePersonalisation`
             */
            bUseTablePersonalisation: boolean
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.26.0
           *
           * Sets a new value for property {@link #getUseVariantManagement useVariantManagement}.
           *
           * The useVariantManagement attribute can be set to true or false depending on whether you want to use variants.
           * As a prerequisite you need to specify the persistencyKey property.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setUseVariantManagement(
            /**
             * New value for property `useVariantManagement`
             */
            bUseVariantManagement: boolean
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * This can be called once data is received to update table header (count) and toolbar buttons(e.g. Excel
           * Export) enabled state
           */
          updateTableHeaderState(): void;
          /**
           * @SINCE 1.28.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:afterVariantApply afterVariantApply} event of
           * this `sap.ui.comp.smarttable.SmartTable`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smarttable.SmartTable` itself.
           *
           * This event is fired after a variant has been applied.
           */
          attachAfterVariantApply(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smarttable.SmartTable` itself
             */
            oListener?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.28.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:afterVariantInitialise afterVariantInitialise}
           * event of this `sap.ui.comp.smarttable.SmartTable`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smarttable.SmartTable` itself.
           *
           * This event is fired after variant management in the SmartTable has been initialized.
           */
          attachAfterVariantInitialise(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smarttable.SmartTable` itself
             */
            oListener?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.28.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:afterVariantSave afterVariantSave} event of
           * this `sap.ui.comp.smarttable.SmartTable`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smarttable.SmartTable` itself.
           *
           * This event is fired after a variant has been saved. This event can be used to retrieve the ID of the
           * saved variant.
           */
          attachAfterVariantSave(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smarttable.SmartTable` itself
             */
            oListener?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.50
           *
           * Attaches event handler `fnFunction` to the {@link #event:beforeExport beforeExport} event of this `sap.ui.comp.smarttable.SmartTable`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smarttable.SmartTable` itself.
           *
           * This event is fired just before export is triggered.
           */
          attachBeforeExport(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smarttable.SmartTable` itself
             */
            oListener?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @EXPERIMENTAL (since 1.64)
           *
           * Attaches event handler `fnFunction` to the {@link #event:beforePaste beforePaste} event of this `sap.ui.comp.smarttable.SmartTable`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smarttable.SmartTable` itself.
           *
           * This event is fired just before the paste event is triggered and can be used to prevent the default paste
           * behavior.
           */
          attachBeforePaste(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smarttable.SmartTable` itself
             */
            oListener?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.26.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:beforeRebindTable beforeRebindTable} event of
           * this `sap.ui.comp.smarttable.SmartTable`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smarttable.SmartTable` itself.
           *
           * This event is fired just before the binding is being done.
           */
          attachBeforeRebindTable(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smarttable.SmartTable` itself
             */
            oListener?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.28.0
           * @deprecated (since 1.56) - Use `beforeRebindTable` event to attach/listen to the binding "events" directly
           *
           * Attaches event handler `fnFunction` to the {@link #event:dataReceived dataReceived} event of this `sap.ui.comp.smarttable.SmartTable`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smarttable.SmartTable` itself.
           *
           * This event is fired when data is received after binding. The event is fired if the binding for the table
           * is done by the SmartTable itself.
           */
          attachDataReceived(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smarttable.SmartTable` itself
             */
            oListener?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.52.0
           * @deprecated (since 1.56) - Use `beforeRebindTable` event to attach/listen to the binding "events" directly
           *
           * Attaches event handler `fnFunction` to the {@link #event:dataRequested dataRequested} event of this `sap.ui.comp.smarttable.SmartTable`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smarttable.SmartTable` itself.
           *
           * This event is fired when data is requested after binding. The event is fired if the binding for the table
           * is done by the SmartTable itself.
           */
          attachDataRequested(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smarttable.SmartTable` itself
             */
            oListener?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.28.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:editToggled editToggled} event of this `sap.ui.comp.smarttable.SmartTable`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smarttable.SmartTable` itself.
           *
           * This event is fired when display/edit button is clicked.
           */
          attachEditToggled(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smarttable.SmartTable` itself
             */
            oListener?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.34.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:fieldChange fieldChange} event of this `sap.ui.comp.smarttable.SmartTable`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smarttable.SmartTable` itself.
           *
           * This event is fired when an editable field, created internally by the SmartTable control, is changed.
           */
          attachFieldChange(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smarttable.SmartTable` itself
             */
            oListener?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.46
           *
           * Attaches event handler `fnFunction` to the {@link #event:fullScreenToggled fullScreenToggled} event of
           * this `sap.ui.comp.smarttable.SmartTable`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smarttable.SmartTable` itself.
           *
           * This event is fired right after the full screen mode of the SmartTable control has been changed.
           */
          attachFullScreenToggled(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smarttable.SmartTable` itself
             */
            oListener?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.26.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:initialise initialise} event of this `sap.ui.comp.smarttable.SmartTable`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smarttable.SmartTable` itself.
           *
           * This event is fired once the control has been initialized.
           */
          attachInitialise(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smarttable.SmartTable` itself
             */
            oListener?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @EXPERIMENTAL (since 1.64)
           *
           * Attaches event handler `fnFunction` to the {@link #event:paste paste} event of this `sap.ui.comp.smarttable.SmartTable`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smarttable.SmartTable` itself.
           *
           * This event is fired when paste is triggered.
           */
          attachPaste(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smarttable.SmartTable` itself
             */
            oListener?: object
          ): sap.ui.comp.smarttable.SmartTable;
          /**
           * @SINCE 1.32.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:showOverlay showOverlay} event of this `sap.ui.comp.smarttable.SmartTable`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smarttable.SmartTable` itself.
           *
           * This event is fired just before the overlay is being shown.
           */
          attachShowOverlay(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smarttable.SmartTable` itself
             */
            oListener?: object
          ): sap.ui.comp.smarttable.SmartTable;
        }
        /**
         * Provides the type of services available for export in the `SmartTable` control.
         */
        enum ExportType {
          /**
           * Gateway backend spreadsheet export service is used
           */
          GW,
          /**
           * UI5 client-side spreadsheet export service is used (default as of UI5 version 1.52)
           */
          UI5Client
        }
        /**
         * @SINCE 1.70
         *
         * Enumeration `sap.ui.comp.smarttable.InfoToolbarBehavior` determines the behavior of the info toolbar
         * in the `SmartTable` control.
         *
         * The info toolbar represents the filters that are applied using the table personalization dialog.
         */
        enum InfoToolbarBehavior {
          /**
           * The info toolbar is rendered for the `SmartTable` control of table type `ResponsiveTable` only.
           */
          Auto,
          /**
           * The info toolbar is not rendered.
           */
          Off,
          /**
           * The info toolbar is rendered for the `SmartTable` control regardless of the table type.
           *
           * **Note:** Currently the info toolbar is only rendered for table type `ResponsiveTable`.
           */
          On
        }
        /**
         * Provides enumeration sap.ui.comp.smarttable.TableType. A subset of table types that fit to a simple API
         * returning one string.
         */
        enum TableType {
          /**
           * An analytical table (sap.ui.table.AnalyticalTable) control shall be created as the content of the SmartTable,
           * if no table already exists
           */
          AnalyticalTable,
          /**
           * A responsive table (sap.m.Table) control that can be used on mobile devices shall be created as the content
           * of the SmartTable, if no table already exists
           */
          ResponsiveTable,
          /**
           * A table (sap.ui.table.Table) control shall be created as the content of the SmartTable, if no table already
           * exists (default)
           */
          Table,
          /**
           * A tree table (sap.ui.table.TreeTable) control shall be created as the content of the SmartTable, if no
           * table already exists
           */
          TreeTable
        }
      }

      namespace smartvariants {
        interface PersonalizableInfoOpts extends sap.ui.core.ElementOpts {
          /**
           * Describes the type of variant management.
           */
          type?: string;

          /**
           * Name of the data service
           */
          dataSource?: string;

          /**
           * Defines the property name of the personalization key.
           */
          keyName?: string;

          /**
           * Contains the control that can be personalized.
           */
          control?: sap.ui.core.Control | string;
        }

        interface SmartVariantManagementOpts
          extends sap.ui.comp.variants.VariantManagementOpts {
          /**
           * Key used to access personalization data.
           */
          persistencyKey?: string;

          /**
           * The OData entity set whose metadata is used to create the variant items based on the SelectionPresentationVariant
           * annotation.
           */
          entitySet?: string;

          /**
           * @deprecated (since 1.38.0) - Replaced by providing the personalizable control and the callback via the
           * `initialise`-method.
           *
           * This event is fired when the SmartVariantManagement control is initialized.
           */
          initialise?: Function;

          /**
           * This event is fired after a variant has been saved.
           */
          save?: Function;

          /**
           * This event is fired after all changes are successfully stored.
           */
          afterSave?: Function;

          /**
           * All controls that rely on variant handling have to be added to this aggregation.
           */
          personalizableControls?:
            | sap.ui.comp.smartvariants.PersonalizableInfo[]
            | sap.ui.comp.smartvariants.PersonalizableInfo;
        }

        interface SmartVariantManagementAdapterOpts
          extends sap.ui.core.ElementOpts {
          /**
           * assign an array of selectionPresentationVariants annotations.
           */
          selectionPresentationVariants?: object;
        }

        interface SmartVariantManagementUi2Opts
          extends sap.ui.comp.variants.VariantManagementOpts {
          /**
           * Once the `SmartVariantManagementUi2` control has been initialized, and especially after retrieving the
           * variants via the UI2 personalization service, the registered consumer will be notified that this phase
           * has completed
           */
          initialise?: Function;

          /**
           * Fired after a variant is saved. This event can be used to retrieve the id of the saved variant.
           */
          afterSave?: Function;

          /**
           * All controls that rely on variant handling have to be added to this aggregation. The only consumer currently
           * known is the `FilterBar` control.
           */
          personalizableControl?: sap.ui.comp.smartvariants.PersonalizableInfo;
        }
        /**
         * The PersonalizableInfo class describes the personalizable control associated with the `SmartVariantManagement`
         * control.
         */
        class PersonalizableInfo extends sap.ui.core.Element {
          /**
           * Constructor for a new smartvariants/PersonalizableInfo.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: PersonalizableInfoOpts
          );

          /**
           * Creates a new subclass of class sap.ui.comp.smartvariants.PersonalizableInfo with name `sClassName` and
           * enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * ID of the element which is the current target of the association {@link #getControl control}, or `null`.
           */
          getControl(): sap.ui.core.ID;
          /**
           * Gets current value of property {@link #getDataSource dataSource}.
           *
           * Name of the data service
           */
          getDataSource(): string;
          /**
           * Gets current value of property {@link #getKeyName keyName}.
           *
           * Defines the property name of the personalization key.
           */
          getKeyName(): string;
          /**
           * Returns a metadata object for class sap.ui.comp.smartvariants.PersonalizableInfo.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getType type}.
           *
           * Describes the type of variant management.
           */
          getType(): string;
          /**
           * Sets the associated {@link #getControl control}.
           */
          setControl(
            /**
             * ID of an element which becomes the new target of this control association; alternatively, an element
             * instance may be given
             */
            oControl: sap.ui.core.ID | sap.ui.core.Control
          ): sap.ui.comp.smartvariants.PersonalizableInfo;
          /**
           * Sets a new value for property {@link #getDataSource dataSource}.
           *
           * Name of the data service
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setDataSource(
            /**
             * New value for property `dataSource`
             */
            sDataSource: string
          ): sap.ui.comp.smartvariants.PersonalizableInfo;
          /**
           * Sets a new value for property {@link #getKeyName keyName}.
           *
           * Defines the property name of the personalization key.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setKeyName(
            /**
             * New value for property `keyName`
             */
            sKeyName: string
          ): sap.ui.comp.smartvariants.PersonalizableInfo;
          /**
           * Sets a new value for property {@link #getType type}.
           *
           * Describes the type of variant management.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setType(
            /**
             * New value for property `type`
             */
            sType: string
          ): sap.ui.comp.smartvariants.PersonalizableInfo;
        }
        /**
         * Overview: The `SmartVariantManagement` control is a specialization of the {@link sap.ui.comp.variants.VariantManagement
         * VariantManagement} control and communicates with the flexibility library that offers SAPUI5 flexibility
         * to manage the variants.
         *  Usage: You can use this control in combination with the following controls:
         * 	 - `SmartFilterBar`
         * 	 - `SmartChart`
         * 	 - `SmartTable`
         */
        class SmartVariantManagement extends sap.ui.comp.variants
          .VariantManagement {
          /**
           * Constructor for a new SmartVariantManagement.
           *  The call sequence is as follows:
           *  A control for which personalization is used has to be registered first via the `personalizableControls`
           * association. Then it has to call the `initialise` method with the arguments `fCallback` function which
           * will be called once the personalization data has been retrieved and `oPersoControl`, the control itself.
           * **Note:** the function callback has to be defined in the personalizable control. The old behavior,
           * where the control has to register to the `initialise` event, before the `initialise` method call, should
           * not be used any longer and is not supported at all for the page variant scenarios.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           * See:
           * 	{@link topic:06a4c3ac1cf545a7b51864e7f3aa02da Smart Variant Management}
           * 	{@link topic:a8e55aa2f8bc4127923b20685a6d1621 SAPUI5 Flexibility: Adapting UIs Made Easy}
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: SmartVariantManagementOpts
          );

          /**
           * Registers all controls interested and relying on variant handling.
           */
          addPersonalizableControl(
            /**
             * Wrapper for the personalizable control
             */
            oCurrentControlInfo: sap.ui.comp.smartvariants.PersonalizableInfo
          ): sap.ui.comp.smartvariants.SmartVariantManagement;
          /**
           * Applies the favorites.
           */
          applyDefaultFavorites(
            /**
             * Contains the added variant keys
             */
            aVariantKeys: any[],
            /**
             * Defines if this is the SelectionVariant scenario
             */
            bSelectionVariants: boolean
          ): void;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:afterSave afterSave} event of this `sap.ui.comp.smartvariants.SmartVariantManagement`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartvariants.SmartVariantManagement` itself.
           *
           * This event is fired after all changes are successfully stored.
           */
          attachAfterSave(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartvariants.SmartVariantManagement`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.smartvariants.SmartVariantManagement;
          /**
           * @deprecated (since 1.38.0) - Replaced by providing the personalizable control and the callback via the
           * `initialise`-method.
           *
           * Attaches event handler `fnFunction` to the {@link #event:initialise initialise} event of this `sap.ui.comp.smartvariants.SmartVariantManagement`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartvariants.SmartVariantManagement` itself.
           *
           * This event is fired when the SmartVariantManagement control is initialized.
           */
          attachInitialise(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartvariants.SmartVariantManagement`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.smartvariants.SmartVariantManagement;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:save save} event of this `sap.ui.comp.smartvariants.SmartVariantManagement`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartvariants.SmartVariantManagement` itself.
           *
           * This event is fired after a variant has been saved.
           */
          // @ts-ignore
          attachSave(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartvariants.SmartVariantManagement`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.smartvariants.SmartVariantManagement;
          /**
           * Sets the dirty flag of the current variant.
           */
          // @ts-ignore
          currentVariantSetModified(
            /**
             * The value indicating the dirty state of the current variant
             */
            bFlag: boolean
          ): void;
          /**
           * Destroys all the personalizableControls in the aggregation {@link #getPersonalizableControls personalizableControls}.
           */
          destroyPersonalizableControls(): sap.ui.comp.smartvariants.SmartVariantManagement;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:afterSave afterSave} event of this `sap.ui.comp.smartvariants.SmartVariantManagement`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachAfterSave(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smartvariants.SmartVariantManagement;
          /**
           * @deprecated (since 1.38.0) - Replaced by providing the personalizable control and the callback via the
           * `initialise`-method.
           *
           * Detaches event handler `fnFunction` from the {@link #event:initialise initialise} event of this `sap.ui.comp.smartvariants.SmartVariantManagement`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachInitialise(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smartvariants.SmartVariantManagement;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:save save} event of this `sap.ui.comp.smartvariants.SmartVariantManagement`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          // @ts-ignore
          detachSave(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smartvariants.SmartVariantManagement;
          /**
           * Creates a new subclass of class sap.ui.comp.smartvariants.SmartVariantManagement with name `sClassName`
           * and enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.comp.variants.VariantManagement.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:afterSave afterSave} to attached listeners.
           */
          fireAfterSave(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.ui.comp.smartvariants.SmartVariantManagement;
          /**
           * @deprecated (since 1.38.0) - Replaced by providing the personalizable control and the callback via the
           * `initialise`-method.
           *
           * Fires event {@link #event:initialise initialise} to attached listeners.
           */
          fireInitialise(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.ui.comp.smartvariants.SmartVariantManagement;
          /**
           * @SINCE 1.28.1
           *
           * Retrieves the current variant ID. For a standard variant, an empty string is returned.
           */
          getCurrentVariantId(): string;
          /**
           * Gets current value of property {@link #getEntitySet entitySet}.
           *
           * The OData entity set whose metadata is used to create the variant items based on the SelectionPresentationVariant
           * annotation.
           */
          getEntitySet(): string;
          /**
           * Returns a metadata object for class sap.ui.comp.smartvariants.SmartVariantManagement.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getPersistencyKey persistencyKey}.
           *
           * Key used to access personalization data.
           */
          getPersistencyKey(): string;
          /**
           * Gets content of aggregation {@link #getPersonalizableControls personalizableControls}.
           *
           * All controls that rely on variant handling have to be added to this aggregation.
           */
          getPersonalizableControls(): sap.ui.comp.smartvariants.PersonalizableInfo[];
          /**
           * Returns the standard variant.
           */
          getStandardVariant(
            /**
             * Current personalizable control
             */
            oCurrentControl: sap.ui.core.Control
          ): Object;
          /**
           * Retrieves the variant content.
           */
          getVariantContent(
            /**
             * Current personalizable control
             */
            oControl: sap.ui.core.Control,
            /**
             * The variant key
             */
            sKey: string
          ): object;
          /**
           * Checks for the provided `sap.ui.comp.smartvariants.PersonalizableInfo` in the aggregation {@link #getPersonalizableControls
           * personalizableControls}. and returns its index if found or -1 otherwise.
           */
          indexOfPersonalizableControl(
            /**
             * The personalizableControl whose index is looked for
             */
            oPersonalizableControl: sap.ui.comp.smartvariants.PersonalizableInfo
          ): number;
          /**
           * Initializes the control by retrieving the variants from SAPUI5 flexibility. Once the initialization has
           * been completed, the controls for personalization are notified via the `initialise` event.
           */
          initialise(
            /**
             * Function will be called whenever the data for the personalizable control is received
             */
            fCallback: Function,
            /**
             * Current control that can be personalized
             */
            oPersoControl: sap.ui.core.Control
          ): void;
          /**
           * Inserts a personalizableControl into the aggregation {@link #getPersonalizableControls personalizableControls}.
           */
          insertPersonalizableControl(
            /**
             * The personalizableControl to insert; if empty, nothing is inserted
             */
            oPersonalizableControl: sap.ui.comp.smartvariants.PersonalizableInfo,
            /**
             * The `0`-based index the personalizableControl should be inserted at; for a negative value of `iIndex`,
             * the personalizableControl is inserted at position 0; for a value greater than the current size of the
             * aggregation, the personalizableControl is inserted at the last position
             */
            iIndex: number
          ): sap.ui.comp.smartvariants.SmartVariantManagement;
          /**
           * Determines if the `SmartVariantManagement` instance is a page variant.
           */
          isPageVariant(): boolean;
          /**
           * Removes all registered personalizable controls.
           */
          removeAllPersonalizableControls(): void;
          /**
           * Removes a registered personalizable control.
           */
          removePersonalizableControl(
            /**
             * wrapper for the personalizable control
             */
            oCurrentControlInfo: sap.ui.comp.smartvariants.PersonalizableInfo
          ): object;
          /**
           * Removes a registered personalizable control.
           */
          removePersonalizableControlById(
            /**
             * the personalizable control
             */
            oControl: sap.ui.core.Control
          ): void;
          /**
           * @SINCE 1.28.1
           *
           * Sets the current variant ID.
           */
          setCurrentVariantId(
            /**
             * ID of the variant
             */
            sVariantId: string,
            /**
             * If set to `true`, the `applyVariant` method is not executed yet.
             */
            bDoNotApplyVariant: boolean
          ): void;
          /**
           * Sets a new value for property {@link #getEntitySet entitySet}.
           *
           * The OData entity set whose metadata is used to create the variant items based on the SelectionPresentationVariant
           * annotation.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setEntitySet(
            /**
             * New value for property `entitySet`
             */
            sEntitySet: string
          ): sap.ui.comp.smartvariants.SmartVariantManagement;
          /**
           * Sets a new value for property {@link #getPersistencyKey persistencyKey}.
           *
           * Key used to access personalization data.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setPersistencyKey(
            /**
             * New value for property `persistencyKey`
             */
            sPersistencyKey: string
          ): sap.ui.comp.smartvariants.SmartVariantManagement;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:afterSave afterSave} event of this `sap.ui.comp.smartvariants.SmartVariantManagement`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartvariants.SmartVariantManagement` itself.
           *
           * This event is fired after all changes are successfully stored.
           */
          attachAfterSave(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartvariants.SmartVariantManagement`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.smartvariants.SmartVariantManagement;
          /**
           * @deprecated (since 1.38.0) - Replaced by providing the personalizable control and the callback via the
           * `initialise`-method.
           *
           * Attaches event handler `fnFunction` to the {@link #event:initialise initialise} event of this `sap.ui.comp.smartvariants.SmartVariantManagement`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartvariants.SmartVariantManagement` itself.
           *
           * This event is fired when the SmartVariantManagement control is initialized.
           */
          attachInitialise(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartvariants.SmartVariantManagement`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.smartvariants.SmartVariantManagement;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:save save} event of this `sap.ui.comp.smartvariants.SmartVariantManagement`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartvariants.SmartVariantManagement` itself.
           *
           * This event is fired after a variant has been saved.
           */
          // @ts-ignore
          attachSave(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartvariants.SmartVariantManagement`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.smartvariants.SmartVariantManagement;
        }
        /**
         * Handles the odata metadata based information. An instance of this class will be created and used by the
         * {@link sap.ui.comp.smartvariants.SmartVariantManagement SmartVariantManagement} control. The adapter
         * transforms odata metadata based SelectionPresentationVariant information to UIState object. For each
         * SelectionPresentationVariant annotation an entry will be added to the VariantManagement control. It will
         * be called by the SmartVariantManagement whenever the user selects the corresponding entry and will provide
         * a valid {@link sap.ui.comp.state.UIState UIState} object.
         */
        class SmartVariantManagementAdapter extends sap.ui.core.Element {
          /**
           * Constructor for new instance of a SmartVariantManagementAdapter control.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: SmartVariantManagementAdapterOpts
          );

          /**
           * Creates a new subclass of class sap.ui.comp.smartvariants.SmartVariantManagementAdapter with name `sClassName`
           * and enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.ui.comp.smartvariants.SmartVariantManagementAdapter.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getSelectionPresentationVariants selectionPresentationVariants}.
           *
           * assign an array of selectionPresentationVariants annotations.
           *
           * Default value is `false`.
           */
          getSelectionPresentationVariants(): object;
          /**
           * Sets a new value for property {@link #getSelectionPresentationVariants selectionPresentationVariants}.
           *
           * assign an array of selectionPresentationVariants annotations.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setSelectionPresentationVariants(
            /**
             * New value for property `selectionPresentationVariants`
             */
            oSelectionPresentationVariants: object
          ): sap.ui.comp.smartvariants.SmartVariantManagementAdapter;
        }
        /**
         * The SmartVariantManagementUi2 control is a specialization of the {@link sap.ui.comp.variants.VariantManagement
         * VariantManagement} control and communicates with the Ui2 personalization layer to manage the variants.
         */
        class SmartVariantManagementUi2 extends sap.ui.comp.variants
          .VariantManagement {
          /**
           * Constructor for a new SmartVariantManagementUi2.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: SmartVariantManagementUi2Opts
          );

          /**
           * Registers all controls interested and relying on variant handling. Each control has to be registered
           * separately.
           */
          addPersonalizableControl(
            /**
             * control providing the required aggregation for flex-layer
             */
            oCurrentControlInfo: sap.ui.comp.smartvariants.PersonalizableInfo
          ): sap.ui.comp.smartvariants.SmartVariantManagementUi2;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:afterSave afterSave} event of this `sap.ui.comp.smartvariants.SmartVariantManagementUi2`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartvariants.SmartVariantManagementUi2` itself.
           *
           * Fired after a variant is saved. This event can be used to retrieve the id of the saved variant.
           */
          attachAfterSave(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartvariants.SmartVariantManagementUi2`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.smartvariants.SmartVariantManagementUi2;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:initialise initialise} event of this `sap.ui.comp.smartvariants.SmartVariantManagementUi2`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartvariants.SmartVariantManagementUi2` itself.
           *
           * Once the `SmartVariantManagementUi2` control has been initialized, and especially after retrieving the
           * variants via the UI2 personalization service, the registered consumer will be notified that this phase
           * has completed
           */
          attachInitialise(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartvariants.SmartVariantManagementUi2`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.smartvariants.SmartVariantManagementUi2;
          /**
           * Destroys the personalizableControl in the aggregation {@link #getPersonalizableControl personalizableControl}.
           */
          destroyPersonalizableControl(): sap.ui.comp.smartvariants.SmartVariantManagementUi2;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:afterSave afterSave} event of this `sap.ui.comp.smartvariants.SmartVariantManagementUi2`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachAfterSave(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smartvariants.SmartVariantManagementUi2;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:initialise initialise} event of this `sap.ui.comp.smartvariants.SmartVariantManagementUi2`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachInitialise(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.smartvariants.SmartVariantManagementUi2;
          /**
           * Creates a new subclass of class sap.ui.comp.smartvariants.SmartVariantManagementUi2 with name `sClassName`
           * and enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.comp.variants.VariantManagement.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:afterSave afterSave} to attached listeners.
           */
          fireAfterSave(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.ui.comp.smartvariants.SmartVariantManagementUi2;
          /**
           * Fires event {@link #event:initialise initialise} to attached listeners.
           */
          fireInitialise(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.ui.comp.smartvariants.SmartVariantManagementUi2;
          /**
           * Retrieves the current variant ID. For a standard variant, an empty string is returned.
           */
          getCurrentVariantId(): string;
          /**
           * Returns a metadata object for class sap.ui.comp.smartvariants.SmartVariantManagementUi2.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets content of aggregation {@link #getPersonalizableControl personalizableControl}.
           *
           * All controls that rely on variant handling have to be added to this aggregation. The only consumer currently
           * known is the `FilterBar` control.
           */
          getPersonalizableControl(): sap.ui.comp.smartvariants.PersonalizableInfo;
          /**
           * Retrieves the variant content.
           */
          getVariantContent(
            /**
             * current control
             */
            oControl: sap.ui.core.Control,
            /**
             * the variant key
             */
            sKey: string
          ): object;
          /**
           * Initializes the UI2 personalization layer by retrieving the list of variants. Once the initialization
           * has been completed, the control for personalization is informed via the initialise event.
           */
          initialise(): void;
          /**
           * Determines if the `SmartVariantManagementUi3` instance is a page variant.
           */
          isPageVariant(): boolean;
          /**
           * Sets the current variant ID. In case an invalid ID is passed, a standard variant is set.
           */
          setCurrentVariantId(
            /**
             * ID of the variant
             */
            sVariantId: string,
            /**
             * If set to `true`, the `applyVariant` method is not executed yet. Relevant during navigation, when called
             * before the initialise event has been executed
             */
            bDoNotApplyVariant: boolean
          ): void;
          /**
           * Sets the aggregated {@link #getPersonalizableControl personalizableControl}.
           */
          setPersonalizableControl(
            /**
             * The personalizableControl to set
             */
            oPersonalizableControl: sap.ui.comp.smartvariants.PersonalizableInfo
          ): sap.ui.comp.smartvariants.SmartVariantManagementUi2;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:afterSave afterSave} event of this `sap.ui.comp.smartvariants.SmartVariantManagementUi2`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartvariants.SmartVariantManagementUi2` itself.
           *
           * Fired after a variant is saved. This event can be used to retrieve the id of the saved variant.
           */
          attachAfterSave(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartvariants.SmartVariantManagementUi2`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.smartvariants.SmartVariantManagementUi2;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:initialise initialise} event of this `sap.ui.comp.smartvariants.SmartVariantManagementUi2`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.smartvariants.SmartVariantManagementUi2` itself.
           *
           * Once the `SmartVariantManagementUi2` control has been initialized, and especially after retrieving the
           * variants via the UI2 personalization service, the registered consumer will be notified that this phase
           * has completed
           */
          attachInitialise(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.smartvariants.SmartVariantManagementUi2`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.smartvariants.SmartVariantManagementUi2;
        }
        /**
         * Enumeration for changes for personalization of variant favorites.
         */
        enum ChangeHandlerType {
          /**
           * Change handler creating a change for an added favorite.
           */
          addFavorite,
          /**
           * Change handler creating a change for a removed favorite.
           */
          removeFavorite
        }
      }

      namespace state {
        /**
         * @SINCE 1.50
         *
         * Creates a new instance of an UIState class.
         */
        // @ts-ignore - static 'getMetadata' inheritance issue
        class UIState extends sap.ui.base.ManagedObject {
          /**
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: object
          );

          /**
           * Constructs the value state out of a given selection variant and the current model data
           */
          static calculateValueTexts(
            /**
             * selection variant object
             */
            oSelectionVariant: object,
            /**
             * the filter provider model data
             */
            mData: any
          ): object;
          /**
           * Converts PresentationVariant annotation to UIState object.
           */
          static createFromSelectionAndPresentationVariantAnnotation(
            /**
             * Name of the variant
             */
            sVariantName: string,
            /**
             * Object representing the com.sap.vocabularies.UI.v1.SelectionVariant annotation provided by MetadataAnalyser
             */
            oSelectionVariantAnnotation: object,
            /**
             * Object representing the com.sap.vocabularies.UI.v1.PresentationVariant annotation provided by MetadataAnalyser
             */
            oPresentationVariantAnnotation: object
          ): sap.ui.comp.state.UIState;
          /**
           * @SINCE 1.75
           *
           * Determines the filter names with value keys where the description is not available.
           */
          static determineFiltersWithOnlyKeyValues(
            /**
             * Containing the value description for filters
             */
            oValueTexts: object,
            /**
             * The selection variant containing filters and value keys
             */
            oSelectionVariant: object,
            /**
             * Filter names to ignore
             */
            aIgnoreSelOptionName: any[]
          ): object;
          /**
           * Enriches the internal filter bar value format with the information from the value state.
           */
          static enrichWithValueTexts(
            /**
             * the filter bar inner data format
             */
            sPayload: string,
            /**
             * the value texts format containing the eventual descriptions.
             */
            oValueTexts: object
          ): string;
          /**
           * Creates a new subclass of class sap.ui.comp.state.UIState with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.ui.comp.state.UIState.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getPresentationVariant presentationVariant}.
           *
           * Object representing the presentation variant. The structure looks like:
           *
           *
           * ```javascript
           *
           * {
           * 	ContextUrl: {string},
           * 	MaxItems: {int},
           *  SortOrder: [],
           * 	GroupBy: [],
           * 	Total: [],
           * 	RequestAtLeast: [],
           * 	Visualizations: []
           * }
           * ```
           *
           *
           * **Note:**
           * 	 -  `PresentationVariantID` property is not provided
           * 	 -  `Text` property is not provided because it is translated text
           * 	 -  `TotalBy` is not supported yet
           * 	 -  `IncludeGrandTotal` is not supported yet
           * 	 -  `InitialExpansionLevel` is not supported yet
           * 	 -  `Title` of `Visualizations.Content` property is not provided because it is translated text
           * 	 -  `Description` of `Visualizations.Content` property is not provided because it is translated text
           * 			 `VariantName` property is not part of specified DataSuiteFormat yet
           */
          getPresentationVariant(): object;
          /**
           * Gets current value of property {@link #getSelectionVariant selectionVariant}.
           *
           * Object representing the selection variant. The structure looks like:
           *
           *
           * ```javascript
           *
           * {
           *  SelectionVariant: {
           *      SelectionVariantID: {string},
           * 		Parameters: [],
           * 		SelectOptions: []
           * }
           * ```
           */
          getSelectionVariant(): object;
          /**
           * Gets current value of property {@link #getValueTexts valueTexts}.
           *
           * Structure containing filter value keys and its corresponding descriptions.
           *
           *
           * ```javascript
           *
           * {
           * 	Texts: [
           * 		{
           * 			Language: string,
           * 			ContextUrl: string,
           * 			PropertyTexts: [
           * 				{
           * 					PropertyName: string,
           * 					ValueTexts: [
           * 						{
           * 							PropertyValue: string,
           * 							Text: string
           * 						}
           * 					]
           * 				}
           * 			]
           * 		}
           * 	]
           * }
           * ```
           */
          getValueTexts(): object;
          /**
           * Gets current value of property {@link #getVariantName variantName}.
           *
           * Variant name.
           */
          getVariantName(): string;
          /**
           * Sets a new value for property {@link #getPresentationVariant presentationVariant}.
           *
           * Object representing the presentation variant. The structure looks like:
           *
           *
           * ```javascript
           *
           * {
           * 	ContextUrl: {string},
           * 	MaxItems: {int},
           *  SortOrder: [],
           * 	GroupBy: [],
           * 	Total: [],
           * 	RequestAtLeast: [],
           * 	Visualizations: []
           * }
           * ```
           *
           *
           * **Note:**
           * 	 -  `PresentationVariantID` property is not provided
           * 	 -  `Text` property is not provided because it is translated text
           * 	 -  `TotalBy` is not supported yet
           * 	 -  `IncludeGrandTotal` is not supported yet
           * 	 -  `InitialExpansionLevel` is not supported yet
           * 	 -  `Title` of `Visualizations.Content` property is not provided because it is translated text
           * 	 -  `Description` of `Visualizations.Content` property is not provided because it is translated text
           * 			 `VariantName` property is not part of specified DataSuiteFormat yet
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setPresentationVariant(
            /**
             * New value for property `presentationVariant`
             */
            oPresentationVariant: object
          ): sap.ui.comp.state.UIState;
          /**
           * Sets a new value for property {@link #getSelectionVariant selectionVariant}.
           *
           * Object representing the selection variant. The structure looks like:
           *
           *
           * ```javascript
           *
           * {
           *  SelectionVariant: {
           *      SelectionVariantID: {string},
           * 		Parameters: [],
           * 		SelectOptions: []
           * }
           * ```
           *
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setSelectionVariant(
            /**
             * New value for property `selectionVariant`
             */
            oSelectionVariant: object
          ): sap.ui.comp.state.UIState;
          /**
           * Sets a new value for property {@link #getValueTexts valueTexts}.
           *
           * Structure containing filter value keys and its corresponding descriptions.
           *
           *
           * ```javascript
           *
           * {
           * 	Texts: [
           * 		{
           * 			Language: string,
           * 			ContextUrl: string,
           * 			PropertyTexts: [
           * 				{
           * 					PropertyName: string,
           * 					ValueTexts: [
           * 						{
           * 							PropertyValue: string,
           * 							Text: string
           * 						}
           * 					]
           * 				}
           * 			]
           * 		}
           * 	]
           * }
           * ```
           *
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setValueTexts(
            /**
             * New value for property `valueTexts`
             */
            oValueTexts: object
          ): sap.ui.comp.state.UIState;
          /**
           * Sets a new value for property {@link #getVariantName variantName}.
           *
           * Variant name.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setVariantName(
            /**
             * New value for property `variantName`
             */
            sVariantName: string
          ): sap.ui.comp.state.UIState;
        }
      }

      namespace transport {
        /**
         * @deprecated
         *
         * The Transport Dialog Control can be used to implement a value help for selecting an ABAP package and
         * transport request. It is not a generic utility, but part of the VariantManagement and therefore cannot
         * be used in any other application.
         */
        class TransportDialog extends sap.ui.fl.transport.TransportDialog {
          /**
           * Constructor for a new transport/TransportDialog.
           */
          constructor();
        }
      }

      namespace valuehelpdialog {
        interface ValueHelpDialogOpts extends sap.m.DialogOpts {
          /**
           * @SINCE 1.24
           *
           * Defines the value for the basic search field. The value is set into the basic search field of the filter
           * bar used.
           */
          basicSearchText?: string;

          /**
           * @SINCE 1.24
           *
           * Enables multi-selection in the table used.
           */
          supportMultiselect?: boolean;

          /**
           * @SINCE 1.24
           *
           * Enables the ranges (conditions) feature in the dialog.
           */
          supportRanges?: boolean;

          /**
           * @SINCE 1.24
           *
           * If this property is set to `true`, the value help dialog only supports the ranges (conditions) feature.
           */
          supportRangesOnly?: boolean;

          /**
           * @SINCE 1.24
           *
           * Defines the key of the column used for the internal key handling. The value of the column is used for
           * the token key and also to identify the row in the table.
           */
          key?: string;

          /**
           * @SINCE 1.24
           *
           * Defines the list of additional keys of the column used for the internal key handling.
           */
          keys?: string[];

          /**
           * @SINCE 1.24
           *
           * Defines the key of the column used for the token text.
           */
          descriptionKey?: string;

          /**
           * @SINCE 1.24
           *
           * Defines the maximum number of include ranges.
           */
          maxIncludeRanges?: string;

          /**
           * @SINCE 1.24
           *
           * Defines the maximum number of exclude ranges.
           */
          maxExcludeRanges?: string;

          /**
           * @SINCE 1.24
           *
           * Represents the display format of the range values. With the `displayFormat` value UpperCase, the entered
           * value of the range (condition) is converted to uppercase letters.
           */
          displayFormat?: string;

          /**
           * @SINCE 1.24
           *
           * Represents how the item token text should be displayed in ValueHelpDialog. Use one of the valid `sap.ui.comp.smartfilterbar.DisplayBehaviour`
           * values.
           */
          tokenDisplayBehaviour?: string;

          /**
           * @SINCE 1.24
           *
           * Sets the dialog into a filter mode, which only shows ranges (conditions) and hides the tokens.
           */
          filterMode?: boolean;

          /**
           * @SINCE 1.24
           *
           * This event is fired when the OK button is pressed.
           */
          ok?: Function;

          /**
           * @SINCE 1.24
           *
           * This event is fired when the Cancel button is pressed.
           */
          cancel?: Function;

          /**
           * @SINCE 1.32
           *
           * This event is fired when the user selects an item in the items table.
           *
           * **Note:** The event will only be raised when the dialog gets a table instance from outside via `setTable`.
           */
          selectionChange?: Function;

          /**
           * @SINCE 1.32
           *
           * This event is fired when the user removes one or multiple existing token(s) from the dialog.
           *
           * **Note:** The event will only be raised when the dialog gets a table instance from outside via `setTable`.
           */
          tokenRemove?: Function;

          /**
           * @SINCE 1.32
           *
           * This event is fired when the table gets an update and all existing tokens must be selected in the table.
           *
           * **Note:** The event will only be raised when the dialog gets a table instance from outside via `setTable`.
           */
          updateSelection?: Function;

          /**
           * Allows you to add a {@link sap.ui.comp.filterbar.FilterBar FilterBar} or {@link sap.ui.comp.smartfilterbar.SmartFilterBar
           * SmartFilterBar} control to the value help dialog.
           */
          filterBar?: sap.ui.comp.filterbar.FilterBar;
        }
        /**
         * The ValueHelpDialog control can be used to implement a value help for an input field.
         */
        class ValueHelpDialog extends sap.m.Dialog {
          /**
           * Constructor for a new valuehelpdialog/ValueHelpDialog.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: ValueHelpDialogOpts
          );

          /**
           * @SINCE 1.24
           *
           * Attaches event handler `fnFunction` to the {@link #event:cancel cancel} event of this `sap.ui.comp.valuehelpdialog.ValueHelpDialog`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.valuehelpdialog.ValueHelpDialog` itself.
           *
           * This event is fired when the Cancel button is pressed.
           */
          attachCancel(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.valuehelpdialog.ValueHelpDialog`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.valuehelpdialog.ValueHelpDialog;
          /**
           * @SINCE 1.24
           *
           * Attaches event handler `fnFunction` to the {@link #event:ok ok} event of this `sap.ui.comp.valuehelpdialog.ValueHelpDialog`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.valuehelpdialog.ValueHelpDialog` itself.
           *
           * This event is fired when the OK button is pressed.
           */
          attachOk(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.valuehelpdialog.ValueHelpDialog`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.valuehelpdialog.ValueHelpDialog;
          /**
           * @SINCE 1.32
           *
           * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
           * `sap.ui.comp.valuehelpdialog.ValueHelpDialog`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.valuehelpdialog.ValueHelpDialog` itself.
           *
           * This event is fired when the user selects an item in the items table.
           *
           * **Note:** The event will only be raised when the dialog gets a table instance from outside via `setTable`.
           */
          attachSelectionChange(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.valuehelpdialog.ValueHelpDialog`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.valuehelpdialog.ValueHelpDialog;
          /**
           * @SINCE 1.32
           *
           * Attaches event handler `fnFunction` to the {@link #event:tokenRemove tokenRemove} event of this `sap.ui.comp.valuehelpdialog.ValueHelpDialog`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.valuehelpdialog.ValueHelpDialog` itself.
           *
           * This event is fired when the user removes one or multiple existing token(s) from the dialog.
           *
           * **Note:** The event will only be raised when the dialog gets a table instance from outside via `setTable`.
           */
          attachTokenRemove(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.valuehelpdialog.ValueHelpDialog`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.valuehelpdialog.ValueHelpDialog;
          /**
           * @SINCE 1.32
           *
           * Attaches event handler `fnFunction` to the {@link #event:updateSelection updateSelection} event of this
           * `sap.ui.comp.valuehelpdialog.ValueHelpDialog`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.valuehelpdialog.ValueHelpDialog` itself.
           *
           * This event is fired when the table gets an update and all existing tokens must be selected in the table.
           *
           * **Note:** The event will only be raised when the dialog gets a table instance from outside via `setTable`.
           */
          attachUpdateSelection(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.valuehelpdialog.ValueHelpDialog`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.valuehelpdialog.ValueHelpDialog;
          /**
           * Destroys the filterBar in the aggregation {@link #getFilterBar filterBar}.
           */
          destroyFilterBar(): sap.ui.comp.valuehelpdialog.ValueHelpDialog;
          /**
           * @SINCE 1.24
           *
           * Detaches event handler `fnFunction` from the {@link #event:cancel cancel} event of this `sap.ui.comp.valuehelpdialog.ValueHelpDialog`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachCancel(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.valuehelpdialog.ValueHelpDialog;
          /**
           * @SINCE 1.24
           *
           * Detaches event handler `fnFunction` from the {@link #event:ok ok} event of this `sap.ui.comp.valuehelpdialog.ValueHelpDialog`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachOk(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.valuehelpdialog.ValueHelpDialog;
          /**
           * @SINCE 1.32
           *
           * Detaches event handler `fnFunction` from the {@link #event:selectionChange selectionChange} event of
           * this `sap.ui.comp.valuehelpdialog.ValueHelpDialog`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachSelectionChange(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.valuehelpdialog.ValueHelpDialog;
          /**
           * @SINCE 1.32
           *
           * Detaches event handler `fnFunction` from the {@link #event:tokenRemove tokenRemove} event of this `sap.ui.comp.valuehelpdialog.ValueHelpDialog`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachTokenRemove(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.valuehelpdialog.ValueHelpDialog;
          /**
           * @SINCE 1.32
           *
           * Detaches event handler `fnFunction` from the {@link #event:updateSelection updateSelection} event of
           * this `sap.ui.comp.valuehelpdialog.ValueHelpDialog`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachUpdateSelection(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.valuehelpdialog.ValueHelpDialog;
          /**
           * Creates a new subclass of class sap.ui.comp.valuehelpdialog.ValueHelpDialog with name `sClassName` and
           * enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.m.Dialog.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * @SINCE 1.24
           *
           * Fires event {@link #event:cancel cancel} to attached listeners.
           */
          fireCancel(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: object
          ): sap.ui.comp.valuehelpdialog.ValueHelpDialog;
          /**
           * @SINCE 1.24
           *
           * Fires event {@link #event:ok ok} to attached listeners.
           */
          fireOk(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * The array of tokens created or modified on the ValueHelpDialog.
               */
              tokens?: sap.m.Token[];
            }
          ): sap.ui.comp.valuehelpdialog.ValueHelpDialog;
          /**
           * @SINCE 1.32
           *
           * Fires event {@link #event:selectionChange selectionChange} to attached listeners.
           */
          fireSelectionChange(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * The RowSelectionChange event parameter from the hosted table that contains the selected items.
               */
              tableSelectionParams?: object;
              /**
               * Returns an array of objects which represents all selected row tokens. The object contains the token key,
               * the row object data from the model, and the information if the token is selected. ` [{sKey, oRow, bSelect},
               * ...] `
               */
              updateTokens?: object[];
              /**
               * Can be set to `true` to execute the default behaviour of the ValueHelpDialog.
               */
              useDefault?: boolean;
              /**
               * The table instance used
               */
              table?: object;
            }
          ): sap.ui.comp.valuehelpdialog.ValueHelpDialog;
          /**
           * @SINCE 1.32
           *
           * Fires event {@link #event:tokenRemove tokenRemove} to attached listeners.
           */
          fireTokenRemove(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * The array of token keys that has been removed.
               */
              tokenKeys?: string[];
              /**
               * Can be set to true to execute the default behaviour of ValueHelpDialog.
               */
              useDefault?: boolean;
            }
          ): sap.ui.comp.valuehelpdialog.ValueHelpDialog;
          /**
           * @SINCE 1.32
           *
           * Fires event {@link #event:updateSelection updateSelection} to attached listeners.
           */
          fireUpdateSelection(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * The array of existing token keys for which the selection in the table has to be updated.
               */
              tokenKeys?: string[];
              /**
               * Can be set to true to execute the default behavior of ValueHelpDialog.
               */
              useDefault?: boolean;
            }
          ): sap.ui.comp.valuehelpdialog.ValueHelpDialog;
          /**
           * @SINCE 1.24
           *
           * Gets current value of property {@link #getBasicSearchText basicSearchText}.
           *
           * Defines the value for the basic search field. The value is set into the basic search field of the filter
           * bar used.
           *
           * Default value is `empty string`.
           */
          getBasicSearchText(): string;
          /**
           * @SINCE 1.24
           *
           * Gets current value of property {@link #getDescriptionKey descriptionKey}.
           *
           * Defines the key of the column used for the token text.
           *
           * Default value is `empty string`.
           */
          getDescriptionKey(): string;
          /**
           * @SINCE 1.24
           *
           * Gets current value of property {@link #getDisplayFormat displayFormat}.
           *
           * Represents the display format of the range values. With the `displayFormat` value UpperCase, the entered
           * value of the range (condition) is converted to uppercase letters.
           *
           * Default value is `empty string`.
           */
          getDisplayFormat(): string;
          /**
           * Gets content of aggregation {@link #getFilterBar filterBar}.
           *
           * Allows you to add a {@link sap.ui.comp.filterbar.FilterBar FilterBar} or {@link sap.ui.comp.smartfilterbar.SmartFilterBar
           * SmartFilterBar} control to the value help dialog.
           */
          getFilterBar(): sap.ui.comp.filterbar.FilterBar;
          /**
           * @SINCE 1.24
           *
           * Gets current value of property {@link #getFilterMode filterMode}.
           *
           * Sets the dialog into a filter mode, which only shows ranges (conditions) and hides the tokens.
           *
           * Default value is `false`.
           */
          getFilterMode(): boolean;
          /**
           * @SINCE 1.24
           *
           * Gets current value of property {@link #getKey key}.
           *
           * Defines the key of the column used for the internal key handling. The value of the column is used for
           * the token key and also to identify the row in the table.
           *
           * Default value is `empty string`.
           */
          getKey(): string;
          /**
           * @SINCE 1.24
           *
           * Gets current value of property {@link #getKeys keys}.
           *
           * Defines the list of additional keys of the column used for the internal key handling.
           */
          getKeys(): string[];
          /**
           * @SINCE 1.24
           *
           * Gets current value of property {@link #getMaxExcludeRanges maxExcludeRanges}.
           *
           * Defines the maximum number of exclude ranges.
           *
           * Default value is `-1`.
           */
          getMaxExcludeRanges(): string;
          /**
           * @SINCE 1.24
           *
           * Gets current value of property {@link #getMaxIncludeRanges maxIncludeRanges}.
           *
           * Defines the maximum number of include ranges.
           *
           * Default value is `-1`.
           */
          getMaxIncludeRanges(): string;
          /**
           * Returns a metadata object for class sap.ui.comp.valuehelpdialog.ValueHelpDialog.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * @SINCE 1.24
           *
           * Gets current value of property {@link #getSupportMultiselect supportMultiselect}.
           *
           * Enables multi-selection in the table used.
           *
           * Default value is `true`.
           */
          getSupportMultiselect(): boolean;
          /**
           * @SINCE 1.24
           *
           * Gets current value of property {@link #getSupportRanges supportRanges}.
           *
           * Enables the ranges (conditions) feature in the dialog.
           *
           * Default value is `false`.
           */
          getSupportRanges(): boolean;
          /**
           * @SINCE 1.24
           *
           * Gets current value of property {@link #getSupportRangesOnly supportRangesOnly}.
           *
           * If this property is set to `true`, the value help dialog only supports the ranges (conditions) feature.
           *
           * Default value is `false`.
           */
          getSupportRangesOnly(): boolean;
          /**
           * @SINCE 1.28
           * @deprecated (since 1.60.0) - replaced by {@link sap.ui.comp.valuehelpdialog.ValueHelpDialog#getTableAsync}
           * to prevent synchronous calls.
           *
           * Gives access to the internal table instance.
           */
          getTable(): object;
          /**
           * @SINCE 1.58
           *
           * Gives access to the internal table instance.
           */
          getTableAsync(): any;
          /**
           * @SINCE 1.24
           *
           * Gets current value of property {@link #getTokenDisplayBehaviour tokenDisplayBehaviour}.
           *
           * Represents how the item token text should be displayed in ValueHelpDialog. Use one of the valid `sap.ui.comp.smartfilterbar.DisplayBehaviour`
           * values.
           *
           * Default value is `empty string`.
           */
          getTokenDisplayBehaviour(): string;
          /**
           * @SINCE 1.24
           *
           * Sets a new value for property {@link #getBasicSearchText basicSearchText}.
           *
           * Defines the value for the basic search field. The value is set into the basic search field of the filter
           * bar used.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `empty string`.
           */
          setBasicSearchText(
            /**
             * New value for property `basicSearchText`
             */
            sBasicSearchText: string
          ): sap.ui.comp.valuehelpdialog.ValueHelpDialog;
          /**
           * @SINCE 1.24
           *
           * Sets a new value for property {@link #getDescriptionKey descriptionKey}.
           *
           * Defines the key of the column used for the token text.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `empty string`.
           */
          setDescriptionKey(
            /**
             * New value for property `descriptionKey`
             */
            sDescriptionKey: string
          ): sap.ui.comp.valuehelpdialog.ValueHelpDialog;
          /**
           * @SINCE 1.24
           *
           * Sets a new value for property {@link #getDisplayFormat displayFormat}.
           *
           * Represents the display format of the range values. With the `displayFormat` value UpperCase, the entered
           * value of the range (condition) is converted to uppercase letters.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `empty string`.
           */
          setDisplayFormat(
            /**
             * New value for property `displayFormat`
             */
            sDisplayFormat: string
          ): sap.ui.comp.valuehelpdialog.ValueHelpDialog;
          /**
           * @SINCE 1.24
           *
           * Sets the array for the supported exclude range operations.
           */
          setExcludeRangeOperations(
            /**
             * An array of range operations
             */
            aOperation: sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation[],
            /**
             * the type for which the operations are defined
             */
            sType: string
          ): void;
          /**
           * Sets the aggregated {@link #getFilterBar filterBar}.
           */
          setFilterBar(
            /**
             * The filterBar to set
             */
            oFilterBar: sap.ui.comp.filterbar.FilterBar
          ): sap.ui.comp.valuehelpdialog.ValueHelpDialog;
          /**
           * @SINCE 1.24
           *
           * Sets a new value for property {@link #getFilterMode filterMode}.
           *
           * Sets the dialog into a filter mode, which only shows ranges (conditions) and hides the tokens.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setFilterMode(
            /**
             * New value for property `filterMode`
             */
            bFilterMode: boolean
          ): sap.ui.comp.valuehelpdialog.ValueHelpDialog;
          /**
           * @SINCE 1.24
           *
           * Sets the array for the supported include range operations.
           */
          setIncludeRangeOperations(
            /**
             * An array of range operations
             */
            aOperation: sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation[],
            /**
             * the type for which the operations are defined
             */
            sType: string
          ): void;
          /**
           * @SINCE 1.24
           *
           * Sets a new value for property {@link #getKey key}.
           *
           * Defines the key of the column used for the internal key handling. The value of the column is used for
           * the token key and also to identify the row in the table.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `empty string`.
           */
          setKey(
            /**
             * New value for property `key`
             */
            sKey: string
          ): sap.ui.comp.valuehelpdialog.ValueHelpDialog;
          /**
           * @SINCE 1.24
           *
           * Sets a new value for property {@link #getKeys keys}.
           *
           * Defines the list of additional keys of the column used for the internal key handling.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setKeys(
            /**
             * New value for property `keys`
             */
            sKeys: string[]
          ): sap.ui.comp.valuehelpdialog.ValueHelpDialog;
          /**
           * @SINCE 1.24
           *
           * Sets a new value for property {@link #getMaxExcludeRanges maxExcludeRanges}.
           *
           * Defines the maximum number of exclude ranges.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `-1`.
           */
          setMaxExcludeRanges(
            /**
             * New value for property `maxExcludeRanges`
             */
            sMaxExcludeRanges: string
          ): sap.ui.comp.valuehelpdialog.ValueHelpDialog;
          /**
           * @SINCE 1.24
           *
           * Sets a new value for property {@link #getMaxIncludeRanges maxIncludeRanges}.
           *
           * Defines the maximum number of include ranges.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `-1`.
           */
          setMaxIncludeRanges(
            /**
             * New value for property `maxIncludeRanges`
             */
            sMaxIncludeRanges: string
          ): sap.ui.comp.valuehelpdialog.ValueHelpDialog;
          /**
           * @SINCE 1.24
           *
           * Sets a RangeKeyFields array. This method allows you to specify the KeyFields for the ranges. You can
           * set an array of objects with Key and Label properties to define the key fields.
           */
          setRangeKeyFields(
            /**
             * An array of range KeyFields `[{key: "CompanyCode", label: "ID"}, {key:"CompanyName", label : "Name"}]`
             */
            aRangeKeyFields: object[]
          ): void;
          /**
           * @SINCE 1.24
           *
           * Sets a new value for property {@link #getSupportMultiselect supportMultiselect}.
           *
           * Enables multi-selection in the table used.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setSupportMultiselect(
            /**
             * New value for property `supportMultiselect`
             */
            bSupportMultiselect: boolean
          ): sap.ui.comp.valuehelpdialog.ValueHelpDialog;
          /**
           * @SINCE 1.24
           *
           * Sets a new value for property {@link #getSupportRanges supportRanges}.
           *
           * Enables the ranges (conditions) feature in the dialog.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setSupportRanges(
            /**
             * New value for property `supportRanges`
             */
            bSupportRanges: boolean
          ): sap.ui.comp.valuehelpdialog.ValueHelpDialog;
          /**
           * @SINCE 1.24
           *
           * Sets a new value for property {@link #getSupportRangesOnly supportRangesOnly}.
           *
           * If this property is set to `true`, the value help dialog only supports the ranges (conditions) feature.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setSupportRangesOnly(
            /**
             * New value for property `supportRangesOnly`
             */
            bSupportRangesOnly: boolean
          ): sap.ui.comp.valuehelpdialog.ValueHelpDialog;
          /**
           * @SINCE 1.32
           *
           * Sets the table used in the value help dialog. If not used, the dialog creates a sap.ui.table.Table or
           * sap.m.Table instance internally.
           */
          setTable(
            /**
             * The used table control instance
             */
            oTable: object
          ): void;
          /**
           * @SINCE 1.24
           *
           * Sets a new value for property {@link #getTokenDisplayBehaviour tokenDisplayBehaviour}.
           *
           * Represents how the item token text should be displayed in ValueHelpDialog. Use one of the valid `sap.ui.comp.smartfilterbar.DisplayBehaviour`
           * values.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `empty string`.
           */
          setTokenDisplayBehaviour(
            /**
             * New value for property `tokenDisplayBehaviour`
             */
            sTokenDisplayBehaviour: string
          ): sap.ui.comp.valuehelpdialog.ValueHelpDialog;
          /**
           * @SINCE 1.24
           *
           * Sets the array of tokens. The `sap.m.Tokens` are added to the dialog tokenizer Selected Items or Excluded
           * Items. Normal tokens are added to the Selected Items tokenizer only and are selected in the table. `
           * new sap.m.Token({key: "0001", text:"SAP A.G. (0001)"}); ` Tokens with the extra data with value 'range'
           * are handled as range tokens or exclude range tokens. ` new sap.m.Token({key: "i1", text: "ID: a..z"}).data("range",
           * { "exclude": false, "operation": sap.ui.comp.valuehelpdialog.ValueHelpRangeOperation.BT, "keyField":
           * "CompanyCode", "value1": "a", "value2": "z"}); ` The selected items or range tokens are returned in the
           * event parameters of the Ok event.
           */
          setTokens(
            /**
             * An array of token controls
             */
            aTokens: sap.m.Token[]
          ): void;
          /**
           * @SINCE 1.24
           *
           * Updates the selection of rows in the table. This function must be called after a first binding or binding
           * update of the table. It will set a table row as selected if a token for this row exists.
           */
          update(): void;
          /**
           * @SINCE 1.24
           *
           * Attaches event handler `fnFunction` to the {@link #event:cancel cancel} event of this `sap.ui.comp.valuehelpdialog.ValueHelpDialog`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.valuehelpdialog.ValueHelpDialog` itself.
           *
           * This event is fired when the Cancel button is pressed.
           */
          attachCancel(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.valuehelpdialog.ValueHelpDialog`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.valuehelpdialog.ValueHelpDialog;
          /**
           * @SINCE 1.24
           *
           * Attaches event handler `fnFunction` to the {@link #event:ok ok} event of this `sap.ui.comp.valuehelpdialog.ValueHelpDialog`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.valuehelpdialog.ValueHelpDialog` itself.
           *
           * This event is fired when the OK button is pressed.
           */
          attachOk(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.valuehelpdialog.ValueHelpDialog`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.valuehelpdialog.ValueHelpDialog;
          /**
           * @SINCE 1.32
           *
           * Attaches event handler `fnFunction` to the {@link #event:selectionChange selectionChange} event of this
           * `sap.ui.comp.valuehelpdialog.ValueHelpDialog`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.valuehelpdialog.ValueHelpDialog` itself.
           *
           * This event is fired when the user selects an item in the items table.
           *
           * **Note:** The event will only be raised when the dialog gets a table instance from outside via `setTable`.
           */
          attachSelectionChange(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.valuehelpdialog.ValueHelpDialog`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.valuehelpdialog.ValueHelpDialog;
          /**
           * @SINCE 1.32
           *
           * Attaches event handler `fnFunction` to the {@link #event:tokenRemove tokenRemove} event of this `sap.ui.comp.valuehelpdialog.ValueHelpDialog`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.valuehelpdialog.ValueHelpDialog` itself.
           *
           * This event is fired when the user removes one or multiple existing token(s) from the dialog.
           *
           * **Note:** The event will only be raised when the dialog gets a table instance from outside via `setTable`.
           */
          attachTokenRemove(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.valuehelpdialog.ValueHelpDialog`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.valuehelpdialog.ValueHelpDialog;
          /**
           * @SINCE 1.32
           *
           * Attaches event handler `fnFunction` to the {@link #event:updateSelection updateSelection} event of this
           * `sap.ui.comp.valuehelpdialog.ValueHelpDialog`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.valuehelpdialog.ValueHelpDialog` itself.
           *
           * This event is fired when the table gets an update and all existing tokens must be selected in the table.
           *
           * **Note:** The event will only be raised when the dialog gets a table instance from outside via `setTable`.
           */
          attachUpdateSelection(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.valuehelpdialog.ValueHelpDialog`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.valuehelpdialog.ValueHelpDialog;
        }
        /**
         * The range operations supported by the `ValueHelpDialog` control.
         */
        enum ValueHelpRangeOperation {
          /**
           * The Between operation for the ranges.
           */
          BT,
          /**
           * The Contains operation for the ranges.
           */
          Contains,
          /**
           * The EndsWith operation for the ranges.
           */
          EndsWith,
          /**
           * The Equals operation for the ranges.
           */
          EQ,
          /**
           * The Between or equals operation for the ranges.
           */
          GE,
          /**
           * The Greater operation for the ranges.
           */
          GT,
          /**
           * The Less or equals operation for the ranges.
           */
          LE,
          /**
           * The Less operation for the ranges.
           */
          LT,
          /**
           * The StartsWith operation for the ranges.
           */
          StartsWith
        }
      }

      namespace variants {
        interface EditableVariantItemOpts extends sap.m.ColumnListItemOpts {
          /**
           * @SINCE 1.22.0
           *
           * Key of the List Item
           */
          key?: string;

          /**
           * @SINCE 1.26.0
           *
           * Indicator if a variant is visible for all users.
           */
          global?: boolean;

          /**
           * @SINCE 1.26.0
           *
           * ABAP Package the variant is assigned. Used for transport functionality
           */
          lifecyclePackage?: string;

          /**
           * @SINCE 1.26.0
           *
           * Identifier of the transport object the variant is assigned to.
           */
          lifecycleTransportId?: string;

          /**
           * @SINCE 1.26.0
           *
           * Variant namespace
           */
          namespace?: string;

          /**
           * @SINCE 1.26.0
           *
           * Indication if variant can be changed
           */
          readOnly?: boolean;

          /**
           * @SINCE 1.26.0
           * @deprecated (since 1.28.0) - Replaced by property `labelReadOnly`
           *
           * Flags for a variant to indicate why it might be read-only
           */
          accessOptions?: string;

          /**
           * @SINCE 1.28.0
           *
           * Indicates if the variant label can be changed
           */
          labelReadOnly?: boolean;

          /**
           * @SINCE 1.38.0
           *
           * Author of the variant
           */
          author?: string;

          /**
           * @SINCE 1.50.0
           *
           * Indicates if favorites can be created.
           */
          favorite?: boolean;
        }

        interface VariantItemOpts extends sap.ui.core.ItemOpts {
          /**
           * @SINCE 1.26.0
           *
           * Attribute for usage in `SmartFilterBar`
           */
          executeOnSelection?: boolean;

          /**
           * @SINCE 1.26.0
           *
           * If set to `false`, the user is allowed to change the item's data
           */
          readOnly?: boolean;

          /**
           * @SINCE 1.26.0
           *
           * Identifier of the transport object the variant is assigned to.
           */
          lifecycleTransportId?: string;

          /**
           * @SINCE 1.26.0
           *
           * Indicator if a variant is visible for all users.
           */
          global?: boolean;

          /**
           * @SINCE 1.26.0
           *
           * ABAP package the variant is assigned to. Used for transport functionality.
           */
          lifecyclePackage?: string;

          /**
           * @SINCE 1.26.0
           *
           * Variant namespace
           */
          namespace?: string;

          /**
           * @SINCE 1.26.0
           * @deprecated (since 1.28.0) - Replaced by property `labelReadOnly`
           *
           * Flags for a variant to indicate why it might be read-only.
           */
          accessOptions?: string;

          /**
           * @SINCE 1.26.0
           *
           * Indicates if the variant title can be changed.
           */
          labelReadOnly?: boolean;

          /**
           * @SINCE 1.38.0
           *
           * Author of the variant
           */
          author?: string;

          /**
           * @SINCE 1.50.0
           *
           * Indicates if favorites can be created.
           */
          favorite?: boolean;

          /**
           * This event is fired when one of the properties is changed.
           */
          change?: Function;
        }

        interface VariantManagementOpts extends sap.ui.core.ControlOpts {
          /**
           * @SINCE 1.22.0
           *
           * Enables the setting of the initially selected variant.
           */
          initialSelectionKey?: string;

          /**
           * @SINCE 1.22.0
           *
           * Can be set to true or false depending on whether you want to enable or disable the control.
           */
          enabled?: boolean;

          /**
           * @SINCE 1.22.0
           *
           * Provides a string value to set the default variant. Used for the save dialog. Has no effect on the selected
           * variant.
           */
          defaultVariantKey?: string;

          /**
           * @SINCE 1.24.0
           *
           * The key of the currently selected item. Returns null if the default item list is selected.
           */
          selectionKey?: string;

          /**
           * @SINCE 1.26.0
           *
           * Indicates that a Create Tile is visible in the Create dialog.
           */
          showCreateTile?: boolean;

          /**
           * @SINCE 1.26.0
           *
           * Indicates that Execute on Selection is visible in the Save Variant and the Manage Variants dialogs.
           */
          showExecuteOnSelection?: boolean;

          /**
           * @SINCE 1.26.0
           *
           * Indicates that the Public checkbox is visible in the Save View and the Manage Views dialogs. Selecting
           * this checkbox allows you to share variants with other users.
           */
          showShare?: boolean;

          /**
           * @SINCE 1.44.0
           *
           * Indicates that set as default is visible in the Save Variant and the Manage Variants dialogs.
           */
          showSetAsDefault?: boolean;

          /**
           * @SINCE 1.26.0
           *
           * Enables the lifecycle support. If set to true, the VariantManagement control handles the transport information
           * for shared variants.
           */
          lifecycleSupport?: boolean;

          /**
           * @SINCE 1.28.0
           *
           * Overwrites the default Standard variant title.
           */
          standardItemText?: string;

          /**
           * @SINCE 1.50.0
           *
           * Indicates that the 'Favorites' feature is used. Only variants marked as favorites will be displayed in
           * the variant list.
           */
          useFavorites?: boolean;

          /**
           * @SINCE 1.52.0
           *
           * Indicates that the control is in error state. If set to `true` error message will be displayed whenever
           * the variant is opened.
           */
          inErrorState?: boolean;

          /**
           * @SINCE 1.22.0
           *
           * This event is fired when the Save Variant dialog is closed with OK for a variant.
           */
          save?: Function;

          /**
           * @SINCE 1.22.0
           *
           * This event is fired when users apply changes to variants in the Manage Variants dialog.
           */
          manage?: Function;

          /**
           * @SINCE 1.22.0
           *
           * This event is fired when a new variant is selected.
           */
          select?: Function;

          /**
           * @SINCE 1.22.0
           * @deprecated (since 1.26.0) - Replaced by association `variantItems`
           *
           * Items displayed by the `VariantManagement` control.
           */
          items?: sap.ui.core.Item[] | sap.ui.core.Item;

          /**
           * @SINCE 1.26.0
           *
           * Variant items displayed by the `VariantManagement` control.
           */
          variantItems?:
            | sap.ui.comp.variants.VariantItem[]
            | sap.ui.comp.variants.VariantItem;
        }
        /**
         * The EditableVariantItem class describes an editable variant list item for the Manage Variants popup.
         */
        class EditableVariantItem extends sap.m.ColumnListItem {
          /**
           * Constructor for a new variants/EditableVariantItem.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: EditableVariantItemOpts
          );

          /**
           * Creates a new subclass of class sap.ui.comp.variants.EditableVariantItem with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.m.ColumnListItem.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * @SINCE 1.26.0
           * @deprecated (since 1.28.0) - Replaced by property `labelReadOnly`
           *
           * Gets current value of property {@link #getAccessOptions accessOptions}.
           *
           * Flags for a variant to indicate why it might be read-only
           */
          getAccessOptions(): string;
          /**
           * @SINCE 1.38.0
           *
           * Gets current value of property {@link #getAuthor author}.
           *
           * Author of the variant
           */
          getAuthor(): string;
          /**
           * @SINCE 1.50.0
           *
           * Gets current value of property {@link #getFavorite favorite}.
           *
           * Indicates if favorites can be created.
           *
           * Default value is `false`.
           */
          getFavorite(): boolean;
          /**
           * @SINCE 1.26.0
           *
           * Gets current value of property {@link #getGlobal global}.
           *
           * Indicator if a variant is visible for all users.
           */
          getGlobal(): boolean;
          /**
           * @SINCE 1.22.0
           *
           * Gets current value of property {@link #getKey key}.
           *
           * Key of the List Item
           */
          getKey(): string;
          /**
           * @SINCE 1.28.0
           *
           * Gets current value of property {@link #getLabelReadOnly labelReadOnly}.
           *
           * Indicates if the variant label can be changed
           *
           * Default value is `false`.
           */
          getLabelReadOnly(): boolean;
          /**
           * @SINCE 1.26.0
           *
           * Gets current value of property {@link #getLifecyclePackage lifecyclePackage}.
           *
           * ABAP Package the variant is assigned. Used for transport functionality
           */
          getLifecyclePackage(): string;
          /**
           * @SINCE 1.26.0
           *
           * Gets current value of property {@link #getLifecycleTransportId lifecycleTransportId}.
           *
           * Identifier of the transport object the variant is assigned to.
           */
          getLifecycleTransportId(): string;
          /**
           * Returns a metadata object for class sap.ui.comp.variants.EditableVariantItem.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * @SINCE 1.26.0
           *
           * Gets current value of property {@link #getNamespace namespace}.
           *
           * Variant namespace
           */
          getNamespace(): string;
          /**
           * @SINCE 1.26.0
           *
           * Gets current value of property {@link #getReadOnly readOnly}.
           *
           * Indication if variant can be changed
           *
           * Default value is `false`.
           */
          getReadOnly(): boolean;
          /**
           * @SINCE 1.26.0
           * @deprecated (since 1.28.0) - Replaced by property `labelReadOnly`
           *
           * Sets a new value for property {@link #getAccessOptions accessOptions}.
           *
           * Flags for a variant to indicate why it might be read-only
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setAccessOptions(
            /**
             * New value for property `accessOptions`
             */
            sAccessOptions: string
          ): sap.ui.comp.variants.EditableVariantItem;
          /**
           * @SINCE 1.38.0
           *
           * Sets a new value for property {@link #getAuthor author}.
           *
           * Author of the variant
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setAuthor(
            /**
             * New value for property `author`
             */
            sAuthor: string
          ): sap.ui.comp.variants.EditableVariantItem;
          /**
           * @SINCE 1.50.0
           *
           * Sets a new value for property {@link #getFavorite favorite}.
           *
           * Indicates if favorites can be created.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setFavorite(
            /**
             * New value for property `favorite`
             */
            bFavorite: boolean
          ): sap.ui.comp.variants.EditableVariantItem;
          /**
           * @SINCE 1.26.0
           *
           * Sets a new value for property {@link #getGlobal global}.
           *
           * Indicator if a variant is visible for all users.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setGlobal(
            /**
             * New value for property `global`
             */
            bGlobal: boolean
          ): sap.ui.comp.variants.EditableVariantItem;
          /**
           * @SINCE 1.22.0
           *
           * Sets a new value for property {@link #getKey key}.
           *
           * Key of the List Item
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setKey(
            /**
             * New value for property `key`
             */
            sKey: string
          ): sap.ui.comp.variants.EditableVariantItem;
          /**
           * @SINCE 1.28.0
           *
           * Sets a new value for property {@link #getLabelReadOnly labelReadOnly}.
           *
           * Indicates if the variant label can be changed
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setLabelReadOnly(
            /**
             * New value for property `labelReadOnly`
             */
            bLabelReadOnly: boolean
          ): sap.ui.comp.variants.EditableVariantItem;
          /**
           * @SINCE 1.26.0
           *
           * Sets a new value for property {@link #getLifecyclePackage lifecyclePackage}.
           *
           * ABAP Package the variant is assigned. Used for transport functionality
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setLifecyclePackage(
            /**
             * New value for property `lifecyclePackage`
             */
            sLifecyclePackage: string
          ): sap.ui.comp.variants.EditableVariantItem;
          /**
           * @SINCE 1.26.0
           *
           * Sets a new value for property {@link #getLifecycleTransportId lifecycleTransportId}.
           *
           * Identifier of the transport object the variant is assigned to.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setLifecycleTransportId(
            /**
             * New value for property `lifecycleTransportId`
             */
            sLifecycleTransportId: string
          ): sap.ui.comp.variants.EditableVariantItem;
          /**
           * @SINCE 1.26.0
           *
           * Sets a new value for property {@link #getNamespace namespace}.
           *
           * Variant namespace
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setNamespace(
            /**
             * New value for property `namespace`
             */
            sNamespace: string
          ): sap.ui.comp.variants.EditableVariantItem;
          /**
           * @SINCE 1.26.0
           *
           * Sets a new value for property {@link #getReadOnly readOnly}.
           *
           * Indication if variant can be changed
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setReadOnly(
            /**
             * New value for property `readOnly`
             */
            bReadOnly: boolean
          ): sap.ui.comp.variants.EditableVariantItem;
        }
        /**
         * The VariantItem class describes a variant item.
         */
        class VariantItem extends sap.ui.core.Item {
          /**
           * Constructor for a new variants/VariantItem.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: VariantItemOpts
          );

          /**
           * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.comp.variants.VariantItem`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.variants.VariantItem` itself.
           *
           * This event is fired when one of the properties is changed.
           */
          attachChange(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.variants.VariantItem` itself
             */
            oListener?: object
          ): sap.ui.comp.variants.VariantItem;
          /**
           * Detaches event handler `fnFunction` from the {@link #event:change change} event of this `sap.ui.comp.variants.VariantItem`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachChange(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.variants.VariantItem;
          /**
           * Creates a new subclass of class sap.ui.comp.variants.VariantItem with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Fires event {@link #event:change change} to attached listeners.
           */
          fireChange(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * Name of the changed property
               */
              propertyName?: string;
            }
          ): sap.ui.comp.variants.VariantItem;
          /**
           * @SINCE 1.26.0
           * @deprecated (since 1.28.0) - Replaced by property `labelReadOnly`
           *
           * Gets current value of property {@link #getAccessOptions accessOptions}.
           *
           * Flags for a variant to indicate why it might be read-only.
           */
          getAccessOptions(): string;
          /**
           * @SINCE 1.38.0
           *
           * Gets current value of property {@link #getAuthor author}.
           *
           * Author of the variant
           */
          getAuthor(): string;
          /**
           * @SINCE 1.26.0
           *
           * Gets current value of property {@link #getExecuteOnSelection executeOnSelection}.
           *
           * Attribute for usage in `SmartFilterBar`
           *
           * Default value is `false`.
           */
          getExecuteOnSelection(): boolean;
          /**
           * @SINCE 1.50.0
           *
           * Gets current value of property {@link #getFavorite favorite}.
           *
           * Indicates if favorites can be created.
           *
           * Default value is `false`.
           */
          getFavorite(): boolean;
          /**
           * @SINCE 1.26.0
           *
           * Gets current value of property {@link #getGlobal global}.
           *
           * Indicator if a variant is visible for all users.
           */
          getGlobal(): boolean;
          /**
           * @SINCE 1.26.0
           *
           * Gets current value of property {@link #getLabelReadOnly labelReadOnly}.
           *
           * Indicates if the variant title can be changed.
           *
           * Default value is `false`.
           */
          getLabelReadOnly(): boolean;
          /**
           * @SINCE 1.26.0
           *
           * Gets current value of property {@link #getLifecyclePackage lifecyclePackage}.
           *
           * ABAP package the variant is assigned to. Used for transport functionality.
           */
          getLifecyclePackage(): string;
          /**
           * @SINCE 1.26.0
           *
           * Gets current value of property {@link #getLifecycleTransportId lifecycleTransportId}.
           *
           * Identifier of the transport object the variant is assigned to.
           */
          getLifecycleTransportId(): string;
          /**
           * Returns a metadata object for class sap.ui.comp.variants.VariantItem.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * @SINCE 1.26.0
           *
           * Gets current value of property {@link #getNamespace namespace}.
           *
           * Variant namespace
           */
          getNamespace(): string;
          /**
           * @SINCE 1.26.0
           *
           * Gets current value of property {@link #getReadOnly readOnly}.
           *
           * If set to `false`, the user is allowed to change the item's data
           *
           * Default value is `false`.
           */
          getReadOnly(): boolean;
          /**
           * @SINCE 1.26.0
           * @deprecated (since 1.28.0) - Replaced by property `labelReadOnly`
           *
           * Sets a new value for property {@link #getAccessOptions accessOptions}.
           *
           * Flags for a variant to indicate why it might be read-only.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setAccessOptions(
            /**
             * New value for property `accessOptions`
             */
            sAccessOptions: string
          ): sap.ui.comp.variants.VariantItem;
          /**
           * @SINCE 1.38.0
           *
           * Sets a new value for property {@link #getAuthor author}.
           *
           * Author of the variant
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setAuthor(
            /**
             * New value for property `author`
             */
            sAuthor: string
          ): sap.ui.comp.variants.VariantItem;
          /**
           * @SINCE 1.26.0
           *
           * Sets a new value for property {@link #getExecuteOnSelection executeOnSelection}.
           *
           * Attribute for usage in `SmartFilterBar`
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setExecuteOnSelection(
            /**
             * New value for property `executeOnSelection`
             */
            bExecuteOnSelection: boolean
          ): sap.ui.comp.variants.VariantItem;
          /**
           * @SINCE 1.50.0
           *
           * Sets a new value for property {@link #getFavorite favorite}.
           *
           * Indicates if favorites can be created.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setFavorite(
            /**
             * New value for property `favorite`
             */
            bFavorite: boolean
          ): sap.ui.comp.variants.VariantItem;
          /**
           * @SINCE 1.26.0
           *
           * Sets a new value for property {@link #getGlobal global}.
           *
           * Indicator if a variant is visible for all users.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setGlobal(
            /**
             * New value for property `global`
             */
            bGlobal: boolean
          ): sap.ui.comp.variants.VariantItem;
          /**
           * @SINCE 1.26.0
           *
           * Sets a new value for property {@link #getLabelReadOnly labelReadOnly}.
           *
           * Indicates if the variant title can be changed.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setLabelReadOnly(
            /**
             * New value for property `labelReadOnly`
             */
            bLabelReadOnly: boolean
          ): sap.ui.comp.variants.VariantItem;
          /**
           * @SINCE 1.26.0
           *
           * Sets a new value for property {@link #getLifecyclePackage lifecyclePackage}.
           *
           * ABAP package the variant is assigned to. Used for transport functionality.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setLifecyclePackage(
            /**
             * New value for property `lifecyclePackage`
             */
            sLifecyclePackage: string
          ): sap.ui.comp.variants.VariantItem;
          /**
           * @SINCE 1.26.0
           *
           * Sets a new value for property {@link #getLifecycleTransportId lifecycleTransportId}.
           *
           * Identifier of the transport object the variant is assigned to.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setLifecycleTransportId(
            /**
             * New value for property `lifecycleTransportId`
             */
            sLifecycleTransportId: string
          ): sap.ui.comp.variants.VariantItem;
          /**
           * @SINCE 1.26.0
           *
           * Sets a new value for property {@link #getNamespace namespace}.
           *
           * Variant namespace
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setNamespace(
            /**
             * New value for property `namespace`
             */
            sNamespace: string
          ): sap.ui.comp.variants.VariantItem;
          /**
           * @SINCE 1.26.0
           *
           * Sets a new value for property {@link #getReadOnly readOnly}.
           *
           * If set to `false`, the user is allowed to change the item's data
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setReadOnly(
            /**
             * New value for property `readOnly`
             */
            bReadOnly: boolean
          ): sap.ui.comp.variants.VariantItem;
          /**
           * Setter for visible property.
           */
          // @ts-ignore
          setText(
            /**
             * State of visibility
             */
            bVisible: boolean
          ): void;
          /**
           * Attaches event handler `fnFunction` to the {@link #event:change change} event of this `sap.ui.comp.variants.VariantItem`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.variants.VariantItem` itself.
           *
           * This event is fired when one of the properties is changed.
           */
          attachChange(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.variants.VariantItem` itself
             */
            oListener?: object
          ): sap.ui.comp.variants.VariantItem;
        }
        /**
         * The VariantManagement control can be used to manage variants, such as filter bar variants or table variants.
         */
        class VariantManagement extends sap.ui.core.Control
          implements sap.m.IOverflowToolbarContent {
          /**
           * Constructor for a new VariantManagement.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: VariantManagementOpts
          );

          /**
           * @SINCE 1.22.0
           * @deprecated (since 1.26.0) - Replaced by association `variantItems`
           *
           * Adds some item to the aggregation {@link #getItems items}.
           */
          addItem(
            /**
             * The item to add; if empty, nothing is inserted
             */
            oItem: sap.ui.core.Item
          ): sap.ui.comp.variants.VariantManagement;
          /**
           * @SINCE 1.26.0
           *
           * Adds some variantItem to the aggregation {@link #getVariantItems variantItems}.
           */
          addVariantItem(
            /**
             * The variantItem to add; if empty, nothing is inserted
             */
            oVariantItem: sap.ui.comp.variants.VariantItem
          ): sap.ui.comp.variants.VariantManagement;
          /**
           * @SINCE 1.22.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:manage manage} event of this `sap.ui.comp.variants.VariantManagement`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.variants.VariantManagement` itself.
           *
           * This event is fired when users apply changes to variants in the Manage Variants dialog.
           */
          attachManage(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.variants.VariantManagement`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.variants.VariantManagement;
          /**
           * @SINCE 1.22.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:save save} event of this `sap.ui.comp.variants.VariantManagement`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.variants.VariantManagement` itself.
           *
           * This event is fired when the Save Variant dialog is closed with OK for a variant.
           */
          attachSave(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.variants.VariantManagement`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.variants.VariantManagement;
          /**
           * @SINCE 1.22.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:select select} event of this `sap.ui.comp.variants.VariantManagement`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.variants.VariantManagement` itself.
           *
           * This event is fired when a new variant is selected.
           */
          attachSelect(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.variants.VariantManagement`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.variants.VariantManagement;
          /**
           * @SINCE 1.22.0
           *
           * Removes the current variant selection and resets to default value.
           */
          clearVariantSelection(): void;
          /**
           * Gets the dirty flag of the current variant.
           */
          currentVariantGetModified(): boolean;
          /**
           * Sets the dirty flag of the current variant.
           */
          currentVariantSetModified(
            /**
             * The value indicating the dirty state of the current variant
             */
            bFlag: boolean
          ): void;
          /**
           * @SINCE 1.22.0
           * @deprecated (since 1.26.0) - Replaced by association `variantItems`
           *
           * Destroys all the items in the aggregation {@link #getItems items}.
           */
          destroyItems(): sap.ui.comp.variants.VariantManagement;
          /**
           * @SINCE 1.26.0
           *
           * Destroys all the variantItems in the aggregation {@link #getVariantItems variantItems}.
           */
          destroyVariantItems(): sap.ui.comp.variants.VariantManagement;
          /**
           * @SINCE 1.22.0
           *
           * Detaches event handler `fnFunction` from the {@link #event:manage manage} event of this `sap.ui.comp.variants.VariantManagement`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachManage(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.variants.VariantManagement;
          /**
           * @SINCE 1.22.0
           *
           * Detaches event handler `fnFunction` from the {@link #event:save save} event of this `sap.ui.comp.variants.VariantManagement`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachSave(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.variants.VariantManagement;
          /**
           * @SINCE 1.22.0
           *
           * Detaches event handler `fnFunction` from the {@link #event:select select} event of this `sap.ui.comp.variants.VariantManagement`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachSelect(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.comp.variants.VariantManagement;
          /**
           * Creates a new subclass of class sap.ui.comp.variants.VariantManagement with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * @SINCE 1.22.0
           *
           * Fires event {@link #event:manage manage} to attached listeners.
           */
          fireManage(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * List of changed variant keys
               */
              renamed?: string[];
              /**
               * List of deleted variant keys
               */
              deleted?: string[];
              /**
               * List of variant keys and the associated Execute on Selection indicator
               */
              exe?: object[];
              /**
               * The default variant key
               */
              def?: boolean;
            }
          ): sap.ui.comp.variants.VariantManagement;
          /**
           * @SINCE 1.22.0
           *
           * Fires event {@link #event:save save} to attached listeners.
           */
          fireSave(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * The variant title
               */
              name?: string;
              /**
               * Indicates if an existing variant is overwritten or if a new variant is created
               */
              overwrite?: boolean;
              /**
               * The variant key
               */
              key?: string;
              /**
               * The Execute on Selection indicator
               */
              exe?: boolean;
              /**
               * The default variant indicator
               */
              def?: boolean;
              /**
               * The shared variant indicator
               */
              global?: boolean;
              /**
               * The package name
               */
              lifecyclePackage?: string;
              /**
               * The transport ID
               */
              lifecycleTransportId?: string;
            }
          ): sap.ui.comp.variants.VariantManagement;
          /**
           * @SINCE 1.22.0
           *
           * Fires event {@link #event:select select} to attached listeners.
           */
          fireSelect(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * The variant key
               */
              key?: string;
            }
          ): sap.ui.comp.variants.VariantManagement;
          /**
           * @SINCE 1.22.0
           *
           * Gets current value of property {@link #getDefaultVariantKey defaultVariantKey}.
           *
           * Provides a string value to set the default variant. Used for the save dialog. Has no effect on the selected
           * variant.
           */
          getDefaultVariantKey(): string;
          /**
           * @SINCE 1.22.0
           *
           * Gets current value of property {@link #getEnabled enabled}.
           *
           * Can be set to true or false depending on whether you want to enable or disable the control.
           *
           * Default value is `true`.
           */
          getEnabled(): boolean;
          /**
           * @SINCE 1.52.0
           *
           * Gets current value of property {@link #getInErrorState inErrorState}.
           *
           * Indicates that the control is in error state. If set to `true` error message will be displayed whenever
           * the variant is opened.
           *
           * Default value is `false`.
           */
          getInErrorState(): boolean;
          /**
           * @SINCE 1.22.0
           *
           * Gets current value of property {@link #getInitialSelectionKey initialSelectionKey}.
           *
           * Enables the setting of the initially selected variant.
           */
          getInitialSelectionKey(): string;
          /**
           * @SINCE 1.22.0
           * @deprecated (since 1.26.0) - Replaced by association `variantItems`
           *
           * Gets content of aggregation {@link #getItems items}.
           *
           * Items displayed by the `VariantManagement` control.
           */
          getItems(): sap.ui.core.Item[];
          /**
           * @SINCE 1.26.0
           *
           * Gets current value of property {@link #getLifecycleSupport lifecycleSupport}.
           *
           * Enables the lifecycle support. If set to true, the VariantManagement control handles the transport information
           * for shared variants.
           *
           * Default value is `false`.
           */
          getLifecycleSupport(): boolean;
          /**
           * Returns a metadata object for class sap.ui.comp.variants.VariantManagement.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Required by the {@link sap.m.IOverflowToolbarContent} interface. Registers invalidations event which
           * is fired when width of the control is changed.
           */
          getOverflowToolbarConfig(): object;
          /**
           * @SINCE 1.24.0
           *
           * Gets current value of property {@link #getSelectionKey selectionKey}.
           *
           * The key of the currently selected item. Returns null if the default item list is selected.
           */
          getSelectionKey(): string;
          /**
           * @SINCE 1.26.0
           *
           * Gets current value of property {@link #getShowCreateTile showCreateTile}.
           *
           * Indicates that a Create Tile is visible in the Create dialog.
           *
           * Default value is `false`.
           */
          getShowCreateTile(): boolean;
          /**
           * @SINCE 1.26.0
           *
           * Gets current value of property {@link #getShowExecuteOnSelection showExecuteOnSelection}.
           *
           * Indicates that Execute on Selection is visible in the Save Variant and the Manage Variants dialogs.
           *
           * Default value is `false`.
           */
          getShowExecuteOnSelection(): boolean;
          /**
           * @SINCE 1.44.0
           *
           * Gets current value of property {@link #getShowSetAsDefault showSetAsDefault}.
           *
           * Indicates that set as default is visible in the Save Variant and the Manage Variants dialogs.
           *
           * Default value is `true`.
           */
          getShowSetAsDefault(): boolean;
          /**
           * @SINCE 1.26.0
           *
           * Gets current value of property {@link #getShowShare showShare}.
           *
           * Indicates that the Public checkbox is visible in the Save View and the Manage Views dialogs. Selecting
           * this checkbox allows you to share variants with other users.
           *
           * Default value is `false`.
           */
          getShowShare(): boolean;
          /**
           * @SINCE 1.28.0
           *
           * Gets current value of property {@link #getStandardItemText standardItemText}.
           *
           * Overwrites the default Standard variant title.
           */
          getStandardItemText(): string;
          /**
           * @SINCE 1.50.0
           *
           * Gets current value of property {@link #getUseFavorites useFavorites}.
           *
           * Indicates that the 'Favorites' feature is used. Only variants marked as favorites will be displayed in
           * the variant list.
           *
           * Default value is `false`.
           */
          getUseFavorites(): boolean;
          /**
           * @SINCE 1.26.0
           *
           * Gets content of aggregation {@link #getVariantItems variantItems}.
           *
           * Variant items displayed by the `VariantManagement` control.
           */
          getVariantItems(): sap.ui.comp.variants.VariantItem[];
          /**
           * @SINCE 1.22.0
           * @deprecated (since 1.26.0) - Replaced by association `variantItems`
           *
           * Checks for the provided `sap.ui.core.Item` in the aggregation {@link #getItems items}. and returns its
           * index if found or -1 otherwise.
           */
          indexOfItem(
            /**
             * The item whose index is looked for
             */
            oItem: sap.ui.core.Item
          ): number;
          /**
           * @SINCE 1.26.0
           *
           * Checks for the provided `sap.ui.comp.variants.VariantItem` in the aggregation {@link #getVariantItems
           * variantItems}. and returns its index if found or -1 otherwise.
           */
          indexOfVariantItem(
            /**
             * The variantItem whose index is looked for
             */
            oVariantItem: sap.ui.comp.variants.VariantItem
          ): number;
          /**
           * @SINCE 1.22.0
           * @deprecated (since 1.26.0) - Replaced by association `variantItems`
           *
           * Inserts a item into the aggregation {@link #getItems items}.
           */
          insertItem(
            /**
             * The item to insert; if empty, nothing is inserted
             */
            oItem: sap.ui.core.Item,
            /**
             * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
             * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
             * the last position
             */
            iIndex: number
          ): sap.ui.comp.variants.VariantManagement;
          /**
           * @SINCE 1.26.0
           *
           * Inserts a variantItem into the aggregation {@link #getVariantItems variantItems}.
           */
          insertVariantItem(
            /**
             * The variantItem to insert; if empty, nothing is inserted
             */
            oVariantItem: sap.ui.comp.variants.VariantItem,
            /**
             * The `0`-based index the variantItem should be inserted at; for a negative value of `iIndex`, the variantItem
             * is inserted at position 0; for a value greater than the current size of the aggregation, the variantItem
             * is inserted at the last position
             */
            iIndex: number
          ): sap.ui.comp.variants.VariantManagement;
          /**
           * @SINCE 1.22.0
           * @deprecated (since 1.26.0) - Replaced by association `variantItems`
           *
           * Removes all the controls from the aggregation {@link #getItems items}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllItems(): sap.ui.core.Item[];
          /**
           * @SINCE 1.26.0
           *
           * Removes all the controls from the aggregation {@link #getVariantItems variantItems}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllVariantItems(): sap.ui.comp.variants.VariantItem[];
          /**
           * @SINCE 1.22.0
           * @deprecated (since 1.26.0) - Replaced by association `variantItems`
           *
           * Removes a item from the aggregation {@link #getItems items}.
           */
          removeItem(
            /**
             * The item to remove or its index or id
             */
            vItem: number | string | sap.ui.core.Item
          ): sap.ui.core.Item;
          /**
           * @SINCE 1.26.0
           *
           * Removes a variantItem from the aggregation {@link #getVariantItems variantItems}.
           */
          removeVariantItem(
            /**
             * The variantItem to remove or its index or id
             */
            vVariantItem: number | string | sap.ui.comp.variants.VariantItem
          ): sap.ui.comp.variants.VariantItem;
          /**
           * @SINCE 1.48.0
           *
           * Defines the internal mode. The VariantManagement is able to support two different modes:
           *  1. the mode with standard entry displayed as 'Default' and
           *  2. the mode with standard entry displayed as 'Standard'.
           *  The 'Default* display is the initial mode.
           *  `Note:` this method has to be executed, before any items are assigned to the VariantManagement control!
           */
          setBackwardCompatibility(
            /**
             * defines the behavior: `true` new mode, otherwize 'old' mode.
             */
            bFlag: boolean
          ): void;
          /**
           * @SINCE 1.22.0
           *
           * Sets a new value for property {@link #getDefaultVariantKey defaultVariantKey}.
           *
           * Provides a string value to set the default variant. Used for the save dialog. Has no effect on the selected
           * variant.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setDefaultVariantKey(
            /**
             * New value for property `defaultVariantKey`
             */
            sDefaultVariantKey: string
          ): sap.ui.comp.variants.VariantManagement;
          /**
           * @SINCE 1.22.0
           *
           * Sets a new value for property {@link #getEnabled enabled}.
           *
           * Can be set to true or false depending on whether you want to enable or disable the control.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setEnabled(
            /**
             * New value for property `enabled`
             */
            bEnabled: boolean
          ): sap.ui.comp.variants.VariantManagement;
          /**
           * @SINCE 1.52.0
           *
           * Sets a new value for property {@link #getInErrorState inErrorState}.
           *
           * Indicates that the control is in error state. If set to `true` error message will be displayed whenever
           * the variant is opened.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setInErrorState(
            /**
             * New value for property `inErrorState`
             */
            bInErrorState: boolean
          ): sap.ui.comp.variants.VariantManagement;
          /**
           * @SINCE 1.22.0
           *
           * Sets a new value for property {@link #getInitialSelectionKey initialSelectionKey}.
           *
           * Enables the setting of the initially selected variant.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setInitialSelectionKey(
            /**
             * New value for property `initialSelectionKey`
             */
            sInitialSelectionKey: string
          ): sap.ui.comp.variants.VariantManagement;
          /**
           * @SINCE 1.26.0
           *
           * Sets a new value for property {@link #getLifecycleSupport lifecycleSupport}.
           *
           * Enables the lifecycle support. If set to true, the VariantManagement control handles the transport information
           * for shared variants.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setLifecycleSupport(
            /**
             * New value for property `lifecycleSupport`
             */
            bLifecycleSupport: boolean
          ): sap.ui.comp.variants.VariantManagement;
          /**
           * @SINCE 1.24.0
           *
           * Sets a new value for property {@link #getSelectionKey selectionKey}.
           *
           * The key of the currently selected item. Returns null if the default item list is selected.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setSelectionKey(
            /**
             * New value for property `selectionKey`
             */
            sSelectionKey: string
          ): sap.ui.comp.variants.VariantManagement;
          /**
           * @SINCE 1.26.0
           *
           * Sets a new value for property {@link #getShowCreateTile showCreateTile}.
           *
           * Indicates that a Create Tile is visible in the Create dialog.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setShowCreateTile(
            /**
             * New value for property `showCreateTile`
             */
            bShowCreateTile: boolean
          ): sap.ui.comp.variants.VariantManagement;
          /**
           * @SINCE 1.26.0
           *
           * Sets a new value for property {@link #getShowExecuteOnSelection showExecuteOnSelection}.
           *
           * Indicates that Execute on Selection is visible in the Save Variant and the Manage Variants dialogs.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setShowExecuteOnSelection(
            /**
             * New value for property `showExecuteOnSelection`
             */
            bShowExecuteOnSelection: boolean
          ): sap.ui.comp.variants.VariantManagement;
          /**
           * @SINCE 1.44.0
           *
           * Sets a new value for property {@link #getShowSetAsDefault showSetAsDefault}.
           *
           * Indicates that set as default is visible in the Save Variant and the Manage Variants dialogs.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setShowSetAsDefault(
            /**
             * New value for property `showSetAsDefault`
             */
            bShowSetAsDefault: boolean
          ): sap.ui.comp.variants.VariantManagement;
          /**
           * @SINCE 1.26.0
           *
           * Sets a new value for property {@link #getShowShare showShare}.
           *
           * Indicates that the Public checkbox is visible in the Save View and the Manage Views dialogs. Selecting
           * this checkbox allows you to share variants with other users.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setShowShare(
            /**
             * New value for property `showShare`
             */
            bShowShare: boolean
          ): sap.ui.comp.variants.VariantManagement;
          /**
           * @SINCE 1.28.0
           *
           * Sets a new value for property {@link #getStandardItemText standardItemText}.
           *
           * Overwrites the default Standard variant title.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setStandardItemText(
            /**
             * New value for property `standardItemText`
             */
            sStandardItemText: string
          ): sap.ui.comp.variants.VariantManagement;
          /**
           * @SINCE 1.50.0
           *
           * Sets a new value for property {@link #getUseFavorites useFavorites}.
           *
           * Indicates that the 'Favorites' feature is used. Only variants marked as favorites will be displayed in
           * the variant list.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          setUseFavorites(
            /**
             * New value for property `useFavorites`
             */
            bUseFavorites: boolean
          ): sap.ui.comp.variants.VariantManagement;
          /**
           * @SINCE 1.22.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:manage manage} event of this `sap.ui.comp.variants.VariantManagement`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.variants.VariantManagement` itself.
           *
           * This event is fired when users apply changes to variants in the Manage Variants dialog.
           */
          attachManage(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.variants.VariantManagement`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.variants.VariantManagement;
          /**
           * @SINCE 1.22.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:save save} event of this `sap.ui.comp.variants.VariantManagement`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.variants.VariantManagement` itself.
           *
           * This event is fired when the Save Variant dialog is closed with OK for a variant.
           */
          attachSave(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.variants.VariantManagement`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.variants.VariantManagement;
          /**
           * @SINCE 1.22.0
           *
           * Attaches event handler `fnFunction` to the {@link #event:select select} event of this `sap.ui.comp.variants.VariantManagement`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.comp.variants.VariantManagement` itself.
           *
           * This event is fired when a new variant is selected.
           */
          attachSelect(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.comp.variants.VariantManagement`
             * itself
             */
            oListener?: object
          ): sap.ui.comp.variants.VariantManagement;
        }
      }

      /**
       * @SINCE 1.60
       *
       * Enumeration of text arrangement types.
       */
      enum TextArrangementType {
        /**
         * Text comes first, followed by the ID.
         */
        TextFirst,
        /**
         * ID comes first, followed by the description.
         */
        TextLast,
        /**
         * Only description is represented, ID is hidden (for example, for `UUIDs`).
         */
        TextOnly,
        /**
         * ID and description are represented separately.
         */
        TextSeparate
      }
    }
  }

  interface IUI5DefineDependencyNames {
    "sap/ui/comp/filterbar/FilterBar": undefined;

    "sap/ui/comp/filterbar/FilterGroupItem": undefined;

    "sap/ui/comp/filterbar/FilterItem": undefined;

    "sap/ui/comp/navpopover/LinkData": undefined;

    "sap/ui/comp/navpopover/NavigationPopover": undefined;

    "sap/ui/comp/navpopover/NavigationPopoverHandler": undefined;

    "sap/ui/comp/navpopover/SemanticObjectController": undefined;

    "sap/ui/comp/navpopover/SmartLink": undefined;

    "sap/ui/comp/smartchart/SmartChart": undefined;

    "sap/ui/comp/smartfield/Configuration": undefined;

    "sap/ui/comp/smartfield/ControlProposal": undefined;

    "sap/ui/comp/smartfield/ObjectStatus": undefined;

    "sap/ui/comp/smartfield/SmartField": undefined;

    "sap/ui/comp/smartfilterbar/ControlConfiguration": undefined;

    "sap/ui/comp/smartfilterbar/GroupConfiguration": undefined;

    "sap/ui/comp/smartfilterbar/SelectOption": undefined;

    "sap/ui/comp/smartfilterbar/SmartFilterBar": undefined;

    "sap/ui/comp/smartform/Group": undefined;

    "sap/ui/comp/smartform/GroupElement": undefined;

    "sap/ui/comp/smartform/Layout": undefined;

    "sap/ui/comp/smartform/SmartForm": undefined;

    "sap/ui/comp/smartform/SmartFormLayout": undefined;

    "sap/ui/comp/smartlist/SmartList": undefined;

    "sap/ui/comp/smartmicrochart/SmartAreaMicroChart": undefined;

    "sap/ui/comp/smartmicrochart/SmartBulletMicroChart": undefined;

    "sap/ui/comp/smartmicrochart/SmartColumnMicroChart": undefined;

    "sap/ui/comp/smartmicrochart/SmartComparisonMicroChart": undefined;

    "sap/ui/comp/smartmicrochart/SmartDeltaMicroChart": undefined;

    "sap/ui/comp/smartmicrochart/SmartHarveyBallMicroChart": undefined;

    "sap/ui/comp/smartmicrochart/SmartLineMicroChart": undefined;

    "sap/ui/comp/smartmicrochart/SmartMicroChart": undefined;

    "sap/ui/comp/smartmicrochart/SmartMicroChartBase": undefined;

    "sap/ui/comp/smartmicrochart/SmartRadialMicroChart": undefined;

    "sap/ui/comp/smartmicrochart/SmartStackedBarMicroChart": undefined;

    "sap/ui/comp/smartmultiedit/Container": undefined;

    "sap/ui/comp/smartmultiedit/Field": undefined;

    "sap/ui/comp/smartmultiinput/SmartMultiInput": undefined;

    "sap/ui/comp/smarttable/SmartTable": undefined;

    "sap/ui/comp/smartvariants/PersonalizableInfo": undefined;

    "sap/ui/comp/smartvariants/SmartVariantManagement": undefined;

    "sap/ui/comp/smartvariants/SmartVariantManagementAdapter": undefined;

    "sap/ui/comp/smartvariants/SmartVariantManagementUi2": undefined;

    "sap/ui/comp/state/UIState": undefined;

    "sap/ui/comp/transport/TransportDialog": undefined;

    "sap/ui/comp/valuehelpdialog/ValueHelpDialog": undefined;

    "sap/ui/comp/variants/EditableVariantItem": undefined;

    "sap/ui/comp/variants/VariantItem": undefined;

    "sap/ui/comp/variants/VariantManagement": undefined;
  }
}
