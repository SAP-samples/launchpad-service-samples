// For Library Version: 1.71.8

declare namespace sap {
  /**
   * UI5 library: sap.gantt.
   */
  namespace gantt {
    /**
     * Namespace `sap.gantt.config` provides all configuration related objects and default configuration value
     * for optional ones.
     */
    namespace config {
      /**
       * @deprecated (since 1.63) - Using these constants may result in errors in your application.
       *
       * Defines the default configuration chart scheme.
       *
       * Default values:
       * 	 - key - `sap.gantt.config.DEFAULT_CHART_SCHEME_KEY`
       * 	 - name - "Default"
       * 	 - rowSpan - 1
       * 	 - icon - null
       * 	 - modeKey - `sap.gantt.config.DEFAULT_MODE_KEY`
       * 	 - shapeKeys - []
       */
      export const DEFAULT_CHART_SCHEME: object;

      /**
       * Defines the default chart scheme key.
       *
       * The Default Chart Scheme Key is used in the default chart scheme configuration.
       */
      export const DEFAULT_CHART_SCHEME_KEY: string;

      /**
       * Defines the default list of chart schemes.
       *
       * Default values is `sap.gantt.config.DEFAULT_CHART_SCHEME`
       */
      export const DEFAULT_CHART_SCHEMES: any[];

      /**
       * @deprecated (since 1.63) - Using these constants may result in errors in your application.
       *
       * Defines the default configuration object for Dual Container layout.
       *
       * Default values:
       * 	 - key - `sap.gantt.config.DEFAULT_CONTAINER_DUAL_LAYOUT_KEY`
       * 	 - text - "Dual Gantt Chart Layout"
       * 	 - toolbarSchemeKey - `sap.gantt.config.DEFAULT_CONTAINER_TOOLBAR_SCHEME_KEY`
       * 	 - ganttChartLayouts - `[new sap.gantt.config.GanttChartLayout({ activeModeKey: sap.gantt.config.DEFAULT_MODE_KEY,
       * 			hierarchyKey: sap.gantt.config.DEFAULT_HIERARCHY_KEY }), new sap.gantt.config.GanttChartLayout({ activeModeKey:
       * 			sap.gantt.config.DEFAULT_MODE_KEY, hierarchyKey: sap.gantt.config.DEFAULT_HIERARCHY_KEY })]`
       */
      export const DEFAULT_CONTAINER_DUAL_LAYOUT: object;

      /**
       * Defines the default Gantt dual-view layout key.
       *
       * The default Gantt dual-view layout key is used in the default Gantt dual layout configuration.
       */
      export const DEFAULT_CONTAINER_DUAL_LAYOUT_KEY: string;

      /**
       * Defines the default list of Container layouts.
       *
       * Default values are a single-view layout and a dual-view layout.
       */
      export const DEFAULT_CONTAINER_LAYOUTS: any[];

      /**
       * @deprecated (since 1.63) - Using these constants may result in errors in your application.
       *
       * Defines the default configuration object for the Single Container layout.
       *
       * Default values:
       * 	 - key - `sap.gantt.config.DEFAULT_CONTAINER_SINGLE_LAYOUT_KEY`
       * 	 - text - "Single Gantt Chart Layout"
       * 	 - toolbarSchemeKey - `sap.gantt.config.DEFAULT_CONTAINER_TOOLBAR_SCHEME_KEY`
       * 	 - ganttChartLayouts - `[new sap.gantt.config.GanttChartLayout({ activeModeKey: sap.gantt.config.DEFAULT_MODE_KEY,
       * 			hierarchyKey: sap.gantt.config.DEFAULT_HIERARCHY_KEY })]`
       */
      export const DEFAULT_CONTAINER_SINGLE_LAYOUT: object;

      /**
       * Defines the default Gantt single layout key.
       *
       * The default Gantt single layout key is used in the default Gantt single layout configuration.
       */
      export const DEFAULT_CONTAINER_SINGLE_LAYOUT_KEY: string;

      /**
       * @deprecated (since 1.63) - Using these constants may result in errors in your application.
       *
       * Defines the default configuration object for toolbar scheme on `sap.gantt.GanttChartContainer`.
       *
       * Default values:
       * 	 - key - `sap.gantt.config.DEFAULT_CONTAINER_TOOLBAR_SCHEME_KEY`
       * 	 - customToolbarItems - `sap.gantt.config.ToolbarGroup({ position: "L1", overflowPriority: sap.m.OverflowToolbarPriority.High
       * 			})`
       * 	 - timeZoom - `sap.gantt.config.ToolbarGroup({ position: "R2", overflowPriority: sap.m.OverflowToolbarPriority.NeverOverflow
       * 			})`
       * 	 - settings - `sap.gantt.config.ToolbarGroup({ position: "R1", overflowPriority: sap.m.OverflowToolbarPriority.low,
       * 			items: sap.gantt.config.DEFAULT_TOOLBAR_SETTING_ITEMS })`
       */
      export const DEFAULT_CONTAINER_TOOLBAR_SCHEME: object;

      /**
       * Defines the default toolbar scheme key for GanttContainer.
       *
       * The default GanttContainer toolbar scheme key is used in the default GanttContainer toolbar scheme configuration.
       */
      export const DEFAULT_CONTAINER_TOOLBAR_SCHEME_KEY: string;

      /**
       * Define default list of toolbar schemes for `sap.gantt.GanttChartContainer`.
       *
       * The default values include an empty toolbar and a default Gantt Chart Container toolbar.
       */
      export const DEFAULT_CONTAINER_TOOLBAR_SCHEMES: any[];

      /**
       * Defines the default empty JSON object.
       */
      export const DEFAULT_EMPTY_OBJECT: object;

      /**
       * @deprecated (since 1.63) - Using these constants may result in errors in your application.
       *
       * Defines the default configuration object for the toolbar scheme on `sap.gantt.GanttChartWithTable`.
       *
       * Default values:
       * 	 - key - `sap.gantt.config.DEFAULT_GANTTCHART_TOOLBAR_SCHEME_KEY`
       * 	 - customToolbarItems - `sap.gantt.config.ToolbarGroup({ position: "L2", overflowPriority: sap.m.OverflowToolbarPriority.High
       * 			})`
       * 	 - expandTree - `sap.gantt.config.ToolbarGroup({ position: "L3", overflowPriority: sap.m.OverflowToolbarPriority.Low
       * 			})`
       */
      export const DEFAULT_GANTTCHART_TOOLBAR_SCHEME: object;

      /**
       * Defines the default toolbar scheme key for GanttWithTable.
       *
       * The default GanttWithTable toolbar scheme key is used in the default GanttWithTable toolbar scheme configuration.
       */
      export const DEFAULT_GANTTCHART_TOOLBAR_SCHEME_KEY: string;

      /**
       * Defines the default list of toolbar schemes for `sap.gantt.GanttChartBase`.
       *
       * The default values include an empty toolbar and a default Gantt Chart toolbar.
       */
      export const DEFAULT_GANTTCHART_TOOLBAR_SCHEMES: any[];

      /**
       * @deprecated (since 1.63) - Using these constants may result in errors in your application.
       *
       * Defines the default configuration object for Hierarchy.
       *
       * Default values:
       * 	 - key - `sap.gantt.config.DEFAULT_HIERARCHY_KEY`
       * 	 - text - "Default Hierarchy"
       * 	 - activeModeKey - `sap.gantt.config.DEFAULT_MODE_KEY`
       * 	 - toolbarSchemeKey - `sap.gantt.config.DEFAULT_GANTTCHART_TOOLBAR_SCHEME_KEY`
       * 	 - columns - null
       * 	 - expandedLevels - null
       */
      export const DEFAULT_HIERARCHY: object;

      /**
       * Defines the default hierarchy key.
       *
       * The default hierarchy key is used in the default hierarchy configuration.
       */
      export const DEFAULT_HIERARCHY_KEY: string;

      /**
       * Defines the default list of hierarchies.
       *
       * The default value is `sap.gantt.config.DEFAULT_HIERARCHY`
       */
      export const DEFAULT_HIERARCHYS: any[];

      /**
       * @deprecated (since 1.63) - Using these constants may result in errors in your application. Create the
       * time horizons directly:
       * ```javascript
       *  new TimeHorizon({
       *         startTime: new Date((new Date()).getTime() - 2628000000),
       *         endTime: new Date((new Date()).getTime() + 2628000000)
       *     }); ```
       *
       *
       * Defines the default configuration initHorizon.
       *
       * From one month ago, to one year from now.
       */
      export const DEFAULT_INIT_HORIZON: undefined;

      /**
       * @deprecated (since 1.63) - Using these constants may result in errors in your application.
       *
       * Defines the default configuration object Locale.
       *
       * Default values
       * 	 - timeZoine - `"CET"`
       * 	 - utcdiff - `"000000"`
       * 	 - utcsign - `"+"`
       */
      export const DEFAULT_LOCALE_CET: object;

      /**
       * @deprecated (since 1.63) - Using these constants may result in errors in your application.
       *
       * Defines the default configuration mode.
       *
       * Default values are:
       * 	 - key - `sap.gantt.config.DEFAULT_MODE_KEY`
       * 	 - text - "Default"
       * 	 - icon - `"sap-icon://status-positive"`
       */
      export const DEFAULT_MODE: object;

      /**
       * Defines the default mode key.
       *
       * The default mode key is used in Gantt and the default mode configuration is used when no mode configuration
       * is provided.
       */
      export const DEFAULT_MODE_KEY: string;

      /**
       * Defines the default list of configuration modes.
       *
       * Default value: `sap.gantt.config.DEFAULT_MODE`.
       */
      export const DEFAULT_MODES: any[];

      /**
       * @deprecated (since 1.63) - Using these constants may result in errors in your application.
       *
       * Defines the default configuration object type.
       *
       * Default values:
       * 	 - key - `sap.gantt.config.DEFAULT_OBJECT_TYPE_KEY`
       * 	 - description - "Default"
       * 	 - mainChartSchemeKey - `sap.gantt.config.DEFAULT_CHART_SCHEME_KEY`
       * 	 - expandedChartSchemeKeys - []
       */
      export const DEFAULT_OBJECT_TYPE: object;

      /**
       * Defines the default object type key.
       *
       * Default object type key is used in the default object type configuration.
       */
      export const DEFAULT_OBJECT_TYPE_KEY: string;

      /**
       * Defines the default list of object types.
       *
       * The default value is `sap.gantt.config.DEFAULT_OBJECT_TYPE`.
       */
      export const DEFAULT_OBJECT_TYPES: any[];

      /**
       * @deprecated (since 1.63) - Using these constants may result in errors in your application. Create the
       * time horizons directly:
       * ```javascript
       *  new TimeHorizon({
       *         startTime: new Date((new Date()).getTime() - 31536000000),
       *         endTime: new Date((new Date()).getTime() + 31536000000)
       *     }); ```
       *
       *
       * Defines the default configuration planHorizon.
       *
       * From one year ago, to one year from now.
       */
      export const DEFAULT_PLAN_HORIZON: undefined;

      /**
       * @deprecated (since 1.63) - Using these constants may result in errors in your application. Use ` new
       * AxisTimeStrategy() ` instead.
       *
       * Defines the default configuration for the time axis.
       *
       * Default values are:
       * 	 - planHorizon - `sap.gantt.config.DEFAULT_PLAN_HORIZON`
       * 	 - initHorizon - `sap.gantt.config.DEFAULT_INIT_HORIZON`
       * 	 - zoomStrategy - `sap.gantt.config.DEFAULT_TIME_ZOOM_STRATEGY`
       * 	 - finestGranularity - "15min"
       * 	 - coarsestGranularity - "6month"
       * 	 - rate> - 1
       */
      export const DEFAULT_TIME_AXIS: undefined;

      /**
       * Defines the default configuration object for setting groups in the toolbar.
       *
       * Default values:
       * 	 - `sap.gantt.config.SETTING_ITEM_ENABLE_NOW_LINE`
       * 	 - `sap.gantt.config.SETTING_ITEM_ENABLE_CURSOR_LINE`
       * 	 - `sap.gantt.config.SETTING_ITEM_ENABLE_VERTICAL_LINE`
       * 	 - `sap.gantt.config.SETTING_ITEM_ENABLE_TIME_SCROLL_SYNC`
       */
      export const DEFAULT_TOOLBAR_SETTING_ITEMS: any[];

      /**
       * @deprecated (since 1.63) - Using these constants may result in errors in your application.
       *
       * Defines the default empty toolbar scheme.
       *
       * This toolbar scheme has no built-in toolbar items. Only one toolbar group `customToolbarItems` is configured
       * to allow applications to place custom toolbar items. Default values:
       * 	 - key - `sap.gantt.config.EMPTY_TOOLBAR_SCHEME_KEY`
       * 	 - customToolbarItems - `sap.gantt.config.ToolbarGroup({ position: "L1", overflowPriority: sap.m.OverflowToolbarPriority.High
       * 			})`
       */
      export const EMPTY_TOOLBAR_SCHEME: object;

      /**
       * Defines the default empty toolbar scheme key.
       *
       * The default empty toolbar scheme key is used in the default empty toolbar scheme.
       */
      export const EMPTY_TOOLBAR_SCHEME_KEY: string;

      /**
       * @deprecated (since 1.63) - Using these constants may result in errors in your application.
       *
       * Defines the default configuration object for enabling the adhoc line setting item. Default values:
       *
       * 	 - key - `sap.gantt.config.SETTING_ITEM_ENABLE_ADHOC_LINE_KEY`
       * 	 - checked - true
       * 	 - displayText - "Show Adhoc Lines"
       * 	 - tooltip - "Show Adhoc Lines"
       */
      export const SETTING_ITEM_ENABLE_ADHOC_LINE: object;

      /**
       * Defines the default setting item key for the adhoc lines.
       *
       * The default setting item key for adhoc lines is used in the default settings group configuration.
       */
      export const SETTING_ITEM_ENABLE_ADHOC_LINE_KEY: string;

      /**
       * @deprecated (since 1.63) - Using these constants may result in errors in your application.
       *
       * Defines the default configuration object for enabling the cursor line setting items. Default values:
       *
       * 	 - key - `sap.gantt.config.SETTING_ITEM_ENABLE_CURSOR_LINE_KEY`
       * 	 - checked - true
       * 	 - displayText - "Show Cursor Line"
       * 	 - tooltip - "Show a Vertical Line that Follows the Mouse Pointer"
       */
      export const SETTING_ITEM_ENABLE_CURSOR_LINE: object;

      /**
       * Defines the default setting item key for the cursor line.
       *
       * Default setting item key for the cursor line is used in the default settings group configuration.
       */
      export const SETTING_ITEM_ENABLE_CURSOR_LINE_KEY: string;

      /**
       * @deprecated (since 1.63) - Using these constants may result in errors in your application.
       *
       * Defines the default configuration object for enabling the present time indicator setting item. Default
       * values:
       * 	 - key - `sap.gantt.config.SETTING_ITEM_ENABLE_NOW_LINE_KEY`
       * 	 - checked - true
       * 	 - displayText - "Indicate Current Time"
       * 	 - tooltip - "Draw a Vertical Line to Indicate the Current Time"
       */
      export const SETTING_ITEM_ENABLE_NOW_LINE: object;

      /**
       * Defines the default setting item key for the present time indicator.
       *
       * Default setting item key for the present time indicator is used in the default settings group configuration.
       */
      export const SETTING_ITEM_ENABLE_NOW_LINE_KEY: string;

      /**
       * @deprecated (since 1.63) - Using these constants may result in errors in your application.
       *
       * Defines the default configuration object for enabling the synchronized time scroll setting item. Default
       * values are:
       * 	 - key - `sap.gantt.config.SETTING_ITEM_ENABLE_TIME_SCROLL_SYNC_KEY`
       * 	 - checked - true
       * 	 - displayText - "Synchronize Time Scroll"
       * 	 - tooltip - "Synchronize Horizontal Scroll Bars in Chart"
       */
      export const SETTING_ITEM_ENABLE_TIME_SCROLL_SYNC: object;

      /**
       * Defines the default setting item key for synchronized time scroll.
       *
       * Default setting item key for synchronized time scroll is used in the default settings group configuration.
       */
      export const SETTING_ITEM_ENABLE_TIME_SCROLL_SYNC_KEY: string;

      /**
       * @deprecated (since 1.63) - Using these constants may result in errors in your application.
       *
       * Defines the default configuration object for enabling vertical line setting item. Default values:
       *
       * 	 - key - `sap.gantt.config.SETTING_ITEM_ENABLE_VERTICAL_LINE_KEY`
       * 	 - checked - true
       * 	 - displayText - "Show Divider Lines"
       * 	 - tooltip - "Show Vertical Divider Lines between Time Periods"
       */
      export const SETTING_ITEM_ENABLE_VERTICAL_LINE: object;

      /**
       * Defines the default setting item key for the vertical lines.
       *
       * Default setting item key for vertical lines is used in the default settings group configuration.
       */
      export const SETTING_ITEM_ENABLE_VERTICAL_LINE_KEY: string;

      interface BirdEyeGroupOpts extends sap.gantt.config.ToolbarGroupOpts {
        /**
         * Specify the data range that bird eye use to calculte the suitable visible horizon By default the bird
         * eye is a menu button: one menu item for ` sap.gantt.config.BirdEyeRange.VisibleRows` and the other for
         * `sap.gantt.config.BirdEyeRange.AllRows`
         */
        birdEyeRange?: string;
      }

      interface ChartSchemeOpts extends sap.ui.core.ElementOpts {
        /**
         * Unique key of the Chart scheme
         */
        key?: string;

        /**
         * Description of the Chart scheme
         */
        name?: string;

        /**
         * Decides the row height of {@link sap.gantt.GanttChartBase} For example, if rowSpan is 2, the row height
         * of the Gantt chart equals twice of the row height of the tree table
         */
        rowSpan?: number;

        /**
         * URL of the icon of the Chart scheme
         */
        icon?: sap.ui.core.URI;

        /**
         * Key of {@link sap.gantt.config.Mode}
         */
        modeKey?: string;

        /**
         * Decides whether the shape has a background
         */
        haveBackground?: boolean;

        /**
         * Decides the background color of the row in the chart scheme
         */
        backgroundClass?: string;

        /**
         * Array of the key of {@link sap.gantt.config.Shape}
         */
        shapeKeys?: string[];

        /**
         * Decides which attribute serves as the purpose of "rowIndex" if it has multiple rows
         */
        rowIndexName?: string;
      }

      interface ColumnAttributeOpts extends sap.ui.core.ElementOpts {
        /**
         * Key of {@link sap.gantt.config.ObjectType}
         */
        objectTypeKey?: string;

        /**
         * Attribute name of the column
         */
        attribute?: string;
      }

      interface ContainerLayoutOpts extends sap.ui.core.ElementOpts {
        /**
         * Unique key of the container layout
         */
        key?: string;

        text?: string;

        /**
         * Orientation of the Gantt chart container. See {@link sap.ui.core.Oritentation}
         */
        orientation?: sap.ui.core.Orientation;

        /**
         * Active mode key. See {@link sap.gantt.config.Mode}
         */
        activeModeKey?: string;

        /**
         * Toolbar scheme key. See {@link sap.gantt.config.ToolbarScheme}
         */
        toolbarSchemeKey?: string;

        /**
         * CSS size of the selection panel. See {@link sap.ui.core.CSSSize}
         */
        selectionPanelSize?: sap.ui.core.CSSSize;

        /**
         * Array of the Gantt chart layout. See {@link sap.gantt.config.GanttChartLayout} We recommend that you
         * set the type of this argument to `sap.gantt.config.GanttChartLayout[]`. Otherwise some properties you
         * set may not function properly.
         */
        ganttChartLayouts?: object[];
      }

      interface ExpandChartOpts extends sap.ui.core.ElementOpts {
        /**
         * URL of the icon of the expand chart
         */
        icon?: sap.ui.core.URI;

        /**
         * Specifies whether the action is to expand or to collapse a row in the chart.
         */
        isExpand?: boolean;

        /**
         * Array of key of {@link sap.gantt.config.ChartScheme}
         */
        chartSchemeKeys?: string[];
      }

      interface ExpandChartGroupOpts extends sap.gantt.config.ToolbarGroupOpts {
        /**
         * Array of {@link sap.gantt.config.ExpandChart}
         */
        expandCharts?: object[];

        /**
         * When this property is enabled, expand button is in emphasized button type, and collapse button is in
         * default button type.
         */
        enableRichType?: boolean;

        /**
         * When this property is enabled, text arrow is shown beside icon indicating expand/collapse function
         */
        showArrowText?: boolean;
      }

      interface GanttChartLayoutOpts extends sap.ui.core.ElementOpts {
        /**
         * CSS Size of the Gantt chart. See {@link sap.ui.core.CSSSize}
         */
        ganttChartSize?: sap.ui.core.CSSSize;

        /**
         * Key of the mode. See {@link sap.gantt.config.Mode}
         */
        activeModeKey?: string;

        /**
         * Key of the hierarchy. See {@link sap.gantt.config.Hierarchy}
         */
        hierarchyKey?: string;
      }

      interface HierarchyOpts extends sap.ui.core.ElementOpts {
        /**
         * Unique key of the hierarchy
         */
        key?: string;

        /**
         * Description of the hierarchy
         */
        text?: string;

        /**
         * Key of {@link sap.gantt.config.Mode}
         */
        activeModeKey?: string;

        /**
         * Key of {@link sap.gantt.config.ToolbarScheme}
         */
        toolbarSchemeKey?: string;

        /**
         * Columns of the hierarchy. Array of {@link sap.gantt.config.HierarchyColumn}
         */
        columns?: object[];

        /**
         * @deprecated - This feature may cause severe performance issue! Since TreeTable doesn't have API to expand
         * specific multiple rows in one call, GanttChart expand the tree tale to level calculated from the configuration,
         * then loop all data in the model, collapse the node which does not full-fill the configuration one by
         * one. This feature is application specific and should be handled by application.
         *
         * expandedLevels determines how the tree table is initially expanded. This property is a two-dimensional
         * array containing object types of row data. Only rows with data of the specified object types are expanded.
         * Each child array represents a specific level in the hierarchy with the first child array representing
         * the first level and so forth. For example, if this property is set to [["02", "03"], ["05"]], rows containing
         * data of object types 02 or 03 in the first level and rows containing data of object type 05 in the second
         * level are expanded.
         */
        expandedLevels?: string[][];
      }

      interface HierarchyColumnOpts extends sap.ui.core.ElementOpts {
        /**
         * Unique key of the hierarchy column
         */
        key?: string;

        /**
         * Title is used as the title of the column header in the tree table
         */
        title?: string;

        /**
         * Content type of the column
         */
        contentType?: string;

        /**
         * Specifies the attribute by which the tree table sorts items in the column
         */
        sortAttribute?: string;

        /**
         * Specifies the attribute by which the tree table filter items in the column
         */
        filterAttribute?: string;

        /**
         * Attribute
         */
        attribute?: string;

        /**
         * Attributes. Array of {@link sap.gantt.config.ColumnAttribute} optional. array of objects. new file columnAttribute
         * to describe object: object type, attribute
         */
        attributes?: object[];

        /**
         * Column Width
         */
        width?: sap.ui.core.CSSSize;
      }

      interface LayoutGroupOpts extends sap.gantt.config.ToolbarGroupOpts {
        /**
         * @deprecated (since 1.50)
         *
         * Determines the button type. See {@link sap.m.ButtonType} true stands for {@link sap.m.ButtonType.Emphasized}
         * false stands for {@link sap.m.ButtonType.Default}
         */
        enableRichStyle?: boolean;
      }

      interface LocaleOpts extends sap.ui.core.ElementOpts {
        /**
         * User time zone
         */
        timeZone?: string;

        /**
         * Gap value to the UTC time in the format hhmmss
         */
        utcdiff?: string;

        /**
         * Sign of the gap to the UTC time. Two valid values: "+" or "-".
         */
        utcsign?: string;

        /**
         * Day-light saving time periods. Array of {@link sap.gantt.config.TimeHorizon} other locale info like langu,
         * dateFormat, timeFormat and numberFormat, please use UI5 standard configuration object.
         */
        dstHorizons?: object[];
      }

      interface ModeOpts extends sap.ui.core.ElementOpts {
        /**
         * Unique key of the mode
         */
        key?: string;

        /**
         * Description of the mode
         */
        text?: string;

        /**
         * URL of the icon of the mode
         */
        icon?: sap.ui.core.URI;

        /**
         * URL of the active icon of the mode
         */
        activeIcon?: sap.ui.core.URI;
      }

      interface ModeGroupOpts extends sap.gantt.config.ToolbarGroupOpts {
        /**
         * Array of key of {@link sap.gantt.config.Mode}
         */
        modeKeys?: string[];
      }

      interface ObjectTypeOpts extends sap.ui.core.ElementOpts {
        /**
         * Unique Key of the object type
         */
        key?: string;

        /**
         * Description of the object type
         */
        description?: string;

        /**
         * Specifies the chart scheme in which the the object type can be shown Key of {@link sap.gantt.config.ChartScheme}
         */
        mainChartSchemeKey?: string;

        /**
         * Specifies the expanded chart scheme in which the the object type can be shown Array of keys of {@link
         * sap.gantt.config.ChartScheme}
         */
        expandedChartSchemeKeys?: string[];
      }

      interface SettingGroupOpts extends sap.gantt.config.ToolbarGroupOpts {
        /**
         * Association to the setting item. See {@link sap.gantt.config.SettingItem} We recommend that you set the
         * type of this argument to `sap.gantt.config.SettingItem[]`. Otherwise some properties you set may not
         * function properly.
         */
        items?: object[];
      }

      interface SettingItemOpts extends sap.ui.core.ElementOpts {
        /**
         * Indicates whether the checkbox is selected or not
         */
        checked?: boolean;

        /**
         * Identifier of an event when the checkbox is toggled
         */
        key?: string;

        /**
         * Aria label of the checkbox
         */
        displayText?: string;
      }

      interface ShapeOpts extends sap.ui.core.ElementOpts {
        /**
         * Primary key of the shape configuration. This property can be referenced from other configuration object,
         * such as `sap.gantt.config.ChartScheme`. This property is only relevant to top Shape configuration.
         */
        key?: string;

        /**
         * Specifies the shape class to be used for data representation. Both shapes from `sap.gantt.shape` and
         * extended shapes can be used here.
         */
        shapeClassName?: string;

        /**
         * Specifies the name of the data name to be represented. This is for the top shape only.
         */
        shapeDataName?: string;

        /**
         * Specifies the key of modes in which the shape is drawn. If you leave this property empty, the shape is
         * drawn in all modes.
         */
        modeKeys?: string[];

        /**
         * Level of shapes. Shapes closer to the top shape have a smaller value in level. This property is only
         * relevant to top shape configuration (non aggregated shape configuration).
         */
        level?: string;

        /**
         * Pre-configured values for Shape. The values specified in this object have a higher priority than values
         * coded in the Shape class.
         */
        shapeProperties?: object;

        /**
         * Aggregation shapes for sap.gantt.shape.Group class. This aggregation is only valid for shape classes
         * with tag='g'. We recommend that you set the type of this argument to `sap.gantt.config.Shape[]`. Otherwise
         * some properties you set may not function properly.
         */
        groupAggregation?: object[];

        /**
         * Aggregation path classes for sap.gantt.shape.Clippath class. This aggregation is only valid for shape
         * classes with tag='clippath'. We recommend that you set the type of this argument to `sap.gantt.config.Shape[]`.
         * Otherwise some properties you set may not function properly.
         */
        clippathAggregation?: object[];

        /**
         * Aggregation class for drawing selection of this shape. If nothing is assigned to this property, `sap.gantt.Gantt`
         * instantiates the default selected shape class.
         */
        selectedClassName?: string;

        /**
         * Switch of shape's checkbox value in list legend, its value can be "noShow", "checked" and "unchecked".
         */
        switchOfCheckBox?: string;

        /**
         * Aggregation class for drawing shadow when resizing this shape. If nothing is assigned to this property,
         * `sap.gantt.Gantt` instantiates the default shadow shape class.
         */
        resizeShadowClassName?: string;

        /**
         * Specifies whether or not should the shape be considered into bird eye range. we suggest to set this property
         * to true only for shapes that really need to be considered into bird eye range.
         */
        countInBirdEye?: boolean;
      }

      interface TimeAxisOpts extends sap.ui.core.ElementOpts {
        /**
         * Whole time horizon of the Gantt chart We recommend that you set the type of this argument to `sap.gantt.config.TimeHorizon`.
         * Otherwise some properties you set may not function properly.
         */
        planHorizon?: object;

        /**
         * Time horizon which is displayed after the Gantt chart is initialized We recommend that you set the type
         * of this argument to `sap.gantt.config.TimeHorizon`. Otherwise some properties you set may not function
         * properly.
         */
        initHorizon?: object;

        /**
         * Zoom strategy of the Gantt chart
         *
         * {@see sap.gantt.axistime.AxisTimeStrategy}
         */
        zoomStrategy?: object;

        /**
         * Initial granularity of the time axis
         */
        granularity?: string;

        /**
         * Granularity when the Gantt chart is zoomed in to the maximum
         */
        finestGranularity?: string;

        /**
         * Granularity when the GanttChart is zoomed out to the minimum
         */
        coarsestGranularity?: string;

        /**
         * Zoom rate of the Gantt chart
         */
        rate?: number;
      }

      interface TimeHorizonOpts extends sap.ui.core.ElementOpts {
        /**
         * Start time of the time horizon in this format: YYYYMMDDHHMMSS. If the type of startTime is object, the
         * value is converted to string.
         */
        startTime?: string;

        /**
         * End time of the time horizon in this format: YYYYMMDDHHMMSS. If the type of endTime is object, the value
         * is converted to string.
         */
        endTime?: string;
      }

      interface TimeZoomGroupOpts extends sap.gantt.config.ToolbarGroupOpts {
        /**
         * @deprecated (since 1.44) - replaced by zoomControlType
         *
         * Enables the Slider control for the time zooming function.
         */
        showZoomSlider?: boolean;

        /**
         * @deprecated (since 1.44) - replaced by zoomControlType
         *
         * Enables zoom in and zoom out buttons for the time zooming function.
         */
        showZoomButtons?: boolean;

        /**
         * Defines the control type to set the zoom rate.
         */
        zoomControlType?: sap.gantt.config.ZoomControlType;

        /**
         * Sets the step when the zoom control type is sap.gantt.config.ZoomControlType.SliderWithButtons or sap.gantt.config.ZoomControlType.SliderOnly.
         */
        stepCountOfSlider?: number;

        /**
         * Array of plain objects which has "key" and "text" properties, or array of sap.ui.core.Item used to configure
         * the items in the Select control when the zoom control type is sap.gantt.config.ZoomControlType.Select.
         */
        infoOfSelectItems?: object[];
      }

      interface ToolbarGroupOpts extends sap.ui.core.ElementOpts {
        /**
         * Specifies the position of the toolbar group. Note that all toolbar groups must be put into the Gantt
         * chart toolbar.
         */
        position?: string;

        /**
         * Overflow priority. See {@link sap.m.OverflowToolbarPriority}
         */
        overflowPriority?: sap.m.OverflowToolbarPriority;

        /**
         * Type of a button in the toolbar group if it's a button
         */
        buttonType?: sap.m.ButtonType;
      }

      interface ToolbarSchemeOpts extends sap.ui.core.ElementOpts {
        /**
         * Unique key of the toolbar scheme
         */
        key?: string;

        /**
         * Toolbar group for selecting a source We recommend that you set the type of this argument to `sap.gantt.config.ToolbarGroup`.
         * Otherwise some properties you set may not function properly.
         */
        sourceSelect?: object;

        /**
         * Toolbar group for bird eye We recommend that you set the type of this argument to `sap.gantt.config.BirdEyeGroup`.
         * Otherwise some properties you set may not function properly.
         */
        birdEye?: object;

        /**
         * Toolbar group for the Gantt chart layout We recommend that you set the type of this argument to `sap.gantt.config.LayoutGroup`.
         * Otherwise some properties you set may not function properly.
         */
        layout?: object;

        /**
         * Toolbar group for custom toolbar items We recommend that you set the type of this argument to `sap.gantt.config.ToolbarGroup`.
         * Otherwise some properties you set may not function properly.
         */
        customToolbarItems?: object;

        /**
         * Toolbar group for expanding a chart We recommend that you set the type of this argument to `sap.gantt.config.ExpandChartGroup`.
         * Otherwise some properties you set may not function properly.
         */
        expandChart?: object;

        /**
         * Toolbar group for expanding nodes of a tree table We recommend that you set the type of this argument
         * to `sap.gantt.config.ToolbarGroup`. Otherwise some properties you set may not function properly.
         */
        expandTree?: object;

        /**
         * Toolbar group for the time zoom We recommend that you set the type of this argument to `sap.gantt.config.ToolbarGroup`.
         * Otherwise some properties you set may not function properly.
         */
        timeZoom?: object;

        /**
         * Toolbar group for legend We recommend that you set the type of this argument to `sap.gantt.config.ToolbarGroup`.
         * Otherwise some properties you set may not function properly.
         */
        legend?: object;

        /**
         * See {@link sap.gantt.config.SettingGroup} We recommend that you set the type of this argument to `sap.gantt.config.SettingGroup`.
         * Otherwise some properties you set may not function properly.
         */
        settings?: object;

        /**
         * See {@link sap.gantt.config.ModeGroup} We recommend that you set the type of this argument to `sap.gantt.config.ModeGroup`.
         * Otherwise some properties you set may not function properly.
         */
        mode?: object;

        /**
         * Toolbar design. See {@link sap.m.ToolbarDesign}
         */
        toolbarDesign?: string;
      }
      /**
       * You can define bird eye toolbar items in the Gantt chart toolbar.
       */
      class BirdEyeGroup extends sap.gantt.config.ToolbarGroup {
        /**
         * Creates and initializes a new toolbar group for bird eye button
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID of the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: BirdEyeGroupOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.config.BirdEyeGroup with name `sClassName` and enriches it
         * with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.config.ToolbarGroup.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getBirdEyeRange birdEyeRange}.
         *
         * Specify the data range that bird eye use to calculte the suitable visible horizon By default the bird
         * eye is a menu button: one menu item for ` sap.gantt.config.BirdEyeRange.VisibleRows` and the other for
         * `sap.gantt.config.BirdEyeRange.AllRows`
         */
        getBirdEyeRange(): string;
        /**
         * Returns a metadata object for class sap.gantt.config.BirdEyeGroup.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Sets a new value for property {@link #getBirdEyeRange birdEyeRange}.
         *
         * Specify the data range that bird eye use to calculte the suitable visible horizon By default the bird
         * eye is a menu button: one menu item for ` sap.gantt.config.BirdEyeRange.VisibleRows` and the other for
         * `sap.gantt.config.BirdEyeRange.AllRows`
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setBirdEyeRange(
          /**
           * New value for property `birdEyeRange`
           */
          sBirdEyeRange: string
        ): sap.gantt.config.BirdEyeGroup;
      }
      /**
       * The ChartScheme control is one of the settings of {@link sap.gantt.GanttChart}. A Gantt chart uses
       * this setting to decide the mode of Gantt chart and the shapes to display in the Gantt chart. A Gantt
       * chart contains one or more Chart schemes. By switching between these schemes, the Gantt chart can display
       * different shapes.
       */
      class ChartScheme extends sap.ui.core.Element {
        /**
         * Creates and initializes a new ChartScheme class
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: ChartSchemeOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.config.ChartScheme with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getBackgroundClass backgroundClass}.
         *
         * Decides the background color of the row in the chart scheme
         */
        getBackgroundClass(): string;
        /**
         * Gets current value of property {@link #getHaveBackground haveBackground}.
         *
         * Decides whether the shape has a background
         *
         * Default value is `false`.
         */
        getHaveBackground(): boolean;
        /**
         * Gets current value of property {@link #getIcon icon}.
         *
         * URL of the icon of the Chart scheme
         */
        getIcon(): sap.ui.core.URI;
        /**
         * Gets current value of property {@link #getKey key}.
         *
         * Unique key of the Chart scheme
         */
        getKey(): string;
        /**
         * Returns a metadata object for class sap.gantt.config.ChartScheme.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getModeKey modeKey}.
         *
         * Key of {@link sap.gantt.config.Mode}
         *
         * Default value is `sap.gantt.config.DEFAULT_MODE_KEY`.
         */
        getModeKey(): string;
        /**
         * Gets current value of property {@link #getName name}.
         *
         * Description of the Chart scheme
         */
        getName(): string;
        /**
         * Gets current value of property {@link #getRowIndexName rowIndexName}.
         *
         * Decides which attribute serves as the purpose of "rowIndex" if it has multiple rows
         *
         * Default value is `rowIndex`.
         */
        getRowIndexName(): string;
        /**
         * Gets current value of property {@link #getRowSpan rowSpan}.
         *
         * Decides the row height of {@link sap.gantt.GanttChartBase} For example, if rowSpan is 2, the row height
         * of the Gantt chart equals twice of the row height of the tree table
         *
         * Default value is `1`.
         */
        getRowSpan(): number;
        /**
         * Gets current value of property {@link #getShapeKeys shapeKeys}.
         *
         * Array of the key of {@link sap.gantt.config.Shape}
         *
         * Default value is `[]`.
         */
        getShapeKeys(): string[];
        /**
         * Sets a new value for property {@link #getBackgroundClass backgroundClass}.
         *
         * Decides the background color of the row in the chart scheme
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setBackgroundClass(
          /**
           * New value for property `backgroundClass`
           */
          sBackgroundClass: string
        ): sap.gantt.config.ChartScheme;
        /**
         * Sets a new value for property {@link #getHaveBackground haveBackground}.
         *
         * Decides whether the shape has a background
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setHaveBackground(
          /**
           * New value for property `haveBackground`
           */
          bHaveBackground: boolean
        ): sap.gantt.config.ChartScheme;
        /**
         * Sets a new value for property {@link #getIcon icon}.
         *
         * URL of the icon of the Chart scheme
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setIcon(
          /**
           * New value for property `icon`
           */
          sIcon: sap.ui.core.URI
        ): sap.gantt.config.ChartScheme;
        /**
         * Sets a new value for property {@link #getKey key}.
         *
         * Unique key of the Chart scheme
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setKey(
          /**
           * New value for property `key`
           */
          sKey: string
        ): sap.gantt.config.ChartScheme;
        /**
         * Sets a new value for property {@link #getModeKey modeKey}.
         *
         * Key of {@link sap.gantt.config.Mode}
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `sap.gantt.config.DEFAULT_MODE_KEY`.
         */
        setModeKey(
          /**
           * New value for property `modeKey`
           */
          sModeKey: string
        ): sap.gantt.config.ChartScheme;
        /**
         * Sets a new value for property {@link #getName name}.
         *
         * Description of the Chart scheme
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setName(
          /**
           * New value for property `name`
           */
          sName: string
        ): sap.gantt.config.ChartScheme;
        /**
         * Sets a new value for property {@link #getRowIndexName rowIndexName}.
         *
         * Decides which attribute serves as the purpose of "rowIndex" if it has multiple rows
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `rowIndex`.
         */
        setRowIndexName(
          /**
           * New value for property `rowIndexName`
           */
          sRowIndexName: string
        ): sap.gantt.config.ChartScheme;
        /**
         * Sets a new value for property {@link #getRowSpan rowSpan}.
         *
         * Decides the row height of {@link sap.gantt.GanttChartBase} For example, if rowSpan is 2, the row height
         * of the Gantt chart equals twice of the row height of the tree table
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `1`.
         */
        setRowSpan(
          /**
           * New value for property `rowSpan`
           */
          iRowSpan: number
        ): sap.gantt.config.ChartScheme;
        /**
         * Sets a new value for property {@link #getShapeKeys shapeKeys}.
         *
         * Array of the key of {@link sap.gantt.config.Shape}
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `[]`.
         */
        setShapeKeys(
          /**
           * New value for property `shapeKeys`
           */
          sShapeKeys: string[]
        ): sap.gantt.config.ChartScheme;
      }
      /**
       * Defines the column attribute which is used in the hierarchy column
       */
      class ColumnAttribute extends sap.ui.core.Element {
        /**
         * Constructor for a new ColumnAttribute
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID of the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: ColumnAttributeOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.config.ColumnAttribute with name `sClassName` and enriches
         * it with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getAttribute attribute}.
         *
         * Attribute name of the column
         */
        getAttribute(): string;
        /**
         * Returns a metadata object for class sap.gantt.config.ColumnAttribute.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getObjectTypeKey objectTypeKey}.
         *
         * Key of {@link sap.gantt.config.ObjectType}
         */
        getObjectTypeKey(): string;
        /**
         * Sets a new value for property {@link #getAttribute attribute}.
         *
         * Attribute name of the column
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setAttribute(
          /**
           * New value for property `attribute`
           */
          sAttribute: string
        ): sap.gantt.config.ColumnAttribute;
        /**
         * Sets a new value for property {@link #getObjectTypeKey objectTypeKey}.
         *
         * Key of {@link sap.gantt.config.ObjectType}
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setObjectTypeKey(
          /**
           * New value for property `objectTypeKey`
           */
          sObjectTypeKey: string
        ): sap.gantt.config.ColumnAttribute;
      }
      /**
       * Defines the container layout. The container layout determines the layout of a Gantt chart container such
       * as the CSS size, orientation, toolbar, and tree table size.
       */
      class ContainerLayout extends sap.ui.core.Element {
        /**
         * Creates and initializes a new container layout
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID of the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: ContainerLayoutOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.config.ContainerLayout with name `sClassName` and enriches
         * it with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getActiveModeKey activeModeKey}.
         *
         * Active mode key. See {@link sap.gantt.config.Mode}
         *
         * Default value is `sap.gantt.config.DEFAULT_MODE_KEY`.
         */
        getActiveModeKey(): string;
        /**
         * Gets current value of property {@link #getGanttChartLayouts ganttChartLayouts}.
         *
         * Array of the Gantt chart layout. See {@link sap.gantt.config.GanttChartLayout} We recommend that you
         * set the type of this argument to `sap.gantt.config.GanttChartLayout[]`. Otherwise some properties you
         * set may not function properly.
         *
         * Default value is `[]`.
         */
        getGanttChartLayouts(): object[];
        /**
         * Gets current value of property {@link #getKey key}.
         *
         * Unique key of the container layout
         *
         * Default value is `sap.gantt.config.DEFAULT_CONTAINER_SINGLE_LAYOUT_KEY`.
         */
        getKey(): string;
        /**
         * Returns a metadata object for class sap.gantt.config.ContainerLayout.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getOrientation orientation}.
         *
         * Orientation of the Gantt chart container. See {@link sap.ui.core.Oritentation}
         *
         * Default value is `Vertical`.
         */
        getOrientation(): sap.ui.core.Orientation;
        /**
         * Gets current value of property {@link #getSelectionPanelSize selectionPanelSize}.
         *
         * CSS size of the selection panel. See {@link sap.ui.core.CSSSize}
         *
         * Default value is `30%`.
         */
        getSelectionPanelSize(): sap.ui.core.CSSSize;
        /**
         * Gets current value of property {@link #getText text}.
         *
         * Default value is `sap.ui.getCore().getLibraryResourceBundle("sap.gantt").getText("XLST_SINGLE_LAYOUT")`.
         */
        getText(): string;
        /**
         * Gets current value of property {@link #getToolbarSchemeKey toolbarSchemeKey}.
         *
         * Toolbar scheme key. See {@link sap.gantt.config.ToolbarScheme}
         *
         * Default value is `sap.gantt.config.DEFAULT_CONTAINER_TOOLBAR_SCHEME_KEY`.
         */
        getToolbarSchemeKey(): string;
        /**
         * Sets a new value for property {@link #getActiveModeKey activeModeKey}.
         *
         * Active mode key. See {@link sap.gantt.config.Mode}
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `sap.gantt.config.DEFAULT_MODE_KEY`.
         */
        setActiveModeKey(
          /**
           * New value for property `activeModeKey`
           */
          sActiveModeKey: string
        ): sap.gantt.config.ContainerLayout;
        /**
         * Sets a new value for property {@link #getGanttChartLayouts ganttChartLayouts}.
         *
         * Array of the Gantt chart layout. See {@link sap.gantt.config.GanttChartLayout} We recommend that you
         * set the type of this argument to `sap.gantt.config.GanttChartLayout[]`. Otherwise some properties you
         * set may not function properly.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `[]`.
         */
        setGanttChartLayouts(
          /**
           * New value for property `ganttChartLayouts`
           */
          sGanttChartLayouts: object[]
        ): sap.gantt.config.ContainerLayout;
        /**
         * Sets a new value for property {@link #getKey key}.
         *
         * Unique key of the container layout
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `sap.gantt.config.DEFAULT_CONTAINER_SINGLE_LAYOUT_KEY`.
         */
        setKey(
          /**
           * New value for property `key`
           */
          sKey: string
        ): sap.gantt.config.ContainerLayout;
        /**
         * Sets a new value for property {@link #getOrientation orientation}.
         *
         * Orientation of the Gantt chart container. See {@link sap.ui.core.Oritentation}
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `Vertical`.
         */
        setOrientation(
          /**
           * New value for property `orientation`
           */
          sOrientation: sap.ui.core.Orientation
        ): sap.gantt.config.ContainerLayout;
        /**
         * Sets a new value for property {@link #getSelectionPanelSize selectionPanelSize}.
         *
         * CSS size of the selection panel. See {@link sap.ui.core.CSSSize}
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `30%`.
         */
        setSelectionPanelSize(
          /**
           * New value for property `selectionPanelSize`
           */
          sSelectionPanelSize: sap.ui.core.CSSSize
        ): sap.gantt.config.ContainerLayout;
        /**
         * Sets a new value for property {@link #getText text}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `sap.ui.getCore().getLibraryResourceBundle("sap.gantt").getText("XLST_SINGLE_LAYOUT")`.
         */
        setText(
          /**
           * New value for property `text`
           */
          sText: string
        ): sap.gantt.config.ContainerLayout;
        /**
         * Sets a new value for property {@link #getToolbarSchemeKey toolbarSchemeKey}.
         *
         * Toolbar scheme key. See {@link sap.gantt.config.ToolbarScheme}
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `sap.gantt.config.DEFAULT_CONTAINER_TOOLBAR_SCHEME_KEY`.
         */
        setToolbarSchemeKey(
          /**
           * New value for property `toolbarSchemeKey`
           */
          sToolbarSchemeKey: string
        ): sap.gantt.config.ContainerLayout;
      }
      /**
       * Defines the expand chart which is used by {@link sap.gantt.config.ExpandChartGroup}.
       */
      class ExpandChart extends sap.ui.core.Element {
        /**
         * Creates and initializes a new expand chart
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID of the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: ExpandChartOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.config.ExpandChart with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getChartSchemeKeys chartSchemeKeys}.
         *
         * Array of key of {@link sap.gantt.config.ChartScheme}
         *
         * Default value is `[]`.
         */
        getChartSchemeKeys(): string[];
        /**
         * Gets current value of property {@link #getIcon icon}.
         *
         * URL of the icon of the expand chart
         */
        getIcon(): sap.ui.core.URI;
        /**
         * Gets current value of property {@link #getIsExpand isExpand}.
         *
         * Specifies whether the action is to expand or to collapse a row in the chart.
         */
        getIsExpand(): boolean;
        /**
         * Returns a metadata object for class sap.gantt.config.ExpandChart.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Sets a new value for property {@link #getChartSchemeKeys chartSchemeKeys}.
         *
         * Array of key of {@link sap.gantt.config.ChartScheme}
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `[]`.
         */
        setChartSchemeKeys(
          /**
           * New value for property `chartSchemeKeys`
           */
          sChartSchemeKeys: string[]
        ): sap.gantt.config.ExpandChart;
        /**
         * Sets a new value for property {@link #getIcon icon}.
         *
         * URL of the icon of the expand chart
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setIcon(
          /**
           * New value for property `icon`
           */
          sIcon: sap.ui.core.URI
        ): sap.gantt.config.ExpandChart;
        /**
         * Sets a new value for property {@link #getIsExpand isExpand}.
         *
         * Specifies whether the action is to expand or to collapse a row in the chart.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setIsExpand(
          /**
           * New value for property `isExpand`
           */
          bIsExpand: boolean
        ): sap.gantt.config.ExpandChart;
      }
      /**
       * Defines a toolbar group for the expand chart-related toolbar items. These expand chart-related toolbar
       * items are displayed in the Gantt chart toolbar.
       */
      class ExpandChartGroup extends sap.gantt.config.ToolbarGroup {
        /**
         * Creates and initializes a new expand chart group
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID of the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: ExpandChartGroupOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.config.ExpandChartGroup with name `sClassName` and enriches
         * it with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.config.ToolbarGroup.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getEnableRichType enableRichType}.
         *
         * When this property is enabled, expand button is in emphasized button type, and collapse button is in
         * default button type.
         */
        getEnableRichType(): boolean;
        /**
         * Gets current value of property {@link #getExpandCharts expandCharts}.
         *
         * Array of {@link sap.gantt.config.ExpandChart}
         *
         * Default value is `[]`.
         */
        getExpandCharts(): object[];
        /**
         * Returns a metadata object for class sap.gantt.config.ExpandChartGroup.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getShowArrowText showArrowText}.
         *
         * When this property is enabled, text arrow is shown beside icon indicating expand/collapse function
         */
        getShowArrowText(): boolean;
        /**
         * Sets a new value for property {@link #getEnableRichType enableRichType}.
         *
         * When this property is enabled, expand button is in emphasized button type, and collapse button is in
         * default button type.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setEnableRichType(
          /**
           * New value for property `enableRichType`
           */
          bEnableRichType: boolean
        ): sap.gantt.config.ExpandChartGroup;
        /**
         * Sets a new value for property {@link #getExpandCharts expandCharts}.
         *
         * Array of {@link sap.gantt.config.ExpandChart}
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `[]`.
         */
        setExpandCharts(
          /**
           * New value for property `expandCharts`
           */
          sExpandCharts: object[]
        ): sap.gantt.config.ExpandChartGroup;
        /**
         * Sets a new value for property {@link #getShowArrowText showArrowText}.
         *
         * When this property is enabled, text arrow is shown beside icon indicating expand/collapse function
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setShowArrowText(
          /**
           * New value for property `showArrowText`
           */
          bShowArrowText: boolean
        ): sap.gantt.config.ExpandChartGroup;
      }
      /**
       * Defines the Gantt chart layout. This includes but is not limited to the CSS size, mode, and hierarchy
       * of the Gantt chart.
       */
      class GanttChartLayout extends sap.ui.core.Element {
        /**
         * Creates and initializes a new Gantt chart layout
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID of the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: GanttChartLayoutOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.config.GanttChartLayout with name `sClassName` and enriches
         * it with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getActiveModeKey activeModeKey}.
         *
         * Key of the mode. See {@link sap.gantt.config.Mode}
         *
         * Default value is `sap.gantt.config.DEFAULT_MODE_KEY`.
         */
        getActiveModeKey(): string;
        /**
         * Gets current value of property {@link #getGanttChartSize ganttChartSize}.
         *
         * CSS Size of the Gantt chart. See {@link sap.ui.core.CSSSize}
         */
        getGanttChartSize(): sap.ui.core.CSSSize;
        /**
         * Gets current value of property {@link #getHierarchyKey hierarchyKey}.
         *
         * Key of the hierarchy. See {@link sap.gantt.config.Hierarchy}
         *
         * Default value is `sap.gantt.config.DEFAULT_HIERARCHY_KEY`.
         */
        getHierarchyKey(): string;
        /**
         * Returns a metadata object for class sap.gantt.config.GanttChartLayout.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Sets a new value for property {@link #getActiveModeKey activeModeKey}.
         *
         * Key of the mode. See {@link sap.gantt.config.Mode}
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `sap.gantt.config.DEFAULT_MODE_KEY`.
         */
        setActiveModeKey(
          /**
           * New value for property `activeModeKey`
           */
          sActiveModeKey: string
        ): sap.gantt.config.GanttChartLayout;
        /**
         * Sets a new value for property {@link #getGanttChartSize ganttChartSize}.
         *
         * CSS Size of the Gantt chart. See {@link sap.ui.core.CSSSize}
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setGanttChartSize(
          /**
           * New value for property `ganttChartSize`
           */
          sGanttChartSize: sap.ui.core.CSSSize
        ): sap.gantt.config.GanttChartLayout;
        /**
         * Sets a new value for property {@link #getHierarchyKey hierarchyKey}.
         *
         * Key of the hierarchy. See {@link sap.gantt.config.Hierarchy}
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `sap.gantt.config.DEFAULT_HIERARCHY_KEY`.
         */
        setHierarchyKey(
          /**
           * New value for property `hierarchyKey`
           */
          sHierarchyKey: string
        ): sap.gantt.config.GanttChartLayout;
      }
      /**
       * Defines the hierarchy in the Gantt chart. The hierarchy is used for building the tree table in {@link
       * sap.gantt.GanttChartWithTable}.
       */
      class Hierarchy extends sap.ui.core.Element {
        /**
         * Creates and initializes a new hierarchy
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID of the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: HierarchyOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.config.Hierarchy with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getActiveModeKey activeModeKey}.
         *
         * Key of {@link sap.gantt.config.Mode}
         *
         * Default value is `sap.gantt.config.DEFAULT_MODE_KEY`.
         */
        getActiveModeKey(): string;
        /**
         * Gets current value of property {@link #getColumns columns}.
         *
         * Columns of the hierarchy. Array of {@link sap.gantt.config.HierarchyColumn}
         */
        getColumns(): object[];
        /**
         * @deprecated - This feature may cause severe performance issue! Since TreeTable doesn't have API to expand
         * specific multiple rows in one call, GanttChart expand the tree tale to level calculated from the configuration,
         * then loop all data in the model, collapse the node which does not full-fill the configuration one by
         * one. This feature is application specific and should be handled by application.
         *
         * Gets current value of property {@link #getExpandedLevels expandedLevels}.
         *
         * expandedLevels determines how the tree table is initially expanded. This property is a two-dimensional
         * array containing object types of row data. Only rows with data of the specified object types are expanded.
         * Each child array represents a specific level in the hierarchy with the first child array representing
         * the first level and so forth. For example, if this property is set to [["02", "03"], ["05"]], rows containing
         * data of object types 02 or 03 in the first level and rows containing data of object type 05 in the second
         * level are expanded.
         */
        getExpandedLevels(): string[][];
        /**
         * Gets current value of property {@link #getKey key}.
         *
         * Unique key of the hierarchy
         *
         * Default value is `sap.gantt.config.DEFAULT_HIERARCHY_KEY`.
         */
        getKey(): string;
        /**
         * Returns a metadata object for class sap.gantt.config.Hierarchy.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getText text}.
         *
         * Description of the hierarchy
         *
         * Default value is `Default Hierarchy`.
         */
        getText(): string;
        /**
         * Gets current value of property {@link #getToolbarSchemeKey toolbarSchemeKey}.
         *
         * Key of {@link sap.gantt.config.ToolbarScheme}
         *
         * Default value is `sap.gantt.config.DEFAULT_GANTTCHART_TOOLBAR_SCHEME_KEY`.
         */
        getToolbarSchemeKey(): string;
        /**
         * Sets a new value for property {@link #getActiveModeKey activeModeKey}.
         *
         * Key of {@link sap.gantt.config.Mode}
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `sap.gantt.config.DEFAULT_MODE_KEY`.
         */
        setActiveModeKey(
          /**
           * New value for property `activeModeKey`
           */
          sActiveModeKey: string
        ): sap.gantt.config.Hierarchy;
        /**
         * Sets a new value for property {@link #getColumns columns}.
         *
         * Columns of the hierarchy. Array of {@link sap.gantt.config.HierarchyColumn}
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setColumns(
          /**
           * New value for property `columns`
           */
          sColumns: object[]
        ): sap.gantt.config.Hierarchy;
        /**
         * @deprecated - This feature may cause severe performance issue! Since TreeTable doesn't have API to expand
         * specific multiple rows in one call, GanttChart expand the tree tale to level calculated from the configuration,
         * then loop all data in the model, collapse the node which does not full-fill the configuration one by
         * one. This feature is application specific and should be handled by application.
         *
         * Sets a new value for property {@link #getExpandedLevels expandedLevels}.
         *
         * expandedLevels determines how the tree table is initially expanded. This property is a two-dimensional
         * array containing object types of row data. Only rows with data of the specified object types are expanded.
         * Each child array represents a specific level in the hierarchy with the first child array representing
         * the first level and so forth. For example, if this property is set to [["02", "03"], ["05"]], rows containing
         * data of object types 02 or 03 in the first level and rows containing data of object type 05 in the second
         * level are expanded.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setExpandedLevels(
          /**
           * New value for property `expandedLevels`
           */
          sExpandedLevels: string[][]
        ): sap.gantt.config.Hierarchy;
        /**
         * Sets a new value for property {@link #getKey key}.
         *
         * Unique key of the hierarchy
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `sap.gantt.config.DEFAULT_HIERARCHY_KEY`.
         */
        setKey(
          /**
           * New value for property `key`
           */
          sKey: string
        ): sap.gantt.config.Hierarchy;
        /**
         * Sets a new value for property {@link #getText text}.
         *
         * Description of the hierarchy
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `Default Hierarchy`.
         */
        setText(
          /**
           * New value for property `text`
           */
          sText: string
        ): sap.gantt.config.Hierarchy;
        /**
         * Sets a new value for property {@link #getToolbarSchemeKey toolbarSchemeKey}.
         *
         * Key of {@link sap.gantt.config.ToolbarScheme}
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `sap.gantt.config.DEFAULT_GANTTCHART_TOOLBAR_SCHEME_KEY`.
         */
        setToolbarSchemeKey(
          /**
           * New value for property `toolbarSchemeKey`
           */
          sToolbarSchemeKey: string
        ): sap.gantt.config.Hierarchy;
      }
      /**
       * Defines the column attribute which is used in the hierarchy column
       */
      class HierarchyColumn extends sap.ui.core.Element {
        /**
         * Creates and initializes a new hierarchy column
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID of the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: HierarchyColumnOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.config.HierarchyColumn with name `sClassName` and enriches
         * it with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getAttribute attribute}.
         *
         * Attribute
         */
        getAttribute(): string;
        /**
         * Gets current value of property {@link #getAttributes attributes}.
         *
         * Attributes. Array of {@link sap.gantt.config.ColumnAttribute} optional. array of objects. new file columnAttribute
         * to describe object: object type, attribute
         *
         * Default value is `[]`.
         */
        getAttributes(): object[];
        /**
         * Gets current value of property {@link #getContentType contentType}.
         *
         * Content type of the column
         */
        getContentType(): string;
        /**
         * Gets current value of property {@link #getFilterAttribute filterAttribute}.
         *
         * Specifies the attribute by which the tree table filter items in the column
         */
        getFilterAttribute(): string;
        /**
         * Gets current value of property {@link #getKey key}.
         *
         * Unique key of the hierarchy column
         */
        getKey(): string;
        /**
         * Returns a metadata object for class sap.gantt.config.HierarchyColumn.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getSortAttribute sortAttribute}.
         *
         * Specifies the attribute by which the tree table sorts items in the column
         */
        getSortAttribute(): string;
        /**
         * Gets current value of property {@link #getTitle title}.
         *
         * Title is used as the title of the column header in the tree table
         */
        getTitle(): string;
        /**
         * Gets current value of property {@link #getWidth width}.
         *
         * Column Width
         */
        getWidth(): sap.ui.core.CSSSize;
        /**
         * Sets a new value for property {@link #getAttribute attribute}.
         *
         * Attribute
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setAttribute(
          /**
           * New value for property `attribute`
           */
          sAttribute: string
        ): sap.gantt.config.HierarchyColumn;
        /**
         * Sets a new value for property {@link #getAttributes attributes}.
         *
         * Attributes. Array of {@link sap.gantt.config.ColumnAttribute} optional. array of objects. new file columnAttribute
         * to describe object: object type, attribute
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `[]`.
         */
        setAttributes(
          /**
           * New value for property `attributes`
           */
          sAttributes: object[]
        ): sap.gantt.config.HierarchyColumn;
        /**
         * Sets a new value for property {@link #getContentType contentType}.
         *
         * Content type of the column
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setContentType(
          /**
           * New value for property `contentType`
           */
          sContentType: string
        ): sap.gantt.config.HierarchyColumn;
        /**
         * Sets a new value for property {@link #getFilterAttribute filterAttribute}.
         *
         * Specifies the attribute by which the tree table filter items in the column
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setFilterAttribute(
          /**
           * New value for property `filterAttribute`
           */
          sFilterAttribute: string
        ): sap.gantt.config.HierarchyColumn;
        /**
         * Sets a new value for property {@link #getKey key}.
         *
         * Unique key of the hierarchy column
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setKey(
          /**
           * New value for property `key`
           */
          sKey: string
        ): sap.gantt.config.HierarchyColumn;
        /**
         * Sets a new value for property {@link #getSortAttribute sortAttribute}.
         *
         * Specifies the attribute by which the tree table sorts items in the column
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setSortAttribute(
          /**
           * New value for property `sortAttribute`
           */
          sSortAttribute: string
        ): sap.gantt.config.HierarchyColumn;
        /**
         * Sets a new value for property {@link #getTitle title}.
         *
         * Title is used as the title of the column header in the tree table
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setTitle(
          /**
           * New value for property `title`
           */
          sTitle: string
        ): sap.gantt.config.HierarchyColumn;
        /**
         * Sets a new value for property {@link #getWidth width}.
         *
         * Column Width
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setWidth(
          /**
           * New value for property `width`
           */
          sWidth: sap.ui.core.CSSSize
        ): sap.gantt.config.HierarchyColumn;
      }
      /**
       * You can specify the Gantt chart layout-related toolbar items in the Gantt chart toolbar
       */
      class LayoutGroup extends sap.gantt.config.ToolbarGroup {
        /**
         * Creates and initializes a new layout group
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID of the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: LayoutGroupOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.config.LayoutGroup with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.config.ToolbarGroup.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * @deprecated (since 1.50)
         *
         * Gets current value of property {@link #getEnableRichStyle enableRichStyle}.
         *
         * Determines the button type. See {@link sap.m.ButtonType} true stands for {@link sap.m.ButtonType.Emphasized}
         * false stands for {@link sap.m.ButtonType.Default}
         *
         * Default value is `true`.
         */
        getEnableRichStyle(): boolean;
        /**
         * Returns a metadata object for class sap.gantt.config.LayoutGroup.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * @deprecated (since 1.50)
         *
         * Sets a new value for property {@link #getEnableRichStyle enableRichStyle}.
         *
         * Determines the button type. See {@link sap.m.ButtonType} true stands for {@link sap.m.ButtonType.Emphasized}
         * false stands for {@link sap.m.ButtonType.Default}
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setEnableRichStyle(
          /**
           * New value for property `enableRichStyle`
           */
          bEnableRichStyle: boolean
        ): sap.gantt.config.LayoutGroup;
      }
      /**
       * The locale control is used for converting the UTC date time to your local date time
       */
      class Locale extends sap.ui.core.Element {
        /**
         * Creates and initializes a new Locale
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID of the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: LocaleOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.config.Locale with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getDstHorizons dstHorizons}.
         *
         * Day-light saving time periods. Array of {@link sap.gantt.config.TimeHorizon} other locale info like langu,
         * dateFormat, timeFormat and numberFormat, please use UI5 standard configuration object.
         *
         * Default value is `[]`.
         */
        getDstHorizons(): object[];
        /**
         * Returns a metadata object for class sap.gantt.config.Locale.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getTimeZone timeZone}.
         *
         * User time zone
         *
         * Default value is `UTC`.
         */
        getTimeZone(): string;
        /**
         * Gets current value of property {@link #getUtcdiff utcdiff}.
         *
         * Gap value to the UTC time in the format hhmmss
         *
         * Default value is `000000`.
         */
        getUtcdiff(): string;
        /**
         * Gets current value of property {@link #getUtcsign utcsign}.
         *
         * Sign of the gap to the UTC time. Two valid values: "+" or "-".
         *
         * Default value is `+`.
         */
        getUtcsign(): string;
        /**
         * Sets a new value for property {@link #getDstHorizons dstHorizons}.
         *
         * Day-light saving time periods. Array of {@link sap.gantt.config.TimeHorizon} other locale info like langu,
         * dateFormat, timeFormat and numberFormat, please use UI5 standard configuration object.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `[]`.
         */
        setDstHorizons(
          /**
           * New value for property `dstHorizons`
           */
          sDstHorizons: object[]
        ): sap.gantt.config.Locale;
        /**
         * Sets a new value for property {@link #getTimeZone timeZone}.
         *
         * User time zone
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `UTC`.
         */
        setTimeZone(
          /**
           * New value for property `timeZone`
           */
          sTimeZone: string
        ): sap.gantt.config.Locale;
        /**
         * Sets a new value for property {@link #getUtcdiff utcdiff}.
         *
         * Gap value to the UTC time in the format hhmmss
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `000000`.
         */
        setUtcdiff(
          /**
           * New value for property `utcdiff`
           */
          sUtcdiff: string
        ): sap.gantt.config.Locale;
        /**
         * Sets a new value for property {@link #getUtcsign utcsign}.
         *
         * Sign of the gap to the UTC time. Two valid values: "+" or "-".
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `+`.
         */
        setUtcsign(
          /**
           * New value for property `utcsign`
           */
          sUtcsign: string
        ): sap.gantt.config.Locale;
      }
      /**
       * The Mode control specifies the mode which is used in GanttChart and Shape. Mode enables GanttChart to
       * show the same objects in different views.
       */
      class Mode extends sap.ui.core.Element {
        /**
         * Creates and initializes a new mode
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID of the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: ModeOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.config.Mode with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getActiveIcon activeIcon}.
         *
         * URL of the active icon of the mode
         */
        getActiveIcon(): sap.ui.core.URI;
        /**
         * Gets current value of property {@link #getIcon icon}.
         *
         * URL of the icon of the mode
         */
        getIcon(): sap.ui.core.URI;
        /**
         * Gets current value of property {@link #getKey key}.
         *
         * Unique key of the mode
         */
        getKey(): string;
        /**
         * Returns a metadata object for class sap.gantt.config.Mode.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getText text}.
         *
         * Description of the mode
         */
        getText(): string;
        /**
         * Sets a new value for property {@link #getActiveIcon activeIcon}.
         *
         * URL of the active icon of the mode
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setActiveIcon(
          /**
           * New value for property `activeIcon`
           */
          sActiveIcon: sap.ui.core.URI
        ): sap.gantt.config.Mode;
        /**
         * Sets a new value for property {@link #getIcon icon}.
         *
         * URL of the icon of the mode
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setIcon(
          /**
           * New value for property `icon`
           */
          sIcon: sap.ui.core.URI
        ): sap.gantt.config.Mode;
        /**
         * Sets a new value for property {@link #getKey key}.
         *
         * Unique key of the mode
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setKey(
          /**
           * New value for property `key`
           */
          sKey: string
        ): sap.gantt.config.Mode;
        /**
         * Sets a new value for property {@link #getText text}.
         *
         * Description of the mode
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setText(
          /**
           * New value for property `text`
           */
          sText: string
        ): sap.gantt.config.Mode;
      }
      /**
       * The ModeGroup control specifies the mode-related buttons in the Gantt chart toolbar
       */
      class ModeGroup extends sap.gantt.config.ToolbarGroup {
        /**
         * Creates and initializes a new mode group
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID of the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: ModeGroupOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.config.ModeGroup with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.config.ToolbarGroup.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.gantt.config.ModeGroup.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getModeKeys modeKeys}.
         *
         * Array of key of {@link sap.gantt.config.Mode}
         *
         * Default value is `[]`.
         */
        getModeKeys(): string[];
        /**
         * Sets a new value for property {@link #getModeKeys modeKeys}.
         *
         * Array of key of {@link sap.gantt.config.Mode}
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `[]`.
         */
        setModeKeys(
          /**
           * New value for property `modeKeys`
           */
          sModeKeys: string[]
        ): sap.gantt.config.ModeGroup;
      }
      /**
       * Define the ObjectType which is used in GanttChart
       */
      class ObjectType extends sap.ui.core.Element {
        /**
         * Creates and initializes a new object type
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID of the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: ObjectTypeOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.config.ObjectType with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getDescription description}.
         *
         * Description of the object type
         */
        getDescription(): string;
        /**
         * Gets current value of property {@link #getExpandedChartSchemeKeys expandedChartSchemeKeys}.
         *
         * Specifies the expanded chart scheme in which the the object type can be shown Array of keys of {@link
         * sap.gantt.config.ChartScheme}
         *
         * Default value is `[]`.
         */
        getExpandedChartSchemeKeys(): string[];
        /**
         * Gets current value of property {@link #getKey key}.
         *
         * Unique Key of the object type
         */
        getKey(): string;
        /**
         * Gets current value of property {@link #getMainChartSchemeKey mainChartSchemeKey}.
         *
         * Specifies the chart scheme in which the the object type can be shown Key of {@link sap.gantt.config.ChartScheme}
         *
         * Default value is `sap.gantt.config.DEFAULT_MAIN_CHART_SCHEME_KEY`.
         */
        getMainChartSchemeKey(): string;
        /**
         * Returns a metadata object for class sap.gantt.config.ObjectType.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Sets a new value for property {@link #getDescription description}.
         *
         * Description of the object type
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setDescription(
          /**
           * New value for property `description`
           */
          sDescription: string
        ): sap.gantt.config.ObjectType;
        /**
         * Sets a new value for property {@link #getExpandedChartSchemeKeys expandedChartSchemeKeys}.
         *
         * Specifies the expanded chart scheme in which the the object type can be shown Array of keys of {@link
         * sap.gantt.config.ChartScheme}
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `[]`.
         */
        setExpandedChartSchemeKeys(
          /**
           * New value for property `expandedChartSchemeKeys`
           */
          sExpandedChartSchemeKeys: string[]
        ): sap.gantt.config.ObjectType;
        /**
         * Sets a new value for property {@link #getKey key}.
         *
         * Unique Key of the object type
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setKey(
          /**
           * New value for property `key`
           */
          sKey: string
        ): sap.gantt.config.ObjectType;
        /**
         * Sets a new value for property {@link #getMainChartSchemeKey mainChartSchemeKey}.
         *
         * Specifies the chart scheme in which the the object type can be shown Key of {@link sap.gantt.config.ChartScheme}
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `sap.gantt.config.DEFAULT_MAIN_CHART_SCHEME_KEY`.
         */
        setMainChartSchemeKey(
          /**
           * New value for property `mainChartSchemeKey`
           */
          sMainChartSchemeKey: string
        ): sap.gantt.config.ObjectType;
      }
      /**
       * The SettingGroup control allows you to specify the number of setting items to display in the Setting
       * window.
       */
      class SettingGroup extends sap.gantt.config.ToolbarGroup {
        /**
         * Creates and initializes a new setting group.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID of the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: SettingGroupOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.config.SettingGroup with name `sClassName` and enriches it
         * with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.config.ToolbarGroup.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getItems items}.
         *
         * Association to the setting item. See {@link sap.gantt.config.SettingItem} We recommend that you set the
         * type of this argument to `sap.gantt.config.SettingItem[]`. Otherwise some properties you set may not
         * function properly.
         *
         * Default value is `sap.gantt.config.DEFAULT_TOOLBAR_SETTING_ITEMS`.
         */
        getItems(): object[];
        /**
         * Returns a metadata object for class sap.gantt.config.SettingGroup.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Sets a new value for property {@link #getItems items}.
         *
         * Association to the setting item. See {@link sap.gantt.config.SettingItem} We recommend that you set the
         * type of this argument to `sap.gantt.config.SettingItem[]`. Otherwise some properties you set may not
         * function properly.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `sap.gantt.config.DEFAULT_TOOLBAR_SETTING_ITEMS`.
         */
        setItems(
          /**
           * New value for property `items`
           */
          sItems: object[]
        ): sap.gantt.config.SettingGroup;
      }
      /**
       * The SettingItem control allows you to create a setting item in the toolbar, which is presented as a checkbox
       * with a label.
       */
      class SettingItem extends sap.ui.core.Element {
        /**
         * Creates and initializes a new setting item.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID of the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: SettingItemOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.config.SettingItem with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getChecked checked}.
         *
         * Indicates whether the checkbox is selected or not
         *
         * Default value is `false`.
         */
        getChecked(): boolean;
        /**
         * Gets current value of property {@link #getDisplayText displayText}.
         *
         * Aria label of the checkbox
         */
        getDisplayText(): string;
        /**
         * Gets current value of property {@link #getKey key}.
         *
         * Identifier of an event when the checkbox is toggled
         */
        getKey(): string;
        /**
         * Returns a metadata object for class sap.gantt.config.SettingItem.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Sets a new value for property {@link #getChecked checked}.
         *
         * Indicates whether the checkbox is selected or not
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setChecked(
          /**
           * New value for property `checked`
           */
          bChecked: boolean
        ): sap.gantt.config.SettingItem;
        /**
         * Sets a new value for property {@link #getDisplayText displayText}.
         *
         * Aria label of the checkbox
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setDisplayText(
          /**
           * New value for property `displayText`
           */
          sDisplayText: string
        ): sap.gantt.config.SettingItem;
        /**
         * Sets a new value for property {@link #getKey key}.
         *
         * Identifier of an event when the checkbox is toggled
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setKey(
          /**
           * New value for property `key`
           */
          sKey: string
        ): sap.gantt.config.SettingItem;
      }
      /**
       * Configuration object for Shape.
       *
       *  This configuration specifies the Shape class used to represent specific data and how the Shape class
       * is constructed. Some properties of Shape can be directly configured by setting property `shapeProperties`.
       *
       * A Shape class may come from the shape library provided in namespace `sap.gantt.shape` or from any extended
       * shape you've created. Shape classes are instantiated according to the structure described in this configuration
       * class inside `sap.gantt.Gantt`. The aggregation structure is described by properties `groupAggregation`,
       * `clippathAggregation`, and `selectedClassName`.
       *
       * The root shape is called 'top shape'. Some properties are only top shape relevant such as `key`, `level`,
       * and `selectedClassName`.
       */
      class Shape extends sap.ui.core.Element {
        /**
         * Creates and initializes a shape configuration.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID of the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: ShapeOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.config.Shape with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getClippathAggregation clippathAggregation}.
         *
         * Aggregation path classes for sap.gantt.shape.Clippath class. This aggregation is only valid for shape
         * classes with tag='clippath'. We recommend that you set the type of this argument to `sap.gantt.config.Shape[]`.
         * Otherwise some properties you set may not function properly.
         */
        getClippathAggregation(): object[];
        /**
         * Gets current value of property {@link #getCountInBirdEye countInBirdEye}.
         *
         * Specifies whether or not should the shape be considered into bird eye range. we suggest to set this property
         * to true only for shapes that really need to be considered into bird eye range.
         *
         * Default value is `false`.
         */
        getCountInBirdEye(): boolean;
        /**
         * Gets current value of property {@link #getGroupAggregation groupAggregation}.
         *
         * Aggregation shapes for sap.gantt.shape.Group class. This aggregation is only valid for shape classes
         * with tag='g'. We recommend that you set the type of this argument to `sap.gantt.config.Shape[]`. Otherwise
         * some properties you set may not function properly.
         */
        getGroupAggregation(): object[];
        /**
         * Gets current value of property {@link #getKey key}.
         *
         * Primary key of the shape configuration. This property can be referenced from other configuration object,
         * such as `sap.gantt.config.ChartScheme`. This property is only relevant to top Shape configuration.
         */
        getKey(): string;
        /**
         * Gets current value of property {@link #getLevel level}.
         *
         * Level of shapes. Shapes closer to the top shape have a smaller value in level. This property is only
         * relevant to top shape configuration (non aggregated shape configuration).
         */
        getLevel(): string;
        /**
         * Returns a metadata object for class sap.gantt.config.Shape.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getModeKeys modeKeys}.
         *
         * Specifies the key of modes in which the shape is drawn. If you leave this property empty, the shape is
         * drawn in all modes.
         *
         * Default value is `[]`.
         */
        getModeKeys(): string[];
        /**
         * Gets current value of property {@link #getResizeShadowClassName resizeShadowClassName}.
         *
         * Aggregation class for drawing shadow when resizing this shape. If nothing is assigned to this property,
         * `sap.gantt.Gantt` instantiates the default shadow shape class.
         */
        getResizeShadowClassName(): string;
        /**
         * Gets current value of property {@link #getSelectedClassName selectedClassName}.
         *
         * Aggregation class for drawing selection of this shape. If nothing is assigned to this property, `sap.gantt.Gantt`
         * instantiates the default selected shape class.
         */
        getSelectedClassName(): string;
        /**
         * Gets current value of property {@link #getShapeClassName shapeClassName}.
         *
         * Specifies the shape class to be used for data representation. Both shapes from `sap.gantt.shape` and
         * extended shapes can be used here.
         */
        getShapeClassName(): string;
        /**
         * Gets current value of property {@link #getShapeDataName shapeDataName}.
         *
         * Specifies the name of the data name to be represented. This is for the top shape only.
         */
        getShapeDataName(): string;
        /**
         * Gets current value of property {@link #getShapeProperties shapeProperties}.
         *
         * Pre-configured values for Shape. The values specified in this object have a higher priority than values
         * coded in the Shape class.
         *
         * Default value is `sap.gantt.config.DEFAULT_EMPTY_OBJECT`.
         */
        getShapeProperties(): object;
        /**
         * Get a pre-configured property from `shapeProperties`.
         *
         * This method together with method `hasShapeProperty` is frequently used in `sap.gantt.shape` classes
         * to make sure the principle of 'configuration first' is applied. .
         */
        getShapeProperty(
          /**
           * Name of the shape property.
           */
          sPropertyName: string
        ): string;
        /**
         * Gets current value of property {@link #getSwitchOfCheckBox switchOfCheckBox}.
         *
         * Switch of shape's checkbox value in list legend, its value can be "noShow", "checked" and "unchecked".
         *
         * Default value is `noShow`.
         */
        getSwitchOfCheckBox(): string;
        /**
         * Checks if a property is pre-configured in `shapeProperties`.
         *
         * This method together with method `getShapeProperty()` is frequently used in `sap.gantt.shape` classes
         * to make sure the principle of 'configuration first' is applied. .
         */
        hasShapeProperty(
          /**
           * Name of the shape property.
           */
          sPropertyName: string
        ): boolean;
        /**
         * Sets a new value for property {@link #getClippathAggregation clippathAggregation}.
         *
         * Aggregation path classes for sap.gantt.shape.Clippath class. This aggregation is only valid for shape
         * classes with tag='clippath'. We recommend that you set the type of this argument to `sap.gantt.config.Shape[]`.
         * Otherwise some properties you set may not function properly.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setClippathAggregation(
          /**
           * New value for property `clippathAggregation`
           */
          sClippathAggregation: object[]
        ): sap.gantt.config.Shape;
        /**
         * Sets a new value for property {@link #getCountInBirdEye countInBirdEye}.
         *
         * Specifies whether or not should the shape be considered into bird eye range. we suggest to set this property
         * to true only for shapes that really need to be considered into bird eye range.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setCountInBirdEye(
          /**
           * New value for property `countInBirdEye`
           */
          bCountInBirdEye: boolean
        ): sap.gantt.config.Shape;
        /**
         * Sets a new value for property {@link #getGroupAggregation groupAggregation}.
         *
         * Aggregation shapes for sap.gantt.shape.Group class. This aggregation is only valid for shape classes
         * with tag='g'. We recommend that you set the type of this argument to `sap.gantt.config.Shape[]`. Otherwise
         * some properties you set may not function properly.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setGroupAggregation(
          /**
           * New value for property `groupAggregation`
           */
          sGroupAggregation: object[]
        ): sap.gantt.config.Shape;
        /**
         * Sets a new value for property {@link #getKey key}.
         *
         * Primary key of the shape configuration. This property can be referenced from other configuration object,
         * such as `sap.gantt.config.ChartScheme`. This property is only relevant to top Shape configuration.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setKey(
          /**
           * New value for property `key`
           */
          sKey: string
        ): sap.gantt.config.Shape;
        /**
         * Sets a new value for property {@link #getLevel level}.
         *
         * Level of shapes. Shapes closer to the top shape have a smaller value in level. This property is only
         * relevant to top shape configuration (non aggregated shape configuration).
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setLevel(
          /**
           * New value for property `level`
           */
          sLevel: string
        ): sap.gantt.config.Shape;
        /**
         * Sets a new value for property {@link #getModeKeys modeKeys}.
         *
         * Specifies the key of modes in which the shape is drawn. If you leave this property empty, the shape is
         * drawn in all modes.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `[]`.
         */
        setModeKeys(
          /**
           * New value for property `modeKeys`
           */
          sModeKeys: string[]
        ): sap.gantt.config.Shape;
        /**
         * Sets a new value for property {@link #getResizeShadowClassName resizeShadowClassName}.
         *
         * Aggregation class for drawing shadow when resizing this shape. If nothing is assigned to this property,
         * `sap.gantt.Gantt` instantiates the default shadow shape class.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setResizeShadowClassName(
          /**
           * New value for property `resizeShadowClassName`
           */
          sResizeShadowClassName: string
        ): sap.gantt.config.Shape;
        /**
         * Sets a new value for property {@link #getSelectedClassName selectedClassName}.
         *
         * Aggregation class for drawing selection of this shape. If nothing is assigned to this property, `sap.gantt.Gantt`
         * instantiates the default selected shape class.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setSelectedClassName(
          /**
           * New value for property `selectedClassName`
           */
          sSelectedClassName: string
        ): sap.gantt.config.Shape;
        /**
         * Sets a new value for property {@link #getShapeClassName shapeClassName}.
         *
         * Specifies the shape class to be used for data representation. Both shapes from `sap.gantt.shape` and
         * extended shapes can be used here.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setShapeClassName(
          /**
           * New value for property `shapeClassName`
           */
          sShapeClassName: string
        ): sap.gantt.config.Shape;
        /**
         * Sets a new value for property {@link #getShapeDataName shapeDataName}.
         *
         * Specifies the name of the data name to be represented. This is for the top shape only.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setShapeDataName(
          /**
           * New value for property `shapeDataName`
           */
          sShapeDataName: string
        ): sap.gantt.config.Shape;
        /**
         * Sets a new value for property {@link #getShapeProperties shapeProperties}.
         *
         * Pre-configured values for Shape. The values specified in this object have a higher priority than values
         * coded in the Shape class.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `sap.gantt.config.DEFAULT_EMPTY_OBJECT`.
         */
        setShapeProperties(
          /**
           * New value for property `shapeProperties`
           */
          oShapeProperties: object
        ): sap.gantt.config.Shape;
        /**
         * Sets a new value for property {@link #getSwitchOfCheckBox switchOfCheckBox}.
         *
         * Switch of shape's checkbox value in list legend, its value can be "noShow", "checked" and "unchecked".
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `noShow`.
         */
        setSwitchOfCheckBox(
          /**
           * New value for property `switchOfCheckBox`
           */
          sSwitchOfCheckBox: string
        ): sap.gantt.config.Shape;
      }
      /**
       * @deprecated (since 1.44) - replaced by sap.gantt.axistime.AxisTimeStrategy
       *
       * Defines the time axis of a Gantt chart
       */
      class TimeAxis extends sap.ui.core.Element {
        /**
         * Creates and initializes a new time axis
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID of the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: TimeAxisOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.config.TimeAxis with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getCoarsestGranularity coarsestGranularity}.
         *
         * Granularity when the GanttChart is zoomed out to the minimum
         *
         * Default value is `1month`.
         */
        getCoarsestGranularity(): string;
        /**
         * Gets current value of property {@link #getFinestGranularity finestGranularity}.
         *
         * Granularity when the Gantt chart is zoomed in to the maximum
         *
         * Default value is `5min`.
         */
        getFinestGranularity(): string;
        /**
         * Gets current value of property {@link #getGranularity granularity}.
         *
         * Initial granularity of the time axis
         *
         * Default value is `4day`.
         */
        getGranularity(): string;
        /**
         * Gets current value of property {@link #getInitHorizon initHorizon}.
         *
         * Time horizon which is displayed after the Gantt chart is initialized We recommend that you set the type
         * of this argument to `sap.gantt.config.TimeHorizon`. Otherwise some properties you set may not function
         * properly.
         *
         * Default value is `sap.gantt.config.DEFAULT_INIT_HORIZON`.
         */
        getInitHorizon(): object;
        /**
         * Returns a metadata object for class sap.gantt.config.TimeAxis.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getPlanHorizon planHorizon}.
         *
         * Whole time horizon of the Gantt chart We recommend that you set the type of this argument to `sap.gantt.config.TimeHorizon`.
         * Otherwise some properties you set may not function properly.
         *
         * Default value is `sap.gantt.config.DEFAULT_PLAN_HORIZON`.
         */
        getPlanHorizon(): object;
        /**
         * Gets current value of property {@link #getRate rate}.
         *
         * Zoom rate of the Gantt chart
         *
         * Default value is `1`.
         */
        getRate(): number;
        /**
         * Gets current value of property {@link #getZoomStrategy zoomStrategy}.
         *
         * Zoom strategy of the Gantt chart
         *
         * {@see sap.gantt.axistime.AxisTimeStrategy}
         *
         * Default value is `sap.gantt.config.DEFAULT_TIME_ZOOM_STRATEGY`.
         */
        getZoomStrategy(): object;
        /**
         * Sets a new value for property {@link #getCoarsestGranularity coarsestGranularity}.
         *
         * Granularity when the GanttChart is zoomed out to the minimum
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `1month`.
         */
        setCoarsestGranularity(
          /**
           * New value for property `coarsestGranularity`
           */
          sCoarsestGranularity: string
        ): sap.gantt.config.TimeAxis;
        /**
         * Sets a new value for property {@link #getFinestGranularity finestGranularity}.
         *
         * Granularity when the Gantt chart is zoomed in to the maximum
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `5min`.
         */
        setFinestGranularity(
          /**
           * New value for property `finestGranularity`
           */
          sFinestGranularity: string
        ): sap.gantt.config.TimeAxis;
        /**
         * Sets a new value for property {@link #getGranularity granularity}.
         *
         * Initial granularity of the time axis
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `4day`.
         */
        setGranularity(
          /**
           * New value for property `granularity`
           */
          sGranularity: string
        ): sap.gantt.config.TimeAxis;
        /**
         * Sets a new value for property {@link #getInitHorizon initHorizon}.
         *
         * Time horizon which is displayed after the Gantt chart is initialized We recommend that you set the type
         * of this argument to `sap.gantt.config.TimeHorizon`. Otherwise some properties you set may not function
         * properly.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `sap.gantt.config.DEFAULT_INIT_HORIZON`.
         */
        setInitHorizon(
          /**
           * New value for property `initHorizon`
           */
          oInitHorizon: object
        ): sap.gantt.config.TimeAxis;
        /**
         * Sets a new value for property {@link #getPlanHorizon planHorizon}.
         *
         * Whole time horizon of the Gantt chart We recommend that you set the type of this argument to `sap.gantt.config.TimeHorizon`.
         * Otherwise some properties you set may not function properly.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `sap.gantt.config.DEFAULT_PLAN_HORIZON`.
         */
        setPlanHorizon(
          /**
           * New value for property `planHorizon`
           */
          oPlanHorizon: object
        ): sap.gantt.config.TimeAxis;
        /**
         * Sets a new value for property {@link #getRate rate}.
         *
         * Zoom rate of the Gantt chart
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `1`.
         */
        setRate(
          /**
           * New value for property `rate`
           */
          fRate: number
        ): sap.gantt.config.TimeAxis;
        /**
         * Sets a new value for property {@link #getZoomStrategy zoomStrategy}.
         *
         * Zoom strategy of the Gantt chart
         *
         * {@see sap.gantt.axistime.AxisTimeStrategy}
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `sap.gantt.config.DEFAULT_TIME_ZOOM_STRATEGY`.
         */
        setZoomStrategy(
          /**
           * New value for property `zoomStrategy`
           */
          oZoomStrategy: object
        ): sap.gantt.config.TimeAxis;
      }
      /**
       * Defines the Time horizon
       */
      class TimeHorizon extends sap.ui.core.Element {
        /**
         * Creates and initializes a new Time horizon
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID of the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * =Initial settings for the new control
           */
          mSettings?: TimeHorizonOpts
        );

        /**
         * Compares two time horizons.
         */
        equals(
          /**
           * Time horizon to compare.
           */
          oTimeHorizon: undefined
        ): boolean;
        /**
         * Creates a new subclass of class sap.gantt.config.TimeHorizon with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getEndTime endTime}.
         *
         * End time of the time horizon in this format: YYYYMMDDHHMMSS. If the type of endTime is object, the value
         * is converted to string.
         *
         * Default value is `undefined`.
         */
        getEndTime(): string;
        /**
         * Returns a metadata object for class sap.gantt.config.TimeHorizon.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getStartTime startTime}.
         *
         * Start time of the time horizon in this format: YYYYMMDDHHMMSS. If the type of startTime is object, the
         * value is converted to string.
         *
         * Default value is `undefined`.
         */
        getStartTime(): string;
        /**
         * Sets a new value for property {@link #getEndTime endTime}.
         *
         * End time of the time horizon in this format: YYYYMMDDHHMMSS. If the type of endTime is object, the value
         * is converted to string.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `undefined`.
         */
        setEndTime(
          /**
           * New value for property `endTime`
           */
          sEndTime: string
        ): sap.gantt.config.TimeHorizon;
        /**
         * Sets a new value for property {@link #getStartTime startTime}.
         *
         * Start time of the time horizon in this format: YYYYMMDDHHMMSS. If the type of startTime is object, the
         * value is converted to string.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `undefined`.
         */
        setStartTime(
          /**
           * New value for property `startTime`
           */
          sStartTime: string
        ): sap.gantt.config.TimeHorizon;
      }
      /**
       * You can define time zooming related toolbar items in the Gantt chart toolbar.
       */
      class TimeZoomGroup extends sap.gantt.config.ToolbarGroup {
        /**
         * Creates and initializes a new time zoom group
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID of the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: TimeZoomGroupOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.config.TimeZoomGroup with name `sClassName` and enriches it
         * with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.config.ToolbarGroup.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getInfoOfSelectItems infoOfSelectItems}.
         *
         * Array of plain objects which has "key" and "text" properties, or array of sap.ui.core.Item used to configure
         * the items in the Select control when the zoom control type is sap.gantt.config.ZoomControlType.Select.
         */
        getInfoOfSelectItems(): object[];
        /**
         * Returns a metadata object for class sap.gantt.config.TimeZoomGroup.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * @deprecated (since 1.44) - replaced by zoomControlType
         *
         * Gets current value of property {@link #getShowZoomButtons showZoomButtons}.
         *
         * Enables zoom in and zoom out buttons for the time zooming function.
         *
         * Default value is `true`.
         */
        getShowZoomButtons(): boolean;
        /**
         * @deprecated (since 1.44) - replaced by zoomControlType
         *
         * Gets current value of property {@link #getShowZoomSlider showZoomSlider}.
         *
         * Enables the Slider control for the time zooming function.
         *
         * Default value is `true`.
         */
        getShowZoomSlider(): boolean;
        /**
         * Gets current value of property {@link #getStepCountOfSlider stepCountOfSlider}.
         *
         * Sets the step when the zoom control type is sap.gantt.config.ZoomControlType.SliderWithButtons or sap.gantt.config.ZoomControlType.SliderOnly.
         *
         * Default value is `10`.
         */
        getStepCountOfSlider(): number;
        /**
         * Gets current value of property {@link #getZoomControlType zoomControlType}.
         *
         * Defines the control type to set the zoom rate.
         *
         * Default value is `SliderWithButtons`.
         */
        getZoomControlType(): sap.gantt.config.ZoomControlType;
        /**
         * Sets a new value for property {@link #getInfoOfSelectItems infoOfSelectItems}.
         *
         * Array of plain objects which has "key" and "text" properties, or array of sap.ui.core.Item used to configure
         * the items in the Select control when the zoom control type is sap.gantt.config.ZoomControlType.Select.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setInfoOfSelectItems(
          /**
           * New value for property `infoOfSelectItems`
           */
          sInfoOfSelectItems: object[]
        ): sap.gantt.config.TimeZoomGroup;
        /**
         * @deprecated (since 1.44) - replaced by zoomControlType
         *
         * Sets a new value for property {@link #getShowZoomButtons showZoomButtons}.
         *
         * Enables zoom in and zoom out buttons for the time zooming function.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setShowZoomButtons(
          /**
           * New value for property `showZoomButtons`
           */
          bShowZoomButtons: boolean
        ): sap.gantt.config.TimeZoomGroup;
        /**
         * @deprecated (since 1.44) - replaced by zoomControlType
         *
         * Sets a new value for property {@link #getShowZoomSlider showZoomSlider}.
         *
         * Enables the Slider control for the time zooming function.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setShowZoomSlider(
          /**
           * New value for property `showZoomSlider`
           */
          bShowZoomSlider: boolean
        ): sap.gantt.config.TimeZoomGroup;
        /**
         * Sets a new value for property {@link #getStepCountOfSlider stepCountOfSlider}.
         *
         * Sets the step when the zoom control type is sap.gantt.config.ZoomControlType.SliderWithButtons or sap.gantt.config.ZoomControlType.SliderOnly.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `10`.
         */
        setStepCountOfSlider(
          /**
           * New value for property `stepCountOfSlider`
           */
          iStepCountOfSlider: number
        ): sap.gantt.config.TimeZoomGroup;
        /**
         * Sets a new value for property {@link #getZoomControlType zoomControlType}.
         *
         * Defines the control type to set the zoom rate.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `SliderWithButtons`.
         */
        setZoomControlType(
          /**
           * New value for property `zoomControlType`
           */
          sZoomControlType: sap.gantt.config.ZoomControlType
        ): sap.gantt.config.TimeZoomGroup;
      }
      /**
       * Defines the toolbar group. Toolbar groups enables you to categorize related toolbar items. For example,
       * you can put all settings-related toolbar items in the Setting group.
       */
      class ToolbarGroup extends sap.ui.core.Element {
        /**
         * Creates and initializes a new toolbar group
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID of the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: ToolbarGroupOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.config.ToolbarGroup with name `sClassName` and enriches it
         * with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getButtonType buttonType}.
         *
         * Type of a button in the toolbar group if it's a button
         *
         * Default value is `Default`.
         */
        getButtonType(): sap.m.ButtonType;
        /**
         * Returns a metadata object for class sap.gantt.config.ToolbarGroup.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getOverflowPriority overflowPriority}.
         *
         * Overflow priority. See {@link sap.m.OverflowToolbarPriority}
         *
         * Default value is `Low`.
         */
        getOverflowPriority(): sap.m.OverflowToolbarPriority;
        /**
         * Gets current value of property {@link #getPosition position}.
         *
         * Specifies the position of the toolbar group. Note that all toolbar groups must be put into the Gantt
         * chart toolbar.
         */
        getPosition(): string;
        /**
         * Sets a new value for property {@link #getButtonType buttonType}.
         *
         * Type of a button in the toolbar group if it's a button
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `Default`.
         */
        setButtonType(
          /**
           * New value for property `buttonType`
           */
          sButtonType: sap.m.ButtonType
        ): sap.gantt.config.ToolbarGroup;
        /**
         * Sets a new value for property {@link #getOverflowPriority overflowPriority}.
         *
         * Overflow priority. See {@link sap.m.OverflowToolbarPriority}
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `Low`.
         */
        setOverflowPriority(
          /**
           * New value for property `overflowPriority`
           */
          sOverflowPriority: sap.m.OverflowToolbarPriority
        ): sap.gantt.config.ToolbarGroup;
        /**
         * Sets a new value for property {@link #getPosition position}.
         *
         * Specifies the position of the toolbar group. Note that all toolbar groups must be put into the Gantt
         * chart toolbar.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setPosition(
          /**
           * New value for property `position`
           */
          sPosition: string
        ): sap.gantt.config.ToolbarGroup;
      }
      /**
       * Defines the Toolbar scheme
       */
      class ToolbarScheme extends sap.ui.core.Element {
        /**
         * Creates and initializes a new toolbar scheme
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID of the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: ToolbarSchemeOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.config.ToolbarScheme with name `sClassName` and enriches it
         * with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getBirdEye birdEye}.
         *
         * Toolbar group for bird eye We recommend that you set the type of this argument to `sap.gantt.config.BirdEyeGroup`.
         * Otherwise some properties you set may not function properly.
         */
        getBirdEye(): object;
        /**
         * Gets current value of property {@link #getCustomToolbarItems customToolbarItems}.
         *
         * Toolbar group for custom toolbar items We recommend that you set the type of this argument to `sap.gantt.config.ToolbarGroup`.
         * Otherwise some properties you set may not function properly.
         */
        getCustomToolbarItems(): object;
        /**
         * Gets current value of property {@link #getExpandChart expandChart}.
         *
         * Toolbar group for expanding a chart We recommend that you set the type of this argument to `sap.gantt.config.ExpandChartGroup`.
         * Otherwise some properties you set may not function properly.
         */
        getExpandChart(): object;
        /**
         * Gets current value of property {@link #getExpandTree expandTree}.
         *
         * Toolbar group for expanding nodes of a tree table We recommend that you set the type of this argument
         * to `sap.gantt.config.ToolbarGroup`. Otherwise some properties you set may not function properly.
         */
        getExpandTree(): object;
        /**
         * Gets current value of property {@link #getKey key}.
         *
         * Unique key of the toolbar scheme
         */
        getKey(): string;
        /**
         * Gets current value of property {@link #getLayout layout}.
         *
         * Toolbar group for the Gantt chart layout We recommend that you set the type of this argument to `sap.gantt.config.LayoutGroup`.
         * Otherwise some properties you set may not function properly.
         */
        getLayout(): object;
        /**
         * Gets current value of property {@link #getLegend legend}.
         *
         * Toolbar group for legend We recommend that you set the type of this argument to `sap.gantt.config.ToolbarGroup`.
         * Otherwise some properties you set may not function properly.
         */
        getLegend(): object;
        /**
         * Returns a metadata object for class sap.gantt.config.ToolbarScheme.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getMode mode}.
         *
         * See {@link sap.gantt.config.ModeGroup} We recommend that you set the type of this argument to `sap.gantt.config.ModeGroup`.
         * Otherwise some properties you set may not function properly.
         */
        getMode(): object;
        /**
         * Gets current value of property {@link #getSettings settings}.
         *
         * See {@link sap.gantt.config.SettingGroup} We recommend that you set the type of this argument to `sap.gantt.config.SettingGroup`.
         * Otherwise some properties you set may not function properly.
         */
        getSettings(): object;
        /**
         * Gets current value of property {@link #getSourceSelect sourceSelect}.
         *
         * Toolbar group for selecting a source We recommend that you set the type of this argument to `sap.gantt.config.ToolbarGroup`.
         * Otherwise some properties you set may not function properly.
         */
        getSourceSelect(): object;
        /**
         * Gets current value of property {@link #getTimeZoom timeZoom}.
         *
         * Toolbar group for the time zoom We recommend that you set the type of this argument to `sap.gantt.config.ToolbarGroup`.
         * Otherwise some properties you set may not function properly.
         */
        getTimeZoom(): object;
        /**
         * Gets current value of property {@link #getToolbarDesign toolbarDesign}.
         *
         * Toolbar design. See {@link sap.m.ToolbarDesign}
         *
         * Default value is `sap.m.ToolbarDesign.Auto`.
         */
        getToolbarDesign(): string;
        /**
         * Sets a new value for property {@link #getBirdEye birdEye}.
         *
         * Toolbar group for bird eye We recommend that you set the type of this argument to `sap.gantt.config.BirdEyeGroup`.
         * Otherwise some properties you set may not function properly.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setBirdEye(
          /**
           * New value for property `birdEye`
           */
          oBirdEye: object
        ): sap.gantt.config.ToolbarScheme;
        /**
         * Sets a new value for property {@link #getCustomToolbarItems customToolbarItems}.
         *
         * Toolbar group for custom toolbar items We recommend that you set the type of this argument to `sap.gantt.config.ToolbarGroup`.
         * Otherwise some properties you set may not function properly.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setCustomToolbarItems(
          /**
           * New value for property `customToolbarItems`
           */
          oCustomToolbarItems: object
        ): sap.gantt.config.ToolbarScheme;
        /**
         * Sets a new value for property {@link #getExpandChart expandChart}.
         *
         * Toolbar group for expanding a chart We recommend that you set the type of this argument to `sap.gantt.config.ExpandChartGroup`.
         * Otherwise some properties you set may not function properly.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setExpandChart(
          /**
           * New value for property `expandChart`
           */
          oExpandChart: object
        ): sap.gantt.config.ToolbarScheme;
        /**
         * Sets a new value for property {@link #getExpandTree expandTree}.
         *
         * Toolbar group for expanding nodes of a tree table We recommend that you set the type of this argument
         * to `sap.gantt.config.ToolbarGroup`. Otherwise some properties you set may not function properly.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setExpandTree(
          /**
           * New value for property `expandTree`
           */
          oExpandTree: object
        ): sap.gantt.config.ToolbarScheme;
        /**
         * Sets a new value for property {@link #getKey key}.
         *
         * Unique key of the toolbar scheme
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setKey(
          /**
           * New value for property `key`
           */
          sKey: string
        ): sap.gantt.config.ToolbarScheme;
        /**
         * Sets a new value for property {@link #getLayout layout}.
         *
         * Toolbar group for the Gantt chart layout We recommend that you set the type of this argument to `sap.gantt.config.LayoutGroup`.
         * Otherwise some properties you set may not function properly.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setLayout(
          /**
           * New value for property `layout`
           */
          oLayout: object
        ): sap.gantt.config.ToolbarScheme;
        /**
         * Sets a new value for property {@link #getLegend legend}.
         *
         * Toolbar group for legend We recommend that you set the type of this argument to `sap.gantt.config.ToolbarGroup`.
         * Otherwise some properties you set may not function properly.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setLegend(
          /**
           * New value for property `legend`
           */
          oLegend: object
        ): sap.gantt.config.ToolbarScheme;
        /**
         * Sets a new value for property {@link #getMode mode}.
         *
         * See {@link sap.gantt.config.ModeGroup} We recommend that you set the type of this argument to `sap.gantt.config.ModeGroup`.
         * Otherwise some properties you set may not function properly.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setMode(
          /**
           * New value for property `mode`
           */
          oMode: object
        ): sap.gantt.config.ToolbarScheme;
        /**
         * Sets a new value for property {@link #getSettings settings}.
         *
         * See {@link sap.gantt.config.SettingGroup} We recommend that you set the type of this argument to `sap.gantt.config.SettingGroup`.
         * Otherwise some properties you set may not function properly.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setSettings(
          /**
           * New value for property `settings`
           */
          oSettings: object
        ): sap.gantt.config.ToolbarScheme;
        /**
         * Sets a new value for property {@link #getSourceSelect sourceSelect}.
         *
         * Toolbar group for selecting a source We recommend that you set the type of this argument to `sap.gantt.config.ToolbarGroup`.
         * Otherwise some properties you set may not function properly.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setSourceSelect(
          /**
           * New value for property `sourceSelect`
           */
          oSourceSelect: object
        ): sap.gantt.config.ToolbarScheme;
        /**
         * Sets a new value for property {@link #getTimeZoom timeZoom}.
         *
         * Toolbar group for the time zoom We recommend that you set the type of this argument to `sap.gantt.config.ToolbarGroup`.
         * Otherwise some properties you set may not function properly.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setTimeZoom(
          /**
           * New value for property `timeZoom`
           */
          oTimeZoom: object
        ): sap.gantt.config.ToolbarScheme;
        /**
         * Sets a new value for property {@link #getToolbarDesign toolbarDesign}.
         *
         * Toolbar design. See {@link sap.m.ToolbarDesign}
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `sap.m.ToolbarDesign.Auto`.
         */
        setToolbarDesign(
          /**
           * New value for property `toolbarDesign`
           */
          sToolbarDesign: string
        ): sap.gantt.config.ToolbarScheme;
      }
      /**
       * Define the range of data that bird eye would use to calculate visibleHorizon
       */
      enum BirdEyeRange {
        /**
         * Bird eye will calculate visibleHorizon based on all rows of current view, but this mode may cause low
         * performance. Using this bird eye range, the result is not influenced by vertical scroll bar position
         * as the total rows never changes.
         */
        AllRows,
        /**
         * Bird eye will calculate visibleHorizon based on row data only in visible rows. Using this bird eye range,
         * the result can be influenced by vertical scroll bar position as visible rows may change with the movement
         * of the vertical scroll bar position.
         */
        VisibleRows
      }
      /**
       * Different time units used as part of the zoom level. They are names of d3 time unit classes.
       */
      enum TimeUnit {
        /**
         * Time unit of day.
         */
        day,
        /**
         * Time unit of hour.
         */
        hour,
        /**
         * Time unit of minute.
         */
        minute,
        /**
         * Time unit of month.
         */
        month,
        /**
         * Time unit of week.
         */
        week,
        /**
         * Time unit of year.
         */
        year
      }
      /**
       * Define the type of zoom control in global tool bar
       */
      enum ZoomControlType {
        /**
         * Uses the ButtonsOnly control to modify the time zoom rate. The SliderOnly control only consists of zoom
         * in and zoom out buttons.
         */
        ButtonsOnly,
        /**
         * Display no zoom control
         */
        None,
        /**
         * Uses the Select control to modify the time zoom rate. The Select control consists of a drop down list
         * to select a suitable zoom rate.
         */
        Select,
        /**
         * Uses the SliderOnly control to modify the time zoom rate. The SliderOnly control only consists of a slider.
         */
        SliderOnly,
        /**
         * Uses the SliderWithButtons control to modify the time zoom rate. The SliderWithButtons control consists
         * of zoom in and zoom out magnifier buttons and a slider.
         */
        SliderWithButtons
      }
    }
    /**
     * @SINCE 1.69
     *
     * Namespace `sap.gantt.palette` provides color palette definitions for standard shapes.
     */
    namespace palette {
      /**
       * @SINCE 1.69
       *
       * Accent colors: sapUiAccent1-sapUiAccent10
       */
      export const AccentColors: any;

      /**
       * @SINCE 1.69
       *
       * Legend colors: sapUiLegend1-sapUiLegend20
       */
      export const LegendColors: any;

      /**
       * @SINCE 1.69
       *
       * Semantic colors:
       * 	 - `sapUiNegativeText` - Negative (warning)
       * 	 - `sapUiCriticalText` - Critical (alert)
       * 	 - `sapUiPositiveText` - Positive (success)
       * 	 - `sapUiInformativeText` - Informative (information)
       * 	 - `sapUiNeutralText` - Neutral (no level)
       */
      export const SemanticColors: string[];
    }
    /**
     * The `sap.gantt.shape` namespace.
     *
     * This namespace provides the following configuration related features:
     * 	 - A base class `sap.gantt.shape.Shape` is provided directly in this namespace
     * 	 - A default selection shape class `sap.gantt.shape.SelectedShape` is provided directly in this namespace
     *
     * 	 - All basic shapes corresponding to SVG tag are provided directly in this namespace
     * 	 - Extended shapes from tag shapes are provided in sub-namespace `ext`
     * 	 - Special calendar shape, which should be used in combination with the calendar paint server, is provided
     * 			in sub-namespace`cal`
     */
    namespace shape {
      /**
       * Shape Categories.
       *
       * Different categories use different Drawers. Therefore, different categories may have different designs
       * of parameters in their getter methods.
       */
      namespace ShapeCategory {
        /**
         * Shapes attached to one row.
         */
        export const InRowShape: undefined;

        /**
         * Relationship shapes connecting two in-row shape instances.
         */
        export const Relationship: undefined;
      }

      namespace cal {
        interface CalendarOpts extends sap.gantt.shape.RectangleOpts {
          isBulk?: boolean;

          enableSelection?: boolean;

          calendarName?: string;
        }
        /**
         * Calendar shape.
         *
         *  The Calendar shape must be used in combination with Calendar def class {@link sap.gantt.def.cal.Calendar}
         * which draws SVG 'defs' tag.
         */
        class Calendar extends sap.gantt.shape.Rectangle {
          /**
           * Creates a Calendar shape which consumes pattern from Calendar in 'def' package.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: CalendarOpts
          );

          /**
           * Creates a new subclass of class sap.gantt.shape.cal.Calendar with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.shape.Rectangle.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets the value of property `calendarName`.
           *
           *  Calendar key.
           *
           * This property is used to generate referencing string to compose the `fill` property. This property is
           * must provided.
           */
          getCalendarName(
            /**
             * Shape data.
             */
            oData: object,
            /**
             * Information about the row and the row data.
             */
            oRowInfo: object
          ): string;
          /**
           * Gets current value of property `enableSelection`.
           *
           * General recommendation is don't configure or code against this property. Calendar is treated as a bulk
           * shape filled with pattern occupying visible chart area. Application should implement their own shape
           * if a select able calendar is expected.
           */
          // @ts-ignore
          getEnableSelection(
            /**
             * Shape data.
             */
            oData: object,
            /**
             * Information of the row and row data.
             */
            oRowInfo: object
          ): boolean;
          /**
           * Gets current value of property `fill`.
           *
           * General recommendation is don't configure or code against this property. Calendar is treated as a bulk
           * shape filled with pattern occupying visible chart area. Application should implement their own shape
           * if a select able calendar is expected.
           */
          // @ts-ignore
          getFill(
            /**
             * Shape data.
             */
            oData: object,
            /**
             * Information of the row and row data.
             */
            oRowInfo: object
          ): string;
          /**
           * Gets current value of property `height`.
           *
           * General recommendation is don't configure or code against this property. Calendar is treated as a bulk
           * shape filled with pattern occupying visible chart area. Application should implement their own shape
           * if a select able calendar is expected.
           */
          // @ts-ignore
          getHeight(
            /**
             * Shape data.
             */
            oData: object,
            /**
             * Information of the row and row data.
             */
            oRowInfo: object
          ): number;
          /**
           * Gets current value of property `isBulk`.
           *
           * General recommendation is don't configure or code against this property.
           */
          // @ts-ignore
          getIsBulk(
            /**
             * Shape data.
             */
            oData: object,
            /**
             * Information of the row and row data.
             */
            oRowInfo: object
          ): boolean;
          /**
           * Returns a metadata object for class sap.gantt.shape.cal.Calendar.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property `width`.
           *
           * General recommendation is don't configure or code against this property. Calendar is treated as a bulk
           * shape filled with pattern occupying visible chart area. Application should implement their own shape
           * if a select able calendar is expected.
           */
          // @ts-ignore
          getWidth(
            /**
             * Shape data.
             */
            oData: object,
            /**
             * Information of the row and row data.
             */
            oRowInfo: object
          ): number;
          /**
           * Gets current value of property `x`.
           *
           * General recommendation is don't configure or code against this property. Calendar is treated as a bulk
           * shape filled with pattern occupying visible chart area. Application should implement their own shape
           * if a select able calendar is expected.
           */
          // @ts-ignore
          getX(
            /**
             * Shape data.
             */
            oData: object,
            /**
             * Information of the row and row data.
             */
            oRowInfo: object
          ): number;
          /**
           * Gets current value of property `y`.
           *
           * General recommendation is don't configure or code against this property. Calendar is treated as a bulk
           * shape filled with pattern occupying visible chart area. Application should implement their own shape
           * if a select able calendar is expected.
           */
          // @ts-ignore
          getY(
            /**
             * Shape data.
             */
            oData: object,
            /**
             * Information of the row and row data.
             */
            oRowInfo: object
          ): number;
          /**
           * Sets a new value for property {@link #getCalendarName calendarName}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `nwt`.
           */
          setCalendarName(
            /**
             * New value for property `calendarName`
             */
            sCalendarName: string
          ): sap.gantt.shape.cal.Calendar;
          /**
           * Sets a new value for property {@link #getEnableSelection enableSelection}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           */
          // @ts-ignore
          setEnableSelection(
            /**
             * New value for property `enableSelection`
             */
            bEnableSelection: boolean
          ): sap.gantt.shape.cal.Calendar;
          /**
           * Sets a new value for property {@link #getIsBulk isBulk}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          // @ts-ignore
          setIsBulk(
            /**
             * New value for property `isBulk`
             */
            bIsBulk: boolean
          ): sap.gantt.shape.cal.Calendar;
        }
      }

      namespace ext {
        namespace rls {
          interface RelationshipOpts extends sap.gantt.shape.PathOpts {
            /**
             * CSS class name of the relationship shape
             */
            htmlClass?: string;

            /**
             * Category name
             */
            category?: string;

            /**
             * Indicates whether the shape is a closed path
             */
            isClosed?: boolean;

            /**
             * Indicates whether the width of the polygon represents the duration of time
             */
            isDuration?: boolean;

            /**
             * Line color of the relationship shape
             */
            stroke?: string;

            /**
             * Fill color of the relationship shape (the color of the arrow and the square at the ends)
             */
            fill?: string;

            /**
             * Relationship type
             */
            type?: sap.gantt.shape.ext.rls.RelationshipType;

            /**
             * Path of predecessor element
             */
            fromObjectPath?: string;

            /**
             * Expand row index of predecessor element
             */
            fromExpandRowIndex?: number;

            /**
             * Shape of predecessor element
             */
            fromShapeId?: string;

            /**
             * Data of predecessor element
             */
            fromDataId?: string;

            /**
             * Path of successor element
             */
            toObjectPath?: string;

            /**
             * Expand row index of successor element
             */
            toExpandRowIndex?: number;

            /**
             * Shape of successor element
             */
            toShapeId?: string;

            /**
             * Data of successor element
             */
            toDataId?: string;

            /**
             * Indicates whether the start point (square) of the relationship shape is visible
             */
            showStart?: boolean;

            /**
             * Indicates whether the end point (arrow) of the relationship shape is visible
             */
            showEnd?: boolean;

            /**
             * Indicates whether an 'L' shape is used for the finish-to-start type
             */
            lShapeforTypeFS?: boolean;

            /**
             * Minimum length for relationship lines
             */
            minXLen?: number;

            /**
             * Size of the arrow
             */
            arrowSideLength?: number;

            selectedShape?: sap.gantt.shape.ext.rls.SelectedRelationship;
          }

          interface SelectedRelationshipOpts
            extends sap.gantt.shape.ext.rls.RelationshipOpts {
            /**
             * Line color of the relationship.
             */
            stroke?: string;

            /**
             * Width of the relationship line.
             */
            strokeWidth?: number;
          }
          /**
           * Enables users to visualize the relationship between elements.
           *
           * Four types of relationships are supported and L-shaped lines are supported for the finish-to-start
           * type.
           */
          class Relationship extends sap.gantt.shape.Path {
            /**
             * Creates and initializes a Relationship object
             *
             * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
             * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
             * of the syntax of the settings object.
             */
            constructor(
              /**
               * ID for the new control, generated automatically if no is given
               */
              sId?: string,
              /**
               * Initial settings for the new control
               */
              mSettings?: RelationshipOpts
            );

            /**
             * Destroys the selectedShape in the aggregation {@link #getSelectedShape selectedShape}.
             */
            // @ts-ignore
            destroySelectedShape(): sap.gantt.shape.ext.rls.Relationship;
            /**
             * Creates a new subclass of class sap.gantt.shape.ext.rls.Relationship with name `sClassName` and enriches
             * it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.shape.Path.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Gets current value of property {@link #getArrowSideLength arrowSideLength}.
             *
             * Size of the arrow
             *
             * Default value is `5`.
             */
            getArrowSideLength(): number;
            /**
             * Gets current value of property {@link #getCategory category}.
             *
             * Category name
             *
             * Default value is `sap.gantt.shape.ShapeCategory.Relationship`.
             */
            // @ts-ignore
            getCategory(): string;
            /**
             * Gets current value of property {@link #getFill fill}.
             *
             * Fill color of the relationship shape (the color of the arrow and the square at the ends)
             *
             * Default value is `#000000`.
             */
            // @ts-ignore
            getFill(): string;
            /**
             * Gets the data of the predecessor element
             */
            getFromDataId(
              /**
               * Raw data object
               */
              oData: object
            ): string;
            /**
             * Gets the expand row index of predecessor object
             */
            getFromExpandRowIndex(
              /**
               * Raw data object
               */
              oData: object
            ): number;
            /**
             * Gets the path of predecessor object
             */
            getFromObjectPath(
              /**
               * Raw data object
               */
              oData: object
            ): string;
            /**
             * Gets the shape ID of the predecessor element
             */
            getFromShapeId(
              /**
               * Raw data object
               */
              oData: object
            ): string;
            /**
             * Gets the CSS class of the relationship shape
             */
            // @ts-ignore
            getHtmlClass(
              /**
               * Raw data object
               */
              oData: object
            ): string;
            /**
             * Gets current value of property {@link #getIsClosed isClosed}.
             *
             * Indicates whether the shape is a closed path
             *
             * Default value is `true`.
             */
            // @ts-ignore
            getIsClosed(): boolean;
            /**
             * Gets current value of property {@link #getIsDuration isDuration}.
             *
             * Indicates whether the width of the polygon represents the duration of time
             *
             * Default value is `false`.
             */
            // @ts-ignore
            getIsDuration(): boolean;
            /**
             * Gets the'L' shape switch
             */
            getLShapeforTypeFS(
              /**
               * Raw data object
               */
              oData: object
            ): boolean;
            /**
             * Returns a metadata object for class sap.gantt.shape.ext.rls.Relationship.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Gets current value of property {@link #getMinXLen minXLen}.
             *
             * Minimum length for relationship lines
             *
             * Default value is `10`.
             */
            getMinXLen(): number;
            /**
             * Gets content of aggregation {@link #getSelectedShape selectedShape}.
             */
            // @ts-ignore
            getSelectedShape(): sap.gantt.shape.ext.rls.SelectedRelationship;
            /**
             * Gets whether the end shape is visible
             */
            getShowEnd(
              /**
               * Raw data object
               */
              oData: object
            ): boolean;
            /**
             * Gets whether the start shape is visible
             */
            getShowStart(
              /**
               * Raw data object
               */
              oData: object
            ): boolean;
            /**
             * Gets current value of property {@link #getStroke stroke}.
             *
             * Line color of the relationship shape
             *
             * Default value is `#000000`.
             */
            // @ts-ignore
            getStroke(): string;
            /**
             * Gets the data of the successor element
             */
            getToDataId(
              /**
               * Raw data object
               */
              oData: object
            ): string;
            /**
             * Gets the expand row index of successor object
             */
            getToExpandRowIndex(
              /**
               * Raw data object
               */
              oData: object
            ): number;
            /**
             * Gets the path of the successor element
             */
            getToObjectPath(
              /**
               * Raw data object
               */
              oData: object
            ): string;
            /**
             * Gets the shape ID of the successor element
             */
            getToShapeId(
              /**
               * Raw data object
               */
              oData: object
            ): string;
            /**
             * Gets the relationship type
             */
            getType(
              /**
               * Raw data object
               */
              oData: object
            ): number;
            /**
             * Sets a new value for property {@link #getArrowSideLength arrowSideLength}.
             *
             * Size of the arrow
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `5`.
             */
            setArrowSideLength(
              /**
               * New value for property `arrowSideLength`
               */
              fArrowSideLength: number
            ): sap.gantt.shape.ext.rls.Relationship;
            /**
             * Sets a new value for property {@link #getCategory category}.
             *
             * Category name
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `sap.gantt.shape.ShapeCategory.Relationship`.
             */
            // @ts-ignore
            setCategory(
              /**
               * New value for property `category`
               */
              sCategory: string
            ): sap.gantt.shape.ext.rls.Relationship;
            /**
             * Sets a new value for property {@link #getFill fill}.
             *
             * Fill color of the relationship shape (the color of the arrow and the square at the ends)
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `#000000`.
             */
            // @ts-ignore
            setFill(
              /**
               * New value for property `fill`
               */
              sFill: string
            ): sap.gantt.shape.ext.rls.Relationship;
            /**
             * Sets a new value for property {@link #getFromDataId fromDataId}.
             *
             * Data of predecessor element
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setFromDataId(
              /**
               * New value for property `fromDataId`
               */
              sFromDataId: string
            ): sap.gantt.shape.ext.rls.Relationship;
            /**
             * Sets a new value for property {@link #getFromExpandRowIndex fromExpandRowIndex}.
             *
             * Expand row index of predecessor element
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `0`.
             */
            setFromExpandRowIndex(
              /**
               * New value for property `fromExpandRowIndex`
               */
              iFromExpandRowIndex: number
            ): sap.gantt.shape.ext.rls.Relationship;
            /**
             * Sets a new value for property {@link #getFromObjectPath fromObjectPath}.
             *
             * Path of predecessor element
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setFromObjectPath(
              /**
               * New value for property `fromObjectPath`
               */
              sFromObjectPath: string
            ): sap.gantt.shape.ext.rls.Relationship;
            /**
             * Sets a new value for property {@link #getFromShapeId fromShapeId}.
             *
             * Shape of predecessor element
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setFromShapeId(
              /**
               * New value for property `fromShapeId`
               */
              sFromShapeId: string
            ): sap.gantt.shape.ext.rls.Relationship;
            /**
             * Sets a new value for property {@link #getHtmlClass htmlClass}.
             *
             * CSS class name of the relationship shape
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `relationshipLine`.
             */
            // @ts-ignore
            setHtmlClass(
              /**
               * New value for property `htmlClass`
               */
              sHtmlClass: string
            ): sap.gantt.shape.ext.rls.Relationship;
            /**
             * Sets a new value for property {@link #getIsClosed isClosed}.
             *
             * Indicates whether the shape is a closed path
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `true`.
             */
            // @ts-ignore
            setIsClosed(
              /**
               * New value for property `isClosed`
               */
              bIsClosed: boolean
            ): sap.gantt.shape.ext.rls.Relationship;
            /**
             * Sets a new value for property {@link #getIsDuration isDuration}.
             *
             * Indicates whether the width of the polygon represents the duration of time
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `false`.
             */
            // @ts-ignore
            setIsDuration(
              /**
               * New value for property `isDuration`
               */
              bIsDuration: boolean
            ): sap.gantt.shape.ext.rls.Relationship;
            /**
             * Sets a new value for property {@link #getLShapeforTypeFS lShapeforTypeFS}.
             *
             * Indicates whether an 'L' shape is used for the finish-to-start type
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `true`.
             */
            setLShapeforTypeFS(
              /**
               * New value for property `lShapeforTypeFS`
               */
              bLShapeforTypeFS: boolean
            ): sap.gantt.shape.ext.rls.Relationship;
            /**
             * Sets a new value for property {@link #getMinXLen minXLen}.
             *
             * Minimum length for relationship lines
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `10`.
             */
            setMinXLen(
              /**
               * New value for property `minXLen`
               */
              fMinXLen: number
            ): sap.gantt.shape.ext.rls.Relationship;
            /**
             * Sets the aggregated {@link #getSelectedShape selectedShape}.
             */
            // @ts-ignore
            setSelectedShape(
              /**
               * The selectedShape to set
               */
              oSelectedShape: sap.gantt.shape.ext.rls.SelectedRelationship
            ): sap.gantt.shape.ext.rls.Relationship;
            /**
             * Sets a new value for property {@link #getShowEnd showEnd}.
             *
             * Indicates whether the end point (arrow) of the relationship shape is visible
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `true`.
             */
            setShowEnd(
              /**
               * New value for property `showEnd`
               */
              bShowEnd: boolean
            ): sap.gantt.shape.ext.rls.Relationship;
            /**
             * Sets a new value for property {@link #getShowStart showStart}.
             *
             * Indicates whether the start point (square) of the relationship shape is visible
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `false`.
             */
            setShowStart(
              /**
               * New value for property `showStart`
               */
              bShowStart: boolean
            ): sap.gantt.shape.ext.rls.Relationship;
            /**
             * Sets a new value for property {@link #getStroke stroke}.
             *
             * Line color of the relationship shape
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `#000000`.
             */
            // @ts-ignore
            setStroke(
              /**
               * New value for property `stroke`
               */
              sStroke: string
            ): sap.gantt.shape.ext.rls.Relationship;
            /**
             * Sets a new value for property {@link #getToDataId toDataId}.
             *
             * Data of successor element
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setToDataId(
              /**
               * New value for property `toDataId`
               */
              sToDataId: string
            ): sap.gantt.shape.ext.rls.Relationship;
            /**
             * Sets a new value for property {@link #getToExpandRowIndex toExpandRowIndex}.
             *
             * Expand row index of successor element
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `0`.
             */
            setToExpandRowIndex(
              /**
               * New value for property `toExpandRowIndex`
               */
              iToExpandRowIndex: number
            ): sap.gantt.shape.ext.rls.Relationship;
            /**
             * Sets a new value for property {@link #getToObjectPath toObjectPath}.
             *
             * Path of successor element
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setToObjectPath(
              /**
               * New value for property `toObjectPath`
               */
              sToObjectPath: string
            ): sap.gantt.shape.ext.rls.Relationship;
            /**
             * Sets a new value for property {@link #getToShapeId toShapeId}.
             *
             * Shape of successor element
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            setToShapeId(
              /**
               * New value for property `toShapeId`
               */
              sToShapeId: string
            ): sap.gantt.shape.ext.rls.Relationship;
            /**
             * Sets a new value for property {@link #getType type}.
             *
             * Relationship type
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             *
             * Default value is `FinishToFinish`.
             */
            setType(
              /**
               * New value for property `type`
               */
              sType: sap.gantt.shape.ext.rls.RelationshipType
            ): sap.gantt.shape.ext.rls.Relationship;
          }
          /**
           *  Provides an implementation of shape for drawing relationships with red and wider lines when they
           * are selected.
           */
          class SelectedRelationship extends sap.gantt.shape.ext.rls
            .Relationship {
            /**
             * Creates and initializes a SelectedRelationship object
             *
             * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
             * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
             * of the syntax of the settings object.
             */
            constructor(
              /**
               * ID of the new control, generated automatically if no ID is given
               */
              sId?: string,
              /**
               * Initial settings for the new control
               */
              mSettings?: SelectedRelationshipOpts
            );

            /**
             * Creates a new subclass of class sap.gantt.shape.ext.rls.SelectedRelationship with name `sClassName` and
             * enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.shape.ext.rls.Relationship.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Gets the value of `fill`.
             *
             *  See {@link sap.gantt.shape.Shape#getFill} for a detailed description of `fill`.
             */
            // @ts-ignore
            getFill(
              /**
               * Shape data.
               */
              oData: object
            ): string;
            /**
             * Returns a metadata object for class sap.gantt.shape.ext.rls.SelectedRelationship.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Gets the value of `stroke`.
             *
             *  See {@link sap.gantt.shape.Shape#getStroke} for a detailed description of `stroke`.
             */
            // @ts-ignore
            getStroke(
              /**
               * Shape data.
               */
              oData: object
            ): string;
            /**
             * Gets the value of `strokeWidth`.
             *
             *  See {@link sap.gantt.shape.Shape#getStrokeWidth} for a detailed description of `strokeWidth`.
             */
            // @ts-ignore
            getStrokeWidth(
              /**
               * Shape data.
               */
              oData: object
            ): number;
            /**
             * Sets a new value for property {@link #getStroke stroke}.
             *
             * Line color of the relationship.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            // @ts-ignore
            setStroke(
              /**
               * New value for property `stroke`
               */
              sStroke: string
            ): sap.gantt.shape.ext.rls.SelectedRelationship;
            /**
             * Sets a new value for property {@link #getStrokeWidth strokeWidth}.
             *
             * Width of the relationship line.
             *
             * When called with a value of `null` or `undefined`, the default value of the property will be restored.
             */
            // @ts-ignore
            setStrokeWidth(
              /**
               * New value for property `strokeWidth`
               */
              iStrokeWidth: number
            ): sap.gantt.shape.ext.rls.SelectedRelationship;
          }
          /**
           * Type of relationships
           */
          enum RelationshipType {
            /**
             * Finish to finish type.
             */
            FinishToFinish,
            /**
             * Finish to start type.
             */
            FinishToStart,
            /**
             * Start to finish type.
             */
            StartToFinish,
            /**
             * Start to start type.
             */
            StartToStart
          }
        }

        namespace ubc {
          interface UbcBorderPathOpts extends sap.gantt.shape.PathOpts {}

          interface UbcOverCapacityZonePolygonOpts
            extends sap.gantt.shape.ext.ubc.UbcPolygonOpts {}

          interface UbcPolygonOpts extends sap.gantt.shape.PolygonOpts {}

          interface UbcShortageCapacityPolygonOpts
            extends sap.gantt.shape.ext.ubc.UbcPolygonOpts {}

          interface UbcTooltipRectangleOpts
            extends sap.gantt.shape.RectangleOpts {}

          interface UbcUnderCapacityZonePolygonOpts
            extends sap.gantt.shape.ext.ubc.UbcPolygonOpts {}

          interface UbcUsedPolygonOpts
            extends sap.gantt.shape.ext.ubc.UbcPolygonOpts {}

          interface UtilizationBarChartOpts extends sap.gantt.shape.GroupOpts {}
          /**
           * This shape is used to represent a planned capacity line.
           *
           *  Graphic Effect is:
           */
          class UbcBorderPath extends sap.gantt.shape.Path {
            /**
             * Creates and initializes a fragment of the Utilization Bar Chart.
             */
            constructor(
              /**
               * ID for the new control, generated automatically if no ID is given
               */
              sId?: string,
              /**
               * Initial settings of the new control
               */
              mSettings?: UbcBorderPathOpts
            );

            /**
             * Creates a new subclass of class sap.gantt.shape.ext.ubc.UbcBorderPath with name `sClassName` and enriches
             * it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.shape.Path.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Gets the value of property `d`.
             *
             *  d attribute of the path element.
             */
            // @ts-ignore
            getD(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): string;
            /**
             * Gets the value of property `enableSelection`.
             *
             *  This property determines whether a shape is enabled for a selection behavior. The default value for
             * a Utilization Line Chart is false.
             */
            // @ts-ignore
            getEnableSelection(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): boolean;
            /**
             * Returns a metadata object for class sap.gantt.shape.ext.ubc.UbcBorderPath.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Gets the value of property `stroke`.
             *
             *  Standard SVG 'stroke' attribute. **Note:**You can provide stroke with HTML colors and the URL reference
             * to a paint server can be provided. Paint server definitions can be retrieved from paint servers rendered
             * by {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable}, or {@link sap.gantt.GanttChart}.
             *  The default value is "blue".
             */
            // @ts-ignore
            getStroke(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): string;
            /**
             * Gets the value of property `strokeWidth`.
             *
             *  Standard SVG 'stroke-width' attribute.  The default value is 0.3.
             */
            // @ts-ignore
            getStrokeWidth(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): number;
          }
          /**
           * This shape is used to represent the background of an over capacity zone.
           *
           *  Graphic Effect is:
           */
          class UbcOverCapacityZonePolygon extends sap.gantt.shape.ext.ubc
            .UbcPolygon {
            /**
             * Creates and initializes a fragment of the Utilization Line Chart.
             */
            constructor(
              /**
               * ID for the new control, generated automatically if no ID is given
               */
              sId?: string,
              /**
               * Initial settings of the new control
               */
              mSettings?: UbcOverCapacityZonePolygonOpts
            );

            /**
             * Creates a new subclass of class sap.gantt.shape.ext.ubc.UbcOverCapacityZonePolygon with name `sClassName`
             * and enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.shape.ext.ubc.UbcPolygon.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Gets the value of property `fill`.
             *
             *  Standard SVG 'fill' attribute. **Note:** You can provide fill with HTML colors and the URL reference
             * to a paint server. Paint server definitions can be retrieved from paint servers rendered by {@link sap.gantt.GanttChartContainer},
             * {@link sap.gantt.GanttChartWithTable}, or {@link sap.gantt.GanttChart}. The default value of 'fill' is
             * the URL reference.
             */
            // @ts-ignore
            getFill(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): string;
            /**
             * Returns a metadata object for class sap.gantt.shape.ext.ubc.UbcOverCapacityZonePolygon.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Gets the value of property `points`.
             *
             *  points attribute of the polygon element. The value of 'points' is calculated by the coordinates of
             * four vertices of a visible area.
             */
            // @ts-ignore
            getPoints(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): string;
            /**
             * Gets the value of property `stroke`.
             *
             *  Standard SVG 'stroke' attribute. **Note:** You can provide stroke with HTML colors and the URL reference
             * to a paint server. Paint server definitions can be retrieved from paint servers rendered by {@link sap.gantt.GanttChartContainer},
             * {@link sap.gantt.GanttChartWithTable}, or {@link sap.gantt.GanttChart}.  The default value is
             * "#CAC7BA".
             */
            // @ts-ignore
            getStroke(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): string;
            /**
             * Gets the value of property `strokeWidth`.
             *
             *  Standard SVG 'stroke-width' attribute.  The default value is 0.3.
             */
            // @ts-ignore
            getStrokeWidth(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): number;
          }
          /**
           * Base class for ` sap.gantt.shape.ext.ubc.UbcOverCapacityZonePolygon`, ` sap.gantt.shape.ext.ubc.UbcUnderCapacityZonePolygon`,
           * ` sap.gantt.shape.ext.ubc.UbcShortagePolygon`, ` sap.gantt.shape.ext.ubc.UbcUsedPolygon`.
           *
           * This base class defines a number of shared methods.
           */
          class UbcPolygon extends sap.gantt.shape.Polygon {
            /**
             * Creates and initializes a fragment of the Utilization Line Chart.
             */
            constructor(
              /**
               * ID of the new control, generated automatically if no ID is given
               */
              sId?: string,
              /**
               * Initial settings of the new control
               */
              mSettings?: UbcPolygonOpts
            );

            /**
             * Creates a new subclass of class sap.gantt.shape.ext.ubc.UbcPolygon with name `sClassName` and enriches
             * it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.shape.Polygon.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Gets the value of property `enableSelection`.
             *
             *  This property determines whether a shape is enabled for a selection behavior. The default value for
             * a Utilization Line Chart is false.
             */
            // @ts-ignore
            getEnableSelection(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): boolean;
            /**
             * Returns a metadata object for class sap.gantt.shape.ext.ubc.UbcPolygon.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
          }
          /**
           * This shape is used to represent a shortage capacity area.
           *
           *  Graphic Effect is:
           */
          class UbcShortageCapacityPolygon extends sap.gantt.shape.ext.ubc
            .UbcPolygon {
            /**
             * Creates and initializes a fragment of the Utilization Line Chart.
             */
            constructor(
              /**
               * ID of the new control, generated automatically if no ID is given
               */
              sId?: string,
              /**
               * Initial settings of the new control
               */
              mSettings?: UbcShortageCapacityPolygonOpts
            );

            /**
             * Creates a new subclass of class sap.gantt.shape.ext.ubc.UbcShortageCapacityPolygon with name `sClassName`
             * and enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.shape.ext.ubc.UbcPolygon.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Gets the value of property `fill`.
             *
             *  Standard SVG 'fill' attribute. **Note:** You can provide the fill attribute with HTML colors and
             * the URL reference to a paint server. Paint server definitions can be retrieved from paint servers rendered
             * by {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable}, or {@link sap.gantt.GanttChart}.
             *  The default value is "#FF0000".
             */
            // @ts-ignore
            getFill(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information of the row and row data.
               */
              oRowInfo: object
            ): string;
            /**
             * Returns a metadata object for class sap.gantt.shape.ext.ubc.UbcShortageCapacityPolygon.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Gets current value of property `points`.
             *
             *  points attribute of polygon element. The value of 'points' is calculated by using the coordinates
             * of all points for the shortage capacity area.
             */
            // @ts-ignore
            getPoints(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): string;
            /**
             * Gets current value of property `stroke`.
             *
             *  Standard SVG 'stroke' attribute. **Note:** HTML color and url reference to paint server can be provided
             * to stroke. Paint server definitions usually comes from paint servers rendered by {@link sap.gantt.GanttChartContainer},
             * {@link sap.gantt.GanttChartWithTable} or {@link sap.gantt.GanttChart}.  The default value is "#CAC7BA".
             */
            // @ts-ignore
            getStroke(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): string;
            /**
             * Gets the value of property `strokeWidth`.
             *
             *  Standard SVG 'stroke-width' attribute.  The default value is 0.3.
             */
            // @ts-ignore
            getStrokeWidth(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): number;
          }
          /**
           * This shape is used to represent an invisible rectangle with tooltips. Note that a tooltip appears only
           * when the title tag is specified on the rectangle.
           *
           *  Graphic Effect is:
           *
           *           Capacity:
           * 50
           * Required Capacity: 65 Capacity: 45
           * Required Capacity: 10
           * Capacity:
           * 65
           * Required Capacity: 75 Capacity: 75
           * Required Capacity: 35
           * Capacity:
           * 55
           * Required Capacity: 55 Capacity: 55
           * Required Capacity: 75
           */
          class UbcTooltipRectangle extends sap.gantt.shape.Rectangle {
            /**
             * Creates and initializes a fragment of the Utilization Line Chart.
             */
            constructor(
              /**
               * ID of the new control, generated automatically if no ID is given
               */
              sId?: string,
              /**
               * Initial settings of the new control
               */
              mSettings?: UbcTooltipRectangleOpts
            );

            /**
             * Creates a new subclass of class sap.gantt.shape.ext.ubc.UbcTooltipRectangle with name `sClassName` and
             * enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.shape.Rectangle.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Gets the value of property `enableSelection`.
             *
             *  This property determines whether a shape is enabled for a selection behavior. The default value for
             * the Utilization Line Chart is false.
             */
            // @ts-ignore
            getEnableSelection(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): boolean;
            /**
             * Gets the value of property `fillOpacity`.
             *
             *  Standard SVG 'fill-Opacity' attribute. The value of fillOpacity for a rectangle with tooltips must
             * be 0.  The default value is 0.
             */
            // @ts-ignore
            getFillOpacity(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): number;
            /**
             * Gets the value of property `height`.
             *
             *  Height of a rectangle.  The default value is the height of the row minus 1px, which is the
             * width of stroke.
             */
            // @ts-ignore
            getHeight(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): number;
            /**
             * Returns a metadata object for class sap.gantt.shape.ext.ubc.UbcTooltipRectangle.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Gets the value of property `strokeOpacity`.
             *
             *  Standard SVG 'stroke-Opacity' attribute. The value of strokeOpacity for a rectangle with tooltips
             * must be 0.  The default value is 0.
             */
            // @ts-ignore
            getStrokeOpacity(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): number;
            /**
             * Gets the value of property `title`.
             *
             * A title is visualized as a tooltip in web browsers. **Notes:** Use character entities to perform simple
             * text tabbing and breaking. (Use "	" for tab and "
             * " for break.)
             */
            // @ts-ignore
            getTitle(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): string;
            /**
             * Gets the value of property `width`.
             *
             *  Width of a rectangle.
             *
             * Your application should not configure this value. Instead, the getter calculates the width by using property
             * `start_date` and property `end_date`. If your application overwrites the getter by configuration or code,
             * accurate results cannot be guaranteed.
             */
            // @ts-ignore
            getWidth(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): number;
            /**
             * Gets the value of property `x`.
             *
             *  x coordinate of the top-left point of a rectangle.
             *
             * Your application should not configure this value. Instead, the getter calculates the value of x by using
             * property `start_date`.
             */
            // @ts-ignore
            getX(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information of the row and row data.
               */
              oRowInfo: object
            ): number;
            /**
             * Gets the value of property `y`.
             *
             *  y coordinate of the top-left point of a rectangle.
             *
             * Your application should not configure this value. Instead, the getter calculates the value of y by using
             * parameter `oRowInfo`.  The default value is the y coordinate of the top-left point of the row.
             */
            // @ts-ignore
            getY(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): number;
          }
          /**
           * This shape is used to represent an unplanned capacity area.
           *
           *  Graphic Effect is:
           */
          class UbcUnderCapacityZonePolygon extends sap.gantt.shape.ext.ubc
            .UbcPolygon {
            /**
             * Creates and initializes a fragment of the Utilization Line Chart.
             */
            constructor(
              /**
               * ID of the new control, generated automatically if no ID is given
               */
              sId?: string,
              /**
               * Initial settings of the new control
               */
              mSettings?: UbcUnderCapacityZonePolygonOpts
            );

            /**
             * Creates a new subclass of class sap.gantt.shape.ext.ubc.UbcUnderCapacityZonePolygon with name `sClassName`
             * and enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.shape.ext.ubc.UbcPolygon.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Gets the value of property `fill`.
             *
             *  Standard SVG 'fill' attribute. **Note:** You can provide the fill attribute with HTML colors and
             * the URL reference to a paint server. Paint server definitions can be retrieved from paint servers rendered
             * by {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable}, or {@link sap.gantt.GanttChart}.
             *  The default value is "#40d44c".
             */
            // @ts-ignore
            getFill(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): string;
            /**
             * Returns a metadata object for class sap.gantt.shape.ext.ubc.UbcUnderCapacityZonePolygon.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Gets the value of property `points`.
             *
             *  points attribute of the polygon element. The value of 'points' is calculated by using the coordinates
             * of all points of the unplanned capacity area.
             */
            // @ts-ignore
            getPoints(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): string;
          }
          /**
           * This shape is used to represent a healthy planned capacity area.
           *
           *  Graphic Effect is:
           */
          class UbcUsedPolygon extends sap.gantt.shape.ext.ubc.UbcPolygon {
            /**
             * Creates and initializes a fragment of the Utilization Line Chart.
             */
            constructor(
              /**
               * ID for the new control, generated automatically if no ID is given
               */
              sId?: string,
              /**
               * Initial settings of the new control
               */
              mSettings?: UbcUsedPolygonOpts
            );

            /**
             * Creates a new subclass of class sap.gantt.shape.ext.ubc.UbcUsedPolygon with name `sClassName` and enriches
             * it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.shape.ext.ubc.UbcPolygon.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Gets the value of property `fill`.
             *
             *  Standard SVG 'fill' attribute. **Note:** You can provide the fill attribute with HTML colors and
             * the URL reference to a paint server. Paint server definitions can be retrieved from paint servers rendered
             * by {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable}, or {@link sap.gantt.GanttChart}.
             *  The default value is "#CAC7BA".
             */
            // @ts-ignore
            getFill(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): string;
            /**
             * Returns a metadata object for class sap.gantt.shape.ext.ubc.UbcUsedPolygon.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Gets the value of property `points`.
             *
             *  points attribute of polygon element. The value of 'points' is calculated by using the coordinates
             * of all points for the healthy planned capacity area.
             */
            // @ts-ignore
            getPoints(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): string;
          }
          /**
           * UBC is a complex shape. This class is the outer container with tag='g'. All fragments are aggregated
           * into this container. You can remove a fragment from the container if your application does not need it.
           *
           * The container has six aggregations:
           * 	 - {@link sap.gantt.shape.ext.ubc.UbcOverCapacityZonePolygon}(used to represent the OverCapacity Zone
           * 			area),
           * 	 - {@link sap.gantt.shape.ext.ubc.UbcUnderCapacityZonePolygon}(used to represent the Unplanned Capacity
           * 			area),
           * 	 - {@link sap.gantt.shape.ext.ubc.UbcShortageCapacityPolygon}(used to the draw Shortage area),
           * 	 - {@link sap.gantt.shape.ext.ubc.UbcUsedPolygon}(used to represent the HealthyPlanned Capacity area),
           *
           * 	 - {@link sap.gantt.shape.ext.ubc.UbcBorderPath}(used to represent the planned capacity line),
           * 	 - {@link sap.gantt.shape.ext.ubc.UbcTooltipRectangle}(used to represent a rectangle with invisible
           * 			tooltips for each period of capacity change).
           *
           * A super class ` sap.gantt.shape.ext.ubc.UbcPolygon` is abstracted because the four polygons in this
           * container (UbcOverCapacityZonePolygon, UbcUnderCapacityZonePolygon, UbcShortageCapacityPolygon, and UbcUsedPolygon)
           * share similar logic.
           *
           *  Graphic Effect is:
           *
           *            Capacity: 50
           * Required Capacity: 65 Capacity: 45
           * Required Capacity: 10 Capacity: 65
           * Required Capacity: 75
           * Capacity: 75
           * Required Capacity: 35
           * Capacity: 55
           * Required Capacity: 55
           * Capacity: 55
           * Required Capacity: 75
           *  OverCapacity Zone
           * Planned Capacity
           * Shortage HealthyPlanned
           * Capacity UnPlanned
           * Capacity
           *
           * An example of the structure of data to feed utilization bar chart:
           *  ` { bc_capacity: { id: "capacity_0", period: [ { start_date: "20160123000000", supply: "9", demand:
           * "7" },{ start_date: "20160127093400", supply: "8", demand: "8" } ] }, bc_tooltip: [ { start_date: "20160123000000",
           * supply: "9", demand: "7", end_date: "20160127093400" },{ start_date: "20160127093400", supply: "8", demand:
           * "8", start_date: "20160203134520" } ] } `
           */
          class UtilizationBarChart extends sap.gantt.shape.Group {
            /**
             * Creates and initializes a new Utilization Bar Chart (UBC) container class.
             */
            constructor(
              /**
               * ID of the new control, generated automatically if no ID is given
               */
              sId?: string,
              /**
               * Initial settings of the new control
               */
              mSettings?: UtilizationBarChartOpts
            );

            /**
             * Creates a new subclass of class sap.gantt.shape.ext.ubc.UtilizationBarChart with name `sClassName` and
             * enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.shape.Group.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Gets the value of property `enableSelection`.
             *
             *  This property determines whether a shape is enabled for selection behavior. The default value for
             * the Utilization Line Chart is false.
             */
            // @ts-ignore
            getEnableSelection(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): boolean;
            /**
             * Returns a metadata object for class sap.gantt.shape.ext.ubc.UtilizationBarChart.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
          }
        }

        namespace ulc {
          interface UlcBorderPathOpts extends sap.gantt.shape.PathOpts {}

          interface UlcClipingPathOpts extends sap.gantt.shape.PathOpts {}

          interface UlcClipPathOpts extends sap.gantt.shape.ClipPathOpts {}

          interface UlcDimensionOpts extends sap.gantt.shape.GroupOpts {}

          interface UlcMiddleLineOpts extends sap.gantt.shape.LineOpts {}

          interface UlcOverCapacityZoneRectangleOpts
            extends sap.gantt.shape.ext.ulc.UlcRectangleOpts {}

          interface UlcOverClipRectangleOpts
            extends sap.gantt.shape.ext.ulc.UlcRectangleOpts {}

          interface UlcRectangleOpts extends sap.gantt.shape.RectangleOpts {}

          interface UlcTooltipRectangleOpts
            extends sap.gantt.shape.ext.ulc.UlcRectangleOpts {}

          interface UlcUnderClipRectangleOpts
            extends sap.gantt.shape.ext.ulc.UlcRectangleOpts {}

          interface UtilizationLineChartOpts
            extends sap.gantt.shape.ShapeOpts {}
          /**
           * This shape is used to draw dimension lines.
           *
           *  Graphic Effect is:
           */
          class UlcBorderPath extends sap.gantt.shape.Path {
            /**
             * Creates and initializes a fragment of the Utilization Line Chart.
             */
            constructor(
              /**
               * ID of the new control, generated automatically if no ID is given
               */
              sId?: string,
              /**
               * Initial settings of the new control
               */
              mSettings?: UlcBorderPathOpts
            );

            /**
             * Creates a new subclass of class sap.gantt.shape.ext.ulc.UlcBorderPath with name `sClassName` and enriches
             * it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.shape.Path.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Gets the value of property `d`.
             *
             *  'd' attribute of the path element. The 'd' attribute has powerful usages.
             */
            // @ts-ignore
            getD(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): string;
            /**
             * Returns a metadata object for class sap.gantt.shape.ext.ulc.UlcBorderPath.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Gets the value of property `stroke`.
             *
             *  Standard SVG 'stroke' attribute. **Note:** You can provide stroke with HTML colors and URL references
             * to paint servers. Paint server definitions usually comes from paint servers rendered by {@link sap.gantt.GanttChartContainer},
             * {@link sap.gantt.GanttChartWithTable} or {@link sap.gantt.GanttChart}.
             */
            // @ts-ignore
            getStroke(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): string;
            /**
             * Gets the value of property `strokeWidth`.
             *
             *  Standard SVG 'stroke-width' attribute.  The default value is 1.
             */
            // @ts-ignore
            getStrokeWidth(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): number;
          }
          /**
           * This shape is used to define path data inside {@link sap.gantt.shape.ext.ulc.UlcClipPath}.
           */
          class UlcClipingPath extends sap.gantt.shape.Path {
            /**
             * Creates and initializes a fragment of the Utilization Line Chart.
             */
            constructor(
              /**
               * ID of the new control, generated automatically if no ID is given
               */
              sId?: string,
              /**
               * Initial settings of the new control
               */
              mSettings?: UlcClipingPathOpts
            );

            /**
             * Creates a new subclass of class sap.gantt.shape.ext.ulc.UlcClipingPath with name `sClassName` and enriches
             * it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.shape.Path.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Gets the value of property `d`.
             *
             *  'd' attribute of path element. The 'd' attribute has powerful usages.
             */
            // @ts-ignore
            getD(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): string;
            /**
             * Returns a metadata object for class sap.gantt.shape.ext.ulc.UlcClipingPath.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
          }
          /**
           * This shape is a container of {@link sap.gantt.shape.ext.ulc.UlcClipingPath}.
           */
          class UlcClipPath extends sap.gantt.shape.ClipPath {
            /**
             * Creates and initializes a fragment of the Utilization Line Chart.
             */
            constructor(
              /**
               * ID of the new control, generated automatically if no ID is given
               */
              sId?: string,
              /**
               * Initial settings of the new control
               */
              mSettings?: UlcClipPathOpts
            );

            /**
             * Creates a new subclass of class sap.gantt.shape.ext.ulc.UlcClipPath with name `sClassName` and enriches
             * it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.shape.ClipPath.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Gets the value of property `htmlClass`.
             *
             * Customized HTML classes. To provide multiple classes, separate them using space. Note that each UlcClipPath
             * must have a unique HTML class or a unique set of HTML classes. The 'clip-path' property of UlcOverClipRectangle
             * and UlcUnderClipRectangle identifies HTML classes.
             */
            // @ts-ignore
            getHtmlClass(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): string;
            /**
             * Returns a metadata object for class sap.gantt.shape.ext.ulc.UlcClipPath.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
          }
          /**
           * This shape is a container for {@link sap.gantt.shape.ext.ulc.UlcBorderPath}, {@link sap.gantt.shape.ext.ulc.UlcOverClipRectangle},
           * {@link sap.gantt.shape.ext.ulc.UlcUnderClipRectangle}, {@link sap.gantt.shape.ext.ulc.UlcClipPath}, {@link
           * sap.gantt.shape.ext.ulc.UlcClipingPath}.
           *
           * For each dimension, it has two colors, one is OverCapacity and the other is UnderCapacity. When the
           * `UlcClipPath` of a dimension and `UlcOverClipRectangle` overlap, which means the utilization rate is
           * above 100%, the overlapped part will be colored by OverCapacity. The overlapped part of `UlcClipPath`
           * and `UlcUnderClipRectangle` is colored by UnderCapacity.
           *
           * `UlcClipingPath` is aggregated in `UlcClipPath`. `UlcClipingPath` and `UlcBorderPath` share the same
           * value of property 'd'. `UlcBorderPath` is used to visualize the dimension line.
           */
          class UlcDimension extends sap.gantt.shape.Group {
            /**
             * Creates and initializes a fragment of the Utilization Line Chart.
             */
            constructor(
              /**
               * ID of the new control, generated automatically if no ID is given
               */
              sId?: string,
              /**
               * Initial settings of the new control
               */
              mSettings?: UlcDimensionOpts
            );

            /**
             * Creates a new subclass of class sap.gantt.shape.ext.ulc.UlcDimension with name `sClassName` and enriches
             * it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.shape.Group.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Returns a metadata object for class sap.gantt.shape.ext.ulc.UlcDimension.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
          }
          /**
           * This shape is used to draw a middle line, which indicates the position of 50%.
           *
           *  Graphic Effect is:
           */
          class UlcMiddleLine extends sap.gantt.shape.Line {
            /**
             * Creates and initializes a fragment of the Utilization Line Chart.
             */
            constructor(
              /**
               * ID for the new control, generated automatically if no ID is given
               */
              sId?: string,
              /**
               * Initial settings of the new control
               */
              mSettings?: UlcMiddleLineOpts
            );

            /**
             * Creates a new subclass of class sap.gantt.shape.ext.ulc.UlcMiddleLine with name `sClassName` and enriches
             * it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.shape.Line.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Returns a metadata object for class sap.gantt.shape.ext.ulc.UlcMiddleLine.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Gets the value of property `stroke`.
             *
             *  Standard SVG 'stroke' attribute. **Note:** You can provide the stroke with HTML colors and the URL
             * reference to a paint server. Paint server definitions can be retrieved from paint servers rendered by
             * {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable}, or {@link sap.gantt.GanttChart}.
             *  The default value is "#CAC7BA".
             */
            // @ts-ignore
            getStroke(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): string;
            /**
             * Gets the value of property `strokeDasharray`.
             *
             *  Standard SVG 'stroke-dasharray' attribute.  The default value is "5,5".
             */
            // @ts-ignore
            getStrokeDasharray(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): string;
            /**
             * Gets the value of property `strokeWidth`.
             *
             *  Standard SVG 'stroke-width' attribute.  The default value is 1.
             */
            // @ts-ignore
            getStrokeWidth(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): number;
            /**
             * Gets the value of property `x1`.
             *
             *  x coordinate of the start of the line.
             *
             * Usually an application does not configure this value. Instead, the getter calculates the value of x1
             * by using the view boundary for the visible area in the Gantt Chart.
             */
            // @ts-ignore
            getX1(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and the row data.
               */
              oRowInfo: object
            ): number;
            /**
             * Gets the value of property `x2`.
             *
             *  x coordinate of the end of the line.
             *
             * Usually an application does not configure this value. Instead, the getter calculates the value of 'x2'
             * by using the view boundary's terminal point, which is filtered by the visible area in a Gantt Chart.
             */
            // @ts-ignore
            getX2(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and the row data.
               */
              oRowInfo: object
            ): number;
            /**
             * Gets the value of property `y1`.
             *
             *  y coordinate of the start of the line.
             *
             * At the top of each row, a certain amount of space (in the shape of a rectangular frame) is reserved for
             * over capacity area. You can use 'maxVisibleRatio' in 'shapeConfig' to specify the amount of area to reserve.
             * With the reserved area deducted from a row, the height of the middle line is set to 50% of the row height.
             */
            // @ts-ignore
            getY1(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and the row data.
               */
              oRowInfo: object
            ): number;
            /**
             * Gets the value of property `y2`.
             *
             *  y coordinate of the end of the line.
             *
             * y2 shares the same value with y1.
             */
            // @ts-ignore
            getY2(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and the row data.
               */
              oRowInfo: object
            ): number;
          }
          /**
           * This shape is used to draw the over capacity zone background.
           *
           *  Graphic Effect is:
           */
          class UlcOverCapacityZoneRectangle extends sap.gantt.shape.ext.ulc
            .UlcRectangle {
            /**
             * Creates and initializes a fragment of the Utilization Line Chart.
             */
            constructor(
              /**
               * ID of the new control, generated automatically if no ID is given
               */
              sId?: string,
              /**
               * Initial settings of the new control
               */
              mSettings?: UlcOverCapacityZoneRectangleOpts
            );

            /**
             * Creates a new subclass of class sap.gantt.shape.ext.ulc.UlcOverCapacityZoneRectangle with name `sClassName`
             * and enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.shape.ext.ulc.UlcRectangle.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Gets the value of property `fill`.
             *
             *  Standard SVG 'fill' attribute. **Note:** You can provide `fill` property with the HTML colors and
             * the URL reference to a paint server. Paint server definitions can be retrieved from paint servers rendered
             * by {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable}, or {@link sap.gantt.GanttChart}.
             * The default value of 'fill' is a URL reference.
             */
            // @ts-ignore
            getFill(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): string;
            /**
             * Returns a metadata object for class sap.gantt.shape.ext.ulc.UlcOverCapacityZoneRectangle.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Gets the value of property `stroke`.
             *
             *  Standard SVG 'stroke' attribute. **Note:** HTML colors and url reference to paint server can be provided
             * to stroke. Paint server definitions usually comes from paint servers rendered by {@link sap.gantt.GanttChartContainer},
             * {@link sap.gantt.GanttChartWithTable} or {@link sap.gantt.GanttChart}.  The default value is "#CAC7BA".
             */
            // @ts-ignore
            getStroke(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): string;
            /**
             * Gets the value of property `strokeWidth`.
             *
             *  Standard SVG 'stroke-width' attribute.  The default value is 0.
             */
            // @ts-ignore
            getStrokeWidth(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): number;
          }
          /**
           * This shape is used to draw the over clipping rectangle.
           *
           *  Graphic Effect is:
           */
          class UlcOverClipRectangle extends sap.gantt.shape.ext.ulc
            .UlcRectangle {
            /**
             * Creates and initializes a fragment of the Utilization Line Chart.
             */
            constructor(
              /**
               * ID of the new control, generated automatically if no ID is given
               */
              sId?: string,
              /**
               * Initial settings of the new control
               */
              mSettings?: UlcOverClipRectangleOpts
            );

            /**
             * Creates a new subclass of class sap.gantt.shape.ext.ulc.UlcOverClipRectangle with name `sClassName` and
             * enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.shape.ext.ulc.UlcRectangle.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Gets the value of property `clipPath`.
             *
             *  Standard SVG 'clippath' attribute.
             *
             * The referred ID must be consistent with the HTML class generated by `UlcClipPath`.
             */
            // @ts-ignore
            getClipPath(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): string;
            /**
             * Gets the value of property `fill`.
             *
             *  Standard SVG 'fill' attribute. **Note:** You can provide the `fill` property with HTML colors and
             * the URL reference to a paint server. Paint server definitions can be retrieved from paint servers rendered
             * by {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable}, or {@link sap.gantt.GanttChart}.
             *  The default value is "#FF0000".
             */
            // @ts-ignore
            getFill(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): string;
            /**
             * Returns a metadata object for class sap.gantt.shape.ext.ulc.UlcOverClipRectangle.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
          }
          /**
           * Base class for {@link sap.gantt.shape.ext.ulc.UlcOverCapacityZoneRectangle}, {@link sap.gantt.shape.ext.ulc.UlcOverClipRectangle},
           * {@link sap.gantt.shape.ext.ulc.UlcUnderClipRectangle}, {@link sap.gantt.shape.ext.ulc.UlcTooltipRectangle}.
           *
           * This base class defines a number of shared methods.
           */
          class UlcRectangle extends sap.gantt.shape.Rectangle {
            /**
             * Creates and initializes a fragment of the Utilization Line Chart.
             */
            constructor(
              /**
               * ID for the new control, generated automatically if no ID is given
               */
              sId?: string,
              /**
               * Initial settings of the new control
               */
              mSettings?: UlcRectangleOpts
            );

            /**
             * Creates a new subclass of class sap.gantt.shape.ext.ulc.UlcRectangle with name `sClassName` and enriches
             * it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.shape.Rectangle.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Gets the value of property `height`.
             *
             *  Height of the rectangle. The default value of height is calculated by the over capacity rectangle.
             */
            // @ts-ignore
            getHeight(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): number;
            /**
             * Returns a metadata object for class sap.gantt.shape.ext.ulc.UlcRectangle.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Gets the value of property `width`.
             *
             *  Width of the rectangle.
             *
             * Usually an application does not configure this value. Instead, the getter calculates the value of width
             * by using the view boundary for the visible area in a Gantt Chart.
             */
            // @ts-ignore
            getWidth(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): number;
            /**
             * Gets the value of property `x`.
             *
             *  x coordinate of the rectangle left-top point.
             *
             * Usually an application does not configure this value. Instead, the getter calculates the value of x by
             * using the view boundary for the visible area in a Gantt Chart.
             */
            // @ts-ignore
            getX(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): number;
            /**
             * Gets the value of property `y`.
             *
             *  y coordinate of a rectangle left-top point.
             *
             * Usually application does not configure this value. Instead getter calculates the value of y using parameter
             * `oRowInfo`.  The default value is y coordinate of the top-left point of the row.
             */
            // @ts-ignore
            getY(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): number;
          }
          /**
           * This shape is used to create invisible rectangles with tooltips enabled by tag 'title'.
           *
           *  Graphic Effect is:
           *
           *        dimention1: 0-150%
           * dimention2: 0-110%
           * dimention1:
           * 150%
           * dimention2: 110% dimention1: 150%-70%
           * dimention2: 110%-105%
           * dimention1:
           * 70%
           * dimention2: 105% dimention1: 70%-0
           * dimention2: 105%-0
           */
          class UlcTooltipRectangle extends sap.gantt.shape.ext.ulc
            .UlcRectangle {
            /**
             * Creates and initializes a fragment of the Utilization Line Chart.
             */
            constructor(
              /**
               * ID of the new control, generated automatically if no ID is given
               */
              sId?: string,
              /**
               * Initial settings of the new control
               */
              mSettings?: UlcTooltipRectangleOpts
            );

            /**
             * Creates a new subclass of class sap.gantt.shape.ext.ulc.UlcTooltipRectangle with name `sClassName` and
             * enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.shape.ext.ulc.UlcRectangle.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Gets the value of property `fillOpacity`.
             *
             *  Standard SVG 'fill-Opacity' attribute. The value of fillOpacity for tooltip rectangles must be 0.
             */
            // @ts-ignore
            getFillOpacity(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): number;
            /**
             * Gets the value of property `height`.
             *
             *  Height of the rectangle.  The default value is the height of the row.
             */
            // @ts-ignore
            getHeight(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): number;
            /**
             * Returns a metadata object for class sap.gantt.shape.ext.ulc.UlcTooltipRectangle.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Gets the value of property `strokeOpacity`.
             *
             *  Standard SVG 'stroke-Opacity' attribute. The value of strokeOpacity for tooltip rectangles must be
             * 0.
             */
            // @ts-ignore
            getStrokeOpacity(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): number;
            /**
             * Gets the value of property `title`.
             *
             * Title is visualized as a tooltip by browsers. **Notes:** Use character entities to perform simple text
             * tabbing and breaking. (Use "	" for tab and "
             * " for break.)
             */
            // @ts-ignore
            getTitle(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): string;
            /**
             * Gets the value of property `width`.
             *
             *  Width of the rectangle.
             *
             * Usually an application does not configure this value. Instead, the getter calculates value of width by
             * using the `from` and `to` properties.
             */
            // @ts-ignore
            getWidth(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): number;
            /**
             * Gets the value of property `x`.
             *
             *  x coordinate of the rectangle left-top point.
             *
             * Usually an application does not configure this value. Instead, the getter calculates the value of x by
             * using property `from`.
             */
            // @ts-ignore
            getX(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): number;
          }
          /**
           * This shape is used to draw the under clipping rectangle.
           *
           *  Graphic Effect is:
           */
          class UlcUnderClipRectangle extends sap.gantt.shape.ext.ulc
            .UlcRectangle {
            /**
             * Creates and initializes a fragment of the Utilization Line Chart.
             */
            constructor(
              /**
               * ID for the new control, generated automatically if no ID is given
               */
              sId?: string,
              /**
               * Initial settings of the new control
               */
              mSettings?: UlcUnderClipRectangleOpts
            );

            /**
             * Creates a new subclass of class sap.gantt.shape.ext.ulc.UlcUnderClipRectangle with name `sClassName`
             * and enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.shape.ext.ulc.UlcRectangle.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Gets the value of property `clipPath`.
             *
             *  Standard SVG 'clippath' attribute.
             *
             * The referred ID must be consistent with the html class generated by `UlcClipPath`.
             */
            // @ts-ignore
            getClipPath(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): string;
            /**
             * Gets current value of property `fill`.
             *
             *  Standard SVG 'fill' attribute. **Note:** You can provide the `fill` property with HTML colors and
             * the URL reference to a paint server. Paint server definitions can be retrieved from paint servers rendered
             * by {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable}, or {@link sap.gantt.GanttChart}.
             *  The default value is "#F2F2F2".
             */
            // @ts-ignore
            getFill(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): string;
            /**
             * Gets the value of property `fillOpacity`.
             *
             *  Standard SVG 'fill-Opacity' attribute.  The default value is 0.3.
             */
            // @ts-ignore
            getFillOpacity(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): number;
            /**
             * Gets the value of property `height`.
             *
             *  Height of the rectangle.
             */
            // @ts-ignore
            getHeight(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): number;
            /**
             * Returns a metadata object for class sap.gantt.shape.ext.ulc.UlcUnderClipRectangle.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Gets the value of property `strokeOpacity`.
             *
             *  Standard SVG 'stroke-Opacity' attribute.  The default value is 0.3.
             */
            // @ts-ignore
            getStrokeOpacity(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): number;
            /**
             * Gets the value of property `y`.
             *
             *  y coordinate of the rectangle left-top point.
             */
            // @ts-ignore
            getY(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): number;
          }
          /**
           * ULC is a complex shape. This class is the outer container with tag='g'. All fragments are aggregated
           * into this container. You can remove a fragment from the container if your application does not need it.
           *
           * The container has four aggregations:
           * 	 - {@link sap.gantt.shape.ext.ulc.UlcMiddleLine}(used to draw a middle line, which indicates the position
           * 			of 50% utilization rate),
           * 	 - {@link sap.gantt.shape.ext.ulc.UlcOverCapacityZoneRectangle}(used to draw over capacity Zone),
           * 	 - {@link sap.gantt.shape.ext.ulc.UlcDimension}(used to draw Dimensions, OverCapacityClipping, and UnderCapacityClipping),
           *
           * 	 - {@link sap.gantt.shape.ext.ulc.UlcTooltipRectangle}(used to draw invisible tooltip rectangles for
           * 			each period of capacity change).
           *
           *  Each dimension consists of `UlcOverClipRectangle`, `UlcUnderClipRectangle`, `UlcClipPath`, and `UlcBorderPath`.
           * `UlcClipingPath` is aggregated in `UlcClipPath`.
           *
           * A super class `sap.gantt.shape.ext.ulc.UlcRectangle` is abstracted because the other four rectangles(UlcOverCapacityZoneRectangle,
           * UlcOverClipRectangle, UlcUnderClipRectangle, and UlcTooltipRectangle) share similar logic.
           *
           *  Graphic Effect is:
           *
           *                  dimention1:
           * 0-150%
           * dimention2: 0-110% dimention1:
           * 150%
           * dimention2: 110% dimention1:
           * 150%-70%
           * dimention2: 110%-105% dimention1:
           * 70%
           * dimention2: 105% dimention1:
           * 70%-0
           * dimention2: 105%-0   >100% Zone OverCapacityClipping
           *   50%
           * UnderCapacityClipping Dimensions
           *
           *
           * An example for the structure of data to feed utilization chart:
           *  ` { order: [{ id: "ulc_0", util: [ { dimension: "util_volumn", values:[ { from: "20160123000000", to:
           * "20160123000000", firstOne: true, value: 0 }, { from: "20160124071000", to: "20160124071000", value:
           * 97.6 }, { from: "20160124071000", to: "20160127051300", firstOne: true, value: 97.6 },{ from: "20160127051300",
           * to: "20160127051300", value: 97.6 },{ from: "20160128093312", to: "20160128093312", lastOne: true, value:
           * 0 } ] },{ dimension: "util_mass", values:[ { from: "20160123000000", to: "20160123000000", firstOne:
           * true, value: 0 } { from: "20160124071000", to: "20160124071000", value: 114.5 }, { from: "20160124071000",
           * to: "20160127051300", value: 114.5 },{ from: "20160127051300", to: "20160127051300", value: 114.5 },{
           * from: "20160128093312", to: "20160128093312", lastOne: true, value: 0 } ] } ] }], tooltip: [ { from:
           * "20160123000000", to: "20160124071000", firstOne: true, util_volumn: { previous: 0, next: 97.6 }, util_mass:{
           * previous: 0, next: 114.5 } },{ from: "20160124071000", to: "20160127051300", util_volumn: { val: 97.6
           * }, util_mass:{ val: 114.5 } },{ from: "20160127051300", to: "20160128093312", lastOne: true, util_volumn:
           * { previous: 97.6, next: 0 }, util_mass:{ previous: 114.5, next: 0 } } ] } `
           */
          class UtilizationLineChart extends sap.gantt.shape.Shape {
            /**
             * Creates and initializes a new Utilization Line Chart container class.
             */
            constructor(
              /**
               * ID of the new control, generated automatically if no ID is given
               */
              sId?: string,
              /**
               * Initial settings for the new control
               */
              mSettings?: UtilizationLineChartOpts
            );

            /**
             * Creates a new subclass of class sap.gantt.shape.ext.ulc.UtilizationLineChart with name `sClassName` and
             * enriches it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.shape.Shape.extend}.
             */
            // @ts-ignore
            static extend(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: object,
              /**
               * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Gets the value of property `enableSelection`.
             *
             *  This value controls whether a shape is enabled for selection behavior. The default value for Utilization
             * Line Chart is false.
             */
            // @ts-ignore
            getEnableSelection(
              /**
               * Shape data.
               */
              oData: object,
              /**
               * Information about the row and row data.
               */
              oRowInfo: object
            ): boolean;
            /**
             * Returns a metadata object for class sap.gantt.shape.ext.ulc.UtilizationLineChart.
             */
            // @ts-ignore
            static getMetadata(): sap.ui.base.Metadata;
          }
        }

        interface ChevronOpts extends sap.gantt.shape.PathOpts {
          isClosed?: boolean;

          isDuration?: boolean;

          headLength?: number;

          tailLength?: number;

          height?: number;
        }

        interface CursorOpts extends sap.gantt.shape.PathOpts {
          isClosed?: boolean;

          length?: number;

          width?: number;

          pointHeight?: number;
        }

        interface DiamondOpts extends sap.gantt.shape.PathOpts {
          isClosed?: boolean;

          verticalDiagonal?: number;

          horizontalDiagonal?: number;
        }

        interface IconfontOpts extends sap.gantt.shape.TextOpts {
          name?: string;

          collectionName?: string;
        }

        interface PentangleOpts extends sap.gantt.shape.PolygonOpts {
          radius?: number;

          radius2?: number;
        }

        interface TextRepeatOpts extends sap.gantt.shape.DefinitionsOpts {
          childTagName?: string;

          x?: number;

          y?: number;

          width?: number;

          height?: number;

          dx?: string;

          dy?: string;

          text?: string;

          fontSize?: number;

          fontFamily?: string;
        }

        interface TriangleOpts extends sap.gantt.shape.PathOpts {
          isClosed?: boolean;

          base?: number;

          height?: number;

          distanceOfyAxisHeight?: number;
        }
        /**
         * Chevron shape class using SVG tag 'path'. It's usually used to represent a duration of time.
         *
         *  The following SVG image shows how the properties are designed:
         *
         *             time endTime rotation Center
         * height tailLength headLength
         */
        class Chevron extends sap.gantt.shape.Path {
          /**
           * Creates and initializes a new Chevron class.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings of the new control
             */
            mSettings?: ChevronOpts
          );

          /**
           * Creates a new subclass of class sap.gantt.shape.ext.Chevron with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.shape.Path.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets the value of property `d`.
           *
           *  d attribute of the path element.
           *
           * Your application should not configure this value. Instead, the getter calculates the value of d by using
           * property `time`, `endTime`, `tailLength`, `headLength`, and `height`.
           */
          // @ts-ignore
          getD(
            /**
             * Shape data.
             */
            oData: object,
            /**
             * Information about the row and row data.
             */
            oRowInfo: object
          ): string;
          /**
           * Gets the value of property `headLength`.
           *
           *  Head length of a chevron shape.
           *
           * This property influences property `d`.
           */
          getHeadLength(
            /**
             * Shape data.
             */
            oData: object,
            /**
             * Information about the row and row data.
             */
            oRowInfo: object
          ): number;
          /**
           * Gets the value of property `height`.
           *
           *  Height of a chevron shape.
           *
           * This property influences property `d`.
           */
          getHeight(
            /**
             * Shape data.
             */
            oData: object,
            /**
             * Information about the row and row data.
             */
            oRowInfo: object
          ): number;
          /**
           * Gets the value of property `isClosed`.
           */
          // @ts-ignore
          getIsClosed(
            /**
             * Shape data.
             */
            oData: object,
            /**
             * Information about the row and row data.
             */
            oRowInfo: object
          ): boolean;
          /**
           * Gets the value of property `isDuration`.
           */
          // @ts-ignore
          getIsDuration(
            /**
             * Shape data.
             */
            oData: object,
            /**
             * Information about the row and row data.
             */
            oRowInfo: object
          ): boolean;
          /**
           * Returns a metadata object for class sap.gantt.shape.ext.Chevron.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets the value of property `tailLength`.
           *
           *  Tail length of a chevron shape.
           *
           * This property influences property `d`.
           */
          getTailLength(
            /**
             * Shape data.
             */
            oData: object,
            /**
             * Information about the row and row data.
             */
            oRowInfo: object
          ): number;
          /**
           * Sets a new value for property {@link #getHeadLength headLength}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `5`.
           */
          setHeadLength(
            /**
             * New value for property `headLength`
             */
            fHeadLength: number
          ): sap.gantt.shape.ext.Chevron;
          /**
           * Sets a new value for property {@link #getHeight height}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `15`.
           */
          setHeight(
            /**
             * New value for property `height`
             */
            fHeight: number
          ): sap.gantt.shape.ext.Chevron;
          /**
           * Sets a new value for property {@link #getIsClosed isClosed}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          // @ts-ignore
          setIsClosed(
            /**
             * New value for property `isClosed`
             */
            bIsClosed: boolean
          ): sap.gantt.shape.ext.Chevron;
          /**
           * Sets a new value for property {@link #getIsDuration isDuration}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          // @ts-ignore
          setIsDuration(
            /**
             * New value for property `isDuration`
             */
            bIsDuration: boolean
          ): sap.gantt.shape.ext.Chevron;
          /**
           * Sets a new value for property {@link #getTailLength tailLength}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `5`.
           */
          setTailLength(
            /**
             * New value for property `tailLength`
             */
            fTailLength: number
          ): sap.gantt.shape.ext.Chevron;
        }
        /**
         * Cursor shape class using SVG tag 'path'. It's usually treated as a transient shape.
         *
         *  The following SVG image shows how the properties are designed:
         *
         *
         *        time
         * rotation Center
         * length width
         * point Height
         */
        class Cursor extends sap.gantt.shape.Path {
          /**
           * Creates and initializes a new Cursor class.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings of the new control
             */
            mSettings?: CursorOpts
          );

          /**
           * Creates a new subclass of class sap.gantt.shape.ext.Cursor with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.shape.Path.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets the value of property `d`.
           *
           *  d attribute of the path element.
           *
           * Your application should not configure this value. Instead, the getter calculates the value of d by using
           * properties `length`, `width`, and `pointHeight`. The value of these properties can be retrieved using
           * the corresponding getters (getLength, getWidth, and getPointHeight).
           */
          // @ts-ignore
          getD(
            /**
             * Shape data.
             */
            oData: object,
            /**
             * Information about the row and row data.
             */
            oRowInfo: object
          ): string;
          /**
           * Gets the value of property `isClosed`.
           */
          // @ts-ignore
          getIsClosed(
            /**
             * Shape data.
             */
            oData: object,
            /**
             * Information about the row and row data.
             */
            oRowInfo: object
          ): boolean;
          /**
           * Gets the value of property `length`.
           *
           *  Length of a cursor.
           *
           * This property influences property `d`.
           */
          getLength(
            /**
             * Shape data.
             */
            oData: object,
            /**
             * Information about the row and row data.
             */
            oRowInfo: object
          ): number;
          /**
           * Returns a metadata object for class sap.gantt.shape.ext.Cursor.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets the value of property `pointHeight`.
           *
           *  Point height of a cursor.
           *
           * This property influences property `d`.
           */
          getPointHeight(
            /**
             * Shape data.
             */
            oData: object,
            /**
             * Information about the row and row data.
             */
            oRowInfo: object
          ): number;
          /**
           * Gets the value of property `width`.
           *
           *  Width of a cursor.
           *
           * This property influences property `d`.
           */
          getWidth(
            /**
             * Shape data.
             */
            oData: object,
            /**
             * Information about the row and row data.
             */
            oRowInfo: object
          ): number;
          /**
           * Sets a new value for property {@link #getIsClosed isClosed}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          // @ts-ignore
          setIsClosed(
            /**
             * New value for property `isClosed`
             */
            bIsClosed: boolean
          ): sap.gantt.shape.ext.Cursor;
          /**
           * Sets a new value for property {@link #getLength length}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `10`.
           */
          setLength(
            /**
             * New value for property `length`
             */
            fLength: number
          ): sap.gantt.shape.ext.Cursor;
          /**
           * Sets a new value for property {@link #getPointHeight pointHeight}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `5`.
           */
          setPointHeight(
            /**
             * New value for property `pointHeight`
             */
            fPointHeight: number
          ): sap.gantt.shape.ext.Cursor;
          /**
           * Sets a new value for property {@link #getWidth width}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `5`.
           */
          setWidth(
            /**
             * New value for property `width`
             */
            fWidth: number
          ): sap.gantt.shape.ext.Cursor;
        }
        /**
         * Diamond shape class using SVG tag 'path'. It's usually treated as transient shape.
         *
         *  The following SVG image shows how the properties are designed:
         *
         *
         *       time rotation Center horizontalDiagonal vertitalDiagonal
         */
        class Diamond extends sap.gantt.shape.Path {
          /**
           * Creates and initializes a new Diamond class.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings of the new control
             */
            mSettings?: DiamondOpts
          );

          /**
           * Creates a new subclass of class sap.gantt.shape.ext.Diamond with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.shape.Path.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets the value of property `d`.
           *
           *  d attribute of the path element.
           *
           * You application should not configure this value. Instead, the getter calculates value of d by using properties
           * `horizontalDiagonal` and `verticalDiagonal`. The value of these properties can be retrieved using the
           * corresponding getters (getHorizontalDiagonal and getVerticalDiagonal).
           */
          // @ts-ignore
          getD(
            /**
             * Shape data.
             */
            oData: object,
            /**
             * Information about the row and row data.
             */
            oRowInfo: object
          ): string;
          /**
           * Gets the value of property `horizontalDiagonal`.
           *
           *  Horizontal diagonal of a diamond shape.
           *
           * This property influences property `d`.
           */
          getHorizontalDiagonal(
            /**
             * Shape data.
             */
            oData: object,
            /**
             * Information about the row and row data.
             */
            oRowInfo: object
          ): number;
          /**
           * Gets the value of property `isClosed`.
           */
          // @ts-ignore
          getIsClosed(
            /**
             * Shape data.
             */
            oData: object,
            /**
             * Information about the row and row data.
             */
            oRowInfo: object
          ): boolean;
          /**
           * Returns a metadata object for class sap.gantt.shape.ext.Diamond.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets the value of property `verticalDiagonal`.
           *
           *  Vertical diagonal of a diamond shape.
           *
           * This property influences property `d`.
           */
          getVerticalDiagonal(
            /**
             * Shape data.
             */
            oData: object,
            /**
             * Information about the row and row data.
             */
            oRowInfo: object
          ): number;
          /**
           * Sets a new value for property {@link #getHorizontalDiagonal horizontalDiagonal}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `12`.
           */
          setHorizontalDiagonal(
            /**
             * New value for property `horizontalDiagonal`
             */
            fHorizontalDiagonal: number
          ): sap.gantt.shape.ext.Diamond;
          /**
           * Sets a new value for property {@link #getIsClosed isClosed}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          // @ts-ignore
          setIsClosed(
            /**
             * New value for property `isClosed`
             */
            bIsClosed: boolean
          ): sap.gantt.shape.ext.Diamond;
          /**
           * Sets a new value for property {@link #getVerticalDiagonal verticalDiagonal}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `12`.
           */
          setVerticalDiagonal(
            /**
             * New value for property `verticalDiagonal`
             */
            fVerticalDiagonal: number
          ): sap.gantt.shape.ext.Diamond;
        }
        /**
         * Iconfont shape class using SVG tag 'text'. This shape is usually used to display icons in Gantt chart.
         */
        class Iconfont extends sap.gantt.shape.Text {
          /**
           * Creates and initializes a new Iconfont class.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: IconfontOpts
          );

          /**
           * Creates a new subclass of class sap.gantt.shape.ext.Iconfont with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.shape.Text.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets the value of property `collectionName`.
           *
           *  The collectionName of iconfont as mentioned in property `text`
           */
          getCollectionName(
            /**
             * Shape data.
             */
            oData: object
          ): string;
          /**
           * Gets the value of property `fontFamily`.
           *
           *  Font family of Iconfont.
           */
          // @ts-ignore
          getFontFamily(
            /**
             * Shape data.
             */
            oData: object,
            /**
             * Information about the row and the row data.
             */
            oRowInfo: object
          ): string;
          /**
           * Returns a metadata object for class sap.gantt.shape.ext.Iconfont.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets the value of property `name`.
           *
           *  The name of iconfont as mentioned in property `text`
           */
          getName(
            /**
             * Shape data.
             */
            oData: object
          ): string;
          /**
           * Gets the value of property `text`.
           *
           *  The text string of iconfont is read via {@link sap.ui.IconPool.getIconInfo} passing Name and CollectionName
           * as parameters. To use the SAP openui5 predefined icons, don't set the property CollectionName. To use
           * the icons in other collections, you need register first. For example, after calling function sap.ushell.iconfonts.registerFiori2IconFont,
           * then you can use the icon collection with names "BusinessSuiteInAppSymbols", "Fiori2"...
           */
          // @ts-ignore
          getText(
            /**
             * Shape data.
             */
            oData: object,
            /**
             * Information about the row and the row data.
             */
            oRowInfo: object
          ): string;
          /**
           * Sets a new value for property {@link #getCollectionName collectionName}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setCollectionName(
            /**
             * New value for property `collectionName`
             */
            sCollectionName: string
          ): sap.gantt.shape.ext.Iconfont;
          /**
           * Sets a new value for property {@link #getName name}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setName(
            /**
             * New value for property `name`
             */
            sName: string
          ): sap.gantt.shape.ext.Iconfont;
        }
        /**
         * Pentangle shape class using SVG tag 'polygon'. It's usually treated as a transient shape.
         *
         *  Following SVG image shows how the properties are designed:
         *
         *            time rotation Center radius radius2
         */
        class Pentangle extends sap.gantt.shape.Polygon {
          /**
           * Creates and initializes a new Pentangle class.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings of the new control
             */
            mSettings?: PentangleOpts
          );

          /**
           * Creates a new subclass of class sap.gantt.shape.ext.Pentangle with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.shape.Polygon.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.gantt.shape.ext.Pentangle.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets the value of property `d`.
           *
           *  points attribute of the polygon element.
           *
           * Your application should not configure this value. Instead, the getter calculates the value of d by using
           * properties `radius` and `radus2`. The value of these properties can be retrieved using the corresponding
           * getters (getRadius and getRadius2). If your application overwrites the value of d by configuration or
           * code, accurate results cannot be guaranteed.
           */
          // @ts-ignore
          getPoints(
            /**
             * Shape data.
             */
            oData: object,
            /**
             * Information about the row and row data.
             */
            oRowInfo: object
          ): string;
          /**
           * Gets the value of property `radius`.
           *
           *  Radius of a pentangle shape.
           *
           * This property influences property `points`.
           */
          getRadius(
            /**
             * Shape data.
             */
            oData: object,
            /**
             * Information about the row and row data.
             */
            oRowInfo: object
          ): number;
          /**
           * Gets the value of property `radius2`.
           *
           *  The second radius of a pentangle shape. If this property is not provided, radius2 is set to a value
           * making radius and radius2 fit the golden ratio.
           *
           * This property influences property `points`.
           */
          getRadius2(
            /**
             * Shape data.
             */
            oData: object,
            /**
             * Information about the row and row data.
             */
            oRowInfo: object
          ): number;
          /**
           * Sets a new value for property {@link #getRadius radius}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `10`.
           */
          setRadius(
            /**
             * New value for property `radius`
             */
            fRadius: number
          ): sap.gantt.shape.ext.Pentangle;
          /**
           * Sets a new value for property {@link #getRadius2 radius2}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `undefined`.
           */
          setRadius2(
            /**
             * New value for property `radius2`
             */
            fRadius2: number
          ): sap.gantt.shape.ext.Pentangle;
        }
        /**
         * A TextRepeat definition shape is used to define graphic objects which can be replicated ("tiled") at
         * fixed intervals in the x and y axes to cover the areas to be painted. The text patterns are defined using
         * a 'pattern' element and then referenced by the 'fill' and 'stroke' properties on a given graphics element
         * to indicate that the element will be filled or stroked with the referenced pattern.
         */
        class TextRepeat extends sap.gantt.shape.Definitions {
          /**
           * Creates and initializes a repeatable text pattern defined for later reuse.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: TextRepeatOpts
          );

          /**
           * Creates a new subclass of class sap.gantt.shape.ext.TextRepeat with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.shape.Definitions.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets the value of the `childTagName` property.
           *
           *  Child element of 'defs' element. The default value is 'pattern'.
           */
          // @ts-ignore
          getChildTagName(
            /**
             * Shape data.
             */
            oData: object,
            /**
             * Information about the row and the row data.
             */
            oRowInfo: object
          ): string;
          /**
           * Gets the value of the `dx` property.
           *
           *  dx value of the start position of text pattern tiles.
           */
          getDx(
            /**
             * Shape data.
             */
            oData: object,
            /**
             * Information about the row and the row data.
             */
            oRowInfo: object
          ): string;
          /**
           * Gets the value of the `dy` property.
           *
           *  dy value of the start position of text pattern tiles.
           */
          getDy(
            /**
             * Shape data.
             */
            oData: object,
            /**
             * Information about the row and the row data.
             */
            oRowInfo: object
          ): string;
          /**
           * Gets the value of the `fontFamily` property.
           *
           *  Text font family.
           */
          getFontFamily(
            /**
             * Shape data.
             */
            oData: object,
            /**
             * Information about the row and the row data.
             */
            oRowInfo: object
          ): string;
          /**
           * Gets the value of the `fontSize` property.
           *
           *  Text font size.
           */
          getFontSize(
            /**
             * Shape data.
             */
            oData: object,
            /**
             * Information about the row and the row data.
             */
            oRowInfo: object
          ): number;
          /**
           * Gets the value of the `height` property.
           *
           *  Height of a reference rectangle.
           */
          getHeight(
            /**
             * Shape data.
             */
            oData: object,
            /**
             * Information about the row and the row data.
             */
            oRowInfo: object
          ): number;
          /**
           * Returns a metadata object for class sap.gantt.shape.ext.TextRepeat.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets the value of the `text` property.
           *
           *  Text string.
           */
          getText(
            /**
             * Shape data.
             */
            oData: object,
            /**
             * Information about the row and the row data.
             */
            oRowInfo: object
          ): string;
          /**
           * Gets the value of the `width` property.
           *
           *  Width of a reference rectangle.
           */
          getWidth(
            /**
             * Shape data.
             */
            oData: object,
            /**
             * Information about the row and the row data.
             */
            oRowInfo: object
          ): number;
          /**
           * Gets the value of the `x` property.
           *
           *  x coordinate of the text pattern tiles.
           *
           * Usually applications do not set this value. This getter carries out the calculation using property `time`
           * as a base.
           */
          getX(
            /**
             * Shape data.
             */
            oData: object,
            /**
             * Information about the row and the row data.
             */
            oRowInfo: object
          ): number;
          /**
           * Gets the value of the `y` property.
           *
           *  y coordinate of the text pattern tiles.
           */
          getY(
            /**
             * Shape data.
             */
            oData: object,
            /**
             * Information about the row and the row data.
             */
            oRowInfo: object
          ): number;
          /**
           * Sets a new value for property {@link #getChildTagName childTagName}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `pattern`.
           */
          // @ts-ignore
          setChildTagName(
            /**
             * New value for property `childTagName`
             */
            sChildTagName: string
          ): sap.gantt.shape.ext.TextRepeat;
          /**
           * Sets a new value for property {@link #getDx dx}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setDx(
            /**
             * New value for property `dx`
             */
            sDx: string
          ): sap.gantt.shape.ext.TextRepeat;
          /**
           * Sets a new value for property {@link #getDy dy}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setDy(
            /**
             * New value for property `dy`
             */
            sDy: string
          ): sap.gantt.shape.ext.TextRepeat;
          /**
           * Sets a new value for property {@link #getFontFamily fontFamily}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setFontFamily(
            /**
             * New value for property `fontFamily`
             */
            sFontFamily: string
          ): sap.gantt.shape.ext.TextRepeat;
          /**
           * Sets a new value for property {@link #getFontSize fontSize}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setFontSize(
            /**
             * New value for property `fontSize`
             */
            iFontSize: number
          ): sap.gantt.shape.ext.TextRepeat;
          /**
           * Sets a new value for property {@link #getHeight height}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `15`.
           */
          setHeight(
            /**
             * New value for property `height`
             */
            fHeight: number
          ): sap.gantt.shape.ext.TextRepeat;
          /**
           * Sets a new value for property {@link #getText text}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setText(
            /**
             * New value for property `text`
             */
            sText: string
          ): sap.gantt.shape.ext.TextRepeat;
          /**
           * Sets a new value for property {@link #getWidth width}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setWidth(
            /**
             * New value for property `width`
             */
            fWidth: number
          ): sap.gantt.shape.ext.TextRepeat;
          /**
           * Sets a new value for property {@link #getX x}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setX(
            /**
             * New value for property `x`
             */
            fX: number
          ): sap.gantt.shape.ext.TextRepeat;
          /**
           * Sets a new value for property {@link #getY y}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setY(
            /**
             * New value for property `y`
             */
            fY: number
          ): sap.gantt.shape.ext.TextRepeat;
        }
        /**
         * Triangle shape class using SVG tag 'path'. It's usually treated as a transient shape.
         *
         *  The following image shows how the properties are designed:
         *
         *             time
         * rotation Center
         * height distanceOfyAxisHeight
         * base
         */
        class Triangle extends sap.gantt.shape.Path {
          /**
           * Creates and initializes a new Triangle class.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings of the new control
             */
            mSettings?: TriangleOpts
          );

          /**
           * Creates a new subclass of class sap.gantt.shape.ext.Triangle with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.shape.Path.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets the value of property `base`.
           *
           *  Base side of a triangle.
           *
           * This property influences property `d`.
           */
          getBase(
            /**
             * Shape data.
             */
            oData: object,
            /**
             * Information about the row and row data.
             */
            oRowInfo: object
          ): number;
          /**
           * Gets the value of property `d`.
           *
           *  d attribute of path element.
           *
           * Your application should not configure this value. Instead, the getter calculates the value of d by using
           * properties `time`, `base`, `height`, and `distanceOfyAxisHeight`. The value of these properties can be
           * retrieved from the corresponding getters (getTime, getBase, getHeight, and getDistanceOfyAxisHeight).
           */
          // @ts-ignore
          getD(
            /**
             * Shape data.
             */
            oData: object,
            /**
             * Information about the row and row data.
             */
            oRowInfo: object
          ): string;
          /**
           * Gets the value of property `distanceOfyAxisHeight`.
           *
           *  distanceOfyAxisHeight of a triangle, which refers to the distance between the left point to the altitude
           * of the triangle.
           *
           * This property influences property `d`.
           */
          getDistanceOfyAxisHeight(
            /**
             * Shape data.
             */
            oData: object,
            /**
             * Information about the row and row data.
             */
            oRowInfo: object
          ): number;
          /**
           * Gets the value of property `height`.
           *
           *  Height of a triangle.
           *
           * This property influences property `d`.
           */
          getHeight(
            /**
             * Shape data.
             */
            oData: object,
            /**
             * Information about the row and row data.
             */
            oRowInfo: object
          ): number;
          /**
           * Gets the value of property `isClosed`.
           */
          // @ts-ignore
          getIsClosed(
            /**
             * Shape data.
             */
            oData: object,
            /**
             * Information about the row and row data.
             */
            oRowInfo: object
          ): boolean;
          /**
           * Returns a metadata object for class sap.gantt.shape.ext.Triangle.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Sets a new value for property {@link #getBase base}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `10`.
           */
          setBase(
            /**
             * New value for property `base`
             */
            fBase: number
          ): sap.gantt.shape.ext.Triangle;
          /**
           * Sets a new value for property {@link #getDistanceOfyAxisHeight distanceOfyAxisHeight}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `5`.
           */
          setDistanceOfyAxisHeight(
            /**
             * New value for property `distanceOfyAxisHeight`
             */
            fDistanceOfyAxisHeight: number
          ): sap.gantt.shape.ext.Triangle;
          /**
           * Sets a new value for property {@link #getHeight height}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `10`.
           */
          setHeight(
            /**
             * New value for property `height`
             */
            fHeight: number
          ): sap.gantt.shape.ext.Triangle;
          /**
           * Sets a new value for property {@link #getIsClosed isClosed}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          // @ts-ignore
          setIsClosed(
            /**
             * New value for property `isClosed`
             */
            bIsClosed: boolean
          ): sap.gantt.shape.ext.Triangle;
        }
      }

      interface CircleOpts extends sap.gantt.shape.ShapeOpts {
        tag?: string;

        cx?: number;

        cy?: number;

        r?: number;
      }

      interface ClipPathOpts extends sap.gantt.shape.ShapeOpts {
        tag?: string;

        /**
         * Paths defining the clipPath.
         */
        paths?: sap.gantt.shape.Path[] | sap.gantt.shape.Path;
      }

      interface DefinitionsOpts extends sap.gantt.shape.ShapeOpts {
        tag?: string;

        childTagName?: string;

        /**
         * Definition string. Subclasses can implement their own getters of this property to override the one in
         * this class.
         */
        content?: string;

        /**
         * Unique id for definition.
         */
        referenceId?: string;
      }

      interface GroupOpts extends sap.gantt.shape.ShapeOpts {
        tag?: string;

        RLSAnchors?: object;

        shapes?: sap.gantt.shape.Shape[] | sap.gantt.shape.Shape;
      }

      interface ImageOpts extends sap.gantt.shape.ShapeOpts {
        tag?: string;

        image?: string;

        x?: number;

        y?: number;

        width?: number;

        height?: number;
      }

      interface LineOpts extends sap.gantt.shape.ShapeOpts {
        tag?: string;

        isDuration?: boolean;

        x1?: number;

        y1?: number;

        x2?: number;

        y2?: number;
      }

      interface PathOpts extends sap.gantt.shape.ShapeOpts {
        tag?: string;

        isClosed?: boolean;

        fill?: string;

        d?: string;
      }

      interface PolygonOpts extends sap.gantt.shape.ShapeOpts {
        tag?: string;

        points?: string;
      }

      interface PolylineOpts extends sap.gantt.shape.ShapeOpts {
        tag?: string;

        fill?: string;

        points?: string;
      }

      interface RectangleOpts extends sap.gantt.shape.ShapeOpts {
        tag?: string;

        isDuration?: boolean;

        x?: number;

        y?: number;

        width?: number;

        height?: number;

        rx?: string;

        ry?: string;
      }

      interface ResizeShadowShapeOpts extends sap.gantt.shape.PathOpts {
        height?: number;
      }

      interface SelectedShapeOpts extends sap.gantt.shape.PathOpts {
        fill?: string;

        fillOpacity?: number;

        strokeOpacity?: number;

        height?: number;
      }

      interface ShapeOpts extends sap.ui.core.ElementOpts {
        tag?: string;

        category?: string;

        htmlClass?: string;

        isDuration?: boolean;

        time?: string;

        endTime?: string;

        title?: string;

        ariaLabel?: string;

        xBias?: number;

        yBias?: number;

        fill?: sap.gantt.ValueSVGPaintServer;

        strokeOpacity?: number;

        fillOpacity?: number;

        stroke?: sap.gantt.ValueSVGPaintServer;

        strokeWidth?: number;

        strokeDasharray?: string;

        clipPath?: string;

        transform?: string;

        filter?: string;

        enableHover?: boolean;

        enableDnD?: boolean;

        enableSelection?: boolean;

        enableResize?: boolean;

        rowYCenter?: number;

        rotationCenter?: number[];

        rotationAngle?: number;

        isBulk?: boolean;

        arrayAttribute?: string;

        timeFilterAttribute?: string;

        endTimeFilterAttribute?: string;

        legend?: string;

        /**
         * Selected Shape.
         *
         * Selected shape specifies how to draw the selection high-light. Application can implement it by extending
         * `sap.gantt.shape.SelectedShape` and configure it in `sap.gantt.config.Shape`.
         */
        selectedShape?: sap.gantt.shape.SelectedShape;

        /**
         * Resize Shadow Shape.
         *
         * Resize Shadow shape specifies how to draw the shadow highlight when resizing. Applications can implement
         * it by extending `sap.gantt.shape.ResizeShadowShape` and configure it in `sap.gantt.config.Shape`.
         */
        resizeShadowShape?: sap.gantt.shape.ResizeShadowShape;
      }

      interface TextOpts extends sap.gantt.shape.ShapeOpts {
        tag?: string;

        text?: string;

        x?: number;

        y?: number;

        fontSize?: number;

        textAnchor?: string;

        fontFamily?: string;

        wrapWidth?: number;

        wrapDy?: number;

        truncateWidth?: number;

        ellipsisWidth?: number;
      }
      /**
       * Circle shape class using SVG tag 'circle'. This shape is usually used to represent points in time.
       */
      class Circle extends sap.gantt.shape.Shape {
        /**
         * Creates and initializes a new Circle class.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID of the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: CircleOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.shape.Circle with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.shape.Shape.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets the value of property `cx`.
         *
         *  x coordinate of the center of the circle.
         *
         * Usually applications do not set this value. This getter carries out the calculation using the `time`
         * property as a base and makes some adjustments.
         */
        getCx(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): number;
        /**
         * Gets the current value of property `cy`.
         *
         *  y coordinate of the center of the circle.
         *
         * Usually applications do not set this value. This getter carries out the calculation using parameter `oRowInfo`
         * as a base and makes some adjustments to align the center of the row rectangle along the y axis. If you
         * override the default value calculated by the getter, the alignment of the center is not guaranteed.
         */
        getCy(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): number;
        /**
         * Returns a metadata object for class sap.gantt.shape.Circle.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets the value of property `r`.
         *
         *  Radius of the circle.
         */
        getR(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): number;
        /**
         * Gets the value of property `tag`.
         *
         * SVG tag name of the shape. **Note:** We do not recommend that you change this value using a configuration
         * or coding.
         */
        // @ts-ignore
        getTag(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): string;
        /**
         * Sets a new value for property {@link #getCx cx}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setCx(
          /**
           * New value for property `cx`
           */
          fCx: number
        ): sap.gantt.shape.Circle;
        /**
         * Sets a new value for property {@link #getCy cy}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setCy(
          /**
           * New value for property `cy`
           */
          fCy: number
        ): sap.gantt.shape.Circle;
        /**
         * Sets a new value for property {@link #getR r}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `5`.
         */
        setR(
          /**
           * New value for property `r`
           */
          fR: number
        ): sap.gantt.shape.Circle;
        /**
         * Sets a new value for property {@link #getTag tag}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `circle`.
         */
        // @ts-ignore
        setTag(
          /**
           * New value for property `tag`
           */
          sTag: string
        ): sap.gantt.shape.Circle;
      }
      /**
       * Clippath shape class using SVG container tag 'clippath'. It is usually used together with {@link sap.gantt.shape.Path}
       * as aggregations, and referenced by other shapes by URL.
       */
      class ClipPath extends sap.gantt.shape.Shape {
        /**
         * Creates and initializes a new Clippath class.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID of the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: ClipPathOpts
        );

        /**
         * Adds some path to the aggregation {@link #getPaths paths}.
         */
        addPath(
          /**
           * The path to add; if empty, nothing is inserted
           */
          oPath: sap.gantt.shape.Path
        ): sap.gantt.shape.ClipPath;
        /**
         * Destroys all the paths in the aggregation {@link #getPaths paths}.
         */
        destroyPaths(): sap.gantt.shape.ClipPath;
        /**
         * Creates a new subclass of class sap.gantt.shape.ClipPath with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.shape.Shape.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.gantt.shape.ClipPath.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets content of aggregation {@link #getPaths paths}.
         *
         * Paths defining the clipPath.
         */
        getPaths(): sap.gantt.shape.Path[];
        /**
         * Gets the value of property `tag`.
         *
         * SVG tag name of the shape. **Note:** We do not recommend that you change this value using a configuration
         * or coding.
         */
        // @ts-ignore
        getTag(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): string;
        /**
         * Checks for the provided `sap.gantt.shape.Path` in the aggregation {@link #getPaths paths}. and returns
         * its index if found or -1 otherwise.
         */
        indexOfPath(
          /**
           * The path whose index is looked for
           */
          oPath: sap.gantt.shape.Path
        ): number;
        /**
         * Inserts a path into the aggregation {@link #getPaths paths}.
         */
        insertPath(
          /**
           * The path to insert; if empty, nothing is inserted
           */
          oPath: sap.gantt.shape.Path,
          /**
           * The `0`-based index the path should be inserted at; for a negative value of `iIndex`, the path is inserted
           * at position 0; for a value greater than the current size of the aggregation, the path is inserted at
           * the last position
           */
          iIndex: number
        ): sap.gantt.shape.ClipPath;
        /**
         * Removes all the controls from the aggregation {@link #getPaths paths}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllPaths(): sap.gantt.shape.Path[];
        /**
         * Removes a path from the aggregation {@link #getPaths paths}.
         */
        removePath(
          /**
           * The path to remove or its index or id
           */
          vPath: number | string | sap.gantt.shape.Path
        ): sap.gantt.shape.Path;
        /**
         * Sets a new value for property {@link #getTag tag}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `clippath`.
         */
        // @ts-ignore
        setTag(
          /**
           * New value for property `tag`
           */
          sTag: string
        ): sap.gantt.shape.ClipPath;
      }
      /**
       * Base class for all SVG definitions. It is different from the svgDefs in `GanttChartBase`. It is a container
       * shape and related to shape data.
       *
       *  SVG uses the 'defs' tag to represent graphic objects that can be reused at a later time. Currently
       * `sap.gantt` provides defs like TextRepeat. Applications can also extend this base class to support more
       * functionality.
       */
      class Definitions extends sap.gantt.shape.Shape {
        /**
         * Creates and initializes a new SVG graphic object according to shape data.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID of the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: DefinitionsOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.shape.Definitions with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.shape.Shape.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets the value of the `childTagName` property.
         *
         * The 'defs' element is a container element for referenced elements. The content model for 'defs' is the
         * same as that for the 'g' element; thus, any element that can be a child of a 'g' can also be a child
         * of a 'defs'. The 'childTagName' is the name of any child element of 'defs'.
         */
        getChildTagName(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): string;
        /**
         * Gets current value of property {@link #getContent content}.
         *
         * Definition string. Subclasses can implement their own getters of this property to override the one in
         * this class.
         *
         * Default value is `empty string`.
         */
        getContent(): string;
        /**
         * Returns a metadata object for class sap.gantt.shape.Definitions.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getReferenceId referenceId}.
         *
         * Unique id for definition.
         */
        getReferenceId(): string;
        /**
         * Gets the value of the `tag` property.
         *
         * SVG tag name of the shape. **Note:** We do not recommend that you change this value using a configuration
         * or coding.
         */
        // @ts-ignore
        getTag(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): string;
        /**
         * Sets a new value for property {@link #getChildTagName childTagName}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setChildTagName(
          /**
           * New value for property `childTagName`
           */
          sChildTagName: string
        ): sap.gantt.shape.Definitions;
        /**
         * Sets a new value for property {@link #getContent content}.
         *
         * Definition string. Subclasses can implement their own getters of this property to override the one in
         * this class.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `empty string`.
         */
        setContent(
          /**
           * New value for property `content`
           */
          sContent: string
        ): sap.gantt.shape.Definitions;
        /**
         * Sets a new value for property {@link #getReferenceId referenceId}.
         *
         * Unique id for definition.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setReferenceId(
          /**
           * New value for property `referenceId`
           */
          sReferenceId: string
        ): sap.gantt.shape.Definitions;
        /**
         * Sets a new value for property {@link #getTag tag}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `defs`.
         */
        // @ts-ignore
        setTag(
          /**
           * New value for property `tag`
           */
          sTag: string
        ): sap.gantt.shape.Definitions;
      }
      /**
       * Group shape class using SVG tag 'group'. It is a container shape. Any other shapes can be aggregated
       * under a group.
       */
      class Group extends sap.gantt.shape.Shape {
        /**
         * Creates and initializes a new Group class.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID of the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: GroupOpts
        );

        /**
         * Adds some shape to the aggregation {@link #getShapes shapes}.
         */
        addShape(
          /**
           * The shape to add; if empty, nothing is inserted
           */
          oShape: sap.gantt.shape.Shape
        ): sap.gantt.shape.Group;
        /**
         * Destroys all the shapes in the aggregation {@link #getShapes shapes}.
         */
        destroyShapes(): sap.gantt.shape.Group;
        /**
         * Creates a new subclass of class sap.gantt.shape.Group with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.shape.Shape.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Generate a referenceId according to shape data.
         *
         *  'referenceId' is used to identify Definitions shapes. Aggregation shapes of a Group shape can retrieve
         * the 'referenceId' by their getParentReferenceId method and then consume the corresponding Definition
         * shape.
         */
        genReferenceId(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information of the row and row data.
           */
          oRowInfo: object
        ): string;
        /**
         * Returns a metadata object for class sap.gantt.shape.Group.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * To enable connections between in-row shapes, a custom Group class has to be implemented that extends
         * `sap.gantt.shape.Group`. Additionally, the `getRLSAnchors` method has to be implemented for the Relationship
         * class to know the coordinates of the connection points.
         */
        getRLSAnchors(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowObjectInfo: object
        ): object;
        /**
         * Gets content of aggregation {@link #getShapes shapes}.
         */
        getShapes(): sap.gantt.shape.Shape[];
        /**
         * Gets the value of the `tag` property.
         *
         * SVG tag name of the shape. **Note:** We do not recommend that you change this value using a configuration
         * or coding.
         */
        // @ts-ignore
        getTag(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): string;
        /**
         * Checks for the provided `sap.gantt.shape.Shape` in the aggregation {@link #getShapes shapes}. and returns
         * its index if found or -1 otherwise.
         */
        indexOfShape(
          /**
           * The shape whose index is looked for
           */
          oShape: sap.gantt.shape.Shape
        ): number;
        /**
         * Inserts a shape into the aggregation {@link #getShapes shapes}.
         */
        insertShape(
          /**
           * The shape to insert; if empty, nothing is inserted
           */
          oShape: sap.gantt.shape.Shape,
          /**
           * The `0`-based index the shape should be inserted at; for a negative value of `iIndex`, the shape is inserted
           * at position 0; for a value greater than the current size of the aggregation, the shape is inserted at
           * the last position
           */
          iIndex: number
        ): sap.gantt.shape.Group;
        /**
         * Removes all the controls from the aggregation {@link #getShapes shapes}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllShapes(): sap.gantt.shape.Shape[];
        /**
         * Removes a shape from the aggregation {@link #getShapes shapes}.
         */
        removeShape(
          /**
           * The shape to remove or its index or id
           */
          vShape: number | string | sap.gantt.shape.Shape
        ): sap.gantt.shape.Shape;
        /**
         * Sets a new value for property {@link #getRLSAnchors RLSAnchors}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setRLSAnchors(
          /**
           * New value for property `RLSAnchors`
           */
          oRLSAnchors: object
        ): sap.gantt.shape.Group;
        /**
         * Sets a new value for property {@link #getTag tag}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `g`.
         */
        // @ts-ignore
        setTag(
          /**
           * New value for property `tag`
           */
          sTag: string
        ): sap.gantt.shape.Group;
      }
      /**
       * Image shape class using SVG tag 'image'. This shape is usually used to represent points in time.
       */
      class Image extends sap.gantt.shape.Shape {
        /**
         * Creates and initializes a new Image class.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: ImageOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.shape.Image with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.shape.Shape.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets the value of property `height`.
         *
         *  Height of the image.
         */
        getHeight(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): number;
        /**
         * Gets the value of property `image`.
         *
         *  IRI reference of the image.
         */
        getImage(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): number;
        /**
         * Returns a metadata object for class sap.gantt.shape.Image.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets the value of property `tag`.
         *
         * SVG tag name of the shape. **Note:** We do not recommend that you change this value using a configuration
         * or coding.
         */
        // @ts-ignore
        getTag(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): string;
        /**
         * Gets the value of property `width`.
         *
         *  Width of the image.
         */
        getWidth(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): number;
        /**
         * Gets the current value of property `x`.
         *
         *  x coordinate of the image rectangle.
         *
         * Usually applications do not set this value. This getter carries out the calculation using property `time`
         * as a base and makes some adjustments.
         */
        getX(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): number;
        /**
         * Gets the current value of property `y`.
         *
         *  y coordinate of the image rectangle.
         *
         * Usually applications do not set this value. This getter carries out the calculation using parameter `oRowInfo`
         * as a base and makes some adjustments to align the center of the row rectangle along the y axis. If you
         * override the default value calculated by the getter, the alignment of the center is not guaranteed.
         */
        getY(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): number;
        /**
         * Sets a new value for property {@link #getHeight height}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `20`.
         */
        setHeight(
          /**
           * New value for property `height`
           */
          fHeight: number
        ): sap.gantt.shape.Image;
        /**
         * Sets a new value for property {@link #getImage image}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setImage(
          /**
           * New value for property `image`
           */
          sImage: string
        ): sap.gantt.shape.Image;
        /**
         * Sets a new value for property {@link #getTag tag}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `image`.
         */
        // @ts-ignore
        setTag(
          /**
           * New value for property `tag`
           */
          sTag: string
        ): sap.gantt.shape.Image;
        /**
         * Sets a new value for property {@link #getWidth width}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `20`.
         */
        setWidth(
          /**
           * New value for property `width`
           */
          fWidth: number
        ): sap.gantt.shape.Image;
        /**
         * Sets a new value for property {@link #getX x}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setX(
          /**
           * New value for property `x`
           */
          fX: number
        ): sap.gantt.shape.Image;
        /**
         * Sets a new value for property {@link #getY y}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setY(
          /**
           * New value for property `y`
           */
          fY: number
        ): sap.gantt.shape.Image;
      }
      /**
       * Line shape class using SVG tag 'line'. This shape is usually used to represent durations.
       */
      class Line extends sap.gantt.shape.Shape {
        /**
         * Creates and initializes a new Line class.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: LineOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.shape.Line with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.shape.Shape.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets the value of property `isDuration`.
         */
        // @ts-ignore
        getIsDuration(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): boolean;
        /**
         * Returns a metadata object for class sap.gantt.shape.Line.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets the value of property `tag`.
         *
         * SVG tag name of the shape. **Note:** We do not recommend that you change this value using a configuration
         * or coding.
         */
        // @ts-ignore
        getTag(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): string;
        /**
         * Gets the value of property `x1`.
         *
         *  x coordinate of the start of the line.
         *
         * Usually applications do not set this value. This getter carries out the calculation using property `time`
         * as a base and makes some adjustments.
         */
        getX1(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): number;
        /**
         * Gets the value of property `x2`.
         *
         *  x coordinate of the end of the line.
         *
         * Usually applications do not set this value. This getter carries out the calculation using property `endTime`
         * as a base and makes some adjustments.
         */
        getX2(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): number;
        /**
         * Gets the value of property `y1`.
         *
         *  y coordinate of the start of the line.
         *
         * Usually applications do not set this value. This getter carries out the calculation using parameter `oRowInfo`,
         * and makes some adjustments to align the center of the row rectangle along the y axis. If you override
         * the default value calculated by the getter, the alignment of the center is not guaranteed.
         */
        getY1(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): number;
        /**
         * Gets the value of property `y2`.
         *
         *  y coordinate of the end of the line.
         *
         * Usually applications do not set this value. This getter carries out the calculation using parameter `oRowInfo`
         * as a base and makes some adjustments to align the center of the row rectangle along the y axis. f you
         * override the default value calculated by the getter, the alignment of the center is not guaranteed.
         */
        getY2(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): number;
        /**
         * Sets a new value for property {@link #getIsDuration isDuration}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        // @ts-ignore
        setIsDuration(
          /**
           * New value for property `isDuration`
           */
          bIsDuration: boolean
        ): sap.gantt.shape.Line;
        /**
         * Sets a new value for property {@link #getTag tag}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `line`.
         */
        // @ts-ignore
        setTag(
          /**
           * New value for property `tag`
           */
          sTag: string
        ): sap.gantt.shape.Line;
        /**
         * Sets a new value for property {@link #getX1 x1}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setX1(
          /**
           * New value for property `x1`
           */
          fX1: number
        ): sap.gantt.shape.Line;
        /**
         * Sets a new value for property {@link #getX2 x2}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setX2(
          /**
           * New value for property `x2`
           */
          fX2: number
        ): sap.gantt.shape.Line;
        /**
         * Sets a new value for property {@link #getY1 y1}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setY1(
          /**
           * New value for property `y1`
           */
          fY1: number
        ): sap.gantt.shape.Line;
        /**
         * Sets a new value for property {@link #getY2 y2}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setY2(
          /**
           * New value for property `y2`
           */
          fY2: number
        ): sap.gantt.shape.Line;
      }
      /**
       * Path shape class using SVG tag 'path'.
       *
       *
       *
       *
       *
       *
       *               M100,200 C100,100 250,100 250,200
       * S400,300 400,200
       */
      class Path extends sap.gantt.shape.Shape {
        /**
         * Creates and initializes a new Path class.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID of the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: PathOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.shape.Path with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.shape.Shape.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets the value of property `d`.
         *
         *  d attribute of path element. The 'd' attribute has very powerful grammar. Rich extension of paths
         * is provided in namespace `sap.gantt.shape.ext`.
         *  This shape provides a default implementation of the d attribute:
         *
         *         time endTime
         */
        getD(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): string;
        /**
         * Gets current value of property {@link #getFill fill}.
         *
         * Default value is `none`.
         */
        // @ts-ignore
        getFill(): string;
        /**
         * Gets the value of property `isClosed`.
         *
         *  When this value is true, the 'fill' attribute is applied. Otherwise, the 'fill' attribute is none.
         */
        getIsClosed(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): boolean;
        /**
         * Returns a metadata object for class sap.gantt.shape.Path.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets the value of property `tag`.
         *
         * SVG tag name of the shape. **Note:** We do not recommend that you change this value using a configuration
         * or coding.
         */
        // @ts-ignore
        getTag(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): string;
        /**
         * Sets a new value for property {@link #getD d}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setD(
          /**
           * New value for property `d`
           */
          sD: string
        ): sap.gantt.shape.Path;
        /**
         * Sets a new value for property {@link #getFill fill}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `none`.
         */
        // @ts-ignore
        setFill(
          /**
           * New value for property `fill`
           */
          sFill: string
        ): sap.gantt.shape.Path;
        /**
         * Sets a new value for property {@link #getIsClosed isClosed}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setIsClosed(
          /**
           * New value for property `isClosed`
           */
          bIsClosed: boolean
        ): sap.gantt.shape.Path;
        /**
         * Sets a new value for property {@link #getTag tag}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `path`.
         */
        // @ts-ignore
        setTag(
          /**
           * New value for property `tag`
           */
          sTag: string
        ): sap.gantt.shape.Path;
      }
      /**
       * Polygon shape class using SVG tag 'polygon'.
       */
      class Polygon extends sap.gantt.shape.Shape {
        /**
         * Creates and initializes a new Polygon class.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: PolygonOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.shape.Polygon with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.shape.Shape.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.gantt.shape.Polygon.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets the value of property `points`.
         *
         *  Points attribute of the polygon element. Rich extension of paths is provided in namespace `sap.gantt.shape.ext`.
         *  This shape provides a default implementation of points:
         *
         *        time rotation Center
         */
        getPoints(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): string;
        /**
         * Gets the value of property `tag`.
         *
         * SVG tag name of the shape. **Note:** We do not recommend that you change this value using a configuration
         * or coding.
         */
        // @ts-ignore
        getTag(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): string;
        /**
         * Sets a new value for property {@link #getPoints points}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setPoints(
          /**
           * New value for property `points`
           */
          sPoints: string
        ): sap.gantt.shape.Polygon;
        /**
         * Sets a new value for property {@link #getTag tag}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `polygon`.
         */
        // @ts-ignore
        setTag(
          /**
           * New value for property `tag`
           */
          sTag: string
        ): sap.gantt.shape.Polygon;
      }
      /**
       * Polyline shape class using SVG tag 'polyline'.
       */
      class Polyline extends sap.gantt.shape.Shape {
        /**
         * Creates and initializes a new Polyline class.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: PolylineOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.shape.Polyline with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.shape.Shape.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getFill fill}.
         *
         * Default value is `none`.
         */
        // @ts-ignore
        getFill(): string;
        /**
         * Returns a metadata object for class sap.gantt.shape.Polyline.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets the value of property `points`.
         *
         *  points attribute of the polygon shape. This shape provides a default implementation of points:
         *
         *        time rotation Center
         */
        getPoints(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): string;
        /**
         * Gets the value of property `tag`.
         *
         * SVG tag name of the shape. **Note:** We do not recommend that you change this value using a configuration
         * or coding.
         */
        // @ts-ignore
        getTag(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): string;
        /**
         * Sets a new value for property {@link #getFill fill}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `none`.
         */
        // @ts-ignore
        setFill(
          /**
           * New value for property `fill`
           */
          sFill: string
        ): sap.gantt.shape.Polyline;
        /**
         * Sets a new value for property {@link #getPoints points}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setPoints(
          /**
           * New value for property `points`
           */
          sPoints: string
        ): sap.gantt.shape.Polyline;
        /**
         * Sets a new value for property {@link #getTag tag}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `polyline`.
         */
        // @ts-ignore
        setTag(
          /**
           * New value for property `tag`
           */
          sTag: string
        ): sap.gantt.shape.Polyline;
      }
      /**
       * Rectangle shape class using SVG tag 'rect'. This shape is usually used to represent durations.
       */
      class Rectangle extends sap.gantt.shape.Shape {
        /**
         * Creates and initializes a new Rectangle class.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID of the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: RectangleOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.shape.Rectangle with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.shape.Shape.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets the value of property `height`.
         *
         *  Height of the rectangle.
         */
        getHeight(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): number;
        /**
         * Gets the value of property `isDuration`.
         */
        // @ts-ignore
        getIsDuration(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): boolean;
        /**
         * Returns a metadata object for class sap.gantt.shape.Rectangle.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets the value of property `rx`.
         *
         *  Rx of the rectangle.
         */
        getRx(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): number;
        /**
         * Gets the value of property `ry`.
         *
         *  Ry of the rectangle.
         */
        getRy(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): number;
        /**
         * Gets the value of property `tag`.
         *
         * SVG tag name of the shape. **Note:** TWe do not recommend that you change this value using a configuration
         * or coding.
         */
        // @ts-ignore
        getTag(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): string;
        /**
         * Gets the value of property `width`.
         *
         *  Width of the rectangle.
         *
         * Usually applications do not set this value. This getter carries out the calculation using properties
         * `time` and `endTime`. If you override the default value calculated by the getter, proper rendering is
         * not guaranteed.
         */
        getWidth(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): number;
        /**
         * Gets the value of property `x`.
         *
         *  x coordinate of the top-left corner of the rectangle.
         *
         * Usually applications do not set this value. This getter carries out the calculation using property `time`
         * as a base.
         */
        getX(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): number;
        /**
         * Gets the value of property `y`.
         *
         *  y coordinate of the top-left corner of the rectangle.
         *
         * Usually applications do not set this value. This getter carries out the calculation using parameter `oRowInfo`
         * as a base and uses property `height` as an offset to align the center of the row rectangle along the
         * y axis. If you override the default value calculated by the getter, the alignment of the center is not
         * guaranteed.
         */
        getY(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): number;
        /**
         * Sets a new value for property {@link #getHeight height}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `15`.
         */
        setHeight(
          /**
           * New value for property `height`
           */
          fHeight: number
        ): sap.gantt.shape.Rectangle;
        /**
         * Sets a new value for property {@link #getIsDuration isDuration}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        // @ts-ignore
        setIsDuration(
          /**
           * New value for property `isDuration`
           */
          bIsDuration: boolean
        ): sap.gantt.shape.Rectangle;
        /**
         * Sets a new value for property {@link #getRx rx}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setRx(
          /**
           * New value for property `rx`
           */
          sRx: string
        ): sap.gantt.shape.Rectangle;
        /**
         * Sets a new value for property {@link #getRy ry}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setRy(
          /**
           * New value for property `ry`
           */
          sRy: string
        ): sap.gantt.shape.Rectangle;
        /**
         * Sets a new value for property {@link #getTag tag}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `rect`.
         */
        // @ts-ignore
        setTag(
          /**
           * New value for property `tag`
           */
          sTag: string
        ): sap.gantt.shape.Rectangle;
        /**
         * Sets a new value for property {@link #getWidth width}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setWidth(
          /**
           * New value for property `width`
           */
          fWidth: number
        ): sap.gantt.shape.Rectangle;
        /**
         * Sets a new value for property {@link #getX x}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setX(
          /**
           * New value for property `x`
           */
          fX: number
        ): sap.gantt.shape.Rectangle;
        /**
         * Sets a new value for property {@link #getY y}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setY(
          /**
           * New value for property `y`
           */
          fY: number
        ): sap.gantt.shape.Rectangle;
      }
      /**
       *  Provides an implementation of shadow shapes, allowing you to create a highlighting effect by drawing
       * the shadow shapes with thicker strokes in red.
       */
      class ResizeShadowShape extends sap.gantt.shape.Path {
        /**
         * Constructor for a new ResizeShadowShape.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID of the ResizeShadowShape instance
           */
          sId?: string,
          /**
           * Initial instance for the new control
           */
          mSettings?: ResizeShadowShapeOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.shape.ResizeShadowShape with name `sClassName` and enriches
         * it with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.shape.Path.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getHeight height}.
         *
         * Default value is `15`.
         */
        getHeight(): number;
        /**
         * Returns a metadata object for class sap.gantt.shape.ResizeShadowShape.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Sets a new value for property {@link #getHeight height}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `15`.
         */
        setHeight(
          /**
           * New value for property `height`
           */
          iHeight: number
        ): sap.gantt.shape.ResizeShadowShape;
      }
      /**
       *  Provides an implementation of selected shapes, allowing you to create a highlighting effect by drawing
       * the selected shapes with red and thicker strokes.
       */
      class SelectedShape extends sap.gantt.shape.Path {
        /**
         * Constructor for a new SelectedShape.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: SelectedShapeOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.shape.SelectedShape with name `sClassName` and enriches it
         * with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.shape.Path.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets the value of property `d`.
         *
         *  d attribute of the path element.
         *
         * Usually applications do not set this value. This getter carries out the calculation using properties
         * `time`, `endTime`, `tailLength`, `headLength`, and `height`.
         */
        // @ts-ignore
        getD(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): string;
        /**
         * Gets the value of property `enableDnD`.
         *
         *  This value determines whether the selectedShape of a shape is enabled for drag-and-drop.
         */
        // @ts-ignore
        getEnableDnD(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): boolean;
        /**
         * Gets the value of property `enableSelection`.
         *
         *  This value determines whether the selectedShape of a shape is enabled for selection.
         */
        // @ts-ignore
        getEnableSelection(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): boolean;
        /**
         * Gets current value of property `fill`.
         *
         *  Standard SVG 'fill' attribute. **Note:** HTML color and url reference to paint server can be provided
         * to fill. Paint server definitions usually comes from paint servers rendered by {@link sap.gantt.GanttChartContainer},
         * {@link sap.gantt.GanttChartWithTable} or {@link sap.gantt.GanttChart}.
         */
        // @ts-ignore
        getFill(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information of the row and row data.
           */
          oRowInfo: object
        ): string;
        /**
         * Gets current value of property {@link #getFillOpacity fillOpacity}.
         *
         * Default value is `0`.
         */
        // @ts-ignore
        getFillOpacity(): number;
        /**
         * Gets the value of property `height`.
         *
         *  This value determines the height of the selectedShape.
         */
        getHeight(
          /**
           * Shape data.
           */
          oData: object
        ): number;
        /**
         * Gets current value of property `isDuration`.
         *
         *  When this flag is set to true, the shape is called 'duration shape'. And `time` stands for startTime,
         * `endTime` stands for end time. When this flag is set to be false, the shape is called 'transient shape'.
         * And only `time` is used. Usually these 3 properties are used to determine x position of one shape.
         */
        // @ts-ignore
        getIsDuration(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information of the row and row data.
           */
          oRowInfo: object
        ): boolean;
        /**
         * Returns a metadata object for class sap.gantt.shape.SelectedShape.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets the value of property `stroke`.
         *
         *  Standard SVG 'stroke' attribute. **Note:** An HTML color and URL reference to an SVG definition can
         * be provided for strokes. SVG definitions usually come from SVG definitions rendered by {@link sap.gantt.GanttChartContainer},
         * {@link sap.gantt.GanttChartWithTable}, or {@link sap.gantt.GanttChart}.
         */
        // @ts-ignore
        getStroke(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): string;
        /**
         * Gets current value of property {@link #getStrokeOpacity strokeOpacity}.
         *
         * Default value is `0`.
         */
        // @ts-ignore
        getStrokeOpacity(): number;
        /**
         * Gets the value of property `strokeWidth`.
         *
         *  Standard SVG 'stroke-width' attribute.
         */
        // @ts-ignore
        getStrokeWidth(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): number;
        /**
         * Gets the value of property `transform`.
         *
         *  Standard SVG 'transform' attribute. The implementation of getTransform() provides some logic to enable
         * properties `rotationCenter` and `rotationAngle`. If you override the default value calculated by the
         * getter, proper rotation is not guaranteed.
         */
        // @ts-ignore
        getTransform(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): string;
        /**
         * Sets a new value for property {@link #getFill fill}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `none`.
         */
        // @ts-ignore
        setFill(
          /**
           * New value for property `fill`
           */
          sFill: string
        ): sap.gantt.shape.SelectedShape;
        /**
         * Sets a new value for property {@link #getFillOpacity fillOpacity}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        // @ts-ignore
        setFillOpacity(
          /**
           * New value for property `fillOpacity`
           */
          fFillOpacity: number
        ): sap.gantt.shape.SelectedShape;
        /**
         * Sets a new value for property {@link #getHeight height}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `15`.
         */
        setHeight(
          /**
           * New value for property `height`
           */
          iHeight: number
        ): sap.gantt.shape.SelectedShape;
        /**
         * Sets a new value for property {@link #getStrokeOpacity strokeOpacity}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        // @ts-ignore
        setStrokeOpacity(
          /**
           * New value for property `strokeOpacity`
           */
          fStrokeOpacity: number
        ): sap.gantt.shape.SelectedShape;
      }
      /**
       * Base class for all shape classes.
       *
       *  Shape class is designed to describe how data should be visualized by an SVG tag. Most shape classes
       * contain only properties and only one aggregation:
       * 	 - Some properties come from standard SVG attribute. Examples are `fill`, `stroke` etc.
       * 	 - Some properties designed to put Shape class into Gantt chart's coordinate system, especially the
       * 			X axis called `sap.gantt.misc.AxisTime`. Examples are `time`, `endTime` etc.
       * 	 - Some properties are designed to provide some geometry attributes. Examples are `side`, `center` in
       * 			some extend shapes.
       * 	 - Every shape has aggregation called selectedShape to provide a way to specify how selection of the
       * 			shape should be designed.
       * 	 - Some container shapes like `g` and `clippath` has aggregation to aggregate other shapes in.
       *
       * Because d3 is used underneath and d3 use array to do batch data-binding, therefore Shape classes are
       * not designed in the way of SAPUI5 standard data-binding (one shape instance per data). Instead, each
       * Shape instance stands for a particular way of visualize one data structure. And one Shape instance is
       * used to draw a list of data by Drawers in Gantt chart.
       *
       * Because of this specialty, application cannot instantiate a shape class directly. Instead they can use
       * configuration {@link sap.gantt.config.Shape} to describe which Shape class is used to draw which data
       * in what way. And pass this configuration to Gantt chart control by property `shapes`. Gantt chart control
       * use these configurations to instatiate Shape instances and Drawers. Drawers consumes Shape instances
       * to draw real SVG shapes.
       *
       * Each shape classes are designed to support 'configuration-first' principle. So called configure is the
       * `shapeProperties` property of `sap.gantt.config.Shape`. In this object property, application can provide
       * following things:
       * 	 - A value. Example: `{tooltip: 'svg rocks'}.`
       * 	 - An attribute from data. Example: `{time: {startTime}}`
       * 	 - Formatted attribute from data. `{tooltip: "{time:Timestamp} the stock price falls to {price:Number}."}`
       * 			The typed values are formatted by global legacy number, date and time configurations by {@link sap.gantt.misc.Format}.
       *
       *
       * In many applications, simple configuration or even binding cannot meet business requriement. Therefore
       * applications are allowed to extend shapes and provide their own getter methods to effect all properties
       * by data. For in row shapes, two parameters are injected to help application to do coding. All the shapes
       * provided by Gantt chart follows 'configuration first' principle by invoking method `_configFirst()`.
       * Meaning if application provide value by sap.gantt.config.Shape, the configuration over-write code logic
       * in getters.
       *
       * **Note:** Setter methods are only used for set default values. Because a Shape instance stands for a
       * way of drawing. The instance self does not hold any status (property values). Meanwhile, all getter are
       * injected with actual data and related informations to adapt to d3 paradigm.
       */
      class Shape extends sap.ui.core.Element {
        /**
         * Creates and initializes a new Shape class.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: ShapeOpts
        );

        /**
         * This method must be used to ensure 'configuration-first' principle for extended shapes.
         */
        _configFirst(
          /**
           * Attribute name.
           */
          sAttrName: string,
          /**
           * Shape data.
           */
          oData: object,
          /**
           * whether scale by size mode or not
           */
          bScaleBySapUiSizeMode: boolean
        ): string;
        /**
         * Rotate Shape
         */
        _rotate(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Shape Row Info.
           */
          oRowInfo: object,
          /**
           * Return Value.
           */
          aRetVal: object
        ): void;
        /**
         * Provide logic for rotation considering RTL.
         */
        _rtlRotation(
          /**
           * Rotation angle.
           */
          nAngle: number
        ): number;
        /**
         * Translate Shape
         */
        _translate(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Shape Row Info.
           */
          oRowInfo: object,
          /**
           * Return Value.
           */
          aRetVal: object
        ): void;
        /**
         * Destroys the resizeShadowShape in the aggregation {@link #getResizeShadowShape resizeShadowShape}.
         */
        destroyResizeShadowShape(): sap.gantt.shape.Shape;
        /**
         * Destroys the selectedShape in the aggregation {@link #getSelectedShape selectedShape}.
         */
        destroySelectedShape(): sap.gantt.shape.Shape;
        /**
         * Creates a new subclass of class sap.gantt.shape.Shape with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property `ariaLabel`.
         *
         * Arial Label enables screen readers.
         */
        getAriaLabel(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information of the row and row data.
           */
          oRowInfo: object
        ): string;
        /**
         * Gets current value of property `arrayAttribute`.
         *
         *  Specify which attribute is child array.
         */
        getArrayAttribute(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information of the row and row data.
           */
          oRowInfo: object
        ): string;
        /**
         * Get the AxisTime of gantt chart instance
         */
        getAxisTime(): object;
        /**
         * Gets current value of property `category`.
         *
         * Values are in enum {@link sap.gantt.shape.ShapeCategory}.
         */
        getCategory(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information of the row and row data.
           */
          oRowInfo: object
        ): string;
        /**
         * Gets current value of property `clipPath`.
         *
         *  Standard SVG 'clippath' attribute.
         */
        getClipPath(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information of the row and row data.
           */
          oRowInfo: object
        ): string;
        /**
         * Gets current value of property `enableDnD`.
         *
         *  This value controls whether a shape is enabled for drag-and-drop behavior.
         */
        getEnableDnD(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information of the row and row data.
           */
          oRowInfo: object
        ): boolean;
        /**
         * Gets current value of property `enableHover`.
         *
         *  This value controls whether a shape is enabled to fire mouse enter and leave event.
         */
        getEnableHover(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information of the row and row data.
           */
          oRowInfo: object
        ): boolean;
        /**
         * Gets current value of property `enableResize`.
         *
         *  This value controls whether a shape is enabled for the resize behavior.
         */
        getEnableResize(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information of the row and row data.
           */
          oRowInfo: object
        ): boolean;
        /**
         * Gets current value of property `enableSelection`.
         *
         *  This value controls whether a shape is enabled for selection behavior.
         */
        getEnableSelection(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information of the row and row data.
           */
          oRowInfo: object
        ): boolean;
        /**
         * Gets current value of property `endTime`.
         *
         * End timestamp for duration shape.
         */
        getEndTime(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information of the row and row data.
           */
          oRowInfo: object
        ): string;
        /**
         * Gets current value of property `endTimeFilterAttribute`.
         *
         *  Specify which is end time attribute of items in child array.
         */
        getEndTimeFilterAttribute(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information of the row and row data.
           */
          oRowInfo: object
        ): string;
        /**
         * Gets current value of property `fill`.
         *
         *  Standard SVG 'fill' attribute. **Note:** HTML color and url reference to paint server can be provided
         * to fill. Paint server definitions usually comes from paint servers rendered by {@link sap.gantt.GanttChartContainer},
         * {@link sap.gantt.GanttChartWithTable} or {@link sap.gantt.GanttChart}.
         */
        getFill(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information of the row and row data.
           */
          oRowInfo: object
        ): string;
        /**
         * Gets current value of property `fillOpacity`.
         *
         *  Standard SVG 'fill-Opacity' attribute.
         */
        getFillOpacity(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information of the row and row data.
           */
          oRowInfo: object
        ): number;
        /**
         * Gets current value of property `filter`.
         *
         *  Standard SVG 'filter' attribute. Usually value of filter is an url referenced from paint server definition
         * rendered by {@link sap.gantt.GanttChartContainer}, {@link sap.gantt.GanttChartWithTable} or {@link sap.gantt.GanttChart}.
         */
        getFilter(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information of the row and row data.
           */
          oRowInfo: object
        ): string;
        /**
         * Gets current value of property `htmlClass`.
         *
         * Customized html classes. Multiple classes can be provided and seperated by space.
         */
        getHtmlClass(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information of the row and row data.
           */
          oRowInfo: object
        ): string;
        /**
         * Gets current value of property `isBulk`.
         *
         *  Gantt chart do filtering of data by timestamp for performance sake. For simple shapes which has `time`
         * or `endTime` provided, set this flag to false. For shapes (path or polygon) which connect a list of data,
         * set this value to false. And if filtering is required to next level data, provide `arrayAttribute`, `timeFilterAttribute`
         * and `endTimeFilterAttribute` in combination.
         */
        getIsBulk(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information of the row and row data.
           */
          oRowInfo: object
        ): boolean;
        /**
         * Gets current value of property `isDuration`.
         *
         *  When this flag is set to true, the shape is called 'duration shape'. And `time` stands for startTime,
         * `endTime` stands for end time. When this flag is set to be false, the shape is called 'transient shape'.
         * And only `time` is used. Usually these 3 properties are used to determine x position of one shape.
         */
        getIsDuration(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information of the row and row data.
           */
          oRowInfo: object
        ): boolean;
        /**
         * Gets legend value of property `legend`.
         *
         *  Specifies the legend text of the shape.
         */
        getLegend(
          /**
           * Shape data.
           */
          oData: object
        ): string;
        /**
         * Returns a metadata object for class sap.gantt.shape.Shape.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Retrieves the parent shape's referenceId.
         *
         *  The referenceId, which is related to shape data, is generated by a Group shape. Aggregation shapes
         * can use this method to retrieve the referenceId.
         */
        getParentReferenceId(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information of the row and row data.
           */
          oRowInfo: object
        ): string;
        /**
         * Gets content of aggregation {@link #getResizeShadowShape resizeShadowShape}.
         *
         * Resize Shadow Shape.
         *
         * Resize Shadow shape specifies how to draw the shadow highlight when resizing. Applications can implement
         * it by extending `sap.gantt.shape.ResizeShadowShape` and configure it in `sap.gantt.config.Shape`.
         */
        getResizeShadowShape(): sap.gantt.shape.ResizeShadowShape;
        /**
         * Gets current value of property `rotationAngle`.
         *
         *  This value is used in combination of property `rotationCenter`. By providing both shape can be rotated
         * with any angle around rotation center.
         */
        getRotationAngle(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information of the row and row data.
           */
          oRowInfo: object
        ): number;
        /**
         * Gets current value of property `rotationCenter`.
         *
         *  This value is used in combination of property `rotationAngle`. By providing both shape can be rotated
         * with any angle around rotation center. Default implementation is the coordinate at `time` in x coordinate,
         * and `rowYCenter` in y coordinate. If application over-write this property by configuration or code, the
         * logic cannot be guaranteed.
         */
        getRotationCenter(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information of the row and row data.
           */
          oRowInfo: object
        ): any[];
        /**
         * Gets current value of property `rowYCenter`.
         *
         *  Default implementation is return the middle position of the row in y direction. If application over-write
         * this property by configuration or code, the logic cannot be guaranteed.
         */
        getRowYCenter(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information of the row and row data.
           */
          oRowInfo: object
        ): any[];
        /**
         * Gets content of aggregation {@link #getSelectedShape selectedShape}.
         *
         * Selected Shape.
         *
         * Selected shape specifies how to draw the selection high-light. Application can implement it by extending
         * `sap.gantt.shape.SelectedShape` and configure it in `sap.gantt.config.Shape`.
         */
        getSelectedShape(): sap.gantt.shape.SelectedShape;
        /**
         * This method is used to get view boundary for visible area in Gantt Chart. The view boundary is a range
         * of x-coordinate for visible area.
         */
        getShapeViewBoundary(): any[];
        /**
         * Gets current value of property `stroke`.
         *
         *  Standard SVG 'stroke' attribute. **Note:** HTML color and url reference to paint server can be provided
         * to stroke. Paint server definitions usually comes from paint servers rendered by {@link sap.gantt.GanttChartContainer},
         * {@link sap.gantt.GanttChartWithTable} or {@link sap.gantt.GanttChart}.
         */
        getStroke(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information of the row and row data.
           */
          oRowInfo: object
        ): string;
        /**
         * Gets current value of property `strokeDasharray`.
         *
         *  Standard SVG 'stroke-dasharray' attribute.
         */
        getStrokeDasharray(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information of the row and row data.
           */
          oRowInfo: object
        ): string;
        /**
         * Gets current value of property `strokeOpacity`.
         *
         *  Standard SVG 'stroke-Opacity' attribute.
         */
        getStrokeOpacity(
          /**
           * Shape data.
           */
          oData: object
        ): number;
        /**
         * Gets current value of property `strokeWidth`.
         *
         *  Standard SVG 'stroke-width' attribute.
         */
        getStrokeWidth(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information of the row and row data.
           */
          oRowInfo: object
        ): number;
        /**
         * Get the shape style string
         */
        getStyle(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information of the row and row data.
           */
          oRowInfo: object
        ): string;
        /**
         * Gets current value of property `tag`.
         *
         * SVG tag name of the shape. **Note:** This value is not recommended to be over-written by configuration
         * or coding.
         */
        getTag(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information of the row and row data.
           */
          oRowInfo: object
        ): string;
        /**
         * Gets current value of property `time`.
         *
         * Timestamp for transient shape or start timestamp for duration shape.
         */
        getTime(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information of the row and row data.
           */
          oRowInfo: object
        ): string;
        /**
         * Gets current value of property `timeFilterAttribute`.
         *
         *  Specify which is time attribute of items in child array.
         */
        getTimeFilterAttribute(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information of the row and row data.
           */
          oRowInfo: object
        ): string;
        /**
         * Gets current value of property `title`.
         *
         * Title is visualized as tooltip by browser. **Notes:** Use character entity to do simple text tabbing
         * and breaking. (Use "	" for tab and "
         * " for break.)
         */
        getTitle(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information of the row and row data.
           */
          oRowInfo: object
        ): string;
        /**
         * Gets current value of property `transform`.
         *
         *  Standard SVG 'transform' attribute. Some logic in getTransform() is provided to enable property `rotationCenter`
         * and `rotationAngle`. If application over-write this property by configuration or coding, rotation behavior
         * cannot be guaranteed.
         */
        getTransform(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information of the row and row data.
           */
          oRowInfo: object
        ): string;
        /**
         * Gets current value of property `xBias`.
         *
         *  Fine-tune x coordinate. This value only works for category `inRowShape`. Shape usually determines
         * position in x coordinate by property `isDuration`, `time` and `endTime`. Application can use this property
         * to do some x coordinate adjustment in pixel. The xBias will be automatically mirrored for RTL mode. It
         * means if you set 10 to property xBias, in RTL mode, the value of the xBias will be -10.
         */
        getXBias(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information of the row and row data.
           */
          oRowInfo: object
        ): number;
        /**
         * Gets current value of property `yBias`.
         *
         *  Fine-tune y coordinate. This value only works for category `inRowShape`. Y coordinate is automatically
         * determined by row. Application can use this property to do some y coordinate adjustment in pixel.
         */
        getYBias(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information of the row and row data.
           */
          oRowInfo: object
        ): number;
        /**
         * Sets a new value for property {@link #getAriaLabel ariaLabel}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setAriaLabel(
          /**
           * New value for property `ariaLabel`
           */
          sAriaLabel: string
        ): sap.gantt.shape.Shape;
        /**
         * Sets a new value for property {@link #getArrayAttribute arrayAttribute}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setArrayAttribute(
          /**
           * New value for property `arrayAttribute`
           */
          sArrayAttribute: string
        ): sap.gantt.shape.Shape;
        /**
         * Sets a new value for property {@link #getCategory category}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `sap.gantt.shape.ShapeCategory.InRowShape`.
         */
        setCategory(
          /**
           * New value for property `category`
           */
          sCategory: string
        ): sap.gantt.shape.Shape;
        /**
         * Sets a new value for property {@link #getClipPath clipPath}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setClipPath(
          /**
           * New value for property `clipPath`
           */
          sClipPath: string
        ): sap.gantt.shape.Shape;
        /**
         * Sets a new value for property {@link #getEnableDnD enableDnD}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setEnableDnD(
          /**
           * New value for property `enableDnD`
           */
          bEnableDnD: boolean
        ): sap.gantt.shape.Shape;
        /**
         * Sets a new value for property {@link #getEnableHover enableHover}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setEnableHover(
          /**
           * New value for property `enableHover`
           */
          bEnableHover: boolean
        ): sap.gantt.shape.Shape;
        /**
         * Sets a new value for property {@link #getEnableResize enableResize}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setEnableResize(
          /**
           * New value for property `enableResize`
           */
          bEnableResize: boolean
        ): sap.gantt.shape.Shape;
        /**
         * Sets a new value for property {@link #getEnableSelection enableSelection}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setEnableSelection(
          /**
           * New value for property `enableSelection`
           */
          bEnableSelection: boolean
        ): sap.gantt.shape.Shape;
        /**
         * Sets a new value for property {@link #getEndTime endTime}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setEndTime(
          /**
           * New value for property `endTime`
           */
          sEndTime: string
        ): sap.gantt.shape.Shape;
        /**
         * Sets a new value for property {@link #getEndTimeFilterAttribute endTimeFilterAttribute}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setEndTimeFilterAttribute(
          /**
           * New value for property `endTimeFilterAttribute`
           */
          sEndTimeFilterAttribute: string
        ): sap.gantt.shape.Shape;
        /**
         * Sets a new value for property {@link #getFill fill}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setFill(
          /**
           * New value for property `fill`
           */
          sFill: sap.gantt.ValueSVGPaintServer
        ): sap.gantt.shape.Shape;
        /**
         * Sets a new value for property {@link #getFillOpacity fillOpacity}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `1`.
         */
        setFillOpacity(
          /**
           * New value for property `fillOpacity`
           */
          fFillOpacity: number
        ): sap.gantt.shape.Shape;
        /**
         * Sets a new value for property {@link #getFilter filter}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setFilter(
          /**
           * New value for property `filter`
           */
          sFilter: string
        ): sap.gantt.shape.Shape;
        /**
         * Sets a new value for property {@link #getHtmlClass htmlClass}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setHtmlClass(
          /**
           * New value for property `htmlClass`
           */
          sHtmlClass: string
        ): sap.gantt.shape.Shape;
        /**
         * Sets a new value for property {@link #getIsBulk isBulk}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setIsBulk(
          /**
           * New value for property `isBulk`
           */
          bIsBulk: boolean
        ): sap.gantt.shape.Shape;
        /**
         * Sets a new value for property {@link #getIsDuration isDuration}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setIsDuration(
          /**
           * New value for property `isDuration`
           */
          bIsDuration: boolean
        ): sap.gantt.shape.Shape;
        /**
         * Sets a new value for property {@link #getLegend legend}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setLegend(
          /**
           * New value for property `legend`
           */
          sLegend: string
        ): sap.gantt.shape.Shape;
        /**
         * Sets the aggregated {@link #getResizeShadowShape resizeShadowShape}.
         */
        setResizeShadowShape(
          /**
           * The resizeShadowShape to set
           */
          oResizeShadowShape: sap.gantt.shape.ResizeShadowShape
        ): sap.gantt.shape.Shape;
        /**
         * Sets a new value for property {@link #getRotationAngle rotationAngle}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setRotationAngle(
          /**
           * New value for property `rotationAngle`
           */
          fRotationAngle: number
        ): sap.gantt.shape.Shape;
        /**
         * Sets a new value for property {@link #getRotationCenter rotationCenter}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setRotationCenter(
          /**
           * New value for property `rotationCenter`
           */
          sRotationCenter: number[]
        ): sap.gantt.shape.Shape;
        /**
         * Sets a new value for property {@link #getRowYCenter rowYCenter}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `7.5`.
         */
        setRowYCenter(
          /**
           * New value for property `rowYCenter`
           */
          fRowYCenter: number
        ): sap.gantt.shape.Shape;
        /**
         * Sets the aggregated {@link #getSelectedShape selectedShape}.
         */
        setSelectedShape(
          /**
           * The selectedShape to set
           */
          oSelectedShape: sap.gantt.shape.SelectedShape
        ): sap.gantt.shape.Shape;
        /**
         * Sets a new value for property {@link #getStroke stroke}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setStroke(
          /**
           * New value for property `stroke`
           */
          sStroke: sap.gantt.ValueSVGPaintServer
        ): sap.gantt.shape.Shape;
        /**
         * Sets a new value for property {@link #getStrokeDasharray strokeDasharray}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setStrokeDasharray(
          /**
           * New value for property `strokeDasharray`
           */
          sStrokeDasharray: string
        ): sap.gantt.shape.Shape;
        /**
         * Sets a new value for property {@link #getStrokeOpacity strokeOpacity}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `1`.
         */
        setStrokeOpacity(
          /**
           * New value for property `strokeOpacity`
           */
          fStrokeOpacity: number
        ): sap.gantt.shape.Shape;
        /**
         * Sets a new value for property {@link #getStrokeWidth strokeWidth}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setStrokeWidth(
          /**
           * New value for property `strokeWidth`
           */
          fStrokeWidth: number
        ): sap.gantt.shape.Shape;
        /**
         * Sets a new value for property {@link #getTag tag}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setTag(
          /**
           * New value for property `tag`
           */
          sTag: string
        ): sap.gantt.shape.Shape;
        /**
         * Sets a new value for property {@link #getTime time}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setTime(
          /**
           * New value for property `time`
           */
          sTime: string
        ): sap.gantt.shape.Shape;
        /**
         * Sets a new value for property {@link #getTimeFilterAttribute timeFilterAttribute}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setTimeFilterAttribute(
          /**
           * New value for property `timeFilterAttribute`
           */
          sTimeFilterAttribute: string
        ): sap.gantt.shape.Shape;
        /**
         * Sets a new value for property {@link #getTitle title}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setTitle(
          /**
           * New value for property `title`
           */
          sTitle: string
        ): sap.gantt.shape.Shape;
        /**
         * Sets a new value for property {@link #getTransform transform}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setTransform(
          /**
           * New value for property `transform`
           */
          sTransform: string
        ): sap.gantt.shape.Shape;
        /**
         * Sets a new value for property {@link #getXBias xBias}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setXBias(
          /**
           * New value for property `xBias`
           */
          fXBias: number
        ): sap.gantt.shape.Shape;
        /**
         * Sets a new value for property {@link #getYBias yBias}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setYBias(
          /**
           * New value for property `yBias`
           */
          fYBias: number
        ): sap.gantt.shape.Shape;
      }
      /**
       * Text shape class using SVG tag 'text'. This shape is usually used to represent points in time.
       *
       *
       *  Hello, out there
       *
       *
       *
       *   Normal text Text with line-through Underlined text  One  word  has  different  underlining
       */
      class Text extends sap.gantt.shape.Shape {
        /**
         * Creates and initializes a new Text class.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: TextOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.shape.Text with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.shape.Shape.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets the value of property `ellipsisWidth`.
         *
         *  Ellipsis width if truncate happens. Default value 12 indicates 12px length reserved for ellipsis.
         * If the value is -1, no ellipsis appears even truncate happens. If the value is bigger than -1, ellipsis
         * will be 3 dots in length of this value.
         */
        getEllipsisWidth(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): number;
        /**
         * Gets the value of property `fontFamily`.
         *
         *  Text font family.
         */
        getFontFamily(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): string;
        /**
         * Gets the value of property `fontSize`.
         *
         *  Text font size.
         */
        getFontSize(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): number;
        /**
         * Returns a metadata object for class sap.gantt.shape.Text.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets the value of property `tag`.
         *
         * SVG tag name of the shape. **Note:** We do not recommend that you change this value using a configuration
         * or coding.
         */
        // @ts-ignore
        getTag(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): string;
        /**
         * Gets the value of property `text`.
         *
         *  Text string.
         */
        getText(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): string;
        /**
         * Gets the value of property `textAnchor`.
         *
         *  Text anchor. Possible values are 'start', 'middle', and 'end'.
         */
        getTextAnchor(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): string;
        /**
         * Gets the value of property `truncateWidth`.
         *
         *  Truncating width. Default value -1 indicates truncating function is not activated. To enable truncating,
         * give a truncate width here. If text length exceeds truncate width, text is truncated.
         */
        getTruncateWidth(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): number;
        /**
         * Gets the value of property `x`.
         *
         *  x coordinate of the bottom-left corner of the rectangle.
         *
         * Usually applications do not set this value. This getter carries out the calculation using property `time`.
         * If you override the default value calculated by the getter, the alignment of the center is not guaranteed.
         */
        getX(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): number;
        /**
         * Gets the value of property `y`.
         *
         *  y coordinate of the bottom-left corner of the rectangle.
         *
         * Usually applications do not set this value. This getter carries out the calculation using parameter `oRowInfo`
         * and property `height` to align the center of the row rectangle along the y axis. If you override the
         * default value calculated by the getter, the alignment of the center is not guaranteed.
         */
        getY(
          /**
           * Shape data.
           */
          oData: object,
          /**
           * Information about the row and the row data.
           */
          oRowInfo: object
        ): number;
        /**
         * Sets a new value for property {@link #getEllipsisWidth ellipsisWidth}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `12`.
         */
        setEllipsisWidth(
          /**
           * New value for property `ellipsisWidth`
           */
          fEllipsisWidth: number
        ): sap.gantt.shape.Text;
        /**
         * Sets a new value for property {@link #getFontFamily fontFamily}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setFontFamily(
          /**
           * New value for property `fontFamily`
           */
          sFontFamily: string
        ): sap.gantt.shape.Text;
        /**
         * Sets a new value for property {@link #getFontSize fontSize}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `10`.
         */
        setFontSize(
          /**
           * New value for property `fontSize`
           */
          iFontSize: number
        ): sap.gantt.shape.Text;
        /**
         * Sets a new value for property {@link #getTag tag}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `text`.
         */
        // @ts-ignore
        setTag(
          /**
           * New value for property `tag`
           */
          sTag: string
        ): sap.gantt.shape.Text;
        /**
         * Sets a new value for property {@link #getText text}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setText(
          /**
           * New value for property `text`
           */
          sText: string
        ): sap.gantt.shape.Text;
        /**
         * Sets a new value for property {@link #getTextAnchor textAnchor}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `start`.
         */
        setTextAnchor(
          /**
           * New value for property `textAnchor`
           */
          sTextAnchor: string
        ): sap.gantt.shape.Text;
        /**
         * Sets a new value for property {@link #getTruncateWidth truncateWidth}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `-1`.
         */
        setTruncateWidth(
          /**
           * New value for property `truncateWidth`
           */
          fTruncateWidth: number
        ): sap.gantt.shape.Text;
        /**
         * Sets a new value for property {@link #getWrapDy wrapDy}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `20`.
         */
        setWrapDy(
          /**
           * New value for property `wrapDy`
           */
          fWrapDy: number
        ): sap.gantt.shape.Text;
        /**
         * Sets a new value for property {@link #getWrapWidth wrapWidth}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `-1`.
         */
        setWrapWidth(
          /**
           * New value for property `wrapWidth`
           */
          fWrapWidth: number
        ): sap.gantt.shape.Text;
        /**
         * Sets a new value for property {@link #getX x}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setX(
          /**
           * New value for property `x`
           */
          fX: number
        ): sap.gantt.shape.Text;
        /**
         * Sets a new value for property {@link #getY y}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setY(
          /**
           * New value for property `y`
           */
          fY: number
        ): sap.gantt.shape.Text;
      }
    }

    namespace axistime {
      interface AxisTimeStrategyBaseOpts extends sap.ui.core.ElementOpts {
        /**
         * Defines granularity levels, labelling formats, and range of the time line.
         * 	 - granularity level: time span between two neighboring vertical lines. Examples: 12 hours.
         * 	 - labelling format: time formats for the upper row and lower row in the time line. These two rows do
         * 			not have to share the same format.
         * 	 - range: defines a certain length in pixel. Gantt Chart loops the granularity levels from the beginning
         * 			and chooses the first granularity level with the time span that consumes more than the defined length.
         * 			For example, if the current range is 90, Gantt Chart loops the granularity levels from the default initial
         * 			granularity level 5min. If the 6hour granularity level consumes 50 pixels, 12hour consumes 100 pixels,
         * 			and 1Day consumes 200 pixels, the 12hour granularity level is selected as the current granularity level
         * 			as it's the first level with the time span that consumes more than 90 pixels.
         *
         * The granularity level is a JSON object with the granularity as the key and some internal information
         * such as formatting.
         *
         * Take the `"12hour"` granularity level for example.
         * 	 - `"12hour":` - Granularity level ID.
         * 	 `"innerInterval"` - Time interval between neighboring vertical lines is 12 hours.
         * 	`"unit": sap.gantt.config.TimeUnit.day` - Time unit is day.
         * 	 - `"span": 1` - Span is 1.
         * 	 - `"range": 90` - This granularity level is selected as the current level if 12 hours is the first
         * 			time span that consumes more than 90 pixels to be displayed in the chart area.
         * 	 -  `largeInterval` - Time interval of the upper row in the timeline is 1 day. Formatted in the locale
         * 			language with the format string. This zoom level implements an interval larger than the interval in the
         * 			default zoom level.
         * 	`"unit": sap.gantt.config.TimeUnit.day` Time unit is day.
         * 	 - `"span": 1` - Time span is 1.
         * 	 - `"format": "cccc dd.M.yyyy"` - Formats the string in CLDR date/time symbols.
         * 	 - `"pattern": "yyyy"` -Aa data pattern in LDML format. This setting takes precedence over the setting
         * 			of "format".
         * 	 - `"relativeTime": true` - Specifies whether or not to use relative time mode, which defaults to "false".
         * 			When you set this property to "true", Gantt Chart ignores the values of "format" and "pattern". In this
         * 			mode, if the largeInterval or the smallInterval of the timeline option uses the "sap.gantt.config.TimeUnit.day"
         * 			or "sap.gantt.config.TimeUnit.week" unit, you must set the span to 1.
         * 	 - `"relativeTimePrefix": "Day"` - A string that specifies the prefix displayed before every relative
         * 			time point. For example, if you set this property to "Day", the relative timeline will display "Day 1",
         * 			"Day 2", "Day 3", and so on so forth.
         * 	 -  `smallInterval` - Time interval of the lower row in the timeline is 12 hours. Formatted in the locale
         * 			language with the format string. This zoom level implements an interval the same as the that of the default
         * 			zoom level.
         * 	`"unit": sap.gantt.config.TimeUnit.hour` - Time unit is hour.
         * 	 - `"span": 2` - Time span is 2.
         * 	 - `"format": "HH:mm"` - Formats the string in CLDR date/time symbols.
         * 	 - `"relativeTime": false`
         *
         * The current granularity setting provides the following values in the default time line option:
         *  `5min`, `10min`, `15min`, `30min`,
         *  `1hour`, `2hour`, `4hour`, `6hour`, `12hour`,
         *  `1day`, `2day`, `4day`,
         *  `1week`, `2week`,
         *  `1month`, `2month`, `4month`, `6month`,
         *  `1year`, `2year`, `5year`. We recommend that you use the default time line option object instead of
         * creating one by yourself. Because the default time line option object has been precisely calculated and
         * it fits most use cases. If the default time line option is not the best-fit, you can select a time line
         * option from the range (coarsestTimeLineOption, 5 years to finestTimeLineOption, 5 minutes) listed above.
         * Note that creating a new time line option object is a complex process. Moreover, the extra effort may
         * not serve significant purposes and is likely to cause text overlay in the Gantt Chart header.
         */
        timeLineOptions?: object;

        /**
         * Current time line option of AxisTimeStrategy
         */
        timeLineOption?: object;

        /**
         * Coarsest time line option of AxisTimeStrategy
         */
        coarsestTimeLineOption?: object;

        /**
         * Finest time line option of AxisTimeStrategy
         */
        finestTimeLineOption?: object;

        /**
         * Total number of zoom levels on your zoom control. For example, the step count of Slider control and the
         * item count of Select control.
         */
        zoomLevels?: number;

        /**
         * Current zoom level of your Gantt chart with 0 representing the initial zoom level. The value of this
         * property must be lower than that of totalZoomLevels.
         */
        zoomLevel?: number;

        /**
         * Configures the calendar type for the Gantt Chart time label. We recommend that you set the type of this
         * argument to `sap.ui.core.CalendarType`. Otherwise some properties you set may not function properly.
         */
        calendarType?: string;

        /**
         * Configures the locale of the Gantt Chart time label. We recommend that you set the type of this argument
         * to `sap.ui.core.Locale`. Otherwise some properties you set may not function properly.
         */
        locale?: object;

        /**
         * @SINCE 1.71.5
         *
         * Configures the first day of the week relevant for displaying the Gantt Chart time intervals.
         *  This property has the same value type as {@link sap.ui.core.LocaleData#getFirstDayOfWeek} and by default
         * uses the value from the current locale.
         */
        firstDayOfWeek?: number;

        /**
         * Specifies the mouse wheel zooming type, which determines the zoom granularity
         */
        mouseWheelZoomType?: sap.gantt.MouseWheelZoomType;

        /**
         * Entire time span Gantt Chart can display in the chart area We recommend that you set the type of this
         * argument to `sap.gantt.config.TimeHorizon`. Otherwise some properties you set may not function properly.
         *
         * Default totalHorizon value is: `sap.gantt.config.DEFAULT_PLAN_HORIZON `
         */
        totalHorizon?: sap.gantt.config.TimeHorizon;

        /**
         * Time span Gantt Chart currently displays in the chart area Specifies the start and end points of the
         * time span that is visible in the chart area. `visibleHorizon` is less than or equal to `totalHorizon`.
         * You can configure the time horizon using one of the following patterns:
         * 	 - [startTime, null]: Jump to the position where the start time is on the left edge of the screen without
         * 			changing the zoom rate. When you use this pattern, Gantt Chart calculates the endTime according to the
         * 			current zoom rate.
         * 	 - [null, endTime]: Jump to the position where the end time is on the right edge of the screen without
         * 			changing the zoom rate. When you use this pattern, Gantt Chart calculates the startTime accoridng to
         * 			the current zoom rate.
         * 	 - [startTime, endTime]: Every strategy has their own implementation to control misc.AxisTime.
         *
         * **Note:** Before you set visibleHorizon, you have to set totalHorizon first. We recommend that you set
         * the type of this argument to `sap.gantt.config.TimeHorizon`. Otherwise some properties you set may not
         * function properly.
         *
         * Default visible horizon value is `sap.gantt.config.DEFAULT_INIT_HORIZON`
         */
        visibleHorizon?: sap.gantt.config.TimeHorizon;
      }

      interface FullScreenStrategyOpts
        extends sap.gantt.axistime.AxisTimeStrategyBaseOpts {}

      interface ProportionZoomStrategyOpts
        extends sap.gantt.axistime.AxisTimeStrategyBaseOpts {}

      interface StepwiseZoomStrategyOpts
        extends sap.gantt.axistime.AxisTimeStrategyBaseOpts {}
      /**
       * Base class for all zoom strategies. This base class defines basic properties and aggregations.
       *
       * This base class defines:
       * 	 - Basic properties and aggregations.  This class controls the zoom strategies and zoom rate in
       * 			Gantt Chart. sap.gantt provides three basic implementations of `AxisTimeStrategy`:
       * 	 - `sap.gantt.axistime.ProportionZoomStrategy` - A zoom strategy that provides the proportional change
       * 			ability. Proportional change ensures that Gantt Chart dynamically adjusts the zoom rate to be the best
       * 			fit for rendering shapes in the chart area. This strategy cannot be used by the Select control.
       * 	 - `sap.gantt.axistime.FullScreenStrategy` - A zoom strategy that sets the value of `totalHorizon` to
       * 			the value of `visibleHorizon`. When this strategy is implemented, `visibleHorizon` is fixed. Because
       * 			of this, when you scroll the splitter to expand or shrink the chart area, the value of `visibleHorizon`
       * 			remains intact, which makes shapes look larger or smaller accordingly. Moreover, the horizontal scroll
       * 			bar never appears and the zoom control is deactivated.
       * 	 - `sap.gantt.axistime.StepwiseZoomStrategy` - A zoom strategy that provides the stepwise change ability
       * 			to control the zoom level of Gantt Chart, which is often used by the Select zoom control.
       */
      class AxisTimeStrategyBase extends sap.ui.core.Element {
        /**
         * Creates and initializes a new AxisTimeStrategy.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new AxisTimeStrategy, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new AxisTimeStrategy
           */
          mSettings?: AxisTimeStrategyBaseOpts
        );

        /**
         * Calculates the middle date of the given two dates.
         */
        calMiddleDate(
          /**
           * the start date
           */
          dStart: Date,
          /**
           * the end date
           */
          dEnd: Date
        ): Date;
        /**
         * Calculate new visible horizon according to specified zoom center and zoom delta
         */
        calVisibleHorizonByDelta(
          /**
           * the delta of visible horizon time range in MS unit
           */
          nTimeSpanDelta: number,
          /**
           * optional the time where the zoom center located, if not provided, take the center of current visible
           * horizon as the zoom center
           */
          oAnchorTime?: Date
        ): object;
        /**
         * Calculate new visible horizon according to specified zoom center and zoom rate
         */
        calVisibleHorizonByRate(
          /**
           * the rate for new visible horizon
           */
          nZoomRate: number,
          /**
           * optional the time where the zoom center located, if not provided, take the center of current visible
           * horizon as the zoom center
           */
          oAnchorTime?: Date
        ): object;
        /**/
        calZoomBase(): boolean;
        /**/
        calZoomScale(): void;
        /**/
        calZoomScaleByDate(): void;
        /**
         * Defaults the firstDayOfWeek property to a value from locale if user didn't specify it
         */
        checkFirstDayOfWeek(
          /**
           * Map/JSON-object with initial property values, aggregated objects etc. for the new object
           */
          mSettings: object
        ): void;
        /**
         * Creates an AxisTime instance to be used in Gantt Chart. If you build your own AxisTimeStrategy, you may
         * need to implement this method and return your own AxisTime.
         */
        createAxisTime(
          /**
           * Locale configuration passed from GanttChart
           */
          oLocale: sap.gantt.config.Locale
        ): void;
        /**
         * Destroys the totalHorizon in the aggregation {@link #getTotalHorizon totalHorizon}.
         */
        destroyTotalHorizon(): sap.gantt.axistime.AxisTimeStrategyBase;
        /**
         * Destroys the visibleHorizon in the aggregation {@link #getVisibleHorizon visibleHorizon}.
         */
        destroyVisibleHorizon(): sap.gantt.axistime.AxisTimeStrategyBase;
        /**
         * Creates a new subclass of class sap.gantt.axistime.AxisTimeStrategyBase with name `sClassName` and enriches
         * it with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getCalendarType calendarType}.
         *
         * Configures the calendar type for the Gantt Chart time label. We recommend that you set the type of this
         * argument to `sap.ui.core.CalendarType`. Otherwise some properties you set may not function properly.
         *
         * Default value is `sap.ui.core.CalendarType.Gregorian`.
         */
        getCalendarType(): string;
        /**
         * Gets current value of property {@link #getCoarsestTimeLineOption coarsestTimeLineOption}.
         *
         * Coarsest time line option of AxisTimeStrategy
         */
        getCoarsestTimeLineOption(): object;
        /**
         * Gets current value of property {@link #getFinestTimeLineOption finestTimeLineOption}.
         *
         * Finest time line option of AxisTimeStrategy
         */
        getFinestTimeLineOption(): object;
        /**
         * @SINCE 1.71.5
         *
         * Gets current value of property {@link #getFirstDayOfWeek firstDayOfWeek}.
         *
         * Configures the first day of the week relevant for displaying the Gantt Chart time intervals.
         *  This property has the same value type as {@link sap.ui.core.LocaleData#getFirstDayOfWeek} and by default
         * uses the value from the current locale.
         */
        getFirstDayOfWeek(): number;
        /**
         * Gets current value of property {@link #getLocale locale}.
         *
         * Configures the locale of the Gantt Chart time label. We recommend that you set the type of this argument
         * to `sap.ui.core.Locale`. Otherwise some properties you set may not function properly.
         */
        getLocale(): object;
        /**
         * Gets the time label formatter for Gantt Chart to draw the lower row in the timeline.
         */
        getLowerRowFormatter(): sap.ui.core.format.DateFormat;
        /**
         * Returns a metadata object for class sap.gantt.axistime.AxisTimeStrategyBase.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getMouseWheelZoomType mouseWheelZoomType}.
         *
         * Specifies the mouse wheel zooming type, which determines the zoom granularity
         *
         * Default value is `FineGranular`.
         */
        getMouseWheelZoomType(): sap.gantt.MouseWheelZoomType;
        /**
         * Gets current value of property {@link #getTimeLineOption timeLineOption}.
         *
         * Current time line option of AxisTimeStrategy
         */
        getTimeLineOption(): object;
        /**
         * Gets current value of property {@link #getTimeLineOptions timeLineOptions}.
         *
         * Defines granularity levels, labelling formats, and range of the time line.
         * 	 - granularity level: time span between two neighboring vertical lines. Examples: 12 hours.
         * 	 - labelling format: time formats for the upper row and lower row in the time line. These two rows do
         * 			not have to share the same format.
         * 	 - range: defines a certain length in pixel. Gantt Chart loops the granularity levels from the beginning
         * 			and chooses the first granularity level with the time span that consumes more than the defined length.
         * 			For example, if the current range is 90, Gantt Chart loops the granularity levels from the default initial
         * 			granularity level 5min. If the 6hour granularity level consumes 50 pixels, 12hour consumes 100 pixels,
         * 			and 1Day consumes 200 pixels, the 12hour granularity level is selected as the current granularity level
         * 			as it's the first level with the time span that consumes more than 90 pixels.
         *
         * The granularity level is a JSON object with the granularity as the key and some internal information
         * such as formatting.
         *
         * Take the `"12hour"` granularity level for example.
         * 	 - `"12hour":` - Granularity level ID.
         * 	 `"innerInterval"` - Time interval between neighboring vertical lines is 12 hours.
         * 	`"unit": sap.gantt.config.TimeUnit.day` - Time unit is day.
         * 	 - `"span": 1` - Span is 1.
         * 	 - `"range": 90` - This granularity level is selected as the current level if 12 hours is the first
         * 			time span that consumes more than 90 pixels to be displayed in the chart area.
         * 	 -  `largeInterval` - Time interval of the upper row in the timeline is 1 day. Formatted in the locale
         * 			language with the format string. This zoom level implements an interval larger than the interval in the
         * 			default zoom level.
         * 	`"unit": sap.gantt.config.TimeUnit.day` Time unit is day.
         * 	 - `"span": 1` - Time span is 1.
         * 	 - `"format": "cccc dd.M.yyyy"` - Formats the string in CLDR date/time symbols.
         * 	 - `"pattern": "yyyy"` -Aa data pattern in LDML format. This setting takes precedence over the setting
         * 			of "format".
         * 	 - `"relativeTime": true` - Specifies whether or not to use relative time mode, which defaults to "false".
         * 			When you set this property to "true", Gantt Chart ignores the values of "format" and "pattern". In this
         * 			mode, if the largeInterval or the smallInterval of the timeline option uses the "sap.gantt.config.TimeUnit.day"
         * 			or "sap.gantt.config.TimeUnit.week" unit, you must set the span to 1.
         * 	 - `"relativeTimePrefix": "Day"` - A string that specifies the prefix displayed before every relative
         * 			time point. For example, if you set this property to "Day", the relative timeline will display "Day 1",
         * 			"Day 2", "Day 3", and so on so forth.
         * 	 -  `smallInterval` - Time interval of the lower row in the timeline is 12 hours. Formatted in the locale
         * 			language with the format string. This zoom level implements an interval the same as the that of the default
         * 			zoom level.
         * 	`"unit": sap.gantt.config.TimeUnit.hour` - Time unit is hour.
         * 	 - `"span": 2` - Time span is 2.
         * 	 - `"format": "HH:mm"` - Formats the string in CLDR date/time symbols.
         * 	 - `"relativeTime": false`
         *
         * The current granularity setting provides the following values in the default time line option:
         *  `5min`, `10min`, `15min`, `30min`,
         *  `1hour`, `2hour`, `4hour`, `6hour`, `12hour`,
         *  `1day`, `2day`, `4day`,
         *  `1week`, `2week`,
         *  `1month`, `2month`, `4month`, `6month`,
         *  `1year`, `2year`, `5year`. We recommend that you use the default time line option object instead of
         * creating one by yourself. Because the default time line option object has been precisely calculated and
         * it fits most use cases. If the default time line option is not the best-fit, you can select a time line
         * option from the range (coarsestTimeLineOption, 5 years to finestTimeLineOption, 5 minutes) listed above.
         * Note that creating a new time line option object is a complex process. Moreover, the extra effort may
         * not serve significant purposes and is likely to cause text overlay in the Gantt Chart header.
         */
        getTimeLineOptions(): object;
        /**
         * Gets content of aggregation {@link #getTotalHorizon totalHorizon}.
         *
         * Entire time span Gantt Chart can display in the chart area We recommend that you set the type of this
         * argument to `sap.gantt.config.TimeHorizon`. Otherwise some properties you set may not function properly.
         *
         * Default totalHorizon value is: `sap.gantt.config.DEFAULT_PLAN_HORIZON `
         */
        getTotalHorizon(): sap.gantt.config.TimeHorizon;
        /**
         * Gets the time label formatter for Gantt Chart to draw the top row in the timeline.
         */
        getUpperRowFormatter(): sap.ui.core.format.DateFormat;
        /**
         * Gets content of aggregation {@link #getVisibleHorizon visibleHorizon}.
         *
         * Time span Gantt Chart currently displays in the chart area Specifies the start and end points of the
         * time span that is visible in the chart area. `visibleHorizon` is less than or equal to `totalHorizon`.
         * You can configure the time horizon using one of the following patterns:
         * 	 - [startTime, null]: Jump to the position where the start time is on the left edge of the screen without
         * 			changing the zoom rate. When you use this pattern, Gantt Chart calculates the endTime according to the
         * 			current zoom rate.
         * 	 - [null, endTime]: Jump to the position where the end time is on the right edge of the screen without
         * 			changing the zoom rate. When you use this pattern, Gantt Chart calculates the startTime accoridng to
         * 			the current zoom rate.
         * 	 - [startTime, endTime]: Every strategy has their own implementation to control misc.AxisTime.
         *
         * **Note:** Before you set visibleHorizon, you have to set totalHorizon first. We recommend that you set
         * the type of this argument to `sap.gantt.config.TimeHorizon`. Otherwise some properties you set may not
         * function properly.
         *
         * Default visible horizon value is `sap.gantt.config.DEFAULT_INIT_HORIZON`
         */
        getVisibleHorizon(): sap.gantt.config.TimeHorizon;
        /**
         * Gets current value of property {@link #getZoomLevel zoomLevel}.
         *
         * Current zoom level of your Gantt chart with 0 representing the initial zoom level. The value of this
         * property must be lower than that of totalZoomLevels.
         *
         * Default value is `0`.
         */
        getZoomLevel(): number;
        /**
         * Gets current value of property {@link #getZoomLevels zoomLevels}.
         *
         * Total number of zoom levels on your zoom control. For example, the step count of Slider control and the
         * item count of Select control.
         *
         * Default value is `10`.
         */
        getZoomLevels(): number;
        /**
         * Sets a new value for property {@link #getCalendarType calendarType}.
         *
         * Configures the calendar type for the Gantt Chart time label. We recommend that you set the type of this
         * argument to `sap.ui.core.CalendarType`. Otherwise some properties you set may not function properly.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `sap.ui.core.CalendarType.Gregorian`.
         */
        setCalendarType(
          /**
           * New value for property `calendarType`
           */
          sCalendarType: string
        ): sap.gantt.axistime.AxisTimeStrategyBase;
        /**
         * Sets a new value for property {@link #getCoarsestTimeLineOption coarsestTimeLineOption}.
         *
         * Coarsest time line option of AxisTimeStrategy
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setCoarsestTimeLineOption(
          /**
           * New value for property `coarsestTimeLineOption`
           */
          oCoarsestTimeLineOption: object
        ): sap.gantt.axistime.AxisTimeStrategyBase;
        /**
         * Sets a new value for property {@link #getFinestTimeLineOption finestTimeLineOption}.
         *
         * Finest time line option of AxisTimeStrategy
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setFinestTimeLineOption(
          /**
           * New value for property `finestTimeLineOption`
           */
          oFinestTimeLineOption: object
        ): sap.gantt.axistime.AxisTimeStrategyBase;
        /**
         * @SINCE 1.71.5
         *
         * Sets a new value for property {@link #getFirstDayOfWeek firstDayOfWeek}.
         *
         * Configures the first day of the week relevant for displaying the Gantt Chart time intervals.
         *  This property has the same value type as {@link sap.ui.core.LocaleData#getFirstDayOfWeek} and by default
         * uses the value from the current locale.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setFirstDayOfWeek(
          /**
           * New value for property `firstDayOfWeek`
           */
          iFirstDayOfWeek: number
        ): sap.gantt.axistime.AxisTimeStrategyBase;
        /**
         * Sets a new value for property {@link #getLocale locale}.
         *
         * Configures the locale of the Gantt Chart time label. We recommend that you set the type of this argument
         * to `sap.ui.core.Locale`. Otherwise some properties you set may not function properly.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setLocale(
          /**
           * New value for property `locale`
           */
          oLocale: object
        ): sap.gantt.axistime.AxisTimeStrategyBase;
        /**
         * Sets a new value for property {@link #getMouseWheelZoomType mouseWheelZoomType}.
         *
         * Specifies the mouse wheel zooming type, which determines the zoom granularity
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `FineGranular`.
         */
        setMouseWheelZoomType(
          /**
           * New value for property `mouseWheelZoomType`
           */
          sMouseWheelZoomType: sap.gantt.MouseWheelZoomType
        ): sap.gantt.axistime.AxisTimeStrategyBase;
        /**
         * Sets a new value for property {@link #getTimeLineOption timeLineOption}.
         *
         * Current time line option of AxisTimeStrategy
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setTimeLineOption(
          /**
           * New value for property `timeLineOption`
           */
          oTimeLineOption: object
        ): sap.gantt.axistime.AxisTimeStrategyBase;
        /**
         * Sets a new value for property {@link #getTimeLineOptions timeLineOptions}.
         *
         * Defines granularity levels, labelling formats, and range of the time line.
         * 	 - granularity level: time span between two neighboring vertical lines. Examples: 12 hours.
         * 	 - labelling format: time formats for the upper row and lower row in the time line. These two rows do
         * 			not have to share the same format.
         * 	 - range: defines a certain length in pixel. Gantt Chart loops the granularity levels from the beginning
         * 			and chooses the first granularity level with the time span that consumes more than the defined length.
         * 			For example, if the current range is 90, Gantt Chart loops the granularity levels from the default initial
         * 			granularity level 5min. If the 6hour granularity level consumes 50 pixels, 12hour consumes 100 pixels,
         * 			and 1Day consumes 200 pixels, the 12hour granularity level is selected as the current granularity level
         * 			as it's the first level with the time span that consumes more than 90 pixels.
         *
         * The granularity level is a JSON object with the granularity as the key and some internal information
         * such as formatting.
         *
         * Take the `"12hour"` granularity level for example.
         * 	 - `"12hour":` - Granularity level ID.
         * 	 `"innerInterval"` - Time interval between neighboring vertical lines is 12 hours.
         * 	`"unit": sap.gantt.config.TimeUnit.day` - Time unit is day.
         * 	 - `"span": 1` - Span is 1.
         * 	 - `"range": 90` - This granularity level is selected as the current level if 12 hours is the first
         * 			time span that consumes more than 90 pixels to be displayed in the chart area.
         * 	 -  `largeInterval` - Time interval of the upper row in the timeline is 1 day. Formatted in the locale
         * 			language with the format string. This zoom level implements an interval larger than the interval in the
         * 			default zoom level.
         * 	`"unit": sap.gantt.config.TimeUnit.day` Time unit is day.
         * 	 - `"span": 1` - Time span is 1.
         * 	 - `"format": "cccc dd.M.yyyy"` - Formats the string in CLDR date/time symbols.
         * 	 - `"pattern": "yyyy"` -Aa data pattern in LDML format. This setting takes precedence over the setting
         * 			of "format".
         * 	 - `"relativeTime": true` - Specifies whether or not to use relative time mode, which defaults to "false".
         * 			When you set this property to "true", Gantt Chart ignores the values of "format" and "pattern". In this
         * 			mode, if the largeInterval or the smallInterval of the timeline option uses the "sap.gantt.config.TimeUnit.day"
         * 			or "sap.gantt.config.TimeUnit.week" unit, you must set the span to 1.
         * 	 - `"relativeTimePrefix": "Day"` - A string that specifies the prefix displayed before every relative
         * 			time point. For example, if you set this property to "Day", the relative timeline will display "Day 1",
         * 			"Day 2", "Day 3", and so on so forth.
         * 	 -  `smallInterval` - Time interval of the lower row in the timeline is 12 hours. Formatted in the locale
         * 			language with the format string. This zoom level implements an interval the same as the that of the default
         * 			zoom level.
         * 	`"unit": sap.gantt.config.TimeUnit.hour` - Time unit is hour.
         * 	 - `"span": 2` - Time span is 2.
         * 	 - `"format": "HH:mm"` - Formats the string in CLDR date/time symbols.
         * 	 - `"relativeTime": false`
         *
         * The current granularity setting provides the following values in the default time line option:
         *  `5min`, `10min`, `15min`, `30min`,
         *  `1hour`, `2hour`, `4hour`, `6hour`, `12hour`,
         *  `1day`, `2day`, `4day`,
         *  `1week`, `2week`,
         *  `1month`, `2month`, `4month`, `6month`,
         *  `1year`, `2year`, `5year`. We recommend that you use the default time line option object instead of
         * creating one by yourself. Because the default time line option object has been precisely calculated and
         * it fits most use cases. If the default time line option is not the best-fit, you can select a time line
         * option from the range (coarsestTimeLineOption, 5 years to finestTimeLineOption, 5 minutes) listed above.
         * Note that creating a new time line option object is a complex process. Moreover, the extra effort may
         * not serve significant purposes and is likely to cause text overlay in the Gantt Chart header.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setTimeLineOptions(
          /**
           * New value for property `timeLineOptions`
           */
          oTimeLineOptions: object
        ): sap.gantt.axistime.AxisTimeStrategyBase;
        /**
         * Sets the aggregated {@link #getTotalHorizon totalHorizon}.
         */
        setTotalHorizon(
          /**
           * The totalHorizon to set
           */
          oTotalHorizon: sap.gantt.config.TimeHorizon
        ): sap.gantt.axistime.AxisTimeStrategyBase;
        /**
         * Sets the aggregated {@link #getVisibleHorizon visibleHorizon}.
         */
        setVisibleHorizon(
          /**
           * The visibleHorizon to set
           */
          oVisibleHorizon: sap.gantt.config.TimeHorizon
        ): sap.gantt.axistime.AxisTimeStrategyBase;
        /**
         * Sets a new value for property {@link #getZoomLevel zoomLevel}.
         *
         * Current zoom level of your Gantt chart with 0 representing the initial zoom level. The value of this
         * property must be lower than that of totalZoomLevels.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setZoomLevel(
          /**
           * New value for property `zoomLevel`
           */
          iZoomLevel: number
        ): sap.gantt.axistime.AxisTimeStrategyBase;
        /**
         * Sets a new value for property {@link #getZoomLevels zoomLevels}.
         *
         * Total number of zoom levels on your zoom control. For example, the step count of Slider control and the
         * item count of Select control.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `10`.
         */
        setZoomLevels(
          /**
           * New value for property `zoomLevels`
           */
          iZoomLevels: number
        ): sap.gantt.axistime.AxisTimeStrategyBase;
        /**
         * In the shape drawing process, Gantt Chart calls this function to get the latest information about Stop
         * and AxisTime. Moreover, when you run this function, AxisTimeStrategy updates the GanttChart status such
         * as the zoom rate of AxisTime.
         */
        syncContext(
          /**
           * Width of the visible area in Gantt Chart
           */
          nClientWidth: number
        ): object;
        /**
         * This is the delegate function of the zoom control event, such as the zoom in or zoom out event. You must
         * implement your zoom level change logic.
         */
        updateStopInfo(
          /**
           * Zoom stop information, which contains the parameters `key` and `text`.
           */
          oStopInfo: object
        ): void;
        /**
         * Calculate and set new visible horizon for fine granular mouse wheel zoom
         */
        updateVisibleHorizonOnFineGranularMouseWheelZoom(
          /**
           * the time where mouse pointer located during the zooming
           */
          oTimeAtZoomCenter: Date,
          /**
           * true if zoom in, false if zoom out
           */
          bZoomIn: boolean,
          /**
           * the scroll range of each mouse wheel scrolling / 100, serves as a coefficient when calculating zoom delta
           */
          iZoomFactor: number
        ): void;
        /**
         * update visible horizon for mouse wheel zoom according to configured zoom type
         */
        updateVisibleHorizonOnMouseWheelZoom(
          /**
           * the time where mouse pointer located during the zooming
           */
          oTimeAtZoomCenter: Date,
          /**
           * the range of each mouse wheel scrolling
           */
          iScrollDelta: number
        ): void;
        /**
         * Calculate and set new visible horizon for step-wise mouse wheel zoom
         */
        updateVisibleHorizonOnStepWiseMouseWheelZoom(
          /**
           * the time where mouse pointer located during the zooming
           */
          oTimeAtZoomCenter: Date,
          /**
           * true if zoom in, false if zoom out
           */
          bZoomIn: boolean,
          /**
           * the scroll range of each mouse wheel scrolling / 100, serves as a coefficient when calculating zoom delta
           */
          iZoomFactor: number
        ): void;
      }
      /**
       * FullScreenStrategy
       *
       *  A zoom strategy that sets the value of `totalHorizon` to the value of `visibleHorizon`. When this
       * strategy is implemented, `visibleHorizon` is fixed. Because of this, when you scroll the splitter to
       * expand or shrink the chart area, the value of `visibleHorizon` remains intact, which makes shapes look
       * larger or smaller accordingly. Moreover, the horizontal scroll bar never appears and the zoom control
       * is deactivated.
       */
      class FullScreenStrategy extends sap.gantt.axistime.AxisTimeStrategyBase {
        /**
         * Creates and initializes a FullScreenStrategy.
         */
        constructor(
          /**
           * ID for the new AxisTimeStrategy, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new AxisTimeStrategy
           */
          mSettings?: FullScreenStrategyOpts
        );
      }
      /**
       * ProportionZoomStrategy
       *
       *  A zoom strategy that provides the proportional change ability. Proportional change ensures that Gantt
       * Chart dynamically adjusts the zoom rate to be the best fit for rendering shapes in the chart area. This
       * strategy cannot be used by the Select control.
       */
      class ProportionZoomStrategy extends sap.gantt.axistime
        .AxisTimeStrategyBase {
        /**
         * Creates and initializes a ProportionZoomStrategy.
         */
        constructor(
          /**
           * ID for the new AxisTimeStrategy, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new AxisTimeStrategy
           */
          mSettings?: ProportionZoomStrategyOpts
        );
      }
      /**
       * The class allows you to define a zoom strategy whose time line options are stepwise, i.e. the width of
       * each time line option is pre-defined and won't be changed during zooming.
       */
      class StepwiseZoomStrategy extends sap.gantt.axistime
        .AxisTimeStrategyBase {
        /**
         * Constructor for a new StepwiseZoomStrategy.
         */
        constructor(
          /**
           * ID for the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: StepwiseZoomStrategyOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.axistime.StepwiseZoomStrategy with name `sClassName` and enriches
         * it with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.axistime.AxisTimeStrategyBase.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.gantt.axistime.StepwiseZoomStrategy.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Return total horizon time. The value will be changed according to zoom level, and is not same as the
         * value user set.
         */
        // @ts-ignore
        getTotalHorizon(): sap.gantt.config.TimeHorizon;
        /**
         * Don't use this method to set coarsestTimeLineOption because its value is determined by timeLineOptions.
         * The last entry of timeLineOptions is coarsestTimeLineOption.
         */
        // @ts-ignore
        setCoarsestTimeLineOption(
          /**
           * coarsest time line option of StepwiseZoomStrategy
           */
          oTimeLineOption: object
        ): sap.gantt.axistime.StepwiseZoomStrategy;
        /**
         * Don't use this method to set finestTimeLineOption because its value is determined by timeLineOptions.
         * The first entry of timeLineOptions is finestTimeLineOption.
         */
        // @ts-ignore
        setFinestTimeLineOption(
          /**
           * finest time line option of StepwiseZoomStrategy
           */
          oTimeLineOption: object
        ): sap.gantt.axistime.StepwiseZoomStrategy;
        /**
         * Sets the time line options of StepwiseZoomStrategy.
         */
        // @ts-ignore
        setTimeLineOptions(
          /**
           * time line options of StepwiseZoomStrategy
           */
          oTimeLineOptions: object
        ): sap.gantt.axistime.StepwiseZoomStrategy;
        /**
         * Sets the total horizon of StepwiseZoomStrategy. The time range and view range of this.getAxisTime() will
         * also be updated, the rate will remain unchanged.
         */
        // @ts-ignore
        setTotalHorizon(
          /**
           * total horizon of StepwiseZoomStrategy
           */
          oTotalHorizon: object
        ): sap.gantt.axistime.StepwiseZoomStrategy;
        /**
         * Sets the visible horizon of StepwiseZoomStrategy. Don't use this method to set visible horizon because
         * its value is determined by zoomLevel or timeLineoption.
         */
        // @ts-ignore
        setVisibleHorizon(
          /**
           * visible horizon of StepwiseZoomStrategy
           */
          oVisibleHorizon: object
        ): sap.gantt.axistime.StepwiseZoomStrategy;
        /**
         * Don't use this method to set zoomLevels because its value is determined by timeLineOptions. The account
         * of entities in timeLineOptions is zoomLevels.
         */
        // @ts-ignore
        setZoomLevels(
          /**
           * zoom levels of StepwiseZoomStrategy
           */
          iZoomLevels: number
        ): sap.gantt.axistime.StepwiseZoomStrategy;
        /**
         * This method does below things: 1. Sets time line option according to the stop info object. 2. Sets zoom
         * level according to the stop info object. The setter of zoom level does some additional things.
         */
        // @ts-ignore
        updateStopInfo(
          /**
           * Zoom stop information, which contains the parameters `key` and `text`.
           */
          oStopInfo: object
        ): sap.gantt.axistime.StepwiseZoomStrategy;
      }
    }

    namespace control {
      interface CellOpts extends sap.ui.core.ControlOpts {
        /**
         * Cell callback function that returns the specific control instance which is rendered in a table.
         */
        cellCallback?: object;

        /**
         * Column configuration object. We recommend that you set the type of this argument to `sap.gantt.config.HierarchyColumn`.
         * Otherwise some properties you set may not function properly.
         */
        columnConfig?: object;
      }
      /**
       * Cell acts as an abstract class. You can use this class to define a placeholder for your application to
       * provide the specific implementation. Applications can fill the cell content by using cellCallback which
       * returns instances such as Icon, Text, or Text input.
       *
       * You can also use this class to define column specific properties that are applied when rendering a list.
       */
      class Cell extends sap.ui.core.Control {
        /**
         * Creates and initializes a new Cell class.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID of the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: CellOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.control.Cell with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Provide accessibility support for control Cell
         * See:
         * 	{sap.ui.core.Control#getAccessibilityInfo}
         */
        // @ts-ignore
        getAccessibilityInfo(): object;
        /**
         * Gets current value of property {@link #getCellCallback cellCallback}.
         *
         * Cell callback function that returns the specific control instance which is rendered in a table.
         */
        getCellCallback(): object;
        /**
         * Gets current value of property {@link #getColumnConfig columnConfig}.
         *
         * Column configuration object. We recommend that you set the type of this argument to `sap.gantt.config.HierarchyColumn`.
         * Otherwise some properties you set may not function properly.
         */
        getColumnConfig(): object;
        /**
         * Returns a metadata object for class sap.gantt.control.Cell.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Sets a new value for property {@link #getCellCallback cellCallback}.
         *
         * Cell callback function that returns the specific control instance which is rendered in a table.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setCellCallback(
          /**
           * New value for property `cellCallback`
           */
          oCellCallback: object
        ): sap.gantt.control.Cell;
        /**
         * Sets a new value for property {@link #getColumnConfig columnConfig}.
         *
         * Column configuration object. We recommend that you set the type of this argument to `sap.gantt.config.HierarchyColumn`.
         * Otherwise some properties you set may not function properly.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setColumnConfig(
          /**
           * New value for property `columnConfig`
           */
          oColumnConfig: object
        ): sap.gantt.control.Cell;
      }
    }

    namespace def {
      namespace cal {
        interface CalendarOpts extends sap.gantt.def.DefBaseOpts {
          /**
           * Key of the calendar. Note that this value is used to generate the referencing string of the calendar
           * pattern.
           */
          key?: string;

          /**
           * Background color of time intervals.
           */
          backgroundColor?: sap.gantt.ValueSVGPaintServer;

          /**
           * Time intervals that should be painted with the value of `backgroundColor`.
           */
          timeIntervals?:
            | sap.gantt.def.cal.TimeInterval[]
            | sap.gantt.def.cal.TimeInterval;
        }

        interface TimeIntervalOpts extends sap.gantt.def.DefBaseOpts {
          /**
           * Start Time of timeHorizon. Format: YYYYMMDDHHMMSS. If the type of startTime is object, the value is converted
           * to string.
           */
          startTime?: string;

          /**
           * End time of timeHorizon. Format: YYYYMMDDHHMMSS. If the type of startTime is object, the value is converted
           * to string.
           */
          endTime?: string;
        }
        /**
         * A calendar that contains a list of time interval definitions.
         *
         *  A pattern definition is generated per calendar key.
         */
        class Calendar extends sap.gantt.def.DefBase {
          /**
           * Creates and initializes a calendar defined and embedded in a 'defs' tag for later reuse.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: CalendarOpts
          );

          /**
           * Adds some timeInterval to the aggregation {@link #getTimeIntervals timeIntervals}.
           */
          addTimeInterval(
            /**
             * The timeInterval to add; if empty, nothing is inserted
             */
            oTimeInterval: sap.gantt.def.cal.TimeInterval
          ): sap.gantt.def.cal.Calendar;
          /**
           * Binds aggregation {@link #getTimeIntervals timeIntervals} to model data.
           *
           * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
           * of the possible properties of `oBindingInfo`.
           */
          bindTimeIntervals(
            /**
             * The binding information
             */
            oBindingInfo: object
          ): sap.gantt.def.cal.Calendar;
          /**
           * Destroys all the timeIntervals in the aggregation {@link #getTimeIntervals timeIntervals}.
           */
          destroyTimeIntervals(): sap.gantt.def.cal.Calendar;
          /**
           * Creates a new subclass of class sap.gantt.def.cal.Calendar with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.def.DefBase.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets current value of property {@link #getBackgroundColor backgroundColor}.
           *
           * Background color of time intervals.
           *
           * Default value is `#e5e5e5`.
           */
          getBackgroundColor(): sap.gantt.ValueSVGPaintServer;
          /**
           * Gets current value of property {@link #getKey key}.
           *
           * Key of the calendar. Note that this value is used to generate the referencing string of the calendar
           * pattern.
           *
           * Default value is `calendar`.
           */
          getKey(): string;
          /**
           * Returns a metadata object for class sap.gantt.def.cal.Calendar.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets content of aggregation {@link #getTimeIntervals timeIntervals}.
           *
           * Time intervals that should be painted with the value of `backgroundColor`.
           */
          getTimeIntervals(): sap.gantt.def.cal.TimeInterval[];
          /**
           * Checks for the provided `sap.gantt.def.cal.TimeInterval` in the aggregation {@link #getTimeIntervals
           * timeIntervals}. and returns its index if found or -1 otherwise.
           */
          indexOfTimeInterval(
            /**
             * The timeInterval whose index is looked for
             */
            oTimeInterval: sap.gantt.def.cal.TimeInterval
          ): number;
          /**
           * Inserts a timeInterval into the aggregation {@link #getTimeIntervals timeIntervals}.
           */
          insertTimeInterval(
            /**
             * The timeInterval to insert; if empty, nothing is inserted
             */
            oTimeInterval: sap.gantt.def.cal.TimeInterval,
            /**
             * The `0`-based index the timeInterval should be inserted at; for a negative value of `iIndex`, the timeInterval
             * is inserted at position 0; for a value greater than the current size of the aggregation, the timeInterval
             * is inserted at the last position
             */
            iIndex: number
          ): sap.gantt.def.cal.Calendar;
          /**
           * Removes all the controls from the aggregation {@link #getTimeIntervals timeIntervals}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllTimeIntervals(): sap.gantt.def.cal.TimeInterval[];
          /**
           * Removes a timeInterval from the aggregation {@link #getTimeIntervals timeIntervals}.
           */
          removeTimeInterval(
            /**
             * The timeInterval to remove or its index or id
             */
            vTimeInterval: number | string | sap.gantt.def.cal.TimeInterval
          ): sap.gantt.def.cal.TimeInterval;
          /**
           * Sets a new value for property {@link #getBackgroundColor backgroundColor}.
           *
           * Background color of time intervals.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `#e5e5e5`.
           */
          setBackgroundColor(
            /**
             * New value for property `backgroundColor`
             */
            sBackgroundColor: sap.gantt.ValueSVGPaintServer
          ): sap.gantt.def.cal.Calendar;
          /**
           * Sets a new value for property {@link #getKey key}.
           *
           * Key of the calendar. Note that this value is used to generate the referencing string of the calendar
           * pattern.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `calendar`.
           */
          setKey(
            /**
             * New value for property `key`
             */
            sKey: string
          ): sap.gantt.def.cal.Calendar;
          /**
           * Unbinds aggregation {@link #getTimeIntervals timeIntervals} from model data.
           */
          unbindTimeIntervals(): sap.gantt.def.cal.Calendar;
        }
        /**
         * Calendar pattern definition. This class generates the 'defs' tag from the 'defs' aggregation.
         *
         *  Calendar (for non-working hours) is a widely used graphic element in a Gantt chart. Calendar is considered
         * to be highly reusable between different rows of resources. A default implementation of patterns is provided.
         * After calendars are rendered from def tags, shape `sap.gantt.shape.cal.Calendar` can be used to consume
         * the calendar pattern definition.
         *
         * This class is extended to provide a specific logic for generating referencing strings for calendar patterns.
         */
        class CalendarDefs extends sap.gantt.def.SvgDefs {
          /**
           * Specific 'def' elements for the calendar.
           */
          constructor(
            /**
             * ID of the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: object
          );

          /**
           * Creates a new subclass of class sap.gantt.def.cal.CalendarDefs with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.def.SvgDefs.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.gantt.def.cal.CalendarDefs.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
        }
        /**
         * A time interval pattern.
         */
        class TimeInterval extends sap.gantt.def.DefBase {
          /**
           * Creates and initializes a time interval inside the calendar.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new element, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new element
             */
            mSettings?: TimeIntervalOpts
          );

          /**
           * Creates a new subclass of class sap.gantt.def.cal.TimeInterval with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.def.DefBase.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets current value of property {@link #getEndTime endTime}.
           *
           * End time of timeHorizon. Format: YYYYMMDDHHMMSS. If the type of startTime is object, the value is converted
           * to string.
           */
          getEndTime(): string;
          /**
           * Returns a metadata object for class sap.gantt.def.cal.TimeInterval.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getStartTime startTime}.
           *
           * Start Time of timeHorizon. Format: YYYYMMDDHHMMSS. If the type of startTime is object, the value is converted
           * to string.
           */
          getStartTime(): string;
          /**
           * Sets a new value for property {@link #getEndTime endTime}.
           *
           * End time of timeHorizon. Format: YYYYMMDDHHMMSS. If the type of startTime is object, the value is converted
           * to string.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setEndTime(
            /**
             * New value for property `endTime`
             */
            sEndTime: string
          ): sap.gantt.def.cal.TimeInterval;
          /**
           * Sets a new value for property {@link #getStartTime startTime}.
           *
           * Start Time of timeHorizon. Format: YYYYMMDDHHMMSS. If the type of startTime is object, the value is converted
           * to string.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setStartTime(
            /**
             * New value for property `startTime`
             */
            sStartTime: string
          ): sap.gantt.def.cal.TimeInterval;
        }
      }

      namespace filter {
        /**
         * Color Matrix Values.
         *
         * The matrix decides what target color from source color.
         */
        namespace ColorMatrixValue {
          /**
           * Turns every color to black.
           */
          export const AllToBlack: undefined;

          /**
           * Turns every color to white.
           */
          export const AllToWhite: undefined;
        }
        /**
         * Morphology Operators.
         *
         * The operator decides the morphology to make the shape fatter or slimmer.
         */
        namespace MorphologyOperator {
          /**
           * Fatter Morphology.
           */
          export const Dilate: undefined;

          /**
           * Slimmer Morphology.
           */
          export const Erode: undefined;
        }

        interface MorphologyFilterOpts extends sap.gantt.def.DefBaseOpts {
          /**
           * Atrribute of SVG tag 'feMorphology'. Possible values are in {@link sap.gantt.def.filter.MorphologyOperator}.
           */
          operator?: string;

          /**
           * Attribute of SVG tag 'feMorphology'.
           */
          radius?: string;

          /**
           * Attribute of SVG tag 'feColorMatrix'. Predefined values are in {@link sap.gantt.def.filter.ColorMatrixValue}.
           * Advanced users can provide a customized matrix in string.
           */
          colorMatrix?: string;
        }
        /**
         * This filter is a combination of several filters. The main one is morphology.
         *
         *  The purpose of this filter is to generate a white outline of a target shape when the target is overlapping
         * with other shapes. In general this filter is recommended to be used only on 'text' and 'image' whose
         * outline is very hard to determine. For regular SVG tags like 'rect', 'circle' etc, use the 'stroke' attribute
         * instead if possible. This is because filters in general have worse performance.
         *  Tags used in this filter are:
         * 	 - 'femorphology': Use operator 'dilate' to make a fatter shape of the source shape.
         * 	 - 'feColorMatrix': Fills fatter shape. The default matrix turns every color into white.
         * 	 - 'feMerge': Merges the source shape into the fatter shape to produce an outline effect on the target
         * 			shape.  Effect of this filter is:
         *
         *
         *    Can
         * you see me? How about now?
         */
        class MorphologyFilter extends sap.gantt.def.DefBase {
          /**
           * Creates and initializes a morphology filter defined for later reuse.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: MorphologyFilterOpts
          );

          /**
           * Creates a new subclass of class sap.gantt.def.filter.MorphologyFilter with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.def.DefBase.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets current value of property {@link #getColorMatrix colorMatrix}.
           *
           * Attribute of SVG tag 'feColorMatrix'. Predefined values are in {@link sap.gantt.def.filter.ColorMatrixValue}.
           * Advanced users can provide a customized matrix in string.
           *
           * Default value is `sap.gantt.def.filter.ColorMatrixValue.AllToWhite`.
           */
          getColorMatrix(): string;
          /**
           * Returns a metadata object for class sap.gantt.def.filter.MorphologyFilter.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getOperator operator}.
           *
           * Atrribute of SVG tag 'feMorphology'. Possible values are in {@link sap.gantt.def.filter.MorphologyOperator}.
           *
           * Default value is `sap.gantt.def.filter.MorphologyOperator.Dilate`.
           */
          getOperator(): string;
          /**
           * Gets current value of property {@link #getRadius radius}.
           *
           * Attribute of SVG tag 'feMorphology'.
           *
           * Default value is `2,1`.
           */
          getRadius(): string;
          /**
           * Sets a new value for property {@link #getColorMatrix colorMatrix}.
           *
           * Attribute of SVG tag 'feColorMatrix'. Predefined values are in {@link sap.gantt.def.filter.ColorMatrixValue}.
           * Advanced users can provide a customized matrix in string.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `sap.gantt.def.filter.ColorMatrixValue.AllToWhite`.
           */
          setColorMatrix(
            /**
             * New value for property `colorMatrix`
             */
            sColorMatrix: string
          ): sap.gantt.def.filter.MorphologyFilter;
          /**
           * Sets a new value for property {@link #getOperator operator}.
           *
           * Atrribute of SVG tag 'feMorphology'. Possible values are in {@link sap.gantt.def.filter.MorphologyOperator}.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `sap.gantt.def.filter.MorphologyOperator.Dilate`.
           */
          setOperator(
            /**
             * New value for property `operator`
             */
            sOperator: string
          ): sap.gantt.def.filter.MorphologyFilter;
          /**
           * Sets a new value for property {@link #getRadius radius}.
           *
           * Attribute of SVG tag 'feMorphology'.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `2,1`.
           */
          setRadius(
            /**
             * New value for property `radius`
             */
            sRadius: string
          ): sap.gantt.def.filter.MorphologyFilter;
        }
      }

      namespace gradient {
        interface LinearGradientOpts extends sap.gantt.def.DefBaseOpts {
          /**
           * Attribute 'x1' of SVG tag 'linearGradient'.
           */
          x1?: string;

          /**
           * Attribute 'y1' of SVG tag 'linearGradient'.
           */
          y1?: string;

          /**
           * Attribute 'x2' of SVG tag 'linearGradient'.
           */
          x2?: string;

          /**
           * Attribute 'y2' of SVG tag 'linearGradient'.
           */
          y2?: string;

          /**
           * 'stop' elements in the 'linearGradient' element.
           */
          stops?: sap.gantt.def.gradient.Stop[] | sap.gantt.def.gradient.Stop;
        }

        interface RadicalGradientOpts extends sap.gantt.def.DefBaseOpts {}

        interface StopOpts extends sap.gantt.def.DefBaseOpts {
          /**
           * Attribute 'offset' of SVG tag 'stop'.
           */
          offSet?: string;

          /**
           * Property 'stop-color' of SVG tag 'stop'.
           */
          stopColor?: sap.gantt.ValueSVGPaintServer;
        }
        /**
         * Linear gradient defined by SVG tag 'linearGradient'.
         */
        class LinearGradient extends sap.gantt.def.DefBase {
          /**
           * Creates and initializes a linear gradient defined for later reuse.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: LinearGradientOpts
          );

          /**
           * Adds some stop to the aggregation {@link #getStops stops}.
           */
          addStop(
            /**
             * The stop to add; if empty, nothing is inserted
             */
            oStop: sap.gantt.def.gradient.Stop
          ): sap.gantt.def.gradient.LinearGradient;
          /**
           * Destroys all the stops in the aggregation {@link #getStops stops}.
           */
          destroyStops(): sap.gantt.def.gradient.LinearGradient;
          /**
           * Creates a new subclass of class sap.gantt.def.gradient.LinearGradient with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.def.DefBase.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.gantt.def.gradient.LinearGradient.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets content of aggregation {@link #getStops stops}.
           *
           * 'stop' elements in the 'linearGradient' element.
           */
          getStops(): sap.gantt.def.gradient.Stop[];
          /**
           * Gets current value of property {@link #getX1 x1}.
           *
           * Attribute 'x1' of SVG tag 'linearGradient'.
           *
           * Default value is `0`.
           */
          getX1(): string;
          /**
           * Gets current value of property {@link #getX2 x2}.
           *
           * Attribute 'x2' of SVG tag 'linearGradient'.
           *
           * Default value is `100`.
           */
          getX2(): string;
          /**
           * Gets current value of property {@link #getY1 y1}.
           *
           * Attribute 'y1' of SVG tag 'linearGradient'.
           *
           * Default value is `0`.
           */
          getY1(): string;
          /**
           * Gets current value of property {@link #getY2 y2}.
           *
           * Attribute 'y2' of SVG tag 'linearGradient'.
           *
           * Default value is `15`.
           */
          getY2(): string;
          /**
           * Checks for the provided `sap.gantt.def.gradient.Stop` in the aggregation {@link #getStops stops}. and
           * returns its index if found or -1 otherwise.
           */
          indexOfStop(
            /**
             * The stop whose index is looked for
             */
            oStop: sap.gantt.def.gradient.Stop
          ): number;
          /**
           * Inserts a stop into the aggregation {@link #getStops stops}.
           */
          insertStop(
            /**
             * The stop to insert; if empty, nothing is inserted
             */
            oStop: sap.gantt.def.gradient.Stop,
            /**
             * The `0`-based index the stop should be inserted at; for a negative value of `iIndex`, the stop is inserted
             * at position 0; for a value greater than the current size of the aggregation, the stop is inserted at
             * the last position
             */
            iIndex: number
          ): sap.gantt.def.gradient.LinearGradient;
          /**
           * Removes all the controls from the aggregation {@link #getStops stops}.
           *
           * Additionally, it unregisters them from the hosting UIArea.
           */
          removeAllStops(): sap.gantt.def.gradient.Stop[];
          /**
           * Removes a stop from the aggregation {@link #getStops stops}.
           */
          removeStop(
            /**
             * The stop to remove or its index or id
             */
            vStop: number | string | sap.gantt.def.gradient.Stop
          ): sap.gantt.def.gradient.Stop;
          /**
           * Sets a new value for property {@link #getX1 x1}.
           *
           * Attribute 'x1' of SVG tag 'linearGradient'.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `0`.
           */
          setX1(
            /**
             * New value for property `x1`
             */
            sX1: string
          ): sap.gantt.def.gradient.LinearGradient;
          /**
           * Sets a new value for property {@link #getX2 x2}.
           *
           * Attribute 'x2' of SVG tag 'linearGradient'.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `100`.
           */
          setX2(
            /**
             * New value for property `x2`
             */
            sX2: string
          ): sap.gantt.def.gradient.LinearGradient;
          /**
           * Sets a new value for property {@link #getY1 y1}.
           *
           * Attribute 'y1' of SVG tag 'linearGradient'.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `0`.
           */
          setY1(
            /**
             * New value for property `y1`
             */
            sY1: string
          ): sap.gantt.def.gradient.LinearGradient;
          /**
           * Sets a new value for property {@link #getY2 y2}.
           *
           * Attribute 'y2' of SVG tag 'linearGradient'.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `15`.
           */
          setY2(
            /**
             * New value for property `y2`
             */
            sY2: string
          ): sap.gantt.def.gradient.LinearGradient;
        }
        /**
         * Radial gradient defined by SVG tag 'radialGradient'.
         */
        class RadicalGradient extends sap.gantt.def.DefBase {
          /**
           * Creates and initializes a radial gradient defined for later reuse.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: RadicalGradientOpts
          );
        }
        /**
         * Gradient stop defined by SVG tag 'stop'.
         */
        class Stop extends sap.gantt.def.DefBase {
          /**
           * Creates and initializes a gradient stop defined for later reuse.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: StopOpts
          );

          /**
           * Creates a new subclass of class sap.gantt.def.gradient.Stop with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.def.DefBase.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.gantt.def.gradient.Stop.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getOffSet offSet}.
           *
           * Attribute 'offset' of SVG tag 'stop'.
           *
           * Default value is `5%`.
           */
          getOffSet(): string;
          /**
           * Gets current value of property {@link #getStopColor stopColor}.
           *
           * Property 'stop-color' of SVG tag 'stop'.
           *
           * Default value is `#FFFFFF`.
           */
          getStopColor(): sap.gantt.ValueSVGPaintServer;
          /**
           * Sets a new value for property {@link #getOffSet offSet}.
           *
           * Attribute 'offset' of SVG tag 'stop'.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `5%`.
           */
          setOffSet(
            /**
             * New value for property `offSet`
             */
            sOffSet: string
          ): sap.gantt.def.gradient.Stop;
          /**
           * Sets a new value for property {@link #getStopColor stopColor}.
           *
           * Property 'stop-color' of SVG tag 'stop'.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `#FFFFFF`.
           */
          setStopColor(
            /**
             * New value for property `stopColor`
             */
            sStopColor: sap.gantt.ValueSVGPaintServer
          ): sap.gantt.def.gradient.Stop;
        }
      }

      namespace pattern {
        interface BackSlashPatternOpts
          extends sap.gantt.def.pattern.PatternBaseOpts {
          /**
           * Value of the d attribute in Path element. The value is affected by property `tileWidth` and `tileHeight`.
           * If this value is changed by coding, the effect is not guaranteed.
           */
          path?: string;

          /**
           * Stroke color of the path element.
           */
          stroke?: sap.gantt.ValueSVGPaintServer;

          /**
           * Stroke width of the path element.
           */
          strokeWidth?: number;
        }

        interface PatternBaseOpts extends sap.gantt.def.DefBaseOpts {
          /**
           * Width of the pattern tile.
           */
          tileWidth?: number;

          /**
           * Height of the pattern tile.
           */
          tileHeight?: number;

          /**
           * Background color of the pattern. Technically a rectangle with the color is added in the beginning of
           * the pattern definition.
           */
          backgroundColor?: sap.gantt.ValueSVGPaintServer;

          /**
           * Fill opacity of background color.
           */
          backgroundFillOpacity?: number;
        }

        interface SlashPatternOpts
          extends sap.gantt.def.pattern.PatternBaseOpts {
          /**
           * Value of d attribute in Path element. The value is influenced by property `tileWidth` and `tileHeight`.
           * If this value is changed by coding, the logic cannot be guaranteed.
           */
          path?: string;

          /**
           * Stroke color of the path element.
           */
          stroke?: sap.gantt.ValueSVGPaintServer;

          /**
           * Stroke width of the path element.
           */
          strokeWidth?: number;
        }
        /**
         * Backslash pattern defined by a path. The stroke color and stroke width of the path can be modified with
         * properties.
         *
         *
         *           Tile Detail:       tileHeight tileWidth background Color
         * strokeColor strokeWidth
         */
        class BackSlashPattern extends sap.gantt.def.pattern.PatternBase {
          /**
           * Creates and initializes a backslash pattern defined for later reuse.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: BackSlashPatternOpts
          );

          /**
           * Creates a new subclass of class sap.gantt.def.pattern.BackSlashPattern with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.def.pattern.PatternBase.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.gantt.def.pattern.BackSlashPattern.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getPath path}.
           *
           * Value of the d attribute in Path element. The value is affected by property `tileWidth` and `tileHeight`.
           * If this value is changed by coding, the effect is not guaranteed.
           */
          getPath(): string;
          /**
           * Gets current value of property {@link #getStroke stroke}.
           *
           * Stroke color of the path element.
           */
          getStroke(): sap.gantt.ValueSVGPaintServer;
          /**
           * Gets current value of property {@link #getStrokeWidth strokeWidth}.
           *
           * Stroke width of the path element.
           *
           * Default value is `2`.
           */
          getStrokeWidth(): number;
          /**
           * Sets a new value for property {@link #getPath path}.
           *
           * Value of the d attribute in Path element. The value is affected by property `tileWidth` and `tileHeight`.
           * If this value is changed by coding, the effect is not guaranteed.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setPath(
            /**
             * New value for property `path`
             */
            sPath: string
          ): sap.gantt.def.pattern.BackSlashPattern;
          /**
           * Sets a new value for property {@link #getStroke stroke}.
           *
           * Stroke color of the path element.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setStroke(
            /**
             * New value for property `stroke`
             */
            sStroke: sap.gantt.ValueSVGPaintServer
          ): sap.gantt.def.pattern.BackSlashPattern;
          /**
           * Sets a new value for property {@link #getStrokeWidth strokeWidth}.
           *
           * Stroke width of the path element.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `2`.
           */
          setStrokeWidth(
            /**
             * New value for property `strokeWidth`
             */
            iStrokeWidth: number
          ): sap.gantt.def.pattern.BackSlashPattern;
        }
        /**
         * Base class for SVG pattern definitions.
         *
         *  Pattern is a built-in paint server in SVG. It provides tile-based patterns to the SVG 'fill' or 'stroke'
         * attributes.
         */
        class PatternBase extends sap.gantt.def.DefBase {
          /**
           * Creates and initializes a new SVG pattern defined for later reuse.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID of the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: PatternBaseOpts
          );

          /**
           * Creates a new subclass of class sap.gantt.def.pattern.PatternBase with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.def.DefBase.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets current value of property {@link #getBackgroundColor backgroundColor}.
           *
           * Background color of the pattern. Technically a rectangle with the color is added in the beginning of
           * the pattern definition.
           *
           * Default value is `#fff`.
           */
          getBackgroundColor(): sap.gantt.ValueSVGPaintServer;
          /**
           * Gets current value of property {@link #getBackgroundFillOpacity backgroundFillOpacity}.
           *
           * Fill opacity of background color.
           *
           * Default value is `1`.
           */
          getBackgroundFillOpacity(): number;
          /**
           * Returns a metadata object for class sap.gantt.def.pattern.PatternBase.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getTileHeight tileHeight}.
           *
           * Height of the pattern tile.
           *
           * Default value is `8`.
           */
          getTileHeight(): number;
          /**
           * Gets current value of property {@link #getTileWidth tileWidth}.
           *
           * Width of the pattern tile.
           *
           * Default value is `8`.
           */
          getTileWidth(): number;
          /**
           * Sets a new value for property {@link #getBackgroundColor backgroundColor}.
           *
           * Background color of the pattern. Technically a rectangle with the color is added in the beginning of
           * the pattern definition.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `#fff`.
           */
          setBackgroundColor(
            /**
             * New value for property `backgroundColor`
             */
            sBackgroundColor: sap.gantt.ValueSVGPaintServer
          ): sap.gantt.def.pattern.PatternBase;
          /**
           * Sets a new value for property {@link #getBackgroundFillOpacity backgroundFillOpacity}.
           *
           * Fill opacity of background color.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `1`.
           */
          setBackgroundFillOpacity(
            /**
             * New value for property `backgroundFillOpacity`
             */
            fBackgroundFillOpacity: number
          ): sap.gantt.def.pattern.PatternBase;
          /**
           * Sets a new value for property {@link #getTileHeight tileHeight}.
           *
           * Height of the pattern tile.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `8`.
           */
          setTileHeight(
            /**
             * New value for property `tileHeight`
             */
            iTileHeight: number
          ): sap.gantt.def.pattern.PatternBase;
          /**
           * Sets a new value for property {@link #getTileWidth tileWidth}.
           *
           * Width of the pattern tile.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `8`.
           */
          setTileWidth(
            /**
             * New value for property `tileWidth`
             */
            iTileWidth: number
          ): sap.gantt.def.pattern.PatternBase;
        }
        /**
         * Slash pattern defined by a path. Stroke color and stroke width of the path can be changed by corresponding
         * properties.
         *
         *
         *           Tile Detail:       tileHeight tileWidth background Color strokeColor strokeWidth
         */
        class SlashPattern extends sap.gantt.def.pattern.PatternBase {
          /**
           * Creates and initializes a slash pattern defined for later reuse.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * id for the new control, generated automatically if no id is given
             */
            sId?: string,
            /**
             * initial settings for the new control
             */
            mSettings?: SlashPatternOpts
          );

          /**
           * Creates a new subclass of class sap.gantt.def.pattern.SlashPattern with name `sClassName` and enriches
           * it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.def.pattern.PatternBase.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.gantt.def.pattern.SlashPattern.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getPath path}.
           *
           * Value of d attribute in Path element. The value is influenced by property `tileWidth` and `tileHeight`.
           * If this value is changed by coding, the logic cannot be guaranteed.
           */
          getPath(): string;
          /**
           * Gets current value of property {@link #getStroke stroke}.
           *
           * Stroke color of the path element.
           */
          getStroke(): sap.gantt.ValueSVGPaintServer;
          /**
           * Gets current value of property {@link #getStrokeWidth strokeWidth}.
           *
           * Stroke width of the path element.
           *
           * Default value is `2`.
           */
          getStrokeWidth(): number;
          /**
           * Sets a new value for property {@link #getPath path}.
           *
           * Value of d attribute in Path element. The value is influenced by property `tileWidth` and `tileHeight`.
           * If this value is changed by coding, the logic cannot be guaranteed.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setPath(
            /**
             * New value for property `path`
             */
            sPath: string
          ): sap.gantt.def.pattern.SlashPattern;
          /**
           * Sets a new value for property {@link #getStroke stroke}.
           *
           * Stroke color of the path element.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setStroke(
            /**
             * New value for property `stroke`
             */
            sStroke: sap.gantt.ValueSVGPaintServer
          ): sap.gantt.def.pattern.SlashPattern;
          /**
           * Sets a new value for property {@link #getStrokeWidth strokeWidth}.
           *
           * Stroke width of the path element.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `2`.
           */
          setStrokeWidth(
            /**
             * New value for property `strokeWidth`
             */
            iStrokeWidth: number
          ): sap.gantt.def.pattern.SlashPattern;
        }
      }

      interface DefBaseOpts extends sap.ui.core.ElementOpts {
        /**
         * Definition string. Subclasses can implement their own getters of this property to override the one in
         * this class.
         */
        defString?: string;

        /**
         * Referencing string. The default implementation is the referencing ID wrapped by 'url(#)'.
         */
        refString?: string;
      }
      /**
       * Base class for all SVG definitions.
       *
       *  SVG uses the 'defs' tag to represent graphic objects that can be reused at a later time. Currently
       * `sap.gantt` provides defs including the following definition tags: 'pattern', 'gradient', and 'filter'.
       * Applications can also extend this base class to support more functionality.
       */
      class DefBase extends sap.ui.core.Element {
        /**
         * Creates and initializes a new SVG graphic object for reuse.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID of the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: DefBaseOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.def.DefBase with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Provides a referencing ID. The default implementation is to use control ID as the referencing ID.
         * See:
         * 	sap.ui.table.Table.getSelectedIndex
         */
        generateRefId(): string;
        /**
         * Gets current value of property {@link #getDefString defString}.
         *
         * Definition string. Subclasses can implement their own getters of this property to override the one in
         * this class.
         */
        getDefString(): string;
        /**
         * Returns a metadata object for class sap.gantt.def.DefBase.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getRefString refString}.
         *
         * Referencing string. The default implementation is the referencing ID wrapped by 'url(#)'.
         */
        getRefString(): string;
        /**
         * Sets a new value for property {@link #getDefString defString}.
         *
         * Definition string. Subclasses can implement their own getters of this property to override the one in
         * this class.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setDefString(
          /**
           * New value for property `defString`
           */
          sDefString: string
        ): sap.gantt.def.DefBase;
        /**
         * Sets a new value for property {@link #getRefString refString}.
         *
         * Referencing string. The default implementation is the referencing ID wrapped by 'url(#)'.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setRefString(
          /**
           * New value for property `refString`
           */
          sRefString: string
        ): sap.gantt.def.DefBase;
      }
      /**
       * The class handles the container tag "defs" for all reusable SVG graphic definitions. It provides interfaces
       * for SVG definition strings and referencing strings. The parent class is responsible for rendering the
       * definition strings.
       *
       *  SVG uses the 'defs' tag to represent graphic objects that are defined for reuse at a later time.
       * Currently `sap.gantt` provides defs including the following definition tags: 'pattern', 'gradient', and
       * 'filter'. Applications can also extend this base class to support more functionality.
       */
      // @ts-ignore - static 'getMetadata' inheritance issue
      class SvgDefs extends sap.ui.base.ManagedObject {
        /**
         * SVG definition tag class.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID of the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: object
        );

        /**
         * Adds some def to the aggregation {@link #getDefs defs}.
         */
        addDef(
          /**
           * The def to add; if empty, nothing is inserted
           */
          oDef: sap.gantt.def.DefBase
        ): sap.gantt.def.SvgDefs;
        /**
         * Binds aggregation {@link #getDefs defs} to model data.
         *
         * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
         * of the possible properties of `oBindingInfo`.
         */
        bindDefs(
          /**
           * The binding information
           */
          oBindingInfo: object
        ): sap.gantt.def.SvgDefs;
        /**
         * Destroys all the defs in the aggregation {@link #getDefs defs}.
         */
        destroyDefs(): sap.gantt.def.SvgDefs;
        /**
         * Creates a new subclass of class sap.gantt.def.SvgDefs with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets content of aggregation {@link #getDefs defs}.
         *
         * SVG definition instances.
         */
        getDefs(): sap.gantt.def.DefBase[];
        /**
         * Definition string of the SVG 'defs' tag.
         */
        getDefString(): string;
        /**
         * Returns a metadata object for class sap.gantt.def.SvgDefs.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Checks for the provided `sap.gantt.def.DefBase` in the aggregation {@link #getDefs defs}. and returns
         * its index if found or -1 otherwise.
         */
        indexOfDef(
          /**
           * The def whose index is looked for
           */
          oDef: sap.gantt.def.DefBase
        ): number;
        /**
         * Inserts a def into the aggregation {@link #getDefs defs}.
         */
        insertDef(
          /**
           * The def to insert; if empty, nothing is inserted
           */
          oDef: sap.gantt.def.DefBase,
          /**
           * The `0`-based index the def should be inserted at; for a negative value of `iIndex`, the def is inserted
           * at position 0; for a value greater than the current size of the aggregation, the def is inserted at the
           * last position
           */
          iIndex: number
        ): sap.gantt.def.SvgDefs;
        /**
         * Removes all the controls from the aggregation {@link #getDefs defs}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllDefs(): sap.gantt.def.DefBase[];
        /**
         * Removes a def from the aggregation {@link #getDefs defs}.
         */
        removeDef(
          /**
           * The def to remove or its index or id
           */
          vDef: number | string | sap.gantt.def.DefBase
        ): sap.gantt.def.DefBase;
        /**
         * Unbinds aggregation {@link #getDefs defs} from model data.
         */
        unbindDefs(): sap.gantt.def.SvgDefs;
      }
    }

    namespace dragdrop {
      /**
       * Defines how Gantt Chart aligns a draggable shape to the mouse pointer before dragging.
       */
      namespace GhostAlignment {
        /**
         * When you click on a shape to start a drag-and-drop operation, the upper-right corner of the shape is
         * automatically moved to the mouse pointer before you start dragging. This option makes the end time of
         * the shape align with the cursor line through the whole drag-and-drop process, and thus you can precisely
         * determine the end time when you drop the shape.
         */
        export const End: undefined;

        /**
         * Default drag-and-drop behavior. When you click on a shape to start a drag-and-drop operation, Gantt Chart
         * does not move the shape before you start dragging. This option keeps the relative position between the
         * shape and the mouse pointer intact through the whole drag-and-drop process.
         */
        export const None: undefined;

        /**
         * When you click on a shape to start a drag-and-drop operation, the upper-left corner of the shape is automatically
         * moved to the mouse pointer before you start dragging. This option makes the start time of the shape align
         * with the cursor line through the whole drag-and-drop process, and thus you can precisely determine the
         * start time when you drop the shape.
         */
        export const Start: undefined;
      }

      interface DragOrientation {}
    }

    namespace misc {
      /**
       * The reusable functional class represents an instance of ordinal pattern coordinate mapping.
       */
      class AxisOrdinal {
        /**
         * Creates and initializes an AxisOrdinal class.
         */
        constructor(
          /**
           * Element array corresponding to an ordinal axis.
           */
          aElementArray: any[],
          /**
           * Scale array where each item represents one or more smallest width units in one-to-one relationship with
           * aAlementArray.
           */
          aScaleArray: any[],
          /**
           * Smallest width unit for elements.
           */
          nViewBandWidth: number,
          /**
           * Start position of an axis in the viewport area.
           */
          nViewRangeStart: number,
          /**
           * End position of an axis in the viewport area. The parameter is ignored if viewBandWidth is set.
           */
          nViewRangeEnd: number,
          /**
           * Zoom rate of the viewport area.
           */
          nZoomRate: number,
          /**
           * Zoom origin of the viewport area.
           */
          nZoomOrigin: number,
          /**
           * Padding for each band.
           */
          nPadding: number
        );

        /**
         * Clones a new AxisOrdinal from the current one.
         */
        clone(): sap.gantt.misc.AxisOrdinal;
        /**
         * Transforms an element to a position in the coordinate system
         */
        elementToView(
          /**
           * Element that exists in parameter elementArray of the constructor
           */
          element: Object
        ): void;
        /**
         * Retrieves the value of elementArray.
         */
        getElementArray(): any[];
        /**
         * Retrieves the value of scaleArray.
         */
        getScaleArray(): any[];
        /**
         * Retrieves the value of viewBandWidth.
         */
        getViewBandWidth(): number;
        /**
         * Retrieves the view range of the current viewport area.
         */
        getViewRange(): any[];
        /**
         * Retrieves the zoom origin.
         */
        getZoomOrigin(): number;
        /**
         * Retrieves the value of zoom rate.
         */
        getZoomRate(): number;
        /**
         * Sets a new value of elementArray with the corresponding scaleArray.
         */
        setElements(
          /**
           * New element array corresponding to an ordinal axis.
           */
          elementArray: any[],
          /**
           * Corresponding scale array where each item represents one or more smallest width units in one-to-one relationship
           * with elementArray.
           */
          scaleArray: any[]
        ): sap.gantt.misc.AxisOrdinal;
        /**
         * Sets a new value of viewBandWidth.
         */
        setViewBandWidth(
          /**
           * Smallest width unit for elements.
           */
          viewBandWidth: number
        ): sap.gantt.misc.AxisOrdinal;
        /**
         * Sets a new value of the end position of a view range.
         */
        setViewRangeEnd(
          /**
           * End position of axis in the viewport area. The parameter is ignored if viewBandWidth is set.
           */
          viewRangeEnd: number
        ): sap.gantt.misc.AxisOrdinal;
        /**
         * Sets a new value of the start position of a view range.
         */
        setViewRangeStart(
          /**
           * Start position of an axis in the viewport area.
           */
          viewRangeStart: number
        ): sap.gantt.misc.AxisOrdinal;
        /**
         * Sets the zoom origin.
         */
        setZoomOrigin(
          /**
           * Zoom origin of the viewport area.
           */
          zoomOrigin: number
        ): sap.gantt.misc.AxisOrdinal;
        /**
         * Sets a new value of zoom rate.
         */
        setZoomRate(
          /**
           * New zoom rate of the viewport area.
           */
          zoomRate: number
        ): sap.gantt.misc.AxisOrdinal;
        /**
         * Transforms a position in the coordinate system to a band index
         */
        viewToBandIndex(
          /**
           * A position in the coordinate system
           */
          value: Number
        ): void;
        /**
         * Transforms a position in the coordinate system to an element
         */
        viewToElement(
          /**
           * Position in the coordinate system
           */
          value: Number
        ): void;
        /**
         * Transforms a position in the coordinate system to an element index
         */
        viewToElementIndex(
          /**
           * Position in the coordinate system
           */
          value: Number
        ): void;
        /**
         * Transforms a position in the coordinate system to a row index
         */
        viewToRowIndex(
          /**
           * Position in the coordinate system
           */
          value: Number,
          /**
           * Max row index in the coordinate system
           */
          iMaxIndex: Number
        ): void;
      }
      /**
       * The reusable functional class represents an instance of time-value linear coordinate mapping.
       */
      class AxisTimes {
        /**
         * Creates and initializes an AxisTime class.
         */
        constructor(
          /**
           * The array must contain two or more dates that represent some ranges of data.
           */
          timeRange: any[],
          /**
           * The array must contain two or more values, to match the cardinality of timeRange, representing some ranges
           * of values.
           */
          viewRange: any[],
          /**
           * Zoom rate of the viewport area.
           */
          zoomRate: number,
          /**
           * Zoom origin of the viewport area.
           */
          zoomOrigin: number,
          /**
           * Offset of the viewport area.
           */
          viewOffset: number,
          /**
           * Settings for language, time zone, and daylight saving.
           */
          locale: object,
          /**
           * Specifies the strategy to zoom in/out.
           */
          oZoomStrategy: any[]
        );

        /**
         * Clones a new AxisTimes from the current one.
         */
        clone(): sap.gantt.misc.AxisTimes;
        /**
         * @deprecated (since 1.44) - replaced by sap.gantt.axistime.AxisTimeStrategyBase.getZoomLevel
         *
         * Retrieves a key of the time interval level in array oZoomStrategy.
         */
        getCurrentTickTimeIntervalKey(): string;
        /**
         * @deprecated (since 1.44) - replaced by sap.gantt.axistime.AxisTimeStrategyBase.getZoomLevel
         *
         * Retrieves an index of the time interval level in array oZoomStrategy.
         */
        getCurrentTickTimeIntervalLevel(): number;
        /**
         * Retrieves an object containing the information of current time, its position, and label.
         */
        getNowLabel(
          /**
           * Convert date to UTC.
           */
          timeInUTC: boolean
        ): object;
        /**
         * Retrieves an array of time ticks, each item containing date position and label, for the specified level
         * within the given timeBoundary or viewBoundary.
         */
        getTickTimeIntervalLabel(
          /**
           * Corresponding index in array oZoomStrategy.
           */
          level: number,
          /**
           * Time range within which time ticks are generated.
           */
          timeBoundary: number,
          /**
           * View range within which time ticks are generated. Available only when timeBoundary isn't specified.
           */
          viewBoundary: number
        ): object;
        /**
         * Retrieves the value of timeRange.
         */
        getTimeRange(): any[];
        /**
         * Calculate a slice of time range out of the total range
         */
        getTimeRangeSlice(
          iStartX: number,

          iEndX: number
        ): void;
        /**
         * Retrieves the value of viewOffset.
         */
        getViewOffset(): number;
        /**
         * Retrieves the value of viewRange.
         */
        getViewRange(): any[];
        /**
         * Retrieves the value of zoomOrigin.
         */
        getZoomOrigin(): number;
        /**
         * Retrieves the value of zoomRate.
         */
        getZoomRate(): number;
        /**
         * Retrieves the value of oZoomStrategy.
         */
        getZoomStrategy(): object;
        /**
         * Sets a new value of timeRange.
         */
        setTimeRange(
          /**
           * New value of timeRange.
           */
          timeRange: any[]
        ): sap.gantt.misc.AxisTimes;
        /**
         * Sets a new value of viewOffset.
         */
        setViewOffset(
          /**
           * New value of viewOffset.
           */
          viewOffset: number
        ): sap.gantt.misc.AxisTimes;
        /**
         * Sets a new value of viewRange.
         */
        setViewRange(
          /**
           * New value of viewRange.
           */
          viewRange: any[]
        ): sap.gantt.misc.AxisTimes;
        /**
         * Sets a new value of zoomOrigin.
         */
        setZoomOrigin(
          /**
           * New value of zoomOrigin.
           */
          zoomOrigin: number
        ): sap.gantt.misc.AxisTimes;
        /**
         * Sets a new value of zoomRate.
         */
        setZoomRate(
          /**
           * New value of zoomRate.
           */
          zoomRate: number
        ): sap.gantt.misc.AxisTimes;
        /**
         * Given a date within the timeRange, this function returns the corresponding value within the viewRange.
         */
        timeToView(
          /**
           * Given date within the timeRange.
           */
          time: Date
        ): number;
        /**
         * Returns the date within the timeRange for the corresponding value within the viewRange.
         */
        viewToTime(
          /**
           * Given value within the viewRange.
           */
          value: number
        ): Date;
      }
      /**
       * The Format class provides static methods for formatting dates, times, and timestamps to be used in sap.gantt
       */
      class Format {
        /**
         * A dummy constructor for Format. Do not construct a Format object; instead, call static methods abapTimestampToDate,
         * dateToAbapTimestamp, and abapTimestampToTimeLabel directly.
         */
        constructor();

        /**
         * Converts an ABAP timestamp(eg:"20150909000000" ) into a Date instance.
         */
        static abapTimestampToDate(
          /**
           * The ABAP timestamp to convert
           */
          sTimestamp: string
        ): Date;
        /**
         * Converts an ABAP timestamp into a time label to be used in Gantt.
         */
        static abapTimestampToTimeLabel(
          /**
           * The ABAP timestamp to convert
           */
          sTimestamp: string,
          /**
           * The locale object has the time zone and DST info; this determines how the function converts the timestamp
           * into a locale-specific time label
           */
          oLocale: sap.gantt.config.Locale
        ): string;
        /**
         * Converts an absolute time object into a relative time object, which contains the following properties:
         * { intervalDays: * difference in the day segment between the target time and base time*, intervalHours:
         * * difference in the hour segment between the target time and base time*, intervalMinutes: * difference
         * in the minute segment between the target time and base time*, intervalSecond: * difference in the segment
         * segment between the target time and base time* } Use this method only in relative time axis mode.
         */
        static absolutTimeToRelativeTime(
          /**
           * the absolute time object will be converted
           */
          oTime: Date
        ): object;
        /**
         * Converts a Date instance into an ABAP timestamp.
         */
        static dateToAbapTimestamp(
          /**
           * The date instance to convert
           */
          oDate: Date
        ): string;
        /**
         * Converts a relative time object into an absolute time object. Use this method only in relative time axis
         * mode.
         */
        static relativeTimeToAbsolutTime(
          /**
           * difference in the day segment between the target time and base time
           */
          iIntervalDays: number,
          /**
           * difference in the hour segment between the target time and base time
           */
          iIntervalHours: number,
          /**
           * difference in the minute segment between the target time and base time
           */
          iIntervalMinutes: number,
          /**
           * difference in the second segment between the target time and base time
           */
          iIntervalSeconds: number
        ): Date;
      }
    }

    namespace simple {
      namespace shapes {
        interface ShapeOpts extends sap.gantt.simple.BaseShapeOpts {
          /**
           * Color to be used for rendering the shape.
           */
          color?: sap.gantt.PaletteColor;

          /**
           * Height defines the vertical length of the shape.
           *
           * By default, the system automatically generates the shape height according to the base row height. You
           * can set the height yourself by using the setter method. However, it cannot exceed the row height.
           */
          height?: sap.gantt.SVGLength;

          /**
           * The horizontal width of a shape. Auto will be converted to width calculated from `time` and `endTime`.
           */
          width?: sap.gantt.SVGLength;

          /**
           * The x position of the shapes start. Auto will be converted to position based on `time`.
           */
          startX?: sap.gantt.SVGLength;

          /**
           * @deprecated
           *
           * This property is ignored.
           */
          fill?: sap.gantt.ValueSVGPaintServer;

          /**
           * @deprecated
           *
           * This property is ignored.
           */
          fillOpacity?: number;

          /**
           * @deprecated
           *
           * This property is ignored.
           */
          stroke?: sap.gantt.ValueSVGPaintServer;

          /**
           * @deprecated
           *
           * This property is ignored.
           */
          opacity?: number;

          /**
           * @deprecated
           *
           * All standard shapes are selectable.
           */
          selectable?: boolean;

          /**
           * @deprecated
           *
           * All standard shapes are hoverable.
           */
          hoverable?: boolean;
        }

        interface TaskOpts extends sap.gantt.simple.shapes.ShapeOpts {
          /**
           * Type of the task.
           */
          type?: sap.gantt.simple.shapes.TaskType;

          /**
           * Position of utilisation information.
           */
          utilizationDown?: boolean;

          /**
           * Title used for legend.
           */
          title?: string;
        }

        interface TaskType {}
        /**
         * @SINCE 1.69
         *
         * Base class for all standard shapes.
         *
         * This class provides the common used properties and methods useful for shape rendering. Use this class
         * as a parent of your custom shape implementations.
         */
        class Shape extends sap.gantt.simple.BaseShape {
          /**
           * Creates and initializes a new Shape class.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: ShapeOpts
          );

          /**
           * Creates a new subclass of class sap.gantt.simple.shapes.Shape with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.simple.BaseShape.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Gets current value of property {@link #getColor color}.
           *
           * Color to be used for rendering the shape.
           *
           * Default value is `sapUiLegend6`.
           */
          getColor(): sap.gantt.PaletteColor;
          /**
           * @deprecated - true
           *
           * Gets current value of property {@link #getFill fill}.
           *
           * This property is ignored.
           */
          // @ts-ignore
          getFill(): sap.gantt.ValueSVGPaintServer;
          /**
           * @deprecated - true
           *
           * Gets current value of property {@link #getFillOpacity fillOpacity}.
           *
           * This property is ignored.
           *
           * Default value is `1`.
           */
          // @ts-ignore
          getFillOpacity(): number;
          /**
           * Gets current value of property {@link #getHeight height}.
           *
           * Height defines the vertical length of the shape.
           *
           * By default, the system automatically generates the shape height according to the base row height. You
           * can set the height yourself by using the setter method. However, it cannot exceed the row height.
           *
           * Default value is `auto`.
           */
          getHeight(): sap.gantt.SVGLength;
          /**
           * @deprecated - true
           *
           * Gets current value of property {@link #getHoverable hoverable}.
           *
           * All standard shapes are hoverable.
           *
           * Default value is `true`.
           */
          // @ts-ignore
          getHoverable(): boolean;
          /**
           * Returns hex color for hover background.
           */
          getHoverBackgroundColor(): string;
          /**
           * Returns hex color for hover stroke.
           */
          getHoverColor(): string;
          /**
           * Returns current hover state.
           */
          getHoverState(): boolean;
          /**
           * Returns a metadata object for class sap.gantt.simple.shapes.Shape.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * @deprecated - true
           *
           * Gets current value of property {@link #getOpacity opacity}.
           *
           * This property is ignored.
           *
           * Default value is `1`.
           */
          // @ts-ignore
          getOpacity(): number;
          /**
           * Computes the width in pixels this shape has based on current zoom level and `time` and `endTime`.
           */
          getPixelWidth(): number;
          /**
           * Returns a row padding.
           */
          getRowPadding(): number;
          /**
           * @deprecated - true
           *
           * Gets current value of property {@link #getSelectable selectable}.
           *
           * All standard shapes are selectable.
           *
           * Default value is `true`.
           */
          // @ts-ignore
          getSelectable(): boolean;
          /**
           * Returns hex color for selected shapes.
           */
          getSelectedColor(): string;
          /**
           * Gets current value of property {@link #getStartX startX}.
           *
           * The x position of the shapes start. Auto will be converted to position based on `time`.
           *
           * Default value is `auto`.
           */
          getStartX(): sap.gantt.SVGLength;
          /**
           * @deprecated - true
           *
           * Gets current value of property {@link #getStroke stroke}.
           *
           * This property is ignored.
           */
          // @ts-ignore
          getStroke(): sap.gantt.ValueSVGPaintServer;
          /**
           * Translates color to hex value.
           */
          getTranslatedColor(): string;
          /**
           * Gets current value of property {@link #getWidth width}.
           *
           * The horizontal width of a shape. Auto will be converted to width calculated from `time` and `endTime`.
           *
           * Default value is `auto`.
           */
          getWidth(): sap.gantt.SVGLength;
          /**
           * Computes the x coordinate of the shape end.
           */
          getXEnd(): number;
          /**
           * Computes the x coordinate of the shape beginning.
           */
          getXStart(): number;
          /**
           * Renders the content of the shape.
           */
          renderContent(
            /**
             * Render Manager
             */
            oRm: undefined
          ): void;
          /**
           * Renders element into the provided Render Manager.
           */
          // @ts-ignore
          renderElement(
            /**
             * Render Manager
             */
            oRm: undefined
          ): void;
          /**
           * Sets a new value for property {@link #getColor color}.
           *
           * Color to be used for rendering the shape.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `sapUiLegend6`.
           */
          setColor(
            /**
             * New value for property `color`
             */
            sColor: sap.gantt.PaletteColor
          ): sap.gantt.simple.shapes.Shape;
          /**
           * @deprecated - true
           *
           * Sets a new value for property {@link #getFill fill}.
           *
           * This property is ignored.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          // @ts-ignore
          setFill(
            /**
             * New value for property `fill`
             */
            sFill: sap.gantt.ValueSVGPaintServer
          ): sap.gantt.simple.shapes.Shape;
          /**
           * @deprecated - true
           *
           * Sets a new value for property {@link #getFillOpacity fillOpacity}.
           *
           * This property is ignored.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `1`.
           */
          // @ts-ignore
          setFillOpacity(
            /**
             * New value for property `fillOpacity`
             */
            fFillOpacity: number
          ): sap.gantt.simple.shapes.Shape;
          /**
           * Sets a new value for property {@link #getHeight height}.
           *
           * Height defines the vertical length of the shape.
           *
           * By default, the system automatically generates the shape height according to the base row height. You
           * can set the height yourself by using the setter method. However, it cannot exceed the row height.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `auto`.
           */
          setHeight(
            /**
             * New value for property `height`
             */
            sHeight: sap.gantt.SVGLength
          ): sap.gantt.simple.shapes.Shape;
          /**
           * @deprecated - true
           *
           * Sets a new value for property {@link #getHoverable hoverable}.
           *
           * All standard shapes are hoverable.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          // @ts-ignore
          setHoverable(
            /**
             * New value for property `hoverable`
             */
            bHoverable: boolean
          ): sap.gantt.simple.shapes.Shape;
          /**
           * @deprecated - true
           *
           * Sets a new value for property {@link #getOpacity opacity}.
           *
           * This property is ignored.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `1`.
           */
          // @ts-ignore
          setOpacity(
            /**
             * New value for property `opacity`
             */
            fOpacity: number
          ): sap.gantt.simple.shapes.Shape;
          /**
           * @deprecated - true
           *
           * Sets a new value for property {@link #getSelectable selectable}.
           *
           * All standard shapes are selectable.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          // @ts-ignore
          setSelectable(
            /**
             * New value for property `selectable`
             */
            bSelectable: boolean
          ): sap.gantt.simple.shapes.Shape;
          /**
           * Sets a new value for property {@link #getStartX startX}.
           *
           * The x position of the shapes start. Auto will be converted to position based on `time`.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `auto`.
           */
          setStartX(
            /**
             * New value for property `startX`
             */
            sStartX: sap.gantt.SVGLength
          ): sap.gantt.simple.shapes.Shape;
          /**
           * @deprecated - true
           *
           * Sets a new value for property {@link #getStroke stroke}.
           *
           * This property is ignored.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          // @ts-ignore
          setStroke(
            /**
             * New value for property `stroke`
             */
            sStroke: sap.gantt.ValueSVGPaintServer
          ): sap.gantt.simple.shapes.Shape;
          /**
           * Sets a new value for property {@link #getWidth width}.
           *
           * The horizontal width of a shape. Auto will be converted to width calculated from `time` and `endTime`.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `auto`.
           */
          setWidth(
            /**
             * New value for property `width`
             */
            sWidth: sap.gantt.SVGLength
          ): sap.gantt.simple.shapes.Shape;
        }
        /**
         * @SINCE 1.69
         *
         * A shape representing one task.
         */
        class Task extends sap.gantt.simple.shapes.Shape {
          /**
           * Creates and initializes a new Task class.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: TaskOpts
          );

          /**
           * Creates a new subclass of class sap.gantt.simple.shapes.Task with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.simple.shapes.Shape.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.gantt.simple.shapes.Task.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getTitle title}.
           *
           * Title used for legend.
           */
          getTitle(): string;
          /**
           * Gets current value of property {@link #getType type}.
           *
           * Type of the task.
           *
           * Default value is `Normal`.
           */
          getType(): sap.gantt.simple.shapes.TaskType;
          /**
           * Gets current value of property {@link #getUtilizationDown utilizationDown}.
           *
           * Position of utilisation information.
           *
           * Default value is `true`.
           */
          getUtilizationDown(): boolean;
          /**
           * Sets a new value for property {@link #getTitle title}.
           *
           * Title used for legend.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setTitle(
            /**
             * New value for property `title`
             */
            sTitle: string
          ): sap.gantt.simple.shapes.Task;
          /**
           * Sets a new value for property {@link #getType type}.
           *
           * Type of the task.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `Normal`.
           */
          setType(
            /**
             * New value for property `type`
             */
            sType: sap.gantt.simple.shapes.TaskType
          ): sap.gantt.simple.shapes.Task;
          /**
           * Sets a new value for property {@link #getUtilizationDown utilizationDown}.
           *
           * Position of utilisation information.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           */
          setUtilizationDown(
            /**
             * New value for property `utilizationDown`
             */
            bUtilizationDown: boolean
          ): sap.gantt.simple.shapes.Task;
        }
      }

      interface BaseCalendarOpts extends sap.gantt.simple.BaseRectangleOpts {
        calendarName?: string;
      }

      interface BaseChevronOpts extends sap.gantt.simple.BaseRectangleOpts {
        /**
         * The head width of the Chevron
         */
        headWidth?: sap.gantt.SVGLength;

        /**
         * The tail width of the Chevron
         */
        tailWidth?: sap.gantt.SVGLength;
      }

      interface BaseConditionalShapeOpts
        extends sap.gantt.simple.BaseShapeOpts {
        /**
         * Defines which shape from the `shapes` aggregation is visible. If you specify a negative value or a value
         * that is greater than the number of shapes defined, no shape will be rendered.
         */
        activeShape?: number;

        /**
         * Specifies whether or not the system takes this shape into account at the bird's eye zoom level.
         * We suggest that you set this property to `true` only for shapes that really need to be considered when
         * in the bird's eye view.
         *
         * This property is overwritten by property `countInBirdEye` of the `activeShape` shape from the `shapes`
         * aggregation.
         * For setting this property, use the setter method of the active shape. The getter method returns the property
         * value of the active shape.
         */
        countInBirdEye?: boolean;

        /**
         * A list of base shapes to switch between. Only one of these shapes will be rendered based on the `activeShape`
         * property.
         */
        shapes?: sap.gantt.simple.BaseShape[] | sap.gantt.simple.BaseShape;
      }

      interface BaseCursorOpts extends sap.gantt.simple.BaseRectangleOpts {
        /**
         * The horizontal length of a cursor. This property influences generated value `d`.
         */
        length?: number;

        /**
         * The vertical size minus the point size of a cursor. This property influences generated value `d`.
         */
        width?: number;

        /**
         * The point size of a cursor. This property influences generated value `d`.
         */
        pointHeight?: number;
      }

      interface BaseDiamondOpts extends sap.gantt.simple.BaseRectangleOpts {
        /**
         * width of Diamond
         */
        width?: sap.gantt.SVGLength;

        /**
         * height of Diamond
         */
        height?: sap.gantt.SVGLength;
      }

      interface BaseGroupOpts extends sap.gantt.simple.BaseShapeOpts {
        /**
         * The shapes of the group
         */
        shapes?: sap.gantt.simple.BaseShape[] | sap.gantt.simple.BaseShape;
      }

      interface BaseImageOpts extends sap.gantt.simple.BaseTextOpts {
        /**
         * Src of the image. If the image is represented by an icon font, then the src is sap-icon://task for instance
         */
        src?: sap.ui.core.URI;

        /**
         * Width of the image.
         */
        width?: sap.gantt.SVGLength;

        /**
         * Height of the image.
         */
        height?: sap.gantt.SVGLength;
      }

      interface BaseLineOpts extends sap.gantt.simple.BaseShapeOpts {
        /**
         * x1 defines the x-axis coordinate of the line starting point
         */
        x1?: sap.gantt.SVGLength;

        /**
         * y1 defines the y-axis coordinate of the line starting point
         */
        y1?: sap.gantt.SVGLength;

        /**
         * x2 defines the x-axis coordinate of the line ending point
         */
        x2?: sap.gantt.SVGLength;

        /**
         * y2 defines the y-axis coordinate of the line ending point
         */
        y2?: sap.gantt.SVGLength;
      }

      interface BasePathOpts extends sap.gantt.simple.BaseShapeOpts {
        /**
         * The d property provides a path definition to be drawn.
         */
        d?: string;
      }

      interface BaseRectangleOpts extends sap.gantt.simple.BaseShapeOpts {
        /**
         * x defines a x-axis coordinate in the user coordinate system
         */
        x?: sap.gantt.SVGLength;

        /**
         * defines a y-axis coordinate in the user coordinate system
         */
        y?: sap.gantt.SVGLength;

        /**
         * width defines the horizontal length of the rectangle. Most of time it's calculated by properties `time`
         * and `endTime` automatically
         */
        width?: sap.gantt.SVGLength;

        /**
         * height defines the vertical length of the rectangle.
         *
         * By default, the system automatically generates the shape height according to the base row height. You
         * can set the height yourself by using the setter method. However, it cannot exceed the row height.
         */
        height?: sap.gantt.SVGLength;

        /**
         * rx defines a radius on the x-axis.
         */
        rx?: sap.gantt.SVGLength;

        /**
         * ry defines a radius on the y-axis.
         */
        ry?: sap.gantt.SVGLength;
      }

      interface BaseShapeOpts extends sap.ui.core.ElementOpts {
        /**
         * ID of the shape. shapeId property represents a unique identifier for a business object. This property
         * shall be bound to a property during initialization, it requires an unique non-empty value.
         */
        shapeId?: string;

        /**
         * Start time of the shape. This property is mandatory, you must bind this property to a model or set a
         * valid JavaScript Date object. The value will be converted to x coordination when rendering. If not set,
         * the shape is not visible.
         */
        time?: object;

        /**
         * end time of the shape. This property is mandatory if the shape is a duration shape. The duration is determined
         * by minusing the value of property `time`
         */
        endTime?: object;

        /**
         * Scheme key of the shape.
         *
         * The scheme is used by expand/collapse the main row shape. You can define the scheme together with `shapeSchemes`
         * in `sap.gantt.simple.GanttChartWithTable`, the value defines here needse matchs the key value defines
         * in `sap.gantt.simple.ShapeScheme`
         */
        scheme?: string;

        /**
         * X offset in pixel. If the value is positive, in non-RTL mode, means to translate the visual object to
         * the right in pixel unit. If the value is negative, the logic is inverted.
         */
        xBias?: number;

        /**
         * Y offset in pixel. If the value is positive, in non-RTL mode, it means translate the visual object to
         * the bottom in pixel unit. If the value is negative, the logic is inverted.
         */
        yBias?: number;

        /**
         * The fill property enables you to define the fill color for shapes and texts.
         *
         * For shapes and text the fill property is a presentation attribute that lets define the color (or any
         * SVG paint servers like gradients or patterns)
         */
        fill?: sap.gantt.ValueSVGPaintServer;

        /**
         * stroke opacity of the shape
         */
        strokeOpacity?: number;

        /**
         * The fillOpacity property is a presentation property defining the opacity of the paint server (color,
         * gradient, pattern, etc) applied to a shape.
         */
        fillOpacity?: number;

        /**
         * The opacity attribute specifies the transparency of an object or of a group of objects, that is, the
         * degree to which the background behind the element is overlaid.
         *
         * The minimum value is 0.0 and maximum value is 1.0
         */
        opacity?: number;

        /**
         * The stroke property is a presentation property defining the color (or any SVG paint servers like gradients
         * or patterns) used to paint the outline of the shape;
         */
        stroke?: sap.gantt.ValueSVGPaintServer;

        /**
         * The strokeWidth property is a presentation property defining the width of the stroke to be applied to
         * the shape.
         */
        strokeWidth?: number;

        /**
         * The strokeDasharray property is a presentation property defining the pattern of dashes and gaps used
         * to paint the outline of the shape.
         */
        strokeDasharray?: string;

        /**
         * The transform property defines a list of transform definitions that are applied to an element and the
         * element's children Right now in gantt library, only `translate()` method is supported. CSS methods like
         * scale, skew, rotate and matrix doesn't support. And if you provide values for transform, the values will
         * update xBias and yBias if translate the corresponding axis is matched.
         */
        transform?: string;

        /**
         * The filter property defines the filter effects defined by the  element that shall be applied
         * to its element
         */
        filter?: string;

        /**
         * Whether the shape is expandable
         */
        expandable?: boolean;

        /**
         * Whether the shape is selectable
         */
        selectable?: boolean;

        /**
         * Whether the shape is selected
         */
        selected?: boolean;

        /**
         * Specifies whether the shape is draggable a draggble shape requires the shape is selectable set true as
         * well.
         */
        draggable?: boolean;

        /**
         * Specifies whether the shape is resizable. Resizing a shape requires the shape is selectable as well.
         */
        resizable?: boolean;

        /**
         * Specifies whether the shape is hoverable. hovering the mouse pointer over the shape fires the shapeMouseEnter
         * event and moving the mouse pointer out of the shape fires the shapeMouseLeave event.
         */
        hoverable?: boolean;

        /**
         * Specifies whether the shape is connectable. When this property is set to true, you can connect two different
         * shapes to create a relationship
         */
        connectable?: boolean;

        /**
         * rowYCenter of the shape
         */
        rowYCenter?: number;

        /**
         * Specifies whether or not the system takes this shape into account when performing a bird eye zooming.
         * We suggest that you set this property to true only for shapes that really need to be considered into
         * bird eye range.
         */
        countInBirdEye?: boolean;

        /**
         * Shows or hides the shape.
         */
        visible?: boolean;
      }

      interface BaseTextOpts extends sap.gantt.simple.BaseShapeOpts {
        /**
         * Text content
         */
        text?: string;

        /**
         * x-axis coordinate
         */
        x?: number;

        /**
         * y-axis coordinate
         */
        y?: number;

        /**
         * The fontSize property refers to the size of the font
         */
        fontSize?: number;

        /**
         * This property is used to align (start-, middle- or end-alignment) a string of text relative to a given
         * point
         */
        textAnchor?: string;

        /**
         * This property indicates which font family will be used to render the text, specified as a prioritized
         * list of font family names and/or generic family names
         */
        fontFamily?: string;

        /**
         * The width to start truncate the text. If the value is omit, the text is truncated base on it's parent
         * width
         */
        truncateWidth?: number;

        /**
         * Flag to show the ellipsis symbol.
         */
        showEllipsis?: boolean;
      }

      interface ContainerToolbarOpts extends sap.m.OverflowToolbarOpts {
        /**
         * Flag to show or hide bird eye button on the toolbar
         */
        showBirdEyeButton?: boolean;

        /**
         * Flag to show or hide display type menu on the toolbar
         */
        showDisplayTypeButton?: boolean;

        /**
         * Flag to show or hide legend button
         */
        showLegendButton?: boolean;

        /**
         * Flag to show or hide setting button
         */
        showSettingButton?: boolean;

        /**
         * Flag to show or hide zoom buttons
         */
        showTimeZoomControl?: boolean;

        /**
         * Defines the control type to set the zoom rate.
         */
        zoomControlType?: sap.gantt.config.ZoomControlType;

        /**
         * Step count of {@link sap.m.Slider}
         *
         * This property only relevant if zoomControlType are:
         * 	 - SliderWithButtons
         * 	 - SliderOnly
         */
        stepCountOfSlider?: number;

        /**
         * Array of plain objects that have "key" and "text" properties, or array of sap.ui.core.Item used to configure
         * the items in the {@link sap.m.Select} control
         *
         * This property is only works if the zoomControlType is Select
         */
        infoOfSelectItems?: object[];

        /**
         * Zoom level of all gantt chart instances in GanttChartContainer
         */
        zoomLevel?: number;

        /**
         * Defines how the toolbar custom content is aligned.
         *  If set to `true`, the custom content in the toolbar is right-aligned. If set to `false`, it's left-aligned.
         *  If a {@link sap.gantt.simple.ContainerToolbarPlaceholder} with a `Spacer` type is used in the content
         * aggregation, the alignment of the content depends on this spacer.
         */
        alignCustomContentToRight?: boolean;

        /**
         * fired when zoom stop changed
         */
        zoomStopChange?: Function;

        /**
         * Fired when the bird eye button is pressed
         */
        birdEyeButtonPress?: Function;

        /**
         * Fired when a different display type is selected in the display type menu.
         */
        displayTypeChange?: Function;

        /**
         * The additional setting items in Setting Dialog
         */
        settingItems?:
          | sap.gantt.config.SettingItem[]
          | sap.gantt.config.SettingItem;

        /**
         * The legend container that will show when the legend button is pressed
         */
        legendContainer?: sap.ui.core.Control;
      }

      interface ContainerToolbarPlaceholderOpts
        extends sap.ui.core.ControlOpts {
        /**
         * Defines the type of represented control.
         */
        type?: sap.gantt.simple.ContainerToolbarPlaceholderType;

        /**
         * Shows or hides the represented control.
         */
        _show?: boolean;

        /**
         * Represented control.
         */
        _control?: sap.ui.core.Control;
      }

      interface DimensionLegendOpts extends sap.ui.core.ControlOpts {
        /**
         * Title of Legend Page & text of navigation list item (if not set it will be empty)
         */
        title?: string;

        /**
         * Legend column configuration
         */
        columnConfigs?:
          | sap.gantt.simple.LegendColumnConfig[]
          | sap.gantt.simple.LegendColumnConfig;

        /**
         * Legend row configuration
         */
        rowConfigs?:
          | sap.gantt.simple.LegendRowConfig[]
          | sap.gantt.simple.LegendRowConfig;
      }

      interface GanttChartContainerOpts extends sap.ui.core.ControlOpts {
        /**
         * height of the container.
         *
         * Note that when a percentage is given, for the height to work as expected, the height of the surrounding
         * container must be defined.
         */
        height?: sap.ui.core.CSSSize;

        /**
         * width of the container.
         *
         * Note that when a percentage is given, for the width to work as expected, the width of the surrounding
         * container must be defined.
         */
        width?: sap.ui.core.CSSSize;

        /**
         * The GanttChartContainer use Splitter to manager the layout, it can have horizontal or vertical orientation.
         * **Note:** the property only take effect if GanttChartContainer has more than 1 ganttChart instances
         */
        layoutOrientation?: sap.ui.core.Orientation;

        /**
         * Flag to enable and disable scroll synchronization by time on instances of aggregation `ganttCharts`.
         */
        enableTimeScrollSync?: boolean;

        /**
         * Flag to enable and disable the cursor line that follows the cursor.
         *
         * When this value is set, it overrides the corresponding value on instances of aggregation `ganttCharts`.
         */
        enableCursorLine?: boolean;

        /**
         * Flag to enable and disable the present time indicator.
         *
         * When this value is set, it overrides the corresponding value on instances of aggregation `ganttCharts`.
         */
        enableNowLine?: boolean;

        /**
         * Flag to enable and disable vertical lines representing intervals along the time axis.
         *
         * When this value is set, it overrides the corresponding value on instances of aggregation `ganttCharts`.
         */
        enableVerticalLine?: boolean;

        /**
         * Flag to enable and disable adhoc lines representing milestones and events along the time axis.
         *
         * When this value is set, it overrides the corresponding value on instances of aggregation `ganttCharts`.
         */
        enableAdhocLine?: boolean;

        /**
         * Defines how the Gantt chart is displayed.
         * 	 - If set to `Both`, both the table and the chart are displayed.
         * 	 - If set to `Chart`, only the chart is displayed.
         * 	 - If set to `Table`, only the table is displayed.  This property overrides the `displayType` properties
         * 			of individual Gantt charts included in the `ganttCharts` aggregation.
         */
        displayType?: sap.gantt.simple.GanttChartWithTableDisplayType;

        /**
         * Event fired when the custom settings value is changed.
         *
         * The custom settings are application provided settings that can be configured in the settings dialog.
         * This event allows the application to handle these settings. Only check boxes are supported.
         */
        customSettingChange?: Function;

        /**
         * Toolbar of the container.
         */
        toolbar?: sap.gantt.simple.ContainerToolbar;

        /**
         * Gantt Chart of the container
         */
        ganttCharts?:
          | sap.gantt.simple.GanttChartWithTable[]
          | sap.gantt.simple.GanttChartWithTable;

        /**
         * Definitions of paint servers used for advanced shape features around SVG fill, stroke, and filter attributes.
         * The generated SVG  will be reused in all gantt chart instances
         */
        svgDefs?: sap.gantt.def.SvgDefs;
      }

      interface GanttChartWithTableOpts extends sap.ui.core.ControlOpts {
        /**
         * Width of the control.
         */
        width?: sap.ui.core.CSSSize;

        /**
         * Height of the control.
         */
        height?: sap.ui.core.CSSSize;

        /**
         * Shape selection mode of the Gantt Chart. This property controls whether single or multiple shapes can
         * be selected. When the selection mode is changed, the current selection is removed.
         *
         * The shapeSelectionMode only works if `selectable` property on the defined Shape is set to true.
         */
        shapeSelectionMode?: sap.gantt.SelectionMode;

        /**
         * A JSON object containing the shapeSelectionSettings which will be used to configure shape selection styles.
         * If nothing is specified, then the default selection styles (2px dashed red border) is set.
         *
         * Below you can find a brief example
         * ```javascript
         *
         * {
         *    color: "#808080",
         *    strokeWidth: 2,
         *    strokeDasharray: "5,1"
         * }
         * ```
         */
        shapeSelectionSettings?: object;

        /**
         * Flag whether to show or hide the cursor line when moving your mouse cursor
         */
        enableCursorLine?: boolean;

        /**
         * Flag whether to show or hide the present time indicator.
         */
        enableNowLine?: boolean;

        /**
         * @SINCE 1.68
         *
         * Flag whether to show the `nowLine` in UTC or in local time.
         */
        nowLineInUTC?: boolean;

        /**
         * Flag to show or hide vertical lines representing intervals along the time axis
         */
        enableVerticalLine?: boolean;

        /**
         * Flag to show or hide adhoc lines representing milestones and events along the time axis
         */
        enableAdhocLine?: boolean;

        /**
         * Specifies on which layer adhoc lines reside. By default, adhoc lines are on top of all other shapes and
         * patterns.
         */
        adhocLineLayer?: string;

        /**
         * Drag orientation of Gantt Chart.
         *
         * This property doesn't limit the mouse cursor position but the dragging ghost position when dragging it
         * around. This property has 3 values:
         * 	 - Free: The dragging ghost moves along with your mouse cursor.
         * 	 - Horizontal: The dragged ghost only moves horizontally, cross row dragging is restricted. You can
         * 			use this mode if you only need to change the times of the dragging shape
         * 	 - Vertical: ***Notice*** Vertical works if only one shape is selected (regardless shapeSelectionMode),
         * 			it's showing forbidden cursor style on multiple shape selections when you are dragging. You can use this
         * 			vertical mode if you only want to change the assignment without changing shape times.
         */
        dragOrientation?: any;

        /**
         * The dragging ghost alignment of Gantt Chart. This property define the visual effect of ghost position
         * on dragging, it also effect the parameter value in event shapeDragEnd
         */
        ghostAlignment?: string;

        /**
         * Flag to show or hide the start time and end time of a shape when you drag it along the time line
         */
        showShapeTimeOnDrag?: boolean;

        /**
         * The width of selection panel.
         *
         * In `sap.gantt.simple.GanttChartWithTable`, the selectionPanelSize is the Table/TreeTable width in the
         * embedded Splitter.
         */
        selectionPanelSize?: sap.ui.core.CSSSize;

        /**
         * Defines how the Gantt chart is displayed.
         * 	 - If set to `Both`, both the table and the chart are displayed.
         * 	 - If set to `Chart`, only the chart is displayed.
         * 	 - If set to `Table`, only the table is displayed.  When the parent element of the Gantt chart
         * 			is the {@link sap.gantt.simple.GanttChartContainer}, this property overrides the `displayType` property
         * 			of {@link sap.gantt.simple.GanttChartContainer}.
         */
        displayType?: sap.gantt.simple.GanttChartWithTableDisplayType;

        /**
         * Disables or enables the `shapeDoubleClick` event. If set to `true`, the `shapeDoubleClick` event is disabled.
         */
        disableShapeDoubleClickEvent?: boolean;

        /**
         * Fired when the shape selection of the gantt chart has been changed.
         */
        shapeSelectionChange?: Function;

        /**
         * Fired when a shape is resized.
         */
        shapeResize?: Function;

        /**
         * Event fired when a shape is hovered over.
         */
        shapeMouseEnter?: Function;

        /**
         * Fired when the mouse pointer leaves the shape.
         */
        shapeMouseLeave?: Function;

        /**
         * This event is fired when a shape is clicked or tapped.
         */
        shapePress?: Function;

        /**
         * This event is fired when a shape is double-clicked or double-tapped.
         */
        shapeDoubleClick?: Function;

        /**
         * Event fired when you right-click the shape.
         */
        shapeContextMenu?: Function;

        /**
         * Event fired when a drag-and-drop begins
         */
        dragStart?: Function;

        /**
         * Event fired when a drag-and-drop occurs on one or more selected shapes.
         */
        shapeDrop?: Function;

        /**
         * Event fired when one shape dragged and connected to another shape.
         */
        shapeConnect?: Function;

        /**
         * @SINCE 1.68
         *
         * This event is fired when the visible horizon is changed.
         */
        visibleHorizonUpdate?: Function;

        /**
         * Table of the Gantt Chart
         *
         * You can use {sap.ui.table.Table} if you have a flat list data or {sap.ui.table.TreeTable} if you have
         * hierarchical data.
         */
        table?: sap.ui.table.Table;

        /**
         * The aggregation is used to store configuration of adhoc lines, adhoc lines represent milestones and events
         * in axis time.
         */
        adhocLines?: sap.gantt.AdhocLine[] | sap.gantt.AdhocLine;

        /**
         * SVG reusable element definitions.
         *
         * If this property is provided, the paint server definition of the SVG is rendered. Method `getDefString()`
         * should be implemented by all paint server classes that are passed in in this property. We recommend that
         * you set the type of this argument to `sap.gantt.def.SvgDefs`. Otherwise some properties you set may not
         * function properly.
         */
        svgDefs?: sap.gantt.def.SvgDefs;

        /**
         * Shape schemes of Gantt Chart.
         *
         * Defines all the possible shape schemes in the Gantt chart control. **Note:**If you don't use expand chart,
         * you can omit this aggregations. If not set, a default `sap.gantt.simple.ShapeScheme` is provided automatically.
         */
        shapeSchemes?:
          | sap.gantt.simple.ShapeScheme[]
          | sap.gantt.simple.ShapeScheme;

        /**
         * Paint servers consumed by special shape `sap.gantt.shape.cal.Calendar`.
         *
         * This aggregation is designed to improve performance of calendar shapes. Rows usually share a similar
         * definition with calendar shapes. It is possible to define a Calendar paint server to draw only one rectangle
         * for each row. Notes for classes extended from `sap.gantt.def.cal.CalendarDef`: Different from property
         * `paintServerDefs`, paint servers defined here must implement method `getDefNode()` instead of method
         * `getDefString()`.
         */
        calendarDef?: sap.gantt.def.cal.CalendarDefs;

        /**
         * This aggregation controls the zoom strategies and zoom rate in Gantt Chart.
         */
        axisTimeStrategy?: sap.gantt.axistime.AxisTimeStrategyBase;

        /**
         * Configuration of locale settings.
         *
         * Most locale settings can be configured in sap.ui.configuration objects. Only the time zone and day-light-saving
         * time options are provided by locale settings. We recommend that you set the type of this argument to
         * `sap.gantt.config.Locale`. Otherwise some properties you set may not function properly.
         */
        locale?: sap.gantt.config.Locale;
      }

      interface GanttPrintingOpts extends sap.ui.core.ElementOpts {
        /**
         * Gantt chart to be exported as PDF document.
         */
        ganttChart?: sap.gantt.simple.GanttChartWithTable | string;
      }

      interface GanttRowSettingsOpts extends sap.ui.table.RowSettingsOpts {
        rowId?: string;

        /**
         * The controls for the calendars
         */
        calendars?:
          | sap.gantt.simple.BaseCalendar[]
          | sap.gantt.simple.BaseCalendar;

        /**
         * The controls for the relationships
         */
        relationships?:
          | sap.gantt.simple.Relationship[]
          | sap.gantt.simple.Relationship;

        /**
         * The controls for the shapes.
         */
        shapes1?: sap.gantt.simple.BaseShape[] | sap.gantt.simple.BaseShape;

        /**
         * The controls for the shapes.
         */
        shapes2?: sap.gantt.simple.BaseShape[] | sap.gantt.simple.BaseShape;

        /**
         * The controls for the shapes.
         */
        shapes3?: sap.gantt.simple.BaseShape[] | sap.gantt.simple.BaseShape;

        /**
         * The controls for the shapes.
         */
        shapes4?: sap.gantt.simple.BaseShape[] | sap.gantt.simple.BaseShape;

        /**
         * The controls for the shapes.
         */
        shapes5?: sap.gantt.simple.BaseShape[] | sap.gantt.simple.BaseShape;
      }

      interface LegendColumnConfigOpts extends sap.ui.core.ElementOpts {
        /**
         * Once this property is set, shapes in one vertical line have the same fill color or fill pattern.
         */
        fill?: string;

        text?: string;

        /**
         * Factory function is used to determine the fill property for different shape classes defined in yDimension
         * config. Shape name of the shape class is passed as a parameter to the function. The return value should
         * be a color code.
         */
        fillFactory?: Function;
      }

      interface LegendContainerOpts extends sap.ui.core.ControlOpts {
        /**
         * Width of the legend navigation. When the width specified is smaller than a section content, a horizontal
         * scroll bar appears.width of the legend navigation. When the width specified is smaller than a section
         * content, a horizontal scroll bar appears.
         */
        width?: sap.ui.core.CSSSize;

        /**
         * Height of the legend navigation. When the height specified is smaller than a section content, a vertical
         * scroll bar appears.
         */
        height?: sap.ui.core.CSSSize;

        /**
         * Legends inside the container, they could be instances of List Legend or Dimension Legend.
         */
        legends?: sap.ui.core.Control[] | sap.ui.core.Control;
      }

      interface LegendRowConfigOpts extends sap.ui.core.ElementOpts {
        /**
         * Specifies the shape class name of dimension legend row It's a full shape module name
         */
        shapeClass?: string;

        /**
         * Specifies the name of the dimension legend row
         */
        shapeName?: string;

        /**
         * Stroke of the legend row
         */
        stroke?: string;

        /**
         * The strokeWidth property is a presentation property defining the width of the stroke to be applied to
         * the shape.
         */
        strokeWidth?: number;

        /**
         * The text content
         */
        text?: string;
      }

      interface ListLegendOpts extends sap.ui.core.ControlOpts {
        /**
         * Title of Legend. The title is displayed on both the legend page and the legend navigation list. Null
         * if not specified
         */
        title?: string;

        /**
         * ListLegendItem object aggregation
         */
        items?:
          | sap.gantt.simple.ListLegendItem[]
          | sap.gantt.simple.ListLegendItem;
      }

      interface ListLegendItemOpts extends sap.ui.core.ElementOpts {
        legendName?: string;

        /**
         * Indicates whether the check box is visible or not.
         */
        interactive?: boolean;

        /**
         * Indicates whether the check box is selected or not.
         */
        selected?: boolean;

        /**
         * The event is raised when there is a click action on the checkbox before legend item.
         */
        interactiveChange?: Function;

        /**
         * Define a shape class for the List Legend Item. The shape will be normalized in the rendering phase.
         */
        shape?: sap.gantt.simple.BaseShape;
      }

      interface RelationshipOpts extends sap.gantt.simple.BasePathOpts {
        /**
         * Defines the `Relationship` type.
         */
        type?: sap.gantt.simple.RelationshipType;

        /**
         * predecessor of the `Relationship`
         *
         * This property specify where the relationship starts, `Relationship` lookup the shape instance based on
         * the property value
         */
        predecessor?: string;

        /**
         * successor of the `Relationship`
         *
         * This property specify where the relationship ends, `Relationship` lookup the shape instance by the property
         * value.
         */
        successor?: string;

        /**
         * Defines the stroke color when `Relationship` is selected
         */
        selectedStroke?: sap.gantt.ValueSVGPaintServer;

        /**
         * Defines the stroke width when `Relationship` is selected
         */
        selectedStrokeWidth?: sap.gantt.SVGLength;
      }

      interface ShapeSchemeOpts extends sap.ui.core.ElementOpts {
        /**
         * key of the shape scheme
         */
        key?: string;

        /**
         * Whether the scheme apply on the shapes on the main row
         */
        primary?: boolean;

        /**
         * row span of the shape scheme.
         *
         * If the shape scheme is ***not*** a primary scheme, you need to define how many rows (rowSpan) the expanded
         * shape will take when rendering
         */
        rowSpan?: number;
      }

      interface UtilizationBarChartOpts
        extends sap.gantt.simple.UtilizationChartOpts {
        /**
         * The color fills in capacity consumption
         */
        consumptionColor?: sap.gantt.ValueSVGPaintServer;

        /**
         * Periods of UtilizationBarChart
         */
        periods?:
          | sap.gantt.simple.UtilizationPeriod[]
          | sap.gantt.simple.UtilizationPeriod;
      }

      interface UtilizationChartOpts extends sap.gantt.simple.BaseShapeOpts {
        /**
         * Defines the `UtilizationLineChart or UtilizationBarChart` height.
         */
        height?: sap.gantt.SVGLength;

        /**
         * Defines the margin height of UtilizationChart
         */
        overConsumptionMargin?: number;

        /**
         * Defines the over comsumption color, or fill pattern.
         */
        overConsumptionColor?: sap.gantt.ValueSVGPaintServer;

        /**
         * Defines the remain capacity color.
         */
        remainCapacityColor?: sap.gantt.ValueSVGPaintServer;
      }

      interface UtilizationDimensionOpts extends sap.ui.core.ElementOpts {
        /**
         * The name of the utilization dimension, e.g. Total Weight
         */
        name?: string;

        /**
         * Sets the dimension color
         */
        dimensionColor?: sap.gantt.ValueSVGPaintServer;

        /**
         * Aggregation of periods are used to display the utilization line.
         *
         * The periods have to be in chronological order, you must ensure that it's sorted by `from`, otherwise
         * the ULC can't ben display correctly.
         */
        periods?:
          | sap.gantt.simple.UtilizationPeriod[]
          | sap.gantt.simple.UtilizationPeriod;
      }

      interface UtilizationLineChartOpts
        extends sap.gantt.simple.UtilizationChartOpts {
        /**
         * Flag to show or hide the middle line in Utilization Line Chart. The value of the `overConsumptionMargin`
         * will affect the middle line position. By default the middle line is a gray dashed line
         */
        showMiddleLine?: boolean;

        /**
         * Dimensions of the Utilization Line Chart
         */
        dimensions?:
          | sap.gantt.simple.UtilizationDimension[]
          | sap.gantt.simple.UtilizationDimension;

        /**
         * The value for overConsuptionPattern can be either an UI5 ID which points to an instance of `PatternBase`
         * which defined in svgDefs or an instance of `PatternBase`.
         *
         * The overConsumptionPattern is visualized as rectangle which the height is calculated based on `overConsumptionMargin`
         */
        overConsumptionPattern?: sap.gantt.def.DefBase | string;
      }

      interface UtilizationPeriodOpts extends sap.ui.core.ElementOpts {
        /**
         * from date time of period
         */
        from?: object;

        /**
         * to date time of period
         */
        to?: object;

        /**
         * The value of the actual consumption capacity. It's only relevant for UtilizationLineChart
         */
        value?: number;

        /**
         * The resource supply capacity, it's only used for UtilizationBarChart
         */
        supply?: number;

        /**
         * The required/demand capacity, it's only used for used for UtilizationBarChart
         */
        demand?: number;
      }

      interface VisibleHorizonUpdateType {}
      /**
       * BaseCalendar shape.
       *
       *  The Calendar shape must be used in combination with Calendar def class {@link sap.gantt.def.cal.Calendar}
       * which draws the SVG 'defs' tag.
       */
      class BaseCalendar extends sap.gantt.simple.BaseRectangle {
        /**
         * Creates a Calendar shape which consumes pattern from Calendar in the 'def' package.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID of the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: BaseCalendarOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.simple.BaseCalendar with name `sClassName` and enriches it
         * with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.simple.BaseRectangle.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getCalendarName calendarName}.
         */
        getCalendarName(): string;
        /**
         * Gets current value of property `fill`.
         *
         * We recommend that you do not configure or code against this property. Calendar is treated as a bulk shape
         * filled with pattern occupying the visible area. Your application must implement their own shape if a
         * selectable calendar is expected.
         */
        // @ts-ignore
        getFill(): string;
        /**
         * Returns a metadata object for class sap.gantt.simple.BaseCalendar.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Calendar is not a selectable shape. getSelectable always returns false
         */
        // @ts-ignore
        getSelectable(): boolean;
        /**
         * Calendar is rendering cross the entire gantt visible area
         */
        // @ts-ignore
        getWidth(): number;
        /**
         * Gets current value of property `x`.
         */
        // @ts-ignore
        getX(): number;
        /**
         * Sets a new value for property {@link #getCalendarName calendarName}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setCalendarName(
          /**
           * New value for property `calendarName`
           */
          sCalendarName: string
        ): sap.gantt.simple.BaseCalendar;
      }
      /**
       * A chevron is an inverted V-shaped pattern, it's a basic duration shape that requires two timestamps.
       * You can use it to represent a task or project execution period.
       */
      class BaseChevron extends sap.gantt.simple.BaseRectangle {
        /**
         * Creates and initializes a Chevron object
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: BaseChevronOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.simple.BaseChevron with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.simple.BaseRectangle.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * The d attribute provides a path definition to be drawn.
         */
        getD(): string;
        /**
         * Gets current value of property {@link #getHeadWidth headWidth}.
         *
         * The head width of the Chevron
         *
         * Default value is `10`.
         */
        getHeadWidth(): sap.gantt.SVGLength;
        /**
         * Returns a metadata object for class sap.gantt.simple.BaseChevron.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getTailWidth tailWidth}.
         *
         * The tail width of the Chevron
         *
         * Default value is `10`.
         */
        getTailWidth(): sap.gantt.SVGLength;
        /**
         * Sets a new value for property {@link #getHeadWidth headWidth}.
         *
         * The head width of the Chevron
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `10`.
         */
        setHeadWidth(
          /**
           * New value for property `headWidth`
           */
          sHeadWidth: sap.gantt.SVGLength
        ): sap.gantt.simple.BaseChevron;
        /**
         * Sets a new value for property {@link #getTailWidth tailWidth}.
         *
         * The tail width of the Chevron
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `10`.
         */
        setTailWidth(
          /**
           * New value for property `tailWidth`
           */
          sTailWidth: sap.gantt.SVGLength
        ): sap.gantt.simple.BaseChevron;
      }
      /**
       * @SINCE 1.64
       *
       * A conditional shape renders one of the {@link sap.gantt.simple.BaseShape} shapes assigned to it using
       * the `activeShape` property. This allows you to switch between shapes based on properties from data binding.
       */
      class BaseConditionalShape extends sap.gantt.simple.BaseShape {
        /**
         * Creates and initializes a new `BaseConditionalShape` class for a simple Gantt chart.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID of the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: BaseConditionalShapeOpts
        );

        /**
         * Adds some shape to the aggregation {@link #getShapes shapes}.
         */
        addShape(
          /**
           * The shape to add; if empty, nothing is inserted
           */
          oShape: sap.gantt.simple.BaseShape
        ): sap.gantt.simple.BaseConditionalShape;
        /**
         * Destroys all the shapes in the aggregation {@link #getShapes shapes}.
         */
        destroyShapes(): sap.gantt.simple.BaseConditionalShape;
        /**
         * Creates a new subclass of class sap.gantt.simple.BaseConditionalShape with name `sClassName` and enriches
         * it with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.simple.BaseShape.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getActiveShape activeShape}.
         *
         * Defines which shape from the `shapes` aggregation is visible. If you specify a negative value or a value
         * that is greater than the number of shapes defined, no shape will be rendered.
         *
         * Default value is `0`.
         */
        getActiveShape(): number;
        /**
         * Returns the value of the `CountInBirdEye` property for the active shape.
         */
        // @ts-ignore
        getCountInBirdEye(): boolean;
        /**
         * Returns a metadata object for class sap.gantt.simple.BaseConditionalShape.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets content of aggregation {@link #getShapes shapes}.
         *
         * A list of base shapes to switch between. Only one of these shapes will be rendered based on the `activeShape`
         * property.
         */
        getShapes(): sap.gantt.simple.BaseShape[];
        /**
         * Checks for the provided `sap.gantt.simple.BaseShape` in the aggregation {@link #getShapes shapes}. and
         * returns its index if found or -1 otherwise.
         */
        indexOfShape(
          /**
           * The shape whose index is looked for
           */
          oShape: sap.gantt.simple.BaseShape
        ): number;
        /**
         * Inserts a shape into the aggregation {@link #getShapes shapes}.
         */
        insertShape(
          /**
           * The shape to insert; if empty, nothing is inserted
           */
          oShape: sap.gantt.simple.BaseShape,
          /**
           * The `0`-based index the shape should be inserted at; for a negative value of `iIndex`, the shape is inserted
           * at position 0; for a value greater than the current size of the aggregation, the shape is inserted at
           * the last position
           */
          iIndex: number
        ): sap.gantt.simple.BaseConditionalShape;
        /**
         * Removes all the controls from the aggregation {@link #getShapes shapes}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllShapes(): sap.gantt.simple.BaseShape[];
        /**
         * Removes a shape from the aggregation {@link #getShapes shapes}.
         */
        removeShape(
          /**
           * The shape to remove or its index or id
           */
          vShape: number | string | sap.gantt.simple.BaseShape
        ): sap.gantt.simple.BaseShape;
        /**/
        // @ts-ignore
        renderElement(): void;
        /**
         * Sets a new value for property {@link #getActiveShape activeShape}.
         *
         * Defines which shape from the `shapes` aggregation is visible. If you specify a negative value or a value
         * that is greater than the number of shapes defined, no shape will be rendered.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setActiveShape(
          /**
           * New value for property `activeShape`
           */
          iActiveShape: number
        ): sap.gantt.simple.BaseConditionalShape;
        /**
         * Sets a new value for property {@link #getCountInBirdEye countInBirdEye}.
         *
         * Specifies whether or not the system takes this shape into account at the bird's eye zoom level.
         * We suggest that you set this property to `true` only for shapes that really need to be considered when
         * in the bird's eye view.
         *
         * This property is overwritten by property `countInBirdEye` of the `activeShape` shape from the `shapes`
         * aggregation.
         * For setting this property, use the setter method of the active shape. The getter method returns the property
         * value of the active shape.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        // @ts-ignore
        setCountInBirdEye(
          /**
           * New value for property `countInBirdEye`
           */
          bCountInBirdEye: boolean
        ): sap.gantt.simple.BaseConditionalShape;
        /**/
        // @ts-ignore
        setProperty(): void;
      }
      /**
       * This class usually represents a transient shape
       */
      class BaseCursor extends sap.gantt.simple.BaseRectangle {
        /**
         * Creates and initializes a new Cursor class.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID of the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings of the new control
           */
          mSettings?: BaseCursorOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.simple.BaseCursor with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.simple.BaseRectangle.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getLength length}.
         *
         * The horizontal length of a cursor. This property influences generated value `d`.
         *
         * Default value is `10`.
         */
        getLength(): number;
        /**
         * Returns a metadata object for class sap.gantt.simple.BaseCursor.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getPointHeight pointHeight}.
         *
         * The point size of a cursor. This property influences generated value `d`.
         *
         * Default value is `5`.
         */
        getPointHeight(): number;
        /**
         * Gets current value of property {@link #getWidth width}.
         *
         * The vertical size minus the point size of a cursor. This property influences generated value `d`.
         *
         * Default value is `5`.
         */
        // @ts-ignore
        getWidth(): number;
        /**
         * Sets a new value for property {@link #getLength length}.
         *
         * The horizontal length of a cursor. This property influences generated value `d`.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `10`.
         */
        setLength(
          /**
           * New value for property `length`
           */
          fLength: number
        ): sap.gantt.simple.BaseCursor;
        /**
         * Sets a new value for property {@link #getPointHeight pointHeight}.
         *
         * The point size of a cursor. This property influences generated value `d`.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `5`.
         */
        setPointHeight(
          /**
           * New value for property `pointHeight`
           */
          fPointHeight: number
        ): sap.gantt.simple.BaseCursor;
        /**
         * Sets a new value for property {@link #getWidth width}.
         *
         * The vertical size minus the point size of a cursor. This property influences generated value `d`.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `5`.
         */
        // @ts-ignore
        setWidth(
          /**
           * New value for property `width`
           */
          fWidth: number
        ): sap.gantt.simple.BaseCursor;
      }
      /**
       * Diamond shape class using the SVG tag "path". You can use this class to represent a milestone.
       */
      class BaseDiamond extends sap.gantt.simple.BaseRectangle {
        /**
         * Creates and initializes a Diamond object
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: BaseDiamondOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.simple.BaseDiamond with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.simple.BaseRectangle.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getHeight height}.
         *
         * height of Diamond
         *
         * Default value is `auto`.
         */
        // @ts-ignore
        getHeight(): sap.gantt.SVGLength;
        /**
         * Returns a metadata object for class sap.gantt.simple.BaseDiamond.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getWidth width}.
         *
         * width of Diamond
         *
         * Default value is `auto`.
         */
        // @ts-ignore
        getWidth(): sap.gantt.SVGLength;
        /**
         * Sets a new value for property {@link #getHeight height}.
         *
         * height of Diamond
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `auto`.
         */
        // @ts-ignore
        setHeight(
          /**
           * New value for property `height`
           */
          sHeight: sap.gantt.SVGLength
        ): sap.gantt.simple.BaseDiamond;
        /**
         * Sets a new value for property {@link #getWidth width}.
         *
         * width of Diamond
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `auto`.
         */
        // @ts-ignore
        setWidth(
          /**
           * New value for property `width`
           */
          sWidth: sap.gantt.SVGLength
        ): sap.gantt.simple.BaseDiamond;
      }
      /**
       * Group shape class using SVG tag 'g'. It is a shape container. Any other shapes can be aggregated under
       * a group.
       */
      class BaseGroup extends sap.gantt.simple.BaseShape {
        /**
         * Creates and initializes a new Group class.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID of the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: BaseGroupOpts
        );

        /**
         * Adds some shape to the aggregation {@link #getShapes shapes}.
         */
        addShape(
          /**
           * The shape to add; if empty, nothing is inserted
           */
          oShape: sap.gantt.simple.BaseShape
        ): sap.gantt.simple.BaseGroup;
        /**
         * Destroys all the shapes in the aggregation {@link #getShapes shapes}.
         */
        destroyShapes(): sap.gantt.simple.BaseGroup;
        /**
         * Creates a new subclass of class sap.gantt.simple.BaseGroup with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.simple.BaseShape.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.gantt.simple.BaseGroup.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets content of aggregation {@link #getShapes shapes}.
         *
         * The shapes of the group
         */
        getShapes(): sap.gantt.simple.BaseShape[];
        /**
         * Checks for the provided `sap.gantt.simple.BaseShape` in the aggregation {@link #getShapes shapes}. and
         * returns its index if found or -1 otherwise.
         */
        indexOfShape(
          /**
           * The shape whose index is looked for
           */
          oShape: sap.gantt.simple.BaseShape
        ): number;
        /**
         * Inserts a shape into the aggregation {@link #getShapes shapes}.
         */
        insertShape(
          /**
           * The shape to insert; if empty, nothing is inserted
           */
          oShape: sap.gantt.simple.BaseShape,
          /**
           * The `0`-based index the shape should be inserted at; for a negative value of `iIndex`, the shape is inserted
           * at position 0; for a value greater than the current size of the aggregation, the shape is inserted at
           * the last position
           */
          iIndex: number
        ): sap.gantt.simple.BaseGroup;
        /**
         * Removes all the controls from the aggregation {@link #getShapes shapes}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllShapes(): sap.gantt.simple.BaseShape[];
        /**
         * Removes a shape from the aggregation {@link #getShapes shapes}.
         */
        removeShape(
          /**
           * The shape to remove or its index or id
           */
          vShape: number | string | sap.gantt.simple.BaseShape
        ): sap.gantt.simple.BaseShape;
        /**
         * Renders the container with RenderManager recursively
         */
        // @ts-ignore
        renderElement(
          /**
           * A shared RenderManager for GanttChart control
           */
          oRm: sap.ui.core.RenderManager,
          /**
           * Group to be rendered
           */
          oGroup: sap.gantt.simple.BaseGroup
        ): void;
      }
      /**
       * BaseImage shape class using SVG tag 'text' for icon font image, and SVG tag 'image' for bitmap images.
       */
      class BaseImage extends sap.gantt.simple.BaseText {
        /**
         * Creates and initializes a new image class.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: BaseImageOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.simple.BaseImage with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.simple.BaseText.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getHeight height}.
         *
         * Height of the image.
         *
         * Default value is `20`.
         */
        getHeight(): sap.gantt.SVGLength;
        /**
         * Returns a metadata object for class sap.gantt.simple.BaseImage.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getSrc src}.
         *
         * Src of the image. If the image is represented by an icon font, then the src is sap-icon://task for instance
         */
        getSrc(): sap.ui.core.URI;
        /**
         * Gets current value of property {@link #getWidth width}.
         *
         * Width of the image.
         *
         * Default value is `20`.
         */
        getWidth(): sap.gantt.SVGLength;
        /**
         * Gets the current value of property `x`.
         *
         *  x coordinate of the image rectangle.
         *
         * Usually applications do not set this value. This getter carries out the calculation using property `time`
         * as a base and makes some adjustments.
         */
        // @ts-ignore
        getX(): number;
        /**
         * Gets the current value of property `y`.
         *
         *  y coordinate of the image rectangle.
         *
         * Usually applications do not set this value. This getter carries out the calculation using row context
         * info and makes some adjustments to align the center of the row rectangle along the y axis. If you override
         * the default value calculated by the getter, the alignment of the center is not guaranteed.
         */
        // @ts-ignore
        getY(): number;
        /**
         * Render svg tag with render manager.
         *
         *  Render svg `image` tag and set the `href` attribute of the `image` tag with the `image` propery.
         */
        // @ts-ignore
        renderElement(
          /**
           * Render manager
           */
          oRm: object,
          /**
           * Shape object
           */
          oElement: object
        ): void;
        /**
         * Sets a new value for property {@link #getHeight height}.
         *
         * Height of the image.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `20`.
         */
        setHeight(
          /**
           * New value for property `height`
           */
          sHeight: sap.gantt.SVGLength
        ): sap.gantt.simple.BaseImage;
        /**
         * Sets a new value for property {@link #getSrc src}.
         *
         * Src of the image. If the image is represented by an icon font, then the src is sap-icon://task for instance
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setSrc(
          /**
           * New value for property `src`
           */
          sSrc: sap.ui.core.URI
        ): sap.gantt.simple.BaseImage;
        /**
         * Sets a new value for property {@link #getWidth width}.
         *
         * Width of the image.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `20`.
         */
        setWidth(
          /**
           * New value for property `width`
           */
          sWidth: sap.gantt.SVGLength
        ): sap.gantt.simple.BaseImage;
      }
      /**
       * BaseLine is a basic shape used to create a line connecting two points.
       */
      class BaseLine extends sap.gantt.simple.BaseShape {
        /**
         * Creates and initializes a new BaseLine class.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID of the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: BaseLineOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.simple.BaseLine with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.simple.BaseShape.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.gantt.simple.BaseLine.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getX1 x1}.
         *
         * x1 defines the x-axis coordinate of the line starting point
         *
         * Default value is `0`.
         */
        getX1(): sap.gantt.SVGLength;
        /**
         * Gets current value of property {@link #getX2 x2}.
         *
         * x2 defines the x-axis coordinate of the line ending point
         *
         * Default value is `0`.
         */
        getX2(): sap.gantt.SVGLength;
        /**
         * Gets current value of property {@link #getY1 y1}.
         *
         * y1 defines the y-axis coordinate of the line starting point
         *
         * Default value is `0`.
         */
        getY1(): sap.gantt.SVGLength;
        /**
         * Gets current value of property {@link #getY2 y2}.
         *
         * y2 defines the y-axis coordinate of the line ending point
         *
         * Default value is `0`.
         */
        getY2(): sap.gantt.SVGLength;
        /**
         * Sets a new value for property {@link #getX1 x1}.
         *
         * x1 defines the x-axis coordinate of the line starting point
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setX1(
          /**
           * New value for property `x1`
           */
          sX1: sap.gantt.SVGLength
        ): sap.gantt.simple.BaseLine;
        /**
         * Sets a new value for property {@link #getX2 x2}.
         *
         * x2 defines the x-axis coordinate of the line ending point
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setX2(
          /**
           * New value for property `x2`
           */
          sX2: sap.gantt.SVGLength
        ): sap.gantt.simple.BaseLine;
        /**
         * Sets a new value for property {@link #getY1 y1}.
         *
         * y1 defines the y-axis coordinate of the line starting point
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setY1(
          /**
           * New value for property `y1`
           */
          sY1: sap.gantt.SVGLength
        ): sap.gantt.simple.BaseLine;
        /**
         * Sets a new value for property {@link #getY2 y2}.
         *
         * y2 defines the y-axis coordinate of the line ending point
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setY2(
          /**
           * New value for property `y2`
           */
          sY2: sap.gantt.SVGLength
        ): sap.gantt.simple.BaseLine;
      }
      /**
       * BasePath is the generic element to define a shape. All the basic shapes can be created by BasePath
       */
      class BasePath extends sap.gantt.simple.BaseShape {
        /**
         * Creates and initializes a new BasePath class.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID of the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: BasePathOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.simple.BasePath with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.simple.BaseShape.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getD d}.
         *
         * The d property provides a path definition to be drawn.
         */
        getD(): string;
        /**
         * Returns a metadata object for class sap.gantt.simple.BasePath.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Renders the  DOM element by RenderManager
         */
        // @ts-ignore
        renderElement(
          /**
           * A shared RenderManager for GanttChart control
           */
          oRm: sap.ui.core.RenderManager,
          /**
           * Path to be rendered
           */
          oElement: sap.gantt.simple.BasePath
        ): void;
        /**
         * Sets a new value for property {@link #getD d}.
         *
         * The d property provides a path definition to be drawn.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setD(
          /**
           * New value for property `d`
           */
          sD: string
        ): sap.gantt.simple.BasePath;
      }
      /**
       * BaseRectangle represent a basic shape that creates rectangles, defined by corner positions, width and
       * height. The rectangle may have their corners rounded.
       */
      class BaseRectangle extends sap.gantt.simple.BaseShape {
        /**
         * Creates and initializes a new BaseRectangle class.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: BaseRectangleOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.simple.BaseRectangle with name `sClassName` and enriches it
         * with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.simple.BaseShape.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets the value of property `height`.
         *
         * If property height set to "auto", then the height is automatically calculated based on the row height.
         */
        getHeight(): number;
        /**
         * Returns a metadata object for class sap.gantt.simple.BaseRectangle.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getRx rx}.
         *
         * rx defines a radius on the x-axis.
         *
         * Default value is `0`.
         */
        getRx(): sap.gantt.SVGLength;
        /**
         * Gets current value of property {@link #getRy ry}.
         *
         * ry defines a radius on the y-axis.
         *
         * Default value is `0`.
         */
        getRy(): sap.gantt.SVGLength;
        /**
         * Gets the value of property `width`.
         *
         * Width of the rectangle.
         *
         * Usually applications do not set this value. This getter carries out the calculation using properties
         * `time` and `endTime`
         */
        getWidth(): number;
        /**
         * Gets the value of property `x`.
         *
         *  x coordinate of the top-left corner of the rectangle.
         *
         * Usually applications do not set this value. This getter carries out the calculation using property `time`
         * as a base.
         */
        getX(): number;
        /**
         * Gets the value of property `y`.
         *
         * y coordinate of the top-left corner of the rectangle.
         *
         * Usually applications do not set this value. This getter carries out the calculation based on the row
         * height and uses `height` value to position the rectangle in the row center.
         */
        getY(): number;
        /**
         * Sets a new value for property {@link #getHeight height}.
         *
         * height defines the vertical length of the rectangle.
         *
         * By default, the system automatically generates the shape height according to the base row height. You
         * can set the height yourself by using the setter method. However, it cannot exceed the row height.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `auto`.
         */
        setHeight(
          /**
           * New value for property `height`
           */
          sHeight: sap.gantt.SVGLength
        ): sap.gantt.simple.BaseRectangle;
        /**
         * Sets a new value for property {@link #getRx rx}.
         *
         * rx defines a radius on the x-axis.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setRx(
          /**
           * New value for property `rx`
           */
          sRx: sap.gantt.SVGLength
        ): sap.gantt.simple.BaseRectangle;
        /**
         * Sets a new value for property {@link #getRy ry}.
         *
         * ry defines a radius on the y-axis.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setRy(
          /**
           * New value for property `ry`
           */
          sRy: sap.gantt.SVGLength
        ): sap.gantt.simple.BaseRectangle;
        /**
         * Sets a new value for property {@link #getWidth width}.
         *
         * width defines the horizontal length of the rectangle. Most of time it's calculated by properties `time`
         * and `endTime` automatically
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setWidth(
          /**
           * New value for property `width`
           */
          sWidth: sap.gantt.SVGLength
        ): sap.gantt.simple.BaseRectangle;
        /**
         * Sets a new value for property {@link #getX x}.
         *
         * x defines a x-axis coordinate in the user coordinate system
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setX(
          /**
           * New value for property `x`
           */
          sX: sap.gantt.SVGLength
        ): sap.gantt.simple.BaseRectangle;
        /**
         * Sets a new value for property {@link #getY y}.
         *
         * defines a y-axis coordinate in the user coordinate system
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setY(
          /**
           * New value for property `y`
           */
          sY: sap.gantt.SVGLength
        ): sap.gantt.simple.BaseRectangle;
      }
      /**
       * BaseShape is an abstract class. All other shapes must extend this class and provide implementation of
       * method renderElement. It enables application developers to define it's own shapes.
       *
       * This class provides the common used properties and methods.
       */
      class BaseShape extends sap.ui.core.Element {
        /**
         * Creates and initializes a new Shape class
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: BaseShapeOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.simple.BaseShape with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Get an instance of AxisTime which belongs to current GanttChart. This is a shortcut method for all shape
         * instances to convert timestamp to coordinates or vise verse
         * See:
         * 	sap.gantt.misc.AxisTime#timeToView
         * 	sap.gantt.misc.AxisTime#viewToTime
         */
        getAxisTime(): object;
        /**
         * Gets current value of property {@link #getConnectable connectable}.
         *
         * Specifies whether the shape is connectable. When this property is set to true, you can connect two different
         * shapes to create a relationship
         *
         * Default value is `false`.
         */
        getConnectable(): boolean;
        /**
         * Gets current value of property {@link #getCountInBirdEye countInBirdEye}.
         *
         * Specifies whether or not the system takes this shape into account when performing a bird eye zooming.
         * We suggest that you set this property to true only for shapes that really need to be considered into
         * bird eye range.
         *
         * Default value is `false`.
         */
        getCountInBirdEye(): boolean;
        /**
         * Gets current value of property {@link #getDraggable draggable}.
         *
         * Specifies whether the shape is draggable a draggble shape requires the shape is selectable set true as
         * well.
         *
         * Default value is `false`.
         */
        getDraggable(): boolean;
        /**
         * Gets current value of property {@link #getEndTime endTime}.
         *
         * end time of the shape. This property is mandatory if the shape is a duration shape. The duration is determined
         * by minusing the value of property `time`
         */
        getEndTime(): object;
        /**
         * Gets current value of property {@link #getExpandable expandable}.
         *
         * Whether the shape is expandable
         *
         * Default value is `false`.
         */
        getExpandable(): boolean;
        /**
         * Gets current value of property {@link #getFill fill}.
         *
         * The fill property enables you to define the fill color for shapes and texts.
         *
         * For shapes and text the fill property is a presentation attribute that lets define the color (or any
         * SVG paint servers like gradients or patterns)
         */
        getFill(): sap.gantt.ValueSVGPaintServer;
        /**
         * Gets current value of property {@link #getFillOpacity fillOpacity}.
         *
         * The fillOpacity property is a presentation property defining the opacity of the paint server (color,
         * gradient, pattern, etc) applied to a shape.
         *
         * Default value is `1`.
         */
        getFillOpacity(): number;
        /**
         * Gets current value of property {@link #getFilter filter}.
         *
         * The filter property defines the filter effects defined by the  element that shall be applied
         * to its element
         */
        getFilter(): string;
        /**
         * Gets current value of property {@link #getHoverable hoverable}.
         *
         * Specifies whether the shape is hoverable. hovering the mouse pointer over the shape fires the shapeMouseEnter
         * event and moving the mouse pointer out of the shape fires the shapeMouseLeave event.
         *
         * Default value is `false`.
         */
        getHoverable(): boolean;
        /**
         * Returns a metadata object for class sap.gantt.simple.BaseShape.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getOpacity opacity}.
         *
         * The opacity attribute specifies the transparency of an object or of a group of objects, that is, the
         * degree to which the background behind the element is overlaid.
         *
         * The minimum value is 0.0 and maximum value is 1.0
         *
         * Default value is `1`.
         */
        getOpacity(): number;
        /**
         * Gets current value of property {@link #getResizable resizable}.
         *
         * Specifies whether the shape is resizable. Resizing a shape requires the shape is selectable as well.
         *
         * Default value is `false`.
         */
        getResizable(): boolean;
        /**
         * Gets current value of property {@link #getRowYCenter rowYCenter}.
         *
         * rowYCenter of the shape
         */
        getRowYCenter(): number;
        /**
         * Gets current value of property {@link #getScheme scheme}.
         *
         * Scheme key of the shape.
         *
         * The scheme is used by expand/collapse the main row shape. You can define the scheme together with `shapeSchemes`
         * in `sap.gantt.simple.GanttChartWithTable`, the value defines here needse matchs the key value defines
         * in `sap.gantt.simple.ShapeScheme`
         */
        getScheme(): string;
        /**
         * Gets current value of property {@link #getSelectable selectable}.
         *
         * Whether the shape is selectable
         *
         * Default value is `false`.
         */
        getSelectable(): boolean;
        /**
         * Gets current value of property {@link #getSelected selected}.
         *
         * Whether the shape is selected
         *
         * Default value is `false`.
         */
        getSelected(): boolean;
        /**
         * Gets current value of property {@link #getShapeId shapeId}.
         *
         * ID of the shape. shapeId property represents a unique identifier for a business object. This property
         * shall be bound to a property during initialization, it requires an unique non-empty value.
         */
        getShapeId(): string;
        /**
         * Gets current value of property {@link #getStroke stroke}.
         *
         * The stroke property is a presentation property defining the color (or any SVG paint servers like gradients
         * or patterns) used to paint the outline of the shape;
         */
        getStroke(): sap.gantt.ValueSVGPaintServer;
        /**
         * Gets current value of property {@link #getStrokeDasharray strokeDasharray}.
         *
         * The strokeDasharray property is a presentation property defining the pattern of dashes and gaps used
         * to paint the outline of the shape.
         */
        getStrokeDasharray(): string;
        /**
         * Gets current value of property {@link #getStrokeOpacity strokeOpacity}.
         *
         * stroke opacity of the shape
         *
         * Default value is `1`.
         */
        getStrokeOpacity(): number;
        /**
         * Gets current value of property {@link #getStrokeWidth strokeWidth}.
         *
         * The strokeWidth property is a presentation property defining the width of the stroke to be applied to
         * the shape.
         *
         * Default value is `0`.
         */
        getStrokeWidth(): number;
        /**
         * Get the shape style string
         */
        getStyle(): string;
        /**
         * Gets current value of property {@link #getTime time}.
         *
         * Start time of the shape. This property is mandatory, you must bind this property to a model or set a
         * valid JavaScript Date object. The value will be converted to x coordination when rendering. If not set,
         * the shape is not visible.
         */
        getTime(): object;
        /**
         * Gets current value of property {@link #getTransform transform}.
         *
         * The transform property defines a list of transform definitions that are applied to an element and the
         * element's children Right now in gantt library, only `translate()` method is supported. CSS methods like
         * scale, skew, rotate and matrix doesn't support. And if you provide values for transform, the values will
         * update xBias and yBias if translate the corresponding axis is matched.
         */
        getTransform(): string;
        /**
         * Gets current value of property {@link #getVisible visible}.
         *
         * Shows or hides the shape.
         *
         * Default value is `true`.
         */
        getVisible(): boolean;
        /**
         * Gets current value of property {@link #getXBias xBias}.
         *
         * X offset in pixel. If the value is positive, in non-RTL mode, means to translate the visual object to
         * the right in pixel unit. If the value is negative, the logic is inverted.
         *
         * Default value is `0`.
         */
        getXBias(): number;
        /**
         * Gets current value of property {@link #getYBias yBias}.
         *
         * Y offset in pixel. If the value is positive, in non-RTL mode, it means translate the visual object to
         * the bottom in pixel unit. If the value is negative, the logic is inverted.
         *
         * Default value is `0`.
         */
        getYBias(): number;
        /**
         * Render the shape. Write the shape DOM into render manager buffer.
         *
         * All customized shape need to overwrite this method to provide it's own rendering logic
         */
        renderElement(
          /**
           * Render Manager
           */
          oRm: sap.ui.core.RenderManager,
          /**
           * Shape instance
           */
          oElement: sap.gantt.simple.BaseShape
        ): void;
        /**
         * Sets a new value for property {@link #getConnectable connectable}.
         *
         * Specifies whether the shape is connectable. When this property is set to true, you can connect two different
         * shapes to create a relationship
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setConnectable(
          /**
           * New value for property `connectable`
           */
          bConnectable: boolean
        ): sap.gantt.simple.BaseShape;
        /**
         * Sets a new value for property {@link #getCountInBirdEye countInBirdEye}.
         *
         * Specifies whether or not the system takes this shape into account when performing a bird eye zooming.
         * We suggest that you set this property to true only for shapes that really need to be considered into
         * bird eye range.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setCountInBirdEye(
          /**
           * New value for property `countInBirdEye`
           */
          bCountInBirdEye: boolean
        ): sap.gantt.simple.BaseShape;
        /**
         * Sets a new value for property {@link #getDraggable draggable}.
         *
         * Specifies whether the shape is draggable a draggble shape requires the shape is selectable set true as
         * well.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setDraggable(
          /**
           * New value for property `draggable`
           */
          bDraggable: boolean
        ): sap.gantt.simple.BaseShape;
        /**
         * Sets a new value for property {@link #getEndTime endTime}.
         *
         * end time of the shape. This property is mandatory if the shape is a duration shape. The duration is determined
         * by minusing the value of property `time`
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setEndTime(
          /**
           * New value for property `endTime`
           */
          oEndTime: object
        ): sap.gantt.simple.BaseShape;
        /**
         * Sets a new value for property {@link #getExpandable expandable}.
         *
         * Whether the shape is expandable
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setExpandable(
          /**
           * New value for property `expandable`
           */
          bExpandable: boolean
        ): sap.gantt.simple.BaseShape;
        /**
         * Sets a new value for property {@link #getFill fill}.
         *
         * The fill property enables you to define the fill color for shapes and texts.
         *
         * For shapes and text the fill property is a presentation attribute that lets define the color (or any
         * SVG paint servers like gradients or patterns)
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setFill(
          /**
           * New value for property `fill`
           */
          sFill: sap.gantt.ValueSVGPaintServer
        ): sap.gantt.simple.BaseShape;
        /**
         * Sets a new value for property {@link #getFillOpacity fillOpacity}.
         *
         * The fillOpacity property is a presentation property defining the opacity of the paint server (color,
         * gradient, pattern, etc) applied to a shape.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `1`.
         */
        setFillOpacity(
          /**
           * New value for property `fillOpacity`
           */
          fFillOpacity: number
        ): sap.gantt.simple.BaseShape;
        /**
         * Sets a new value for property {@link #getFilter filter}.
         *
         * The filter property defines the filter effects defined by the  element that shall be applied
         * to its element
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setFilter(
          /**
           * New value for property `filter`
           */
          sFilter: string
        ): sap.gantt.simple.BaseShape;
        /**
         * Sets a new value for property {@link #getHoverable hoverable}.
         *
         * Specifies whether the shape is hoverable. hovering the mouse pointer over the shape fires the shapeMouseEnter
         * event and moving the mouse pointer out of the shape fires the shapeMouseLeave event.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setHoverable(
          /**
           * New value for property `hoverable`
           */
          bHoverable: boolean
        ): sap.gantt.simple.BaseShape;
        /**
         * Sets a new value for property {@link #getOpacity opacity}.
         *
         * The opacity attribute specifies the transparency of an object or of a group of objects, that is, the
         * degree to which the background behind the element is overlaid.
         *
         * The minimum value is 0.0 and maximum value is 1.0
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `1`.
         */
        setOpacity(
          /**
           * New value for property `opacity`
           */
          fOpacity: number
        ): sap.gantt.simple.BaseShape;
        /**
         * Sets a new value for property {@link #getResizable resizable}.
         *
         * Specifies whether the shape is resizable. Resizing a shape requires the shape is selectable as well.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setResizable(
          /**
           * New value for property `resizable`
           */
          bResizable: boolean
        ): sap.gantt.simple.BaseShape;
        /**
         * Sets a new value for property {@link #getRowYCenter rowYCenter}.
         *
         * rowYCenter of the shape
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setRowYCenter(
          /**
           * New value for property `rowYCenter`
           */
          fRowYCenter: number
        ): sap.gantt.simple.BaseShape;
        /**
         * Sets a new value for property {@link #getScheme scheme}.
         *
         * Scheme key of the shape.
         *
         * The scheme is used by expand/collapse the main row shape. You can define the scheme together with `shapeSchemes`
         * in `sap.gantt.simple.GanttChartWithTable`, the value defines here needse matchs the key value defines
         * in `sap.gantt.simple.ShapeScheme`
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setScheme(
          /**
           * New value for property `scheme`
           */
          sScheme: string
        ): sap.gantt.simple.BaseShape;
        /**
         * Sets a new value for property {@link #getSelectable selectable}.
         *
         * Whether the shape is selectable
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setSelectable(
          /**
           * New value for property `selectable`
           */
          bSelectable: boolean
        ): sap.gantt.simple.BaseShape;
        /**
         * Sets a new value for property {@link #getSelected selected}.
         *
         * Whether the shape is selected
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setSelected(
          /**
           * New value for property `selected`
           */
          bSelected: boolean
        ): sap.gantt.simple.BaseShape;
        /**
         * Sets a new value for property {@link #getShapeId shapeId}.
         *
         * ID of the shape. shapeId property represents a unique identifier for a business object. This property
         * shall be bound to a property during initialization, it requires an unique non-empty value.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setShapeId(
          /**
           * New value for property `shapeId`
           */
          sShapeId: string
        ): sap.gantt.simple.BaseShape;
        /**
         * Sets a new value for property {@link #getStroke stroke}.
         *
         * The stroke property is a presentation property defining the color (or any SVG paint servers like gradients
         * or patterns) used to paint the outline of the shape;
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setStroke(
          /**
           * New value for property `stroke`
           */
          sStroke: sap.gantt.ValueSVGPaintServer
        ): sap.gantt.simple.BaseShape;
        /**
         * Sets a new value for property {@link #getStrokeDasharray strokeDasharray}.
         *
         * The strokeDasharray property is a presentation property defining the pattern of dashes and gaps used
         * to paint the outline of the shape.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setStrokeDasharray(
          /**
           * New value for property `strokeDasharray`
           */
          sStrokeDasharray: string
        ): sap.gantt.simple.BaseShape;
        /**
         * Sets a new value for property {@link #getStrokeOpacity strokeOpacity}.
         *
         * stroke opacity of the shape
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `1`.
         */
        setStrokeOpacity(
          /**
           * New value for property `strokeOpacity`
           */
          fStrokeOpacity: number
        ): sap.gantt.simple.BaseShape;
        /**
         * Sets a new value for property {@link #getStrokeWidth strokeWidth}.
         *
         * The strokeWidth property is a presentation property defining the width of the stroke to be applied to
         * the shape.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setStrokeWidth(
          /**
           * New value for property `strokeWidth`
           */
          fStrokeWidth: number
        ): sap.gantt.simple.BaseShape;
        /**
         * Sets a new value for property {@link #getTime time}.
         *
         * Start time of the shape. This property is mandatory, you must bind this property to a model or set a
         * valid JavaScript Date object. The value will be converted to x coordination when rendering. If not set,
         * the shape is not visible.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setTime(
          /**
           * New value for property `time`
           */
          oTime: object
        ): sap.gantt.simple.BaseShape;
        /**
         * Sets a new value for property {@link #getTransform transform}.
         *
         * The transform property defines a list of transform definitions that are applied to an element and the
         * element's children Right now in gantt library, only `translate()` method is supported. CSS methods like
         * scale, skew, rotate and matrix doesn't support. And if you provide values for transform, the values will
         * update xBias and yBias if translate the corresponding axis is matched.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setTransform(
          /**
           * New value for property `transform`
           */
          sTransform: string
        ): sap.gantt.simple.BaseShape;
        /**
         * Sets a new value for property {@link #getVisible visible}.
         *
         * Shows or hides the shape.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setVisible(
          /**
           * New value for property `visible`
           */
          bVisible: boolean
        ): sap.gantt.simple.BaseShape;
        /**
         * Sets a new value for property {@link #getXBias xBias}.
         *
         * X offset in pixel. If the value is positive, in non-RTL mode, means to translate the visual object to
         * the right in pixel unit. If the value is negative, the logic is inverted.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setXBias(
          /**
           * New value for property `xBias`
           */
          fXBias: number
        ): sap.gantt.simple.BaseShape;
        /**
         * Sets a new value for property {@link #getYBias yBias}.
         *
         * Y offset in pixel. If the value is positive, in non-RTL mode, it means translate the visual object to
         * the bottom in pixel unit. If the value is negative, the logic is inverted.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setYBias(
          /**
           * New value for property `yBias`
           */
          fYBias: number
        ): sap.gantt.simple.BaseShape;
      }
      /**
       * BaseText defines a graphics element consisting of text.
       */
      class BaseText extends sap.gantt.simple.BaseShape {
        /**
         * Creates and initializes a new BaseText class.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: BaseTextOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.simple.BaseText with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.simple.BaseShape.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getFontFamily fontFamily}.
         *
         * This property indicates which font family will be used to render the text, specified as a prioritized
         * list of font family names and/or generic family names
         *
         * Default value is `Arial`.
         */
        getFontFamily(): string;
        /**
         * Gets current value of property {@link #getFontSize fontSize}.
         *
         * The fontSize property refers to the size of the font
         *
         * Default value is `13`.
         */
        getFontSize(): number;
        /**
         * Returns a metadata object for class sap.gantt.simple.BaseText.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getShowEllipsis showEllipsis}.
         *
         * Flag to show the ellipsis symbol.
         *
         * Default value is `true`.
         */
        getShowEllipsis(): boolean;
        /**
         * Get the BaseText style string
         */
        // @ts-ignore
        getStyle(): string;
        /**
         * Gets current value of property {@link #getText text}.
         *
         * Text content
         */
        getText(): string;
        /**
         * Gets the value of property `textAnchor`.
         */
        getTextAnchor(): string;
        /**
         * Gets the value of property `truncateWidth`.
         *
         *  Truncating width. Default value -1 indicates truncating function is not activated. To enable truncating,
         * specifies a truncate width. If text length exceeds truncate width, text is truncated automatically. This
         * method will return the minimum between property `truncateWidth` and it's parent's width caculated by
         * time range.
         */
        getTruncateWidth(): number;
        /**
         * Gets current value of property `x`.  x coordinate of the bottom-left corner of the text.
         *
         * Usually applications do not set this value. This getter carries out the calculation using property `time`
         * from itself or it's parent that has method `getTime`. If you override the default value calculated by
         * the getter, the alignment of the center is not guaranteed.
         */
        getX(): number;
        /**
         * Gets current value of property `y`.
         *
         *  y coordinate of the bottom-left corner of the text.
         *
         * Usually applications do not set this value. This getter carries out the calculation using parameter `RowYCenter`
         * and property `fontSize` to align the center of the row rectangle along the y axis. If you override the
         * default value calculated by the getter, the alignment of the center is not guaranteed.
         */
        getY(): number;
        /**
         * Renders the text with RenderManager
         */
        // @ts-ignore
        renderElement(
          /**
           * A shared RenderManager for GanttChart control
           */
          oRm: sap.ui.core.RenderManager,
          /**
           * BaseText to be rendered
           */
          oElement: sap.gantt.simple.BaseText
        ): void;
        /**
         * Sets a new value for property {@link #getFontFamily fontFamily}.
         *
         * This property indicates which font family will be used to render the text, specified as a prioritized
         * list of font family names and/or generic family names
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `Arial`.
         */
        setFontFamily(
          /**
           * New value for property `fontFamily`
           */
          sFontFamily: string
        ): sap.gantt.simple.BaseText;
        /**
         * Sets a new value for property {@link #getFontSize fontSize}.
         *
         * The fontSize property refers to the size of the font
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `13`.
         */
        setFontSize(
          /**
           * New value for property `fontSize`
           */
          iFontSize: number
        ): sap.gantt.simple.BaseText;
        /**
         * Sets a new value for property {@link #getShowEllipsis showEllipsis}.
         *
         * Flag to show the ellipsis symbol.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setShowEllipsis(
          /**
           * New value for property `showEllipsis`
           */
          bShowEllipsis: boolean
        ): sap.gantt.simple.BaseText;
        /**
         * Sets a new value for property {@link #getText text}.
         *
         * Text content
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setText(
          /**
           * New value for property `text`
           */
          sText: string
        ): sap.gantt.simple.BaseText;
        /**
         * Sets a new value for property {@link #getTextAnchor textAnchor}.
         *
         * This property is used to align (start-, middle- or end-alignment) a string of text relative to a given
         * point
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `start`.
         */
        setTextAnchor(
          /**
           * New value for property `textAnchor`
           */
          sTextAnchor: string
        ): sap.gantt.simple.BaseText;
        /**
         * Sets a new value for property {@link #getTruncateWidth truncateWidth}.
         *
         * The width to start truncate the text. If the value is omit, the text is truncated base on it's parent
         * width
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setTruncateWidth(
          /**
           * New value for property `truncateWidth`
           */
          fTruncateWidth: number
        ): sap.gantt.simple.BaseText;
        /**
         * Sets a new value for property {@link #getX x}.
         *
         * x-axis coordinate
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setX(
          /**
           * New value for property `x`
           */
          fX: number
        ): sap.gantt.simple.BaseText;
        /**
         * Sets a new value for property {@link #getY y}.
         *
         * y-axis coordinate
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setY(
          /**
           * New value for property `y`
           */
          fY: number
        ): sap.gantt.simple.BaseText;
      }
      /**
       * ContainerToolbar is be used with GanttChartContainer control. Use this control out of sap.gantt library
       * is not supported.
       *
       * It's defined as an aggregation of GanttChartContainer to provide actions to all `sap.gantt.simple.GanttChartWithTable`
       * instances. By default, it only shows zooming controls and settings button. You can set properties to
       * true to show more build-in buttons.
       */
      class ContainerToolbar extends sap.m.OverflowToolbar {
        /**
         * Creates and initializes a new ContainerToolbar class
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: ContainerToolbarOpts
        );

        /**
         * Adds some settingItem to the aggregation {@link #getSettingItems settingItems}.
         */
        addSettingItem(
          /**
           * The settingItem to add; if empty, nothing is inserted
           */
          oSettingItem: sap.gantt.config.SettingItem
        ): sap.gantt.simple.ContainerToolbar;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:birdEyeButtonPress birdEyeButtonPress} event
         * of this `sap.gantt.simple.ContainerToolbar`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.gantt.simple.ContainerToolbar` itself.
         *
         * Fired when the bird eye button is pressed
         */
        attachBirdEyeButtonPress(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.gantt.simple.ContainerToolbar` itself
           */
          oListener?: object
        ): sap.gantt.simple.ContainerToolbar;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:displayTypeChange displayTypeChange} event of
         * this `sap.gantt.simple.ContainerToolbar`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.gantt.simple.ContainerToolbar` itself.
         *
         * Fired when a different display type is selected in the display type menu.
         */
        attachDisplayTypeChange(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.gantt.simple.ContainerToolbar` itself
           */
          oListener?: object
        ): sap.gantt.simple.ContainerToolbar;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:zoomStopChange zoomStopChange} event of this
         * `sap.gantt.simple.ContainerToolbar`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.gantt.simple.ContainerToolbar` itself.
         *
         * fired when zoom stop changed
         */
        attachZoomStopChange(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.gantt.simple.ContainerToolbar` itself
           */
          oListener?: object
        ): sap.gantt.simple.ContainerToolbar;
        /**
         * Destroys the legendContainer in the aggregation {@link #getLegendContainer legendContainer}.
         */
        destroyLegendContainer(): sap.gantt.simple.ContainerToolbar;
        /**
         * Destroys all the settingItems in the aggregation {@link #getSettingItems settingItems}.
         */
        destroySettingItems(): sap.gantt.simple.ContainerToolbar;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:birdEyeButtonPress birdEyeButtonPress} event
         * of this `sap.gantt.simple.ContainerToolbar`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachBirdEyeButtonPress(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.gantt.simple.ContainerToolbar;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:displayTypeChange displayTypeChange} event
         * of this `sap.gantt.simple.ContainerToolbar`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachDisplayTypeChange(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.gantt.simple.ContainerToolbar;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:zoomStopChange zoomStopChange} event of this
         * `sap.gantt.simple.ContainerToolbar`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachZoomStopChange(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.gantt.simple.ContainerToolbar;
        /**
         * Creates a new subclass of class sap.gantt.simple.ContainerToolbar with name `sClassName` and enriches
         * it with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.m.OverflowToolbar.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:birdEyeButtonPress birdEyeButtonPress} to attached listeners.
         */
        fireBirdEyeButtonPress(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: object
        ): sap.gantt.simple.ContainerToolbar;
        /**
         * Fires event {@link #event:displayTypeChange displayTypeChange} to attached listeners.
         */
        fireDisplayTypeChange(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            displayType?: sap.gantt.simple.GanttChartWithTableDisplayType;
          }
        ): sap.gantt.simple.ContainerToolbar;
        /**
         * Fires event {@link #event:zoomStopChange zoomStopChange} to attached listeners.
         */
        fireZoomStopChange(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            index?: number;

            selectedItem?: sap.ui.core.Item;
          }
        ): sap.gantt.simple.ContainerToolbar;
        /**
         * Gets current value of property {@link #getAlignCustomContentToRight alignCustomContentToRight}.
         *
         * Defines how the toolbar custom content is aligned.
         *  If set to `true`, the custom content in the toolbar is right-aligned. If set to `false`, it's left-aligned.
         *  If a {@link sap.gantt.simple.ContainerToolbarPlaceholder} with a `Spacer` type is used in the content
         * aggregation, the alignment of the content depends on this spacer.
         *
         * Default value is `false`.
         */
        getAlignCustomContentToRight(): boolean;
        /**
         * Gets current value of property {@link #getInfoOfSelectItems infoOfSelectItems}.
         *
         * Array of plain objects that have "key" and "text" properties, or array of sap.ui.core.Item used to configure
         * the items in the {@link sap.m.Select} control
         *
         * This property is only works if the zoomControlType is Select
         *
         * Default value is `[]`.
         */
        getInfoOfSelectItems(): object[];
        /**
         * Gets content of aggregation {@link #getLegendContainer legendContainer}.
         *
         * The legend container that will show when the legend button is pressed
         */
        getLegendContainer(): sap.ui.core.Control;
        /**
         * Returns a metadata object for class sap.gantt.simple.ContainerToolbar.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets content of aggregation {@link #getSettingItems settingItems}.
         *
         * The additional setting items in Setting Dialog
         */
        getSettingItems(): sap.gantt.config.SettingItem[];
        /**
         * Gets current value of property {@link #getShowBirdEyeButton showBirdEyeButton}.
         *
         * Flag to show or hide bird eye button on the toolbar
         *
         * Default value is `false`.
         */
        getShowBirdEyeButton(): boolean;
        /**
         * Gets current value of property {@link #getShowDisplayTypeButton showDisplayTypeButton}.
         *
         * Flag to show or hide display type menu on the toolbar
         *
         * Default value is `false`.
         */
        getShowDisplayTypeButton(): boolean;
        /**
         * Gets current value of property {@link #getShowLegendButton showLegendButton}.
         *
         * Flag to show or hide legend button
         *
         * Default value is `false`.
         */
        getShowLegendButton(): boolean;
        /**
         * Gets current value of property {@link #getShowSettingButton showSettingButton}.
         *
         * Flag to show or hide setting button
         *
         * Default value is `true`.
         */
        getShowSettingButton(): boolean;
        /**
         * Gets current value of property {@link #getShowTimeZoomControl showTimeZoomControl}.
         *
         * Flag to show or hide zoom buttons
         *
         * Default value is `true`.
         */
        getShowTimeZoomControl(): boolean;
        /**
         * Gets current value of property {@link #getStepCountOfSlider stepCountOfSlider}.
         *
         * Step count of {@link sap.m.Slider}
         *
         * This property only relevant if zoomControlType are:
         * 	 - SliderWithButtons
         * 	 - SliderOnly
         *
         * Default value is `10`.
         */
        getStepCountOfSlider(): number;
        /**
         * Gets current value of property {@link #getZoomControlType zoomControlType}.
         *
         * Defines the control type to set the zoom rate.
         *
         * Default value is `SliderWithButtons`.
         */
        getZoomControlType(): sap.gantt.config.ZoomControlType;
        /**
         * Gets current value of property {@link #getZoomLevel zoomLevel}.
         *
         * Zoom level of all gantt chart instances in GanttChartContainer
         *
         * Default value is `0`.
         */
        getZoomLevel(): number;
        /**
         * Checks for the provided `sap.gantt.config.SettingItem` in the aggregation {@link #getSettingItems settingItems}.
         * and returns its index if found or -1 otherwise.
         */
        indexOfSettingItem(
          /**
           * The settingItem whose index is looked for
           */
          oSettingItem: sap.gantt.config.SettingItem
        ): number;
        /**
         * Inserts a settingItem into the aggregation {@link #getSettingItems settingItems}.
         */
        insertSettingItem(
          /**
           * The settingItem to insert; if empty, nothing is inserted
           */
          oSettingItem: sap.gantt.config.SettingItem,
          /**
           * The `0`-based index the settingItem should be inserted at; for a negative value of `iIndex`, the settingItem
           * is inserted at position 0; for a value greater than the current size of the aggregation, the settingItem
           * is inserted at the last position
           */
          iIndex: number
        ): sap.gantt.simple.ContainerToolbar;
        /**
         * Removes all the controls from the aggregation {@link #getSettingItems settingItems}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllSettingItems(): sap.gantt.config.SettingItem[];
        /**
         * Removes a settingItem from the aggregation {@link #getSettingItems settingItems}.
         */
        removeSettingItem(
          /**
           * The settingItem to remove or its index or id
           */
          vSettingItem: number | string | sap.gantt.config.SettingItem
        ): sap.gantt.config.SettingItem;
        /**
         * Sets a new value for property {@link #getAlignCustomContentToRight alignCustomContentToRight}.
         *
         * Defines how the toolbar custom content is aligned.
         *  If set to `true`, the custom content in the toolbar is right-aligned. If set to `false`, it's left-aligned.
         *  If a {@link sap.gantt.simple.ContainerToolbarPlaceholder} with a `Spacer` type is used in the content
         * aggregation, the alignment of the content depends on this spacer.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setAlignCustomContentToRight(
          /**
           * New value for property `alignCustomContentToRight`
           */
          bAlignCustomContentToRight: boolean
        ): sap.gantt.simple.ContainerToolbar;
        /**
         * Sets a new value for property {@link #getInfoOfSelectItems infoOfSelectItems}.
         *
         * Array of plain objects that have "key" and "text" properties, or array of sap.ui.core.Item used to configure
         * the items in the {@link sap.m.Select} control
         *
         * This property is only works if the zoomControlType is Select
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `[]`.
         */
        setInfoOfSelectItems(
          /**
           * New value for property `infoOfSelectItems`
           */
          sInfoOfSelectItems: object[]
        ): sap.gantt.simple.ContainerToolbar;
        /**
         * Sets the aggregated {@link #getLegendContainer legendContainer}.
         */
        setLegendContainer(
          /**
           * The legendContainer to set
           */
          oLegendContainer: sap.ui.core.Control
        ): sap.gantt.simple.ContainerToolbar;
        /**
         * Sets a new value for property {@link #getShowBirdEyeButton showBirdEyeButton}.
         *
         * Flag to show or hide bird eye button on the toolbar
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setShowBirdEyeButton(
          /**
           * New value for property `showBirdEyeButton`
           */
          bShowBirdEyeButton: boolean
        ): sap.gantt.simple.ContainerToolbar;
        /**
         * Sets a new value for property {@link #getShowDisplayTypeButton showDisplayTypeButton}.
         *
         * Flag to show or hide display type menu on the toolbar
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setShowDisplayTypeButton(
          /**
           * New value for property `showDisplayTypeButton`
           */
          bShowDisplayTypeButton: boolean
        ): sap.gantt.simple.ContainerToolbar;
        /**
         * Sets a new value for property {@link #getShowLegendButton showLegendButton}.
         *
         * Flag to show or hide legend button
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setShowLegendButton(
          /**
           * New value for property `showLegendButton`
           */
          bShowLegendButton: boolean
        ): sap.gantt.simple.ContainerToolbar;
        /**
         * Sets a new value for property {@link #getShowSettingButton showSettingButton}.
         *
         * Flag to show or hide setting button
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setShowSettingButton(
          /**
           * New value for property `showSettingButton`
           */
          bShowSettingButton: boolean
        ): sap.gantt.simple.ContainerToolbar;
        /**
         * Sets a new value for property {@link #getShowTimeZoomControl showTimeZoomControl}.
         *
         * Flag to show or hide zoom buttons
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setShowTimeZoomControl(
          /**
           * New value for property `showTimeZoomControl`
           */
          bShowTimeZoomControl: boolean
        ): sap.gantt.simple.ContainerToolbar;
        /**
         * Sets a new value for property {@link #getStepCountOfSlider stepCountOfSlider}.
         *
         * Step count of {@link sap.m.Slider}
         *
         * This property only relevant if zoomControlType are:
         * 	 - SliderWithButtons
         * 	 - SliderOnly
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `10`.
         */
        setStepCountOfSlider(
          /**
           * New value for property `stepCountOfSlider`
           */
          iStepCountOfSlider: number
        ): sap.gantt.simple.ContainerToolbar;
        /**
         * Sets a new value for property {@link #getZoomControlType zoomControlType}.
         *
         * Defines the control type to set the zoom rate.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `SliderWithButtons`.
         */
        setZoomControlType(
          /**
           * New value for property `zoomControlType`
           */
          sZoomControlType: sap.gantt.config.ZoomControlType
        ): sap.gantt.simple.ContainerToolbar;
        /**
         * Sets a new value for property {@link #getZoomLevel zoomLevel}.
         *
         * Zoom level of all gantt chart instances in GanttChartContainer
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setZoomLevel(
          /**
           * New value for property `zoomLevel`
           */
          iZoomLevel: number
        ): sap.gantt.simple.ContainerToolbar;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:birdEyeButtonPress birdEyeButtonPress} event
         * of this `sap.gantt.simple.ContainerToolbar`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.gantt.simple.ContainerToolbar` itself.
         *
         * Fired when the bird eye button is pressed
         */
        attachBirdEyeButtonPress(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.gantt.simple.ContainerToolbar` itself
           */
          oListener?: object
        ): sap.gantt.simple.ContainerToolbar;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:displayTypeChange displayTypeChange} event of
         * this `sap.gantt.simple.ContainerToolbar`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.gantt.simple.ContainerToolbar` itself.
         *
         * Fired when a different display type is selected in the display type menu.
         */
        attachDisplayTypeChange(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.gantt.simple.ContainerToolbar` itself
           */
          oListener?: object
        ): sap.gantt.simple.ContainerToolbar;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:zoomStopChange zoomStopChange} event of this
         * `sap.gantt.simple.ContainerToolbar`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.gantt.simple.ContainerToolbar` itself.
         *
         * fired when zoom stop changed
         */
        attachZoomStopChange(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.gantt.simple.ContainerToolbar` itself
           */
          oListener?: object
        ): sap.gantt.simple.ContainerToolbar;
      }
      /**
       * @SINCE 1.66.0
       *
       * Placeholder is used to represent some of the buttons in a `sap.gantt.simple.ContainerToolbar` control.
       */
      class ContainerToolbarPlaceholder extends sap.ui.core.Control
        implements sap.m.IOverflowToolbarContent {
        /**
         * Constructor for a new placeholder used in the container toolbar.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: ContainerToolbarPlaceholderOpts
        );

        /**
         * Destroys the _control in the aggregation {@link #get_control _control}.
         */
        destroy_control(): sap.gantt.simple.ContainerToolbarPlaceholder;
        /**
         * Creates a new subclass of class sap.gantt.simple.ContainerToolbarPlaceholder with name `sClassName` and
         * enriches it with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets content of aggregation {@link #get_control _control}.
         *
         * Represented control.
         */
        get_control(): sap.ui.core.Control;
        /**
         * Gets current value of property {@link #get_show _show}.
         *
         * Shows or hides the represented control.
         *
         * Default value is `false`.
         */
        get_show(): boolean;
        /**
         * Returns a metadata object for class sap.gantt.simple.ContainerToolbarPlaceholder.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Enables the `sap.m.ContainerToolbarPlaceholder` to move inside the {@link sap.m.OverflowToolbar}. Required
         * by the {@link sap.m.IOverflowToolbarContent} interface.
         */
        getOverflowToolbarConfig(): object;
        /**
         * Gets current value of property {@link #getType type}.
         *
         * Defines the type of represented control.
         */
        getType(): sap.gantt.simple.ContainerToolbarPlaceholderType;
        /**
         * Sets the aggregated {@link #get_control _control}.
         */
        set_control(
          /**
           * The _control to set
           */
          o_control: sap.ui.core.Control
        ): sap.gantt.simple.ContainerToolbarPlaceholder;
        /**
         * Sets a new value for property {@link #get_show _show}.
         *
         * Shows or hides the represented control.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        set_show(
          /**
           * New value for property `_show`
           */
          b_show: boolean
        ): sap.gantt.simple.ContainerToolbarPlaceholder;
        /**
         * Sets a new value for property {@link #getType type}.
         *
         * Defines the type of represented control.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setType(
          /**
           * New value for property `type`
           */
          sType: sap.gantt.simple.ContainerToolbarPlaceholderType
        ): sap.gantt.simple.ContainerToolbarPlaceholder;
      }
      /**
       * Dimension Legend provides a template for two-dimension legends. This template defines the representation
       * (shape, pattern, and color) of individual legend items and their corresponding meanings in both dimensions.
       *
       * Consider that you need to create a legend where legend items represent both the type and status of an
       * object. In this case, you can configure column to indicate object statuses and row to indicate object
       * types. Assume that valid object types are "Freight Order", "Freight Unit", and "Trailer Unit"; valid
       * object statuses are "Executed", "In Execution", "Fixed", "Planned", and “Unplanned”. You will have a
       * three by four two-dimension legend containing twelve legend items. Each them represents an object in
       * a specific type and a specific status. For example, a red square stands for executed freight orders.
       */
      class DimensionLegend extends sap.ui.core.Control {
        /**
         * Creates and initializes a new Dimension Legend class.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID of the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: DimensionLegendOpts
        );

        /**
         * Adds some columnConfig to the aggregation {@link #getColumnConfigs columnConfigs}.
         */
        addColumnConfig(
          /**
           * The columnConfig to add; if empty, nothing is inserted
           */
          oColumnConfig: sap.gantt.simple.LegendColumnConfig
        ): sap.gantt.simple.DimensionLegend;
        /**
         * Adds some rowConfig to the aggregation {@link #getRowConfigs rowConfigs}.
         */
        addRowConfig(
          /**
           * The rowConfig to add; if empty, nothing is inserted
           */
          oRowConfig: sap.gantt.simple.LegendRowConfig
        ): sap.gantt.simple.DimensionLegend;
        /**
         * Destroys all the columnConfigs in the aggregation {@link #getColumnConfigs columnConfigs}.
         */
        destroyColumnConfigs(): sap.gantt.simple.DimensionLegend;
        /**
         * Destroys all the rowConfigs in the aggregation {@link #getRowConfigs rowConfigs}.
         */
        destroyRowConfigs(): sap.gantt.simple.DimensionLegend;
        /**
         * Creates a new subclass of class sap.gantt.simple.DimensionLegend with name `sClassName` and enriches
         * it with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets content of aggregation {@link #getColumnConfigs columnConfigs}.
         *
         * Legend column configuration
         */
        getColumnConfigs(): sap.gantt.simple.LegendColumnConfig[];
        /**
         * Returns a metadata object for class sap.gantt.simple.DimensionLegend.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets content of aggregation {@link #getRowConfigs rowConfigs}.
         *
         * Legend row configuration
         */
        getRowConfigs(): sap.gantt.simple.LegendRowConfig[];
        /**
         * Gets current value of property {@link #getTitle title}.
         *
         * Title of Legend Page & text of navigation list item (if not set it will be empty)
         */
        getTitle(): string;
        /**
         * Checks for the provided `sap.gantt.simple.LegendColumnConfig` in the aggregation {@link #getColumnConfigs
         * columnConfigs}. and returns its index if found or -1 otherwise.
         */
        indexOfColumnConfig(
          /**
           * The columnConfig whose index is looked for
           */
          oColumnConfig: sap.gantt.simple.LegendColumnConfig
        ): number;
        /**
         * Checks for the provided `sap.gantt.simple.LegendRowConfig` in the aggregation {@link #getRowConfigs rowConfigs}.
         * and returns its index if found or -1 otherwise.
         */
        indexOfRowConfig(
          /**
           * The rowConfig whose index is looked for
           */
          oRowConfig: sap.gantt.simple.LegendRowConfig
        ): number;
        /**
         * Inserts a columnConfig into the aggregation {@link #getColumnConfigs columnConfigs}.
         */
        insertColumnConfig(
          /**
           * The columnConfig to insert; if empty, nothing is inserted
           */
          oColumnConfig: sap.gantt.simple.LegendColumnConfig,
          /**
           * The `0`-based index the columnConfig should be inserted at; for a negative value of `iIndex`, the columnConfig
           * is inserted at position 0; for a value greater than the current size of the aggregation, the columnConfig
           * is inserted at the last position
           */
          iIndex: number
        ): sap.gantt.simple.DimensionLegend;
        /**
         * Inserts a rowConfig into the aggregation {@link #getRowConfigs rowConfigs}.
         */
        insertRowConfig(
          /**
           * The rowConfig to insert; if empty, nothing is inserted
           */
          oRowConfig: sap.gantt.simple.LegendRowConfig,
          /**
           * The `0`-based index the rowConfig should be inserted at; for a negative value of `iIndex`, the rowConfig
           * is inserted at position 0; for a value greater than the current size of the aggregation, the rowConfig
           * is inserted at the last position
           */
          iIndex: number
        ): sap.gantt.simple.DimensionLegend;
        /**
         * Removes all the controls from the aggregation {@link #getColumnConfigs columnConfigs}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllColumnConfigs(): sap.gantt.simple.LegendColumnConfig[];
        /**
         * Removes all the controls from the aggregation {@link #getRowConfigs rowConfigs}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllRowConfigs(): sap.gantt.simple.LegendRowConfig[];
        /**
         * Removes a columnConfig from the aggregation {@link #getColumnConfigs columnConfigs}.
         */
        removeColumnConfig(
          /**
           * The columnConfig to remove or its index or id
           */
          vColumnConfig: number | string | sap.gantt.simple.LegendColumnConfig
        ): sap.gantt.simple.LegendColumnConfig;
        /**
         * Removes a rowConfig from the aggregation {@link #getRowConfigs rowConfigs}.
         */
        removeRowConfig(
          /**
           * The rowConfig to remove or its index or id
           */
          vRowConfig: number | string | sap.gantt.simple.LegendRowConfig
        ): sap.gantt.simple.LegendRowConfig;
        /**
         * Sets a new value for property {@link #getTitle title}.
         *
         * Title of Legend Page & text of navigation list item (if not set it will be empty)
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setTitle(
          /**
           * New value for property `title`
           */
          sTitle: string
        ): sap.gantt.simple.DimensionLegend;
      }
      /**
       * A container that holds one or more `sap.gantt.simple.GanttChartWithTable` instances.
       */
      class GanttChartContainer extends sap.ui.core.Control {
        /**
         * Creates and initializes a new Gantt chart container.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: GanttChartContainerOpts
        );

        /**
         * Adds some ganttChart to the aggregation {@link #getGanttCharts ganttCharts}.
         */
        addGanttChart(
          /**
           * The ganttChart to add; if empty, nothing is inserted
           */
          oGanttChart: sap.gantt.simple.GanttChartWithTable
        ): sap.gantt.simple.GanttChartContainer;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:customSettingChange customSettingChange} event
         * of this `sap.gantt.simple.GanttChartContainer`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.gantt.simple.GanttChartContainer` itself.
         *
         * Event fired when the custom settings value is changed.
         *
         * The custom settings are application provided settings that can be configured in the settings dialog.
         * This event allows the application to handle these settings. Only check boxes are supported.
         */
        attachCustomSettingChange(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.gantt.simple.GanttChartContainer`
           * itself
           */
          oListener?: object
        ): sap.gantt.simple.GanttChartContainer;
        /**
         * Destroys all the ganttCharts in the aggregation {@link #getGanttCharts ganttCharts}.
         */
        destroyGanttCharts(): sap.gantt.simple.GanttChartContainer;
        /**
         * Destroys the svgDefs in the aggregation {@link #getSvgDefs svgDefs}.
         */
        destroySvgDefs(): sap.gantt.simple.GanttChartContainer;
        /**
         * Destroys the toolbar in the aggregation {@link #getToolbar toolbar}.
         */
        destroyToolbar(): sap.gantt.simple.GanttChartContainer;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:customSettingChange customSettingChange} event
         * of this `sap.gantt.simple.GanttChartContainer`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachCustomSettingChange(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.gantt.simple.GanttChartContainer;
        /**
         * Creates a new subclass of class sap.gantt.simple.GanttChartContainer with name `sClassName` and enriches
         * it with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:customSettingChange customSettingChange} to attached listeners.
         */
        fireCustomSettingChange(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Name of the custom setting
             */
            name?: string;
            /**
             * The value of the custom setting
             */
            value?: boolean;
          }
        ): sap.gantt.simple.GanttChartContainer;
        /**
         * Gets current value of property {@link #getDisplayType displayType}.
         *
         * Defines how the Gantt chart is displayed.
         * 	 - If set to `Both`, both the table and the chart are displayed.
         * 	 - If set to `Chart`, only the chart is displayed.
         * 	 - If set to `Table`, only the table is displayed.  This property overrides the `displayType` properties
         * 			of individual Gantt charts included in the `ganttCharts` aggregation.
         *
         * Default value is `Both`.
         */
        getDisplayType(): sap.gantt.simple.GanttChartWithTableDisplayType;
        /**
         * Gets current value of property {@link #getEnableAdhocLine enableAdhocLine}.
         *
         * Flag to enable and disable adhoc lines representing milestones and events along the time axis.
         *
         * When this value is set, it overrides the corresponding value on instances of aggregation `ganttCharts`.
         *
         * Default value is `true`.
         */
        getEnableAdhocLine(): boolean;
        /**
         * Gets current value of property {@link #getEnableCursorLine enableCursorLine}.
         *
         * Flag to enable and disable the cursor line that follows the cursor.
         *
         * When this value is set, it overrides the corresponding value on instances of aggregation `ganttCharts`.
         *
         * Default value is `true`.
         */
        getEnableCursorLine(): boolean;
        /**
         * Gets current value of property {@link #getEnableNowLine enableNowLine}.
         *
         * Flag to enable and disable the present time indicator.
         *
         * When this value is set, it overrides the corresponding value on instances of aggregation `ganttCharts`.
         *
         * Default value is `true`.
         */
        getEnableNowLine(): boolean;
        /**
         * Gets current value of property {@link #getEnableTimeScrollSync enableTimeScrollSync}.
         *
         * Flag to enable and disable scroll synchronization by time on instances of aggregation `ganttCharts`.
         *
         * Default value is `true`.
         */
        getEnableTimeScrollSync(): boolean;
        /**
         * Gets current value of property {@link #getEnableVerticalLine enableVerticalLine}.
         *
         * Flag to enable and disable vertical lines representing intervals along the time axis.
         *
         * When this value is set, it overrides the corresponding value on instances of aggregation `ganttCharts`.
         *
         * Default value is `true`.
         */
        getEnableVerticalLine(): boolean;
        /**
         * Gets content of aggregation {@link #getGanttCharts ganttCharts}.
         *
         * Gantt Chart of the container
         */
        getGanttCharts(): sap.gantt.simple.GanttChartWithTable[];
        /**
         * Gets current value of property {@link #getHeight height}.
         *
         * height of the container.
         *
         * Note that when a percentage is given, for the height to work as expected, the height of the surrounding
         * container must be defined.
         *
         * Default value is `100%`.
         */
        getHeight(): sap.ui.core.CSSSize;
        /**
         * Gets current value of property {@link #getLayoutOrientation layoutOrientation}.
         *
         * The GanttChartContainer use Splitter to manager the layout, it can have horizontal or vertical orientation.
         * **Note:** the property only take effect if GanttChartContainer has more than 1 ganttChart instances
         *
         * Default value is `Vertical`.
         */
        getLayoutOrientation(): sap.ui.core.Orientation;
        /**
         * Returns a metadata object for class sap.gantt.simple.GanttChartContainer.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets content of aggregation {@link #getSvgDefs svgDefs}.
         *
         * Definitions of paint servers used for advanced shape features around SVG fill, stroke, and filter attributes.
         * The generated SVG  will be reused in all gantt chart instances
         */
        getSvgDefs(): sap.gantt.def.SvgDefs;
        /**
         * Gets content of aggregation {@link #getToolbar toolbar}.
         *
         * Toolbar of the container.
         */
        getToolbar(): sap.gantt.simple.ContainerToolbar;
        /**
         * Gets current value of property {@link #getWidth width}.
         *
         * width of the container.
         *
         * Note that when a percentage is given, for the width to work as expected, the width of the surrounding
         * container must be defined.
         *
         * Default value is `100%`.
         */
        getWidth(): sap.ui.core.CSSSize;
        /**
         * Checks for the provided `sap.gantt.simple.GanttChartWithTable` in the aggregation {@link #getGanttCharts
         * ganttCharts}. and returns its index if found or -1 otherwise.
         */
        indexOfGanttChart(
          /**
           * The ganttChart whose index is looked for
           */
          oGanttChart: sap.gantt.simple.GanttChartWithTable
        ): number;
        /**
         * Inserts a ganttChart into the aggregation {@link #getGanttCharts ganttCharts}.
         */
        insertGanttChart(
          /**
           * The ganttChart to insert; if empty, nothing is inserted
           */
          oGanttChart: sap.gantt.simple.GanttChartWithTable,
          /**
           * The `0`-based index the ganttChart should be inserted at; for a negative value of `iIndex`, the ganttChart
           * is inserted at position 0; for a value greater than the current size of the aggregation, the ganttChart
           * is inserted at the last position
           */
          iIndex: number
        ): sap.gantt.simple.GanttChartContainer;
        /**
         * Removes all the controls from the aggregation {@link #getGanttCharts ganttCharts}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllGanttCharts(): sap.gantt.simple.GanttChartWithTable[];
        /**
         * Removes a ganttChart from the aggregation {@link #getGanttCharts ganttCharts}.
         */
        removeGanttChart(
          /**
           * The ganttChart to remove or its index or id
           */
          vGanttChart: number | string | sap.gantt.simple.GanttChartWithTable
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Sets a new value for property {@link #getDisplayType displayType}.
         *
         * Defines how the Gantt chart is displayed.
         * 	 - If set to `Both`, both the table and the chart are displayed.
         * 	 - If set to `Chart`, only the chart is displayed.
         * 	 - If set to `Table`, only the table is displayed.  This property overrides the `displayType` properties
         * 			of individual Gantt charts included in the `ganttCharts` aggregation.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `Both`.
         */
        setDisplayType(
          /**
           * New value for property `displayType`
           */
          sDisplayType: sap.gantt.simple.GanttChartWithTableDisplayType
        ): sap.gantt.simple.GanttChartContainer;
        /**
         * Sets a new value for property {@link #getEnableAdhocLine enableAdhocLine}.
         *
         * Flag to enable and disable adhoc lines representing milestones and events along the time axis.
         *
         * When this value is set, it overrides the corresponding value on instances of aggregation `ganttCharts`.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setEnableAdhocLine(
          /**
           * New value for property `enableAdhocLine`
           */
          bEnableAdhocLine: boolean
        ): sap.gantt.simple.GanttChartContainer;
        /**
         * Sets a new value for property {@link #getEnableCursorLine enableCursorLine}.
         *
         * Flag to enable and disable the cursor line that follows the cursor.
         *
         * When this value is set, it overrides the corresponding value on instances of aggregation `ganttCharts`.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setEnableCursorLine(
          /**
           * New value for property `enableCursorLine`
           */
          bEnableCursorLine: boolean
        ): sap.gantt.simple.GanttChartContainer;
        /**
         * Sets a new value for property {@link #getEnableNowLine enableNowLine}.
         *
         * Flag to enable and disable the present time indicator.
         *
         * When this value is set, it overrides the corresponding value on instances of aggregation `ganttCharts`.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setEnableNowLine(
          /**
           * New value for property `enableNowLine`
           */
          bEnableNowLine: boolean
        ): sap.gantt.simple.GanttChartContainer;
        /**
         * Sets a new value for property {@link #getEnableTimeScrollSync enableTimeScrollSync}.
         *
         * Flag to enable and disable scroll synchronization by time on instances of aggregation `ganttCharts`.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setEnableTimeScrollSync(
          /**
           * New value for property `enableTimeScrollSync`
           */
          bEnableTimeScrollSync: boolean
        ): sap.gantt.simple.GanttChartContainer;
        /**
         * Sets a new value for property {@link #getEnableVerticalLine enableVerticalLine}.
         *
         * Flag to enable and disable vertical lines representing intervals along the time axis.
         *
         * When this value is set, it overrides the corresponding value on instances of aggregation `ganttCharts`.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setEnableVerticalLine(
          /**
           * New value for property `enableVerticalLine`
           */
          bEnableVerticalLine: boolean
        ): sap.gantt.simple.GanttChartContainer;
        /**
         * Sets a new value for property {@link #getHeight height}.
         *
         * height of the container.
         *
         * Note that when a percentage is given, for the height to work as expected, the height of the surrounding
         * container must be defined.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `100%`.
         */
        setHeight(
          /**
           * New value for property `height`
           */
          sHeight: sap.ui.core.CSSSize
        ): sap.gantt.simple.GanttChartContainer;
        /**
         * Sets a new value for property {@link #getLayoutOrientation layoutOrientation}.
         *
         * The GanttChartContainer use Splitter to manager the layout, it can have horizontal or vertical orientation.
         * **Note:** the property only take effect if GanttChartContainer has more than 1 ganttChart instances
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `Vertical`.
         */
        setLayoutOrientation(
          /**
           * New value for property `layoutOrientation`
           */
          sLayoutOrientation: sap.ui.core.Orientation
        ): sap.gantt.simple.GanttChartContainer;
        /**
         * Sets the aggregated {@link #getSvgDefs svgDefs}.
         */
        setSvgDefs(
          /**
           * The svgDefs to set
           */
          oSvgDefs: sap.gantt.def.SvgDefs
        ): sap.gantt.simple.GanttChartContainer;
        /**
         * Sets the aggregated {@link #getToolbar toolbar}.
         */
        setToolbar(
          /**
           * The toolbar to set
           */
          oToolbar: sap.gantt.simple.ContainerToolbar
        ): sap.gantt.simple.GanttChartContainer;
        /**
         * Sets a new value for property {@link #getWidth width}.
         *
         * width of the container.
         *
         * Note that when a percentage is given, for the width to work as expected, the width of the surrounding
         * container must be defined.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `100%`.
         */
        setWidth(
          /**
           * New value for property `width`
           */
          sWidth: sap.ui.core.CSSSize
        ): sap.gantt.simple.GanttChartContainer;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:customSettingChange customSettingChange} event
         * of this `sap.gantt.simple.GanttChartContainer`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.gantt.simple.GanttChartContainer` itself.
         *
         * Event fired when the custom settings value is changed.
         *
         * The custom settings are application provided settings that can be configured in the settings dialog.
         * This event allows the application to handle these settings. Only check boxes are supported.
         */
        attachCustomSettingChange(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.gantt.simple.GanttChartContainer`
           * itself
           */
          oListener?: object
        ): sap.gantt.simple.GanttChartContainer;
      }
      /**
       * @SINCE 1.60
       *
       * The Gantt Chart control provides a comprehensive set of features to display hierarchical data and visualized
       * shapes together. It's designed to fully support OData binding, declaring hierarchical data and shapes
       * bindings in XML view. It's the recommended control for new applications.
       */
      class GanttChartWithTable extends sap.ui.core.Control {
        /**
         * Creates and initializes a new Gantt Chart
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: GanttChartWithTableOpts
        );

        /**
         * Adds some adhocLine to the aggregation {@link #getAdhocLines adhocLines}.
         */
        addAdhocLine(
          /**
           * The adhocLine to add; if empty, nothing is inserted
           */
          oAdhocLine: sap.gantt.AdhocLine
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Adds some shapeScheme to the aggregation {@link #getShapeSchemes shapeSchemes}.
         */
        addShapeScheme(
          /**
           * The shapeScheme to add; if empty, nothing is inserted
           */
          oShapeScheme: sap.gantt.simple.ShapeScheme
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:dragStart dragStart} event of this `sap.gantt.simple.GanttChartWithTable`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.gantt.simple.GanttChartWithTable` itself.
         *
         * Event fired when a drag-and-drop begins
         */
        attachDragStart(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.gantt.simple.GanttChartWithTable`
           * itself
           */
          oListener?: object
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:shapeConnect shapeConnect} event of this `sap.gantt.simple.GanttChartWithTable`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.gantt.simple.GanttChartWithTable` itself.
         *
         * Event fired when one shape dragged and connected to another shape.
         */
        attachShapeConnect(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.gantt.simple.GanttChartWithTable`
           * itself
           */
          oListener?: object
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:shapeContextMenu shapeContextMenu} event of
         * this `sap.gantt.simple.GanttChartWithTable`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.gantt.simple.GanttChartWithTable` itself.
         *
         * Event fired when you right-click the shape.
         */
        attachShapeContextMenu(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.gantt.simple.GanttChartWithTable`
           * itself
           */
          oListener?: object
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:shapeDoubleClick shapeDoubleClick} event of
         * this `sap.gantt.simple.GanttChartWithTable`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.gantt.simple.GanttChartWithTable` itself.
         *
         * This event is fired when a shape is double-clicked or double-tapped.
         */
        attachShapeDoubleClick(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.gantt.simple.GanttChartWithTable`
           * itself
           */
          oListener?: object
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:shapeDrop shapeDrop} event of this `sap.gantt.simple.GanttChartWithTable`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.gantt.simple.GanttChartWithTable` itself.
         *
         * Event fired when a drag-and-drop occurs on one or more selected shapes.
         */
        attachShapeDrop(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.gantt.simple.GanttChartWithTable`
           * itself
           */
          oListener?: object
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:shapeMouseEnter shapeMouseEnter} event of this
         * `sap.gantt.simple.GanttChartWithTable`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.gantt.simple.GanttChartWithTable` itself.
         *
         * Event fired when a shape is hovered over.
         */
        attachShapeMouseEnter(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.gantt.simple.GanttChartWithTable`
           * itself
           */
          oListener?: object
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:shapeMouseLeave shapeMouseLeave} event of this
         * `sap.gantt.simple.GanttChartWithTable`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.gantt.simple.GanttChartWithTable` itself.
         *
         * Fired when the mouse pointer leaves the shape.
         */
        attachShapeMouseLeave(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.gantt.simple.GanttChartWithTable`
           * itself
           */
          oListener?: object
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:shapePress shapePress} event of this `sap.gantt.simple.GanttChartWithTable`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.gantt.simple.GanttChartWithTable` itself.
         *
         * This event is fired when a shape is clicked or tapped.
         */
        attachShapePress(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.gantt.simple.GanttChartWithTable`
           * itself
           */
          oListener?: object
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:shapeResize shapeResize} event of this `sap.gantt.simple.GanttChartWithTable`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.gantt.simple.GanttChartWithTable` itself.
         *
         * Fired when a shape is resized.
         */
        attachShapeResize(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.gantt.simple.GanttChartWithTable`
           * itself
           */
          oListener?: object
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:shapeSelectionChange shapeSelectionChange} event
         * of this `sap.gantt.simple.GanttChartWithTable`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.gantt.simple.GanttChartWithTable` itself.
         *
         * Fired when the shape selection of the gantt chart has been changed.
         */
        attachShapeSelectionChange(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.gantt.simple.GanttChartWithTable`
           * itself
           */
          oListener?: object
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * @SINCE 1.68
         *
         * Attaches event handler `fnFunction` to the {@link #event:visibleHorizonUpdate visibleHorizonUpdate} event
         * of this `sap.gantt.simple.GanttChartWithTable`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.gantt.simple.GanttChartWithTable` itself.
         *
         * This event is fired when the visible horizon is changed.
         */
        attachVisibleHorizonUpdate(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.gantt.simple.GanttChartWithTable`
           * itself
           */
          oListener?: object
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Binds aggregation {@link #getAdhocLines adhocLines} to model data.
         *
         * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
         * of the possible properties of `oBindingInfo`.
         */
        bindAdhocLines(
          /**
           * The binding information
           */
          oBindingInfo: object
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Binds aggregation {@link #getAxisTimeStrategy axisTimeStrategy} to model data.
         *
         * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
         * of the possible properties of `oBindingInfo`.
         */
        bindAxisTimeStrategy(
          /**
           * The binding information
           */
          oBindingInfo: object
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Binds aggregation {@link #getCalendarDef calendarDef} to model data.
         *
         * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
         * of the possible properties of `oBindingInfo`.
         */
        bindCalendarDef(
          /**
           * The binding information
           */
          oBindingInfo: object
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Collapse the selected row indices by the shape scheme key. This function takes effect only after the
         * control is fully rendered, otherwise it's doing nothing.
         */
        collapse(
          /**
           * the key defined in `sap.gantt.simple.ShapeScheme`
           */
          sSchemeKey: string,
          /**
           * A single index or an array of indices of the rows to be collapsed
           */
          vRowIndex: number | number[]
        ): void;
        /**
         * Destroys all the adhocLines in the aggregation {@link #getAdhocLines adhocLines}.
         */
        destroyAdhocLines(): sap.gantt.simple.GanttChartWithTable;
        /**
         * Destroys the axisTimeStrategy in the aggregation {@link #getAxisTimeStrategy axisTimeStrategy}.
         */
        destroyAxisTimeStrategy(): sap.gantt.simple.GanttChartWithTable;
        /**
         * Destroys the calendarDef in the aggregation {@link #getCalendarDef calendarDef}.
         */
        destroyCalendarDef(): sap.gantt.simple.GanttChartWithTable;
        /**
         * Destroys the locale in the aggregation {@link #getLocale locale}.
         */
        destroyLocale(): sap.gantt.simple.GanttChartWithTable;
        /**
         * Destroys all the shapeSchemes in the aggregation {@link #getShapeSchemes shapeSchemes}.
         */
        destroyShapeSchemes(): sap.gantt.simple.GanttChartWithTable;
        /**
         * Destroys the svgDefs in the aggregation {@link #getSvgDefs svgDefs}.
         */
        destroySvgDefs(): sap.gantt.simple.GanttChartWithTable;
        /**
         * Destroys the table in the aggregation {@link #getTable table}.
         */
        destroyTable(): sap.gantt.simple.GanttChartWithTable;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:dragStart dragStart} event of this `sap.gantt.simple.GanttChartWithTable`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachDragStart(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:shapeConnect shapeConnect} event of this `sap.gantt.simple.GanttChartWithTable`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachShapeConnect(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:shapeContextMenu shapeContextMenu} event of
         * this `sap.gantt.simple.GanttChartWithTable`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachShapeContextMenu(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:shapeDoubleClick shapeDoubleClick} event of
         * this `sap.gantt.simple.GanttChartWithTable`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachShapeDoubleClick(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:shapeDrop shapeDrop} event of this `sap.gantt.simple.GanttChartWithTable`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachShapeDrop(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:shapeMouseEnter shapeMouseEnter} event of
         * this `sap.gantt.simple.GanttChartWithTable`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachShapeMouseEnter(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:shapeMouseLeave shapeMouseLeave} event of
         * this `sap.gantt.simple.GanttChartWithTable`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachShapeMouseLeave(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:shapePress shapePress} event of this `sap.gantt.simple.GanttChartWithTable`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachShapePress(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:shapeResize shapeResize} event of this `sap.gantt.simple.GanttChartWithTable`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachShapeResize(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:shapeSelectionChange shapeSelectionChange}
         * event of this `sap.gantt.simple.GanttChartWithTable`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachShapeSelectionChange(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * @SINCE 1.68
         *
         * Detaches event handler `fnFunction` from the {@link #event:visibleHorizonUpdate visibleHorizonUpdate}
         * event of this `sap.gantt.simple.GanttChartWithTable`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachVisibleHorizonUpdate(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * The Gantt Chart performs Bird Eye on all visible rows or on a specific row depending on the setting of
         * iRowIndex.
         */
        doBirdEye(
          /**
           * zero-based index indicating which row to perform Bird Eye on. If you do not specify iRowIndex, the Gantt
           * chart performs Bird Eye on all visible rows.
           */
          iRowIndex: number
        ): void;
        /**
         * expand one or more rows indices by the shape scheme key. This function takes effect only after the control
         * is fully rendered, otherwise it's doing nothing.
         */
        expand(
          /**
           * the key defined in `sap.gantt.simple.ShapeScheme`
           */
          sSchemeKey: string,
          /**
           * A single index or an array of indices of the rows to be collapsed
           */
          vRowIndex: number | number[]
        ): void;
        /**
         * Creates a new subclass of class sap.gantt.simple.GanttChartWithTable with name `sClassName` and enriches
         * it with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:dragStart dragStart} to attached listeners.
         */
        fireDragStart(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * The source Gantt chart
             */
            sourceGanttChart?: sap.gantt.simple.GanttChartWithTable;
            /**
             * Object of dragged shapes dates, it's structured as follows:
             * ```javascript
             *
             * {
             *     "shapeUid1": {
             *          "time": date1,
             *          "endTime": date2,
             *     },
             *     "shapeUid2": {
             *          "time": date3,
             *          "endTime": date4,
             *     },
             * }
             * ```
             *
             *
             * You can't get all selected shape instances because scrolling might destroy shapes on the invisible rows.
             */
            draggedShapeDates?: object;
            /**
             * The last shape out of those being dragged.
             */
            lastDraggedShapeUid?: string;
            /**
             * Represents the mouse pointer's date & time when the `dragStart` event was fired.
             */
            cursorDateTime?: object;
          }
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Fires event {@link #event:shapeConnect shapeConnect} to attached listeners.
         */
        fireShapeConnect(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * The source shape's shapeUid
             */
            fromShapeUid?: string;
            /**
             * The target shape's shapeUid
             */
            toShapeUid?: string;
            /**
             * The value comes from `sap.gantt.simple.RelationshipType`, which represents type of relationship
             */
            type?: sap.gantt.simple.RelationshipType;
          }
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Fires event {@link #event:shapeContextMenu shapeContextMenu} to attached listeners.
         */
        fireShapeContextMenu(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            shape?: any;

            rowSettings?: sap.gantt.simple.GanttRowSettings;
            /**
             * The mouse position relative to the left edge of the document.
             */
            pageX?: number;
            /**
             * The mouse position relative to the top edge of the document.
             */
            pageY?: number;
          }
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Fires event {@link #event:shapeDoubleClick shapeDoubleClick} to attached listeners.
         */
        fireShapeDoubleClick(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            shape?: any;

            rowSettings?: sap.gantt.simple.GanttRowSettings;
          }
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Fires event {@link #event:shapeDrop shapeDrop} to attached listeners.
         */
        fireShapeDrop(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * The source gantt chart
             */
            sourceGanttChart?: sap.gantt.simple.GanttChartWithTable;
            /**
             * The target gantt chart
             */
            targetGanttChart?: sap.gantt.simple.GanttChartWithTable;
            /**
             * Object of dragged shapes date, it's structure is:
             * ```javascript
             *
             * {
             *     "shapeUid1": {
             *          "time": date1,
             *          "endTime": date2,
             *     },
             *     "shapeUid2": {
             *          "time": date3,
             *          "endTime": date4,
             *     },
             * }
             * ```
             *
             *
             * It's impossible to get all selected shape instances because of scrolling might destroy shapes on the
             * invisible rows
             */
            draggedShapeDates?: object;
            /**
             * The last dragged shape
             */
            lastDraggedShapeUid?: string;
            /**
             * The target row of gantt chart. No source row because of user might drag multiple shapes on different
             * rows.
             */
            targetRow?: sap.ui.table.Row;
            /**
             * Represent the cursor date & time when drop event fired
             */
            cursorDateTime?: object;
            /**
             * The startTime or endTime of a dropped shape. In Free or Horizontal drag orientation, the value depends
             * on the ghost alignment:
             * 	 - Start: newDateTime is the shape new start time, newDateTime is equal with cursorDateTime
             * 	 - None: newDateTime is the shape new start time
             * 	 - End: newDateTime is the shape new end time, newDateTime is equal with cursorDateTime
             *
             * In Veritcal drag orientation, newDateTime is the shape new start time, and not equal with cursorDateTime
             * in usual.
             */
            newDateTime?: object;
            /**
             * Represents the shape which the dragged shape dropped on.
             */
            targetShape?: any;
          }
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Fires event {@link #event:shapeMouseEnter shapeMouseEnter} to attached listeners.
         */
        fireShapeMouseEnter(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * The data of the shape which fires this event.
             */
            shape?: any;
            /**
             * The mouse position relative to the left edge of the document.
             */
            pageX?: number;
            /**
             * The mouse position relative to the top edge of the document.
             */
            pageY?: number;
          }
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Fires event {@link #event:shapeMouseLeave shapeMouseLeave} to attached listeners.
         */
        fireShapeMouseLeave(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * which shape element trigger the event.
             */
            shape?: any;
            /**
             * Original JQuery event object.
             */
            originEvent?: object;
          }
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Fires event {@link #event:shapePress shapePress} to attached listeners.
         *
         * Listeners may prevent the default action of this event by using the `preventDefault`-method on the event
         * object.
         */
        fireShapePress(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            shape?: sap.gantt.simple.BaseShape;

            rowSettings?: sap.gantt.simple.GanttRowSettings;
          }
        ): boolean;
        /**
         * Fires event {@link #event:shapeResize shapeResize} to attached listeners.
         */
        fireShapeResize(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * UID of the resized shape.
             */
            shapeUid?: string;
            /**
             * Shape instance of the resized shape
             */
            shape?: any;
            /**
             * Row object of the resizing shape.
             */
            rowObject?: object;
            /**
             * Original shape time array, including the start time and end time.
             */
            oldTime?: string[];
            /**
             * New shape time array, including the start time and end time.
             */
            newTime?: string[];
          }
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Fires event {@link #event:shapeSelectionChange shapeSelectionChange} to attached listeners.
         */
        fireShapeSelectionChange(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * all selected shape UID.
             */
            shapeUids?: string[];
          }
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * @SINCE 1.68
         *
         * Fires event {@link #event:visibleHorizonUpdate visibleHorizonUpdate} to attached listeners.
         */
        fireVisibleHorizonUpdate(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * Specifies how the update was initiated.
             */
            type?: sap.gantt.simple.VisibleHorizonUpdateType;
            /**
             * Value of the visible horizon before the current update. Some types of this event don't have this value.
             */
            lastVisibleHorizon?: sap.gantt.config.TimeHorizon;
            /**
             * Value of the visible horizon after the current update.
             */
            currentVisibleHorizon?: sap.gantt.config.TimeHorizon;
          }
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Gets current value of property {@link #getAdhocLineLayer adhocLineLayer}.
         *
         * Specifies on which layer adhoc lines reside. By default, adhoc lines are on top of all other shapes and
         * patterns.
         *
         * Default value is `sap.gantt.AdhocLineLayer.Top`.
         */
        getAdhocLineLayer(): string;
        /**
         * Gets content of aggregation {@link #getAdhocLines adhocLines}.
         *
         * The aggregation is used to store configuration of adhoc lines, adhoc lines represent milestones and events
         * in axis time.
         */
        getAdhocLines(): sap.gantt.AdhocLine[];
        /**
         * This is a shortcut method for GanttChart instance to get the AxisTime.
         */
        getAxisTime(): any;
        /**
         * Gets content of aggregation {@link #getAxisTimeStrategy axisTimeStrategy}.
         *
         * This aggregation controls the zoom strategies and zoom rate in Gantt Chart.
         */
        getAxisTimeStrategy(): sap.gantt.axistime.AxisTimeStrategyBase;
        /**
         * Gets content of aggregation {@link #getCalendarDef calendarDef}.
         *
         * Paint servers consumed by special shape `sap.gantt.shape.cal.Calendar`.
         *
         * This aggregation is designed to improve performance of calendar shapes. Rows usually share a similar
         * definition with calendar shapes. It is possible to define a Calendar paint server to draw only one rectangle
         * for each row. Notes for classes extended from `sap.gantt.def.cal.CalendarDef`: Different from property
         * `paintServerDefs`, paint servers defined here must implement method `getDefNode()` instead of method
         * `getDefString()`.
         */
        getCalendarDef(): sap.gantt.def.cal.CalendarDefs;
        /**
         * Gets current value of property {@link #getDisableShapeDoubleClickEvent disableShapeDoubleClickEvent}.
         *
         * Disables or enables the `shapeDoubleClick` event. If set to `true`, the `shapeDoubleClick` event is disabled.
         *
         * Default value is `false`.
         */
        getDisableShapeDoubleClickEvent(): boolean;
        /**
         * Gets current value of property {@link #getDisplayType displayType}.
         *
         * Defines how the Gantt chart is displayed.
         * 	 - If set to `Both`, both the table and the chart are displayed.
         * 	 - If set to `Chart`, only the chart is displayed.
         * 	 - If set to `Table`, only the table is displayed.  When the parent element of the Gantt chart
         * 			is the {@link sap.gantt.simple.GanttChartContainer}, this property overrides the `displayType` property
         * 			of {@link sap.gantt.simple.GanttChartContainer}.
         *
         * Default value is `Both`.
         */
        getDisplayType(): sap.gantt.simple.GanttChartWithTableDisplayType;
        /**
         * Gets current value of property {@link #getDragOrientation dragOrientation}.
         *
         * Drag orientation of Gantt Chart.
         *
         * This property doesn't limit the mouse cursor position but the dragging ghost position when dragging it
         * around. This property has 3 values:
         * 	 - Free: The dragging ghost moves along with your mouse cursor.
         * 	 - Horizontal: The dragged ghost only moves horizontally, cross row dragging is restricted. You can
         * 			use this mode if you only need to change the times of the dragging shape
         * 	 - Vertical: ***Notice*** Vertical works if only one shape is selected (regardless shapeSelectionMode),
         * 			it's showing forbidden cursor style on multiple shape selections when you are dragging. You can use this
         * 			vertical mode if you only want to change the assignment without changing shape times.
         *
         * Default value is `Free`.
         */
        getDragOrientation(): any;
        /**
         * Gets current value of property {@link #getEnableAdhocLine enableAdhocLine}.
         *
         * Flag to show or hide adhoc lines representing milestones and events along the time axis
         *
         * Default value is `true`.
         */
        getEnableAdhocLine(): boolean;
        /**
         * Gets current value of property {@link #getEnableCursorLine enableCursorLine}.
         *
         * Flag whether to show or hide the cursor line when moving your mouse cursor
         *
         * Default value is `true`.
         */
        getEnableCursorLine(): boolean;
        /**
         * Gets current value of property {@link #getEnableNowLine enableNowLine}.
         *
         * Flag whether to show or hide the present time indicator.
         *
         * Default value is `true`.
         */
        getEnableNowLine(): boolean;
        /**
         * Gets current value of property {@link #getEnableVerticalLine enableVerticalLine}.
         *
         * Flag to show or hide vertical lines representing intervals along the time axis
         *
         * Default value is `true`.
         */
        getEnableVerticalLine(): boolean;
        /**
         * Gets current value of property {@link #getGhostAlignment ghostAlignment}.
         *
         * The dragging ghost alignment of Gantt Chart. This property define the visual effect of ghost position
         * on dragging, it also effect the parameter value in event shapeDragEnd
         *
         * Default value is `sap.gantt.dragdrop.GhostAlignment.None`.
         */
        getGhostAlignment(): string;
        /**
         * Gets current value of property {@link #getHeight height}.
         *
         * Height of the control.
         *
         * Default value is `100%`.
         */
        getHeight(): sap.ui.core.CSSSize;
        /**
         * Gets content of aggregation {@link #getLocale locale}.
         *
         * Configuration of locale settings.
         *
         * Most locale settings can be configured in sap.ui.configuration objects. Only the time zone and day-light-saving
         * time options are provided by locale settings. We recommend that you set the type of this argument to
         * `sap.gantt.config.Locale`. Otherwise some properties you set may not function properly.
         */
        getLocale(): sap.gantt.config.Locale;
        /**
         * Returns a metadata object for class sap.gantt.simple.GanttChartWithTable.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * @SINCE 1.68
         *
         * Gets current value of property {@link #getNowLineInUTC nowLineInUTC}.
         *
         * Flag whether to show the `nowLine` in UTC or in local time.
         *
         * Default value is `true`.
         */
        getNowLineInUTC(): boolean;
        /**
         * Get selected shapes in gantt chart.
         */
        getSelectedShapeUid(): Object[];
        /**
         * Gets current value of property {@link #getSelectionPanelSize selectionPanelSize}.
         *
         * The width of selection panel.
         *
         * In `sap.gantt.simple.GanttChartWithTable`, the selectionPanelSize is the Table/TreeTable width in the
         * embedded Splitter.
         *
         * Default value is `30%`.
         */
        getSelectionPanelSize(): sap.ui.core.CSSSize;
        /**
         * Gets content of aggregation {@link #getShapeSchemes shapeSchemes}.
         *
         * Shape schemes of Gantt Chart.
         *
         * Defines all the possible shape schemes in the Gantt chart control. **Note:**If you don't use expand chart,
         * you can omit this aggregations. If not set, a default `sap.gantt.simple.ShapeScheme` is provided automatically.
         */
        getShapeSchemes(): sap.gantt.simple.ShapeScheme[];
        /**
         * Gets current value of property {@link #getShapeSelectionMode shapeSelectionMode}.
         *
         * Shape selection mode of the Gantt Chart. This property controls whether single or multiple shapes can
         * be selected. When the selection mode is changed, the current selection is removed.
         *
         * The shapeSelectionMode only works if `selectable` property on the defined Shape is set to true.
         *
         * Default value is `MultiWithKeyboard`.
         */
        getShapeSelectionMode(): sap.gantt.SelectionMode;
        /**
         * Gets current value of property {@link #getShapeSelectionSettings shapeSelectionSettings}.
         *
         * A JSON object containing the shapeSelectionSettings which will be used to configure shape selection styles.
         * If nothing is specified, then the default selection styles (2px dashed red border) is set.
         *
         * Below you can find a brief example
         * ```javascript
         *
         * {
         *    color: "#808080",
         *    strokeWidth: 2,
         *    strokeDasharray: "5,1"
         * }
         * ```
         */
        getShapeSelectionSettings(): object;
        /**
         * Gets current value of property {@link #getShowShapeTimeOnDrag showShapeTimeOnDrag}.
         *
         * Flag to show or hide the start time and end time of a shape when you drag it along the time line
         *
         * Default value is `false`.
         */
        getShowShapeTimeOnDrag(): boolean;
        /**
         * Gets content of aggregation {@link #getSvgDefs svgDefs}.
         *
         * SVG reusable element definitions.
         *
         * If this property is provided, the paint server definition of the SVG is rendered. Method `getDefString()`
         * should be implemented by all paint server classes that are passed in in this property. We recommend that
         * you set the type of this argument to `sap.gantt.def.SvgDefs`. Otherwise some properties you set may not
         * function properly.
         */
        getSvgDefs(): sap.gantt.def.SvgDefs;
        /**
         * Gets content of aggregation {@link #getTable table}.
         *
         * Table of the Gantt Chart
         *
         * You can use {sap.ui.table.Table} if you have a flat list data or {sap.ui.table.TreeTable} if you have
         * hierarchical data.
         */
        getTable(): sap.ui.table.Table;
        /**
         * Gets current value of property {@link #getWidth width}.
         *
         * Width of the control.
         *
         * Default value is `100%`.
         */
        getWidth(): sap.ui.core.CSSSize;
        /**
         * Checks for the provided `sap.gantt.AdhocLine` in the aggregation {@link #getAdhocLines adhocLines}. and
         * returns its index if found or -1 otherwise.
         */
        indexOfAdhocLine(
          /**
           * The adhocLine whose index is looked for
           */
          oAdhocLine: sap.gantt.AdhocLine
        ): number;
        /**
         * Checks for the provided `sap.gantt.simple.ShapeScheme` in the aggregation {@link #getShapeSchemes shapeSchemes}.
         * and returns its index if found or -1 otherwise.
         */
        indexOfShapeScheme(
          /**
           * The shapeScheme whose index is looked for
           */
          oShapeScheme: sap.gantt.simple.ShapeScheme
        ): number;
        /**
         * Inserts a adhocLine into the aggregation {@link #getAdhocLines adhocLines}.
         */
        insertAdhocLine(
          /**
           * The adhocLine to insert; if empty, nothing is inserted
           */
          oAdhocLine: sap.gantt.AdhocLine,
          /**
           * The `0`-based index the adhocLine should be inserted at; for a negative value of `iIndex`, the adhocLine
           * is inserted at position 0; for a value greater than the current size of the aggregation, the adhocLine
           * is inserted at the last position
           */
          iIndex: number
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Inserts a shapeScheme into the aggregation {@link #getShapeSchemes shapeSchemes}.
         */
        insertShapeScheme(
          /**
           * The shapeScheme to insert; if empty, nothing is inserted
           */
          oShapeScheme: sap.gantt.simple.ShapeScheme,
          /**
           * The `0`-based index the shapeScheme should be inserted at; for a negative value of `iIndex`, the shapeScheme
           * is inserted at position 0; for a value greater than the current size of the aggregation, the shapeScheme
           * is inserted at the last position
           */
          iIndex: number
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Removes a adhocLine from the aggregation {@link #getAdhocLines adhocLines}.
         */
        removeAdhocLine(
          /**
           * The adhocLine to remove or its index or id
           */
          vAdhocLine: number | string | sap.gantt.AdhocLine
        ): sap.gantt.AdhocLine;
        /**
         * Removes all the controls from the aggregation {@link #getAdhocLines adhocLines}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllAdhocLines(): sap.gantt.AdhocLine[];
        /**
         * Removes all the controls from the aggregation {@link #getShapeSchemes shapeSchemes}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllShapeSchemes(): sap.gantt.simple.ShapeScheme[];
        /**
         * Removes a shapeScheme from the aggregation {@link #getShapeSchemes shapeSchemes}.
         */
        removeShapeScheme(
          /**
           * The shapeScheme to remove or its index or id
           */
          vShapeScheme: number | string | sap.gantt.simple.ShapeScheme
        ): sap.gantt.simple.ShapeScheme;
        /**
         * Sets a new value for property {@link #getAdhocLineLayer adhocLineLayer}.
         *
         * Specifies on which layer adhoc lines reside. By default, adhoc lines are on top of all other shapes and
         * patterns.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `sap.gantt.AdhocLineLayer.Top`.
         */
        setAdhocLineLayer(
          /**
           * New value for property `adhocLineLayer`
           */
          sAdhocLineLayer: string
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Sets the aggregated {@link #getAxisTimeStrategy axisTimeStrategy}.
         */
        setAxisTimeStrategy(
          /**
           * The axisTimeStrategy to set
           */
          oAxisTimeStrategy: sap.gantt.axistime.AxisTimeStrategyBase
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Sets the aggregated {@link #getCalendarDef calendarDef}.
         */
        setCalendarDef(
          /**
           * The calendarDef to set
           */
          oCalendarDef: sap.gantt.def.cal.CalendarDefs
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Sets a new value for property {@link #getDisableShapeDoubleClickEvent disableShapeDoubleClickEvent}.
         *
         * Disables or enables the `shapeDoubleClick` event. If set to `true`, the `shapeDoubleClick` event is disabled.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setDisableShapeDoubleClickEvent(
          /**
           * New value for property `disableShapeDoubleClickEvent`
           */
          bDisableShapeDoubleClickEvent: boolean
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Sets a new value for property {@link #getDisplayType displayType}.
         *
         * Defines how the Gantt chart is displayed.
         * 	 - If set to `Both`, both the table and the chart are displayed.
         * 	 - If set to `Chart`, only the chart is displayed.
         * 	 - If set to `Table`, only the table is displayed.  When the parent element of the Gantt chart
         * 			is the {@link sap.gantt.simple.GanttChartContainer}, this property overrides the `displayType` property
         * 			of {@link sap.gantt.simple.GanttChartContainer}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `Both`.
         */
        setDisplayType(
          /**
           * New value for property `displayType`
           */
          sDisplayType: sap.gantt.simple.GanttChartWithTableDisplayType
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Sets a new value for property {@link #getDragOrientation dragOrientation}.
         *
         * Drag orientation of Gantt Chart.
         *
         * This property doesn't limit the mouse cursor position but the dragging ghost position when dragging it
         * around. This property has 3 values:
         * 	 - Free: The dragging ghost moves along with your mouse cursor.
         * 	 - Horizontal: The dragged ghost only moves horizontally, cross row dragging is restricted. You can
         * 			use this mode if you only need to change the times of the dragging shape
         * 	 - Vertical: ***Notice*** Vertical works if only one shape is selected (regardless shapeSelectionMode),
         * 			it's showing forbidden cursor style on multiple shape selections when you are dragging. You can use this
         * 			vertical mode if you only want to change the assignment without changing shape times.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `Free`.
         */
        setDragOrientation(
          /**
           * New value for property `dragOrientation`
           */
          sDragOrientation: any
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Sets a new value for property {@link #getEnableAdhocLine enableAdhocLine}.
         *
         * Flag to show or hide adhoc lines representing milestones and events along the time axis
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setEnableAdhocLine(
          /**
           * New value for property `enableAdhocLine`
           */
          bEnableAdhocLine: boolean
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Sets a new value for property {@link #getEnableCursorLine enableCursorLine}.
         *
         * Flag whether to show or hide the cursor line when moving your mouse cursor
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setEnableCursorLine(
          /**
           * New value for property `enableCursorLine`
           */
          bEnableCursorLine: boolean
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Sets a new value for property {@link #getEnableNowLine enableNowLine}.
         *
         * Flag whether to show or hide the present time indicator.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setEnableNowLine(
          /**
           * New value for property `enableNowLine`
           */
          bEnableNowLine: boolean
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Enable or disable table's variable row height feature
         */
        setEnableVariableRowHeight(
          /**
           * The flag to control it
           */
          bEnabled: boolean
        ): void;
        /**
         * Sets a new value for property {@link #getEnableVerticalLine enableVerticalLine}.
         *
         * Flag to show or hide vertical lines representing intervals along the time axis
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setEnableVerticalLine(
          /**
           * New value for property `enableVerticalLine`
           */
          bEnableVerticalLine: boolean
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Sets a new value for property {@link #getGhostAlignment ghostAlignment}.
         *
         * The dragging ghost alignment of Gantt Chart. This property define the visual effect of ghost position
         * on dragging, it also effect the parameter value in event shapeDragEnd
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `sap.gantt.dragdrop.GhostAlignment.None`.
         */
        setGhostAlignment(
          /**
           * New value for property `ghostAlignment`
           */
          sGhostAlignment: string
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Sets a new value for property {@link #getHeight height}.
         *
         * Height of the control.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `100%`.
         */
        setHeight(
          /**
           * New value for property `height`
           */
          sHeight: sap.ui.core.CSSSize
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Sets the {@link sap.ui.core.LayoutData} defining the layout constraints for this control when it is used
         * inside a layout.
         */
        // @ts-ignore
        setLayoutData(
          /**
           * which should be set
           */
          oLayoutData: sap.ui.core.LayoutData
        ): sap.ui.core.Element;
        /**
         * Sets the aggregated {@link #getLocale locale}.
         */
        setLocale(
          /**
           * The locale to set
           */
          oLocale: sap.gantt.config.Locale
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * @SINCE 1.68
         *
         * Sets a new value for property {@link #getNowLineInUTC nowLineInUTC}.
         *
         * Flag whether to show the `nowLine` in UTC or in local time.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setNowLineInUTC(
          /**
           * New value for property `nowLineInUTC`
           */
          bNowLineInUTC: boolean
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Sets a new value for property {@link #getSelectionPanelSize selectionPanelSize}.
         *
         * The width of selection panel.
         *
         * In `sap.gantt.simple.GanttChartWithTable`, the selectionPanelSize is the Table/TreeTable width in the
         * embedded Splitter.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `30%`.
         */
        setSelectionPanelSize(
          /**
           * New value for property `selectionPanelSize`
           */
          sSelectionPanelSize: sap.ui.core.CSSSize
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Sets a new value for property {@link #getShapeSelectionMode shapeSelectionMode}.
         *
         * Shape selection mode of the Gantt Chart. This property controls whether single or multiple shapes can
         * be selected. When the selection mode is changed, the current selection is removed.
         *
         * The shapeSelectionMode only works if `selectable` property on the defined Shape is set to true.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `MultiWithKeyboard`.
         */
        setShapeSelectionMode(
          /**
           * New value for property `shapeSelectionMode`
           */
          sShapeSelectionMode: sap.gantt.SelectionMode
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Sets a new value for property {@link #getShapeSelectionSettings shapeSelectionSettings}.
         *
         * A JSON object containing the shapeSelectionSettings which will be used to configure shape selection styles.
         * If nothing is specified, then the default selection styles (2px dashed red border) is set.
         *
         * Below you can find a brief example
         * ```javascript
         *
         * {
         *    color: "#808080",
         *    strokeWidth: 2,
         *    strokeDasharray: "5,1"
         * }
         * ```
         *
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setShapeSelectionSettings(
          /**
           * New value for property `shapeSelectionSettings`
           */
          oShapeSelectionSettings: object
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Sets a new value for property {@link #getShowShapeTimeOnDrag showShapeTimeOnDrag}.
         *
         * Flag to show or hide the start time and end time of a shape when you drag it along the time line
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setShowShapeTimeOnDrag(
          /**
           * New value for property `showShapeTimeOnDrag`
           */
          bShowShapeTimeOnDrag: boolean
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Sets the aggregated {@link #getSvgDefs svgDefs}.
         */
        setSvgDefs(
          /**
           * The svgDefs to set
           */
          oSvgDefs: sap.gantt.def.SvgDefs
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Sets the aggregated {@link #getTable table}.
         */
        setTable(
          /**
           * The table to set
           */
          oTable: sap.ui.table.Table
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Sets a new value for property {@link #getWidth width}.
         *
         * Width of the control.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `100%`.
         */
        setWidth(
          /**
           * New value for property `width`
           */
          sWidth: sap.ui.core.CSSSize
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Unbinds aggregation {@link #getAdhocLines adhocLines} from model data.
         */
        unbindAdhocLines(): sap.gantt.simple.GanttChartWithTable;
        /**
         * Unbinds aggregation {@link #getAxisTimeStrategy axisTimeStrategy} from model data.
         */
        unbindAxisTimeStrategy(): sap.gantt.simple.GanttChartWithTable;
        /**
         * Unbinds aggregation {@link #getCalendarDef calendarDef} from model data.
         */
        unbindCalendarDef(): sap.gantt.simple.GanttChartWithTable;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:dragStart dragStart} event of this `sap.gantt.simple.GanttChartWithTable`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.gantt.simple.GanttChartWithTable` itself.
         *
         * Event fired when a drag-and-drop begins
         */
        attachDragStart(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.gantt.simple.GanttChartWithTable`
           * itself
           */
          oListener?: object
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:shapeConnect shapeConnect} event of this `sap.gantt.simple.GanttChartWithTable`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.gantt.simple.GanttChartWithTable` itself.
         *
         * Event fired when one shape dragged and connected to another shape.
         */
        attachShapeConnect(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.gantt.simple.GanttChartWithTable`
           * itself
           */
          oListener?: object
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:shapeContextMenu shapeContextMenu} event of
         * this `sap.gantt.simple.GanttChartWithTable`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.gantt.simple.GanttChartWithTable` itself.
         *
         * Event fired when you right-click the shape.
         */
        attachShapeContextMenu(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.gantt.simple.GanttChartWithTable`
           * itself
           */
          oListener?: object
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:shapeDoubleClick shapeDoubleClick} event of
         * this `sap.gantt.simple.GanttChartWithTable`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.gantt.simple.GanttChartWithTable` itself.
         *
         * This event is fired when a shape is double-clicked or double-tapped.
         */
        attachShapeDoubleClick(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.gantt.simple.GanttChartWithTable`
           * itself
           */
          oListener?: object
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:shapeDrop shapeDrop} event of this `sap.gantt.simple.GanttChartWithTable`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.gantt.simple.GanttChartWithTable` itself.
         *
         * Event fired when a drag-and-drop occurs on one or more selected shapes.
         */
        attachShapeDrop(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.gantt.simple.GanttChartWithTable`
           * itself
           */
          oListener?: object
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:shapeMouseEnter shapeMouseEnter} event of this
         * `sap.gantt.simple.GanttChartWithTable`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.gantt.simple.GanttChartWithTable` itself.
         *
         * Event fired when a shape is hovered over.
         */
        attachShapeMouseEnter(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.gantt.simple.GanttChartWithTable`
           * itself
           */
          oListener?: object
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:shapeMouseLeave shapeMouseLeave} event of this
         * `sap.gantt.simple.GanttChartWithTable`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.gantt.simple.GanttChartWithTable` itself.
         *
         * Fired when the mouse pointer leaves the shape.
         */
        attachShapeMouseLeave(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.gantt.simple.GanttChartWithTable`
           * itself
           */
          oListener?: object
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:shapePress shapePress} event of this `sap.gantt.simple.GanttChartWithTable`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.gantt.simple.GanttChartWithTable` itself.
         *
         * This event is fired when a shape is clicked or tapped.
         */
        attachShapePress(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.gantt.simple.GanttChartWithTable`
           * itself
           */
          oListener?: object
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:shapeResize shapeResize} event of this `sap.gantt.simple.GanttChartWithTable`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.gantt.simple.GanttChartWithTable` itself.
         *
         * Fired when a shape is resized.
         */
        attachShapeResize(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.gantt.simple.GanttChartWithTable`
           * itself
           */
          oListener?: object
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:shapeSelectionChange shapeSelectionChange} event
         * of this `sap.gantt.simple.GanttChartWithTable`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.gantt.simple.GanttChartWithTable` itself.
         *
         * Fired when the shape selection of the gantt chart has been changed.
         */
        attachShapeSelectionChange(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.gantt.simple.GanttChartWithTable`
           * itself
           */
          oListener?: object
        ): sap.gantt.simple.GanttChartWithTable;
        /**
         * @SINCE 1.68
         *
         * Attaches event handler `fnFunction` to the {@link #event:visibleHorizonUpdate visibleHorizonUpdate} event
         * of this `sap.gantt.simple.GanttChartWithTable`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.gantt.simple.GanttChartWithTable` itself.
         *
         * This event is fired when the visible horizon is changed.
         */
        attachVisibleHorizonUpdate(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.gantt.simple.GanttChartWithTable`
           * itself
           */
          oListener?: object
        ): sap.gantt.simple.GanttChartWithTable;
      }
      /**
       * @SINCE 1.66
       *
       * The `GanttPrinting` control enables you to export your Gantt chart as a PDF document.
       * Please note that the quality of the exported image in PDF is currently limited to a pixel density of
       * 96 PPI and the area of the chart that can be exported is limited to a canvas area of 16,384 x 16,384
       * pixels (268,435,456 square pixels).
       */
      class GanttPrinting extends sap.ui.core.Element {
        /**
         * Constructor for a new GanttPrinting control.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: GanttPrintingOpts
        );

        /**
         * Closes the print dialog.
         */
        close(): void;
        /**
         * Exports the Gantt chart as PDF.
         */
        export(): void;
        /**
         * Creates a new subclass of class sap.gantt.simple.GanttPrinting with name `sClassName` and enriches it
         * with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * ID of the element which is the current target of the association {@link #getGanttChart ganttChart}, or
         * `null`.
         */
        getGanttChart(): sap.ui.core.ID;
        /**
         * Returns a metadata object for class sap.gantt.simple.GanttPrinting.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Opens the print dialog.
         */
        open(): void;
        /**
         * Sets the Gantt chart to be exported as PDF.
         */
        setGanttChart(
          /**
           * Gantt chart to export
           */
          oGanttChart: undefined
        ): sap.gantt.simple.GanttPrinting;
      }
      /**
       * Enables users to define a shape aggregation name of their own.
       */
      class GanttRowSettings extends sap.ui.table.RowSettings {
        /**
         * Creates and initializes a new GanttRowSettings class
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: GanttRowSettingsOpts
        );

        /**
         * Adds some calendars to the aggregation {@link #getCalendars calendars}.
         */
        addCalendars(
          /**
           * The calendars to add; if empty, nothing is inserted
           */
          oCalendars: sap.gantt.simple.BaseCalendar
        ): sap.gantt.simple.GanttRowSettings;
        /**
         * Adds some relationship to the aggregation {@link #getRelationships relationships}.
         */
        addRelationship(
          /**
           * The relationship to add; if empty, nothing is inserted
           */
          oRelationship: sap.gantt.simple.Relationship
        ): sap.gantt.simple.GanttRowSettings;
        /**
         * Adds some shape1 to the aggregation {@link #getShapes1 shapes1}.
         */
        addShape1(
          /**
           * The shape1 to add; if empty, nothing is inserted
           */
          oShape1: sap.gantt.simple.BaseShape
        ): sap.gantt.simple.GanttRowSettings;
        /**
         * Adds some shape2 to the aggregation {@link #getShapes2 shapes2}.
         */
        addShape2(
          /**
           * The shape2 to add; if empty, nothing is inserted
           */
          oShape2: sap.gantt.simple.BaseShape
        ): sap.gantt.simple.GanttRowSettings;
        /**
         * Adds some shape3 to the aggregation {@link #getShapes3 shapes3}.
         */
        addShape3(
          /**
           * The shape3 to add; if empty, nothing is inserted
           */
          oShape3: sap.gantt.simple.BaseShape
        ): sap.gantt.simple.GanttRowSettings;
        /**
         * Adds some shape4 to the aggregation {@link #getShapes4 shapes4}.
         */
        addShape4(
          /**
           * The shape4 to add; if empty, nothing is inserted
           */
          oShape4: sap.gantt.simple.BaseShape
        ): sap.gantt.simple.GanttRowSettings;
        /**
         * Adds some shape5 to the aggregation {@link #getShapes5 shapes5}.
         */
        addShape5(
          /**
           * The shape5 to add; if empty, nothing is inserted
           */
          oShape5: sap.gantt.simple.BaseShape
        ): sap.gantt.simple.GanttRowSettings;
        /**
         * Destroys all the calendars in the aggregation {@link #getCalendars calendars}.
         */
        destroyCalendars(): sap.gantt.simple.GanttRowSettings;
        /**
         * Destroys all the relationships in the aggregation {@link #getRelationships relationships}.
         */
        destroyRelationships(): sap.gantt.simple.GanttRowSettings;
        /**
         * Destroys all the shapes1 in the aggregation {@link #getShapes1 shapes1}.
         */
        destroyShapes1(): sap.gantt.simple.GanttRowSettings;
        /**
         * Destroys all the shapes2 in the aggregation {@link #getShapes2 shapes2}.
         */
        destroyShapes2(): sap.gantt.simple.GanttRowSettings;
        /**
         * Destroys all the shapes3 in the aggregation {@link #getShapes3 shapes3}.
         */
        destroyShapes3(): sap.gantt.simple.GanttRowSettings;
        /**
         * Destroys all the shapes4 in the aggregation {@link #getShapes4 shapes4}.
         */
        destroyShapes4(): sap.gantt.simple.GanttRowSettings;
        /**
         * Destroys all the shapes5 in the aggregation {@link #getShapes5 shapes5}.
         */
        destroyShapes5(): sap.gantt.simple.GanttRowSettings;
        /**
         * Creates a new subclass of class sap.gantt.simple.GanttRowSettings with name `sClassName` and enriches
         * it with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.table.RowSettings.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets content of aggregation {@link #getCalendars calendars}.
         *
         * The controls for the calendars
         */
        getCalendars(): sap.gantt.simple.BaseCalendar[];
        /**
         * Returns a metadata object for class sap.gantt.simple.GanttRowSettings.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets content of aggregation {@link #getRelationships relationships}.
         *
         * The controls for the relationships
         */
        getRelationships(): sap.gantt.simple.Relationship[];
        /**
         * Gets current value of property {@link #getRowId rowId}.
         */
        getRowId(): string;
        /**
         * Gets content of aggregation {@link #getShapes1 shapes1}.
         *
         * The controls for the shapes.
         */
        getShapes1(): sap.gantt.simple.BaseShape[];
        /**
         * Gets content of aggregation {@link #getShapes2 shapes2}.
         *
         * The controls for the shapes.
         */
        getShapes2(): sap.gantt.simple.BaseShape[];
        /**
         * Gets content of aggregation {@link #getShapes3 shapes3}.
         *
         * The controls for the shapes.
         */
        getShapes3(): sap.gantt.simple.BaseShape[];
        /**
         * Gets content of aggregation {@link #getShapes4 shapes4}.
         *
         * The controls for the shapes.
         */
        getShapes4(): sap.gantt.simple.BaseShape[];
        /**
         * Gets content of aggregation {@link #getShapes5 shapes5}.
         *
         * The controls for the shapes.
         */
        getShapes5(): sap.gantt.simple.BaseShape[];
        /**
         * Checks for the provided `sap.gantt.simple.BaseCalendar` in the aggregation {@link #getCalendars calendars}.
         * and returns its index if found or -1 otherwise.
         */
        indexOfCalendars(
          /**
           * The calendars whose index is looked for
           */
          oCalendars: sap.gantt.simple.BaseCalendar
        ): number;
        /**
         * Checks for the provided `sap.gantt.simple.Relationship` in the aggregation {@link #getRelationships relationships}.
         * and returns its index if found or -1 otherwise.
         */
        indexOfRelationship(
          /**
           * The relationship whose index is looked for
           */
          oRelationship: sap.gantt.simple.Relationship
        ): number;
        /**
         * Checks for the provided `sap.gantt.simple.BaseShape` in the aggregation {@link #getShapes1 shapes1}.
         * and returns its index if found or -1 otherwise.
         */
        indexOfShape1(
          /**
           * The shape1 whose index is looked for
           */
          oShape1: sap.gantt.simple.BaseShape
        ): number;
        /**
         * Checks for the provided `sap.gantt.simple.BaseShape` in the aggregation {@link #getShapes2 shapes2}.
         * and returns its index if found or -1 otherwise.
         */
        indexOfShape2(
          /**
           * The shape2 whose index is looked for
           */
          oShape2: sap.gantt.simple.BaseShape
        ): number;
        /**
         * Checks for the provided `sap.gantt.simple.BaseShape` in the aggregation {@link #getShapes3 shapes3}.
         * and returns its index if found or -1 otherwise.
         */
        indexOfShape3(
          /**
           * The shape3 whose index is looked for
           */
          oShape3: sap.gantt.simple.BaseShape
        ): number;
        /**
         * Checks for the provided `sap.gantt.simple.BaseShape` in the aggregation {@link #getShapes4 shapes4}.
         * and returns its index if found or -1 otherwise.
         */
        indexOfShape4(
          /**
           * The shape4 whose index is looked for
           */
          oShape4: sap.gantt.simple.BaseShape
        ): number;
        /**
         * Checks for the provided `sap.gantt.simple.BaseShape` in the aggregation {@link #getShapes5 shapes5}.
         * and returns its index if found or -1 otherwise.
         */
        indexOfShape5(
          /**
           * The shape5 whose index is looked for
           */
          oShape5: sap.gantt.simple.BaseShape
        ): number;
        /**
         * Inserts a calendars into the aggregation {@link #getCalendars calendars}.
         */
        insertCalendars(
          /**
           * The calendars to insert; if empty, nothing is inserted
           */
          oCalendars: sap.gantt.simple.BaseCalendar,
          /**
           * The `0`-based index the calendars should be inserted at; for a negative value of `iIndex`, the calendars
           * is inserted at position 0; for a value greater than the current size of the aggregation, the calendars
           * is inserted at the last position
           */
          iIndex: number
        ): sap.gantt.simple.GanttRowSettings;
        /**
         * Inserts a relationship into the aggregation {@link #getRelationships relationships}.
         */
        insertRelationship(
          /**
           * The relationship to insert; if empty, nothing is inserted
           */
          oRelationship: sap.gantt.simple.Relationship,
          /**
           * The `0`-based index the relationship should be inserted at; for a negative value of `iIndex`, the relationship
           * is inserted at position 0; for a value greater than the current size of the aggregation, the relationship
           * is inserted at the last position
           */
          iIndex: number
        ): sap.gantt.simple.GanttRowSettings;
        /**
         * Inserts a shape1 into the aggregation {@link #getShapes1 shapes1}.
         */
        insertShape1(
          /**
           * The shape1 to insert; if empty, nothing is inserted
           */
          oShape1: sap.gantt.simple.BaseShape,
          /**
           * The `0`-based index the shape1 should be inserted at; for a negative value of `iIndex`, the shape1 is
           * inserted at position 0; for a value greater than the current size of the aggregation, the shape1 is inserted
           * at the last position
           */
          iIndex: number
        ): sap.gantt.simple.GanttRowSettings;
        /**
         * Inserts a shape2 into the aggregation {@link #getShapes2 shapes2}.
         */
        insertShape2(
          /**
           * The shape2 to insert; if empty, nothing is inserted
           */
          oShape2: sap.gantt.simple.BaseShape,
          /**
           * The `0`-based index the shape2 should be inserted at; for a negative value of `iIndex`, the shape2 is
           * inserted at position 0; for a value greater than the current size of the aggregation, the shape2 is inserted
           * at the last position
           */
          iIndex: number
        ): sap.gantt.simple.GanttRowSettings;
        /**
         * Inserts a shape3 into the aggregation {@link #getShapes3 shapes3}.
         */
        insertShape3(
          /**
           * The shape3 to insert; if empty, nothing is inserted
           */
          oShape3: sap.gantt.simple.BaseShape,
          /**
           * The `0`-based index the shape3 should be inserted at; for a negative value of `iIndex`, the shape3 is
           * inserted at position 0; for a value greater than the current size of the aggregation, the shape3 is inserted
           * at the last position
           */
          iIndex: number
        ): sap.gantt.simple.GanttRowSettings;
        /**
         * Inserts a shape4 into the aggregation {@link #getShapes4 shapes4}.
         */
        insertShape4(
          /**
           * The shape4 to insert; if empty, nothing is inserted
           */
          oShape4: sap.gantt.simple.BaseShape,
          /**
           * The `0`-based index the shape4 should be inserted at; for a negative value of `iIndex`, the shape4 is
           * inserted at position 0; for a value greater than the current size of the aggregation, the shape4 is inserted
           * at the last position
           */
          iIndex: number
        ): sap.gantt.simple.GanttRowSettings;
        /**
         * Inserts a shape5 into the aggregation {@link #getShapes5 shapes5}.
         */
        insertShape5(
          /**
           * The shape5 to insert; if empty, nothing is inserted
           */
          oShape5: sap.gantt.simple.BaseShape,
          /**
           * The `0`-based index the shape5 should be inserted at; for a negative value of `iIndex`, the shape5 is
           * inserted at position 0; for a value greater than the current size of the aggregation, the shape5 is inserted
           * at the last position
           */
          iIndex: number
        ): sap.gantt.simple.GanttRowSettings;
        /**
         * Removes all the controls from the aggregation {@link #getCalendars calendars}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllCalendars(): sap.gantt.simple.BaseCalendar[];
        /**
         * Removes all the controls from the aggregation {@link #getRelationships relationships}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllRelationships(): sap.gantt.simple.Relationship[];
        /**
         * Removes all the controls from the aggregation {@link #getShapes1 shapes1}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllShapes1(): sap.gantt.simple.BaseShape[];
        /**
         * Removes all the controls from the aggregation {@link #getShapes2 shapes2}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllShapes2(): sap.gantt.simple.BaseShape[];
        /**
         * Removes all the controls from the aggregation {@link #getShapes3 shapes3}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllShapes3(): sap.gantt.simple.BaseShape[];
        /**
         * Removes all the controls from the aggregation {@link #getShapes4 shapes4}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllShapes4(): sap.gantt.simple.BaseShape[];
        /**
         * Removes all the controls from the aggregation {@link #getShapes5 shapes5}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllShapes5(): sap.gantt.simple.BaseShape[];
        /**
         * Removes a calendars from the aggregation {@link #getCalendars calendars}.
         */
        removeCalendars(
          /**
           * The calendars to remove or its index or id
           */
          vCalendars: number | string | sap.gantt.simple.BaseCalendar
        ): sap.gantt.simple.BaseCalendar;
        /**
         * Removes a relationship from the aggregation {@link #getRelationships relationships}.
         */
        removeRelationship(
          /**
           * The relationship to remove or its index or id
           */
          vRelationship: number | string | sap.gantt.simple.Relationship
        ): sap.gantt.simple.Relationship;
        /**
         * Removes a shape1 from the aggregation {@link #getShapes1 shapes1}.
         */
        removeShape1(
          /**
           * The shape1 to remove or its index or id
           */
          vShape1: number | string | sap.gantt.simple.BaseShape
        ): sap.gantt.simple.BaseShape;
        /**
         * Removes a shape2 from the aggregation {@link #getShapes2 shapes2}.
         */
        removeShape2(
          /**
           * The shape2 to remove or its index or id
           */
          vShape2: number | string | sap.gantt.simple.BaseShape
        ): sap.gantt.simple.BaseShape;
        /**
         * Removes a shape3 from the aggregation {@link #getShapes3 shapes3}.
         */
        removeShape3(
          /**
           * The shape3 to remove or its index or id
           */
          vShape3: number | string | sap.gantt.simple.BaseShape
        ): sap.gantt.simple.BaseShape;
        /**
         * Removes a shape4 from the aggregation {@link #getShapes4 shapes4}.
         */
        removeShape4(
          /**
           * The shape4 to remove or its index or id
           */
          vShape4: number | string | sap.gantt.simple.BaseShape
        ): sap.gantt.simple.BaseShape;
        /**
         * Removes a shape5 from the aggregation {@link #getShapes5 shapes5}.
         */
        removeShape5(
          /**
           * The shape5 to remove or its index or id
           */
          vShape5: number | string | sap.gantt.simple.BaseShape
        ): sap.gantt.simple.BaseShape;
        /**
         * Sets a new value for property {@link #getRowId rowId}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setRowId(
          /**
           * New value for property `rowId`
           */
          sRowId: string
        ): sap.gantt.simple.GanttRowSettings;
      }
      /**
       * Enable users to define properties for shapes in one vertical line(column), each LegendColumnConfig affects
       * one column.
       */
      class LegendColumnConfig extends sap.ui.core.Element {
        /**
         * Constructor for LegendColumnConfig.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: LegendColumnConfigOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.simple.LegendColumnConfig with name `sClassName` and enriches
         * it with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getFill fill}.
         *
         * Once this property is set, shapes in one vertical line have the same fill color or fill pattern.
         */
        getFill(): string;
        /**
         * Gets current value of property {@link #getFillFactory fillFactory}.
         *
         * Factory function is used to determine the fill property for different shape classes defined in yDimension
         * config. Shape name of the shape class is passed as a parameter to the function. The return value should
         * be a color code.
         */
        getFillFactory(): Function;
        /**
         * Returns a metadata object for class sap.gantt.simple.LegendColumnConfig.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getText text}.
         */
        getText(): string;
        /**
         * Sets a new value for property {@link #getFill fill}.
         *
         * Once this property is set, shapes in one vertical line have the same fill color or fill pattern.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setFill(
          /**
           * New value for property `fill`
           */
          sFill: string
        ): sap.gantt.simple.LegendColumnConfig;
        /**
         * Sets a new value for property {@link #getFillFactory fillFactory}.
         *
         * Factory function is used to determine the fill property for different shape classes defined in yDimension
         * config. Shape name of the shape class is passed as a parameter to the function. The return value should
         * be a color code.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setFillFactory(
          /**
           * New value for property `fillFactory`
           */
          fnFillFactory: Function
        ): sap.gantt.simple.LegendColumnConfig;
        /**
         * Sets a new value for property {@link #getText text}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setText(
          /**
           * New value for property `text`
           */
          sText: string
        ): sap.gantt.simple.LegendColumnConfig;
      }
      /**
       *  The LegendContainer control uses the NavContainer control to handle hierarchical navigation between
       * legend sections. The LegendContainer control contains an initial navigation page. Both the initial navigation
       * page and legend sections are Page controls, We put the List Legend control inside the Page control internally.
       *   If you only add one legend, the initial navigation page won't display. Whenever you open legend
       * container, the legend container will restore the page last time you quit with.
       */
      class LegendContainer extends sap.ui.core.Control {
        /**
         * Creates and initializes a new legend container.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID of the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: LegendContainerOpts
        );

        /**
         * Adds some legend to the aggregation {@link #getLegends legends}.
         */
        addLegend(
          /**
           * The legend to add; if empty, nothing is inserted
           */
          oLegend: sap.ui.core.Control
        ): sap.gantt.simple.LegendContainer;
        /**
         * Destroys all the legends in the aggregation {@link #getLegends legends}.
         */
        destroyLegends(): sap.gantt.simple.LegendContainer;
        /**
         * Creates a new subclass of class sap.gantt.simple.LegendContainer with name `sClassName` and enriches
         * it with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getHeight height}.
         *
         * Height of the legend navigation. When the height specified is smaller than a section content, a vertical
         * scroll bar appears.
         *
         * Default value is `200px`.
         */
        getHeight(): sap.ui.core.CSSSize;
        /**
         * Gets content of aggregation {@link #getLegends legends}.
         *
         * Legends inside the container, they could be instances of List Legend or Dimension Legend.
         */
        getLegends(): sap.ui.core.Control[];
        /**
         * Returns a metadata object for class sap.gantt.simple.LegendContainer.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getWidth width}.
         *
         * Width of the legend navigation. When the width specified is smaller than a section content, a horizontal
         * scroll bar appears.width of the legend navigation. When the width specified is smaller than a section
         * content, a horizontal scroll bar appears.
         *
         * Default value is `200px`.
         */
        getWidth(): sap.ui.core.CSSSize;
        /**
         * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getLegends legends}. and returns
         * its index if found or -1 otherwise.
         */
        indexOfLegend(
          /**
           * The legend whose index is looked for
           */
          oLegend: sap.ui.core.Control
        ): number;
        /**
         * Inserts a legend into the aggregation {@link #getLegends legends}.
         */
        insertLegend(
          /**
           * The legend to insert; if empty, nothing is inserted
           */
          oLegend: sap.ui.core.Control,
          /**
           * The `0`-based index the legend should be inserted at; for a negative value of `iIndex`, the legend is
           * inserted at position 0; for a value greater than the current size of the aggregation, the legend is inserted
           * at the last position
           */
          iIndex: number
        ): sap.gantt.simple.LegendContainer;
        /**
         * Removes all the controls from the aggregation {@link #getLegends legends}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllLegends(): sap.ui.core.Control[];
        /**
         * Removes a legend from the aggregation {@link #getLegends legends}.
         */
        removeLegend(
          /**
           * The legend to remove or its index or id
           */
          vLegend: number | string | sap.ui.core.Control
        ): sap.ui.core.Control;
        /**
         * Sets a new value for property {@link #getHeight height}.
         *
         * Height of the legend navigation. When the height specified is smaller than a section content, a vertical
         * scroll bar appears.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `200px`.
         */
        setHeight(
          /**
           * New value for property `height`
           */
          sHeight: sap.ui.core.CSSSize
        ): sap.gantt.simple.LegendContainer;
        /**
         * Sets a new value for property {@link #getWidth width}.
         *
         * Width of the legend navigation. When the width specified is smaller than a section content, a horizontal
         * scroll bar appears.width of the legend navigation. When the width specified is smaller than a section
         * content, a horizontal scroll bar appears.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `200px`.
         */
        setWidth(
          /**
           * New value for property `width`
           */
          sWidth: sap.ui.core.CSSSize
        ): sap.gantt.simple.LegendContainer;
      }
      /**
       * Shapes in one horizontal line(row) share the same shape class and shape name. Each LegendRowConfig affects
       * one row.
       */
      class LegendRowConfig extends sap.ui.core.Element {
        /**
         * Constructor for LegendRowConfig.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: LegendRowConfigOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.simple.LegendRowConfig with name `sClassName` and enriches
         * it with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.gantt.simple.LegendRowConfig.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getShapeClass shapeClass}.
         *
         * Specifies the shape class name of dimension legend row It's a full shape module name
         */
        getShapeClass(): string;
        /**
         * Gets current value of property {@link #getShapeName shapeName}.
         *
         * Specifies the name of the dimension legend row
         */
        getShapeName(): string;
        /**
         * Gets current value of property {@link #getStroke stroke}.
         *
         * Stroke of the legend row
         */
        getStroke(): string;
        /**
         * Gets current value of property {@link #getStrokeWidth strokeWidth}.
         *
         * The strokeWidth property is a presentation property defining the width of the stroke to be applied to
         * the shape.
         */
        getStrokeWidth(): number;
        /**
         * Gets current value of property {@link #getText text}.
         *
         * The text content
         */
        getText(): string;
        /**
         * Sets a new value for property {@link #getShapeClass shapeClass}.
         *
         * Specifies the shape class name of dimension legend row It's a full shape module name
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setShapeClass(
          /**
           * New value for property `shapeClass`
           */
          sShapeClass: string
        ): sap.gantt.simple.LegendRowConfig;
        /**
         * Sets a new value for property {@link #getShapeName shapeName}.
         *
         * Specifies the name of the dimension legend row
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setShapeName(
          /**
           * New value for property `shapeName`
           */
          sShapeName: string
        ): sap.gantt.simple.LegendRowConfig;
        /**
         * Sets a new value for property {@link #getStroke stroke}.
         *
         * Stroke of the legend row
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setStroke(
          /**
           * New value for property `stroke`
           */
          sStroke: string
        ): sap.gantt.simple.LegendRowConfig;
        /**
         * Sets a new value for property {@link #getStrokeWidth strokeWidth}.
         *
         * The strokeWidth property is a presentation property defining the width of the stroke to be applied to
         * the shape.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setStrokeWidth(
          /**
           * New value for property `strokeWidth`
           */
          fStrokeWidth: number
        ): sap.gantt.simple.LegendRowConfig;
        /**
         * Sets a new value for property {@link #getText text}.
         *
         * The text content
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setText(
          /**
           * New value for property `text`
           */
          sText: string
        ): sap.gantt.simple.LegendRowConfig;
      }
      /**
       * The Legend is a popup window in the GanttChart control wich can be used to display shape/icon-text pairs.
       */
      class ListLegend extends sap.ui.core.Control {
        /**
         * Constructor for a new List Legend.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: ListLegendOpts
        );

        /**
         * Adds some item to the aggregation {@link #getItems items}.
         */
        addItem(
          /**
           * The item to add; if empty, nothing is inserted
           */
          oItem: sap.gantt.simple.ListLegendItem
        ): sap.gantt.simple.ListLegend;
        /**
         * Destroys all the items in the aggregation {@link #getItems items}.
         */
        destroyItems(): sap.gantt.simple.ListLegend;
        /**
         * Creates a new subclass of class sap.gantt.simple.ListLegend with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets content of aggregation {@link #getItems items}.
         *
         * ListLegendItem object aggregation
         */
        getItems(): sap.gantt.simple.ListLegendItem[];
        /**
         * Returns a metadata object for class sap.gantt.simple.ListLegend.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getTitle title}.
         *
         * Title of Legend. The title is displayed on both the legend page and the legend navigation list. Null
         * if not specified
         */
        getTitle(): string;
        /**
         * Checks for the provided `sap.gantt.simple.ListLegendItem` in the aggregation {@link #getItems items}.
         * and returns its index if found or -1 otherwise.
         */
        indexOfItem(
          /**
           * The item whose index is looked for
           */
          oItem: sap.gantt.simple.ListLegendItem
        ): number;
        /**
         * Inserts a item into the aggregation {@link #getItems items}.
         */
        insertItem(
          /**
           * The item to insert; if empty, nothing is inserted
           */
          oItem: sap.gantt.simple.ListLegendItem,
          /**
           * The `0`-based index the item should be inserted at; for a negative value of `iIndex`, the item is inserted
           * at position 0; for a value greater than the current size of the aggregation, the item is inserted at
           * the last position
           */
          iIndex: number
        ): sap.gantt.simple.ListLegend;
        /**
         * Removes all the controls from the aggregation {@link #getItems items}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllItems(): sap.gantt.simple.ListLegendItem[];
        /**
         * Removes a item from the aggregation {@link #getItems items}.
         */
        removeItem(
          /**
           * The item to remove or its index or id
           */
          vItem: number | string | sap.gantt.simple.ListLegendItem
        ): sap.gantt.simple.ListLegendItem;
        /**
         * Sets a new value for property {@link #getTitle title}.
         *
         * Title of Legend. The title is displayed on both the legend page and the legend navigation list. Null
         * if not specified
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setTitle(
          /**
           * New value for property `title`
           */
          sTitle: string
        ): sap.gantt.simple.ListLegend;
      }
      /**
       * Aggregation element for the List Legend. A List Legend Item consists of a marker and an associated text.
       * The marker can be any shapes you in shape aggregation. If you need to interact with the legend item,
       * set the interactive to true then the item will display a check box in front of the shape and text.
       */
      class ListLegendItem extends sap.ui.core.Element {
        /**
         * Constructor for a new ListLegendItem.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * id for the new control, generated automatically if no id is given
           */
          sId?: string,
          /**
           * initial settings for the new control
           */
          mSettings?: ListLegendItemOpts
        );

        /**
         * Attaches event handler `fnFunction` to the {@link #event:interactiveChange interactiveChange} event of
         * this `sap.gantt.simple.ListLegendItem`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.gantt.simple.ListLegendItem` itself.
         *
         * The event is raised when there is a click action on the checkbox before legend item.
         */
        attachInteractiveChange(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.gantt.simple.ListLegendItem` itself
           */
          oListener?: object
        ): sap.gantt.simple.ListLegendItem;
        /**
         * Destroys the shape in the aggregation {@link #getShape shape}.
         */
        destroyShape(): sap.gantt.simple.ListLegendItem;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:interactiveChange interactiveChange} event
         * of this `sap.gantt.simple.ListLegendItem`.
         *
         * The passed function and listener object must match the ones used for event registration.
         */
        detachInteractiveChange(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): sap.gantt.simple.ListLegendItem;
        /**
         * Creates a new subclass of class sap.gantt.simple.ListLegendItem with name `sClassName` and enriches it
         * with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Fires event {@link #event:interactiveChange interactiveChange} to attached listeners.
         */
        fireInteractiveChange(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: {
            /**
             * The shape name of legend item.
             */
            legendName?: string;
            /**
             * The value indicate that legend is checked or unchecked.
             */
            value?: boolean;
          }
        ): sap.gantt.simple.ListLegendItem;
        /**
         * Gets current value of property {@link #getInteractive interactive}.
         *
         * Indicates whether the check box is visible or not.
         *
         * Default value is `false`.
         */
        getInteractive(): boolean;
        /**
         * Gets current value of property {@link #getLegendName legendName}.
         */
        getLegendName(): string;
        /**
         * Returns a metadata object for class sap.gantt.simple.ListLegendItem.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getSelected selected}.
         *
         * Indicates whether the check box is selected or not.
         *
         * Default value is `true`.
         */
        getSelected(): boolean;
        /**
         * Gets content of aggregation {@link #getShape shape}.
         *
         * Define a shape class for the List Legend Item. The shape will be normalized in the rendering phase.
         */
        getShape(): sap.gantt.simple.BaseShape;
        /**
         * Sets a new value for property {@link #getInteractive interactive}.
         *
         * Indicates whether the check box is visible or not.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setInteractive(
          /**
           * New value for property `interactive`
           */
          bInteractive: boolean
        ): sap.gantt.simple.ListLegendItem;
        /**
         * Sets a new value for property {@link #getLegendName legendName}.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setLegendName(
          /**
           * New value for property `legendName`
           */
          sLegendName: string
        ): sap.gantt.simple.ListLegendItem;
        /**
         * Sets a new value for property {@link #getSelected selected}.
         *
         * Indicates whether the check box is selected or not.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setSelected(
          /**
           * New value for property `selected`
           */
          bSelected: boolean
        ): sap.gantt.simple.ListLegendItem;
        /**
         * Sets the aggregated {@link #getShape shape}.
         */
        setShape(
          /**
           * The shape to set
           */
          oShape: sap.gantt.simple.BaseShape
        ): sap.gantt.simple.ListLegendItem;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:interactiveChange interactiveChange} event of
         * this `sap.gantt.simple.ListLegendItem`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.gantt.simple.ListLegendItem` itself.
         *
         * The event is raised when there is a click action on the checkbox before legend item.
         */
        attachInteractiveChange(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: Function,
          /**
           * Context object to call the event handler with. Defaults to this `sap.gantt.simple.ListLegendItem` itself
           */
          oListener?: object
        ): sap.gantt.simple.ListLegendItem;
      }
      /**
       * Enables users to visualize the relationship between visiable objects.
       */
      class Relationship extends sap.gantt.simple.BasePath {
        /**
         * Creates and initializes a Relationship class
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: RelationshipOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.simple.Relationship with name `sClassName` and enriches it
         * with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.simple.BasePath.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.gantt.simple.Relationship.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getPredecessor predecessor}.
         *
         * predecessor of the `Relationship`
         *
         * This property specify where the relationship starts, `Relationship` lookup the shape instance based on
         * the property value
         */
        getPredecessor(): string;
        /**
         * Gets current value of property {@link #getSelectedStroke selectedStroke}.
         *
         * Defines the stroke color when `Relationship` is selected
         *
         * Default value is `#FF0000`.
         */
        getSelectedStroke(): sap.gantt.ValueSVGPaintServer;
        /**
         * Gets current value of property {@link #getSelectedStrokeWidth selectedStrokeWidth}.
         *
         * Defines the stroke width when `Relationship` is selected
         *
         * Default value is `2`.
         */
        getSelectedStrokeWidth(): sap.gantt.SVGLength;
        /**
         * Gets current value of property {@link #getSuccessor successor}.
         *
         * successor of the `Relationship`
         *
         * This property specify where the relationship ends, `Relationship` lookup the shape instance by the property
         * value.
         */
        getSuccessor(): string;
        /**
         * Gets current value of property {@link #getType type}.
         *
         * Defines the `Relationship` type.
         */
        getType(): sap.gantt.simple.RelationshipType;
        /**
         * Sets a new value for property {@link #getPredecessor predecessor}.
         *
         * predecessor of the `Relationship`
         *
         * This property specify where the relationship starts, `Relationship` lookup the shape instance based on
         * the property value
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setPredecessor(
          /**
           * New value for property `predecessor`
           */
          sPredecessor: string
        ): sap.gantt.simple.Relationship;
        /**
         * Sets a new value for property {@link #getSelectedStroke selectedStroke}.
         *
         * Defines the stroke color when `Relationship` is selected
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `#FF0000`.
         */
        setSelectedStroke(
          /**
           * New value for property `selectedStroke`
           */
          sSelectedStroke: sap.gantt.ValueSVGPaintServer
        ): sap.gantt.simple.Relationship;
        /**
         * Sets a new value for property {@link #getSelectedStrokeWidth selectedStrokeWidth}.
         *
         * Defines the stroke width when `Relationship` is selected
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `2`.
         */
        setSelectedStrokeWidth(
          /**
           * New value for property `selectedStrokeWidth`
           */
          sSelectedStrokeWidth: sap.gantt.SVGLength
        ): sap.gantt.simple.Relationship;
        /**
         * Sets a new value for property {@link #getSuccessor successor}.
         *
         * successor of the `Relationship`
         *
         * This property specify where the relationship ends, `Relationship` lookup the shape instance by the property
         * value.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setSuccessor(
          /**
           * New value for property `successor`
           */
          sSuccessor: string
        ): sap.gantt.simple.Relationship;
        /**
         * Sets a new value for property {@link #getType type}.
         *
         * Defines the `Relationship` type.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setType(
          /**
           * New value for property `type`
           */
          sType: sap.gantt.simple.RelationshipType
        ): sap.gantt.simple.Relationship;
      }
      /**
       * The ShapeScheme class will be defined as an aggregation on `sap.gantt.simple.GanttChartWithTable` It's
       * used to determine the overall row height, the expandable shapes row height
       */
      class ShapeScheme extends sap.ui.core.Element {
        /**
         * Creates and initializes a new ShapeScheme class
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: ShapeSchemeOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.simple.ShapeScheme with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getKey key}.
         *
         * key of the shape scheme
         */
        getKey(): string;
        /**
         * Returns a metadata object for class sap.gantt.simple.ShapeScheme.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getPrimary primary}.
         *
         * Whether the scheme apply on the shapes on the main row
         *
         * Default value is `false`.
         */
        getPrimary(): boolean;
        /**
         * Gets current value of property {@link #getRowSpan rowSpan}.
         *
         * row span of the shape scheme.
         *
         * If the shape scheme is ***not*** a primary scheme, you need to define how many rows (rowSpan) the expanded
         * shape will take when rendering
         *
         * Default value is `1`.
         */
        getRowSpan(): number;
        /**
         * Sets a new value for property {@link #getKey key}.
         *
         * key of the shape scheme
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setKey(
          /**
           * New value for property `key`
           */
          sKey: string
        ): sap.gantt.simple.ShapeScheme;
        /**
         * Sets a new value for property {@link #getPrimary primary}.
         *
         * Whether the scheme apply on the shapes on the main row
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         */
        setPrimary(
          /**
           * New value for property `primary`
           */
          bPrimary: boolean
        ): sap.gantt.simple.ShapeScheme;
        /**
         * Sets a new value for property {@link #getRowSpan rowSpan}.
         *
         * row span of the shape scheme.
         *
         * If the shape scheme is ***not*** a primary scheme, you need to define how many rows (rowSpan) the expanded
         * shape will take when rendering
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `1`.
         */
        setRowSpan(
          /**
           * New value for property `rowSpan`
           */
          iRowSpan: number
        ): sap.gantt.simple.ShapeScheme;
      }
      /**
       * Utilization Bar Chart (UBC) is a complex shape, you can use it to visualize a resource the capacity
       * and actual consumption of a resource. There is a `line` in UBC to visualize the actual capacity
       * consumption, you can change the `line` color by property `stroke`
       */
      class UtilizationBarChart extends sap.gantt.simple.UtilizationChart {
        /**
         * Constructor for a new Utilization Bar
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID of the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: UtilizationBarChartOpts
        );

        /**
         * Adds some period to the aggregation {@link #getPeriods periods}.
         */
        addPeriod(
          /**
           * The period to add; if empty, nothing is inserted
           */
          oPeriod: sap.gantt.simple.UtilizationPeriod
        ): sap.gantt.simple.UtilizationBarChart;
        /**
         * Destroys all the periods in the aggregation {@link #getPeriods periods}.
         */
        destroyPeriods(): sap.gantt.simple.UtilizationBarChart;
        /**
         * Creates a new subclass of class sap.gantt.simple.UtilizationBarChart with name `sClassName` and enriches
         * it with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.simple.UtilizationChart.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getConsumptionColor consumptionColor}.
         *
         * The color fills in capacity consumption
         *
         * Default value is `lightgray`.
         */
        getConsumptionColor(): sap.gantt.ValueSVGPaintServer;
        /**
         * Returns a metadata object for class sap.gantt.simple.UtilizationBarChart.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets content of aggregation {@link #getPeriods periods}.
         *
         * Periods of UtilizationBarChart
         */
        getPeriods(): sap.gantt.simple.UtilizationPeriod[];
        /**
         * Checks for the provided `sap.gantt.simple.UtilizationPeriod` in the aggregation {@link #getPeriods periods}.
         * and returns its index if found or -1 otherwise.
         */
        indexOfPeriod(
          /**
           * The period whose index is looked for
           */
          oPeriod: sap.gantt.simple.UtilizationPeriod
        ): number;
        /**
         * Inserts a period into the aggregation {@link #getPeriods periods}.
         */
        insertPeriod(
          /**
           * The period to insert; if empty, nothing is inserted
           */
          oPeriod: sap.gantt.simple.UtilizationPeriod,
          /**
           * The `0`-based index the period should be inserted at; for a negative value of `iIndex`, the period is
           * inserted at position 0; for a value greater than the current size of the aggregation, the period is inserted
           * at the last position
           */
          iIndex: number
        ): sap.gantt.simple.UtilizationBarChart;
        /**
         * Removes all the controls from the aggregation {@link #getPeriods periods}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllPeriods(): sap.gantt.simple.UtilizationPeriod[];
        /**
         * Removes a period from the aggregation {@link #getPeriods periods}.
         */
        removePeriod(
          /**
           * The period to remove or its index or id
           */
          vPeriod: number | string | sap.gantt.simple.UtilizationPeriod
        ): sap.gantt.simple.UtilizationPeriod;
        /**
         * Render a shape element with RenderManager
         */
        // @ts-ignore
        renderElement(
          /**
           * Render Manager
           */
          oRm: object,
          /**
           * shape instance
           */
          oElement: object
        ): void;
        /**
         * Sets a new value for property {@link #getConsumptionColor consumptionColor}.
         *
         * The color fills in capacity consumption
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `lightgray`.
         */
        setConsumptionColor(
          /**
           * New value for property `consumptionColor`
           */
          sConsumptionColor: sap.gantt.ValueSVGPaintServer
        ): sap.gantt.simple.UtilizationBarChart;
      }

      class UtilizationChart extends sap.gantt.simple.BaseShape {
        /**
         * UtilizationChart is an abstract base class which inherits by UtilizationLineChart and UtilizationBarChart.
         * It defines the common properties and functions that reused by both shapes.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID for the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new chart
           */
          mSettings?: UtilizationChartOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.simple.UtilizationChart with name `sClassName` and enriches
         * it with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.simple.BaseShape.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getHeight height}.
         *
         * Defines the `UtilizationLineChart or UtilizationBarChart` height.
         *
         * Default value is `inherit`.
         */
        getHeight(): sap.gantt.SVGLength;
        /**
         * Returns a metadata object for class sap.gantt.simple.UtilizationChart.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getOverConsumptionColor overConsumptionColor}.
         *
         * Defines the over comsumption color, or fill pattern.
         *
         * Default value is `red`.
         */
        getOverConsumptionColor(): sap.gantt.ValueSVGPaintServer;
        /**
         * Gets current value of property {@link #getOverConsumptionMargin overConsumptionMargin}.
         *
         * Defines the margin height of UtilizationChart
         *
         * Default value is `25`.
         */
        getOverConsumptionMargin(): number;
        /**
         * Gets current value of property {@link #getRemainCapacityColor remainCapacityColor}.
         *
         * Defines the remain capacity color.
         *
         * Default value is `lightgray`.
         */
        getRemainCapacityColor(): sap.gantt.ValueSVGPaintServer;
        /**
         * Calculate the actual width of the shape. The width is calculated based on the time range provided by
         * property `time` and `endTime` bindings.
         */
        getWidth(): number;
        /**
         * Convert the bound time to svg x coordination
         */
        getX(): number;
        /**
         * Sets a new value for property {@link #getHeight height}.
         *
         * Defines the `UtilizationLineChart or UtilizationBarChart` height.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `inherit`.
         */
        setHeight(
          /**
           * New value for property `height`
           */
          sHeight: sap.gantt.SVGLength
        ): sap.gantt.simple.UtilizationChart;
        /**
         * Sets a new value for property {@link #getOverConsumptionColor overConsumptionColor}.
         *
         * Defines the over comsumption color, or fill pattern.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `red`.
         */
        setOverConsumptionColor(
          /**
           * New value for property `overConsumptionColor`
           */
          sOverConsumptionColor: sap.gantt.ValueSVGPaintServer
        ): sap.gantt.simple.UtilizationChart;
        /**
         * Sets a new value for property {@link #getOverConsumptionMargin overConsumptionMargin}.
         *
         * Defines the margin height of UtilizationChart
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `25`.
         */
        setOverConsumptionMargin(
          /**
           * New value for property `overConsumptionMargin`
           */
          fOverConsumptionMargin: number
        ): sap.gantt.simple.UtilizationChart;
        /**
         * Sets a new value for property {@link #getRemainCapacityColor remainCapacityColor}.
         *
         * Defines the remain capacity color.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `lightgray`.
         */
        setRemainCapacityColor(
          /**
           * New value for property `remainCapacityColor`
           */
          sRemainCapacityColor: sap.gantt.ValueSVGPaintServer
        ): sap.gantt.simple.UtilizationChart;
      }
      /**
       * Used for creating a utilization dimension for the {@link sap.gantt.simple.UtilizationLineChart} It's
       * derived from the {@link sap.ui.core.Element}
       */
      class UtilizationDimension extends sap.ui.core.Element {
        /**
         * Constructor for a new Utilization Dimension
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID of the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: UtilizationDimensionOpts
        );

        /**
         * Adds some period to the aggregation {@link #getPeriods periods}.
         */
        addPeriod(
          /**
           * The period to add; if empty, nothing is inserted
           */
          oPeriod: sap.gantt.simple.UtilizationPeriod
        ): sap.gantt.simple.UtilizationDimension;
        /**
         * Destroys all the periods in the aggregation {@link #getPeriods periods}.
         */
        destroyPeriods(): sap.gantt.simple.UtilizationDimension;
        /**
         * Creates a new subclass of class sap.gantt.simple.UtilizationDimension with name `sClassName` and enriches
         * it with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getDimensionColor dimensionColor}.
         *
         * Sets the dimension color
         */
        getDimensionColor(): sap.gantt.ValueSVGPaintServer;
        /**
         * Returns a metadata object for class sap.gantt.simple.UtilizationDimension.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getName name}.
         *
         * The name of the utilization dimension, e.g. Total Weight
         */
        getName(): string;
        /**
         * Gets content of aggregation {@link #getPeriods periods}.
         *
         * Aggregation of periods are used to display the utilization line.
         *
         * The periods have to be in chronological order, you must ensure that it's sorted by `from`, otherwise
         * the ULC can't ben display correctly.
         */
        getPeriods(): sap.gantt.simple.UtilizationPeriod[];
        /**
         * Checks for the provided `sap.gantt.simple.UtilizationPeriod` in the aggregation {@link #getPeriods periods}.
         * and returns its index if found or -1 otherwise.
         */
        indexOfPeriod(
          /**
           * The period whose index is looked for
           */
          oPeriod: sap.gantt.simple.UtilizationPeriod
        ): number;
        /**
         * Inserts a period into the aggregation {@link #getPeriods periods}.
         */
        insertPeriod(
          /**
           * The period to insert; if empty, nothing is inserted
           */
          oPeriod: sap.gantt.simple.UtilizationPeriod,
          /**
           * The `0`-based index the period should be inserted at; for a negative value of `iIndex`, the period is
           * inserted at position 0; for a value greater than the current size of the aggregation, the period is inserted
           * at the last position
           */
          iIndex: number
        ): sap.gantt.simple.UtilizationDimension;
        /**
         * Removes all the controls from the aggregation {@link #getPeriods periods}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllPeriods(): sap.gantt.simple.UtilizationPeriod[];
        /**
         * Removes a period from the aggregation {@link #getPeriods periods}.
         */
        removePeriod(
          /**
           * The period to remove or its index or id
           */
          vPeriod: number | string | sap.gantt.simple.UtilizationPeriod
        ): sap.gantt.simple.UtilizationPeriod;
        /**
         * Sets a new value for property {@link #getDimensionColor dimensionColor}.
         *
         * Sets the dimension color
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setDimensionColor(
          /**
           * New value for property `dimensionColor`
           */
          sDimensionColor: sap.gantt.ValueSVGPaintServer
        ): sap.gantt.simple.UtilizationDimension;
        /**
         * Sets a new value for property {@link #getName name}.
         *
         * The name of the utilization dimension, e.g. Total Weight
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setName(
          /**
           * New value for property `name`
           */
          sName: string
        ): sap.gantt.simple.UtilizationDimension;
      }
      /**
       *  Utilization Line Chart (ULC) is a complex shape, you can use it to visualize resource utilization
       * on different dimensions. Each Utilization dimension is represented by a line, you could define different
       * colors for each dimension.
       *
       * You can define the ULC background by property `fill`, the default background color is light gray
       */
      class UtilizationLineChart extends sap.gantt.simple.UtilizationChart {
        /**
         * Constructor for a new Utilization Line
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID of the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: UtilizationLineChartOpts
        );

        /**
         * Adds some dimension to the aggregation {@link #getDimensions dimensions}.
         */
        addDimension(
          /**
           * The dimension to add; if empty, nothing is inserted
           */
          oDimension: sap.gantt.simple.UtilizationDimension
        ): sap.gantt.simple.UtilizationLineChart;
        /**
         * Destroys all the dimensions in the aggregation {@link #getDimensions dimensions}.
         */
        destroyDimensions(): sap.gantt.simple.UtilizationLineChart;
        /**
         * Creates a new subclass of class sap.gantt.simple.UtilizationLineChart with name `sClassName` and enriches
         * it with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.simple.UtilizationChart.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets content of aggregation {@link #getDimensions dimensions}.
         *
         * Dimensions of the Utilization Line Chart
         */
        getDimensions(): sap.gantt.simple.UtilizationDimension[];
        /**
         * Returns a metadata object for class sap.gantt.simple.UtilizationLineChart.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * ID of the element which is the current target of the association {@link #getOverConsumptionPattern overConsumptionPattern},
         * or `null`.
         */
        getOverConsumptionPattern(): sap.ui.core.ID;
        /**
         * Gets current value of property {@link #getShowMiddleLine showMiddleLine}.
         *
         * Flag to show or hide the middle line in Utilization Line Chart. The value of the `overConsumptionMargin`
         * will affect the middle line position. By default the middle line is a gray dashed line
         *
         * Default value is `true`.
         */
        getShowMiddleLine(): boolean;
        /**
         * Checks for the provided `sap.gantt.simple.UtilizationDimension` in the aggregation {@link #getDimensions
         * dimensions}. and returns its index if found or -1 otherwise.
         */
        indexOfDimension(
          /**
           * The dimension whose index is looked for
           */
          oDimension: sap.gantt.simple.UtilizationDimension
        ): number;
        /**
         * Inserts a dimension into the aggregation {@link #getDimensions dimensions}.
         */
        insertDimension(
          /**
           * The dimension to insert; if empty, nothing is inserted
           */
          oDimension: sap.gantt.simple.UtilizationDimension,
          /**
           * The `0`-based index the dimension should be inserted at; for a negative value of `iIndex`, the dimension
           * is inserted at position 0; for a value greater than the current size of the aggregation, the dimension
           * is inserted at the last position
           */
          iIndex: number
        ): sap.gantt.simple.UtilizationLineChart;
        /**
         * Removes all the controls from the aggregation {@link #getDimensions dimensions}.
         *
         * Additionally, it unregisters them from the hosting UIArea.
         */
        removeAllDimensions(): sap.gantt.simple.UtilizationDimension[];
        /**
         * Removes a dimension from the aggregation {@link #getDimensions dimensions}.
         */
        removeDimension(
          /**
           * The dimension to remove or its index or id
           */
          vDimension: number | string | sap.gantt.simple.UtilizationDimension
        ): sap.gantt.simple.UtilizationDimension;
        /**
         * Render a shape element with RenderManager
         */
        // @ts-ignore
        renderElement(
          /**
           * Render Manager
           */
          oRm: object,
          /**
           * shape instance
           */
          oElement: object
        ): void;
        /**
         * Sets the associated {@link #getOverConsumptionPattern overConsumptionPattern}.
         */
        setOverConsumptionPattern(
          /**
           * ID of an element which becomes the new target of this overConsumptionPattern association; alternatively,
           * an element instance may be given
           */
          oOverConsumptionPattern: sap.ui.core.ID | sap.gantt.def.DefBase
        ): sap.gantt.simple.UtilizationLineChart;
        /**
         * Sets a new value for property {@link #getShowMiddleLine showMiddleLine}.
         *
         * Flag to show or hide the middle line in Utilization Line Chart. The value of the `overConsumptionMargin`
         * will affect the middle line position. By default the middle line is a gray dashed line
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         */
        setShowMiddleLine(
          /**
           * New value for property `showMiddleLine`
           */
          bShowMiddleLine: boolean
        ): sap.gantt.simple.UtilizationLineChart;
      }
      /**
       *  UtilizationPeriod is used by `sap.gantt.simple.UtilizationLineChart` and `sap.gantt.simple.UtilizationBarChart`
       * It represents a time period that a specific resource utilization usages
       *
       *  UtilizationPeriod is either defined as a direct aggregation of UtilizationBarChart, or an aggregation
       * of `sap.gantt.simple.UtilizationDimension`
       */
      class UtilizationPeriod extends sap.ui.core.Element {
        /**
         * Constructor for a new `UtilizationPeriod`
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor(
          /**
           * ID of the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: UtilizationPeriodOpts
        );

        /**
         * Creates a new subclass of class sap.gantt.simple.UtilizationPeriod with name `sClassName` and enriches
         * it with the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
         */
        // @ts-ignore
        static extend(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: object,
          /**
           * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Gets current value of property {@link #getDemand demand}.
         *
         * The required/demand capacity, it's only used for used for UtilizationBarChart
         *
         * Default value is `0`.
         */
        getDemand(): number;
        /**
         * Gets current value of property {@link #getFrom from}.
         *
         * from date time of period
         */
        getFrom(): object;
        /**
         * Returns a metadata object for class sap.gantt.simple.UtilizationPeriod.
         */
        // @ts-ignore
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getSupply supply}.
         *
         * The resource supply capacity, it's only used for UtilizationBarChart
         *
         * Default value is `0`.
         */
        getSupply(): number;
        /**
         * Gets current value of property {@link #getTo to}.
         *
         * to date time of period
         */
        getTo(): object;
        /**
         * Gets current value of property {@link #getValue value}.
         *
         * The value of the actual consumption capacity. It's only relevant for UtilizationLineChart
         *
         * Default value is `0`.
         */
        getValue(): number;
        /**
         * Sets a new value for property {@link #getDemand demand}.
         *
         * The required/demand capacity, it's only used for used for UtilizationBarChart
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setDemand(
          /**
           * New value for property `demand`
           */
          fDemand: number
        ): sap.gantt.simple.UtilizationPeriod;
        /**
         * Sets a new value for property {@link #getFrom from}.
         *
         * from date time of period
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setFrom(
          /**
           * New value for property `from`
           */
          oFrom: object
        ): sap.gantt.simple.UtilizationPeriod;
        /**
         * Sets a new value for property {@link #getSupply supply}.
         *
         * The resource supply capacity, it's only used for UtilizationBarChart
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setSupply(
          /**
           * New value for property `supply`
           */
          fSupply: number
        ): sap.gantt.simple.UtilizationPeriod;
        /**
         * Sets a new value for property {@link #getTo to}.
         *
         * to date time of period
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         */
        setTo(
          /**
           * New value for property `to`
           */
          oTo: object
        ): sap.gantt.simple.UtilizationPeriod;
        /**
         * Sets a new value for property {@link #getValue value}.
         *
         * The value of the actual consumption capacity. It's only relevant for UtilizationLineChart
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `0`.
         */
        setValue(
          /**
           * New value for property `value`
           */
          fValue: number
        ): sap.gantt.simple.UtilizationPeriod;
      }
      /**
       * Toolbar placeholders for a Gantt chart container.
       */
      enum ContainerToolbarPlaceholderType {
        /**
         * A bird eye toolbar button.
         */
        BirdEyeButton,
        /**
         * A display type toolbar button.
         */
        DisplayTypeButton,
        /**
         * A legend toolbar button.
         */
        LegendButton,
        /**
         * Settings toolbar button.
         */
        SettingButton,
        /**
         * A toolbar spacer that can be used between buttons.
         */
        Spacer,
        /**
         * A time zoom control.
         */
        TimeZoomControl
      }
      /**
       * Gantt chart display types.
       */
      enum GanttChartWithTableDisplayType {
        /**
         * The {@link sap.gantt.simple.GanttChartWithTable} control displays both a table and a chart.
         */
        Both,
        /**
         * The {@link sap.gantt.simple.GanttChartWithTable} control displays only a chart.
         */
        Chart,
        /**
         * The {@link sap.gantt.simple.GanttChartWithTable} control displays only a table.
         */
        Table
      }
      /**
       * @SINCE 1.60.0
       *
       * Type of relationship shape. `sap.gantt.simple.RelationshipType` shall be used to define property type
       * on class `sap.gantt.simple.Relationship`
       */
      enum RelationshipType {
        /**
         * Finish to finish type.
         */
        FinishToFinish,
        /**
         * Finish to start type.
         */
        FinishToStart,
        /**
         * Start to finish type.
         */
        StartToFinish,
        /**
         * Start to start type.
         */
        StartToStart
      }
    }

    interface AdhocLineOpts extends sap.ui.core.ElementOpts {
      /**
       * Standard SVG 'stroke' attribute. You can provide the stroke attribute with HTML colors and the URL reference
       * to the paint server. Paint server definitions usually come from paint servers rendered by {@link sap.gantt.GanttChartContainer},
       * {@link sap.gantt.GanttChartWithTable} or {@link sap.gantt.GanttChart}.
       */
      stroke?: sap.gantt.ValueSVGPaintServer;

      /**
       * Standard SVG 'stroke-width' attribute.
       */
      strokeWidth?: number;

      /**
       * Standard SVG 'stroke-dasharray' attribute.
       */
      strokeDasharray?: string;

      /**
       * Standard SVG 'stroke-opacity' attribute.
       */
      strokeOpacity?: number;

      /**
       * Time stamp of the adhoc line
       */
      timeStamp?: string;

      /**
       * Description of the time stamp
       */
      description?: string;
    }

    interface GanttChartOpts extends sap.gantt.GanttChartBaseOpts {}

    interface GanttChartBaseOpts extends sap.ui.core.ControlOpts {
      /**
       * Width of the control.
       */
      width?: sap.ui.core.CSSSize;

      /**
       * Height of the control.
       */
      height?: sap.ui.core.CSSSize;

      /**
       * Switch to show and hide the cursor line that follows the cursor.
       */
      enableCursorLine?: boolean;

      /**
       * Switch to show and hide the present time indicator
       */
      enableNowLine?: boolean;

      /**
       * Switch to show and hide vertical lines representing intervals along the time axis
       */
      enableVerticalLine?: boolean;

      /**
       * Switch to show and hide adhoc lines representing milestones and events along the time axis
       */
      enableAdhocLine?: boolean;

      /**
       * Switch to show or hide the start time and end time of a shape when you drag it along the time line
       */
      enableShapeTimeDisplay?: boolean;

      /**
       * @deprecated (since 1.44) - please use sap.gantt.axistime.AxisTimeStrategy to change the zoom rate
       *
       * Zoom level in float.
       *
       * This property allows application developers to control the zoom level. When GanttChart is embedded in
       * `sap.gantt.GanttChartContainer`, you do not have to manage this property.
       */
      timeZoomRate?: number;

      /**
       * Current mode of the Gantt chart.
       *
       * If no value is provided, GanttChart uses a default mode key.
       */
      mode?: string;

      /**
       * @deprecated - Please use `tableProperties`(e.g. `setTableproperties({selectionMode: "None"})`) to control
       * table selection mode, and `shapeSelectionMode`(e.g. `setShapeSelectionMode("None")`) to control shape
       * selection mode.
       *
       * Selection mode for GanttChart
       *
       * This property controls whether multiToggle or multi-selection mode is enabled for the tree table and
       * for shapes. It may also affect the visual appearance, such as whether check boxes are available for selection.
       * From version 1.40 to upper versions, multi is replaced by multiToggle selection mode in tree table
       */
      selectionMode?: sap.gantt.SelectionMode;

      /**
       * Selection mode for shape
       *
       * This property controls 4 shape selection modes(MultiWithKeyboard, Multiple, Single, None). You can use
       * `setShapeSelectionMode("None")` to set shape selection mode.
       */
      shapeSelectionMode?: sap.gantt.SelectionMode;

      /**
       * This property control the size of the selection panel. The value will be overwritten by property `selectionPanelSize`
       * in `sap.gantt.config.ContainerLayout` if you are using GanttChartContainer
       *
       * In the current library, `sap.gantt.GanttChart` does not have a selection panel. `sap.gantt.GanttChartWithTable`
       * has a selection panel implemented by `sap.ui.table.TreeTable`.
       */
      selectionPanelSize?: sap.ui.core.CSSSize;

      /**
       * Current hierarchy key referencing from configuration property `hierarchies`.
       *
       * If `source select group` is enabled in the Gantt chart toolbar, the current hierarchy name referenced
       * from `hierarchies` by this property is shown. For applications that do not require this function, this
       * property can be ignored and a default value is used.
       */
      hierarchyKey?: string;

      /**
       * row height of Gantt Chart. If this property is set, then it will change the Table row height on the left
       */
      baseRowHeight?: number;

      /**
       * SVG reusable element definitions.
       *
       * If this property is provided, the paint server definition of the SVG is rendered. Method `getDefString()`
       * should be implemented by all paint server classes that are passed in in this property. We recommend that
       * you set the type of this argument to `sap.gantt.def.SvgDefs`. Otherwise some properties you set may not
       * function properly.
       *
       * Limitation: It's defined as a property thus can not be used in XML View
       */
      svgDefs?: object;

      /**
       * @deprecated (since 1.44) - replaced by aggregation 'axisTimeStrategy'. Planning horizon, initial horizon,
       * and zoom level can be configured with this property. If not provided, a default configuration is provided.
       * We recommend that you set the type of this argument to `sap.gantt.config.TimeAxis`. Otherwise some properties
       * you set may not function properly.
       *
       * Limitation: It's defined as a property thus can not be used in XML View
       *
       * Configuration of the time axis.
       */
      timeAxis?: object;

      /**
       * Configuration of available modes.
       *
       * List of available modes. To apply modes to toolbar and shapes, further configuration is needed. If not
       * provided, a default configuration is provided. We recommend that you set the type of this argument to
       * `sap.gantt.config.Mode[]`. Otherwise some properties you set may not function properly.
       *
       * Limitation: It's defined as a property thus can not be used in XML View
       */
      modes?: object[];

      /**
       * Configuration of toolbar schemes.
       *
       * List of available toolbar schemes. If not provided, a default configuration is provided. We recommend
       * that you set the type of this argument to `sap.gantt.config.ToolbarScheme[]`. Otherwise some properties
       * you set may not function properly.
       *
       * Limitation: It's defined as a property thus can not be used in XML View
       */
      toolbarSchemes?: object[];

      /**
       * Configuration of hierarchies.
       *
       * List of available hierarchies. If not provided, a default configuration is provided. We recommend that
       * you set the type of this argument to `sap.gantt.config.Hierarchy[]`. Otherwise some properties you set
       * may not function properly.
       *
       * Limitation: It's defined as a property thus can not be used in XML View
       */
      hierarchies?: object[];

      /**
       * Configuration of object types.
       *
       * List of available object types. If not provided, a default configuration is provided. We recommend that
       * you set the type of this argument to `sap.gantt.config.ObjectType[]`. Otherwise some properties you set
       * may not function properly.
       *
       * Limitation: It's defined as a property thus can not be used in XML View
       */
      objectTypes?: object[];

      /**
       * Configuration of chart schemes.
       *
       * List of available chart schemes. If not provided, a default configuration is provided. We recommend that
       * you set the type of this argument to `sap.gantt.config.ChartScheme[]`. Otherwise some properties you
       * set may not function properly.
       *
       * Limitation: It's defined as a property thus can not be used in XML View
       */
      chartSchemes?: object[];

      /**
       * Configuration of locale settings.
       *
       * Most locale settings can be configured in sap.ui.configuration objects. Only the time zone and day-light-saving
       * time option are provided by locale settings. We recommend that you set the type of this argument to `sap.gantt.config.Locale`.
       * Otherwise some properties you set may not function properly.
       *
       * Limitation: It's defined as a property thus can not be used in XML View
       */
      locale?: object;

      /**
       * Configuration of shape data names and the attribute in raw data that serves as 'id'.
       *
       * This property value should be an array, either an array of string, each string represents one available
       * shape data name, or an array of object, each object specifies the shape data name and data attribute
       * that will serves as 'id'. This configuration must be provided if SVG graphics are needed.
       *
       * Example: ` new sap.gantt.GanttChartWithTable({ shapeDataNames: ["task", "order"], shapes: [ new sap.gantt.shape.Shape({
       * key: "calendar", shapeDataName: "task" shapeClassName: "sap.gantt.shape.Rectangle", // ... }) ] // ...
       * }); `
       *
       * or in XMLView ` <GanttChartWithTable shapeDataNames="task,order"> </GanttChartWithTable>
       * `
       */
      shapeDataNames?: sap.gantt.GenericArray;

      /**
       * Configuration of shape data against shape classes.
       *
       * List of available shapes. The shapes configured in this list are initialized inside `sap.gantt.GanttChartBase`.
       * Note that for JSON data binding, this configuration supports deep structured data structures. For ODATA
       * binding, only one level is supported. We recommend that you set the type of this argument to `sap.gantt.config.Shape[]`.
       * Otherwise some properties you set may not function properly.
       */
      shapes?: object[];

      /**
       * Specifies on which layer adhoc lines reside. By default, adhoc lines are on top of all other shapes and
       * patterns.
       */
      adhocLineLayer?: string;

      /**
       * Exposed properties from TreeTable
       */
      tableProperties?: object;

      /**
       * Defines how to adjust the relative position between a draggable shape and the mouse pointer.
       */
      ghostAlignment?: string;

      /**
       * @SINCE 1.68
       *
       * Flag whether to show the `nowLine` in UTC or in local time.
       */
      nowLineInUTC?: boolean;

      /**
       * Event fired when the hierarchy key has changed in the Gantt chart toolbar.
       */
      ganttChartSwitchRequested?: Function;

      /**
       * Splitter (if exists) resized.
       *
       * If a splitter exists and synchronization is needed with other Gantt charts in the container, use this
       * event. You can listen for this event and obtain `zoomInfo`.
       */
      splitterResize?: Function;

      /**
       * @deprecated (since 1.44)
       *
       * Horizontal (time axis) scroll.
       *
       * If the horizontal scroll bar exists and synchronization is needed with other Gantt charts in the container,
       * use this event.
       */
      horizontalScroll?: Function;

      /**
       * @deprecated (since 1.44)
       *
       * Vertical (row axis) scroll.
       *
       * If the vertical scroll bar exists and synchronization is needed with other Gantt charts in the container,
       * use this event.
       */
      verticalScroll?: Function;

      /**
       * Event is fired when a mouse-hover occurs in the graphic part.
       */
      chartMouseOver?: Function;

      /**
       * Event fired when the chart is clicked
       */
      chartClick?: Function;

      /**
       * Event fired when the chart is double-clicked
       */
      chartDoubleClick?: Function;

      /**
       * Event fired when the chart is right-clicked
       */
      chartRightClick?: Function;

      chartDragEnter?: Function;

      chartDragLeave?: Function;

      /**
       * Event fired when the selection status of rows changes.
       */
      rowSelectionChange?: Function;

      /**
       * Event fired when the selection status of relationships changes.
       */
      relationshipSelectionChange?: Function;

      /**
       * Event fired when the selection status of shapes changes.
       */
      shapeSelectionChange?: Function;

      /**
       * Event fired when a drag-and-drop occurs on one or more selected shapes.
       */
      shapeDragEnd?: Function;

      /**
       * Event fired when toggle node of the tree table.
       */
      treeTableToggleEvent?: Function;

      /**
       * Event fired when a resizing occurs on a resized shape.
       */
      shapeResizeEnd?: Function;

      /**
       * Event fired when the following conditions are met: The 'enableHover' property of Shape is set to true.
       * You hover the mouse on a shape and keep the mouse stationary for 500 millisecond or longer.
       */
      shapeMouseEnter?: Function;

      /**
       * Event fired when the following conditions are met: The 'enableHover' property of Shape is set to true.
       * You move the mouse out of a shape and keep the mouse stationary for 500 millisecond or longer.
       */
      shapeMouseLeave?: Function;

      /**
       * Rows of `sap.gantt.GanttChartBase`
       *
       * This aggregation is delegated to `sap.gantt.table.TreeTable`. Rows are provide a base for shapes with
       * a category of `"InRowShape"`. The configuration in property `shapes` determines how the shapes are drawn.
       */
      rows?: sap.ui.core.Control[] | sap.ui.core.Control;

      /**
       * Relationships of shapes carried by rows.
       *
       * Similar to rows, this aggregation does not request templates either. Relationships are a special shape
       * with a category of `"crossRowShape"`. How relationships are drawn is also specified in configuration
       * property `shapes`.
       */
      relationships?: sap.ui.core.Control[] | sap.ui.core.Control;

      /**
       * Paint servers consumed by special shape `sap.gantt.shape.cal.Calendar`.
       *
       * This aggregation is designed to improve performance of calendar shapes. Rows usually share a similar
       * definition with calendar shapes. It is possible to define a Calendar paint server to draw only one rectangle
       * for each row. Notes for classes extended from `sap.gantt.def.cal.CalendarDef`: Different from property
       * `paintServerDefs`, paint servers defined here must implement method `getDefNode()` instead of method
       * `getDefString()`.
       */
      calendarDef?: sap.gantt.def.cal.CalendarDefs;

      /**
       * This aggregation controls the zoom strategies and zoom rate in Gantt Chart.
       */
      axisTimeStrategy?: sap.gantt.axistime.AxisTimeStrategyBase;

      /**
       * The aggregation is used to store configuration of adhoc lines, adhoc lines represent milestones and events
       * in axis time.
       */
      adhocLines?: sap.gantt.AdhocLine[] | sap.gantt.AdhocLine;
    }

    interface GanttChartContainerOpts extends sap.ui.core.ControlOpts {
      /**
       * Width of the control
       */
      width?: sap.ui.core.CSSSize;

      /**
       * Height of the control
       */
      height?: sap.ui.core.CSSSize;

      /**
       * Switch to enable and disable scroll synchronization by time on instances of aggregation `ganttCharts`.
       */
      enableTimeScrollSync?: boolean;

      /**
       * Switch to enable and disable the cursor line that follows the cursor.
       *
       * When this value is set, it overrides the corresponding value on instances of aggregation `ganttCharts`.
       */
      enableCursorLine?: boolean;

      /**
       * Switch to enable and disable the present time indicator.
       *
       * When this value is set, it overrides the corresponding value on instances of aggregation `ganttCharts`.
       */
      enableNowLine?: boolean;

      /**
       * Switch to enable and disable vertical lines representing intervals along the time axis.
       *
       * When this value is set, it overrides the corresponding value on instances of aggregation `ganttCharts`.
       */
      enableVerticalLine?: boolean;

      /**
       * Switch to enable and disable adhoc lines representing milestones and events along the time axis.
       *
       * When this value is set, it overrides the corresponding value on instances of aggregation `ganttCharts`.
       */
      enableAdhocLine?: boolean;

      /**
       * Definitions of paint servers used for advanced shape features around SVG fill, stroke, and filter attributes.
       *
       * If this property is provided, the paint server definition of the SVG is rendered. Method `getDefString()`
       * should be implemented by all paint server classes that are passed in in this property. It is easier to
       * assign a common paint server definition in this class instead of in separate instances of `sap.gantt.GanttChartBase`.
       * Then the definition is rendered only once. We recommend that you set the type of this argument to `sap.gantt.def.SvgDefs`.
       * Otherwise some properties you set may not function properly.
       *
       * Limitation: It's defined as a property thus can not be used in XML View
       */
      svgDefs?: object;

      /**
       * List of available modes. To apply modes to the toolbar and shapes, further configuration is needed. (specifically,
       * in property `toolbarSchemes`, and properties `toolbarSchemes` and `shapes` in the `GanttChartBase` class)If
       * not provided, a default configuration is provided. We recommend that you set the type of this argument
       * to `sap.gantt.config.Mode[]`. Otherwise some properties you set may not function properly.
       *
       * Limitation: It's defined as a property thus can not be used in XML View
       */
      modes?: object[];

      /**
       * List of available toolbar schemes. If not provided, a default configuration is provided. We recommend
       * that you set the type of this argument to `sap.gantt.config.ToolbarScheme[]`. Otherwise some properties
       * you set may not function properly.
       *
       * Limitation: It's defined as a property thus can not be used in XML View
       */
      toolbarSchemes?: object[];

      /**
       * List of available hierarchies. If not provided, a default configuration is provided. We recommend that
       * you set the type of this argument to `sap.gantt.config.Hierarchy[]`. Otherwise some properties you set
       * may not function properly.
       *
       * Limitation: It's defined as a property thus can not be used in XML View
       */
      hierarchies?: object[];

      /**
       * Configuration of container layouts.
       *
       * This configuration affects the data source selection ComboBox in the Container Toolbar. When the selection
       * changes, the `ganttChartChangeRequested` event that is triggered includes the corresponding layout key.
       * We recommend that you set the type of this argument to `sap.gantt.config.ContainerLayout[]`. Otherwise
       * some properties you set may not function properly.
       *
       * Limitation: It's defined as a property thus can not be used in XML View
       */
      containerLayouts?: object[];

      /**
       * Current container layout key.
       *
       * This is a key configured in configuration property `containerLayouts`.
       */
      containerLayoutKey?: string;

      /**
       * @deprecated (since 1.44) - please set the property 'stepCountOfSlider' in sap.gantt.config.TimeZoomGroup.
       *
       * Define the amount of units to change the time zoom slider.
       *
       * See {@link sap.m.Slider#setStep}
       */
      sliderStep?: number;

      /**
       * Define the maximum number of Gantt charts to be displayed on the same screen. When this number is reached,
       * the "Add Gantt Chart" button is grayed out.
       */
      maxNumOfGanttCharts?: number;

      /**
       * Event fired when any change occurs in the toolbar that requests the application to change aggregation
       * `ganttCharts`.
       *
       * Possible triggers are:
       * 	 - The source selection group changes in the container toolbar.
       * 	 - The layout group button is clicked in the container toolbar.
       * 	 - The source selection group changes in the Gantt chart toolbar.
       */
      ganttChartChangeRequested?: Function;

      /**
       * Event fired when the custom settings are changed.
       *
       * The Custom settings are application-injected settings that can be configured in the Settings dialog box.
       * This event allows the application to handle these settings. Only check boxes are supported.
       */
      customSettingChange?: Function;

      /**
       * Event fired when toggle node of the tree table.
       */
      treeTableToggleEvent?: Function;

      /**
       * Legend shown when the legend button is clicked.
       *
       * This aggregation is used only when the Legend button is configured to be shown in the container toolbar.
       */
      legendContainer?: any;

      /**
       * Controls to be placed in the container toolbar.
       *
       * This aggregation is used only when the custom toolbar item group is configured to be shown in the
       * container toolbar. Different from the built-in buttons that are configured to be shown or hidden, these
       * controls are free controls created by the application, but are only placed in the container toolbar by
       * `sap.gantt.GanttChartContainer`.
       *
       * If the source selection group is enabled and you want your application to use a container layout pre-configured
       * for a specific source, you can implement your custom toolbar items in the event handler of event `ganttChartChangeRequested`.
       */
      customToolbarItems?: sap.ui.core.Control[] | sap.ui.core.Control;

      /**
       * Gantt chart instances.
       *
       * If the source selection group is enabled and you want your application to use a container layout pre-configured
       * for a specific source, you can implement your custom toolbar items in the event handler of event `ganttChartChangeRequested`.
       * Provide a Gantt chart in compliance with the container layout setting. GanttChartContainer is designed
       * to support Gantt chart layouts that include multiple views.
       */
      ganttCharts?: sap.gantt.GanttChartBase[] | sap.gantt.GanttChartBase;
    }

    interface GanttChartWithTableOpts extends sap.gantt.GanttChartBaseOpts {
      /**
       * A customized cell callback function.
       *
       *  This property is used in combination with configuration property `hierarchies`. If aggregation `columns`
       * is provided, property `hierarchies` and `cellCallback` is ignored. Otherwise property `hierarchies` must
       * provide column configurations that cellCallback can consume. And if cellCallback is not provided, a default
       * cellCallback adds `sap.m.Label` to fill cells.
       */
      cellCallback?: object;

      /**
       * @deprecated - We don't recommend use this property
       *
       * Property propagated from `sap.ui.table.Table`.
       */
      fixedColumnCount?: number;

      /**
       * Controls to be place in Gantt chart toolbar.
       *
       * This aggregation is only used when custom toolbar item group is configured to be shown in Gantt chart
       * toolbar. Different from the build-in buttons which are configured to be shown or hidden, these are free
       * controls created by application, only they are placed in container toolbar by `sap.gantt.GanttChartWithTable`.
       *
       * A common recommendation is, if the source select group is enabled and application wants to pre-configure
       * container layouts, the chance to change custom toolbar items is in event handler to event `ganttChartSwitchRequested`.
       */
      customToolbarItems?: sap.ui.core.Control[] | sap.ui.core.Control;

      /**
       * Aggregation delegated to `sap.ui.table.Table`.
       *
       * If this aggregation is provided, call back property `cellCallBack` and column configuration in property
       * `hierarchies` will be ignored.
       */
      columns?: sap.ui.table.Column[] | sap.ui.table.Column;
    }

    interface GenericArray {}

    interface PaletteColor {}

    interface SVGLength {}

    interface ValueSVGPaintServer {}
    /**
     * The AdhocLine class contains properties to draw an additional vertical line at specific time points in
     * the chart area. You can use this line to mark milestones, such as the start of a project start, and special
     * events, such as holidays.
     */
    class AdhocLine extends sap.ui.core.Element {
      /**
       * Creates and initializes a new AdhocLine class.
       *
       * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
       * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
       * of the syntax of the settings object.
       */
      constructor(
        /**
         * ID of the new control, generated automatically if no ID is given
         */
        sId?: string,
        /**
         * Initial settings for the new control
         */
        mSettings?: AdhocLineOpts
      );

      /**
       * Creates a new subclass of class sap.gantt.AdhocLine with name `sClassName` and enriches it with the information
       * contained in `oClassInfo`.
       *
       * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
       */
      // @ts-ignore
      static extend(
        /**
         * Name of the class being created
         */
        sClassName: string,
        /**
         * Object literal with information about the class
         */
        oClassInfo?: object,
        /**
         * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
         */
        FNMetaImpl?: Function
      ): Function;
      /**
       * Gets current value of property {@link #getDescription description}.
       *
       * Description of the time stamp
       */
      getDescription(): string;
      /**
       * Returns a metadata object for class sap.gantt.AdhocLine.
       */
      // @ts-ignore
      static getMetadata(): sap.ui.base.Metadata;
      /**
       * Gets current value of property {@link #getStroke stroke}.
       *
       * Standard SVG 'stroke' attribute. You can provide the stroke attribute with HTML colors and the URL reference
       * to the paint server. Paint server definitions usually come from paint servers rendered by {@link sap.gantt.GanttChartContainer},
       * {@link sap.gantt.GanttChartWithTable} or {@link sap.gantt.GanttChart}.
       */
      getStroke(): sap.gantt.ValueSVGPaintServer;
      /**
       * Gets current value of property {@link #getStrokeDasharray strokeDasharray}.
       *
       * Standard SVG 'stroke-dasharray' attribute.
       */
      getStrokeDasharray(): string;
      /**
       * Gets current value of property {@link #getStrokeOpacity strokeOpacity}.
       *
       * Standard SVG 'stroke-opacity' attribute.
       *
       * Default value is `1`.
       */
      getStrokeOpacity(): number;
      /**
       * Gets current value of property {@link #getStrokeWidth strokeWidth}.
       *
       * Standard SVG 'stroke-width' attribute.
       *
       * Default value is `1`.
       */
      getStrokeWidth(): number;
      /**
       * Gets current value of property {@link #getTimeStamp timeStamp}.
       *
       * Time stamp of the adhoc line
       */
      getTimeStamp(): string;
      /**
       * Sets a new value for property {@link #getDescription description}.
       *
       * Description of the time stamp
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       */
      setDescription(
        /**
         * New value for property `description`
         */
        sDescription: string
      ): sap.gantt.AdhocLine;
      /**
       * Sets a new value for property {@link #getStroke stroke}.
       *
       * Standard SVG 'stroke' attribute. You can provide the stroke attribute with HTML colors and the URL reference
       * to the paint server. Paint server definitions usually come from paint servers rendered by {@link sap.gantt.GanttChartContainer},
       * {@link sap.gantt.GanttChartWithTable} or {@link sap.gantt.GanttChart}.
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       */
      setStroke(
        /**
         * New value for property `stroke`
         */
        sStroke: sap.gantt.ValueSVGPaintServer
      ): sap.gantt.AdhocLine;
      /**
       * Sets a new value for property {@link #getStrokeDasharray strokeDasharray}.
       *
       * Standard SVG 'stroke-dasharray' attribute.
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       */
      setStrokeDasharray(
        /**
         * New value for property `strokeDasharray`
         */
        sStrokeDasharray: string
      ): sap.gantt.AdhocLine;
      /**
       * Sets a new value for property {@link #getStrokeOpacity strokeOpacity}.
       *
       * Standard SVG 'stroke-opacity' attribute.
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       *
       * Default value is `1`.
       */
      setStrokeOpacity(
        /**
         * New value for property `strokeOpacity`
         */
        fStrokeOpacity: number
      ): sap.gantt.AdhocLine;
      /**
       * Sets a new value for property {@link #getStrokeWidth strokeWidth}.
       *
       * Standard SVG 'stroke-width' attribute.
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       *
       * Default value is `1`.
       */
      setStrokeWidth(
        /**
         * New value for property `strokeWidth`
         */
        fStrokeWidth: number
      ): sap.gantt.AdhocLine;
      /**
       * Sets a new value for property {@link #getTimeStamp timeStamp}.
       *
       * Time stamp of the adhoc line
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       */
      setTimeStamp(
        /**
         * New value for property `timeStamp`
         */
        sTimeStamp: string
      ): sap.gantt.AdhocLine;
    }
    /**
     * @deprecated (since 1.64) - {@link sap.gantt.simple.GanttChartWithTable} should be used instead.
     *
     * Gantt Chart control.
     *
     * The Gantt chart has a horizontal axis at the top that represents time and a vertical axis that represents
     * rows.
     */
    class GanttChart extends sap.gantt.GanttChartBase {
      /**
       * Creates and initializes a new Gantt Chart.
       *
       * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
       * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
       * of the syntax of the settings object.
       */
      constructor(
        /**
         * ID for the new control, generated automatically if no id is given
         */
        sId?: string,
        /**
         * Initial settings for the new control
         */
        mSettings?: GanttChartOpts
      );

      /**
       * GanttChart will do birdEye on the specified row. The row index starts from 0 and indicates the position
       * in all rows, instead of visible rows
       */
      doBirdEyeOnRow(): void;
      /**
       * Creates a new subclass of class sap.gantt.GanttChart with name `sClassName` and enriches it with the
       * information contained in `oClassInfo`.
       *
       * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.GanttChartBase.extend}.
       */
      // @ts-ignore
      static extend(
        /**
         * Name of the class being created
         */
        sClassName: string,
        /**
         * Object literal with information about the class
         */
        oClassInfo?: object,
        /**
         * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
         */
        FNMetaImpl?: Function
      ): Function;
      /**
       * Returns a metadata object for class sap.gantt.GanttChart.
       */
      // @ts-ignore
      static getMetadata(): sap.ui.base.Metadata;
      /**
       * Set AxixTimeStrategy aggregation.
       */
      // @ts-ignore
      setAxisTimeStrategy(
        /**
         * an instance of AxisTime Zoom Strategy
         */
        oAxisTimeStrategy: object
      ): object;
      /**
       * @deprecated - We recommend use setTableProperties function instead
       *
       * Sets the first visible row in the Gantt Chart Control.
       * See:
       * 	sap.ui.table.Table.setFirstVisibleRow
       */
      setFirstVisibleRow(
        /**
         * The row index to be set as the first visible row
         */
        iRowIndex: number
      ): sap.gantt.GanttChart;
    }
    /**
     * Base class for all Gantt charts.
     *
     * This base class defines:
     * 	 - Basic properties and aggregations.
     * 	 - Metadata required integrate with GanttChartContainer.  sap.gantt provides two basic implementations
     * 			of `GanttChartBase`:
     * 	 - `sap.gantt.GanttChart` - A chart area that contains rows along the vertical axis and a time scale
     * 			along the horizontal axis.
     * 	 - `sap.gantt.GanttChartWithTable` - A tree table and a chart area separated by a splitter with rows
     * 			synchronized.
     *
     * A number of `get` and `select` functions in this class use the row ID, row UI ID (UID), shape ID,
     * or shape UID as the input to identify the objects to select or retrieve.
     *
     * A row UID comprises the following parts:
     * 	 - Row ID: Identifier of a specific row. In most cases, this ID is specified in your data model, for
     * 			example: 0001. The system generates a random ID for a row if you do not specify the row ID.
     * 	 - Row path: Represents the ID hierarchy in a tree structure. For example, if a tree has a three-level
     * 			hierarchy, the row path follows this pattern: Level_1_row_id|level_2_row_id|level_3_row_id
     * 	 - Scheme: Chart scheme which is configured in shape configuration. The scheme controls what kind of
     * 			shapes are shown in a row.  Row UID pattern: PATH:row_id|SCHEME:chart_scheme_key[index]
     *
     * A shape UID comprises the following parts:
     * 	 - Row UID: UID of the row where the shape is located.
     * 	 - Shape data name: Key of the shape in the data model. For example: DATA:activity_greedy
     * 	 - Shape ID: Identifier of a specific shape. In most cases, this ID is specified in your data model.
     * 			The system generates a random ID for a shape if you do not specify the shape ID.  Row UID pattern:
     * 			PATH:row_id|SCHEME:chart_scheme_key[index]|DATA:shape_data_name[shape_id]
     *
     * Note that you do not need to specify the UID for a shape or row. Gantt Chart automatically forms the
     * UIDs for shapes or rows.
     */
    class GanttChartBase extends sap.ui.core.Control {
      /**
       * Creates and initializes a new Gantt chart.
       *
       * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
       * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
       * of the syntax of the settings object.
       */
      constructor(
        /**
         * ID for the new control, generated automatically if no id is given
         */
        sId?: string,
        /**
         * Initial settings for the new control
         */
        mSettings?: GanttChartBaseOpts
      );

      /**
       * Adds some adhocLine to the aggregation {@link #getAdhocLines adhocLines}.
       */
      addAdhocLine(
        /**
         * The adhocLine to add; if empty, nothing is inserted
         */
        oAdhocLine: sap.gantt.AdhocLine
      ): sap.gantt.GanttChartBase;
      /**
       * Adds some relationship to the aggregation {@link #getRelationships relationships}.
       */
      addRelationship(
        /**
         * The relationship to add; if empty, nothing is inserted
         */
        oRelationship: sap.ui.core.Control
      ): sap.gantt.GanttChartBase;
      /**
       * Adds some row to the aggregation {@link #getRows rows}.
       */
      addRow(
        /**
         * The row to add; if empty, nothing is inserted
         */
        oRow: sap.ui.core.Control
      ): sap.gantt.GanttChartBase;
      /**
       * Attaches event handler `fnFunction` to the {@link #event:chartClick chartClick} event of this `sap.gantt.GanttChartBase`.
       *
       * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
       * otherwise it will be bound to this `sap.gantt.GanttChartBase` itself.
       *
       * Event fired when the chart is clicked
       */
      attachChartClick(
        /**
         * An application-specific payload object that will be passed to the event handler along with the event
         * object when firing the event
         */
        oData: object,
        /**
         * The function to be called when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object to call the event handler with. Defaults to this `sap.gantt.GanttChartBase` itself
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Attaches event handler `fnFunction` to the {@link #event:chartDoubleClick chartDoubleClick} event of
       * this `sap.gantt.GanttChartBase`.
       *
       * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
       * otherwise it will be bound to this `sap.gantt.GanttChartBase` itself.
       *
       * Event fired when the chart is double-clicked
       */
      attachChartDoubleClick(
        /**
         * An application-specific payload object that will be passed to the event handler along with the event
         * object when firing the event
         */
        oData: object,
        /**
         * The function to be called when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object to call the event handler with. Defaults to this `sap.gantt.GanttChartBase` itself
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Attaches event handler `fnFunction` to the {@link #event:chartDragEnter chartDragEnter} event of this
       * `sap.gantt.GanttChartBase`.
       *
       * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
       * otherwise it will be bound to this `sap.gantt.GanttChartBase` itself.
       */
      attachChartDragEnter(
        /**
         * An application-specific payload object that will be passed to the event handler along with the event
         * object when firing the event
         */
        oData: object,
        /**
         * The function to be called when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object to call the event handler with. Defaults to this `sap.gantt.GanttChartBase` itself
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Attaches event handler `fnFunction` to the {@link #event:chartDragLeave chartDragLeave} event of this
       * `sap.gantt.GanttChartBase`.
       *
       * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
       * otherwise it will be bound to this `sap.gantt.GanttChartBase` itself.
       */
      attachChartDragLeave(
        /**
         * An application-specific payload object that will be passed to the event handler along with the event
         * object when firing the event
         */
        oData: object,
        /**
         * The function to be called when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object to call the event handler with. Defaults to this `sap.gantt.GanttChartBase` itself
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Attaches event handler `fnFunction` to the {@link #event:chartMouseOver chartMouseOver} event of this
       * `sap.gantt.GanttChartBase`.
       *
       * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
       * otherwise it will be bound to this `sap.gantt.GanttChartBase` itself.
       *
       * Event is fired when a mouse-hover occurs in the graphic part.
       */
      attachChartMouseOver(
        /**
         * An application-specific payload object that will be passed to the event handler along with the event
         * object when firing the event
         */
        oData: object,
        /**
         * The function to be called when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object to call the event handler with. Defaults to this `sap.gantt.GanttChartBase` itself
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Attaches event handler `fnFunction` to the {@link #event:chartRightClick chartRightClick} event of this
       * `sap.gantt.GanttChartBase`.
       *
       * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
       * otherwise it will be bound to this `sap.gantt.GanttChartBase` itself.
       *
       * Event fired when the chart is right-clicked
       */
      attachChartRightClick(
        /**
         * An application-specific payload object that will be passed to the event handler along with the event
         * object when firing the event
         */
        oData: object,
        /**
         * The function to be called when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object to call the event handler with. Defaults to this `sap.gantt.GanttChartBase` itself
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Attaches event handler `fnFunction` to the {@link #event:ganttChartSwitchRequested ganttChartSwitchRequested}
       * event of this `sap.gantt.GanttChartBase`.
       *
       * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
       * otherwise it will be bound to this `sap.gantt.GanttChartBase` itself.
       *
       * Event fired when the hierarchy key has changed in the Gantt chart toolbar.
       */
      attachGanttChartSwitchRequested(
        /**
         * An application-specific payload object that will be passed to the event handler along with the event
         * object when firing the event
         */
        oData: object,
        /**
         * The function to be called when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object to call the event handler with. Defaults to this `sap.gantt.GanttChartBase` itself
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * @deprecated (since 1.44)
       *
       * Attaches event handler `fnFunction` to the {@link #event:horizontalScroll horizontalScroll} event of
       * this `sap.gantt.GanttChartBase`.
       *
       * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
       * otherwise it will be bound to this `sap.gantt.GanttChartBase` itself.
       *
       * Horizontal (time axis) scroll.
       *
       * If the horizontal scroll bar exists and synchronization is needed with other Gantt charts in the container,
       * use this event.
       */
      attachHorizontalScroll(
        /**
         * An application-specific payload object that will be passed to the event handler along with the event
         * object when firing the event
         */
        oData: object,
        /**
         * The function to be called when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object to call the event handler with. Defaults to this `sap.gantt.GanttChartBase` itself
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Attaches event handler `fnFunction` to the {@link #event:relationshipSelectionChange relationshipSelectionChange}
       * event of this `sap.gantt.GanttChartBase`.
       *
       * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
       * otherwise it will be bound to this `sap.gantt.GanttChartBase` itself.
       *
       * Event fired when the selection status of relationships changes.
       */
      attachRelationshipSelectionChange(
        /**
         * An application-specific payload object that will be passed to the event handler along with the event
         * object when firing the event
         */
        oData: object,
        /**
         * The function to be called when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object to call the event handler with. Defaults to this `sap.gantt.GanttChartBase` itself
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Attaches event handler `fnFunction` to the {@link #event:rowSelectionChange rowSelectionChange} event
       * of this `sap.gantt.GanttChartBase`.
       *
       * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
       * otherwise it will be bound to this `sap.gantt.GanttChartBase` itself.
       *
       * Event fired when the selection status of rows changes.
       */
      attachRowSelectionChange(
        /**
         * An application-specific payload object that will be passed to the event handler along with the event
         * object when firing the event
         */
        oData: object,
        /**
         * The function to be called when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object to call the event handler with. Defaults to this `sap.gantt.GanttChartBase` itself
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Attaches event handler `fnFunction` to the {@link #event:shapeDragEnd shapeDragEnd} event of this `sap.gantt.GanttChartBase`.
       *
       * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
       * otherwise it will be bound to this `sap.gantt.GanttChartBase` itself.
       *
       * Event fired when a drag-and-drop occurs on one or more selected shapes.
       */
      attachShapeDragEnd(
        /**
         * An application-specific payload object that will be passed to the event handler along with the event
         * object when firing the event
         */
        oData: object,
        /**
         * The function to be called when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object to call the event handler with. Defaults to this `sap.gantt.GanttChartBase` itself
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Attaches event handler `fnFunction` to the {@link #event:shapeMouseEnter shapeMouseEnter} event of this
       * `sap.gantt.GanttChartBase`.
       *
       * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
       * otherwise it will be bound to this `sap.gantt.GanttChartBase` itself.
       *
       * Event fired when the following conditions are met: The 'enableHover' property of Shape is set to true.
       * You hover the mouse on a shape and keep the mouse stationary for 500 millisecond or longer.
       */
      attachShapeMouseEnter(
        /**
         * An application-specific payload object that will be passed to the event handler along with the event
         * object when firing the event
         */
        oData: object,
        /**
         * The function to be called when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object to call the event handler with. Defaults to this `sap.gantt.GanttChartBase` itself
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Attaches event handler `fnFunction` to the {@link #event:shapeMouseLeave shapeMouseLeave} event of this
       * `sap.gantt.GanttChartBase`.
       *
       * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
       * otherwise it will be bound to this `sap.gantt.GanttChartBase` itself.
       *
       * Event fired when the following conditions are met: The 'enableHover' property of Shape is set to true.
       * You move the mouse out of a shape and keep the mouse stationary for 500 millisecond or longer.
       */
      attachShapeMouseLeave(
        /**
         * An application-specific payload object that will be passed to the event handler along with the event
         * object when firing the event
         */
        oData: object,
        /**
         * The function to be called when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object to call the event handler with. Defaults to this `sap.gantt.GanttChartBase` itself
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Attaches event handler `fnFunction` to the {@link #event:shapeResizeEnd shapeResizeEnd} event of this
       * `sap.gantt.GanttChartBase`.
       *
       * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
       * otherwise it will be bound to this `sap.gantt.GanttChartBase` itself.
       *
       * Event fired when a resizing occurs on a resized shape.
       */
      attachShapeResizeEnd(
        /**
         * An application-specific payload object that will be passed to the event handler along with the event
         * object when firing the event
         */
        oData: object,
        /**
         * The function to be called when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object to call the event handler with. Defaults to this `sap.gantt.GanttChartBase` itself
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Attaches event handler `fnFunction` to the {@link #event:shapeSelectionChange shapeSelectionChange} event
       * of this `sap.gantt.GanttChartBase`.
       *
       * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
       * otherwise it will be bound to this `sap.gantt.GanttChartBase` itself.
       *
       * Event fired when the selection status of shapes changes.
       */
      attachShapeSelectionChange(
        /**
         * An application-specific payload object that will be passed to the event handler along with the event
         * object when firing the event
         */
        oData: object,
        /**
         * The function to be called when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object to call the event handler with. Defaults to this `sap.gantt.GanttChartBase` itself
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Attaches event handler `fnFunction` to the {@link #event:splitterResize splitterResize} event of this
       * `sap.gantt.GanttChartBase`.
       *
       * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
       * otherwise it will be bound to this `sap.gantt.GanttChartBase` itself.
       *
       * Splitter (if exists) resized.
       *
       * If a splitter exists and synchronization is needed with other Gantt charts in the container, use this
       * event. You can listen for this event and obtain `zoomInfo`.
       */
      attachSplitterResize(
        /**
         * An application-specific payload object that will be passed to the event handler along with the event
         * object when firing the event
         */
        oData: object,
        /**
         * The function to be called when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object to call the event handler with. Defaults to this `sap.gantt.GanttChartBase` itself
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Attaches event handler `fnFunction` to the {@link #event:treeTableToggleEvent treeTableToggleEvent} event
       * of this `sap.gantt.GanttChartBase`.
       *
       * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
       * otherwise it will be bound to this `sap.gantt.GanttChartBase` itself.
       *
       * Event fired when toggle node of the tree table.
       */
      attachTreeTableToggleEvent(
        /**
         * An application-specific payload object that will be passed to the event handler along with the event
         * object when firing the event
         */
        oData: object,
        /**
         * The function to be called when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object to call the event handler with. Defaults to this `sap.gantt.GanttChartBase` itself
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * @deprecated (since 1.44)
       *
       * Attaches event handler `fnFunction` to the {@link #event:verticalScroll verticalScroll} event of this
       * `sap.gantt.GanttChartBase`.
       *
       * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
       * otherwise it will be bound to this `sap.gantt.GanttChartBase` itself.
       *
       * Vertical (row axis) scroll.
       *
       * If the vertical scroll bar exists and synchronization is needed with other Gantt charts in the container,
       * use this event.
       */
      attachVerticalScroll(
        /**
         * An application-specific payload object that will be passed to the event handler along with the event
         * object when firing the event
         */
        oData: object,
        /**
         * The function to be called when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object to call the event handler with. Defaults to this `sap.gantt.GanttChartBase` itself
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Binds aggregation {@link #getAdhocLines adhocLines} to model data.
       *
       * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
       * of the possible properties of `oBindingInfo`.
       */
      bindAdhocLines(
        /**
         * The binding information
         */
        oBindingInfo: object
      ): sap.gantt.GanttChartBase;
      /**
       * Binds aggregation {@link #getAxisTimeStrategy axisTimeStrategy} to model data.
       *
       * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
       * of the possible properties of `oBindingInfo`.
       */
      bindAxisTimeStrategy(
        /**
         * The binding information
         */
        oBindingInfo: object
      ): sap.gantt.GanttChartBase;
      /**
       * Binds aggregation {@link #getCalendarDef calendarDef} to model data.
       *
       * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
       * of the possible properties of `oBindingInfo`.
       */
      bindCalendarDef(
        /**
         * The binding information
         */
        oBindingInfo: object
      ): sap.gantt.GanttChartBase;
      /**
       * Binds aggregation {@link #getRelationships relationships} to model data.
       *
       * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
       * of the possible properties of `oBindingInfo`.
       */
      bindRelationships(
        /**
         * The binding information
         */
        oBindingInfo: object
      ): sap.gantt.GanttChartBase;
      /**
       * Binds aggregation {@link #getRows rows} to model data.
       *
       * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
       * of the possible properties of `oBindingInfo`.
       */
      bindRows(
        /**
         * The binding information
         */
        oBindingInfo: object
      ): sap.gantt.GanttChartBase;
      /**
       * Deselects a group of relationships specified by the aId array.
       */
      deselectRelationships(
        /**
         * List of IDs of the relationships to deselect
         */
        aId?: any[]
      ): sap.gantt.GanttChartBase;
      /**
       * Deselects a group of rows specified by the aId array.
       */
      deselectRows(
        /**
         * List of the rows that you want to deselect
         */
        aId?: any[]
      ): sap.gantt.GanttChartBase;
      /**
       * Deselects a group of shapes specified by the aId array.
       */
      deselectShapes(
        /**
         * List of IDs of the shapes to deselect
         */
        aId?: any[]
      ): sap.gantt.GanttChartBase;
      /**
       * Destroys all the adhocLines in the aggregation {@link #getAdhocLines adhocLines}.
       */
      destroyAdhocLines(): sap.gantt.GanttChartBase;
      /**
       * Destroys the axisTimeStrategy in the aggregation {@link #getAxisTimeStrategy axisTimeStrategy}.
       */
      destroyAxisTimeStrategy(): sap.gantt.GanttChartBase;
      /**
       * Destroys the calendarDef in the aggregation {@link #getCalendarDef calendarDef}.
       */
      destroyCalendarDef(): sap.gantt.GanttChartBase;
      /**
       * Destroys all the relationships in the aggregation {@link #getRelationships relationships}.
       */
      destroyRelationships(): sap.gantt.GanttChartBase;
      /**
       * Destroys all the rows in the aggregation {@link #getRows rows}.
       */
      destroyRows(): sap.gantt.GanttChartBase;
      /**
       * Detaches event handler `fnFunction` from the {@link #event:chartClick chartClick} event of this `sap.gantt.GanttChartBase`.
       *
       * The passed function and listener object must match the ones used for event registration.
       */
      detachChartClick(
        /**
         * The function to be called, when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object on which the given function had to be called
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Detaches event handler `fnFunction` from the {@link #event:chartDoubleClick chartDoubleClick} event of
       * this `sap.gantt.GanttChartBase`.
       *
       * The passed function and listener object must match the ones used for event registration.
       */
      detachChartDoubleClick(
        /**
         * The function to be called, when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object on which the given function had to be called
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Detaches event handler `fnFunction` from the {@link #event:chartDragEnter chartDragEnter} event of this
       * `sap.gantt.GanttChartBase`.
       *
       * The passed function and listener object must match the ones used for event registration.
       */
      detachChartDragEnter(
        /**
         * The function to be called, when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object on which the given function had to be called
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Detaches event handler `fnFunction` from the {@link #event:chartDragLeave chartDragLeave} event of this
       * `sap.gantt.GanttChartBase`.
       *
       * The passed function and listener object must match the ones used for event registration.
       */
      detachChartDragLeave(
        /**
         * The function to be called, when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object on which the given function had to be called
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Detaches event handler `fnFunction` from the {@link #event:chartMouseOver chartMouseOver} event of this
       * `sap.gantt.GanttChartBase`.
       *
       * The passed function and listener object must match the ones used for event registration.
       */
      detachChartMouseOver(
        /**
         * The function to be called, when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object on which the given function had to be called
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Detaches event handler `fnFunction` from the {@link #event:chartRightClick chartRightClick} event of
       * this `sap.gantt.GanttChartBase`.
       *
       * The passed function and listener object must match the ones used for event registration.
       */
      detachChartRightClick(
        /**
         * The function to be called, when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object on which the given function had to be called
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Detaches event handler `fnFunction` from the {@link #event:ganttChartSwitchRequested ganttChartSwitchRequested}
       * event of this `sap.gantt.GanttChartBase`.
       *
       * The passed function and listener object must match the ones used for event registration.
       */
      detachGanttChartSwitchRequested(
        /**
         * The function to be called, when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object on which the given function had to be called
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * @deprecated (since 1.44)
       *
       * Detaches event handler `fnFunction` from the {@link #event:horizontalScroll horizontalScroll} event of
       * this `sap.gantt.GanttChartBase`.
       *
       * The passed function and listener object must match the ones used for event registration.
       */
      detachHorizontalScroll(
        /**
         * The function to be called, when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object on which the given function had to be called
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Detaches event handler `fnFunction` from the {@link #event:relationshipSelectionChange relationshipSelectionChange}
       * event of this `sap.gantt.GanttChartBase`.
       *
       * The passed function and listener object must match the ones used for event registration.
       */
      detachRelationshipSelectionChange(
        /**
         * The function to be called, when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object on which the given function had to be called
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Detaches event handler `fnFunction` from the {@link #event:rowSelectionChange rowSelectionChange} event
       * of this `sap.gantt.GanttChartBase`.
       *
       * The passed function and listener object must match the ones used for event registration.
       */
      detachRowSelectionChange(
        /**
         * The function to be called, when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object on which the given function had to be called
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Detaches event handler `fnFunction` from the {@link #event:shapeDragEnd shapeDragEnd} event of this `sap.gantt.GanttChartBase`.
       *
       * The passed function and listener object must match the ones used for event registration.
       */
      detachShapeDragEnd(
        /**
         * The function to be called, when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object on which the given function had to be called
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Detaches event handler `fnFunction` from the {@link #event:shapeMouseEnter shapeMouseEnter} event of
       * this `sap.gantt.GanttChartBase`.
       *
       * The passed function and listener object must match the ones used for event registration.
       */
      detachShapeMouseEnter(
        /**
         * The function to be called, when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object on which the given function had to be called
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Detaches event handler `fnFunction` from the {@link #event:shapeMouseLeave shapeMouseLeave} event of
       * this `sap.gantt.GanttChartBase`.
       *
       * The passed function and listener object must match the ones used for event registration.
       */
      detachShapeMouseLeave(
        /**
         * The function to be called, when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object on which the given function had to be called
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Detaches event handler `fnFunction` from the {@link #event:shapeResizeEnd shapeResizeEnd} event of this
       * `sap.gantt.GanttChartBase`.
       *
       * The passed function and listener object must match the ones used for event registration.
       */
      detachShapeResizeEnd(
        /**
         * The function to be called, when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object on which the given function had to be called
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Detaches event handler `fnFunction` from the {@link #event:shapeSelectionChange shapeSelectionChange}
       * event of this `sap.gantt.GanttChartBase`.
       *
       * The passed function and listener object must match the ones used for event registration.
       */
      detachShapeSelectionChange(
        /**
         * The function to be called, when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object on which the given function had to be called
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Detaches event handler `fnFunction` from the {@link #event:splitterResize splitterResize} event of this
       * `sap.gantt.GanttChartBase`.
       *
       * The passed function and listener object must match the ones used for event registration.
       */
      detachSplitterResize(
        /**
         * The function to be called, when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object on which the given function had to be called
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Detaches event handler `fnFunction` from the {@link #event:treeTableToggleEvent treeTableToggleEvent}
       * event of this `sap.gantt.GanttChartBase`.
       *
       * The passed function and listener object must match the ones used for event registration.
       */
      detachTreeTableToggleEvent(
        /**
         * The function to be called, when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object on which the given function had to be called
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * @deprecated (since 1.44)
       *
       * Detaches event handler `fnFunction` from the {@link #event:verticalScroll verticalScroll} event of this
       * `sap.gantt.GanttChartBase`.
       *
       * The passed function and listener object must match the ones used for event registration.
       */
      detachVerticalScroll(
        /**
         * The function to be called, when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object on which the given function had to be called
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Expands the Gantt chart to the given level.
       * See:
       * 	sap.ui.table.TreeTable.expandToLevel
       */
      expandToLevel(
        /**
         * Level to be expanded to
         */
        iLevel: number
      ): sap.gantt.GanttChartBase;
      /**
       * Creates a new subclass of class sap.gantt.GanttChartBase with name `sClassName` and enriches it with
       * the information contained in `oClassInfo`.
       *
       * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
       */
      // @ts-ignore
      static extend(
        /**
         * Name of the class being created
         */
        sClassName: string,
        /**
         * Object literal with information about the class
         */
        oClassInfo?: object,
        /**
         * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
         */
        FNMetaImpl?: Function
      ): Function;
      /**
       * Fires event {@link #event:chartClick chartClick} to attached listeners.
       */
      fireChartClick(
        /**
         * Parameters to pass along with the event
         */
        mParameters?: {
          /**
           * Row object information of the current mouse point.
           */
          objectInfo?: object;
          /**
           * Leading row object information. null when it is the main row at current mouse point; main row information
           * if it is one of multiple expanded rows.
           */
          leadingRowInfo?: object;
          /**
           * Timestamp of the current mouse point.
           */
          timestamp?: string;
          /**
           * ID of SVG.
           */
          svgId?: string;
          /**
           * [x, y] Coordinate of the current mouse point in the SVG coordinate system.
           */
          svgCoordinate?: number[];
          /**
           * Effective mode. It can be the current Gantt Chart mode or the mode derived from the chart scheme mode.
           */
          effectingMode?: string;
          /**
           * Original JQuery event object.
           */
          originEvent?: object;
        }
      ): sap.gantt.GanttChartBase;
      /**
       * Fires event {@link #event:chartDoubleClick chartDoubleClick} to attached listeners.
       */
      fireChartDoubleClick(
        /**
         * Parameters to pass along with the event
         */
        mParameters?: {
          /**
           * Row object information of the current mouse point.
           */
          objectInfo?: object;
          /**
           * Leading row object information. null when it is the main row at current mouse point; main row information
           * if it is one of multiple expanded rows.
           */
          leadingRowInfo?: object;
          /**
           * Timestamp of the current mouse point.
           */
          timestamp?: string;
          /**
           * ID of SVG.
           */
          svgId?: string;
          /**
           * [x, y] Coordinate of the current mouse point in the SVG coordinate system.
           */
          svgCoordinate?: number[];
          /**
           * Effective mode. It can be the current Gantt Chart mode or the mode derived from the chart scheme mode.
           */
          effectingMode?: string;
          /**
           * Original JQuery event object.
           */
          originEvent?: object;
        }
      ): sap.gantt.GanttChartBase;
      /**
       * Fires event {@link #event:chartDragEnter chartDragEnter} to attached listeners.
       */
      fireChartDragEnter(
        /**
         * Parameters to pass along with the event
         */
        mParameters?: {
          originEvent?: object;
        }
      ): sap.gantt.GanttChartBase;
      /**
       * Fires event {@link #event:chartDragLeave chartDragLeave} to attached listeners.
       */
      fireChartDragLeave(
        /**
         * Parameters to pass along with the event
         */
        mParameters?: {
          originEvent?: object;

          draggingSource?: object;
        }
      ): sap.gantt.GanttChartBase;
      /**
       * Fires event {@link #event:chartMouseOver chartMouseOver} to attached listeners.
       */
      fireChartMouseOver(
        /**
         * Parameters to pass along with the event
         */
        mParameters?: {
          /**
           * Row object information of the current mouse point.
           */
          objectInfo?: object;
          /**
           * Leading row object information. null when it is the main row at current mouse point; main row information
           * if it is one of multiple expanded rows.
           */
          leadingRowInfo?: object;
          /**
           * Timestamp of the current mouse point.
           */
          timestamp?: string;
          /**
           * ID of SVG.
           */
          svgId?: string;
          /**
           * [x, y] Coordinate of the current mouse point in the SVG coordinate system.
           */
          svgCoordinate?: number[];
          /**
           * Effective mode. It can be the current Gantt Chart mode or the mode derived from the chart scheme mode.
           */
          effectingMode?: string;
          /**
           * Original JQuery event object.
           */
          originEvent?: object;
        }
      ): sap.gantt.GanttChartBase;
      /**
       * Fires event {@link #event:chartRightClick chartRightClick} to attached listeners.
       */
      fireChartRightClick(
        /**
         * Parameters to pass along with the event
         */
        mParameters?: {
          /**
           * Row object information of the current mouse point.
           */
          objectInfo?: object;
          /**
           * Leading row object information. null when it is the main row at current mouse point; main row information
           * if it is one of multiple expanded rows.
           */
          leadingRowInfo?: object;
          /**
           * Timestamp of the current mouse point.
           */
          timestamp?: string;
          /**
           * ID of SVG.
           */
          svgId?: string;
          /**
           * [x, y] Coordinate of the current mouse point in the SVG coordinate system.
           */
          svgCoordinate?: number[];
          /**
           * Effective mode. It can be the current Gantt Chart mode or a mode derived from the chart scheme mode.
           */
          effectingMode?: string;
          /**
           * Original JQuery event object.
           */
          originEvent?: object;
        }
      ): sap.gantt.GanttChartBase;
      /**
       * Fires event {@link #event:ganttChartSwitchRequested ganttChartSwitchRequested} to attached listeners.
       */
      fireGanttChartSwitchRequested(
        /**
         * Parameters to pass along with the event
         */
        mParameters?: {
          /**
           * Target hierarchy key.
           */
          hierarchyKey?: string;
        }
      ): sap.gantt.GanttChartBase;
      /**
       * @deprecated (since 1.44)
       *
       * Fires event {@link #event:horizontalScroll horizontalScroll} to attached listeners.
       */
      fireHorizontalScroll(
        /**
         * Parameters to pass along with the event
         */
        mParameters?: {
          /**
           * Scroll steps.
           */
          scrollSteps?: number;
          /**
           * The start time of Gantt Chart visible area when the event fired
           */
          startTime?: string;
          /**
           * The end time of Gantt Chart visible area when the event fired
           */
          endTime?: string;
        }
      ): sap.gantt.GanttChartBase;
      /**
       * Fires event {@link #event:relationshipSelectionChange relationshipSelectionChange} to attached listeners.
       */
      fireRelationshipSelectionChange(
        /**
         * Parameters to pass along with the event
         */
        mParameters?: {
          /**
           * Original JQuery event object.
           */
          originEvent?: object;
        }
      ): sap.gantt.GanttChartBase;
      /**
       * Fires event {@link #event:rowSelectionChange rowSelectionChange} to attached listeners.
       */
      fireRowSelectionChange(
        /**
         * Parameters to pass along with the event
         */
        mParameters?: {
          /**
           * Original JQuery event object.
           */
          originEvent?: object;
        }
      ): sap.gantt.GanttChartBase;
      /**
       * Fires event {@link #event:shapeDragEnd shapeDragEnd} to attached listeners.
       */
      fireShapeDragEnd(
        /**
         * Parameters to pass along with the event
         */
        mParameters?: {
          /**
           * Original JQuery event object.
           */
          originEvent?: object;
          /**
           * List of source shape data.
           */
          sourceShapeData?: object[];
          /**
           * Source SVG ID.
           */
          sourceSvgId?: string;
          /**
           * Information about the drop position and target row. It contains the following properties:
           * 	 - shapeTimestamp startTime and endTime of a dropped shape. This property is added to support the newly
           * 			introduced drag-and-drop behaviors. For more information, see `sap.gantt.dragdrop.GhostAlignment`.
           * 	 - cursorTimestamp Cursor timestamp when a shape is dropped. This property is added to support the newly
           * 			introduced drag-and-drop behaviors. For more information, see `sap.gantt.dragdrop.GhostAlignment`.
           * 	 - mode Mode of the current view.
           * 	 - objectInfo Data of the row where you dropped the shape.   Note: The original property 'mouseTimestamp',
           * 			which contains the startTime/endTime of a dropped shape has been deprecated.
           */
          targetData?: object;
          /**
           * Target SVG ID.
           */
          targetSvgId?: string;
        }
      ): sap.gantt.GanttChartBase;
      /**
       * Fires event {@link #event:shapeMouseEnter shapeMouseEnter} to attached listeners.
       */
      fireShapeMouseEnter(
        /**
         * Parameters to pass along with the event
         */
        mParameters?: {
          /**
           * The data of the shape which fires this event.
           */
          shapeData?: object;
          /**
           * The mouse position relative to the left edge of the document.
           */
          pageX?: number;
          /**
           * The mouse position relative to the top edge of the document.
           */
          pageY?: number;
          /**
           * Original JQuery event object.
           */
          originEvent?: object;
        }
      ): sap.gantt.GanttChartBase;
      /**
       * Fires event {@link #event:shapeMouseLeave shapeMouseLeave} to attached listeners.
       */
      fireShapeMouseLeave(
        /**
         * Parameters to pass along with the event
         */
        mParameters?: {
          /**
           * The data of the shape which fires this event.
           */
          shapeData?: object;
          /**
           * Original JQuery event object.
           */
          originEvent?: object;
        }
      ): sap.gantt.GanttChartBase;
      /**
       * Fires event {@link #event:shapeResizeEnd shapeResizeEnd} to attached listeners.
       */
      fireShapeResizeEnd(
        /**
         * Parameters to pass along with the event
         */
        mParameters?: {
          /**
           * UID of the resized shape.
           */
          shapeUid?: string;
          /**
           * Row object of the resizing shape.
           */
          rowObject?: object;
          /**
           * Original shape time array, including the start time and end time.
           */
          oldTime?: string[];
          /**
           * New shape time array, including the start time and end time.
           */
          newTime?: string[];
        }
      ): sap.gantt.GanttChartBase;
      /**
       * Fires event {@link #event:shapeSelectionChange shapeSelectionChange} to attached listeners.
       */
      fireShapeSelectionChange(
        /**
         * Parameters to pass along with the event
         */
        mParameters?: {
          /**
           * Original JQuery event object.
           */
          originEvent?: object;
        }
      ): sap.gantt.GanttChartBase;
      /**
       * Fires event {@link #event:splitterResize splitterResize} to attached listeners.
       */
      fireSplitterResize(
        /**
         * Parameters to pass along with the event
         */
        mParameters?: {
          /**
           * ID of the source control.
           */
          id?: string;
          /**
           * Old size in the form of [height, width].
           */
          oldSizes?: number[];
          /**
           * New size in the form of [height, width].
           */
          newSizes?: number[];
          /**
           * Zoom information.
           *
           * This object contains all related information for the listener to get the current zoom level of the time
           * axis. Usually `zoomInfo` contains the following information:
           * 	 - `"base"` - Base for zooming calculation.
           * 	`"sGranularity"`: "4day", - Zoom level that is used to calculate the zoom base; it is taken from timeAxis.granularity.
           *
           * 	 - `"fScale"`: 3840000 - Base scale determined by zoomStrategy level and now().
           * 	 - `"determinedByConfig"` - Zoom level calculated by configuration `timeAxis`.
           * 	`"fRate"`: 1, - Zoom rate determined by configuration timeAxis.granularity.
           * 	 - `"fMaxRate"`: 384, - Maximum zoom rate determined by configuration timeAxis.finestGranularity.
           * 	 - `"fMinRate"`: 0.02197802197802198 - Minimum zoom rate determined by configuration timeAxis.coarsestGranularity.
           *
           * 	 - `"determinedByChartWidth"` - Zoom level calculated by the SVG width.
           * 	`"fMinRate"`: 0.0279009617614573, - Minimum zoom rate determined by the chart width and configuration
           * timeAxis.planHorizon.
           * 	 - `"fSuitableRate"`: 0.5078804440909039 - Suitable zoom rate determined by the chart width and configuration
           * 			timeAxis.initHorizon.
           * 	 - `iChartWidth`: 417 - Chart width in pixel.
           */
          zoomInfo?: object;
        }
      ): sap.gantt.GanttChartBase;
      /**
       * Fires event {@link #event:treeTableToggleEvent treeTableToggleEvent} to attached listeners.
       */
      fireTreeTableToggleEvent(
        /**
         * Parameters to pass along with the event
         */
        mParameters?: {
          /**
           * The index of the expanded/collapsed row.
           */
          rowIndex?: number;
          /**
           * The binding context of the selected row.
           */
          rowContext?: object;
          /**
           * flag whether the node has been expanded or collapsed.
           */
          expanded?: boolean;
        }
      ): sap.gantt.GanttChartBase;
      /**
       * @deprecated (since 1.44)
       *
       * Fires event {@link #event:verticalScroll verticalScroll} to attached listeners.
       */
      fireVerticalScroll(
        /**
         * Parameters to pass along with the event
         */
        mParameters?: {
          /**
           * Scroll steps.
           */
          scrollSteps?: number;
        }
      ): sap.gantt.GanttChartBase;
      /**
       * Gets current value of property {@link #getAdhocLineLayer adhocLineLayer}.
       *
       * Specifies on which layer adhoc lines reside. By default, adhoc lines are on top of all other shapes and
       * patterns.
       *
       * Default value is `sap.gantt.AdhocLineLayer.Top`.
       */
      getAdhocLineLayer(): string;
      /**
       * Gets content of aggregation {@link #getAdhocLines adhocLines}.
       *
       * The aggregation is used to store configuration of adhoc lines, adhoc lines represent milestones and events
       * in axis time.
       */
      getAdhocLines(): sap.gantt.AdhocLine[];
      /**
       * Gets the selected rows, shapes, and relationships.
       */
      getAllSelections(): object;
      /**
       * Provides the Ordinal Axis that is used to draw the SVG graphic.
       *
       * This method is intended to allow access to the ordinal axis. Do not change the ordinal axis. All subclasses
       * must provide implementations.
       */
      getAxisOrdinal(): sap.gantt.misc.AxisOrdinal;
      /**
       * Provides the Time Axis that is used to draw the SVG graphic.
       *
       * This method is intended to allow access to the time axis. Do not change the time axis. All subclasses
       * must provide implementations.
       */
      getAxisTime(): any;
      /**
       * Gets content of aggregation {@link #getAxisTimeStrategy axisTimeStrategy}.
       *
       * This aggregation controls the zoom strategies and zoom rate in Gantt Chart.
       */
      getAxisTimeStrategy(): sap.gantt.axistime.AxisTimeStrategyBase;
      /**
       * Gets current value of property {@link #getBaseRowHeight baseRowHeight}.
       *
       * row height of Gantt Chart. If this property is set, then it will change the Table row height on the left
       */
      getBaseRowHeight(): number;
      /**
       * Gets content of aggregation {@link #getCalendarDef calendarDef}.
       *
       * Paint servers consumed by special shape `sap.gantt.shape.cal.Calendar`.
       *
       * This aggregation is designed to improve performance of calendar shapes. Rows usually share a similar
       * definition with calendar shapes. It is possible to define a Calendar paint server to draw only one rectangle
       * for each row. Notes for classes extended from `sap.gantt.def.cal.CalendarDef`: Different from property
       * `paintServerDefs`, paint servers defined here must implement method `getDefNode()` instead of method
       * `getDefString()`.
       */
      getCalendarDef(): sap.gantt.def.cal.CalendarDefs;
      /**
       * Gets current value of property {@link #getChartSchemes chartSchemes}.
       *
       * Configuration of chart schemes.
       *
       * List of available chart schemes. If not provided, a default configuration is provided. We recommend that
       * you set the type of this argument to `sap.gantt.config.ChartScheme[]`. Otherwise some properties you
       * set may not function properly.
       *
       * Limitation: It's defined as a property thus can not be used in XML View
       *
       * Default value is `sap.gantt.config.DEFAULT_CHART_SCHEMES`.
       */
      getChartSchemes(): object[];
      /**
       * Gets current value of property {@link #getEnableAdhocLine enableAdhocLine}.
       *
       * Switch to show and hide adhoc lines representing milestones and events along the time axis
       *
       * Default value is `true`.
       */
      getEnableAdhocLine(): boolean;
      /**
       * Gets current value of property {@link #getEnableCursorLine enableCursorLine}.
       *
       * Switch to show and hide the cursor line that follows the cursor.
       *
       * Default value is `true`.
       */
      getEnableCursorLine(): boolean;
      /**
       * Gets current value of property {@link #getEnableNowLine enableNowLine}.
       *
       * Switch to show and hide the present time indicator
       *
       * Default value is `true`.
       */
      getEnableNowLine(): boolean;
      /**
       * Gets current value of property {@link #getEnableShapeTimeDisplay enableShapeTimeDisplay}.
       *
       * Switch to show or hide the start time and end time of a shape when you drag it along the time line
       *
       * Default value is `false`.
       */
      getEnableShapeTimeDisplay(): boolean;
      /**
       * Gets current value of property {@link #getEnableVerticalLine enableVerticalLine}.
       *
       * Switch to show and hide vertical lines representing intervals along the time axis
       *
       * Default value is `true`.
       */
      getEnableVerticalLine(): boolean;
      /**
       * Gets current value of property {@link #getGhostAlignment ghostAlignment}.
       *
       * Defines how to adjust the relative position between a draggable shape and the mouse pointer.
       *
       * Default value is `sap.gantt.dragdrop.GhostAlignment.None`.
       */
      getGhostAlignment(): string;
      /**
       * Gets current value of property {@link #getHeight height}.
       *
       * Height of the control.
       *
       * Default value is `100%`.
       */
      getHeight(): sap.ui.core.CSSSize;
      /**
       * Gets current value of property {@link #getHierarchies hierarchies}.
       *
       * Configuration of hierarchies.
       *
       * List of available hierarchies. If not provided, a default configuration is provided. We recommend that
       * you set the type of this argument to `sap.gantt.config.Hierarchy[]`. Otherwise some properties you set
       * may not function properly.
       *
       * Limitation: It's defined as a property thus can not be used in XML View
       *
       * Default value is `sap.gantt.config.DEFAULT_HIERARCHYS`.
       */
      getHierarchies(): object[];
      /**
       * Gets current value of property {@link #getHierarchyKey hierarchyKey}.
       *
       * Current hierarchy key referencing from configuration property `hierarchies`.
       *
       * If `source select group` is enabled in the Gantt chart toolbar, the current hierarchy name referenced
       * from `hierarchies` by this property is shown. For applications that do not require this function, this
       * property can be ignored and a default value is used.
       *
       * Default value is `sap.gantt.config.DEFAULT_HIERARCHY_KEY`.
       */
      getHierarchyKey(): string;
      /**
       * Gets current value of property {@link #getLocale locale}.
       *
       * Configuration of locale settings.
       *
       * Most locale settings can be configured in sap.ui.configuration objects. Only the time zone and day-light-saving
       * time option are provided by locale settings. We recommend that you set the type of this argument to `sap.gantt.config.Locale`.
       * Otherwise some properties you set may not function properly.
       *
       * Limitation: It's defined as a property thus can not be used in XML View
       *
       * Default value is `sap.gantt.config.DEFAULT_LOCALE_CET`.
       */
      getLocale(): object;
      /**
       * Returns a metadata object for class sap.gantt.GanttChartBase.
       */
      // @ts-ignore
      static getMetadata(): sap.ui.base.Metadata;
      /**
       * Gets current value of property {@link #getMode mode}.
       *
       * Current mode of the Gantt chart.
       *
       * If no value is provided, GanttChart uses a default mode key.
       *
       * Default value is `sap.gantt.config.DEFAULT_MODE_KEY`.
       */
      getMode(): string;
      /**
       * Gets current value of property {@link #getModes modes}.
       *
       * Configuration of available modes.
       *
       * List of available modes. To apply modes to toolbar and shapes, further configuration is needed. If not
       * provided, a default configuration is provided. We recommend that you set the type of this argument to
       * `sap.gantt.config.Mode[]`. Otherwise some properties you set may not function properly.
       *
       * Limitation: It's defined as a property thus can not be used in XML View
       *
       * Default value is `sap.gantt.config.DEFAULT_MODES`.
       */
      getModes(): object[];
      /**
       * @SINCE 1.68
       *
       * Gets current value of property {@link #getNowLineInUTC nowLineInUTC}.
       *
       * Flag whether to show the `nowLine` in UTC or in local time.
       *
       * Default value is `true`.
       */
      getNowLineInUTC(): boolean;
      /**
       * Gets current value of property {@link #getObjectTypes objectTypes}.
       *
       * Configuration of object types.
       *
       * List of available object types. If not provided, a default configuration is provided. We recommend that
       * you set the type of this argument to `sap.gantt.config.ObjectType[]`. Otherwise some properties you set
       * may not function properly.
       *
       * Limitation: It's defined as a property thus can not be used in XML View
       *
       * Default value is `sap.gantt.config.DEFAULT_OBJECT_TYPES`.
       */
      getObjectTypes(): object[];
      /**
       * Gets content of aggregation {@link #getRelationships relationships}.
       *
       * Relationships of shapes carried by rows.
       *
       * Similar to rows, this aggregation does not request templates either. Relationships are a special shape
       * with a category of `"crossRowShape"`. How relationships are drawn is also specified in configuration
       * property `shapes`.
       */
      getRelationships(): sap.ui.core.Control[];
      /**
       * Gets a row object by the corresponding shape UID.
       */
      getRowByShapeUid(
        /**
         * Shape UID
         */
        sShapeUid?: string
      ): object;
      /**
       * Gets content of aggregation {@link #getRows rows}.
       *
       * Rows of `sap.gantt.GanttChartBase`
       *
       * This aggregation is delegated to `sap.gantt.table.TreeTable`. Rows are provide a base for shapes with
       * a category of `"InRowShape"`. The configuration in property `shapes` determines how the shapes are drawn.
       */
      getRows(): sap.ui.core.Control[];
      /**
       * Gets all the selected relationships.
       */
      getSelectedRelationships(): any[];
      /**
       * Selects shape data or row data by UI ID (UID).
       *
       * UID is generated by Gantt Chart to identify the appearance of shape data and row data. You can retrieve
       * UIDs by certain events. The current implementation only supports shape selection by UID.
       */
      getSelectedRows(
        /**
         * of the UIDs of the UI elements to be selected
         */
        aUid: any[]
      ): any[];
      /**
       * Gets the shape data of the selected shapes.
       */
      getSelectedShapes(): any[];
      /**
       * @deprecated - Please use `tableProperties`(e.g. `setTableproperties({selectionMode: "None"})`) to control
       * table selection mode, and `shapeSelectionMode`(e.g. `setShapeSelectionMode("None")`) to control shape
       * selection mode.
       *
       * Gets current value of property {@link #getSelectionMode selectionMode}.
       *
       * Selection mode for GanttChart
       *
       * This property controls whether multiToggle or multi-selection mode is enabled for the tree table and
       * for shapes. It may also affect the visual appearance, such as whether check boxes are available for selection.
       * From version 1.40 to upper versions, multi is replaced by multiToggle selection mode in tree table
       *
       * Default value is `MultiWithKeyboard`.
       */
      getSelectionMode(): sap.gantt.SelectionMode;
      /**
       * Gets current value of property {@link #getSelectionPanelSize selectionPanelSize}.
       *
       * This property control the size of the selection panel. The value will be overwritten by property `selectionPanelSize`
       * in `sap.gantt.config.ContainerLayout` if you are using GanttChartContainer
       *
       * In the current library, `sap.gantt.GanttChart` does not have a selection panel. `sap.gantt.GanttChartWithTable`
       * has a selection panel implemented by `sap.ui.table.TreeTable`.
       *
       * Default value is `30%`.
       */
      getSelectionPanelSize(): sap.ui.core.CSSSize;
      /**
       * Gets current value of property {@link #getShapeDataNames shapeDataNames}.
       *
       * Configuration of shape data names and the attribute in raw data that serves as 'id'.
       *
       * This property value should be an array, either an array of string, each string represents one available
       * shape data name, or an array of object, each object specifies the shape data name and data attribute
       * that will serves as 'id'. This configuration must be provided if SVG graphics are needed.
       *
       * Example: ` new sap.gantt.GanttChartWithTable({ shapeDataNames: ["task", "order"], shapes: [ new sap.gantt.shape.Shape({
       * key: "calendar", shapeDataName: "task" shapeClassName: "sap.gantt.shape.Rectangle", // ... }) ] // ...
       * }); `
       *
       * or in XMLView ` <GanttChartWithTable shapeDataNames="task,order"> </GanttChartWithTable>
       * `
       *
       * Default value is `[]`.
       */
      getShapeDataNames(): sap.gantt.GenericArray;
      /**
       * Gets current value of property {@link #getShapes shapes}.
       *
       * Configuration of shape data against shape classes.
       *
       * List of available shapes. The shapes configured in this list are initialized inside `sap.gantt.GanttChartBase`.
       * Note that for JSON data binding, this configuration supports deep structured data structures. For ODATA
       * binding, only one level is supported. We recommend that you set the type of this argument to `sap.gantt.config.Shape[]`.
       * Otherwise some properties you set may not function properly.
       *
       * Default value is `[]`.
       */
      getShapes(): object[];
      /**
       * Gets current value of property {@link #getShapeSelectionMode shapeSelectionMode}.
       *
       * Selection mode for shape
       *
       * This property controls 4 shape selection modes(MultiWithKeyboard, Multiple, Single, None). You can use
       * `setShapeSelectionMode("None")` to set shape selection mode.
       *
       * Default value is `MultiWithKeyboard`.
       */
      getShapeSelectionMode(): sap.gantt.SelectionMode;
      /**
       * Gets current value of property {@link #getSvgDefs svgDefs}.
       *
       * SVG reusable element definitions.
       *
       * If this property is provided, the paint server definition of the SVG is rendered. Method `getDefString()`
       * should be implemented by all paint server classes that are passed in in this property. We recommend that
       * you set the type of this argument to `sap.gantt.def.SvgDefs`. Otherwise some properties you set may not
       * function properly.
       *
       * Limitation: It's defined as a property thus can not be used in XML View
       */
      getSvgDefs(): object;
      /**
       * Get exposed TreeTable properties
       */
      getTableProperties(): Object;
      /**
       * @deprecated (since 1.44) - replaced by aggregation 'axisTimeStrategy'. Planning horizon, initial horizon,
       * and zoom level can be configured with this property. If not provided, a default configuration is provided.
       * We recommend that you set the type of this argument to `sap.gantt.config.TimeAxis`. Otherwise some properties
       * you set may not function properly.
       *
       * Limitation: It's defined as a property thus can not be used in XML View
       *
       * Gets current value of property {@link #getTimeAxis timeAxis}.
       *
       * Configuration of the time axis.
       *
       * Default value is `sap.gantt.config.DEFAULT_TIME_AXIS`.
       */
      getTimeAxis(): object;
      /**
       * @deprecated (since 1.44) - please use sap.gantt.axistime.AxisTimeStrategy to change the zoom rate
       *
       * Gets current value of property {@link #getTimeZoomRate timeZoomRate}.
       *
       * Zoom level in float.
       *
       * This property allows application developers to control the zoom level. When GanttChart is embedded in
       * `sap.gantt.GanttChartContainer`, you do not have to manage this property.
       *
       * Default value is `1`.
       */
      getTimeZoomRate(): number;
      /**
       * Gets current value of property {@link #getToolbarSchemes toolbarSchemes}.
       *
       * Configuration of toolbar schemes.
       *
       * List of available toolbar schemes. If not provided, a default configuration is provided. We recommend
       * that you set the type of this argument to `sap.gantt.config.ToolbarScheme[]`. Otherwise some properties
       * you set may not function properly.
       *
       * Limitation: It's defined as a property thus can not be used in XML View
       *
       * Default value is `sap.gantt.config.DEFAULT_GANTTCHART_TOOLBAR_SCHEMES`.
       */
      getToolbarSchemes(): object[];
      /**
       * Gets current value of property {@link #getWidth width}.
       *
       * Width of the control.
       *
       * Default value is `100%`.
       */
      getWidth(): sap.ui.core.CSSSize;
      /**
       * Default event handler for the internal event expandChartChange from global TOOLBAR.
       */
      handleExpandChartChange(
        /**
         * expand or collapse the selected row
         */
        bExpanded: boolean,
        /**
         * bound chart scheme
         */
        aChartSchemes: any[],
        /**
         * user selected row indices
         */
        aSelectedIndices: any[]
      ): void;
      /**
       * Checks for the provided `sap.gantt.AdhocLine` in the aggregation {@link #getAdhocLines adhocLines}. and
       * returns its index if found or -1 otherwise.
       */
      indexOfAdhocLine(
        /**
         * The adhocLine whose index is looked for
         */
        oAdhocLine: sap.gantt.AdhocLine
      ): number;
      /**
       * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getRelationships relationships}.
       * and returns its index if found or -1 otherwise.
       */
      indexOfRelationship(
        /**
         * The relationship whose index is looked for
         */
        oRelationship: sap.ui.core.Control
      ): number;
      /**
       * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getRows rows}. and returns its
       * index if found or -1 otherwise.
       */
      indexOfRow(
        /**
         * The row whose index is looked for
         */
        oRow: sap.ui.core.Control
      ): number;
      /**
       * Initializes the GanttChart instance after creation.
       */
      // @ts-ignore
      init(): void;
      /**
       * Inserts a adhocLine into the aggregation {@link #getAdhocLines adhocLines}.
       */
      insertAdhocLine(
        /**
         * The adhocLine to insert; if empty, nothing is inserted
         */
        oAdhocLine: sap.gantt.AdhocLine,
        /**
         * The `0`-based index the adhocLine should be inserted at; for a negative value of `iIndex`, the adhocLine
         * is inserted at position 0; for a value greater than the current size of the aggregation, the adhocLine
         * is inserted at the last position
         */
        iIndex: number
      ): sap.gantt.GanttChartBase;
      /**
       * Inserts a relationship into the aggregation {@link #getRelationships relationships}.
       */
      insertRelationship(
        /**
         * The relationship to insert; if empty, nothing is inserted
         */
        oRelationship: sap.ui.core.Control,
        /**
         * The `0`-based index the relationship should be inserted at; for a negative value of `iIndex`, the relationship
         * is inserted at position 0; for a value greater than the current size of the aggregation, the relationship
         * is inserted at the last position
         */
        iIndex: number
      ): sap.gantt.GanttChartBase;
      /**
       * Inserts a row into the aggregation {@link #getRows rows}.
       */
      insertRow(
        /**
         * The row to insert; if empty, nothing is inserted
         */
        oRow: sap.ui.core.Control,
        /**
         * The `0`-based index the row should be inserted at; for a negative value of `iIndex`, the row is inserted
         * at position 0; for a value greater than the current size of the aggregation, the row is inserted at the
         * last position
         */
        iIndex: number
      ): sap.gantt.GanttChartBase;
      /**
       * Jumps to a given time.
       *
       * This method sets the position of the visible area to a certain timestamp. It can be used to implement
       * the function of Jump To First, Jump To Last, and Jump To Current.
       *
       * A Redraw of SVG is triggered.
       */
      jumpToPosition(
        /**
         * Accepted value is a 14-digit timestamp or a Date object.
         */
        vDate: any
      ): void;
      /**
       * Notifies that the data source has changed.
       */
      notifySourceChange(): void;
      /**
       * Removes a adhocLine from the aggregation {@link #getAdhocLines adhocLines}.
       */
      removeAdhocLine(
        /**
         * The adhocLine to remove or its index or id
         */
        vAdhocLine: number | string | sap.gantt.AdhocLine
      ): sap.gantt.AdhocLine;
      /**
       * Removes all the controls from the aggregation {@link #getAdhocLines adhocLines}.
       *
       * Additionally, it unregisters them from the hosting UIArea.
       */
      removeAllAdhocLines(): sap.gantt.AdhocLine[];
      /**
       * Removes all the controls from the aggregation {@link #getRelationships relationships}.
       *
       * Additionally, it unregisters them from the hosting UIArea.
       */
      removeAllRelationships(): sap.ui.core.Control[];
      /**
       * Removes all the controls from the aggregation {@link #getRows rows}.
       *
       * Additionally, it unregisters them from the hosting UIArea.
       */
      removeAllRows(): sap.ui.core.Control[];
      /**
       * Removes a relationship from the aggregation {@link #getRelationships relationships}.
       */
      removeRelationship(
        /**
         * The relationship to remove or its index or id
         */
        vRelationship: number | string | sap.ui.core.Control
      ): sap.ui.core.Control;
      /**
       * Removes a row from the aggregation {@link #getRows rows}.
       */
      removeRow(
        /**
         * The row to remove or its index or id
         */
        vRow: number | string | sap.ui.core.Control
      ): sap.ui.core.Control;
      /**
       * Selects a group of relationships specified by the aId array. Alternatively, this function deselects all
       * selected relationships if aId is a null list and bExclusive is true.
       */
      selectRelationships(
        /**
         * List of IDs of the relationships to select
         */
        aId?: any[],
        /**
         * Whether or not to deselect all selected shapes when aId is null
         */
        bExclusive?: boolean
      ): sap.gantt.GanttChartBase;
      /**
       * Selects a group of rows specified by the aId array.
       */
      selectRows(
        /**
         * List of IDs of the rows to select
         */
        aId?: any[],
        /**
         * Whether or not to deselect all selected rows when aId is null
         */
        bExclusive?: boolean
      ): sap.gantt.GanttChartBase;
      /**
       * Selects rows and all shapes contained in those rows specified by an array of row IDs. Alternatively,
       * this function deselects all selected rows and shapes in those rows if the row ID array is null and bExclusive
       * is true.
       */
      selectRowsAndShapes(
        /**
         * List of IDs of the rows to select
         */
        aRowId?: any[],
        /**
         * Whether or not to deselect all selected rows and shapes when aRowId is null
         */
        bExclusive?: boolean
      ): sap.gantt.GanttChartBase;
      /**
       * Selects a group of shapes specified by the aId array. Alternatively, this function deselects all selected
       * shapes when aId is a null list and bExclusive is true.
       */
      selectShapes(
        /**
         * List of the IDs of the shapes to select
         */
        aId?: any[],
        /**
         * Whether or not to deselect all selected shapes when aId is null
         */
        bExclusive?: boolean
      ): sap.gantt.GanttChartBase;
      /**
       * Sets a new value for property {@link #getAdhocLineLayer adhocLineLayer}.
       *
       * Specifies on which layer adhoc lines reside. By default, adhoc lines are on top of all other shapes and
       * patterns.
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       *
       * Default value is `sap.gantt.AdhocLineLayer.Top`.
       */
      setAdhocLineLayer(
        /**
         * New value for property `adhocLineLayer`
         */
        sAdhocLineLayer: string
      ): sap.gantt.GanttChartBase;
      /**
       * Sets the aggregated {@link #getAxisTimeStrategy axisTimeStrategy}.
       */
      setAxisTimeStrategy(
        /**
         * The axisTimeStrategy to set
         */
        oAxisTimeStrategy: sap.gantt.axistime.AxisTimeStrategyBase
      ): sap.gantt.GanttChartBase;
      /**
       * Sets a new value for property {@link #getBaseRowHeight baseRowHeight}.
       *
       * row height of Gantt Chart. If this property is set, then it will change the Table row height on the left
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       */
      setBaseRowHeight(
        /**
         * New value for property `baseRowHeight`
         */
        iBaseRowHeight: number
      ): sap.gantt.GanttChartBase;
      /**
       * Sets the aggregated {@link #getCalendarDef calendarDef}.
       */
      setCalendarDef(
        /**
         * The calendarDef to set
         */
        oCalendarDef: sap.gantt.def.cal.CalendarDefs
      ): sap.gantt.GanttChartBase;
      /**
       * Sets a new value for property {@link #getChartSchemes chartSchemes}.
       *
       * Configuration of chart schemes.
       *
       * List of available chart schemes. If not provided, a default configuration is provided. We recommend that
       * you set the type of this argument to `sap.gantt.config.ChartScheme[]`. Otherwise some properties you
       * set may not function properly.
       *
       * Limitation: It's defined as a property thus can not be used in XML View
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       *
       * Default value is `sap.gantt.config.DEFAULT_CHART_SCHEMES`.
       */
      setChartSchemes(
        /**
         * New value for property `chartSchemes`
         */
        sChartSchemes: object[]
      ): sap.gantt.GanttChartBase;
      /**
       * Sets a new value for property {@link #getEnableAdhocLine enableAdhocLine}.
       *
       * Switch to show and hide adhoc lines representing milestones and events along the time axis
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       *
       * Default value is `true`.
       */
      setEnableAdhocLine(
        /**
         * New value for property `enableAdhocLine`
         */
        bEnableAdhocLine: boolean
      ): sap.gantt.GanttChartBase;
      /**
       * Sets a new value for property {@link #getEnableCursorLine enableCursorLine}.
       *
       * Switch to show and hide the cursor line that follows the cursor.
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       *
       * Default value is `true`.
       */
      setEnableCursorLine(
        /**
         * New value for property `enableCursorLine`
         */
        bEnableCursorLine: boolean
      ): sap.gantt.GanttChartBase;
      /**
       * Sets a new value for property {@link #getEnableNowLine enableNowLine}.
       *
       * Switch to show and hide the present time indicator
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       *
       * Default value is `true`.
       */
      setEnableNowLine(
        /**
         * New value for property `enableNowLine`
         */
        bEnableNowLine: boolean
      ): sap.gantt.GanttChartBase;
      /**
       * Sets a new value for property {@link #getEnableShapeTimeDisplay enableShapeTimeDisplay}.
       *
       * Switch to show or hide the start time and end time of a shape when you drag it along the time line
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       *
       * Default value is `false`.
       */
      setEnableShapeTimeDisplay(
        /**
         * New value for property `enableShapeTimeDisplay`
         */
        bEnableShapeTimeDisplay: boolean
      ): sap.gantt.GanttChartBase;
      /**
       * Sets a new value for property {@link #getEnableVerticalLine enableVerticalLine}.
       *
       * Switch to show and hide vertical lines representing intervals along the time axis
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       *
       * Default value is `true`.
       */
      setEnableVerticalLine(
        /**
         * New value for property `enableVerticalLine`
         */
        bEnableVerticalLine: boolean
      ): sap.gantt.GanttChartBase;
      /**
       * Sets a new value for property {@link #getGhostAlignment ghostAlignment}.
       *
       * Defines how to adjust the relative position between a draggable shape and the mouse pointer.
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       *
       * Default value is `sap.gantt.dragdrop.GhostAlignment.None`.
       */
      setGhostAlignment(
        /**
         * New value for property `ghostAlignment`
         */
        sGhostAlignment: string
      ): sap.gantt.GanttChartBase;
      /**
       * Sets a new value for property {@link #getHeight height}.
       *
       * Height of the control.
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       *
       * Default value is `100%`.
       */
      setHeight(
        /**
         * New value for property `height`
         */
        sHeight: sap.ui.core.CSSSize
      ): sap.gantt.GanttChartBase;
      /**
       * Sets a new value for property {@link #getHierarchies hierarchies}.
       *
       * Configuration of hierarchies.
       *
       * List of available hierarchies. If not provided, a default configuration is provided. We recommend that
       * you set the type of this argument to `sap.gantt.config.Hierarchy[]`. Otherwise some properties you set
       * may not function properly.
       *
       * Limitation: It's defined as a property thus can not be used in XML View
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       *
       * Default value is `sap.gantt.config.DEFAULT_HIERARCHYS`.
       */
      setHierarchies(
        /**
         * New value for property `hierarchies`
         */
        sHierarchies: object[]
      ): sap.gantt.GanttChartBase;
      /**
       * Sets a new value for property {@link #getHierarchyKey hierarchyKey}.
       *
       * Current hierarchy key referencing from configuration property `hierarchies`.
       *
       * If `source select group` is enabled in the Gantt chart toolbar, the current hierarchy name referenced
       * from `hierarchies` by this property is shown. For applications that do not require this function, this
       * property can be ignored and a default value is used.
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       *
       * Default value is `sap.gantt.config.DEFAULT_HIERARCHY_KEY`.
       */
      setHierarchyKey(
        /**
         * New value for property `hierarchyKey`
         */
        sHierarchyKey: string
      ): sap.gantt.GanttChartBase;
      /**
       * Sets a new value for property {@link #getLocale locale}.
       *
       * Configuration of locale settings.
       *
       * Most locale settings can be configured in sap.ui.configuration objects. Only the time zone and day-light-saving
       * time option are provided by locale settings. We recommend that you set the type of this argument to `sap.gantt.config.Locale`.
       * Otherwise some properties you set may not function properly.
       *
       * Limitation: It's defined as a property thus can not be used in XML View
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       *
       * Default value is `sap.gantt.config.DEFAULT_LOCALE_CET`.
       */
      setLocale(
        /**
         * New value for property `locale`
         */
        oLocale: object
      ): sap.gantt.GanttChartBase;
      /**
       * Sets a new value for property {@link #getMode mode}.
       *
       * Current mode of the Gantt chart.
       *
       * If no value is provided, GanttChart uses a default mode key.
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       *
       * Default value is `sap.gantt.config.DEFAULT_MODE_KEY`.
       */
      setMode(
        /**
         * New value for property `mode`
         */
        sMode: string
      ): sap.gantt.GanttChartBase;
      /**
       * Sets a new value for property {@link #getModes modes}.
       *
       * Configuration of available modes.
       *
       * List of available modes. To apply modes to toolbar and shapes, further configuration is needed. If not
       * provided, a default configuration is provided. We recommend that you set the type of this argument to
       * `sap.gantt.config.Mode[]`. Otherwise some properties you set may not function properly.
       *
       * Limitation: It's defined as a property thus can not be used in XML View
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       *
       * Default value is `sap.gantt.config.DEFAULT_MODES`.
       */
      setModes(
        /**
         * New value for property `modes`
         */
        sModes: object[]
      ): sap.gantt.GanttChartBase;
      /**
       * @SINCE 1.68
       *
       * Sets a new value for property {@link #getNowLineInUTC nowLineInUTC}.
       *
       * Flag whether to show the `nowLine` in UTC or in local time.
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       *
       * Default value is `true`.
       */
      setNowLineInUTC(
        /**
         * New value for property `nowLineInUTC`
         */
        bNowLineInUTC: boolean
      ): sap.gantt.GanttChartBase;
      /**
       * Sets a new value for property {@link #getObjectTypes objectTypes}.
       *
       * Configuration of object types.
       *
       * List of available object types. If not provided, a default configuration is provided. We recommend that
       * you set the type of this argument to `sap.gantt.config.ObjectType[]`. Otherwise some properties you set
       * may not function properly.
       *
       * Limitation: It's defined as a property thus can not be used in XML View
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       *
       * Default value is `sap.gantt.config.DEFAULT_OBJECT_TYPES`.
       */
      setObjectTypes(
        /**
         * New value for property `objectTypes`
         */
        sObjectTypes: object[]
      ): sap.gantt.GanttChartBase;
      /**
       * @deprecated - Please use `tableProperties`(e.g. `setTableproperties({selectionMode: "None"})`) to control
       * table selection mode, and `shapeSelectionMode`(e.g. `setShapeSelectionMode("None")`) to control shape
       * selection mode.
       *
       * Sets a new value for property {@link #getSelectionMode selectionMode}.
       *
       * Selection mode for GanttChart
       *
       * This property controls whether multiToggle or multi-selection mode is enabled for the tree table and
       * for shapes. It may also affect the visual appearance, such as whether check boxes are available for selection.
       * From version 1.40 to upper versions, multi is replaced by multiToggle selection mode in tree table
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       *
       * Default value is `MultiWithKeyboard`.
       */
      setSelectionMode(
        /**
         * New value for property `selectionMode`
         */
        sSelectionMode: sap.gantt.SelectionMode
      ): sap.gantt.GanttChartBase;
      /**
       * Sets a new value for property {@link #getSelectionPanelSize selectionPanelSize}.
       *
       * This property control the size of the selection panel. The value will be overwritten by property `selectionPanelSize`
       * in `sap.gantt.config.ContainerLayout` if you are using GanttChartContainer
       *
       * In the current library, `sap.gantt.GanttChart` does not have a selection panel. `sap.gantt.GanttChartWithTable`
       * has a selection panel implemented by `sap.ui.table.TreeTable`.
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       *
       * Default value is `30%`.
       */
      setSelectionPanelSize(
        /**
         * New value for property `selectionPanelSize`
         */
        sSelectionPanelSize: sap.ui.core.CSSSize
      ): sap.gantt.GanttChartBase;
      /**
       * Sets a new value for property {@link #getShapeDataNames shapeDataNames}.
       *
       * Configuration of shape data names and the attribute in raw data that serves as 'id'.
       *
       * This property value should be an array, either an array of string, each string represents one available
       * shape data name, or an array of object, each object specifies the shape data name and data attribute
       * that will serves as 'id'. This configuration must be provided if SVG graphics are needed.
       *
       * Example: ` new sap.gantt.GanttChartWithTable({ shapeDataNames: ["task", "order"], shapes: [ new sap.gantt.shape.Shape({
       * key: "calendar", shapeDataName: "task" shapeClassName: "sap.gantt.shape.Rectangle", // ... }) ] // ...
       * }); `
       *
       * or in XMLView ` <GanttChartWithTable shapeDataNames="task,order"> </GanttChartWithTable>
       * `
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       *
       * Default value is `[]`.
       */
      setShapeDataNames(
        /**
         * New value for property `shapeDataNames`
         */
        sShapeDataNames: sap.gantt.GenericArray
      ): sap.gantt.GanttChartBase;
      /**
       * Sets a new value for property {@link #getShapes shapes}.
       *
       * Configuration of shape data against shape classes.
       *
       * List of available shapes. The shapes configured in this list are initialized inside `sap.gantt.GanttChartBase`.
       * Note that for JSON data binding, this configuration supports deep structured data structures. For ODATA
       * binding, only one level is supported. We recommend that you set the type of this argument to `sap.gantt.config.Shape[]`.
       * Otherwise some properties you set may not function properly.
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       *
       * Default value is `[]`.
       */
      setShapes(
        /**
         * New value for property `shapes`
         */
        sShapes: object[]
      ): sap.gantt.GanttChartBase;
      /**
       * Sets a new value for property {@link #getShapeSelectionMode shapeSelectionMode}.
       *
       * Selection mode for shape
       *
       * This property controls 4 shape selection modes(MultiWithKeyboard, Multiple, Single, None). You can use
       * `setShapeSelectionMode("None")` to set shape selection mode.
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       *
       * Default value is `MultiWithKeyboard`.
       */
      setShapeSelectionMode(
        /**
         * New value for property `shapeSelectionMode`
         */
        sShapeSelectionMode: sap.gantt.SelectionMode
      ): sap.gantt.GanttChartBase;
      /**
       * Sets a new value for property {@link #getSvgDefs svgDefs}.
       *
       * SVG reusable element definitions.
       *
       * If this property is provided, the paint server definition of the SVG is rendered. Method `getDefString()`
       * should be implemented by all paint server classes that are passed in in this property. We recommend that
       * you set the type of this argument to `sap.gantt.def.SvgDefs`. Otherwise some properties you set may not
       * function properly.
       *
       * Limitation: It's defined as a property thus can not be used in XML View
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       */
      setSvgDefs(
        /**
         * New value for property `svgDefs`
         */
        oSvgDefs: object
      ): sap.gantt.GanttChartBase;
      /**
       * Set exposed TreeTable properties
       */
      setTableProperties(
        /**
         * The object include some properties from TreeTable
         */
        oProperties: Object
      ): sap.gantt.GanttChart | sap.gantt.GanttChartWithTable;
      /**
       * @deprecated (since 1.44) - replaced by aggregation 'axisTimeStrategy'. Planning horizon, initial horizon,
       * and zoom level can be configured with this property. If not provided, a default configuration is provided.
       * We recommend that you set the type of this argument to `sap.gantt.config.TimeAxis`. Otherwise some properties
       * you set may not function properly.
       *
       * Limitation: It's defined as a property thus can not be used in XML View
       *
       * Sets a new value for property {@link #getTimeAxis timeAxis}.
       *
       * Configuration of the time axis.
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       *
       * Default value is `sap.gantt.config.DEFAULT_TIME_AXIS`.
       */
      setTimeAxis(
        /**
         * New value for property `timeAxis`
         */
        oTimeAxis: object
      ): sap.gantt.GanttChartBase;
      /**
       * @deprecated (since 1.44) - please use sap.gantt.axistime.AxisTimeStrategy to change the zoom rate
       *
       * Sets a new value for property {@link #getTimeZoomRate timeZoomRate}.
       *
       * Zoom level in float.
       *
       * This property allows application developers to control the zoom level. When GanttChart is embedded in
       * `sap.gantt.GanttChartContainer`, you do not have to manage this property.
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       *
       * Default value is `1`.
       */
      setTimeZoomRate(
        /**
         * New value for property `timeZoomRate`
         */
        fTimeZoomRate: number
      ): sap.gantt.GanttChartBase;
      /**
       * Sets a new value for property {@link #getToolbarSchemes toolbarSchemes}.
       *
       * Configuration of toolbar schemes.
       *
       * List of available toolbar schemes. If not provided, a default configuration is provided. We recommend
       * that you set the type of this argument to `sap.gantt.config.ToolbarScheme[]`. Otherwise some properties
       * you set may not function properly.
       *
       * Limitation: It's defined as a property thus can not be used in XML View
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       *
       * Default value is `sap.gantt.config.DEFAULT_GANTTCHART_TOOLBAR_SCHEMES`.
       */
      setToolbarSchemes(
        /**
         * New value for property `toolbarSchemes`
         */
        sToolbarSchemes: object[]
      ): sap.gantt.GanttChartBase;
      /**
       * Sets a new value for property {@link #getWidth width}.
       *
       * Width of the control.
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       *
       * Default value is `100%`.
       */
      setWidth(
        /**
         * New value for property `width`
         */
        sWidth: sap.ui.core.CSSSize
      ): sap.gantt.GanttChartBase;
      /**
       * Unbinds aggregation {@link #getAdhocLines adhocLines} from model data.
       */
      unbindAdhocLines(): sap.gantt.GanttChartBase;
      /**
       * Unbinds aggregation {@link #getAxisTimeStrategy axisTimeStrategy} from model data.
       */
      unbindAxisTimeStrategy(): sap.gantt.GanttChartBase;
      /**
       * Unbinds aggregation {@link #getCalendarDef calendarDef} from model data.
       */
      unbindCalendarDef(): sap.gantt.GanttChartBase;
      /**
       * Unbinds aggregation {@link #getRelationships relationships} from model data.
       */
      unbindRelationships(): sap.gantt.GanttChartBase;
      /**
       * Unbinds aggregation {@link #getRows rows} from model data.
       */
      unbindRows(): sap.gantt.GanttChartBase;
      /**
       * Attaches event handler `fnFunction` to the {@link #event:chartClick chartClick} event of this `sap.gantt.GanttChartBase`.
       *
       * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
       * otherwise it will be bound to this `sap.gantt.GanttChartBase` itself.
       *
       * Event fired when the chart is clicked
       */
      attachChartClick(
        /**
         * The function to be called when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object to call the event handler with. Defaults to this `sap.gantt.GanttChartBase` itself
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Attaches event handler `fnFunction` to the {@link #event:chartDoubleClick chartDoubleClick} event of
       * this `sap.gantt.GanttChartBase`.
       *
       * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
       * otherwise it will be bound to this `sap.gantt.GanttChartBase` itself.
       *
       * Event fired when the chart is double-clicked
       */
      attachChartDoubleClick(
        /**
         * The function to be called when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object to call the event handler with. Defaults to this `sap.gantt.GanttChartBase` itself
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Attaches event handler `fnFunction` to the {@link #event:chartDragEnter chartDragEnter} event of this
       * `sap.gantt.GanttChartBase`.
       *
       * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
       * otherwise it will be bound to this `sap.gantt.GanttChartBase` itself.
       */
      attachChartDragEnter(
        /**
         * The function to be called when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object to call the event handler with. Defaults to this `sap.gantt.GanttChartBase` itself
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Attaches event handler `fnFunction` to the {@link #event:chartDragLeave chartDragLeave} event of this
       * `sap.gantt.GanttChartBase`.
       *
       * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
       * otherwise it will be bound to this `sap.gantt.GanttChartBase` itself.
       */
      attachChartDragLeave(
        /**
         * The function to be called when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object to call the event handler with. Defaults to this `sap.gantt.GanttChartBase` itself
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Attaches event handler `fnFunction` to the {@link #event:chartMouseOver chartMouseOver} event of this
       * `sap.gantt.GanttChartBase`.
       *
       * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
       * otherwise it will be bound to this `sap.gantt.GanttChartBase` itself.
       *
       * Event is fired when a mouse-hover occurs in the graphic part.
       */
      attachChartMouseOver(
        /**
         * The function to be called when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object to call the event handler with. Defaults to this `sap.gantt.GanttChartBase` itself
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Attaches event handler `fnFunction` to the {@link #event:chartRightClick chartRightClick} event of this
       * `sap.gantt.GanttChartBase`.
       *
       * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
       * otherwise it will be bound to this `sap.gantt.GanttChartBase` itself.
       *
       * Event fired when the chart is right-clicked
       */
      attachChartRightClick(
        /**
         * The function to be called when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object to call the event handler with. Defaults to this `sap.gantt.GanttChartBase` itself
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Attaches event handler `fnFunction` to the {@link #event:ganttChartSwitchRequested ganttChartSwitchRequested}
       * event of this `sap.gantt.GanttChartBase`.
       *
       * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
       * otherwise it will be bound to this `sap.gantt.GanttChartBase` itself.
       *
       * Event fired when the hierarchy key has changed in the Gantt chart toolbar.
       */
      attachGanttChartSwitchRequested(
        /**
         * The function to be called when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object to call the event handler with. Defaults to this `sap.gantt.GanttChartBase` itself
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * @deprecated (since 1.44)
       *
       * Attaches event handler `fnFunction` to the {@link #event:horizontalScroll horizontalScroll} event of
       * this `sap.gantt.GanttChartBase`.
       *
       * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
       * otherwise it will be bound to this `sap.gantt.GanttChartBase` itself.
       *
       * Horizontal (time axis) scroll.
       *
       * If the horizontal scroll bar exists and synchronization is needed with other Gantt charts in the container,
       * use this event.
       */
      attachHorizontalScroll(
        /**
         * The function to be called when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object to call the event handler with. Defaults to this `sap.gantt.GanttChartBase` itself
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Attaches event handler `fnFunction` to the {@link #event:relationshipSelectionChange relationshipSelectionChange}
       * event of this `sap.gantt.GanttChartBase`.
       *
       * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
       * otherwise it will be bound to this `sap.gantt.GanttChartBase` itself.
       *
       * Event fired when the selection status of relationships changes.
       */
      attachRelationshipSelectionChange(
        /**
         * The function to be called when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object to call the event handler with. Defaults to this `sap.gantt.GanttChartBase` itself
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Attaches event handler `fnFunction` to the {@link #event:rowSelectionChange rowSelectionChange} event
       * of this `sap.gantt.GanttChartBase`.
       *
       * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
       * otherwise it will be bound to this `sap.gantt.GanttChartBase` itself.
       *
       * Event fired when the selection status of rows changes.
       */
      attachRowSelectionChange(
        /**
         * The function to be called when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object to call the event handler with. Defaults to this `sap.gantt.GanttChartBase` itself
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Attaches event handler `fnFunction` to the {@link #event:shapeDragEnd shapeDragEnd} event of this `sap.gantt.GanttChartBase`.
       *
       * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
       * otherwise it will be bound to this `sap.gantt.GanttChartBase` itself.
       *
       * Event fired when a drag-and-drop occurs on one or more selected shapes.
       */
      attachShapeDragEnd(
        /**
         * The function to be called when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object to call the event handler with. Defaults to this `sap.gantt.GanttChartBase` itself
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Attaches event handler `fnFunction` to the {@link #event:shapeMouseEnter shapeMouseEnter} event of this
       * `sap.gantt.GanttChartBase`.
       *
       * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
       * otherwise it will be bound to this `sap.gantt.GanttChartBase` itself.
       *
       * Event fired when the following conditions are met: The 'enableHover' property of Shape is set to true.
       * You hover the mouse on a shape and keep the mouse stationary for 500 millisecond or longer.
       */
      attachShapeMouseEnter(
        /**
         * The function to be called when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object to call the event handler with. Defaults to this `sap.gantt.GanttChartBase` itself
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Attaches event handler `fnFunction` to the {@link #event:shapeMouseLeave shapeMouseLeave} event of this
       * `sap.gantt.GanttChartBase`.
       *
       * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
       * otherwise it will be bound to this `sap.gantt.GanttChartBase` itself.
       *
       * Event fired when the following conditions are met: The 'enableHover' property of Shape is set to true.
       * You move the mouse out of a shape and keep the mouse stationary for 500 millisecond or longer.
       */
      attachShapeMouseLeave(
        /**
         * The function to be called when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object to call the event handler with. Defaults to this `sap.gantt.GanttChartBase` itself
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Attaches event handler `fnFunction` to the {@link #event:shapeResizeEnd shapeResizeEnd} event of this
       * `sap.gantt.GanttChartBase`.
       *
       * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
       * otherwise it will be bound to this `sap.gantt.GanttChartBase` itself.
       *
       * Event fired when a resizing occurs on a resized shape.
       */
      attachShapeResizeEnd(
        /**
         * The function to be called when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object to call the event handler with. Defaults to this `sap.gantt.GanttChartBase` itself
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Attaches event handler `fnFunction` to the {@link #event:shapeSelectionChange shapeSelectionChange} event
       * of this `sap.gantt.GanttChartBase`.
       *
       * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
       * otherwise it will be bound to this `sap.gantt.GanttChartBase` itself.
       *
       * Event fired when the selection status of shapes changes.
       */
      attachShapeSelectionChange(
        /**
         * The function to be called when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object to call the event handler with. Defaults to this `sap.gantt.GanttChartBase` itself
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Attaches event handler `fnFunction` to the {@link #event:splitterResize splitterResize} event of this
       * `sap.gantt.GanttChartBase`.
       *
       * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
       * otherwise it will be bound to this `sap.gantt.GanttChartBase` itself.
       *
       * Splitter (if exists) resized.
       *
       * If a splitter exists and synchronization is needed with other Gantt charts in the container, use this
       * event. You can listen for this event and obtain `zoomInfo`.
       */
      attachSplitterResize(
        /**
         * The function to be called when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object to call the event handler with. Defaults to this `sap.gantt.GanttChartBase` itself
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * Attaches event handler `fnFunction` to the {@link #event:treeTableToggleEvent treeTableToggleEvent} event
       * of this `sap.gantt.GanttChartBase`.
       *
       * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
       * otherwise it will be bound to this `sap.gantt.GanttChartBase` itself.
       *
       * Event fired when toggle node of the tree table.
       */
      attachTreeTableToggleEvent(
        /**
         * The function to be called when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object to call the event handler with. Defaults to this `sap.gantt.GanttChartBase` itself
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
      /**
       * @deprecated (since 1.44)
       *
       * Attaches event handler `fnFunction` to the {@link #event:verticalScroll verticalScroll} event of this
       * `sap.gantt.GanttChartBase`.
       *
       * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
       * otherwise it will be bound to this `sap.gantt.GanttChartBase` itself.
       *
       * Vertical (row axis) scroll.
       *
       * If the vertical scroll bar exists and synchronization is needed with other Gantt charts in the container,
       * use this event.
       */
      attachVerticalScroll(
        /**
         * The function to be called when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object to call the event handler with. Defaults to this `sap.gantt.GanttChartBase` itself
         */
        oListener?: object
      ): sap.gantt.GanttChartBase;
    }
    /**
     * @deprecated (since 1.64) - {@link sap.gantt.simple.GanttChartContainer} should be used instead.
     *
     * A container that holds one or more `GanttChartBase` instances.
     *
     *  This class has several built-in several controls to support `GanttChartBase` instances:
     * 	 - A toolbar above all Gantt Charts. Many built-in controls can be enabled or disabled using configuration
     * 			property `toolbarScheme`. Built-in functions include:
     * 	ComboBox for container selection
     * 	 - Buttons for Add View, Delete View, and Switch Splitter Orientation
     * 	 - Expand/Collapse groups for expandable charts
     * 	 - A zooming slider
     * 	 - A legend button
     * 	 - A Settings button  If nothing is added to the toolbar, the toolbar is hidden automatically.
     * 			For more information about the functions and configuration, see the API documentation of `sap.gantt.config.ToolbarScheme.`
     *
     * 	 - A Splitter containing aggregation `ganttCharts`
     */
    class GanttChartContainer extends sap.ui.core.Control {
      /**
       * Creates and initializes a new Gantt chart container.
       *
       * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
       * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
       * of the syntax of the settings object.
       */
      constructor(
        /**
         * ID for the new control, generated automatically if no ID is given
         */
        sId?: string,
        /**
         * Initial settings for the new control
         */
        mSettings?: GanttChartContainerOpts
      );

      /**
       * Adds some customToolbarItem to the aggregation {@link #getCustomToolbarItems customToolbarItems}.
       */
      addCustomToolbarItem(
        /**
         * The customToolbarItem to add; if empty, nothing is inserted
         */
        oCustomToolbarItem: sap.ui.core.Control
      ): sap.gantt.GanttChartContainer;
      /**
       * Adds some ganttChart to the aggregation {@link #getGanttCharts ganttCharts}.
       */
      addGanttChart(
        /**
         * The ganttChart to add; if empty, nothing is inserted
         */
        oGanttChart: sap.gantt.GanttChartBase
      ): sap.gantt.GanttChartContainer;
      /**
       * Attaches event handler `fnFunction` to the {@link #event:customSettingChange customSettingChange} event
       * of this `sap.gantt.GanttChartContainer`.
       *
       * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
       * otherwise it will be bound to this `sap.gantt.GanttChartContainer` itself.
       *
       * Event fired when the custom settings are changed.
       *
       * The Custom settings are application-injected settings that can be configured in the Settings dialog box.
       * This event allows the application to handle these settings. Only check boxes are supported.
       */
      attachCustomSettingChange(
        /**
         * An application-specific payload object that will be passed to the event handler along with the event
         * object when firing the event
         */
        oData: object,
        /**
         * The function to be called when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object to call the event handler with. Defaults to this `sap.gantt.GanttChartContainer` itself
         */
        oListener?: object
      ): sap.gantt.GanttChartContainer;
      /**
       * Attaches event handler `fnFunction` to the {@link #event:ganttChartChangeRequested ganttChartChangeRequested}
       * event of this `sap.gantt.GanttChartContainer`.
       *
       * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
       * otherwise it will be bound to this `sap.gantt.GanttChartContainer` itself.
       *
       * Event fired when any change occurs in the toolbar that requests the application to change aggregation
       * `ganttCharts`.
       *
       * Possible triggers are:
       * 	 - The source selection group changes in the container toolbar.
       * 	 - The layout group button is clicked in the container toolbar.
       * 	 - The source selection group changes in the Gantt chart toolbar.
       */
      attachGanttChartChangeRequested(
        /**
         * An application-specific payload object that will be passed to the event handler along with the event
         * object when firing the event
         */
        oData: object,
        /**
         * The function to be called when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object to call the event handler with. Defaults to this `sap.gantt.GanttChartContainer` itself
         */
        oListener?: object
      ): sap.gantt.GanttChartContainer;
      /**
       * Attaches event handler `fnFunction` to the {@link #event:treeTableToggleEvent treeTableToggleEvent} event
       * of this `sap.gantt.GanttChartContainer`.
       *
       * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
       * otherwise it will be bound to this `sap.gantt.GanttChartContainer` itself.
       *
       * Event fired when toggle node of the tree table.
       */
      attachTreeTableToggleEvent(
        /**
         * An application-specific payload object that will be passed to the event handler along with the event
         * object when firing the event
         */
        oData: object,
        /**
         * The function to be called when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object to call the event handler with. Defaults to this `sap.gantt.GanttChartContainer` itself
         */
        oListener?: object
      ): sap.gantt.GanttChartContainer;
      /**
       * Binds aggregation {@link #getCustomToolbarItems customToolbarItems} to model data.
       *
       * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
       * of the possible properties of `oBindingInfo`.
       */
      bindCustomToolbarItems(
        /**
         * The binding information
         */
        oBindingInfo: object
      ): sap.gantt.GanttChartContainer;
      /**
       * Binds aggregation {@link #getGanttCharts ganttCharts} to model data.
       *
       * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
       * of the possible properties of `oBindingInfo`.
       */
      bindGanttCharts(
        /**
         * The binding information
         */
        oBindingInfo: object
      ): sap.gantt.GanttChartContainer;
      /**
       * Deselects relationships and returns a success code.
       */
      deselectRelationships(
        /**
         * Index of the Gantt chart containing the relationships that you want to deselect
         */
        iGanttChartIndex?: number,
        /**
         * List of the relationships that you want to deselect
         */
        aIds?: any[]
      ): boolean;
      /**
       * Deselects rows and returns a success code.
       */
      deselectRows(
        /**
         * Index of the Gantt chart containing the rows that you want to deselect
         */
        iGanttChartIndex?: number,
        /**
         * List of the rows that you want to deselect
         */
        aIds?: any[]
      ): boolean;
      /**
       * Deselects in-row shapes and returns a success code.
       */
      deselectShapes(
        /**
         * Index of the Gantt chart containing the shapes that you want to deselect
         */
        iGanttChartIndex?: number,
        /**
         * List of the shapes that you want to deselect
         */
        aIds?: any[]
      ): boolean;
      /**
       * Destroys all the customToolbarItems in the aggregation {@link #getCustomToolbarItems customToolbarItems}.
       */
      destroyCustomToolbarItems(): sap.gantt.GanttChartContainer;
      /**
       * Destroys all the ganttCharts in the aggregation {@link #getGanttCharts ganttCharts}.
       */
      destroyGanttCharts(): sap.gantt.GanttChartContainer;
      /**
       * Destroys the legendContainer in the aggregation {@link #getLegendContainer legendContainer}.
       */
      destroyLegendContainer(): sap.gantt.GanttChartContainer;
      /**
       * Detaches event handler `fnFunction` from the {@link #event:customSettingChange customSettingChange} event
       * of this `sap.gantt.GanttChartContainer`.
       *
       * The passed function and listener object must match the ones used for event registration.
       */
      detachCustomSettingChange(
        /**
         * The function to be called, when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object on which the given function had to be called
         */
        oListener?: object
      ): sap.gantt.GanttChartContainer;
      /**
       * Detaches event handler `fnFunction` from the {@link #event:ganttChartChangeRequested ganttChartChangeRequested}
       * event of this `sap.gantt.GanttChartContainer`.
       *
       * The passed function and listener object must match the ones used for event registration.
       */
      detachGanttChartChangeRequested(
        /**
         * The function to be called, when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object on which the given function had to be called
         */
        oListener?: object
      ): sap.gantt.GanttChartContainer;
      /**
       * Detaches event handler `fnFunction` from the {@link #event:treeTableToggleEvent treeTableToggleEvent}
       * event of this `sap.gantt.GanttChartContainer`.
       *
       * The passed function and listener object must match the ones used for event registration.
       */
      detachTreeTableToggleEvent(
        /**
         * The function to be called, when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object on which the given function had to be called
         */
        oListener?: object
      ): sap.gantt.GanttChartContainer;
      /**
       * Creates a new subclass of class sap.gantt.GanttChartContainer with name `sClassName` and enriches it
       * with the information contained in `oClassInfo`.
       *
       * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
       */
      // @ts-ignore
      static extend(
        /**
         * Name of the class being created
         */
        sClassName: string,
        /**
         * Object literal with information about the class
         */
        oClassInfo?: object,
        /**
         * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
         */
        FNMetaImpl?: Function
      ): Function;
      /**
       * Fires event {@link #event:customSettingChange customSettingChange} to attached listeners.
       */
      fireCustomSettingChange(
        /**
         * Parameters to pass along with the event
         */
        mParameters?: {
          /**
           * ID of the custom setting
           */
          id?: string;
          /**
           * The value of the custom setting
           */
          value?: boolean;
        }
      ): sap.gantt.GanttChartContainer;
      /**
       * Fires event {@link #event:ganttChartChangeRequested ganttChartChangeRequested} to attached listeners.
       */
      fireGanttChartChangeRequested(
        /**
         * Parameters to pass along with the event
         */
        mParameters?: {
          /**
           * Action that caused the change.
           *
           * Possible action values are:
           * 	 - `'switchGanttChart'`: The source selection group of one Gantt chart toolbar is changed.
           * 	 - `'addGanttChart'`: The Add Gantt chart dropdown menu is selected.
           * 	 - `'lessGanttChart'`: The Less Gantt chart dropdown menu is selected.
           * 	 - `'switchContainerLayout'`: The source selection group of the Container toolbar is changed.
           */
          action?: string;
          /**
           * Provided for actions `'switchGanttChart'` and `'lessGanttChart'`.
           */
          ganttChartIndex?: number;
          /**
           * Provided for actions `'switchGanttChart'`, `'addGanttChart'` and `'lessGanttChart'`.
           */
          hierarchyKey?: string;
          /**
           * Provided for action `'switchGanttChart'`.
           */
          oldHierarchyKey?: string;
          /**
           * Provided for action `'switchContainerLayout'`.
           */
          containerLayoutKey?: string;
        }
      ): sap.gantt.GanttChartContainer;
      /**
       * Fires event {@link #event:treeTableToggleEvent treeTableToggleEvent} to attached listeners.
       */
      fireTreeTableToggleEvent(
        /**
         * Parameters to pass along with the event
         */
        mParameters?: {
          /**
           * The index of the expanded/collapsed row.
           */
          rowIndex?: number;
          /**
           * The binding context of the selected row.
           */
          rowContext?: object;
          /**
           * flag whether the node has been expanded or collapsed.
           */
          expanded?: boolean;
        }
      ): sap.gantt.GanttChartContainer;
      /**
       * Gets all selected rows and shapes, including relationships.
       */
      getAllSelections(
        /**
         * Index of the Gantt chart containing that you want to get
         */
        iGanttChartIndex?: number
      ): object;
      /**
       * Gets current value of property {@link #getContainerLayoutKey containerLayoutKey}.
       *
       * Current container layout key.
       *
       * This is a key configured in configuration property `containerLayouts`.
       *
       * Default value is `sap.gantt.config.DEFAULT_CONTAINER_SINGLE_LAYOUT_KEY`.
       */
      getContainerLayoutKey(): string;
      /**
       * Gets current value of property {@link #getContainerLayouts containerLayouts}.
       *
       * Configuration of container layouts.
       *
       * This configuration affects the data source selection ComboBox in the Container Toolbar. When the selection
       * changes, the `ganttChartChangeRequested` event that is triggered includes the corresponding layout key.
       * We recommend that you set the type of this argument to `sap.gantt.config.ContainerLayout[]`. Otherwise
       * some properties you set may not function properly.
       *
       * Limitation: It's defined as a property thus can not be used in XML View
       *
       * Default value is `sap.gantt.config.DEFAULT_CONTAINER_LAYOUTS`.
       */
      getContainerLayouts(): object[];
      /**
       * Gets content of aggregation {@link #getCustomToolbarItems customToolbarItems}.
       *
       * Controls to be placed in the container toolbar.
       *
       * This aggregation is used only when the custom toolbar item group is configured to be shown in the
       * container toolbar. Different from the built-in buttons that are configured to be shown or hidden, these
       * controls are free controls created by the application, but are only placed in the container toolbar by
       * `sap.gantt.GanttChartContainer`.
       *
       * If the source selection group is enabled and you want your application to use a container layout pre-configured
       * for a specific source, you can implement your custom toolbar items in the event handler of event `ganttChartChangeRequested`.
       */
      getCustomToolbarItems(): sap.ui.core.Control[];
      /**
       * Gets current value of property {@link #getEnableAdhocLine enableAdhocLine}.
       *
       * Switch to enable and disable adhoc lines representing milestones and events along the time axis.
       *
       * When this value is set, it overrides the corresponding value on instances of aggregation `ganttCharts`.
       *
       * Default value is `true`.
       */
      getEnableAdhocLine(): boolean;
      /**
       * Gets current value of property {@link #getEnableCursorLine enableCursorLine}.
       *
       * Switch to enable and disable the cursor line that follows the cursor.
       *
       * When this value is set, it overrides the corresponding value on instances of aggregation `ganttCharts`.
       *
       * Default value is `true`.
       */
      getEnableCursorLine(): boolean;
      /**
       * Gets current value of property {@link #getEnableNowLine enableNowLine}.
       *
       * Switch to enable and disable the present time indicator.
       *
       * When this value is set, it overrides the corresponding value on instances of aggregation `ganttCharts`.
       *
       * Default value is `true`.
       */
      getEnableNowLine(): boolean;
      /**
       * Gets current value of property {@link #getEnableTimeScrollSync enableTimeScrollSync}.
       *
       * Switch to enable and disable scroll synchronization by time on instances of aggregation `ganttCharts`.
       *
       * Default value is `true`.
       */
      getEnableTimeScrollSync(): boolean;
      /**
       * Gets current value of property {@link #getEnableVerticalLine enableVerticalLine}.
       *
       * Switch to enable and disable vertical lines representing intervals along the time axis.
       *
       * When this value is set, it overrides the corresponding value on instances of aggregation `ganttCharts`.
       *
       * Default value is `true`.
       */
      getEnableVerticalLine(): boolean;
      /**
       * Gets content of aggregation {@link #getGanttCharts ganttCharts}.
       *
       * Gantt chart instances.
       *
       * If the source selection group is enabled and you want your application to use a container layout pre-configured
       * for a specific source, you can implement your custom toolbar items in the event handler of event `ganttChartChangeRequested`.
       * Provide a Gantt chart in compliance with the container layout setting. GanttChartContainer is designed
       * to support Gantt chart layouts that include multiple views.
       */
      getGanttCharts(): sap.gantt.GanttChartBase[];
      /**
       * Gets current value of property {@link #getHeight height}.
       *
       * Height of the control
       *
       * Default value is `100%`.
       */
      getHeight(): sap.ui.core.CSSSize;
      /**
       * Gets current value of property {@link #getHierarchies hierarchies}.
       *
       * List of available hierarchies. If not provided, a default configuration is provided. We recommend that
       * you set the type of this argument to `sap.gantt.config.Hierarchy[]`. Otherwise some properties you set
       * may not function properly.
       *
       * Limitation: It's defined as a property thus can not be used in XML View
       *
       * Default value is `sap.gantt.config.DEFAULT_HIERARCHYS`.
       */
      getHierarchies(): object[];
      /**
       * Gets content of aggregation {@link #getLegendContainer legendContainer}.
       *
       * Legend shown when the legend button is clicked.
       *
       * This aggregation is used only when the Legend button is configured to be shown in the container toolbar.
       */
      getLegendContainer(): any;
      /**
       * Gets current value of property {@link #getMaxNumOfGanttCharts maxNumOfGanttCharts}.
       *
       * Define the maximum number of Gantt charts to be displayed on the same screen. When this number is reached,
       * the "Add Gantt Chart" button is grayed out.
       *
       * Default value is `3`.
       */
      getMaxNumOfGanttCharts(): number;
      /**
       * Returns a metadata object for class sap.gantt.GanttChartContainer.
       */
      // @ts-ignore
      static getMetadata(): sap.ui.base.Metadata;
      /**
       * Gets current value of property {@link #getModes modes}.
       *
       * List of available modes. To apply modes to the toolbar and shapes, further configuration is needed. (specifically,
       * in property `toolbarSchemes`, and properties `toolbarSchemes` and `shapes` in the `GanttChartBase` class)If
       * not provided, a default configuration is provided. We recommend that you set the type of this argument
       * to `sap.gantt.config.Mode[]`. Otherwise some properties you set may not function properly.
       *
       * Limitation: It's defined as a property thus can not be used in XML View
       *
       * Default value is `sap.gantt.config.DEFAULT_MODES`.
       */
      getModes(): object[];
      /**
       * Gets the selected relationships.
       */
      getSelectedRelationships(
        /**
         * Index of the Gantt chart containing the selected relationships that you want to get
         */
        iGanttChartIndex?: number
      ): any[];
      /**
       * Gets the selected rows.
       */
      getSelectedRows(
        /**
         * Index of the Gantt chart containing the selected rows that you want to get
         */
        iGanttChartIndex?: number
      ): any[];
      /**
       * Gets the selected in-row shapes.
       */
      getSelectedShapes(
        /**
         * Index of the Gantt chart containing the selected shapes that you want to get
         */
        iGanttChartIndex?: number
      ): any[];
      /**
       * @deprecated (since 1.44) - please set the property 'stepCountOfSlider' in sap.gantt.config.TimeZoomGroup.
       *
       * Gets current value of property {@link #getSliderStep sliderStep}.
       *
       * Define the amount of units to change the time zoom slider.
       *
       * See {@link sap.m.Slider#setStep}
       */
      getSliderStep(): number;
      /**
       * Gets current value of property {@link #getSvgDefs svgDefs}.
       *
       * Definitions of paint servers used for advanced shape features around SVG fill, stroke, and filter attributes.
       *
       * If this property is provided, the paint server definition of the SVG is rendered. Method `getDefString()`
       * should be implemented by all paint server classes that are passed in in this property. It is easier to
       * assign a common paint server definition in this class instead of in separate instances of `sap.gantt.GanttChartBase`.
       * Then the definition is rendered only once. We recommend that you set the type of this argument to `sap.gantt.def.SvgDefs`.
       * Otherwise some properties you set may not function properly.
       *
       * Limitation: It's defined as a property thus can not be used in XML View
       */
      getSvgDefs(): object;
      /**
       * Returns the current effective toolbar scheme key.
       */
      getToolbarSchemeKey(): string;
      /**
       * Gets current value of property {@link #getToolbarSchemes toolbarSchemes}.
       *
       * List of available toolbar schemes. If not provided, a default configuration is provided. We recommend
       * that you set the type of this argument to `sap.gantt.config.ToolbarScheme[]`. Otherwise some properties
       * you set may not function properly.
       *
       * Limitation: It's defined as a property thus can not be used in XML View
       *
       * Default value is `sap.gantt.config.DEFAULT_CONTAINER_TOOLBAR_SCHEMES`.
       */
      getToolbarSchemes(): object[];
      /**
       * Gets current value of property {@link #getWidth width}.
       *
       * Width of the control
       *
       * Default value is `100%`.
       */
      getWidth(): sap.ui.core.CSSSize;
      /**
       * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getCustomToolbarItems customToolbarItems}.
       * and returns its index if found or -1 otherwise.
       */
      indexOfCustomToolbarItem(
        /**
         * The customToolbarItem whose index is looked for
         */
        oCustomToolbarItem: sap.ui.core.Control
      ): number;
      /**
       * Checks for the provided `sap.gantt.GanttChartBase` in the aggregation {@link #getGanttCharts ganttCharts}.
       * and returns its index if found or -1 otherwise.
       */
      indexOfGanttChart(
        /**
         * The ganttChart whose index is looked for
         */
        oGanttChart: sap.gantt.GanttChartBase
      ): number;
      /**
       * Inserts a customToolbarItem into the aggregation {@link #getCustomToolbarItems customToolbarItems}.
       */
      insertCustomToolbarItem(
        /**
         * The customToolbarItem to insert; if empty, nothing is inserted
         */
        oCustomToolbarItem: sap.ui.core.Control,
        /**
         * The `0`-based index the customToolbarItem should be inserted at; for a negative value of `iIndex`, the
         * customToolbarItem is inserted at position 0; for a value greater than the current size of the aggregation,
         * the customToolbarItem is inserted at the last position
         */
        iIndex: number
      ): sap.gantt.GanttChartContainer;
      /**
       * Inserts a ganttChart into the aggregation {@link #getGanttCharts ganttCharts}.
       */
      insertGanttChart(
        /**
         * The ganttChart to insert; if empty, nothing is inserted
         */
        oGanttChart: sap.gantt.GanttChartBase,
        /**
         * The `0`-based index the ganttChart should be inserted at; for a negative value of `iIndex`, the ganttChart
         * is inserted at position 0; for a value greater than the current size of the aggregation, the ganttChart
         * is inserted at the last position
         */
        iIndex: number
      ): sap.gantt.GanttChartContainer;
      /**
       * Removes all the controls from the aggregation {@link #getCustomToolbarItems customToolbarItems}.
       *
       * Additionally, it unregisters them from the hosting UIArea.
       */
      removeAllCustomToolbarItems(): sap.ui.core.Control[];
      /**
       * Removes all the controls from the aggregation {@link #getGanttCharts ganttCharts}.
       *
       * Additionally, it unregisters them from the hosting UIArea.
       */
      removeAllGanttCharts(): sap.gantt.GanttChartBase[];
      /**
       * Removes a customToolbarItem from the aggregation {@link #getCustomToolbarItems customToolbarItems}.
       */
      removeCustomToolbarItem(
        /**
         * The customToolbarItem to remove or its index or id
         */
        vCustomToolbarItem: number | string | sap.ui.core.Control
      ): sap.ui.core.Control;
      /**
       * Removes a ganttChart from the aggregation {@link #getGanttCharts ganttCharts}.
       */
      removeGanttChart(
        /**
         * The ganttChart to remove or its index or id
         */
        vGanttChart: number | string | sap.gantt.GanttChartBase
      ): sap.gantt.GanttChartBase;
      /**
       * Selects relationships and returns a success code.
       */
      selectRelationships(
        /**
         * Index of the Gantt chart containing the relationships that you want to select
         */
        iGanttChartIndex?: number,
        /**
         * List of the relationships that you want to select
         */
        aIds?: any[],
        /**
         * Whether all other selected relationships are to be deselected
         */
        isExclusive?: boolean
      ): boolean;
      /**
       * Selects rows and returns a success code.
       */
      selectRows(
        /**
         * Index of the Gantt chart containing the rows that you want to select
         */
        iGanttChartIndex?: number,
        /**
         * List of the rows that you want to select
         */
        aIds?: any[],
        /**
         * Whether all other selected rows are to be deselected
         */
        isExclusive?: boolean
      ): boolean;
      /**
       * Selects rows and all shapes contained in these rows.
       */
      selectRowsAndShapes(
        /**
         * Index of the Gantt chart containing the rows and shapes that you want to select
         */
        iGanttChartIndex?: number,
        /**
         * Row UIDs
         */
        aIds?: any[],
        /**
         * Whether reset all other selected rows and shapes are to be reset
         */
        bIsExclusive?: boolean
      ): boolean;
      /**
       * Selects in-row shapes and returns a success code.
       */
      selectShapes(
        /**
         * Index of the Gantt chart containing the shapes that you want to select
         */
        iGanttChart?: number,
        /**
         * L of the shape IDs that you want to select
         */
        aIds?: any[],
        /**
         * Whether all other selected shapes are to be deselected
         */
        isExclusive?: boolean
      ): boolean;
      /**
       * Sets a new value for property {@link #getContainerLayoutKey containerLayoutKey}.
       *
       * Current container layout key.
       *
       * This is a key configured in configuration property `containerLayouts`.
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       *
       * Default value is `sap.gantt.config.DEFAULT_CONTAINER_SINGLE_LAYOUT_KEY`.
       */
      setContainerLayoutKey(
        /**
         * New value for property `containerLayoutKey`
         */
        sContainerLayoutKey: string
      ): sap.gantt.GanttChartContainer;
      /**
       * Sets a new value for property {@link #getContainerLayouts containerLayouts}.
       *
       * Configuration of container layouts.
       *
       * This configuration affects the data source selection ComboBox in the Container Toolbar. When the selection
       * changes, the `ganttChartChangeRequested` event that is triggered includes the corresponding layout key.
       * We recommend that you set the type of this argument to `sap.gantt.config.ContainerLayout[]`. Otherwise
       * some properties you set may not function properly.
       *
       * Limitation: It's defined as a property thus can not be used in XML View
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       *
       * Default value is `sap.gantt.config.DEFAULT_CONTAINER_LAYOUTS`.
       */
      setContainerLayouts(
        /**
         * New value for property `containerLayouts`
         */
        sContainerLayouts: object[]
      ): sap.gantt.GanttChartContainer;
      /**
       * Sets a new value for property {@link #getEnableAdhocLine enableAdhocLine}.
       *
       * Switch to enable and disable adhoc lines representing milestones and events along the time axis.
       *
       * When this value is set, it overrides the corresponding value on instances of aggregation `ganttCharts`.
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       *
       * Default value is `true`.
       */
      setEnableAdhocLine(
        /**
         * New value for property `enableAdhocLine`
         */
        bEnableAdhocLine: boolean
      ): sap.gantt.GanttChartContainer;
      /**
       * Sets a new value for property {@link #getEnableCursorLine enableCursorLine}.
       *
       * Switch to enable and disable the cursor line that follows the cursor.
       *
       * When this value is set, it overrides the corresponding value on instances of aggregation `ganttCharts`.
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       *
       * Default value is `true`.
       */
      setEnableCursorLine(
        /**
         * New value for property `enableCursorLine`
         */
        bEnableCursorLine: boolean
      ): sap.gantt.GanttChartContainer;
      /**
       * Sets a new value for property {@link #getEnableNowLine enableNowLine}.
       *
       * Switch to enable and disable the present time indicator.
       *
       * When this value is set, it overrides the corresponding value on instances of aggregation `ganttCharts`.
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       *
       * Default value is `true`.
       */
      setEnableNowLine(
        /**
         * New value for property `enableNowLine`
         */
        bEnableNowLine: boolean
      ): sap.gantt.GanttChartContainer;
      /**
       * Sets a new value for property {@link #getEnableTimeScrollSync enableTimeScrollSync}.
       *
       * Switch to enable and disable scroll synchronization by time on instances of aggregation `ganttCharts`.
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       *
       * Default value is `true`.
       */
      setEnableTimeScrollSync(
        /**
         * New value for property `enableTimeScrollSync`
         */
        bEnableTimeScrollSync: boolean
      ): sap.gantt.GanttChartContainer;
      /**
       * Sets a new value for property {@link #getEnableVerticalLine enableVerticalLine}.
       *
       * Switch to enable and disable vertical lines representing intervals along the time axis.
       *
       * When this value is set, it overrides the corresponding value on instances of aggregation `ganttCharts`.
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       *
       * Default value is `true`.
       */
      setEnableVerticalLine(
        /**
         * New value for property `enableVerticalLine`
         */
        bEnableVerticalLine: boolean
      ): sap.gantt.GanttChartContainer;
      /**
       * Sets a new value for property {@link #getHeight height}.
       *
       * Height of the control
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       *
       * Default value is `100%`.
       */
      setHeight(
        /**
         * New value for property `height`
         */
        sHeight: sap.ui.core.CSSSize
      ): sap.gantt.GanttChartContainer;
      /**
       * Sets a new value for property {@link #getHierarchies hierarchies}.
       *
       * List of available hierarchies. If not provided, a default configuration is provided. We recommend that
       * you set the type of this argument to `sap.gantt.config.Hierarchy[]`. Otherwise some properties you set
       * may not function properly.
       *
       * Limitation: It's defined as a property thus can not be used in XML View
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       *
       * Default value is `sap.gantt.config.DEFAULT_HIERARCHYS`.
       */
      setHierarchies(
        /**
         * New value for property `hierarchies`
         */
        sHierarchies: object[]
      ): sap.gantt.GanttChartContainer;
      /**
       * Sets the aggregated {@link #getLegendContainer legendContainer}.
       */
      setLegendContainer(
        /**
         * The legendContainer to set
         */
        oLegendContainer: any
      ): sap.gantt.GanttChartContainer;
      /**
       * Sets a new value for property {@link #getMaxNumOfGanttCharts maxNumOfGanttCharts}.
       *
       * Define the maximum number of Gantt charts to be displayed on the same screen. When this number is reached,
       * the "Add Gantt Chart" button is grayed out.
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       *
       * Default value is `3`.
       */
      setMaxNumOfGanttCharts(
        /**
         * New value for property `maxNumOfGanttCharts`
         */
        iMaxNumOfGanttCharts: number
      ): sap.gantt.GanttChartContainer;
      /**
       * Sets a new value for property {@link #getModes modes}.
       *
       * List of available modes. To apply modes to the toolbar and shapes, further configuration is needed. (specifically,
       * in property `toolbarSchemes`, and properties `toolbarSchemes` and `shapes` in the `GanttChartBase` class)If
       * not provided, a default configuration is provided. We recommend that you set the type of this argument
       * to `sap.gantt.config.Mode[]`. Otherwise some properties you set may not function properly.
       *
       * Limitation: It's defined as a property thus can not be used in XML View
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       *
       * Default value is `sap.gantt.config.DEFAULT_MODES`.
       */
      setModes(
        /**
         * New value for property `modes`
         */
        sModes: object[]
      ): sap.gantt.GanttChartContainer;
      /**
       * @deprecated (since 1.44) - please set the property 'stepCountOfSlider' in sap.gantt.config.TimeZoomGroup.
       *
       * Sets a new value for property {@link #getSliderStep sliderStep}.
       *
       * Define the amount of units to change the time zoom slider.
       *
       * See {@link sap.m.Slider#setStep}
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       */
      setSliderStep(
        /**
         * New value for property `sliderStep`
         */
        iSliderStep: number
      ): sap.gantt.GanttChartContainer;
      /**
       * Sets a new value for property {@link #getSvgDefs svgDefs}.
       *
       * Definitions of paint servers used for advanced shape features around SVG fill, stroke, and filter attributes.
       *
       * If this property is provided, the paint server definition of the SVG is rendered. Method `getDefString()`
       * should be implemented by all paint server classes that are passed in in this property. It is easier to
       * assign a common paint server definition in this class instead of in separate instances of `sap.gantt.GanttChartBase`.
       * Then the definition is rendered only once. We recommend that you set the type of this argument to `sap.gantt.def.SvgDefs`.
       * Otherwise some properties you set may not function properly.
       *
       * Limitation: It's defined as a property thus can not be used in XML View
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       */
      setSvgDefs(
        /**
         * New value for property `svgDefs`
         */
        oSvgDefs: object
      ): sap.gantt.GanttChartContainer;
      /**
       * Sets a new value for property {@link #getToolbarSchemes toolbarSchemes}.
       *
       * List of available toolbar schemes. If not provided, a default configuration is provided. We recommend
       * that you set the type of this argument to `sap.gantt.config.ToolbarScheme[]`. Otherwise some properties
       * you set may not function properly.
       *
       * Limitation: It's defined as a property thus can not be used in XML View
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       *
       * Default value is `sap.gantt.config.DEFAULT_CONTAINER_TOOLBAR_SCHEMES`.
       */
      setToolbarSchemes(
        /**
         * New value for property `toolbarSchemes`
         */
        sToolbarSchemes: object[]
      ): sap.gantt.GanttChartContainer;
      /**
       * Sets a new value for property {@link #getWidth width}.
       *
       * Width of the control
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       *
       * Default value is `100%`.
       */
      setWidth(
        /**
         * New value for property `width`
         */
        sWidth: sap.ui.core.CSSSize
      ): sap.gantt.GanttChartContainer;
      /**
       * Switches the splitter orientation.
       */
      switchOrientation(
        /**
         * Target orientation. If not provided, this method inverts the orientation.
         */
        vOrientation?: string,
        /**
         * If this value is provided, it overrides the target orientation from the current configuration indicated
         * by property `containerLayoutKey`.
         */
        bReadConfig?: boolean
      ): object;
      /**
       * Unbinds aggregation {@link #getCustomToolbarItems customToolbarItems} from model data.
       */
      unbindCustomToolbarItems(): sap.gantt.GanttChartContainer;
      /**
       * Unbinds aggregation {@link #getGanttCharts ganttCharts} from model data.
       */
      unbindGanttCharts(): sap.gantt.GanttChartContainer;
      /**
       * Attaches event handler `fnFunction` to the {@link #event:customSettingChange customSettingChange} event
       * of this `sap.gantt.GanttChartContainer`.
       *
       * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
       * otherwise it will be bound to this `sap.gantt.GanttChartContainer` itself.
       *
       * Event fired when the custom settings are changed.
       *
       * The Custom settings are application-injected settings that can be configured in the Settings dialog box.
       * This event allows the application to handle these settings. Only check boxes are supported.
       */
      attachCustomSettingChange(
        /**
         * The function to be called when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object to call the event handler with. Defaults to this `sap.gantt.GanttChartContainer` itself
         */
        oListener?: object
      ): sap.gantt.GanttChartContainer;
      /**
       * Attaches event handler `fnFunction` to the {@link #event:ganttChartChangeRequested ganttChartChangeRequested}
       * event of this `sap.gantt.GanttChartContainer`.
       *
       * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
       * otherwise it will be bound to this `sap.gantt.GanttChartContainer` itself.
       *
       * Event fired when any change occurs in the toolbar that requests the application to change aggregation
       * `ganttCharts`.
       *
       * Possible triggers are:
       * 	 - The source selection group changes in the container toolbar.
       * 	 - The layout group button is clicked in the container toolbar.
       * 	 - The source selection group changes in the Gantt chart toolbar.
       */
      attachGanttChartChangeRequested(
        /**
         * The function to be called when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object to call the event handler with. Defaults to this `sap.gantt.GanttChartContainer` itself
         */
        oListener?: object
      ): sap.gantt.GanttChartContainer;
      /**
       * Attaches event handler `fnFunction` to the {@link #event:treeTableToggleEvent treeTableToggleEvent} event
       * of this `sap.gantt.GanttChartContainer`.
       *
       * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
       * otherwise it will be bound to this `sap.gantt.GanttChartContainer` itself.
       *
       * Event fired when toggle node of the tree table.
       */
      attachTreeTableToggleEvent(
        /**
         * The function to be called when the event occurs
         */
        fnFunction: Function,
        /**
         * Context object to call the event handler with. Defaults to this `sap.gantt.GanttChartContainer` itself
         */
        oListener?: object
      ): sap.gantt.GanttChartContainer;
    }
    /**
     * @deprecated (since 1.64) - {@link sap.gantt.simple.GanttChartWithTable} should be used instead.
     *
     * Embed a `sap.ui.table.TreeTable` and a `sap.gantt.GanttChart` side-by-side.
     *
     * This class defines: The TreeTable part provide a column view of data with sorting/filtering functions
     * available. The svg chart part provide graphic Gantt chart view of data. Both width can be adjusted by
     * a splitter bar, and row scrolling are always synchronized.3
     */
    class GanttChartWithTable extends sap.gantt.GanttChartBase {
      /**
       * Creates and initializes a new Gantt Chart with a TreeTable control on the left and a svg chart area on
       * the right.
       *
       * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
       * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
       * of the syntax of the settings object.
       */
      constructor(
        /**
         * id for the new control, generated automatically if no id is given
         */
        sId?: string,
        /**
         * initial settings for the new control
         */
        mSettings?: GanttChartWithTableOpts
      );

      /**
       * Adds some column to the aggregation {@link #getColumns columns}.
       */
      addColumn(
        /**
         * The column to add; if empty, nothing is inserted
         */
        oColumn: sap.ui.table.Column
      ): sap.gantt.GanttChartWithTable;
      /**
       * Adds some customToolbarItem to the aggregation {@link #getCustomToolbarItems customToolbarItems}.
       */
      addCustomToolbarItem(
        /**
         * The customToolbarItem to add; if empty, nothing is inserted
         */
        oCustomToolbarItem: sap.ui.core.Control
      ): sap.gantt.GanttChartWithTable;
      /**
       * Triggers automatic resizing of a column to the widest content.(experimental!)
       * See:
       * 	sap.ui.table.Table.autoResizeColumn
       */
      autoResizeColumn(
        /**
         * column id
         */
        iColId: number
      ): void;
      /**
       * Binds aggregation {@link #getCustomToolbarItems customToolbarItems} to model data.
       *
       * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description
       * of the possible properties of `oBindingInfo`.
       */
      bindCustomToolbarItems(
        /**
         * The binding information
         */
        oBindingInfo: object
      ): sap.gantt.GanttChartWithTable;
      /**
       * Destroys all the columns in the aggregation {@link #getColumns columns}.
       */
      destroyColumns(): sap.gantt.GanttChartWithTable;
      /**
       * Destroys all the customToolbarItems in the aggregation {@link #getCustomToolbarItems customToolbarItems}.
       */
      destroyCustomToolbarItems(): sap.gantt.GanttChartWithTable;
      /**
       * Creates a new subclass of class sap.gantt.GanttChartWithTable with name `sClassName` and enriches it
       * with the information contained in `oClassInfo`.
       *
       * `oClassInfo` might contain the same kind of information as described in {@link sap.gantt.GanttChartBase.extend}.
       */
      // @ts-ignore
      static extend(
        /**
         * Name of the class being created
         */
        sClassName: string,
        /**
         * Object literal with information about the class
         */
        oClassInfo?: object,
        /**
         * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
         */
        FNMetaImpl?: Function
      ): Function;
      /**
       * Gets current value of property {@link #getCellCallback cellCallback}.
       *
       * A customized cell callback function.
       *
       *  This property is used in combination with configuration property `hierarchies`. If aggregation `columns`
       * is provided, property `hierarchies` and `cellCallback` is ignored. Otherwise property `hierarchies` must
       * provide column configurations that cellCallback can consume. And if cellCallback is not provided, a default
       * cellCallback adds `sap.m.Label` to fill cells.
       */
      getCellCallback(): object;
      /**
       * Gets content of aggregation {@link #getColumns columns}.
       *
       * Aggregation delegated to `sap.ui.table.Table`.
       *
       * If this aggregation is provided, call back property `cellCallBack` and column configuration in property
       * `hierarchies` will be ignored.
       */
      getColumns(): sap.ui.table.Column[];
      /**
       * Gets content of aggregation {@link #getCustomToolbarItems customToolbarItems}.
       *
       * Controls to be place in Gantt chart toolbar.
       *
       * This aggregation is only used when custom toolbar item group is configured to be shown in Gantt chart
       * toolbar. Different from the build-in buttons which are configured to be shown or hidden, these are free
       * controls created by application, only they are placed in container toolbar by `sap.gantt.GanttChartWithTable`.
       *
       * A common recommendation is, if the source select group is enabled and application wants to pre-configure
       * container layouts, the chance to change custom toolbar items is in event handler to event `ganttChartSwitchRequested`.
       */
      getCustomToolbarItems(): sap.ui.core.Control[];
      /**
       * @deprecated - We recommend use getTableProperties function instead
       *
       * Gets the first visible row of the selection panel.
       * See:
       * 	sap.ui.table.Table.getFirstVisibleRow
       */
      getFirstVisibleRow(): number;
      /**
       * @deprecated - We recommend use getTableProperties function instead
       *
       * To get fixedColumnCount value
       * See:
       * 	sap.ui.table.Table.getFixedColumnCount
       */
      getFixedColumnCount(): number;
      /**
       * Returns a metadata object for class sap.gantt.GanttChartWithTable.
       */
      // @ts-ignore
      static getMetadata(): sap.ui.base.Metadata;
      /**
       * Retrieves the lead selection index. The lead selection index is, among other things, used to determine
       * the start and end of a selection range, when using Shift-Click to select multiple entries.
       * See:
       * 	sap.ui.table.Table.getSelectedIndex
       */
      getSelectedIndex(): number[];
      /**
       * Returns the effective toolbar scheme key.
       */
      getToolbarSchemeKey(): string;
      /**
       * Checks for the provided `sap.ui.table.Column` in the aggregation {@link #getColumns columns}. and returns
       * its index if found or -1 otherwise.
       */
      indexOfColumn(
        /**
         * The column whose index is looked for
         */
        oColumn: sap.ui.table.Column
      ): number;
      /**
       * Checks for the provided `sap.ui.core.Control` in the aggregation {@link #getCustomToolbarItems customToolbarItems}.
       * and returns its index if found or -1 otherwise.
       */
      indexOfCustomToolbarItem(
        /**
         * The customToolbarItem whose index is looked for
         */
        oCustomToolbarItem: sap.ui.core.Control
      ): number;
      /**
       * Inserts a column into the aggregation {@link #getColumns columns}.
       */
      insertColumn(
        /**
         * The column to insert; if empty, nothing is inserted
         */
        oColumn: sap.ui.table.Column,
        /**
         * The `0`-based index the column should be inserted at; for a negative value of `iIndex`, the column is
         * inserted at position 0; for a value greater than the current size of the aggregation, the column is inserted
         * at the last position
         */
        iIndex: number
      ): sap.gantt.GanttChartWithTable;
      /**
       * Inserts a customToolbarItem into the aggregation {@link #getCustomToolbarItems customToolbarItems}.
       */
      insertCustomToolbarItem(
        /**
         * The customToolbarItem to insert; if empty, nothing is inserted
         */
        oCustomToolbarItem: sap.ui.core.Control,
        /**
         * The `0`-based index the customToolbarItem should be inserted at; for a negative value of `iIndex`, the
         * customToolbarItem is inserted at position 0; for a value greater than the current size of the aggregation,
         * the customToolbarItem is inserted at the last position
         */
        iIndex: number
      ): sap.gantt.GanttChartWithTable;
      /**
       * Scrolls the visible chart area to a certain time.
       *
       * It can be used to implement the function of 'Jump To First', 'Jump To Last' and 'Jump To Current'.
       */
      // @ts-ignore
      jumpToPosition(
        /**
         * The date object to which the user wants the visible area to scroll.
         */
        oDate: Date
      ): void;
      /**
       * Removes all the controls from the aggregation {@link #getColumns columns}.
       *
       * Additionally, it unregisters them from the hosting UIArea.
       */
      removeAllColumns(): sap.ui.table.Column[];
      /**
       * Removes all the controls from the aggregation {@link #getCustomToolbarItems customToolbarItems}.
       *
       * Additionally, it unregisters them from the hosting UIArea.
       */
      removeAllCustomToolbarItems(): sap.ui.core.Control[];
      /**
       * Removes a column from the aggregation {@link #getColumns columns}.
       */
      removeColumn(
        /**
         * The column to remove or its index or id
         */
        vColumn: number | string | sap.ui.table.Column
      ): sap.ui.table.Column;
      /**
       * Removes a customToolbarItem from the aggregation {@link #getCustomToolbarItems customToolbarItems}.
       */
      removeCustomToolbarItem(
        /**
         * The customToolbarItem to remove or its index or id
         */
        vCustomToolbarItem: number | string | sap.ui.core.Control
      ): sap.ui.core.Control;
      /**
       * Sets a new value for property {@link #getCellCallback cellCallback}.
       *
       * A customized cell callback function.
       *
       *  This property is used in combination with configuration property `hierarchies`. If aggregation `columns`
       * is provided, property `hierarchies` and `cellCallback` is ignored. Otherwise property `hierarchies` must
       * provide column configurations that cellCallback can consume. And if cellCallback is not provided, a default
       * cellCallback adds `sap.m.Label` to fill cells.
       *
       * When called with a value of `null` or `undefined`, the default value of the property will be restored.
       */
      setCellCallback(
        /**
         * New value for property `cellCallback`
         */
        oCellCallback: object
      ): sap.gantt.GanttChartWithTable;
      /**
       * @deprecated - We recommend use setTableProperties function instead
       *
       * Sets the first visible row in the selection panel.
       * See:
       * 	sap.ui.table.Table.setFirstVisibleRow
       */
      setFirstVisibleRow(
        /**
         * The row index to be set as the first visible row
         */
        iRowIndex: number
      ): sap.gantt.GanttChartWithTable;
      /**
       * @deprecated - We recommend use setTableProperties function instead
       *
       * To set fixedColumnCount value
       * See:
       * 	sap.ui.table.Table.setFixedColumnCount
       */
      setFixedColumnCount(
        iFixedColumnCount: number
      ): sap.gantt.GanttChartWithTable;
      /**
       * Selects a row in the selection panel.
       * See:
       * 	sap.ui.table.Table.setSelectedIndex
       */
      setSelectedIndex(
        /**
         * The row index to be selected (if any exists)
         */
        iRowIndex: number
      ): sap.gantt.GanttChartWithTable;
      /**
       * Allows to hide the hierarchy structure (tree icons, indentation) in left table. This might be useful
       * in some scenarios when the data is not hierarchical, no need for any expand/collapse. **Note:** In flat
       * mode the hierarchy is not visible to the user.
       */
      setUseFlatMode(
        /**
         * If set to `true`, the flat mode is enabled
         */
        bFlat: boolean
      ): void;
      /**
       * Unbinds aggregation {@link #getCustomToolbarItems customToolbarItems} from model data.
       */
      unbindCustomToolbarItems(): sap.gantt.GanttChartWithTable;
      /**
       * @SINCE 1.71
       *
       * Configures Gantt chart to use the provided selection plugin in its tables.
       */
      useSelectionPlugin(
        /**
         * Selection plugin to use. Passing an empty value disables any selection plugin that was used previously.
         */
        oSelectionPlugin: sap.ui.table.plugins.SelectionPlugin
      ): void;
    }
    /**
     * The layer of adhoc line in chart area
     */
    enum AdhocLineLayer {
      /**
       * Adhoc lines are below all other shapes. If a calendar is shown in the chart area, adhoc lines are on
       * top of the calendar.
       */
      Bottom,
      /**
       * Adhoc lines are on top of all other shapes and patterns.
       */
      Top
    }
    /**
     * CheckBox Value of ListLegend Item.
     */
    enum legend {}
    /**
     * Different zoom type for mouse wheel zooming
     */
    enum MouseWheelZoomType {
      /**
       * The granularity is the unit time range of innerInterval under current zoom level
       */
      FineGranular,
      /**
       * Do not support mouse wheel zooming
       */
      None,
      /**
       * The granularity is a whole zoom level, just like the global zoom slider does
       */
      Stepwise
    }
    /**
     * Different selection mode for GanttChart
     */
    enum SelectionMode {
      /**
       * Select multiple shapes at a time
       */
      Multiple,
      /**
       * Support multiple shape when pressing ctrl/meta key From version 1.40 to upper versions, support multiple
       * selection without Ctrl key for rows
       */
      MultiWithKeyboard,
      /**
       * No shape can be selected
       */
      None,
      /**
       * Select one shape at a time
       */
      Single
    }
  }

  interface IUI5DefineDependencyNames {
    "sap/gantt/config/BirdEyeGroup": undefined;

    "sap/gantt/config/ChartScheme": undefined;

    "sap/gantt/config/ColumnAttribute": undefined;

    "sap/gantt/config/ContainerLayout": undefined;

    "sap/gantt/config/ExpandChart": undefined;

    "sap/gantt/config/ExpandChartGroup": undefined;

    "sap/gantt/config/GanttChartLayout": undefined;

    "sap/gantt/config/Hierarchy": undefined;

    "sap/gantt/config/HierarchyColumn": undefined;

    "sap/gantt/config/LayoutGroup": undefined;

    "sap/gantt/config/Locale": undefined;

    "sap/gantt/config/Mode": undefined;

    "sap/gantt/config/ModeGroup": undefined;

    "sap/gantt/config/ObjectType": undefined;

    "sap/gantt/config/SettingGroup": undefined;

    "sap/gantt/config/SettingItem": undefined;

    "sap/gantt/config/Shape": undefined;

    "sap/gantt/config/TimeAxis": undefined;

    "sap/gantt/config/TimeHorizon": undefined;

    "sap/gantt/config/TimeZoomGroup": undefined;

    "sap/gantt/config/ToolbarGroup": undefined;

    "sap/gantt/config/ToolbarScheme": undefined;

    "sap/gantt/shape/cal/Calendar": undefined;

    "sap/gantt/shape/ext/rls/Relationship": undefined;

    "sap/gantt/shape/ext/rls/SelectedRelationship": undefined;

    "sap/gantt/shape/ext/ubc/UbcBorderPath": undefined;

    "sap/gantt/shape/ext/ubc/UbcOverCapacityZonePolygon": undefined;

    "sap/gantt/shape/ext/ubc/UbcPolygon": undefined;

    "sap/gantt/shape/ext/ubc/UbcShortageCapacityPolygon": undefined;

    "sap/gantt/shape/ext/ubc/UbcTooltipRectangle": undefined;

    "sap/gantt/shape/ext/ubc/UbcUnderCapacityZonePolygon": undefined;

    "sap/gantt/shape/ext/ubc/UbcUsedPolygon": undefined;

    "sap/gantt/shape/ext/ubc/UtilizationBarChart": undefined;

    "sap/gantt/shape/ext/ulc/UlcBorderPath": undefined;

    "sap/gantt/shape/ext/ulc/UlcClipingPath": undefined;

    "sap/gantt/shape/ext/ulc/UlcClipPath": undefined;

    "sap/gantt/shape/ext/ulc/UlcDimension": undefined;

    "sap/gantt/shape/ext/ulc/UlcMiddleLine": undefined;

    "sap/gantt/shape/ext/ulc/UlcOverCapacityZoneRectangle": undefined;

    "sap/gantt/shape/ext/ulc/UlcOverClipRectangle": undefined;

    "sap/gantt/shape/ext/ulc/UlcRectangle": undefined;

    "sap/gantt/shape/ext/ulc/UlcTooltipRectangle": undefined;

    "sap/gantt/shape/ext/ulc/UlcUnderClipRectangle": undefined;

    "sap/gantt/shape/ext/ulc/UtilizationLineChart": undefined;

    "sap/gantt/shape/ext/Chevron": undefined;

    "sap/gantt/shape/ext/Cursor": undefined;

    "sap/gantt/shape/ext/Diamond": undefined;

    "sap/gantt/shape/ext/Iconfont": undefined;

    "sap/gantt/shape/ext/Pentangle": undefined;

    "sap/gantt/shape/ext/TextRepeat": undefined;

    "sap/gantt/shape/ext/Triangle": undefined;

    "sap/gantt/shape/Circle": undefined;

    "sap/gantt/shape/ClipPath": undefined;

    "sap/gantt/shape/Definitions": undefined;

    "sap/gantt/shape/Group": undefined;

    "sap/gantt/shape/Image": undefined;

    "sap/gantt/shape/Line": undefined;

    "sap/gantt/shape/Path": undefined;

    "sap/gantt/shape/Polygon": undefined;

    "sap/gantt/shape/Polyline": undefined;

    "sap/gantt/shape/Rectangle": undefined;

    "sap/gantt/shape/ResizeShadowShape": undefined;

    "sap/gantt/shape/SelectedShape": undefined;

    "sap/gantt/shape/Shape": undefined;

    "sap/gantt/shape/Text": undefined;

    "sap/gantt/axistime/AxisTimeStrategyBase": undefined;

    "sap/gantt/axistime/FullScreenStrategy": undefined;

    "sap/gantt/axistime/ProportionZoomStrategy": undefined;

    "sap/gantt/axistime/StepwiseZoomStrategy": undefined;

    "sap/gantt/control/Cell": undefined;

    "sap/gantt/def/cal/Calendar": undefined;

    "sap/gantt/def/cal/CalendarDefs": undefined;

    "sap/gantt/def/cal/TimeInterval": undefined;

    "sap/gantt/def/filter/MorphologyFilter": undefined;

    "sap/gantt/def/gradient/LinearGradient": undefined;

    "sap/gantt/def/gradient/RadicalGradient": undefined;

    "sap/gantt/def/gradient/Stop": undefined;

    "sap/gantt/def/pattern/BackSlashPattern": undefined;

    "sap/gantt/def/pattern/PatternBase": undefined;

    "sap/gantt/def/pattern/SlashPattern": undefined;

    "sap/gantt/def/DefBase": undefined;

    "sap/gantt/def/SvgDefs": undefined;

    "sap/gantt/misc/AxisOrdinal": undefined;

    "sap/gantt/misc/AxisTimes": undefined;

    "sap/gantt/misc/Format": undefined;

    "sap/gantt/simple/shapes/Shape": undefined;

    "sap/gantt/simple/shapes/Task": undefined;

    "sap/gantt/simple/BaseCalendar": undefined;

    "sap/gantt/simple/BaseChevron": undefined;

    "sap/gantt/simple/BaseConditionalShape": undefined;

    "sap/gantt/simple/BaseCursor": undefined;

    "sap/gantt/simple/BaseDiamond": undefined;

    "sap/gantt/simple/BaseGroup": undefined;

    "sap/gantt/simple/BaseImage": undefined;

    "sap/gantt/simple/BaseLine": undefined;

    "sap/gantt/simple/BasePath": undefined;

    "sap/gantt/simple/BaseRectangle": undefined;

    "sap/gantt/simple/BaseShape": undefined;

    "sap/gantt/simple/BaseText": undefined;

    "sap/gantt/simple/ContainerToolbar": undefined;

    "sap/gantt/simple/ContainerToolbarPlaceholder": undefined;

    "sap/gantt/simple/DimensionLegend": undefined;

    "sap/gantt/simple/GanttChartContainer": undefined;

    "sap/gantt/simple/GanttChartWithTable": undefined;

    "sap/gantt/simple/GanttPrinting": undefined;

    "sap/gantt/simple/GanttRowSettings": undefined;

    "sap/gantt/simple/LegendColumnConfig": undefined;

    "sap/gantt/simple/LegendContainer": undefined;

    "sap/gantt/simple/LegendRowConfig": undefined;

    "sap/gantt/simple/ListLegend": undefined;

    "sap/gantt/simple/ListLegendItem": undefined;

    "sap/gantt/simple/Relationship": undefined;

    "sap/gantt/simple/ShapeScheme": undefined;

    "sap/gantt/simple/UtilizationBarChart": undefined;

    "sap/gantt/simple/UtilizationChart": undefined;

    "sap/gantt/simple/UtilizationDimension": undefined;

    "sap/gantt/simple/UtilizationLineChart": undefined;

    "sap/gantt/simple/UtilizationPeriod": undefined;

    "sap/gantt/AdhocLine": undefined;

    "sap/gantt/GanttChart": undefined;

    "sap/gantt/GanttChartBase": undefined;

    "sap/gantt/GanttChartContainer": undefined;

    "sap/gantt/GanttChartWithTable": undefined;
  }
}
