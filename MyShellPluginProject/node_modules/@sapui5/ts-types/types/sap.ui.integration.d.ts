// For Library Version: 1.71.13

declare namespace sap {
  namespace ui {
    /**
     * SAPUI5 library with controls specialized for SAP Fiori apps.
     */
    namespace integration {
      namespace widgets {
        interface CardOpts extends sap.ui.core.ControlOpts {
          /**
           * The URL of the manifest or an object.
           */
          manifest?: any;

          /**
           * @EXPERIMENTAL (since 1.65)
           *
           * The parameters used in the manifest.
           */
          parameters?: object;

          /**
           * Defines the width of the card.
           */
          width?: sap.ui.core.CSSSize;

          /**
           * Defines the height of the card.
           */
          height?: sap.ui.core.CSSSize;

          /**
           * @SINCE 1.65
           * @EXPERIMENTAL (since 1.65)
           *
           * Defines the state of the `Card`. When set to `Inactive`, the `Card` doesn't make requests.
           */
          dataMode?: sap.ui.integration.CardDataMode;

          /**
           * @SINCE 1.70
           * @EXPERIMENTAL (since 1.70)
           *
           * Defines the base URL of the Card Manifest. It should be used when manifest property is an object instead
           * of a URL.
           */
          baseUrl?: sap.ui.core.URI;

          /**
           * @EXPERIMENTAL (since 1.64)
           *
           * Fired when an action is triggered on the card.
           */
          action?: Function;

          /**
           * The ID of the host configuration.
           */
          hostConfigurationId?: sap.ui.core.Control | string;
        }
        /**
         * @SINCE 1.62
         *
         * A control that represents a container with a header and content.
         *
         * Overview: Cards are small user interface elements which provide the most important information from an
         * app, related to a specific role or task. The information is represented in a compact manner, allowing
         * for actions to be executed. Cards can be described as small representations of an app which can be integrated
         * in different systems.
         *
         * The integration card is defined in a declarative way, using a manifest.json to be:
         * 	 - Easily integrated into apps
         * 	 - Easily reused across apps
         * 	 - Understandable by other technologies
         * 	 - Self-contained (has a built-in functionality and doesn't need external configuration)
         * 	 - Dynamic parameter handling
         * 	 - Clear separation of the roles of the card and app developers
         *
         * The role of the card developer is to describe the card in a manifest.json file and define:
         * 	 - Header
         * 	 - Content
         * 	 - Data source
         * 	 - Possible actions
         *
         * The role of the app developer is to integrate the card into the app and define:
         * 	 - The dimensions of the card inside a layout of choice, using the `width` and `height` properties
         * 	 - The behavior for the actions described in the manifest.json file, using the action event
         *
         * **You can learn more about integration cards in the Card
         * Explorer**
         *
         * When to use
         * 	 - When you want to reuse the card across apps.
         * 	 - When you need easy integration and configuration.
         *
         * When not to use
         * 	 - When you need more header and content flexibility.
         * 	 - When you have to achieve simple card visualization. For such cases, use: {@link sap.f.Card Card}.
         *
         * 	 - When you have to use an application model. For such cases, use: {@link sap.f.Card Card}.
         * 	 - When you need complex behavior. For such cases, use: {@link sap.f.Card Card}.
         */
        class Card extends sap.ui.core.Control implements sap.f.ICard {
          /**
           * Constructor for a new `Card`.
           *
           * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
           * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
           * of the syntax of the settings object.
           * See:
           * 	{@link topic:5b46b03f024542ba802d99d67bc1a3f4 Cards}
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control
             */
            mSettings?: CardOpts
          );

          /**
           * @EXPERIMENTAL (since 1.64)
           *
           * Attaches event handler `fnFunction` to the {@link #event:action action} event of this `sap.ui.integration.widgets.Card`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.integration.widgets.Card` itself.
           *
           * Fired when an action is triggered on the card.
           */
          attachAction(
            /**
             * An application-specific payload object that will be passed to the event handler along with the event
             * object when firing the event
             */
            oData: object,
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.integration.widgets.Card` itself
             */
            oListener?: object
          ): sap.ui.integration.widgets.Card;
          /**
           * @EXPERIMENTAL (since 1.64)
           *
           * Detaches event handler `fnFunction` from the {@link #event:action action} event of this `sap.ui.integration.widgets.Card`.
           *
           * The passed function and listener object must match the ones used for event registration.
           */
          detachAction(
            /**
             * The function to be called, when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object on which the given function had to be called
             */
            oListener?: object
          ): sap.ui.integration.widgets.Card;
          /**
           * Creates a new subclass of class sap.ui.integration.widgets.Card with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
           */
          // @ts-ignore
          static extend(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: object,
            /**
             * Constructor function for the metadata object; if not given, it defaults to `sap.ui.core.ElementMetadata`
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * @EXPERIMENTAL (since 1.64)
           *
           * Fires event {@link #event:action action} to attached listeners.
           */
          fireAction(
            /**
             * Parameters to pass along with the event
             */
            mParameters?: {
              /**
               * The action source.
               */
              actionSource?: sap.ui.core.Control;
              /**
               * The manifest parameters related to the triggered action.
               */
              manifestParameters?: object;
              /**
               * The type of the action.
               */
              type?: any;
            }
          ): sap.ui.integration.widgets.Card;
          /**
           * @SINCE 1.70
           * @EXPERIMENTAL (since 1.70)
           *
           * Gets current value of property {@link #getBaseUrl baseUrl}.
           *
           * Defines the base URL of the Card Manifest. It should be used when manifest property is an object instead
           * of a URL.
           */
          getBaseUrl(): sap.ui.core.URI;
          /**
           * Implements sap.f.ICard interface.
           */
          getCardContent(): sap.ui.core.Control;
          /**
           * Implements sap.f.ICard interface.
           */
          getCardHeader(): sap.f.cards.IHeader;
          /**
           * Implements sap.f.ICard interface.
           */
          getCardHeaderPosition(): any;
          /**
           * @SINCE 1.65
           * @EXPERIMENTAL (since 1.65)
           *
           * Gets current value of property {@link #getDataMode dataMode}.
           *
           * Defines the state of the `Card`. When set to `Inactive`, the `Card` doesn't make requests.
           *
           * Default value is `Active`.
           */
          getDataMode(): sap.ui.integration.CardDataMode;
          /**
           * Gets current value of property {@link #getHeight height}.
           *
           * Defines the height of the card.
           *
           * Default value is `auto`.
           */
          getHeight(): sap.ui.core.CSSSize;
          /**
           * ID of the element which is the current target of the association {@link #getHostConfigurationId hostConfigurationId},
           * or `null`.
           */
          getHostConfigurationId(): sap.ui.core.ID;
          /**
           * Overwrites getter for card manifest.
           */
          getManifest(): string | Object;
          /**
           * Returns a metadata object for class sap.ui.integration.widgets.Card.
           */
          // @ts-ignore
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Overwrites getter for card parameters.
           */
          getParameters(): Object;
          /**
           * Gets current value of property {@link #getWidth width}.
           *
           * Defines the width of the card.
           *
           * Default value is `100%`.
           */
          getWidth(): sap.ui.core.CSSSize;
          /**
           * @EXPERIMENTAL (since 1.65)
           */
          isReady(): boolean;
          /**
           * @EXPERIMENTAL (since 1.65)
           *
           * Refreshes the card by re-applying the manifest settings and triggering all data requests.
           */
          refresh(): void;
          /**
           * @SINCE 1.70
           * @EXPERIMENTAL (since 1.70)
           *
           * Sets a new value for property {@link #getBaseUrl baseUrl}.
           *
           * Defines the base URL of the Card Manifest. It should be used when manifest property is an object instead
           * of a URL.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setBaseUrl(
            /**
             * New value for property `baseUrl`
             */
            sBaseUrl: sap.ui.core.URI
          ): sap.ui.integration.widgets.Card;
          /**
           * @SINCE 1.65
           * @EXPERIMENTAL (since 1.65)
           *
           * Sets a new value for the `dataMode` property.
           */
          setDataMode(
            /**
             * The mode to set to the Card.
             */
            sMode: sap.ui.integration.CardDataMode
          ): sap.ui.integration.widgets.Card;
          /**
           * Sets a new value for property {@link #getHeight height}.
           *
           * Defines the height of the card.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `auto`.
           */
          setHeight(
            /**
             * New value for property `height`
             */
            sHeight: sap.ui.core.CSSSize
          ): sap.ui.integration.widgets.Card;
          /**
           * Sets the associated {@link #getHostConfigurationId hostConfigurationId}.
           */
          setHostConfigurationId(
            /**
             * ID of an element which becomes the new target of this hostConfigurationId association; alternatively,
             * an element instance may be given
             */
            oHostConfigurationId: sap.ui.core.ID | sap.ui.core.Control
          ): sap.ui.integration.widgets.Card;
          /**
           * Sets a new value for property {@link #getManifest manifest}.
           *
           * The URL of the manifest or an object.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `empty string`.
           */
          setManifest(
            /**
             * New value for property `manifest`
             */
            oManifest: any
          ): sap.ui.integration.widgets.Card;
          /**
           * @EXPERIMENTAL (since 1.65)
           *
           * Sets a new value for property {@link #getParameters parameters}.
           *
           * The parameters used in the manifest.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           */
          setParameters(
            /**
             * New value for property `parameters`
             */
            oParameters: object
          ): sap.ui.integration.widgets.Card;
          /**
           * Sets a new value for property {@link #getWidth width}.
           *
           * Defines the width of the card.
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `100%`.
           */
          setWidth(
            /**
             * New value for property `width`
             */
            sWidth: sap.ui.core.CSSSize
          ): sap.ui.integration.widgets.Card;
          /**
           * @EXPERIMENTAL (since 1.64)
           *
           * Attaches event handler `fnFunction` to the {@link #event:action action} event of this `sap.ui.integration.widgets.Card`.
           *
           * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
           * otherwise it will be bound to this `sap.ui.integration.widgets.Card` itself.
           *
           * Fired when an action is triggered on the card.
           */
          attachAction(
            /**
             * The function to be called when the event occurs
             */
            fnFunction: Function,
            /**
             * Context object to call the event handler with. Defaults to this `sap.ui.integration.widgets.Card` itself
             */
            oListener?: object
          ): sap.ui.integration.widgets.Card;
        }
      }

      /**
       * @SINCE 1.65
       * @EXPERIMENTAL (since 1.65)
       *
       * Possible data modes for `{@link sap.ui.integration.widgets.Card}`.
       */
      enum CardDataMode {
        /**
         * When in this mode, the card can make requests.
         */
        Active,
        /**
         * When in this mode, the card cannot make requests.
         */
        Inactive
      }
    }
  }

  interface IUI5DefineDependencyNames {
    "sap/ui/integration/widgets/Card": undefined;
  }
}
